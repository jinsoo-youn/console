{"version":3,"file":"main-3cbad98caed9bf95cedd.js","sources":["webpack:///./packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/activity-card/cluster-expand-activity.tsx","webpack:///./packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/status-card/utils.ts","webpack:///./packages/ceph-storage-plugin/src/constants/index.ts","webpack:///./packages/ceph-storage-plugin/src/features.ts","webpack:///./packages/ceph-storage-plugin/src/models.ts","webpack:///./packages/ceph-storage-plugin/src/plugin.ts","webpack:///./packages/ceph-storage-plugin/src/utils/dashboard.ts","webpack:///./packages/ceph-storage-plugin/src/utils/index.ts","webpack:///./packages/console-app/src/actions/modify-health-checks.ts","webpack:///./packages/console-app/src/components/cloud-shell/CloudShell.tsx","webpack:///./packages/console-app/src/components/cloud-shell/CloudShellDrawer.scss?0f9c","webpack:///./packages/console-app/src/components/cloud-shell/CloudShellDrawer.tsx","webpack:///./packages/console-app/src/components/cloud-shell/CloudShellExec.tsx","webpack:///./packages/console-app/src/components/cloud-shell/CloudShellMastheadButton.tsx","webpack:///./packages/console-app/src/components/cloud-shell/CloudShellTab.scss?4fc3","webpack:///./packages/console-app/src/components/cloud-shell/CloudShellTab.tsx","webpack:///./packages/console-app/src/components/cloud-shell/CloudShellTerminal.scss?ac06","webpack:///./packages/console-app/src/components/cloud-shell/CloudShellTerminal.tsx","webpack:///./packages/console-app/src/components/cloud-shell/MinimizeRestoreButton.tsx","webpack:///./packages/console-app/src/components/cloud-shell/Terminal.scss?ae6d","webpack:///./packages/console-app/src/components/cloud-shell/Terminal.tsx","webpack:///./packages/console-app/src/components/cloud-shell/TerminalLoadingBox.tsx","webpack:///./packages/console-app/src/components/cloud-shell/cloud-shell-utils.ts","webpack:///./packages/console-app/src/components/cloud-shell/cloudShellConfirmationModal.ts","webpack:///./packages/console-app/src/components/cloud-shell/setup/CloudShellSetup.tsx","webpack:///./packages/console-app/src/components/cloud-shell/setup/CloudShellSetupForm.tsx","webpack:///./packages/console-app/src/components/cloud-shell/setup/NamespaceSection.tsx","webpack:///./packages/console-app/src/components/cloud-shell/setup/cloud-shell-setup-utils.ts","webpack:///./packages/console-app/src/components/cloud-shell/useActivityTick.ts","webpack:///./packages/console-app/src/components/cloud-shell/useCloudShellWorkspace.ts","webpack:///./packages/console-app/src/components/dashboards-page/activity.ts","webpack:///./packages/console-app/src/components/dashboards-page/status.ts","webpack:///./packages/console-app/src/components/nodes/NodeRoles.tsx","webpack:///./packages/console-app/src/components/nodes/NodeStatus.tsx","webpack:///./packages/console-app/src/components/nodes/NodesPage.tsx","webpack:///./packages/console-app/src/components/nodes/menu-actions.tsx","webpack:///./packages/console-app/src/components/nodes/modals/index.ts","webpack:///./packages/console-app/src/consts.ts","webpack:///./packages/console-app/src/k8s/requests/nodes.ts","webpack:///./packages/console-app/src/models/index.ts","webpack:///./packages/console-app/src/plugin.tsx","webpack:///./packages/console-app/src/queries.ts","webpack:///./packages/console-app/src/redux/actions/cloud-shell-actions.ts","webpack:///./packages/console-app/src/redux/reducer.ts","webpack:///./packages/console-app/src/redux/reducers/cloud-shell-reducer.ts","webpack:///./packages/console-app/src/status/node.ts","webpack:///./packages/console-plugin-sdk/src/index.ts","webpack:///./packages/console-plugin-sdk/src/registry.ts","webpack:///./packages/console-plugin-sdk/src/store.ts","webpack:///./packages/console-plugin-sdk/src/typings/clusterserviceversions.ts","webpack:///./packages/console-plugin-sdk/src/typings/dashboards.ts","webpack:///./packages/console-plugin-sdk/src/typings/dev-catalog.ts","webpack:///./packages/console-plugin-sdk/src/typings/features.ts","webpack:///./packages/console-plugin-sdk/src/typings/global-configs.ts","webpack:///./packages/console-plugin-sdk/src/typings/horizontal-nav.ts","webpack:///./packages/console-plugin-sdk/src/typings/index.ts","webpack:///./packages/console-plugin-sdk/src/typings/kebab-actions.ts","webpack:///./packages/console-plugin-sdk/src/typings/models.ts","webpack:///./packages/console-plugin-sdk/src/typings/nav-items.ts","webpack:///./packages/console-plugin-sdk/src/typings/overview.ts","webpack:///./packages/console-plugin-sdk/src/typings/pages.ts","webpack:///./packages/console-plugin-sdk/src/typings/perspectives.ts","webpack:///./packages/console-plugin-sdk/src/typings/reducers.ts","webpack:///./packages/console-plugin-sdk/src/typings/yaml-templates.ts","webpack:///./packages/console-plugin-sdk/src/useExtensions.ts","webpack:///./packages/console-plugin-sdk/src/withExtensions.tsx","webpack:///./packages/console-shared/src/components/alerts/error.tsx","webpack:///./packages/console-shared/src/components/badges/Badge.scss?e349","webpack:///./packages/console-shared/src/components/badges/DevPreviewBadge.tsx","webpack:///./packages/console-shared/src/components/badges/InlineBadge.tsx","webpack:///./packages/console-shared/src/components/badges/TechPreviewBadge.tsx","webpack:///./packages/console-shared/src/components/badges/badge-factory.tsx","webpack:///./packages/console-shared/src/components/badges/index.ts","webpack:///./packages/console-shared/src/components/contextMenu/PopupKebabMenu.scss?aecc","webpack:///./packages/console-shared/src/components/contextMenu/PopupKebabMenu.tsx","webpack:///./packages/console-shared/src/components/contextMenu/index.ts","webpack:///./packages/console-shared/src/components/dashboard/Dashboard.tsx","webpack:///./packages/console-shared/src/components/dashboard/DashboardGrid.tsx","webpack:///./packages/console-shared/src/components/dashboard/activity-card/ActivityBody.tsx","webpack:///./packages/console-shared/src/components/dashboard/activity-card/ActivityItem.tsx","webpack:///./packages/console-shared/src/components/dashboard/activity-card/EventItem.tsx","webpack:///./packages/console-shared/src/components/dashboard/activity-card/activity-card.scss?3e5b","webpack:///./packages/console-shared/src/components/dashboard/dashboard-card/DashboardCard.tsx","webpack:///./packages/console-shared/src/components/dashboard/dashboard-card/DashboardCardBody.tsx","webpack:///./packages/console-shared/src/components/dashboard/dashboard-card/DashboardCardHeader.tsx","webpack:///./packages/console-shared/src/components/dashboard/dashboard-card/DashboardCardLink.tsx","webpack:///./packages/console-shared/src/components/dashboard/dashboard-card/DashboardCardTitle.tsx","webpack:///./packages/console-shared/src/components/dashboard/dashboard-card/card.scss?6f98","webpack:///./packages/console-shared/src/components/dashboard/dashboard.scss?7f45","webpack:///./packages/console-shared/src/components/dashboard/details-card/DetailItem.tsx","webpack:///./packages/console-shared/src/components/dashboard/details-card/DetailsBody.tsx","webpack:///./packages/console-shared/src/components/dashboard/details-card/details-card.scss?bca0","webpack:///./packages/console-shared/src/components/dashboard/duration-hook.ts","webpack:///./packages/console-shared/src/components/dashboard/inventory-card/InventoryItem.tsx","webpack:///./packages/console-shared/src/components/dashboard/inventory-card/inventory-card.scss?2c8f","webpack:///./packages/console-shared/src/components/dashboard/inventory-card/status-group.ts","webpack:///./packages/console-shared/src/components/dashboard/inventory-card/utils.ts","webpack:///./packages/console-shared/src/components/dashboard/launcher-card/LauncherBody.tsx","webpack:///./packages/console-shared/src/components/dashboard/launcher-card/LauncherItem.tsx","webpack:///./packages/console-shared/src/components/dashboard/launcher-card/launcher-card.scss?23c7","webpack:///./packages/console-shared/src/components/dashboard/resource-quota-card/ResourceQuotaBody.tsx","webpack:///./packages/console-shared/src/components/dashboard/resource-quota-card/ResourceQuotaItem.tsx","webpack:///./packages/console-shared/src/components/dashboard/resource-quota-card/resource-quota-card.scss?141c","webpack:///./packages/console-shared/src/components/dashboard/status-card/HealthBody.tsx","webpack:///./packages/console-shared/src/components/dashboard/status-card/StatusPopup.tsx","webpack:///./packages/console-shared/src/components/dashboard/status-card/alert-utils.ts","webpack:///./packages/console-shared/src/components/dashboard/status-card/state-utils.ts","webpack:///./packages/console-shared/src/components/dashboard/status-card/states.tsx","webpack:///./packages/console-shared/src/components/dashboard/status-card/status-card.scss?4e0e","webpack:///./packages/console-shared/src/components/dashboard/status-card/status-popup.scss?2b60","webpack:///./packages/console-shared/src/components/dashboard/utilization-card/TopConsumerPopover.tsx","webpack:///./packages/console-shared/src/components/dashboard/utilization-card/UtilizationBody.tsx","webpack:///./packages/console-shared/src/components/dashboard/utilization-card/UtilizationItem.tsx","webpack:///./packages/console-shared/src/components/dashboard/utilization-card/top-consumer-popover.scss?e465","webpack:///./packages/console-shared/src/components/dashboard/utilization-card/utilization-card.scss?079c","webpack:///./packages/console-shared/src/components/drawer/DraggableCoreIFrameFix.scss?76a8","webpack:///./packages/console-shared/src/components/drawer/DraggableCoreIFrameFix.tsx","webpack:///./packages/console-shared/src/components/drawer/Drawer.scss?efdc","webpack:///./packages/console-shared/src/components/drawer/Drawer.tsx","webpack:///./packages/console-shared/src/components/drawer/index.ts","webpack:///./packages/console-shared/src/components/dropdown/ResourceDropdown.tsx","webpack:///./packages/console-shared/src/components/dropdown/index.ts","webpack:///./packages/console-shared/src/components/error/error-boundary.tsx","webpack:///./packages/console-shared/src/components/form-utils/ActionGroupWithIcons.tsx","webpack:///./packages/console-shared/src/components/form-utils/FlexForm.tsx","webpack:///./packages/console-shared/src/components/form-utils/FormFooter.scss?bd39","webpack:///./packages/console-shared/src/components/form-utils/FormFooter.tsx","webpack:///./packages/console-shared/src/components/form-utils/PageBody.tsx","webpack:///./packages/console-shared/src/components/form-utils/index.ts","webpack:///./packages/console-shared/src/components/formik-fields/BaseInputField.tsx","webpack:///./packages/console-shared/src/components/formik-fields/CheckboxField.tsx","webpack:///./packages/console-shared/src/components/formik-fields/DropdownField.tsx","webpack:///./packages/console-shared/src/components/formik-fields/DroppableFileInputField.tsx","webpack:///./packages/console-shared/src/components/formik-fields/EnvironmentField.tsx","webpack:///./packages/console-shared/src/components/formik-fields/InputField.tsx","webpack:///./packages/console-shared/src/components/formik-fields/InputGroupField.tsx","webpack:///./packages/console-shared/src/components/formik-fields/NSDropdownField.tsx","webpack:///./packages/console-shared/src/components/formik-fields/NumberSpinnerField.tsx","webpack:///./packages/console-shared/src/components/formik-fields/RadioButtonField.tsx","webpack:///./packages/console-shared/src/components/formik-fields/RadioGroupField.scss?c9f3","webpack:///./packages/console-shared/src/components/formik-fields/RadioGroupField.tsx","webpack:///./packages/console-shared/src/components/formik-fields/ResourceDropdownField.tsx","webpack:///./packages/console-shared/src/components/formik-fields/ResourceLimitField.tsx","webpack:///./packages/console-shared/src/components/formik-fields/SwitchField.tsx","webpack:///./packages/console-shared/src/components/formik-fields/TextAreaField.tsx","webpack:///./packages/console-shared/src/components/formik-fields/TextColumnField.tsx","webpack:///./packages/console-shared/src/components/formik-fields/ToggleableFieldBase.tsx","webpack:///./packages/console-shared/src/components/formik-fields/YAMLEditorField.tsx","webpack:///./packages/console-shared/src/components/formik-fields/field-types.ts","webpack:///./packages/console-shared/src/components/formik-fields/field-utils.ts","webpack:///./packages/console-shared/src/components/formik-fields/index.ts","webpack:///./packages/console-shared/src/components/formik-fields/item-selector-field/ItemSelectorField.scss?14e5","webpack:///./packages/console-shared/src/components/formik-fields/item-selector-field/ItemSelectorField.tsx","webpack:///./packages/console-shared/src/components/formik-fields/item-selector-field/SelectorCard.scss?92a6","webpack:///./packages/console-shared/src/components/formik-fields/item-selector-field/SelectorCard.tsx","webpack:///./packages/console-shared/src/components/formik-fields/multi-column-field/MultiColumnField.scss?8940","webpack:///./packages/console-shared/src/components/formik-fields/multi-column-field/MultiColumnField.tsx","webpack:///./packages/console-shared/src/components/formik-fields/multi-column-field/MultiColumnFieldFooter.tsx","webpack:///./packages/console-shared/src/components/formik-fields/multi-column-field/MultiColumnFieldHeader.tsx","webpack:///./packages/console-shared/src/components/formik-fields/multi-column-field/MultiColumnFieldRow.tsx","webpack:///./packages/console-shared/src/components/formik-fields/multi-column-field/multicolumn-field-utils.ts","webpack:///./packages/console-shared/src/components/health-checks/HealthChecksAlert.scss?cd2a","webpack:///./packages/console-shared/src/components/health-checks/HealthChecksAlert.tsx","webpack:///./packages/console-shared/src/components/health-checks/index.ts","webpack:///./packages/console-shared/src/components/index.ts","webpack:///./packages/console-shared/src/components/lists/DetailPropertyList.scss?777f","webpack:///./packages/console-shared/src/components/lists/DetailPropertyList.tsx","webpack:///./packages/console-shared/src/components/lists/DetailPropertyListItem.tsx","webpack:///./packages/console-shared/src/components/lists/index.ts","webpack:///./packages/console-shared/src/components/pod/PodRing.scss?1c9e","webpack:///./packages/console-shared/src/components/pod/PodRing.tsx","webpack:///./packages/console-shared/src/components/pod/PodRingDataController.tsx","webpack:///./packages/console-shared/src/components/pod/PodStatus.scss?df31","webpack:///./packages/console-shared/src/components/pod/PodStatus.tsx","webpack:///./packages/console-shared/src/components/pod/index.ts","webpack:///./packages/console-shared/src/components/popper/Popper.tsx","webpack:///./packages/console-shared/src/components/popper/Portal.tsx","webpack:///./packages/console-shared/src/components/popper/index.ts","webpack:///./packages/console-shared/src/components/shortcuts/Shortcut.scss?696d","webpack:///./packages/console-shared/src/components/shortcuts/Shortcut.tsx","webpack:///./packages/console-shared/src/components/shortcuts/ShortcutTable.tsx","webpack:///./packages/console-shared/src/components/shortcuts/index.ts","webpack:///./packages/console-shared/src/components/status/GenericStatus.tsx","webpack:///./packages/console-shared/src/components/status/LinkStatus.tsx","webpack:///./packages/console-shared/src/components/status/PopoverStatus.tsx","webpack:///./packages/console-shared/src/components/status/SecondaryStatus.tsx","webpack:///./packages/console-shared/src/components/status/Status.tsx","webpack:///./packages/console-shared/src/components/status/StatusIconAndText.tsx","webpack:///./packages/console-shared/src/components/status/icons.tsx","webpack:///./packages/console-shared/src/components/status/index.tsx","webpack:///./packages/console-shared/src/components/status/statuses.tsx","webpack:///./packages/console-shared/src/constants/common.ts","webpack:///./packages/console-shared/src/constants/index.ts","webpack:///./packages/console-shared/src/constants/pod.ts","webpack:///./packages/console-shared/src/constants/resource.ts","webpack:///./packages/console-shared/src/constants/ui.ts","webpack:///./packages/console-shared/src/graph-helper/data-utils.ts","webpack:///./packages/console-shared/src/hooks/debounce.ts","webpack:///./packages/console-shared/src/hooks/deep-compare-memoize.ts","webpack:///./packages/console-shared/src/hooks/document-listener.ts","webpack:///./packages/console-shared/src/hooks/formik-validation-fix.ts","webpack:///./packages/console-shared/src/hooks/fullscreen.ts","webpack:///./packages/console-shared/src/hooks/index.ts","webpack:///./packages/console-shared/src/hooks/plugins-overview-tab-section.ts","webpack:///./packages/console-shared/src/hooks/scroll.ts","webpack:///./packages/console-shared/src/images/operator.svg","webpack:///./packages/console-shared/src/index.ts","webpack:///./packages/console-shared/src/selectors/common.ts","webpack:///./packages/console-shared/src/selectors/index.ts","webpack:///./packages/console-shared/src/selectors/infrastructure.ts","webpack:///./packages/console-shared/src/selectors/machine.ts","webpack:///./packages/console-shared/src/selectors/namespace.ts","webpack:///./packages/console-shared/src/selectors/node.ts","webpack:///./packages/console-shared/src/selectors/pod.ts","webpack:///./packages/console-shared/src/sorts/index.ts","webpack:///./packages/console-shared/src/sorts/nodes.ts","webpack:///./packages/console-shared/src/types/index.ts","webpack:///./packages/console-shared/src/utils/ResourceStatus.tsx","webpack:///./packages/console-shared/src/utils/grammar.ts","webpack:///./packages/console-shared/src/utils/icon-utils.ts","webpack:///./packages/console-shared/src/utils/index.ts","webpack:///./packages/console-shared/src/utils/label-filter.ts","webpack:///./packages/console-shared/src/utils/namespace.ts","webpack:///./packages/console-shared/src/utils/owner-references.ts","webpack:///./packages/console-shared/src/utils/pod-ring-text.scss?e8a6","webpack:///./packages/console-shared/src/utils/pod-ring-utils.ts","webpack:///./packages/console-shared/src/utils/pod-utils.ts","webpack:///./packages/console-shared/src/utils/resource-utils.ts","webpack:///./packages/console-shared/src/utils/storage-utils.ts","webpack:///./packages/console-shared/src/utils/table-utils.ts","webpack:///./packages/console-shared/src/utils/transformResourceData.ts","webpack:///./packages/console-shared/src/utils/useCombineRefs.ts","webpack:///./packages/console-shared/src/utils/utils.ts","webpack:///./packages/console-shared/src/utils/validation/index.ts","webpack:///./packages/console-shared/src/utils/validation/strings.ts","webpack:///./packages/console-shared/src/utils/validation/types.ts","webpack:///./packages/console-shared/src/utils/validation/validation.ts","webpack:///./packages/container-security/src/components/summary.tsx","webpack:///./packages/container-security/src/const.ts","webpack:///./packages/container-security/src/models.ts","webpack:///./packages/container-security/src/plugin.ts","webpack:///./packages/dev-console/src/actions/modify-application.ts","webpack:///./packages/dev-console/src/components/import/import-types.ts","webpack:///./packages/dev-console/src/components/modals/index.ts","webpack:///./packages/dev-console/src/components/topology/redux/action.ts","webpack:///./packages/dev-console/src/components/topology/redux/const.ts","webpack:///./packages/dev-console/src/components/topology/redux/reducer.ts","webpack:///./packages/dev-console/src/const.ts","webpack:///./packages/dev-console/src/images/dockerfile.svg","webpack:///./packages/dev-console/src/images/from-git.svg","webpack:///./packages/dev-console/src/images/pipeline.svg","webpack:///./packages/dev-console/src/images/yaml.svg","webpack:///./packages/dev-console/src/models/applications.ts","webpack:///./packages/dev-console/src/models/index.ts","webpack:///./packages/dev-console/src/models/pipelines.ts","webpack:///./packages/dev-console/src/models/service-binding.ts","webpack:///./packages/dev-console/src/plugin.tsx","webpack:///./packages/dev-console/src/templates/index.ts","webpack:///./packages/dev-console/src/templates/pipelines.ts","webpack:///./packages/dev-console/src/utils/add-resources-menu-utils.ts","webpack:///./packages/dev-console/src/utils/kebab-actions.ts","webpack:///./packages/dev-console/src/utils/pipeline-filter-reducer.ts","webpack:///./packages/dev-console/src/utils/pipeline-plugin-utils.ts","webpack:///./packages/dev-console/src/utils/reducer.ts","webpack:///./packages/knative-plugin/src/actions/add-event-source.tsx","webpack:///./packages/knative-plugin/src/actions/index.ts","webpack:///./packages/knative-plugin/src/actions/sink-source.ts","webpack:///./packages/knative-plugin/src/actions/traffic-splitting.ts","webpack:///./packages/knative-plugin/src/components/modals/index.ts","webpack:///./packages/knative-plugin/src/const.ts","webpack:///./packages/knative-plugin/src/imgs/event-source.svg","webpack:///./packages/knative-plugin/src/index.ts","webpack:///./packages/knative-plugin/src/models.ts","webpack:///./packages/knative-plugin/src/plugin.tsx","webpack:///./packages/knative-plugin/src/types.ts","webpack:///./packages/knative-plugin/src/utils/fetch-dynamic-eventsources-utils.ts","webpack:///./packages/knative-plugin/src/utils/get-knative-resources.ts","webpack:///./packages/knative-plugin/src/utils/kebab-actions.ts","webpack:///./packages/knative-plugin/src/yaml-templates.ts","webpack:///./packages/kubevirt-plugin/src/components/create-vm-wizard/redux/reducers.ts","webpack:///./packages/kubevirt-plugin/src/components/create-vm-wizard/redux/types.ts","webpack:///./packages/kubevirt-plugin/src/components/create-vm-wizard/types.ts","webpack:///./packages/kubevirt-plugin/src/components/dashboards-page/overview-dashboard/health.ts","webpack:///./packages/kubevirt-plugin/src/components/dashboards-page/overview-dashboard/inventory.scss?16f9","webpack:///./packages/kubevirt-plugin/src/components/dashboards-page/overview-dashboard/inventory.tsx","webpack:///./packages/kubevirt-plugin/src/components/dashboards-page/overview-dashboard/utils.ts","webpack:///./packages/kubevirt-plugin/src/components/modals/cdrom-vm-modal/constants.ts","webpack:///./packages/kubevirt-plugin/src/constants/cdi.ts","webpack:///./packages/kubevirt-plugin/src/constants/index.ts","webpack:///./packages/kubevirt-plugin/src/constants/namespace.ts","webpack:///./packages/kubevirt-plugin/src/constants/object-enum.ts","webpack:///./packages/kubevirt-plugin/src/constants/status-constants.ts","webpack:///./packages/kubevirt-plugin/src/constants/status-enum.ts","webpack:///./packages/kubevirt-plugin/src/constants/status-group.ts","webpack:///./packages/kubevirt-plugin/src/constants/v2v-import/constants.ts","webpack:///./packages/kubevirt-plugin/src/constants/v2v-import/ovirt/v2v-vm-import-status.ts","webpack:///./packages/kubevirt-plugin/src/constants/v2v-import/ovirt/vm-import-type.ts","webpack:///./packages/kubevirt-plugin/src/constants/v2v.ts","webpack:///./packages/kubevirt-plugin/src/constants/vm-templates/constants.ts","webpack:///./packages/kubevirt-plugin/src/constants/vm-templates/index.ts","webpack:///./packages/kubevirt-plugin/src/constants/vm/constants.ts","webpack:///./packages/kubevirt-plugin/src/constants/vm/index.ts","webpack:///./packages/kubevirt-plugin/src/constants/vm/network/constants.ts","webpack:///./packages/kubevirt-plugin/src/constants/vm/network/index.ts","webpack:///./packages/kubevirt-plugin/src/constants/vm/network/network-interface-model.ts","webpack:///./packages/kubevirt-plugin/src/constants/vm/network/network-interface-type.ts","webpack:///./packages/kubevirt-plugin/src/constants/vm/network/network-type.ts","webpack:///./packages/kubevirt-plugin/src/constants/vm/storage/access-mode.ts","webpack:///./packages/kubevirt-plugin/src/constants/vm/storage/data-volume-source-type.ts","webpack:///./packages/kubevirt-plugin/src/constants/vm/storage/disk-bus.ts","webpack:///./packages/kubevirt-plugin/src/constants/vm/storage/disk-type.ts","webpack:///./packages/kubevirt-plugin/src/constants/vm/storage/index.ts","webpack:///./packages/kubevirt-plugin/src/constants/vm/storage/volume-mode.ts","webpack:///./packages/kubevirt-plugin/src/constants/vm/storage/volume-type.ts","webpack:///./packages/kubevirt-plugin/src/constants/vm/ui.ts","webpack:///./packages/kubevirt-plugin/src/constants/vm/vm-status.ts","webpack:///./packages/kubevirt-plugin/src/constants/vm/vm.ts","webpack:///./packages/kubevirt-plugin/src/constants/vmi/phase.ts","webpack:///./packages/kubevirt-plugin/src/images/virtual-machine.svg","webpack:///./packages/kubevirt-plugin/src/k8s/wrapper/common/k8s-resource-object-with-type-property-wrapper.ts","webpack:///./packages/kubevirt-plugin/src/k8s/wrapper/common/object-with-type-property-wrapper.ts","webpack:///./packages/kubevirt-plugin/src/k8s/wrapper/common/util/k8s-mixin.ts","webpack:///./packages/kubevirt-plugin/src/k8s/wrapper/common/wrapper.ts","webpack:///./packages/kubevirt-plugin/src/k8s/wrapper/utils/utils.ts","webpack:///./packages/kubevirt-plugin/src/k8s/wrapper/vm-import/vm-import-ovirt-source-wrapper.ts","webpack:///./packages/kubevirt-plugin/src/k8s/wrapper/vm-import/vm-import-wrapper.ts","webpack:///./packages/kubevirt-plugin/src/k8s/wrapper/vm/disk-wrapper.ts","webpack:///./packages/kubevirt-plugin/src/k8s/wrapper/vm/network-wrapper.ts","webpack:///./packages/kubevirt-plugin/src/models/index.ts","webpack:///./packages/kubevirt-plugin/src/models/templates/index.ts","webpack:///./packages/kubevirt-plugin/src/models/templates/vm-template-yaml.ts","webpack:///./packages/kubevirt-plugin/src/models/templates/vm-yaml.ts","webpack:///./packages/kubevirt-plugin/src/plugin.tsx","webpack:///./packages/kubevirt-plugin/src/redux/index.ts","webpack:///./packages/kubevirt-plugin/src/selectors/check-type.ts","webpack:///./packages/kubevirt-plugin/src/selectors/dv/selectors.ts","webpack:///./packages/kubevirt-plugin/src/selectors/pod/container.ts","webpack:///./packages/kubevirt-plugin/src/selectors/pod/selectors.ts","webpack:///./packages/kubevirt-plugin/src/selectors/selectors.ts","webpack:///./packages/kubevirt-plugin/src/selectors/utils.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vm-template/basic.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vm/combined.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vm/cpu.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vm/devices.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vm/index.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vm/nic.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vm/selectors.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vm/vmlike.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vm/volume.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vmi-migration/combined.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vmi-migration/index.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vmi-migration/selectors.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vmi/basic.ts","webpack:///./packages/kubevirt-plugin/src/statuses/pod/constants.ts","webpack:///./packages/kubevirt-plugin/src/statuses/pod/pod.ts","webpack:///./packages/kubevirt-plugin/src/statuses/vm-import/types.ts","webpack:///./packages/kubevirt-plugin/src/statuses/vm-import/vm-import-status.ts","webpack:///./packages/kubevirt-plugin/src/statuses/vm/vm-status.ts","webpack:///./packages/kubevirt-plugin/src/strings/vm/status.ts","webpack:///./packages/kubevirt-plugin/src/style.scss?5081","webpack:///./packages/kubevirt-plugin/src/utils/accessReview-v2v.ts","webpack:///./packages/kubevirt-plugin/src/utils/common.ts","webpack:///./packages/kubevirt-plugin/src/utils/immutable.ts","webpack:///./packages/kubevirt-plugin/src/utils/index.ts","webpack:///./packages/kubevirt-plugin/src/utils/strings.ts","webpack:///./packages/kubevirt-plugin/src/utils/types.ts","webpack:///./packages/local-storage-operator-plugin/src/models.ts","webpack:///./packages/local-storage-operator-plugin/src/plugin.ts","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/dashboard/utils.ts","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/table-filters.ts","webpack:///./packages/metal3-plugin/src/components/baremetal-nodes/dashboard/utils.ts","webpack:///./packages/metal3-plugin/src/constants/bare-metal-host.ts","webpack:///./packages/metal3-plugin/src/constants/index.ts","webpack:///./packages/metal3-plugin/src/constants/node-maintenance.ts","webpack:///./packages/metal3-plugin/src/features.ts","webpack:///./packages/metal3-plugin/src/hooks/index.ts","webpack:///./packages/metal3-plugin/src/models.ts","webpack:///./packages/metal3-plugin/src/plugin.tsx","webpack:///./packages/metal3-plugin/src/selectors/baremetal-hosts.ts","webpack:///./packages/metal3-plugin/src/selectors/index.ts","webpack:///./packages/metal3-plugin/src/selectors/node-maintenance.ts","webpack:///./packages/metal3-plugin/src/status/baremetal-node-status.ts","webpack:///./packages/metal3-plugin/src/status/host-status.ts","webpack:///./packages/metal3-plugin/src/status/node-maintenance-status.ts","webpack:///./packages/network-attachment-definition-plugin/src/models/index.ts","webpack:///./packages/network-attachment-definition-plugin/src/models/templates/index.ts","webpack:///./packages/network-attachment-definition-plugin/src/plugin.ts","webpack:///./packages/noobaa-storage-plugin/src/models.ts","webpack:///./packages/noobaa-storage-plugin/src/plugin.ts","webpack:///./packages/operator-lifecycle-manager/src/components/dashboard/utils.ts","webpack:///./packages/operator-lifecycle-manager/src/components/index.tsx","webpack:///./packages/operator-lifecycle-manager/src/const.ts","webpack:///./packages/operator-lifecycle-manager/src/dev-catalog.ts","webpack:///./packages/operator-lifecycle-manager/src/index.ts","webpack:///./packages/operator-lifecycle-manager/src/models.ts","webpack:///./packages/operator-lifecycle-manager/src/operator.svg","webpack:///./packages/operator-lifecycle-manager/src/plugin.tsx","webpack:///./packages/operator-lifecycle-manager/src/status/csv-status.ts","webpack:///./packages/operator-lifecycle-manager/src/style.scss?5381","webpack:///./packages/operator-lifecycle-manager/src/types.ts","webpack:///./packages/patternfly/src/components/index.ts","webpack:///./packages/patternfly/src/components/notification-drawer/index.ts","webpack:///./packages/patternfly/src/components/notification-drawer/notification-category.tsx","webpack:///./packages/patternfly/src/components/notification-drawer/notification-drawer-heading.tsx","webpack:///./packages/patternfly/src/components/notification-drawer/notification-drawer.tsx","webpack:///./packages/patternfly/src/components/notification-drawer/notification-entry.tsx","webpack:///./packages/patternfly/src/index.ts","webpack:///./polyfills.js","webpack:///./public/actions/common.ts","webpack:///./public/actions/dashboards.ts","webpack:///./public/actions/features.ts","webpack:///./public/actions/k8s.ts","webpack:///./public/actions/monitoring.ts","webpack:///./public/actions/ui.ts","webpack:///./public/co-fetch.js","webpack:///./public/components/RBAC/bindings.jsx","webpack:///./public/components/RBAC/index.js","webpack:///./public/components/RBAC/role.jsx","webpack:///./public/components/RBAC/rules.jsx","webpack:///./public/components/about-modal.tsx","webpack:///./public/components/app-contents.tsx","webpack:///./public/components/app.jsx","webpack:///./public/components/autocomplete.tsx","webpack:///./public/components/build-logs.jsx","webpack:///./public/components/build-pipeline.tsx","webpack:///./public/components/build.tsx","webpack:///./public/components/chargeback.tsx","webpack:///./public/components/conditions.tsx","webpack:///./public/components/configmap-and-secret-data.tsx","webpack:///./public/components/console-notifier.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/queries.ts","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/utilization-card.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/utils.ts","webpack:///./public/components/dashboard/project-dashboard/activity-card.tsx","webpack:///./public/components/dashboard/project-dashboard/details-card.tsx","webpack:///./public/components/dashboard/project-dashboard/inventory-card.tsx","webpack:///./public/components/dashboard/project-dashboard/launcher-card.tsx","webpack:///./public/components/dashboard/project-dashboard/project-dashboard-context.tsx","webpack:///./public/components/dashboard/project-dashboard/project-dashboard.tsx","webpack:///./public/components/dashboard/project-dashboard/queries.ts","webpack:///./public/components/dashboard/project-dashboard/resource-quota-card.tsx","webpack:///./public/components/dashboard/project-dashboard/status-card.tsx","webpack:///./public/components/dashboard/project-dashboard/utilization-card.tsx","webpack:///./public/components/dashboard/with-dashboard-resources.tsx","webpack:///./public/components/default-resource.jsx","webpack:///./public/components/error.tsx","webpack:///./public/components/events.jsx","webpack:///./public/components/factory/details.tsx","webpack:///./public/components/factory/index.tsx","webpack:///./public/components/factory/list-page.jsx","webpack:///./public/components/factory/list-page.scss?8854","webpack:///./public/components/factory/modal.tsx","webpack:///./public/components/factory/table-filters.ts","webpack:///./public/components/factory/table.tsx","webpack:///./public/components/filter-toolbar.tsx","webpack:///./public/components/global-notifications.jsx","webpack:///./public/components/graphs/area.tsx","webpack:///./public/components/graphs/gauge.tsx","webpack:///./public/components/graphs/graph-empty.tsx","webpack:///./public/components/graphs/helpers.ts","webpack:///./public/components/graphs/index.tsx","webpack:///./public/components/graphs/prometheus-graph.tsx","webpack:///./public/components/graphs/prometheus-poll-hook.ts","webpack:///./public/components/graphs/require-prometheus.tsx","webpack:///./public/components/graphs/status.jsx","webpack:///./public/components/graphs/themes.ts","webpack:///./public/components/graphs/utils.ts","webpack:///./public/components/hypercloud/exp-timer.jsx","webpack:///./public/components/hypercloud/form lazy ^\\.\\/.*\\/create\\-.*$ namespace object","webpack:///./public/components/hypercloud/form/index.ts","webpack:///./public/components/hypercloud/grafana.jsx","webpack:///./public/components/hypercloud/login/welcome.jsx","webpack:///./public/components/hypercloud/modals/index.ts","webpack:///./public/components/hypercloud/modals/modal.tsx","webpack:///./public/components/hypercloud/modals/notice-expiration-modal.jsx","webpack:///./public/components/hypercloud/nav/cluster-dropdown.tsx","webpack:///./public/components/hypercloud/nav/hypercloud-nav.tsx","webpack:///./public/components/hypercloud/nav/master-nav.tsx","webpack:///./public/components/hypercloud/nav/multicluster-nav.tsx","webpack:///./public/components/hypercloud/resource-pages.ts","webpack:///./public/components/hypercloud/search.tsx","webpack:///./public/components/hypercloud/utils/langs/i18n.js","webpack:///./public/components/impersonate-notifier.jsx","webpack:///./public/components/ingress.jsx","webpack:///./public/components/kube-admin-notifier.jsx","webpack:///./public/components/masthead-toolbar.jsx","webpack:///./public/components/masthead.jsx","webpack:///./public/components/modals/add-secret-to-workload.tsx","webpack:///./public/components/modals/cluster-update-modal.tsx","webpack:///./public/components/modals/confirm-modal.jsx","webpack:///./public/components/modals/delete-modal.jsx","webpack:///./public/components/modals/error-modal.jsx","webpack:///./public/components/modals/index.ts","webpack:///./public/components/monitoring.tsx","webpack:///./public/components/monitoring/alert-manager-config.tsx","webpack:///./public/components/monitoring/alert-manager-utils.tsx","webpack:///./public/components/monitoring/alert-manager-yaml-editor.tsx","webpack:///./public/components/monitoring/dashboards/bar-chart.tsx","webpack:///./public/components/monitoring/dashboards/format.tsx","webpack:///./public/components/monitoring/dashboards/graph.tsx","webpack:///./public/components/monitoring/dashboards/index.tsx","webpack:///./public/components/monitoring/dashboards/single-stat.tsx","webpack:///./public/components/monitoring/dashboards/table.tsx","webpack:///./public/components/monitoring/metrics.tsx","webpack:///./public/components/monitoring/query-browser.tsx","webpack:///./public/components/namespace.jsx","webpack:///./public/components/nav/_perspective-nav.scss?3787","webpack:///./public/components/nav/confirmNavUnpinModal.tsx","webpack:///./public/components/nav/index.tsx","webpack:///./public/components/nav/items.tsx","webpack:///./public/components/nav/nav-header.tsx","webpack:///./public/components/nav/perspective-nav.tsx","webpack:///./public/components/nav/section.tsx","webpack:///./public/components/notification-drawer.tsx","webpack:///./public/components/overview/build-overview.tsx","webpack:///./public/components/overview/constants.ts","webpack:///./public/components/overview/index.tsx","webpack:///./public/components/overview/list-view/index.tsx","webpack:///./public/components/overview/list-view/list-view-additional-info.tsx","webpack:///./public/components/overview/list-view/list-view-body.tsx","webpack:///./public/components/overview/list-view/list-view-description-heading.tsx","webpack:///./public/components/overview/list-view/list-view-description.tsx","webpack:///./public/components/overview/list-view/list-view-group-item.tsx","webpack:///./public/components/overview/list-view/list-view-item.tsx","webpack:///./public/components/overview/list-view/list-view-main-info.tsx","webpack:///./public/components/overview/list-view/list-view-row.tsx","webpack:///./public/components/overview/list-view/list-view.tsx","webpack:///./public/components/overview/networking-overview.tsx","webpack:///./public/components/overview/pods-overview.tsx","webpack:///./public/components/overview/project-overview.tsx","webpack:///./public/components/overview/resource-overview-page.tsx","webpack:///./public/components/overview/resource-overview-pages.tsx","webpack:///./public/components/pod-logs.jsx","webpack:///./public/components/pod.tsx","webpack:///./public/components/radio.tsx","webpack:///./public/components/resource-dropdown.tsx","webpack:///./public/components/resource-list.tsx","webpack:///./public/components/resource-pages.ts","webpack:///./public/components/resource-quota.jsx","webpack:///./public/components/routes.tsx","webpack:///./public/components/routes/route-charts.tsx","webpack:///./public/components/row-filter.jsx","webpack:///./public/components/safety-first.tsx","webpack:///./public/components/search-filter-dropdown.tsx","webpack:///./public/components/secret.jsx","webpack:///./public/components/secrets/create-secret.tsx","webpack:///./public/components/start-guide.tsx","webpack:///./public/components/utils/alerts.tsx","webpack:///./public/components/utils/async.tsx","webpack:///./public/components/utils/breadcrumbs.ts","webpack:///./public/components/utils/build-hooks.tsx","webpack:///./public/components/utils/build-strategy.tsx","webpack:///./public/components/utils/button-bar.jsx","webpack:///./public/components/utils/camel-case-wrap.tsx","webpack:///./public/components/utils/close-button.jsx","webpack:///./public/components/utils/cloud-provider.js","webpack:///./public/components/utils/container-table.tsx","webpack:///./public/components/utils/copy-to-clipboard.tsx","webpack:///./public/components/utils/datetime.ts","webpack:///./public/components/utils/details-item.tsx","webpack:///./public/components/utils/details-page.tsx","webpack:///./public/components/utils/disabled.tsx","webpack:///./public/components/utils/documentation.tsx","webpack:///./public/components/utils/dom-utils.tsx","webpack:///./public/components/utils/download-button.tsx","webpack:///./public/components/utils/drag-drop-context.tsx","webpack:///./public/components/utils/draggable-item-types.js","webpack:///./public/components/utils/dropdown.jsx","webpack:///./public/components/utils/entitlements.ts","webpack:///./public/components/utils/event-stream.tsx","webpack:///./public/components/utils/expand-collapse.tsx","webpack:///./public/components/utils/field-level-help.tsx","webpack:///./public/components/utils/file-input.tsx","webpack:///./public/components/utils/firehose.jsx","webpack:///./public/components/utils/headings.tsx","webpack:///./public/components/utils/hint-block.tsx","webpack:///./public/components/utils/horizontal-nav.tsx","webpack:///./public/components/utils/index.tsx","webpack:///./public/components/utils/inject.js","webpack:///./public/components/utils/k8s-watch-hook.ts","webpack:///./public/components/utils/k8s-watcher.js","webpack:///./public/components/utils/kebab.tsx","webpack:///./public/components/utils/label-list.tsx","webpack:///./public/components/utils/line-buffer.ts","webpack:///./public/components/utils/link.tsx","webpack:///./public/components/utils/list-dropdown.jsx","webpack:///./public/components/utils/list-input.tsx","webpack:///./public/components/utils/log-window.jsx","webpack:///./public/components/utils/name-value-editor.jsx","webpack:///./public/components/utils/namespace-redirect.tsx","webpack:///./public/components/utils/number-spinner.tsx","webpack:///./public/components/utils/operator-backed-owner-references.tsx","webpack:///./public/components/utils/owner-references.tsx","webpack:///./public/components/utils/poll-hook.ts","webpack:///./public/components/utils/promise-component.tsx","webpack:///./public/components/utils/rbac.tsx","webpack:///./public/components/utils/ref-width-hook.ts","webpack:///./public/components/utils/request-size-input.tsx","webpack:///./public/components/utils/resource-icon.tsx","webpack:///./public/components/utils/resource-link.tsx","webpack:///./public/components/utils/resource-log.jsx","webpack:///./public/components/utils/router.ts","webpack:///./public/components/utils/safe-fetch-hook.ts","webpack:///./public/components/utils/scroll-to-top-on-mount.tsx","webpack:///./public/components/utils/selector-input.jsx","webpack:///./public/components/utils/selector.tsx","webpack:///./public/components/utils/service-catalog-status.tsx","webpack:///./public/components/utils/simple-tab-nav.tsx","webpack:///./public/components/utils/skeleton-catalog.tsx","webpack:///./public/components/utils/status-box.tsx","webpack:///./public/components/utils/timestamp.tsx","webpack:///./public/components/utils/toggle-play.jsx","webpack:///./public/components/utils/truncate-middle.ts","webpack:///./public/components/utils/types.ts","webpack:///./public/components/utils/units.js","webpack:///./public/components/utils/value-from-pair.jsx","webpack:///./public/components/utils/volume-type.tsx","webpack:///./public/components/utils/webhooks.tsx","webpack:///./public/components/utils/workload-pause.tsx","webpack:///./public/components/volumes-table.tsx","webpack:///./public/hypercloud/auth.js","webpack:///./public/hypercloud/keycloak.js","webpack:///./public/hypercloud/perspectives.tsx","webpack:///./public/imgs/logo_symbol_text.svg","webpack:///./public/imgs/logos/helm.svg","webpack:///./public/imgs/restricted-sign.svg","webpack:///./public/kinds.ts","webpack:///./public/models/hypercloud/index.ts","webpack:///./public/models/hypercloud/resource-plural.ts","webpack:///./public/models/index.ts","webpack:///./public/module/auth.js","webpack:///./public/module/hypercloud/k8s/kind-to-schema-path.ts","webpack:///./public/module/hypercloud/k8s/types.ts","webpack:///./public/module/k8s/builds.ts","webpack:///./public/module/k8s/cluster-operator.ts","webpack:///./public/module/k8s/cluster-settings.ts","webpack:///./public/module/k8s/container.ts","webpack:///./public/module/k8s/get-resources.ts","webpack:///./public/module/k8s/index.ts","webpack:///./public/module/k8s/job.js","webpack:///./public/module/k8s/k8s-models.ts","webpack:///./public/module/k8s/k8s.ts","webpack:///./public/module/k8s/label-selector.js","webpack:///./public/module/k8s/pods.ts","webpack:///./public/module/k8s/resource.js","webpack:///./public/module/k8s/selector-requirement.js","webpack:///./public/module/k8s/selector.ts","webpack:///./public/module/k8s/service-catalog.ts","webpack:///./public/module/k8s/swagger.ts","webpack:///./public/module/k8s/template.ts","webpack:///./public/module/k8s/types.ts","webpack:///./public/module/status.js","webpack:///./public/module/ws-factory.js","webpack:///./public/plugins.ts","webpack:///./public/propTypes.ts","webpack:///./public/reducers/dashboards.ts","webpack:///./public/reducers/features.ts","webpack:///./public/reducers/k8s.ts","webpack:///./public/reducers/monitoring.ts","webpack:///./public/reducers/ui.ts","webpack:///./public/redux.ts","webpack:///./public/style.scss?3c7b","webpack:///./public/vendor.scss?6a95"],"sourcesContent":["import * as React from 'react';\nimport ActivityItem from '@console/shared/src/components/dashboard/activity-card/ActivityItem';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\n\nexport const ClusterExpandActivity: React.FC = () => (\n  <ActivityItem>Expanding OCS Cluster</ActivityItem>\n);\n\nexport const isClusterExpandActivity = (storageCluster: K8sResourceKind): boolean =>\n  storageCluster?.status?.phase === 'Expanding';\n","import { PrometheusHealthHandler, ResourceHealthHandler } from '@console/plugin-sdk';\nimport { HealthState } from '@console/shared/src/components/dashboard/status-card/states';\nimport { getResiliencyProgress } from '../../../../utils';\nimport { WatchCephResource } from '../../../../types';\n\nconst CephHealthStatus = {\n  HEALTH_OK: {\n    state: HealthState.OK,\n  },\n  HEALTH_WARN: {\n    state: HealthState.WARNING,\n  },\n  HEALTH_ERR: {\n    state: HealthState.ERROR,\n    message: 'Error',\n  },\n};\n\nexport const getCephHealthState: ResourceHealthHandler<WatchCephResource> = ({ ceph }) => {\n  const { data, loaded, loadError } = ceph;\n  const status = data?.[0]?.status?.ceph?.health;\n\n  if (loadError) {\n    return { state: HealthState.NOT_AVAILABLE };\n  }\n  if (!loaded) {\n    return { state: HealthState.LOADING };\n  }\n  if (data.length === 0) {\n    return { state: HealthState.NOT_AVAILABLE };\n  }\n  return CephHealthStatus[status] || { state: HealthState.UNKNOWN };\n};\n\nexport const getDataResiliencyState: PrometheusHealthHandler = (responses) => {\n  const progress: number = getResiliencyProgress(responses[0].response);\n  if (responses[0].error) {\n    return { state: HealthState.NOT_AVAILABLE };\n  }\n  if (!responses[0].response) {\n    return { state: HealthState.LOADING };\n  }\n  if (Number.isNaN(progress)) {\n    return { state: HealthState.UNKNOWN };\n  }\n  if (progress < 1) {\n    return { state: HealthState.PROGRESS, message: 'Progressing' };\n  }\n  return { state: HealthState.OK };\n};\n","export const CEPH_HEALTHY = 'is healthy';\nexport const CEPH_DEGRADED = 'health is degraded';\nexport const CEPH_ERROR = 'health is in error state';\nexport const CEPH_UNKNOWN = 'is not available';\nexport const CEPH_STORAGE_NAMESPACE = 'openshift-storage';\nexport const PROJECTS = 'Projects';\nexport const STORAGE_CLASSES = 'Storage Classes';\nexport const PODS = 'Pods';\nexport const BY_USED = 'By Used Capacity';\nexport const BY_REQUESTED = 'By Requested Capacity';\nexport const OCS_OPERATOR = 'ocs-operator';\nexport const OCS_INDEPENDENT_CR_NAME = 'ocs-external-storagecluster';\nexport const OCS_CONVERGED_CR_NAME = 'ocs-storagecluster';\nexport const NO_PROVISIONER = 'kubernetes.io/no-provisioner';\nexport const OCS_SUPPORT_ANNOTATION = 'features.ocs.openshift.io/enabled';\n","import * as _ from 'lodash';\nimport { Dispatch } from 'react-redux';\nimport { k8sGet } from '@console/internal/module/k8s';\nimport { ClusterServiceVersionModel, SubscriptionModel } from '@console/operator-lifecycle-manager';\nimport { setFlag } from '@console/internal/actions/features';\nimport { FeatureDetector } from '@console/plugin-sdk';\nimport { getAnnotations } from '@console/shared/src/selectors/common';\nimport { OCSServiceModel } from './models';\nimport {\n  OCS_INDEPENDENT_CR_NAME,\n  CEPH_STORAGE_NAMESPACE,\n  OCS_SUPPORT_ANNOTATION,\n  OCS_CONVERGED_CR_NAME,\n} from './constants';\n\nexport const OCS_INDEPENDENT_FLAG = 'OCS_INDEPENDENT';\nexport const OCS_CONVERGED_FLAG = 'OCS_CONVERGED';\n// Used to activate NooBaa dashboard\nexport const OCS_FLAG = 'OCS';\n// Todo(bipuladh): Remove this completely in 4.6\nexport const CEPH_FLAG = 'CEPH';\n\n/* Key and Value should be same value received in CSV  */\nexport const OCS_SUPPORT_FLAGS = {\n  SNAPSHOT: 'SNAPSHOT',\n  EXTERNAL: 'EXTERNAL',\n};\n\nconst handleError = (res: any, flags: string[], dispatch: Dispatch, cb: FeatureDetector) => {\n  const status = res?.response?.status;\n  if (_.includes([403, 502], status)) {\n    flags.forEach((feature) => {\n      dispatch(setFlag(feature, undefined));\n    });\n  }\n  if (!_.includes([401, 403, 500], status)) {\n    setTimeout(() => cb(dispatch), 15000);\n  }\n};\n\nexport const detectOCS: FeatureDetector = async (dispatch) => {\n  try {\n    await k8sGet(OCSServiceModel, OCS_CONVERGED_CR_NAME, CEPH_STORAGE_NAMESPACE);\n    dispatch(setFlag(OCS_FLAG, true));\n    dispatch(setFlag(OCS_CONVERGED_FLAG, true));\n    dispatch(setFlag(OCS_INDEPENDENT_FLAG, false));\n  } catch (e) {\n    e?.response?.status !== 404\n      ? handleError(e, [OCS_CONVERGED_FLAG], dispatch, detectOCS)\n      : dispatch(setFlag(OCS_CONVERGED_FLAG, false));\n    try {\n      await k8sGet(OCSServiceModel, OCS_INDEPENDENT_CR_NAME, CEPH_STORAGE_NAMESPACE);\n      dispatch(setFlag(OCS_FLAG, true));\n      dispatch(setFlag(OCS_INDEPENDENT_FLAG, true));\n      dispatch(setFlag(OCS_CONVERGED_FLAG, false));\n    } catch (err) {\n      err?.response?.status !== 404\n        ? handleError(err, [OCS_INDEPENDENT_FLAG], dispatch, detectOCS)\n        : dispatch(setFlag(OCS_INDEPENDENT_FLAG, false));\n    }\n  }\n};\n\nexport const detectOCSSupportedFeatures: FeatureDetector = async (dispatch) => {\n  try {\n    const subscription = await k8sGet(\n      SubscriptionModel,\n      'ocs-subscription',\n      CEPH_STORAGE_NAMESPACE,\n    );\n    const ocsCSV = await k8sGet(\n      ClusterServiceVersionModel,\n      subscription?.status?.currentCSV,\n      CEPH_STORAGE_NAMESPACE,\n    );\n\n    const support = getAnnotations(ocsCSV)[OCS_SUPPORT_ANNOTATION];\n    _.keys(OCS_SUPPORT_FLAGS).forEach((feature) => {\n      dispatch(setFlag(feature, support.includes(feature.toLowerCase())));\n    });\n  } catch (error) {\n    error?.response?.status === 404\n      ? _.keys(OCS_SUPPORT_FLAGS).forEach((feature) => {\n          dispatch(setFlag(feature, false));\n        })\n      : handleError(error, _.keys(OCS_SUPPORT_FLAGS), dispatch, detectOCSSupportedFeatures);\n  }\n};\n","import { K8sKind } from '@console/internal/module/k8s';\n\nexport const CephClusterModel: K8sKind = {\n  label: 'Ceph Cluster',\n  labelPlural: 'Ceph Clusters',\n  apiVersion: 'v1',\n  apiGroup: 'ceph.rook.io',\n  plural: 'cephclusters',\n  abbr: 'CC',\n  namespaced: true,\n  kind: 'CephCluster',\n  id: 'cephcluster',\n  crd: true,\n};\n\nexport const OCSServiceModel: K8sKind = {\n  label: 'OCS Cluster Service',\n  labelPlural: 'OCS Cluster Services',\n  apiVersion: 'v1',\n  apiGroup: 'ocs.openshift.io',\n  plural: 'storageclusters',\n  abbr: 'OCS',\n  namespaced: true,\n  kind: 'StorageCluster',\n  id: 'ocscluster',\n  crd: true,\n};\n\nexport const VolumeSnapshotModel: K8sKind = {\n  label: 'Volume Snapshot',\n  apiVersion: 'snapshot.storage.k8s.io/v1beta1',\n  apiGroup: '',\n  plural: 'volumesnapshots',\n  abbr: 'VS',\n  namespaced: true,\n  kind: 'VolumeSnapshot',\n  id: 'volumesnapshot',\n  labelPlural: 'Volume Snapshots',\n  crd: true,\n};\n","import * as _ from 'lodash';\nimport * as models from './models';\nimport {\n  ClusterServiceVersionAction,\n  DashboardsCard,\n  DashboardsOverviewHealthResourceSubsystem,\n  DashboardsOverviewUtilizationItem,\n  DashboardsTab,\n  KebabActions,\n  ModelDefinition,\n  ModelFeatureFlag,\n  Plugin,\n  ResourceTabPage,\n  RoutePage,\n  ResourceDetailsPage,\n  DashboardsOverviewResourceActivity,\n  CustomFeatureFlag,\n} from '@console/plugin-sdk';\nimport {\n  detectOCS,\n  detectOCSSupportedFeatures,\n  CEPH_FLAG,\n  OCS_INDEPENDENT_FLAG,\n  OCS_SUPPORT_FLAGS,\n  OCS_CONVERGED_FLAG,\n} from './features';\nimport { ClusterServiceVersionModel } from '@console/operator-lifecycle-manager/src/models';\nimport { GridPosition } from '@console/shared/src/components/dashboard/DashboardGrid';\nimport { referenceForModel, referenceFor } from '@console/internal/module/k8s';\nimport { PersistentVolumeClaimModel } from '@console/internal/models';\nimport { getCephHealthState } from './components/dashboard-page/storage-dashboard/status-card/utils';\nimport { isClusterExpandActivity } from './components/dashboard-page/storage-dashboard/activity-card/cluster-expand-activity';\nimport { WatchCephResource } from './types';\n\ntype ConsumedExtensions =\n  | ModelFeatureFlag\n  | ModelDefinition\n  | DashboardsTab\n  | DashboardsCard\n  | DashboardsOverviewHealthResourceSubsystem<WatchCephResource>\n  | DashboardsOverviewUtilizationItem\n  | RoutePage\n  | CustomFeatureFlag\n  | ClusterServiceVersionAction\n  | KebabActions\n  | ResourceDetailsPage\n  | ResourceTabPage\n  | ClusterServiceVersionAction\n  | KebabActions\n  | DashboardsOverviewResourceActivity;\n\nconst apiObjectRef = referenceForModel(models.OCSServiceModel);\n\nconst plugin: Plugin<ConsumedExtensions> = [\n  {\n    type: 'ModelDefinition',\n    properties: {\n      models: _.values(models),\n    },\n  },\n  {\n    type: 'FeatureFlag/Model',\n    properties: {\n      model: models.OCSServiceModel,\n      flag: CEPH_FLAG,\n    },\n  },\n  {\n    type: 'FeatureFlag/Custom',\n    properties: {\n      detect: detectOCSSupportedFeatures,\n    },\n  },\n  {\n    type: 'FeatureFlag/Custom',\n    properties: {\n      detect: detectOCS,\n    },\n  },\n  {\n    type: 'Page/Resource/Tab',\n    properties: {\n      href: 'volumesnapshots',\n      model: PersistentVolumeClaimModel,\n      name: 'Volume Snapshots',\n      loader: () =>\n        import('./components/volume-snapshot/volume-snapshot').then(\n          (m) => m.VolumeSnapshotPage,\n        ) /* webpackChunkName: \"ceph-storage-volume-snapshot\" */,\n    },\n    flags: {\n      required: [OCS_SUPPORT_FLAGS.SNAPSHOT, CEPH_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Tab',\n    properties: {\n      id: 'persistent-storage',\n      title: 'Persistent Storage',\n    },\n    flags: {\n      required: [OCS_CONVERGED_FLAG],\n      disallowed: [OCS_INDEPENDENT_FLAG],\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: `/k8s/ns/:ns/${ClusterServiceVersionModel.plural}/:appName/${apiObjectRef}/~new`,\n      loader: () =>\n        import('./components/ocs-install/install-page' /* webpackChunkName: \"install-page\" */).then(\n          (m) => m.default,\n        ),\n    },\n  },\n  // Ceph Storage Dashboard Left cards\n  {\n    type: 'Dashboards/Card',\n    properties: {\n      tab: 'persistent-storage',\n      position: GridPosition.LEFT,\n      loader: () =>\n        import(\n          './components/dashboard-page/storage-dashboard/details-card' /* webpackChunkName: \"ceph-storage-details-card\" */\n        ).then((m) => m.default),\n    },\n    flags: {\n      required: [CEPH_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Card',\n    properties: {\n      tab: 'persistent-storage',\n      position: GridPosition.LEFT,\n      loader: () =>\n        import(\n          './components/dashboard-page/storage-dashboard/inventory-card' /* webpackChunkName: \"ceph-storage-inventory-card\" */\n        ).then((m) => m.default),\n    },\n    flags: {\n      required: [CEPH_FLAG],\n    },\n  },\n  // Ceph Storage Dashboard Main Cards\n  {\n    type: 'Dashboards/Card',\n    properties: {\n      tab: 'persistent-storage',\n      position: GridPosition.MAIN,\n      loader: () =>\n        import(\n          './components/dashboard-page/storage-dashboard/status-card/status-card' /* webpackChunkName: \"ceph-storage-status-card\" */\n        ).then((m) => m.default),\n    },\n    flags: {\n      required: [CEPH_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Card',\n    properties: {\n      tab: 'persistent-storage',\n      position: GridPosition.MAIN,\n      loader: () =>\n        import(\n          './components/dashboard-page/storage-dashboard/capacity-breakdown/capacity-breakdown-card' /* webpackChunkName: \"ceph-storage-usage-breakdown-card\" */\n        ).then((m) => m.default),\n    },\n    flags: {\n      required: [CEPH_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Card',\n    properties: {\n      tab: 'persistent-storage',\n      position: GridPosition.MAIN,\n      loader: () =>\n        import(\n          './components/dashboard-page/storage-dashboard/utilization-card/utilization-card' /* webpackChunkName: \"ceph-storage-utilization-card\" */\n        ).then((m) => m.default),\n    },\n    flags: {\n      required: [CEPH_FLAG],\n    },\n  },\n  // Ceph Storage Dashboard Right Cards\n  {\n    type: 'Dashboards/Card',\n    properties: {\n      tab: 'persistent-storage',\n      position: GridPosition.RIGHT,\n      loader: () =>\n        import(\n          './components/dashboard-page/storage-dashboard/activity-card/activity-card' /* webpackChunkName: \"ceph-storage-activity-card\" */\n        ).then((m) => m.ActivityCard),\n    },\n    flags: {\n      required: [CEPH_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Health/Resource',\n    properties: {\n      title: 'Storage',\n      resources: {\n        ceph: {\n          kind: referenceForModel(models.CephClusterModel),\n          namespaced: false,\n          isList: true,\n        },\n      },\n      healthHandler: getCephHealthState,\n    },\n    flags: {\n      required: [CEPH_FLAG],\n    },\n  },\n  {\n    type: 'ClusterServiceVersion/Action',\n    properties: {\n      kind: 'StorageCluster',\n      label: 'Add Capacity',\n      apiGroup: models.OCSServiceModel.apiGroup,\n      callback: (kind, ocsConfig) => () => {\n        const clusterObject = { ocsConfig };\n        import(\n          './components/modals/add-capacity-modal/add-capacity-modal' /* webpackChunkName: \"ceph-storage-add-capacity-modal\" */\n        )\n          .then((m) => m.addCapacityModal(clusterObject))\n          .catch((e) => {\n            throw e;\n          });\n      },\n      disallowed: [OCS_INDEPENDENT_FLAG],\n    },\n  },\n  // Download External Cluster Metadata\n  {\n    type: 'ClusterServiceVersion/Action',\n    properties: {\n      kind: 'StorageCluster',\n      label: 'Download Cluster Metadata',\n      apiGroup: models.OCSServiceModel.apiGroup,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      callback: (_kind, _obj) => () =>\n        import(\n          './components/converged-credentials/credentials' /* webpackChunkName: \"ceph-storage-export-credentials\" */\n        ).then((m) => m.default({})),\n      disallowed: [OCS_INDEPENDENT_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Tab',\n    properties: {\n      id: 'independent-dashboard',\n      title: 'Persistent Storage',\n    },\n    flags: {\n      required: [OCS_INDEPENDENT_FLAG],\n    },\n  },\n  // Left Cards\n  {\n    type: 'Dashboards/Card',\n    properties: {\n      tab: 'independent-dashboard',\n      position: GridPosition.LEFT,\n      loader: () =>\n        import(\n          './components/independent-dashboard-page/details-card/card' /* webpackChunkName: \"indepedent-details-card\" */\n        ).then((m) => m.default),\n    },\n    flags: {\n      required: [OCS_INDEPENDENT_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Card',\n    properties: {\n      tab: 'independent-dashboard',\n      position: GridPosition.LEFT,\n      loader: () =>\n        import(\n          './components/dashboard-page/storage-dashboard/inventory-card' /* webpackChunkName: \"ceph-storage-inventory-card\" */\n        ).then((m) => m.default),\n    },\n    flags: {\n      required: [OCS_INDEPENDENT_FLAG],\n    },\n  },\n  // Center\n  {\n    type: 'Dashboards/Card',\n    properties: {\n      tab: 'independent-dashboard',\n      position: GridPosition.MAIN,\n      loader: () =>\n        import(\n          './components/independent-dashboard-page/status-card/card' /* webpackChunkName: \"indepedent-status-card\" */\n        ).then((m) => m.default),\n    },\n    flags: {\n      required: [OCS_INDEPENDENT_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Card',\n    properties: {\n      tab: 'independent-dashboard',\n      position: GridPosition.MAIN,\n      loader: () =>\n        import(\n          './components/independent-dashboard-page/breakdown-card/card' /* webpackChunkName: \"independent-breakdown-card\" */\n        ).then((m) => m.default),\n    },\n    flags: {\n      required: [OCS_INDEPENDENT_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Card',\n    properties: {\n      tab: 'independent-dashboard',\n      position: GridPosition.MAIN,\n      loader: () =>\n        import(\n          './components/independent-dashboard-page/utilization-card/card' /* webpackChunkName: \"utilization-card\" */\n        ).then((m) => m.default),\n    },\n    flags: {\n      required: [OCS_INDEPENDENT_FLAG],\n    },\n  },\n  // Right\n  {\n    type: 'Dashboards/Card',\n    properties: {\n      tab: 'independent-dashboard',\n      position: GridPosition.RIGHT,\n      loader: () =>\n        import(\n          './components/dashboard-page/storage-dashboard/activity-card/activity-card' /* webpackChunkName: \"ceph-storage-activity-card\" */\n        ).then((m) => m.ActivityCard),\n    },\n    flags: {\n      required: [OCS_INDEPENDENT_FLAG],\n    },\n  },\n  {\n    type: 'Page/Resource/Details',\n    properties: {\n      model: models.VolumeSnapshotModel,\n      loader: async () =>\n        import(\n          './components/volume-snapshot/volume-snapshot' /* webpackChunkName: \"ceph-storage-volume-snapshot-details\" */\n        ).then((m) => m.VolumeSnapshotDetails),\n      modelParser: referenceFor,\n    },\n    flags: {\n      required: [OCS_SUPPORT_FLAGS.SNAPSHOT, CEPH_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Activity/Resource',\n    properties: {\n      k8sResource: {\n        isList: true,\n        kind: referenceForModel(models.OCSServiceModel),\n        namespaced: false,\n        prop: 'storage-cluster',\n      },\n      isActivity: isClusterExpandActivity,\n      loader: () =>\n        import(\n          './components/dashboard-page/storage-dashboard/activity-card/cluster-expand-activity' /* webpackChunkName: \"ceph-storage-plugin\" */\n        ).then((m) => m.ClusterExpandActivity),\n    },\n    flags: {\n      required: [CEPH_FLAG],\n    },\n  },\n];\n\nexport default plugin;\n","import * as _ from 'lodash';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\n\nexport const getResiliencyProgress = (results: PrometheusResponse): number => {\n  /**\n   * Possible values for progress:\n   *   - A float value of String type\n   *   - 'NaN'\n   *   - undefined\n   */\n  const progress: string = _.get(results, 'data.result[0].value[1]');\n  return parseFloat(progress);\n};\n","export * from './dashboard';\n","import * as _ from 'lodash';\nimport { K8sKind, K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\nimport { KebabOption } from '@console/internal/components/utils';\nimport { useTranslation } from 'react-i18next';\n\nconst healthChecksAdded = (resource: K8sResourceKind): boolean => {\n  const containers = resource?.spec?.template?.spec?.containers;\n  return _.every(\n    containers,\n    (container) => container.readinessProbe || container.livenessProbe || container.startupProbe,\n  );\n};\n\nconst healthChecksUrl = (model: K8sKind, obj: K8sResourceKind): string => {\n  const {\n    kind,\n    metadata: { name, namespace },\n  } = obj;\n  const resourceKind = model.crd ? referenceFor(obj) : kind;\n  const containers = obj?.spec?.template?.spec?.containers;\n  const containerName = containers?.[0]?.name;\n  return `/k8s/ns/${namespace}/${resourceKind}/${name}/containers/${containerName}/health-checks`;\n};\n\nexport const AddHealthChecks = (model: K8sKind, obj: K8sResourceKind): KebabOption => {\n  const { t } = useTranslation();\n  return {\n    label: t('COMMON:MSG_MAIN_ACTIONBUTTON_14'),\n    hidden: healthChecksAdded(obj),\n    href: healthChecksUrl(model, obj),\n    accessReview: {\n      group: model.apiGroup,\n      resource: model.plural,\n      name: obj.metadata.name,\n      namespace: obj.metadata.namespace,\n      verb: 'update',\n    },\n  };\n};\n\nexport const EditHealthChecks = (model: K8sKind, obj: K8sResourceKind): KebabOption => {\n  const { t } = useTranslation();\n  return {\n    label: t('COMMON:MSG_MAIN_ACTIONBUTTON_9'),\n    hidden: !healthChecksAdded(obj),\n    href: healthChecksUrl(model, obj),\n    accessReview: {\n      group: model.apiGroup,\n      resource: model.plural,\n      name: obj.metadata.name,\n      namespace: obj.metadata.namespace,\n      verb: 'update',\n    },\n  };\n};\n","import * as React from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { RootState } from '@console/internal/redux';\nimport { WithFlagsProps, connectToFlags } from '@console/internal/reducers/features';\nimport { isCloudShellExpanded } from '../../redux/reducers/cloud-shell-reducer';\nimport { toggleCloudShellExpanded } from '../../redux/actions/cloud-shell-actions';\nimport cloudShellConfirmationModal from './cloudShellConfirmationModal';\nimport CloudShellDrawer from './CloudShellDrawer';\nimport CloudShellTerminal from './CloudShellTerminal';\nimport { FLAG_DEVWORKSPACE } from '../../consts';\n\ntype StateProps = {\n  open: boolean;\n};\n\ntype DispatchProps = {\n  onClose: () => void;\n};\n\ntype CloudShellProps = WithFlagsProps & StateProps & DispatchProps;\n\nconst CloudShell: React.FC<CloudShellProps> = ({ flags, open, onClose }) => {\n  if (!flags[FLAG_DEVWORKSPACE]) {\n    return null;\n  }\n  const toggleWithModal = () => cloudShellConfirmationModal(onClose);\n  return open ? (\n    <CloudShellDrawer onClose={toggleWithModal}>\n      <CloudShellTerminal onCancel={onClose} />\n    </CloudShellDrawer>\n  ) : null;\n};\n\nconst stateToProps = (state: RootState): StateProps => ({\n  open: isCloudShellExpanded(state),\n});\n\nconst dispatchToProps = (dispatch: Dispatch): DispatchProps => ({\n  onClose: () => dispatch(toggleCloudShellExpanded()),\n});\n\nexport default connect<StateProps, DispatchProps>(\n  stateToProps,\n  dispatchToProps,\n)(connectToFlags(FLAG_DEVWORKSPACE)(CloudShell));\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { Tooltip, Flex, FlexItem, FlexModifiers, Button } from '@patternfly/react-core';\nimport { CloseIcon, ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { InlineTechPreviewBadge } from '@console/shared';\nimport Drawer from '@console/shared/src/components/drawer/Drawer';\nimport MinimizeRestoreButton from './MinimizeRestoreButton';\n\nimport './CloudShellDrawer.scss';\n\ntype CloudShellDrawerProps = {\n  onClose: () => void;\n};\n\nconst getMastheadHeight = (): number => {\n  const masthead = document.getElementById('page-main-header');\n  if (!masthead) return 0;\n  const { height } = masthead.getBoundingClientRect();\n  return height;\n};\n\nconst CloudShellDrawer: React.FC<CloudShellDrawerProps> = ({ children, onClose }) => {\n  const [expanded, setExpanded] = React.useState<boolean>(true);\n  const onMRButtonClick = (expandedState: boolean) => {\n    setExpanded(!expandedState);\n  };\n  const handleChange = (openState: boolean) => {\n    setExpanded(openState);\n  };\n  const header = (\n    <Flex style={{ flexGrow: 1 }}>\n      <FlexItem className=\"co-cloud-shell-drawer__heading\">Command line terminal</FlexItem>\n      <FlexItem>\n        <InlineTechPreviewBadge />\n      </FlexItem>\n      <FlexItem breakpointMods={[{ modifier: FlexModifiers['align-right'] }]}>\n        <Tooltip content=\"Open terminal in new tab\">\n          <Button\n            variant=\"plain\"\n            component=\"a\"\n            href=\"/terminal\"\n            target=\"_blank\"\n            aria-label=\"Open terminal in new tab\"\n          >\n            <ExternalLinkAltIcon />\n          </Button>\n        </Tooltip>\n        <MinimizeRestoreButton\n          minimize={expanded}\n          minimizeText=\"Minimize terminal\"\n          restoreText=\"Restore terminal\"\n          onClick={onMRButtonClick}\n        />\n        <Tooltip content=\"Close terminal\">\n          <Button\n            variant=\"plain\"\n            data-test-id=\"cloudshell-terminal-close\"\n            type=\"button\"\n            onClick={onClose}\n            aria-label=\"Close terminal\"\n          >\n            <CloseIcon />\n          </Button>\n        </Tooltip>\n      </FlexItem>\n    </Flex>\n  );\n  return (\n    <Drawer\n      open={expanded}\n      defaultHeight={365}\n      header={header}\n      maxHeight={`calc(100vh - ${getMastheadHeight()}px)`}\n      onChange={handleChange}\n      resizable\n    >\n      {children}\n    </Drawer>\n  );\n};\n\nexport default CloudShellDrawer;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Base64 } from 'js-base64';\nimport { LoadError } from '@console/internal/components/utils';\nimport { connectToFlags, WithFlagsProps } from '@console/internal/reducers/features';\nimport { impersonateStateToProps } from '@console/internal/reducers/ui';\nimport { FLAGS } from '@console/shared';\nimport { WSFactory } from '@console/internal/module/ws-factory';\nimport { resourceURL } from '@console/internal/module/k8s';\nimport { PodModel } from '@console/internal/models';\nimport Terminal, { ImperativeTerminalType } from './Terminal';\nimport TerminalLoadingBox from './TerminalLoadingBox';\nimport useActivityTick from './useActivityTick';\n\n// pod exec WS protocol is FD prefixed, base64 encoded data (sometimes json stringified)\n\n// Channel 0 is STDIN, 1 is STDOUT, 2 is STDERR (if TTY is not requested), and 3 is a special error channel - 4 is C&C\n// The server only reads from STDIN, writes to the other three.\n// see also: https://github.com/kubernetes/kubernetes/pull/13885\n\ntype Props = {\n  workspaceName: string;\n  container: string;\n  podname: string;\n  namespace: string;\n  shcommand?: string[];\n};\n\ntype StateProps = {\n  impersonate?: {\n    subprotocols: string[];\n  };\n};\n\ntype CloudShellExecProps = Props & StateProps & WithFlagsProps;\n\nconst NO_SH =\n  'starting container process caused \"exec: \\\\\"sh\\\\\": executable file not found in $PATH\"';\n\nconst CloudShellExec: React.FC<CloudShellExecProps> = ({\n  workspaceName,\n  container,\n  podname,\n  namespace,\n  shcommand,\n  flags,\n  impersonate,\n}) => {\n  const [wsOpen, setWsOpen] = React.useState<boolean>(false);\n  const [wsError, setWsError] = React.useState<string>();\n  const ws = React.useRef<WSFactory>();\n  const terminal = React.useRef<ImperativeTerminalType>();\n\n  const tick = useActivityTick(workspaceName, namespace);\n\n  const onData = React.useCallback(\n    (data: string): void => {\n      tick();\n      ws.current && ws.current.send(`0${Base64.encode(data)}`);\n    },\n    [tick],\n  );\n\n  React.useEffect(() => {\n    let unmounted: boolean;\n    const usedClient = flags[FLAGS.OPENSHIFT] ? 'oc' : 'kubectl';\n    const cmd = shcommand || ['sh', '-i', '-c', 'TERM=xterm sh'];\n    const subprotocols = (impersonate?.subprotocols || []).concat('base64.channel.k8s.io');\n\n    const urlOpts = {\n      ns: namespace,\n      name: podname,\n      path: 'exec',\n      queryParams: {\n        stdout: '1',\n        stdin: '1',\n        stderr: '1',\n        tty: '1',\n        container,\n        command: cmd.map((c) => encodeURIComponent(c)).join('&command='),\n      },\n    };\n\n    const path = resourceURL(PodModel, urlOpts);\n    const wsOpts = {\n      host: 'auto',\n      reconnect: true,\n      jsonParse: false,\n      path,\n      subprotocols,\n    };\n\n    const websocket: WSFactory = new WSFactory(`${podname}-terminal`, wsOpts);\n    let previous;\n\n    websocket\n      .onmessage((msg) => {\n        const currentTerminal = terminal.current;\n        // error channel\n        if (msg[0] === '3') {\n          if (previous.includes(NO_SH)) {\n            const errMsg = `This container doesn't have a /bin/sh shell. Try specifying your command in a terminal with:\\r\\n\\r\\n ${usedClient} -n ${namespace} exec ${podname} -ti <command>`;\n            currentTerminal && currentTerminal.reset();\n            currentTerminal && currentTerminal.onConnectionClosed(errMsg);\n            websocket.destroy();\n            previous = '';\n            return;\n          }\n        }\n        tick();\n        const data = Base64.decode(msg.slice(1));\n        currentTerminal && currentTerminal.onDataReceived(data);\n        previous = data;\n      })\n      .onopen(() => {\n        const currentTerminal = terminal.current;\n        currentTerminal && currentTerminal.reset();\n        previous = '';\n        if (!unmounted) setWsOpen(true);\n      })\n      .onclose((evt) => {\n        if (!evt || evt.wasClean === true) {\n          return;\n        }\n        const currentTerminal = terminal.current;\n        const error = evt.reason || 'The terminal connection has closed.';\n        currentTerminal && currentTerminal.onConnectionClosed(error);\n        websocket.destroy();\n        if (!unmounted) setWsError(error);\n      }) // eslint-disable-next-line no-console\n      .onerror((evt) => console.error(`WS error?! ${evt}`));\n\n    if (ws.current !== websocket) {\n      ws.current && ws.current.destroy();\n      ws.current = websocket;\n      const currentTerminal = terminal.current;\n      currentTerminal && currentTerminal.onConnectionClosed(`connecting to ${container}`);\n    }\n\n    return () => {\n      unmounted = true;\n      websocket.destroy();\n    };\n  }, [tick, container, flags, impersonate, namespace, podname, shcommand]);\n\n  if (wsError) {\n    return <LoadError message={wsError} label=\"OpenShift command line terminal\" canRetry={false} />;\n  }\n\n  if (wsOpen) {\n    return <Terminal onData={onData} ref={terminal} />;\n  }\n\n  return <TerminalLoadingBox />;\n};\n\nexport default connect<StateProps>(impersonateStateToProps)(\n  connectToFlags<CloudShellExecProps & WithFlagsProps>(FLAGS.OPENSHIFT)(CloudShellExec),\n);\n","import * as React from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { RootState } from '@console/internal/redux';\nimport { TerminalIcon } from '@patternfly/react-icons';\nimport { isCloudShellExpanded } from '../../redux/reducers/cloud-shell-reducer';\nimport { Button, ToolbarItem, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { connectToFlags, WithFlagsProps } from '@console/internal/reducers/features';\nimport { FLAG_DEVWORKSPACE } from '../../consts';\nimport { toggleCloudShellExpanded } from '../../redux/actions/cloud-shell-actions';\nimport cloudShellConfirmationModal from './cloudShellConfirmationModal';\nimport { checkTerminalAvailable } from './cloud-shell-utils';\n\ntype DispatchProps = {\n  onClick: () => void;\n};\n\ntype StateProps = {\n  open?: boolean;\n};\n\ntype Props = WithFlagsProps & StateProps & DispatchProps;\n\nconst ClouldShellMastheadButton: React.FC<Props> = ({ flags, onClick, open }) => {\n  const [terminalAvailable, setTerminalAvailable] = React.useState(false);\n  const flagEnabled = flags[FLAG_DEVWORKSPACE];\n  React.useEffect(() => {\n    let mounted = true;\n    if (flagEnabled) {\n      checkTerminalAvailable()\n        .then(() => {\n          if (mounted) {\n            setTerminalAvailable(true);\n          }\n        })\n        .catch(() => {\n          if (mounted) {\n            setTerminalAvailable(false);\n          }\n        });\n    } else {\n      setTerminalAvailable(false);\n    }\n    return () => {\n      mounted = false;\n    };\n  }, [flagEnabled]);\n\n  if (!flagEnabled || !terminalAvailable) {\n    return null;\n  }\n\n  const toggleTerminal = () => {\n    if (open) {\n      return cloudShellConfirmationModal(onClick);\n    }\n    return onClick();\n  };\n\n  return (\n    <ToolbarItem>\n      <Tooltip\n        content={open ? 'Close command line terminal' : 'Open command line terminal'}\n        position={TooltipPosition.bottom}\n      >\n        <Button\n          variant=\"plain\"\n          aria-label=\"Command line terminal\"\n          onClick={toggleTerminal}\n          className={open ? 'pf-m-selected' : undefined}\n        >\n          <TerminalIcon className=\"co-masthead-icon\" />\n        </Button>\n      </Tooltip>\n    </ToolbarItem>\n  );\n};\n\nconst cloudShellStateToProps = (state: RootState): StateProps => ({\n  open: isCloudShellExpanded(state),\n});\n\nconst cloudShellPropsToState = (dispatch: Dispatch): DispatchProps => ({\n  onClick: () => dispatch(toggleCloudShellExpanded()),\n});\n\nexport default connect<StateProps, DispatchProps>(\n  cloudShellStateToProps,\n  cloudShellPropsToState,\n)(connectToFlags(FLAG_DEVWORKSPACE)(ClouldShellMastheadButton));\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { InlineTechPreviewBadge } from '@console/shared';\nimport CloudShellTerminal from './CloudShellTerminal';\nimport './CloudShellTab.scss';\n\nconst CloudShellTab: React.FC = () => (\n  <>\n    <div className=\"co-cloud-shell-tab__header\">\n      <div className=\"co-cloud-shell-tab__header-text\">OpenShift command line terminal</div>\n      <InlineTechPreviewBadge />\n    </div>\n    <div className=\"co-cloud-shell-tab__body\">\n      <CloudShellTerminal />\n    </div>\n  </>\n);\n\nexport default CloudShellTab;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { RootState } from '@console/internal/redux';\nimport { StatusBox, LoadError } from '@console/internal/components/utils/status-box';\nimport { UserKind } from '@console/internal/module/k8s';\nimport CloudshellExec from './CloudShellExec';\nimport TerminalLoadingBox from './TerminalLoadingBox';\nimport {\n  TerminalInitData,\n  initTerminal,\n  getCloudShellNamespace,\n  setCloudShellNamespace,\n} from './cloud-shell-utils';\nimport CloudShellSetup from './setup/CloudShellSetup';\nimport useCloudShellWorkspace from './useCloudShellWorkspace';\n\nimport './CloudShellTerminal.scss';\n\ntype StateProps = {\n  user: UserKind;\n};\n\ntype Props = {\n  onCancel?: () => void;\n};\n\ntype CloudShellTerminalProps = StateProps & Props;\n\nconst CloudShellTerminal: React.FC<CloudShellTerminalProps> = ({ user, onCancel }) => {\n  const [namespace, setNamespace] = React.useState(getCloudShellNamespace());\n  const [initData, setInitData] = React.useState<TerminalInitData>();\n  const [initError, setInitError] = React.useState<string>();\n\n  const [workspace, loaded, loadError] = useCloudShellWorkspace(user, namespace);\n\n  const workspacePhase = workspace?.status?.phase;\n  const workspaceName = workspace?.metadata?.name;\n  const workspaceNamespace = workspace?.metadata?.namespace;\n\n  const username = user?.metadata?.name;\n\n  // save the namespace once the workspace has loaded\n  React.useEffect(() => {\n    if (loaded && !loadError) {\n      // workspace may be undefined which is ok\n      setCloudShellNamespace(workspaceNamespace);\n    }\n  }, [loaded, loadError, workspaceNamespace]);\n\n  // clear the init data and error if the workspace changes\n  React.useEffect(() => {\n    setInitData(undefined);\n    setInitError(undefined);\n  }, [username, workspaceName, workspaceNamespace]);\n\n  // initialize the terminal once it is Running\n  React.useEffect(() => {\n    let unmounted = false;\n\n    if (workspacePhase === 'Running') {\n      initTerminal(username, workspaceName, workspaceNamespace)\n        .then((res: TerminalInitData) => {\n          if (!unmounted) setInitData(res);\n        })\n        .catch((e) => {\n          if (!unmounted) {\n            const defaultError = 'Failed to connect to your OpenShift command line terminal';\n            if (e?.response?.headers?.get('Content-Type')?.startsWith('text/plain')) {\n              // eslint-disable-next-line promise/no-nesting\n              e.response\n                .text()\n                .then((text) => {\n                  setInitError(text);\n                })\n                .catch(() => {\n                  setInitError(defaultError);\n                });\n            } else {\n              setInitError(defaultError);\n            }\n          }\n        });\n    }\n\n    return () => {\n      unmounted = true;\n    };\n  }, [username, workspaceName, workspaceNamespace, workspacePhase]);\n\n  // failed to load the workspace\n  if (loadError) {\n    return (\n      <StatusBox loaded={loaded} loadError={loadError} label=\"OpenShift command line terminal\" />\n    );\n  }\n\n  // failed to init the terminal\n  if (initError) {\n    return <LoadError message={initError} label=\"OpenShift command line terminal\" />;\n  }\n\n  // loading the workspace resource\n  if (!loaded) {\n    return <TerminalLoadingBox message=\"\" />;\n  }\n\n  // waiting for the workspace to start and initialize the terminal\n  if (workspaceName && !initData) {\n    return (\n      <div className=\"co-cloudshell-terminal__container\">\n        <TerminalLoadingBox />\n      </div>\n    );\n  }\n\n  if (initData && workspaceNamespace) {\n    return (\n      <div className=\"co-cloudshell-terminal__container\">\n        <CloudshellExec\n          workspaceName={workspaceName}\n          namespace={workspaceNamespace}\n          container={initData.container}\n          podname={initData.pod}\n          shcommand={initData.cmd || []}\n        />\n      </div>\n    );\n  }\n\n  // show the form to let the user create a new workspace\n  return (\n    <CloudShellSetup\n      onCancel={onCancel}\n      onSubmit={(ns: string) => {\n        setCloudShellNamespace(ns);\n        setNamespace(ns);\n      }}\n    />\n  );\n};\n\n// For testing\nexport const InternalCloudShellTerminal = CloudShellTerminal;\n\nconst stateToProps = (state: RootState): StateProps => ({\n  user: state.UI.get('user'),\n});\n\nexport default connect(stateToProps)(CloudShellTerminal);\n","import * as React from 'react';\nimport { Tooltip, Button } from '@patternfly/react-core';\nimport { OutlinedWindowMinimizeIcon, OutlinedWindowRestoreIcon } from '@patternfly/react-icons';\n\ntype MinimizeRestoreButtonProps = {\n  minimizeText: string;\n  restoreText: string;\n  minimize?: boolean;\n  onClick: (minimized: boolean) => void;\n};\n\nconst MinimizeRestoreButton: React.FC<MinimizeRestoreButtonProps> = ({\n  minimizeText,\n  restoreText,\n  minimize = true,\n  onClick,\n}) => {\n  const onMinimize = () => {\n    onClick(true);\n  };\n  const onRestore = () => {\n    onClick(false);\n  };\n  return (\n    <Tooltip content={minimize ? minimizeText : restoreText}>\n      <Button\n        variant=\"plain\"\n        type=\"button\"\n        onClick={minimize ? onMinimize : onRestore}\n        aria-label={minimize ? minimizeText : restoreText}\n        isInline\n      >\n        {minimize ? <OutlinedWindowMinimizeIcon /> : <OutlinedWindowRestoreIcon />}\n      </Button>\n    </Tooltip>\n  );\n};\n\nexport default MinimizeRestoreButton;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { Terminal as XTerminal, ITerminalOptions } from 'xterm';\nimport { fit } from 'xterm/lib/addons/fit/fit';\n\nimport './Terminal.scss';\n\nconst terminalOptions: ITerminalOptions = {\n  fontFamily: 'monospace',\n  fontSize: 16,\n  cursorBlink: false,\n  cols: 80,\n  rows: 25,\n};\n\ntype TerminalProps = {\n  onData: (data: string) => void;\n};\n\nexport type ImperativeTerminalType = {\n  focus: () => void;\n  reset: () => void;\n  onDataReceived: (data) => void;\n  onConnectionClosed: (msg: string) => void;\n};\n\nconst Terminal = React.forwardRef<ImperativeTerminalType, TerminalProps>(({ onData }, ref) => {\n  const terminal = React.useRef<XTerminal>();\n  const terminalRef = React.useRef<HTMLDivElement>();\n\n  React.useEffect(() => {\n    const term: XTerminal = new XTerminal(terminalOptions);\n    term.open(terminalRef.current);\n    term.focus();\n\n    const resizeObserver: ResizeObserver = new ResizeObserver(() => {\n      window.requestAnimationFrame(() => fit(term));\n    });\n\n    resizeObserver.observe(terminalRef.current);\n\n    if (terminal.current !== term) {\n      terminal.current && terminal.current.destroy();\n      terminal.current = term;\n    }\n\n    return () => {\n      term.destroy();\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const term = terminal.current;\n    term.on('data', onData);\n\n    return () => {\n      term.off('data', onData);\n    };\n  }, [onData]);\n\n  React.useImperativeHandle(ref, () => ({\n    focus: () => {\n      terminal.current && terminal.current.focus();\n    },\n    reset: () => {\n      if (!terminal.current) return;\n      terminal.current.reset();\n      terminal.current.clear();\n      terminal.current.setOption('disableStdin', false);\n    },\n    onDataReceived: (data) => {\n      terminal.current && terminal.current.write(data);\n    },\n    onConnectionClosed: (msg) => {\n      if (!terminal.current) return;\n      terminal.current.write(`\\x1b[31m${msg || 'disconnected'}\\x1b[m\\r\\n`);\n      terminal.current.setOption('disableStdin', true);\n    },\n  }));\n\n  return <div className=\"co-terminal\" ref={terminalRef} />;\n});\n\nexport default Terminal;\n","import * as React from 'react';\nimport { LoadingBox } from '@console/internal/components/utils/status-box';\n\ntype TerminalLoadingBoxProps = {\n  message?: string;\n};\n\nconst TerminalLoadingBox: React.FC<TerminalLoadingBoxProps> = ({ message }) => (\n  <LoadingBox message={message ?? 'Connecting to your OpenShift command line terminal ...'} />\n);\n\nexport default TerminalLoadingBox;\n","import { K8sResourceKind, k8sPatch } from '@console/internal/module/k8s';\nimport { STORAGE_PREFIX, getRandomChars } from '@console/shared';\nimport { coFetchJSON, coFetch } from '@console/internal/co-fetch';\nimport { WorkspaceModel } from '../../models';\n\nconst CLOUD_SHELL_NAMESPACE = `${STORAGE_PREFIX}/command-line-terminal-namespace`;\n\ntype DevWorkspaceTemplateSpec = {\n  components: Component[];\n};\n\ntype Component = {\n  plugin: {\n    name?: string;\n    id: string;\n  };\n};\n\nexport type CloudShellResource = K8sResourceKind & {\n  status?: {\n    phase: string;\n    ideUrl: string;\n  };\n  spec?: {\n    started?: boolean;\n    routingClass?: string;\n    template?: DevWorkspaceTemplateSpec;\n  };\n};\n\nexport type TerminalInitData = { pod: string; container: string; cmd: string[] };\n\nexport const CLOUD_SHELL_LABEL = 'console.openshift.io/terminal';\nexport const CLOUD_SHELL_CREATOR_LABEL = 'controller.devfile.io/creator';\nexport const CLOUD_SHELL_RESTRICTED_ANNOTATION = 'controller.devfile.io/restricted-access';\n\nexport const createCloudShellResourceName = () => `terminal-${getRandomChars(6)}`;\n\nexport const newCloudShellWorkSpace = (name: string, namespace: string): CloudShellResource => ({\n  apiVersion: 'workspace.devfile.io/v1alpha1',\n  kind: 'DevWorkspace',\n  metadata: {\n    name,\n    namespace,\n    labels: {\n      [CLOUD_SHELL_LABEL]: 'true',\n    },\n    annotations: {\n      [CLOUD_SHELL_RESTRICTED_ANNOTATION]: 'true',\n    },\n  },\n  spec: {\n    started: true,\n    routingClass: 'web-terminal',\n    template: {\n      components: [\n        {\n          plugin: {\n            name: 'web-terminal',\n            id: 'redhat-developer/web-terminal/4.5.0',\n          },\n        },\n      ],\n    },\n  },\n});\n\nexport const startWorkspace = (workspace: CloudShellResource) => {\n  return k8sPatch(WorkspaceModel, workspace, [\n    {\n      path: '/spec/started',\n      op: 'replace',\n      value: true,\n    },\n  ]);\n};\n\nexport const initTerminal = (\n  username: string,\n  workspaceName: string,\n  workspaceNamespace: string,\n): Promise<TerminalInitData> => {\n  const url = `/api/terminal/proxy/${workspaceNamespace}/${workspaceName}/exec/init`;\n  const payload = {\n    kubeconfig: {\n      username,\n      namespace: workspaceNamespace,\n    },\n  };\n  return coFetchJSON.post(url, payload);\n};\n\nexport const sendActivityTick = (workspaceName: string, namespace: string): void => {\n  coFetch(`/api/terminal/proxy/${namespace}/${workspaceName}/activity/tick`, { method: 'POST' });\n};\n\nexport const checkTerminalAvailable = () => coFetch('/api/terminal/available');\n\nexport const getCloudShellNamespace = () => localStorage.getItem(CLOUD_SHELL_NAMESPACE);\nexport const setCloudShellNamespace = (namespace: string) => {\n  if (!namespace) {\n    localStorage.removeItem(CLOUD_SHELL_NAMESPACE);\n  } else {\n    localStorage.setItem(CLOUD_SHELL_NAMESPACE, namespace);\n  }\n};\n","import { confirmModal } from '@console/internal/components/modals/confirm-modal';\n\nconst cloudShellConfirmationModal = (action) => {\n  return confirmModal({\n    title: 'Close Terminal?',\n    message:\n      'This will close the terminal session. Content in the terminal will not be restored on next session.',\n    btnText: 'Yes',\n    submitDanger: true,\n    cancelText: 'No',\n    executeFn: () => Promise.resolve(action()),\n  });\n};\n\nexport default cloudShellConfirmationModal;\n","import * as React from 'react';\nimport { Formik } from 'formik';\nimport { ALL_NAMESPACES_KEY } from '@console/shared';\nimport { ProjectRequestModel } from '@console/internal/models';\nimport { RootState } from '@console/internal/redux';\nimport { connect } from 'react-redux';\n\nimport { k8sCreate } from '@console/internal/module/k8s';\nimport {\n  CloudShellSetupFormData,\n  CREATE_NAMESPACE_KEY,\n  cloudShellSetupValidation,\n} from './cloud-shell-setup-utils';\nimport CloudSehellSetupForm from './CloudShellSetupForm';\nimport { WorkspaceModel } from '../../../models';\nimport { newCloudShellWorkSpace, createCloudShellResourceName } from '../cloud-shell-utils';\n\ninterface StateProps {\n  activeNamespace: string;\n  username: string;\n}\n\ntype Props = StateProps & {\n  onSubmit?: (namespace: string) => void;\n  onCancel?: () => void;\n};\n\nconst CloudShellSetup: React.FunctionComponent<Props> = ({\n  activeNamespace,\n  onSubmit,\n  onCancel,\n}) => {\n  const initialValues: CloudShellSetupFormData = {\n    namespace: activeNamespace === ALL_NAMESPACES_KEY ? undefined : activeNamespace,\n  };\n  const handleSubmit = async (values: CloudShellSetupFormData, actions) => {\n    actions.setSubmitting(true);\n    const createNamespace = values.namespace === CREATE_NAMESPACE_KEY;\n    const namespace = createNamespace ? values.newNamespace : values.namespace;\n\n    try {\n      if (createNamespace) {\n        await k8sCreate(ProjectRequestModel, {\n          metadata: {\n            name: namespace,\n          },\n        });\n      }\n      await k8sCreate(\n        WorkspaceModel,\n        newCloudShellWorkSpace(createCloudShellResourceName(), namespace),\n      );\n      onSubmit && onSubmit(namespace);\n    } catch (err) {\n      actions.setStatus({ submitError: err.message });\n    }\n    actions.setSubmitting(false);\n  };\n\n  return (\n    <div className=\"co-m-pane__body\" style={{ paddingBottom: 0 }}>\n      <h2>Initialize Terminal</h2>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        onReset={onCancel}\n        validate={cloudShellSetupValidation}\n      >\n        {(props) => <CloudSehellSetupForm {...props} />}\n      </Formik>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  username: state.UI.get('user')?.metadata?.name || '',\n  activeNamespace: state.UI.get('activeNamespace'),\n});\n\nexport default connect<StateProps>(mapStateToProps)(CloudShellSetup);\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { FormikProps, FormikValues } from 'formik';\nimport { Form } from '@patternfly/react-core';\nimport { FormFooter } from '@console/shared';\nimport NamespaceSection from './NamespaceSection';\n\nconst CloudShellSetupForm: React.FC<Pick<\n  FormikProps<FormikValues>,\n  'errors' | 'handleSubmit' | 'handleReset' | 'status' | 'isSubmitting'\n>> = ({ errors, handleSubmit, handleReset, status, isSubmitting }) => {\n  return (\n    <Form onSubmit={handleSubmit} className=\"co-m-pane__form\">\n      <NamespaceSection />\n      <FormFooter\n        handleReset={handleReset}\n        errorMessage={status && status.submitError}\n        isSubmitting={isSubmitting}\n        submitLabel=\"Start\"\n        disableSubmit={!_.isEmpty(errors) || isSubmitting}\n        resetLabel=\"Cancel\"\n        sticky\n      />\n    </Form>\n  );\n};\n\nexport default CloudShellSetupForm;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext, FormikValues, useField } from 'formik';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { ProjectModel } from '@console/internal/models';\nimport { InputField, ResourceDropdownField, useFormikValidationFix, FLAGS } from '@console/shared';\nimport { CREATE_NAMESPACE_KEY } from './cloud-shell-setup-utils';\nimport { connectToFlags, WithFlagsProps } from '@console/internal/reducers/features';\n\ntype NamespaceSectionProps = WithFlagsProps;\n\nconst NamespaceSection: React.FC<NamespaceSectionProps> = ({ flags }) => {\n  const canCreate = flags[FLAGS.CAN_CREATE_PROJECT];\n  const [namespace] = useField('namespace');\n  const { setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n\n  useFormikValidationFix(namespace.value);\n\n  const onDropdownChange = React.useCallback(\n    (key: string) => {\n      setFieldTouched('namespace', true);\n      setFieldValue('namespace', key);\n    },\n    [setFieldValue, setFieldTouched],\n  );\n\n  const handleOnLoad = (projectList: { [key: string]: string }) => {\n    const noProjects = _.isEmpty(projectList);\n    if (noProjects || !projectList[namespace.value]) {\n      if (canCreate && namespace.value !== CREATE_NAMESPACE_KEY) {\n        setFieldValue('namespace', CREATE_NAMESPACE_KEY);\n      }\n      if (!canCreate && namespace.value) {\n        setFieldValue('namespace', undefined);\n      }\n    }\n  };\n\n  return (\n    <>\n      <ResourceDropdownField\n        name=\"namespace\"\n        label=\"Project\"\n        placeholder=\"Select Project\"\n        fullWidth\n        required\n        selectedKey={namespace.value}\n        resources={[\n          {\n            isList: true,\n            kind: ProjectModel.kind,\n            prop: ProjectModel.id,\n          },\n        ]}\n        dataSelector={['metadata', 'name']}\n        onChange={onDropdownChange}\n        actionItems={\n          canCreate\n            ? [\n                {\n                  actionTitle: 'Create Project',\n                  actionKey: CREATE_NAMESPACE_KEY,\n                },\n              ]\n            : undefined\n        }\n        onLoad={handleOnLoad}\n        helpText=\"This project will be used to initialize your command line terminal\"\n      />\n      {namespace.value === CREATE_NAMESPACE_KEY && (\n        <InputField type={TextInputTypes.text} required name=\"newNamespace\" label=\"Project Name\" />\n      )}\n    </>\n  );\n};\n\n// exposed for testing\nexport const InternalNamespaceSection = NamespaceSection;\n\nexport default connectToFlags(FLAGS.CAN_CREATE_PROJECT)(NamespaceSection);\n","export type CloudShellSetupFormData = {\n  namespace?: string;\n  newNamespace?: string;\n  createNamespace?: boolean;\n};\n\nexport const CREATE_NAMESPACE_KEY = '#CREATE_NAMESPACE_KEY#';\n\nexport const cloudShellSetupValidation = (values: CloudShellSetupFormData) => {\n  const errors: { [key: string]: string } = {};\n\n  if (!values.namespace) {\n    errors.namespace = 'Required';\n  } else if (values.namespace === CREATE_NAMESPACE_KEY && !values.newNamespace) {\n    errors.newNamespace = 'Required';\n  }\n  return errors;\n};\n","import * as React from 'react';\nimport { sendActivityTick } from './cloud-shell-utils';\n\n// 1 minute\nconst TICK_INTERVAL = 60000;\n\nconst useActivityTick = (workspaceName: string, namespace: string) => {\n  const lastTick = React.useRef<number>(0);\n\n  const tick = React.useCallback(() => {\n    const now = Date.now();\n    if (now - lastTick.current >= TICK_INTERVAL) {\n      sendActivityTick(workspaceName, namespace);\n      lastTick.current = now;\n    }\n  }, [workspaceName, namespace]);\n\n  return tick;\n};\n\nexport default useActivityTick;\n","import * as React from 'react';\nimport { UserKind, referenceForModel, k8sList } from '@console/internal/module/k8s';\nimport {\n  WatchK8sResource,\n  useK8sWatchResource,\n  WatchK8sResult,\n} from '@console/internal/components/utils/k8s-watch-hook';\nimport {\n  CLOUD_SHELL_LABEL,\n  CLOUD_SHELL_CREATOR_LABEL,\n  CloudShellResource,\n  CLOUD_SHELL_RESTRICTED_ANNOTATION,\n  startWorkspace,\n} from './cloud-shell-utils';\nimport { useAccessReview2 } from '@console/internal/components/utils';\nimport { ProjectModel } from '@console/internal/models';\nimport { useSafetyFirst } from '@console/internal/components/safety-first';\nimport { WorkspaceModel } from '../../models';\n\nconst findWorkspace = (data?: CloudShellResource[]): CloudShellResource | undefined => {\n  if (Array.isArray(data)) {\n    return data.find(\n      (d) =>\n        d?.metadata?.annotations?.[CLOUD_SHELL_RESTRICTED_ANNOTATION] === 'true' &&\n        !d?.metadata?.deletionTimestamp,\n    );\n  }\n  return undefined;\n};\n\nconst useCloudShellWorkspace = (\n  user: UserKind,\n  defaultNamespace: string = null,\n): WatchK8sResult<CloudShellResource> => {\n  const [namespace, setNamespace] = useSafetyFirst(defaultNamespace);\n  const [searching, setSearching] = useSafetyFirst<boolean>(false);\n  const [noNamespaceFound, setNoNamespaceFound] = useSafetyFirst<boolean>(false);\n\n  // sync defaultNamespace to namespace\n  React.useEffect(() => {\n    setNamespace(defaultNamespace);\n    // a new namespace means we can start a new search\n    setNoNamespaceFound(false);\n  }, [defaultNamespace, setNamespace, setNoNamespaceFound]);\n\n  const [canListWorkspaces, loadingAccessReview] = useAccessReview2({\n    group: WorkspaceModel.apiGroup,\n    resource: WorkspaceModel.plural,\n    verb: 'list',\n  });\n\n  const uid = user?.metadata?.uid;\n  const username = user?.metadata?.name;\n  const isKubeAdmin = !uid && username === 'kube:admin';\n  const resource = React.useMemo<WatchK8sResource>(() => {\n    if (loadingAccessReview || (!canListWorkspaces && !namespace)) {\n      return undefined;\n    }\n    const result: WatchK8sResource = {\n      kind: referenceForModel(WorkspaceModel),\n      isList: true,\n      selector: {\n        matchLabels: {\n          [CLOUD_SHELL_LABEL]: 'true',\n          [CLOUD_SHELL_CREATOR_LABEL]: isKubeAdmin ? '' : uid,\n        },\n      },\n    };\n\n    if (!canListWorkspaces) {\n      result.namespace = namespace;\n    }\n    return result;\n  }, [isKubeAdmin, uid, namespace, loadingAccessReview, canListWorkspaces]);\n\n  // call k8s api to fetch workspace\n  const [data, loaded, loadError] = useK8sWatchResource<CloudShellResource[]>(resource);\n  const workspace = findWorkspace(data);\n\n  const searchNamespaces =\n    // are we currently searching\n    searching ||\n    // wait for access review to return\n    (!loadingAccessReview &&\n      // user cannot list workspaces at the cluster scope\n      !canListWorkspaces &&\n      // fetching the workspace succeeded or failed\n      (loaded || loadError) &&\n      // was a workspace was found\n      !workspace &&\n      // did a previous search result in no namespace found\n      !noNamespaceFound);\n\n  // FIXME need to use a service account on the backend to find the workspace instead of inefficiently looping through namespaces\n  React.useEffect(() => {\n    let unmounted = false;\n    if (searchNamespaces) {\n      (async () => {\n        setNoNamespaceFound(false);\n        setSearching(true);\n        setNamespace(undefined);\n        try {\n          const projects = await k8sList(ProjectModel);\n          if (unmounted) return;\n          if (Array.isArray(projects)) {\n            for (const project of projects) {\n              const projectName = project.metadata.name;\n              try {\n                // search each project sequentially\n                // eslint-disable-next-line no-await-in-loop\n                const workspaceList = await k8sList(WorkspaceModel, {\n                  ns: projectName,\n                  labelSelector: {\n                    matchLabels: {\n                      [CLOUD_SHELL_LABEL]: 'true',\n                      [CLOUD_SHELL_CREATOR_LABEL]: isKubeAdmin ? '' : uid,\n                    },\n                  },\n                });\n                if (unmounted) return;\n                const foundWorkspace = findWorkspace(workspaceList);\n                if (foundWorkspace) {\n                  setNamespace(projectName);\n                  return;\n                }\n              } catch {\n                // ignore and move on to the next namespace\n              }\n            }\n          }\n          setNoNamespaceFound(true);\n        } catch (e) {\n          setNoNamespaceFound(true);\n        } finally {\n          setSearching(false);\n        }\n      })();\n    }\n    return () => {\n      unmounted = true;\n    };\n  }, [isKubeAdmin, searchNamespaces, setNamespace, uid, setNoNamespaceFound, setSearching]);\n\n  React.useEffect(() => {\n    if (workspace?.spec && !workspace.spec.started) {\n      startWorkspace(workspace);\n    }\n    // Run this effect if the workspace name or namespace changes.\n    // This effect should only be run once per workspace.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [workspace?.metadata?.name, workspace?.metadata?.namespace]);\n\n  return [\n    workspace,\n    // loaded if we have a resource loaded and currently not searching\n    // or if the search resulted in no namespace found\n    (!!resource && !searching && !searchNamespaces && loaded) || noNamespaceFound,\n    // provide the error associated with fetching the workspace\n    resource && !searching && !searchNamespaces ? loadError : undefined,\n  ];\n};\n\nexport default useCloudShellWorkspace;\n","import {\n  ClusterVersionKind,\n  ClusterUpdateStatus,\n  getClusterUpdateStatus,\n} from '@console/internal/module/k8s';\n\nexport const isClusterUpdateActivity = (cv: ClusterVersionKind) =>\n  getClusterUpdateStatus(cv) === ClusterUpdateStatus.Updating;\n\nexport const getClusterUpdateTimestamp = (cv: ClusterVersionKind) =>\n  cv && cv.status && cv.status.history[0] ? new Date(cv.status.history[0].startedTime) : null;\n","import * as _ from 'lodash';\nimport {\n  PrometheusHealthHandler,\n  URLHealthHandler,\n  SubsystemHealth,\n  GetOperatorsWithStatuses,\n  GetOperatorStatusPriority,\n} from '@console/plugin-sdk';\nimport {\n  HealthState,\n  healthPriority,\n} from '@console/shared/src/components/dashboard/status-card/states';\nimport { coFetch } from '@console/internal/co-fetch';\nimport {\n  ClusterVersionKind,\n  ClusterUpdateStatus,\n  getClusterUpdateStatus,\n  getClusterOperatorStatus,\n  OperatorStatus,\n  ClusterOperator,\n} from '@console/internal/module/k8s';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport { humanizePercentage } from '@console/internal/components/utils/units';\nimport { getOperatorsStatus } from '@console/shared/src/components/dashboard/status-card/state-utils';\nimport { pluralize } from '@patternfly/react-core';\n\nexport const fetchK8sHealth = async (url: string) => {\n  const response = await coFetch(url);\n  return response.text();\n};\n\nexport const getK8sHealthState: URLHealthHandler<string> = (k8sHealth, error, resource) => {\n  if (error) {\n    return { state: HealthState.NOT_AVAILABLE };\n  }\n  if (!k8sHealth) {\n    return { state: HealthState.LOADING };\n  }\n  if (\n    getClusterUpdateStatus(_.get(resource, 'data') as ClusterVersionKind) ===\n    ClusterUpdateStatus.Updating\n  ) {\n    return { state: HealthState.UPDATING, message: 'Updating' };\n  }\n  return { state: k8sHealth === 'ok' ? HealthState.OK : HealthState.ERROR };\n};\n\nexport const getControlPlaneComponentHealth = (\n  response: PrometheusResponse,\n  error,\n): SubsystemHealth => {\n  if (error) {\n    return {\n      state: HealthState.NOT_AVAILABLE,\n      message: healthPriority[HealthState.NOT_AVAILABLE].message,\n    };\n  }\n  if (!response) {\n    return { state: HealthState.LOADING };\n  }\n  const value = response.data?.result?.[0]?.value?.[1];\n  if (_.isNil(value)) {\n    return { state: HealthState.UNKNOWN, message: healthPriority[HealthState.UNKNOWN].message };\n  }\n  const perc = humanizePercentage(value);\n  if (perc.value > 90) {\n    return { state: HealthState.OK, message: perc.string };\n  }\n  if (perc.value > 70) {\n    return { state: HealthState.WARNING, message: perc.string };\n  }\n  return { state: HealthState.ERROR, message: perc.string };\n};\n\nconst getWorstStatus = (\n  componentsHealth: SubsystemHealth[],\n): { state: HealthState; message: string; count: number } => {\n  const withPriority = componentsHealth.map((h) => healthPriority[h.state]);\n  const mostImportantState = Math.max(...withPriority.map(({ priority }) => priority));\n  const worstStatuses = withPriority.filter(({ priority }) => priority === mostImportantState);\n  return {\n    state: worstStatuses[0].health,\n    message: worstStatuses[0].message,\n    count: worstStatuses.length,\n  };\n};\n\nexport const getControlPlaneHealth: PrometheusHealthHandler = (responses) => {\n  const componentsHealth = responses.map(({ response, error }) =>\n    getControlPlaneComponentHealth(response, error),\n  );\n  if (componentsHealth.some((c) => c.state === HealthState.LOADING)) {\n    return { state: HealthState.LOADING };\n  }\n  const worstStatus = getWorstStatus(componentsHealth);\n\n  return {\n    state: worstStatus.state,\n    message: worstStatus.message\n      ? worstStatus.count === 4\n        ? worstStatus.message\n        : `${pluralize(worstStatus.count, 'component')} ${worstStatus.message.toLowerCase()}`\n      : null,\n  };\n};\n\nexport const getClusterOperatorStatusPriority: GetOperatorStatusPriority<ClusterOperator> = (\n  co,\n) => {\n  const status = getClusterOperatorStatus(co);\n  if (status === OperatorStatus.Degraded) {\n    return { ...healthPriority[HealthState.WARNING], title: status };\n  }\n  if (status === OperatorStatus.Unknown) {\n    return { ...healthPriority[HealthState.UNKNOWN], title: status };\n  }\n  if (status === OperatorStatus.Updating) {\n    return { ...healthPriority[HealthState.UPDATING], title: status };\n  }\n  return { ...healthPriority[HealthState.OK], title: status };\n};\n\nexport const getClusterOperatorHealthStatus: GetOperatorsWithStatuses<ClusterOperator> = (\n  resources,\n) => {\n  return (resources.clusterOperators.data as ClusterOperator[]).map((co) =>\n    getOperatorsStatus<ClusterOperator>([co], getClusterOperatorStatusPriority),\n  );\n};\n","import * as React from 'react';\nimport { DASH, getNodeRoles } from '@console/shared';\nimport { NodeKind } from '@console/internal/module/k8s';\n\ntype NodeRolesProps = {\n  node?: NodeKind;\n};\n\nconst NodeRoles: React.FC<NodeRolesProps> = ({ node }) => (\n  <>\n    {getNodeRoles(node)\n      .sort()\n      .join(', ') || DASH}\n  </>\n);\n\nexport default NodeRoles;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport ConsumerPopover from '@console/shared/src/components/dashboard/utilization-card/TopConsumerPopover';\nimport { Status, SecondaryStatus, getNodeSecondaryStatus } from '@console/shared';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { humanizeBinaryBytes, humanizeNumber } from '@console/internal/components/utils';\nimport { nodeStatus } from '../../status/node';\nimport { PressureQueries, Condition } from '../../queries';\n\nconst conditionDescriptionMap = Object.freeze({\n  [Condition.DISK_PRESSURE]: 'available memory is low',\n  [Condition.MEM_PRESSURE]: 'available disk capacity is low',\n  [Condition.PID_PRESSURE]: 'CPU is running a large number of processes',\n});\n\nconst humanizeMap = Object.freeze({\n  [Condition.DISK_PRESSURE]: humanizeBinaryBytes,\n  [Condition.MEM_PRESSURE]: humanizeBinaryBytes,\n  [Condition.PID_PRESSURE]: humanizeNumber,\n});\n\nconst isMonitoredCondition = (condition: Condition): boolean =>\n  [Condition.DISK_PRESSURE, Condition.MEM_PRESSURE, Condition.PID_PRESSURE].includes(condition);\n\nconst getDegradedStates = (node: NodeKind): Condition[] => {\n  return node.status.conditions\n    .filter(({ status, type }) => status === 'True' && isMonitoredCondition(type as Condition))\n    .map(({ type }) => type as Condition);\n};\n\nconst NodeStatus: React.FC<NodeStatusProps> = ({ node, showPopovers = false, className }) => {\n  const status = showPopovers ? getDegradedStates(node) : [];\n  return (\n    <>\n      <Status status={nodeStatus(node)} className={className} />\n      <SecondaryStatus status={getNodeSecondaryStatus(node)} />\n      {status.length > 0 &&\n        status.map((item) => (\n          <div key={item}>\n            <ConsumerPopover\n              title={_.startCase(item)}\n              current={_.startCase(item)}\n              consumers={PressureQueries[item](node.metadata.name)}\n              humanize={humanizeMap[item]}\n              description={`This node's ${conditionDescriptionMap[item]}. Performance may be degraded.`}\n            />\n          </div>\n        ))}\n    </>\n  );\n};\n\ntype NodeStatusProps = {\n  node: NodeKind;\n  showPopovers?: boolean;\n  className?: string;\n};\n\nexport default NodeStatus;\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { connect } from 'react-redux';\nimport * as _ from 'lodash';\nimport { sortable } from '@patternfly/react-table';\nimport { getName, getUID, getNodeRole } from '@console/shared';\nimport { NodeModel } from '@console/internal/models';\nimport { NodeKind, referenceForModel } from '@console/internal/module/k8s';\nimport {\n  Table,\n  TableRow,\n  TableData,\n  ListPage,\n  RowFunctionArgs,\n} from '@console/internal/components/factory';\nimport {\n  Kebab,\n  ResourceKebab,\n  ResourceLink,\n  Timestamp,\n  humanizeBinaryBytes,\n  formatCores,\n} from '@console/internal/components/utils';\nimport { NodeMetrics, setNodeMetrics } from '@console/internal/actions/ui';\nimport { PROMETHEUS_BASE_PATH } from '@console/internal/components/graphs';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { getPrometheusURL, PrometheusEndpoint } from '@console/internal/components/graphs/helpers';\nimport { nodeStatus } from '../../status/node';\nimport NodeRoles from './NodeRoles';\nimport { menuActions } from './menu-actions';\nimport NodeStatus from './NodeStatus';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  Kebab.columnClass,\n];\n\nconst NodeTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Status',\n      sortFunc: 'nodeReadiness',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Role',\n      sortFunc: 'nodeRoles',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Pods',\n      sortFunc: 'nodePods',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Memory',\n      sortFunc: 'nodeMemory',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: 'CPU',\n      sortFunc: 'nodeCPU',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: 'Filesystem',\n      sortFunc: 'nodeFS',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[6] },\n    },\n    {\n      title: 'Created',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[7] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[8] },\n    },\n  ];\n};\nNodeTableHeader.displayName = 'NodeTableHeader';\n\nconst mapStateToProps = ({ UI }) => ({\n  metrics: UI.getIn(['metrics', 'node']),\n});\n\ntype NodesRowMapFromStateProps = {\n  metrics: NodeMetrics;\n};\n\nconst NodesTableRow = connect<NodesRowMapFromStateProps, null, NodesTableRowProps>(mapStateToProps)(\n  ({\n    obj: node,\n    index,\n    rowKey,\n    style,\n    metrics,\n  }: NodesTableRowProps & NodesRowMapFromStateProps) => {\n    const nodeName = getName(node);\n    const nodeUID = getUID(node);\n    const usedMem = metrics?.usedMemory?.[nodeName];\n    const totalMem = metrics?.totalMemory?.[nodeName];\n    const memory =\n      Number.isFinite(usedMem) && Number.isFinite(totalMem)\n        ? `${humanizeBinaryBytes(usedMem).string} / ${humanizeBinaryBytes(totalMem).string}`\n        : '-';\n    const cores = metrics?.cpu?.[nodeName];\n    const usedStrg = metrics?.usedStorage?.[nodeName];\n    const totalStrg = metrics?.totalStorage?.[nodeName];\n    const storage =\n      Number.isFinite(usedStrg) && Number.isFinite(totalStrg)\n        ? `${humanizeBinaryBytes(usedStrg).string} / ${humanizeBinaryBytes(totalStrg).string}`\n        : '-';\n    const pods = metrics?.pods?.[nodeName] ?? '-';\n    return (\n      <TableRow id={nodeUID} index={index} trKey={rowKey} style={style}>\n        <TableData className={tableColumnClasses[0]}>\n          <ResourceLink kind={referenceForModel(NodeModel)} name={nodeName} title={nodeUID} />\n        </TableData>\n        <TableData className={tableColumnClasses[1]}>\n          <NodeStatus node={node} showPopovers />\n        </TableData>\n        <TableData className={tableColumnClasses[2]}>\n          <NodeRoles node={node} />\n        </TableData>\n        <TableData className={tableColumnClasses[3]}>{pods}</TableData>\n        <TableData className={tableColumnClasses[4]}>{memory}</TableData>\n        <TableData className={tableColumnClasses[5]}>\n          {cores ? `${formatCores(cores)} cores` : '-'}\n        </TableData>\n        <TableData className={tableColumnClasses[6]}>{storage}</TableData>\n        <TableData className={tableColumnClasses[7]}>\n          <Timestamp timestamp={node.metadata.creationTimestamp} />\n        </TableData>\n        <TableData className={tableColumnClasses[8]}>\n          <ResourceKebab\n            actions={menuActions}\n            kind={referenceForModel(NodeModel)}\n            resource={node}\n          />\n        </TableData>\n      </TableRow>\n    );\n  },\n);\nNodesTableRow.displayName = 'NodesTableRow';\n\ntype NodesTableRowProps = {\n  obj: NodeKind;\n  index: number;\n  rowKey: string;\n  style: object;\n};\n\nconst NodesTable: React.FC<NodesTableProps> = React.memo((props) => {\n  const Row = React.useCallback(\n    (rowArgs: RowFunctionArgs<NodeKind>) => (\n      <NodesTableRow\n        obj={rowArgs.obj}\n        index={rowArgs.index}\n        rowKey={rowArgs.key}\n        style={rowArgs.style}\n      />\n    ),\n    [],\n  );\n  return <Table {...props} aria-label=\"Nodes\" Header={NodeTableHeader} Row={Row} virtualize />;\n});\n\ntype NodesTableProps = React.ComponentProps<typeof Table> & {\n  data: NodeKind[];\n};\n\nconst filters = [\n  {\n    filterGroupName: 'Status',\n    type: 'node-status',\n    reducer: nodeStatus,\n    items: [\n      { id: 'Ready', title: 'Ready' },\n      { id: 'Not Ready', title: 'Not Ready' },\n    ],\n  },\n  {\n    filterGroupName: 'Role',\n    type: 'node-role',\n    reducer: getNodeRole,\n    items: [\n      {\n        id: 'master',\n        title: 'Master',\n      },\n      {\n        id: 'worker',\n        title: 'Worker',\n      },\n    ],\n  },\n];\n\nconst fetchNodeMetrics = (): Promise<NodeMetrics> => {\n  const metrics = [\n    {\n      key: 'usedMemory',\n      query: 'sum by (instance) (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes)',\n    },\n    {\n      key: 'totalMemory',\n      query: 'sum by (instance) (node_memory_MemTotal_bytes)',\n    },\n    {\n      key: 'usedStorage',\n      query: 'sum by (instance) (node_filesystem_size_bytes - node_filesystem_free_bytes)',\n    },\n    {\n      key: 'totalStorage',\n      query: 'sum by (instance) (node_filesystem_size_bytes)',\n    },\n    {\n      key: 'cpu',\n      query: 'sum by(instance) (instance:node_cpu:rate:sum)',\n    },\n    {\n      key: 'pods',\n      query: 'sum by(node)(kubelet_running_pod_count)',\n    },\n  ];\n  const promises = metrics.map(({ key, query }) => {\n    const url = getPrometheusURL({ endpoint: PrometheusEndpoint.QUERY, query });\n    return coFetchJSON(url).then(({ data: { result } }) => {\n      return result.reduce((acc, data) => {\n        const value = Number(data.value[1]);\n        return _.set(acc, [key, data.metric.instance || data.metric.node], value);\n      }, {});\n    });\n  });\n  return Promise.all(promises).then((data: any[]) => _.assign({}, ...data));\n};\n\nconst mapDispatchToProps = (dispatch): MapDispatchToProps => ({\n  setNodeMetrics: (metrics) => dispatch(setNodeMetrics(metrics)),\n});\n\nconst showMetrics = PROMETHEUS_BASE_PATH && window.innerWidth > 1200;\n\nconst NodesPage = connect<{}, MapDispatchToProps>(\n  null,\n  mapDispatchToProps,\n)((props: MapDispatchToProps) => {\n  const { setNodeMetrics: setMetrics } = props;\n\n  React.useEffect(() => {\n    const updateMetrics = () =>\n      fetchNodeMetrics()\n        .then(setMetrics)\n        .catch((e) => {\n          // eslint-disable-next-line no-console\n          console.error('Error fetching node metrics: ', e);\n        });\n    updateMetrics();\n    if (showMetrics) {\n      const id = setInterval(updateMetrics, 30 * 1000);\n      return () => clearInterval(id);\n    }\n    return () => {};\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return <ListPage {...props} kind=\"Node\" ListComponent={NodesTable} rowFilters={filters} />;\n});\n\ntype MapDispatchToProps = {\n  setNodeMetrics: (metrics) => void;\n};\n\nexport default NodesPage;\n","import * as React from 'react';\nimport { K8sKind, NodeKind } from '@console/internal/module/k8s';\nimport { Kebab, KebabAction, asAccessReview } from '@console/internal/components/utils';\nimport { isNodeUnschedulable } from '@console/shared';\nimport { makeNodeSchedulable } from '../../k8s/requests/nodes';\nimport { createConfigureUnschedulableModal } from './modals';\nimport { NodeModel } from '@console/internal/models';\nimport { deleteModal } from '@console/internal/components/modals/delete-modal';\nimport { useTranslation } from 'react-i18next';\n\nexport const MarkAsUnschedulable: KebabAction = (kind: K8sKind, obj: NodeKind) => {\n  const { t } = useTranslation();\n  return {\n    label: t('COMMON:MSG_COMMON_ACTIONBUTTON_49'),\n    hidden: isNodeUnschedulable(obj),\n    callback: () => createConfigureUnschedulableModal({ resource: obj }),\n    accessReview: {\n      group: kind.apiGroup,\n      resource: kind.plural,\n      name: obj.metadata.name,\n      namespace: obj.metadata.namespace,\n      verb: 'patch',\n    },\n  };\n};\n\nexport const MarkAsSchedulable: KebabAction = (\n  kind: K8sKind,\n  obj: NodeKind,\n  resources: {},\n  { nodeMaintenance } = { nodeMaintenance: false }, // NOTE: used by node actions in metal3-plugin\n) => ({\n  label: 'Mark as Schedulable',\n  hidden: !isNodeUnschedulable(obj) || nodeMaintenance,\n  callback: () => makeNodeSchedulable(obj),\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    name: obj.metadata.name,\n    namespace: obj.metadata.namespace,\n    verb: 'patch',\n  },\n});\n\nexport const Delete: KebabAction = (kindObj: K8sKind, node: NodeKind) => {\n  const { t } = useTranslation();\n  const message = <p>{t('COMMON:MSG_MAIN_POPUP_DESCRIPTION_4')}</p>;\n\n  return {\n    label: t('COMMON:MSG_COMMON_ACTIONBUTTON_51'),\n    callback: () =>\n      deleteModal({\n        kind: kindObj,\n        resource: node,\n        message,\n      }),\n    accessReview: asAccessReview(NodeModel, node, 'delete'),\n  };\n};\n\nconst { ModifyLabels, ModifyAnnotations, Edit } = Kebab.factory;\nexport const menuActions = [MarkAsSchedulable, MarkAsUnschedulable, ModifyLabels, ModifyAnnotations, Edit, Delete];\n","import { NodeKind } from '@console/internal/module/k8s';\n\nexport const createConfigureUnschedulableModal = (props: { resource: NodeKind }) =>\n  import(\n    './ConfigureUnschedulableModal' /* webpackChunkName: \"configure-unschedulable-modal\" */\n  ).then((m) => m.default(props));\n","export const FLAG_DEVWORKSPACE = 'DEVWORKSPACE';\n","import * as _ from 'lodash';\nimport { NodeModel } from '@console/internal/models';\nimport { k8sPatch, K8sResourceKind } from '@console/internal/module/k8s';\n\nexport const makeNodeUnschedulable = (resource: K8sResourceKind): Promise<K8sResourceKind> => {\n  const op = _.has(resource, 'spec.unschedulable') ? 'replace' : 'add';\n  return k8sPatch(NodeModel, resource, [{ op, path: '/spec/unschedulable', value: true }]);\n};\n\nexport const makeNodeSchedulable = (resource: K8sResourceKind): Promise<K8sResourceKind> => {\n  const op = _.has(resource, 'spec.unschedulable') ? 'replace' : 'add';\n  return k8sPatch(NodeModel, resource, [{ op, path: '/spec/unschedulable', value: false }]);\n};\n","import { K8sKind } from '@console/internal/module/k8s';\n\nexport const WorkspaceModel: K8sKind = {\n  kind: 'DevWorkspace',\n  label: 'DevWorkspace',\n  labelPlural: 'devworkspaces',\n  apiGroup: 'workspace.devfile.io',\n  apiVersion: 'v1alpha1',\n  abbr: 'DW',\n  namespaced: true,\n  crd: true,\n  plural: 'devworkspaces',\n  propagationPolicy: 'Background',\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { CogsIcon } from '@patternfly/react-icons';\nimport { FLAGS } from '@console/shared/src/constants';\nimport { FLAG_DEVWORKSPACE } from './consts';\nimport { Plugin, Perspective, ModelFeatureFlag, ModelDefinition, DashboardsOverviewResourceActivity, DashboardsOverviewHealthURLSubsystem, DashboardsOverviewHealthPrometheusSubsystem, DashboardsOverviewInventoryItem, DashboardsOverviewHealthOperator, ReduxReducer } from '@console/plugin-sdk';\nimport { ClusterVersionModel, NodeModel, PodModel, PersistentVolumeClaimModel, ClusterOperatorModel, NamespaceClaimModel, ServiceModel, ResourceQuotaClaimModel } from '@console/internal/models';\nimport { referenceForModel, ClusterOperator } from '@console/internal/module/k8s';\nimport { getNodeStatusGroups, getPodStatusGroups, getPVCStatusGroups } from '@console/shared/src/components/dashboard/inventory-card/utils';\nimport { fetchK8sHealth, getK8sHealthState, getControlPlaneHealth, getClusterOperatorHealthStatus } from './components/dashboards-page/status';\nimport { API_SERVERS_UP, API_SERVER_REQUESTS_SUCCESS, CONTROLLER_MANAGERS_UP, SCHEDULERS_UP } from './queries';\nimport { getClusterUpdateTimestamp, isClusterUpdateActivity } from './components/dashboards-page/activity';\nimport reducer from './redux/reducer';\nimport * as models from './models';\n\ntype ConsumedExtensions = Perspective | ModelDefinition | ModelFeatureFlag | DashboardsOverviewResourceActivity | DashboardsOverviewHealthURLSubsystem<any> | DashboardsOverviewHealthPrometheusSubsystem | DashboardsOverviewInventoryItem | DashboardsOverviewHealthOperator<ClusterOperator> | ReduxReducer;\n\nconst plugin: Plugin<ConsumedExtensions> = [\n  {\n    type: 'ModelDefinition',\n    properties: {\n      models: _.values(models),\n    },\n  },\n  {\n    type: 'FeatureFlag/Model',\n    properties: {\n      model: models.WorkspaceModel,\n      flag: FLAG_DEVWORKSPACE,\n    },\n  },\n  {\n    type: 'Perspective',\n    properties: {\n      id: 'admin',\n      name: 'Administrator',\n      icon: <CogsIcon />,\n      default: true,\n      getLandingPageURL: flags => (flags[FLAGS.CAN_LIST_NS] ? '/dashboards' : '/k8s/cluster/projects'),\n      getK8sLandingPageURL: () => '/search',\n      getImportRedirectURL: project => `/k8s/cluster/projects/${project}/workloads`,\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Activity/Resource',\n    properties: {\n      k8sResource: {\n        isList: true,\n        prop: 'clusterVersion',\n        kind: referenceForModel(ClusterVersionModel),\n        namespaced: false,\n      },\n      isActivity: isClusterUpdateActivity,\n      getTimestamp: getClusterUpdateTimestamp,\n      loader: () => import('./components/dashboards-page/ClusterUpdateActivity' /* webpackChunkName: \"console-app\" */).then(m => m.default),\n    },\n    flags: {\n      required: [FLAGS.CLUSTER_VERSION],\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Health/URL',\n    properties: {\n      title: 'Cluster',\n      url: 'healthz',\n      fetch: fetchK8sHealth,\n      healthHandler: getK8sHealthState,\n      additionalResource: {\n        kind: referenceForModel(ClusterVersionModel),\n        namespaced: false,\n        name: 'version',\n        isList: false,\n        prop: 'cv',\n        optional: true,\n      },\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Health/Prometheus',\n    properties: {\n      title: 'Control Plane',\n      queries: [API_SERVERS_UP, CONTROLLER_MANAGERS_UP, SCHEDULERS_UP, API_SERVER_REQUESTS_SUCCESS],\n      healthHandler: getControlPlaneHealth,\n      popupComponent: () => import('./components/dashboards-page/ControlPlaneStatus' /* webpackChunkName: \"console-app\" */).then(m => m.default),\n      popupTitle: 'Control Plane status',\n      disallowedProviders: ['IBMCloud'],\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Inventory/Item',\n    properties: {\n      model: NodeModel,\n      mapper: getNodeStatusGroups,\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Inventory/Item',\n    properties: {\n      model: PodModel,\n      mapper: getPodStatusGroups,\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Inventory/Item',\n    properties: {\n      model: ServiceModel,\n      useAbbr: true,\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Inventory/Item',\n    properties: {\n      model: PersistentVolumeClaimModel,\n      mapper: getPVCStatusGroups,\n      useAbbr: true,\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Inventory/Item',\n    properties: {\n      model: NamespaceClaimModel,\n      useAbbr: true,\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Inventory/Item',\n    properties: {\n      model: ResourceQuotaClaimModel,\n      useAbbr: true,\n    },\n  },\n  // {\n  //   type: 'Dashboards/Overview/Inventory/Item',\n  //   properties: {\n  //     model: StorageClassModel,\n  //   },\n  // },\n\n  {\n    type: 'Dashboards/Overview/Health/Operator',\n    properties: {\n      title: 'Cluster operators',\n      resources: [\n        {\n          kind: referenceForModel(ClusterOperatorModel),\n          isList: true,\n          namespaced: false,\n          prop: 'clusterOperators',\n        },\n      ],\n      getOperatorsWithStatuses: getClusterOperatorHealthStatus,\n      operatorRowLoader: () => import('./components/dashboards-page/OperatorStatus' /* webpackChunkName: \"console-app\" */).then(c => c.default),\n      viewAllLink: '/settings/cluster/clusteroperators',\n    },\n    flags: {\n      required: [FLAGS.CLUSTER_VERSION],\n    },\n  },\n  {\n    type: 'ReduxReducer',\n    properties: {\n      namespace: 'console',\n      reducer,\n    },\n  },\n];\n\nexport default plugin;\n","import { PodModel } from '@console/internal/models';\n\nexport const API_SERVERS_UP = '(sum(up{job=\"apiserver\"} == 1) / count(up{job=\"apiserver\"})) * 100';\nexport const CONTROLLER_MANAGERS_UP =\n  '(sum(up{job=\"kube-controller-manager\"} == 1) / count(up{job=\"kube-controller-manager\"})) * 100';\nexport const SCHEDULERS_UP = '(sum(up{job=\"scheduler\"} == 1) / count(up{job=\"scheduler\"})) * 100';\nexport const API_SERVER_REQUESTS_SUCCESS =\n  '(1 - (sum(rate(apiserver_request_total{code=~\"5..\"}[5m])) or vector(0))/ sum(rate(apiserver_request_total[5m]))) * 100';\n\nexport const enum Condition {\n  DISK_PRESSURE = 'DiskPressure',\n  PID_PRESSURE = 'PIDPressure',\n  MEM_PRESSURE = 'MemoryPressure',\n}\n\nexport const PressureQueries = {\n  [Condition.DISK_PRESSURE]: (node: string) => [\n    {\n      model: PodModel,\n      fieldSelector: `spec.nodeName=${node}`,\n      metric: 'pod',\n      query: `(sort_desc(topk(25,sum by(pod, namespace) (container_fs_reads_total{node=\"${node}\"}))))`,\n    },\n  ],\n\n  [Condition.MEM_PRESSURE]: (node: string) => [\n    {\n      model: PodModel,\n      fieldSelector: `spec.nodeName=${node}`,\n      metric: 'pod',\n      query: `(sort_desc(topk(25,sum by(pod, namespace) (container_memory_usage_bytes{node=\"${node}\"}))))`,\n    },\n  ],\n\n  [Condition.PID_PRESSURE]: (node: string) => [\n    {\n      model: PodModel,\n      fieldSelector: `spec.nodeName=${node}`,\n      metric: 'pod',\n      query: `(sort_desc(topk(25,sum by(pod, namespace) (container_processes{node=\"${node}\"}))))`,\n    },\n  ],\n};\n","import { action, ActionType } from 'typesafe-actions';\n\nexport enum Actions {\n  ToggleCloudShellExpanded = 'toggleCloudShellExpanded',\n}\n\nexport const toggleCloudShellExpanded = () => action(Actions.ToggleCloudShellExpanded);\n\nconst actions = {\n  toggleCloudShellExpanded,\n};\n\nexport type CloudShellActions = ActionType<typeof actions>;\n","import { combineReducers } from 'redux';\nimport cloudShellReducer, { cloudShellReducerName } from './reducers/cloud-shell-reducer';\n\nexport default combineReducers({\n  [cloudShellReducerName]: cloudShellReducer,\n});\n","import { CloudShellActions, Actions } from '../actions/cloud-shell-actions';\nimport { RootState } from '@console/internal/redux';\n\nexport const cloudShellReducerName = 'cloudShell';\n\ntype State = {\n  isExpanded: boolean;\n};\n\nconst initialState: State = {\n  isExpanded: false,\n};\n\nexport default (state = initialState, action: CloudShellActions) => {\n  if (action.type === Actions.ToggleCloudShellExpanded) {\n    return {\n      isExpanded: !state.isExpanded,\n    };\n  }\n\n  return state;\n};\n\nexport const isCloudShellExpanded = (state: RootState): boolean =>\n  !!state.plugins?.console?.[cloudShellReducerName]?.isExpanded;\n","import { NodeKind } from '@console/internal/module/k8s';\nimport { isNodeReady } from '@console/shared/src/selectors/node';\n\nexport const nodeStatus = (node: NodeKind) => (isNodeReady(node) ? 'Ready' : 'Not Ready');\n","export * from './typings';\nexport * from './registry';\nexport * from './store';\n\n// React integrations\nexport * from './useExtensions';\nexport * from './withExtensions';\n","import * as _ from 'lodash';\n\nimport {\n  ActivePlugin,\n  Extension,\n  ExtensionTypeGuard,\n  isClusterServiceVersionAction,\n  isDevCatalogModel,\n  isGlobalConfig,\n  isKebabActions,\n  isModelDefinition,\n  isModelFeatureFlag,\n  isOverviewCRD,\n  isOverviewResourceTab,\n  isOverviewTabSection,\n  isPerspective,\n  isReduxReducer,\n  isResourceDetailsPage,\n  isResourceListPage,\n  isRoutePage,\n  isYAMLTemplate,\n  isCustomFeatureFlag,\n} from './typings';\n\nimport { FlagsObject } from '@console/internal/reducers/features';\n\n// TODO(vojtech): legacy, remove\n\n/**\n * Registry used to query for Console extensions.\n */\nexport class ExtensionRegistry {\n  private readonly extensions: Extension[];\n\n  public constructor(plugins: ActivePlugin[]) {\n    this.extensions = _.flatMap(plugins.map((p) => p.extensions));\n  }\n\n  public getGatingFlagNames(typeGuards: ExtensionTypeGuard<ExtensionWithFlags>[]) {\n    return _.flatMap(typeGuards.map((tg) => this.extensions.filter(tg))).reduce(\n      (gatingFlags, e) =>\n        _.uniq([\n          ...gatingFlags,\n          ..._.castArray(e.properties.required || []),\n          ..._.castArray(e.properties.disallowed || []),\n        ]),\n      [] as string[],\n    );\n  }\n\n  public isExtensionInUse(e: ExtensionWithFlags, flags: FlagsObject) {\n    const requiredFlags = _.castArray(e.properties.required || []);\n    const disallowedFlags = _.castArray(e.properties.disallowed || []);\n    return (\n      _.every(requiredFlags, (f) => flags[f] === true) &&\n      _.every(disallowedFlags, (f) => flags[f] === false)\n    );\n  }\n\n  public getModelDefinitions() {\n    return this.extensions.filter(isModelDefinition);\n  }\n\n  public getModelFeatureFlags() {\n    return this.extensions.filter(isModelFeatureFlag);\n  }\n\n  public getCustomFeatureFlags() {\n    return this.extensions.filter(isCustomFeatureFlag);\n  }\n\n  public getResourceListPages() {\n    return this.extensions.filter(isResourceListPage);\n  }\n\n  public getResourceDetailsPages() {\n    return this.extensions.filter(isResourceDetailsPage);\n  }\n\n  public getRoutePages() {\n    return this.extensions.filter(isRoutePage);\n  }\n\n  public getPerspectives() {\n    return this.extensions.filter(isPerspective);\n  }\n\n  public getYAMLTemplates() {\n    return this.extensions.filter(isYAMLTemplate);\n  }\n\n  public getOverviewResourceTabs() {\n    return this.extensions.filter(isOverviewResourceTab);\n  }\n\n  public getOverviewTabSections() {\n    return this.extensions.filter(isOverviewTabSection);\n  }\n\n  public getOverviewCRDs() {\n    return this.extensions.filter(isOverviewCRD);\n  }\n\n  public getGlobalConfigs() {\n    return this.extensions.filter(isGlobalConfig);\n  }\n\n  public getClusterServiceVersionActions() {\n    return this.extensions.filter(isClusterServiceVersionAction);\n  }\n\n  public getKebabActions() {\n    return this.extensions.filter(isKebabActions);\n  }\n\n  public getDevCatalogModels() {\n    return this.extensions.filter(isDevCatalogModel);\n  }\n\n  public getReduxReducers() {\n    return this.extensions.filter(isReduxReducer);\n  }\n}\n\ntype ExtensionWithFlags = Extension<{\n  required?: string | string[];\n  disallowed?: string | string[];\n}>;\n","import * as _ from 'lodash';\nimport { Extension, ExtensionWithMetadata, ActivePlugin } from './typings';\nimport { ExtensionRegistry } from './registry';\n\nexport const sanitizeExtension = (e: Extension): Extension => {\n  e.flags = e.flags || {};\n  e.flags.required = _.uniq(e.flags.required || []);\n  e.flags.disallowed = _.uniq(e.flags.disallowed || []);\n  return e;\n};\n\nexport const augmentExtension = (e: Extension, p: ActivePlugin): ExtensionWithMetadata => {\n  return Object.assign(e, { plugin: p.name });\n};\n\nexport const isExtensionInUse = (e: Extension, flags: FlagsObject): boolean =>\n  e.flags.required.every((f) => flags[f] === true) &&\n  e.flags.disallowed.every((f) => flags[f] === false);\n\nexport const getGatingFlagNames = (extensions: Extension[]): string[] =>\n  _.uniq([\n    ..._.flatMap(extensions.map((e) => e.flags.required)),\n    ..._.flatMap(extensions.map((e) => e.flags.disallowed)),\n  ]);\n\n/**\n * Provides access to Console plugin data.\n *\n * In development, this object is exposed as `window.pluginStore` for easier debugging.\n *\n * _For now, the runtime list of extensions is assumed to be immutable._\n */\nexport class PluginStore {\n  private readonly extensions: ExtensionWithMetadata[];\n\n  public readonly registry: ExtensionRegistry; // TODO(vojtech): legacy, remove\n\n  public constructor(plugins: ActivePlugin[]) {\n    this.extensions = _.flatMap(\n      plugins.map((p) =>\n        p.extensions.map((e) => Object.freeze(augmentExtension(sanitizeExtension({ ...e }), p))),\n      ),\n    );\n    this.registry = new ExtensionRegistry(plugins);\n  }\n\n  public getAllExtensions(): readonly Extension[] {\n    return this.extensions;\n  }\n}\n\ntype FlagsObject = { [key: string]: boolean };\n","import { K8sResourceKindReference } from '@console/internal/module/k8s';\nimport { Extension } from './base';\n\nnamespace ExtensionProperties {\n  export interface ClusterServiceVersionAction {\n    /** the kind this action is for */\n    kind: K8sResourceKindReference;\n    /** label of action */\n    label: string;\n    /** API group of the resource */\n    apiGroup: string;\n    /** action callback */\n    callback: (kind: K8sResourceKindReference, obj: any) => () => any;\n    required?: string[];\n    disallowed?: string[];\n  }\n}\n\nexport interface ClusterServiceVersionAction\n  extends Extension<ExtensionProperties.ClusterServiceVersionAction> {\n  type: 'ClusterServiceVersion/Action';\n}\n\nexport const isClusterServiceVersionAction = (e: Extension): e is ClusterServiceVersionAction =>\n  e.type === 'ClusterServiceVersion/Action';\n","import { HealthState } from '@console/shared/src/components/dashboard/status-card/states';\nimport { GridPosition } from '@console/shared/src/components/dashboard/DashboardGrid';\nimport {\n  FirehoseResource,\n  FirehoseResult,\n  FirehoseResourcesResult,\n} from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceKind, K8sResourceCommon } from '@console/internal/module/k8s';\nimport {\n  StatusGroupMapper,\n  ExpandedComponentProps,\n} from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport {\n  WatchK8sResources,\n  ResourcesObject,\n  WatchK8sResults,\n} from '@console/internal/components/utils/k8s-watch-hook';\nimport { Extension, LazyLoader } from './base';\n\nnamespace ExtensionProperties {\n  interface DashboardsOverviewHealthSubsystem {\n    /** The subsystem's display name */\n    title: string;\n  }\n\n  export interface DashboardsOverviewHealthURLSubsystem<R>\n    extends DashboardsOverviewHealthSubsystem {\n    /**\n     * The URL to fetch data from. It will be prefixed with base k8s URL.\n     * For example: `healthz` will result in `<k8sBasePath>/healthz`\n     */\n    url: string;\n\n    /**\n     * Custom function to fetch data from the URL.\n     * If none is specified, default one (`coFetchJson`) will be used.\n     * Response is then parsed by `healthHandler`.\n     */\n    fetch?: (url: string) => Promise<R>;\n\n    /** Additional resource which will be fetched and passed to healthHandler  */\n    additionalResource?: FirehoseResource;\n\n    /** Resolve the subsystem's health */\n    healthHandler: URLHealthHandler<R>;\n\n    /**\n     * Loader for popup content. If defined health item will be represented as link\n     * which opens popup with given content.\n     */\n    popupComponent?: LazyLoader<any>;\n\n    /**\n     * Popup title\n     */\n    popupTitle?: string;\n  }\n\n  export interface DashboardsOverviewHealthPrometheusSubsystem\n    extends DashboardsOverviewHealthSubsystem {\n    /** The Prometheus queries */\n    queries: string[];\n\n    /** Additional resource which will be fetched and passed to healthHandler  */\n    additionalResource?: FirehoseResource;\n\n    /** Resolve the subsystem's health */\n    healthHandler: PrometheusHealthHandler;\n\n    /**\n     * Loader for popup content. If defined health item will be represented as link\n     * which opens popup with given content.\n     */\n    popupComponent?: LazyLoader<PrometheusHealthPopupProps>;\n\n    /**\n     * Popup title\n     */\n    popupTitle?: string;\n\n    /**\n     * Cloud providers which for which the subsystem should be hidden.\n     */\n    disallowedProviders?: string[];\n  }\n\n  export interface DashboardsOverviewHealthResourceSubsystem<R extends ResourcesObject>\n    extends DashboardsOverviewHealthSubsystem {\n    /** Kubernetes resources which will be fetched and passed to healthHandler  */\n    resources: WatchK8sResources<R>;\n\n    /** Resolve the subsystem's health */\n    healthHandler: ResourceHealthHandler<R>;\n\n    /**\n     * Loader for popup content. If defined health item will be represented as link\n     * which opens popup with given content.\n     */\n    popupComponent?: LazyLoader<WatchK8sResults<R>>;\n\n    /**\n     * Popup title\n     */\n    popupTitle?: string;\n  }\n\n  export interface DashboardsOverviewHealthOperator<R extends K8sResourceCommon>\n    extends DashboardsOverviewHealthSubsystem {\n    /** Title of operators section in popup */\n    title: string;\n\n    /** Resources which will be fetched and passed to healthHandler */\n    resources: FirehoseResource[];\n\n    /** Resolve status for operators */\n    getOperatorsWithStatuses: GetOperatorsWithStatuses<R>;\n\n    /** Loader for popup row component */\n    operatorRowLoader: LazyLoader<OperatorRowProps<R>>;\n\n    /**\n     * Link to all resources page.\n     * If not provided then a list page of first resource from resources prop is used.\n     */\n    viewAllLink?: string;\n  }\n\n  export interface DashboardsTab {\n    /** The tab's ID which will be used as part of href within dashboards page */\n    id: string;\n\n    /** The tab title */\n    title: string;\n  }\n\n  export interface DashboardsCard {\n    /** The tab's ID where this card should be rendered */\n    tab: string;\n\n    /** The card position in the tab */\n    position: GridPosition;\n\n    /** Loader for the corresponding dashboard card component. */\n    loader: LazyLoader;\n\n    /** Card's vertical span in the column. Ignored for small screens, defaults to 12. */\n    span?: DashboardCardSpan;\n  }\n\n  export interface DashboardsOverviewInventoryItem {\n    /** The model for `resource` which will be fetched. The model is used for getting model's label or abbr. */\n    model: K8sKind;\n\n    /** Function which will map various statuses to groups. */\n    mapper?: StatusGroupMapper;\n\n    /** Additional resources which will be fetched and passed to `mapper` function. */\n    additionalResources?: WatchK8sResources<any>;\n\n    /** Defines whether model's label or abbr should be used when rendering the item. Defaults to false (label). */\n    useAbbr?: boolean;\n\n    /** Loader for the component which will be used when item is expanded. */\n    expandedComponent?: LazyLoader<ExpandedComponentProps>;\n  }\n\n  export interface DashboardsInventoryItemGroup {\n    /** The ID of status group. */\n    id: string;\n\n    /** React component representing status group icon. */\n    icon: React.ReactElement;\n  }\n\n  export interface DashboardsOverviewUtilizationItem {\n    /** The utilization item to be replaced */\n    id: string;\n\n    /** The Prometheus utilization query */\n    query: string;\n\n    /** The Prometheus total query */\n    totalQuery: string;\n  }\n\n  export interface DashboardsOverviewResourceActivity {\n    /** Resource to watch */\n    k8sResource: FirehoseResource & { isList: true };\n\n    /**\n     * Function which will determine if given resource represents the action.\n     * If the function is not defined, every resource represents activity.\n     */\n    isActivity?: (resource: K8sResourceKind) => boolean;\n\n    /** Timestamp for given action, which will be used for ordering */\n    getTimestamp?: (resource: K8sResourceKind) => Date;\n\n    /** Loader for corresponding action component */\n    loader: LazyLoader<K8sActivityProps>;\n  }\n\n  export interface DashboardsOverviewPrometheusActivity {\n    /** Queries to watch */\n    queries: string[];\n\n    /** Function which will determine if given query results represent the action */\n    isActivity: (results: PrometheusResponse[]) => boolean;\n\n    /** Loader for corresponding action component */\n    loader: LazyLoader<PrometheusActivityProps>;\n  }\n\n  export interface ProjectDashboardInventoryItem {\n    /** The K8s model which will be scoped to project, fetched and passed to `mapper` function. */\n    model: K8sKind;\n\n    /** Additional resources which will be fetched and passed to `mapper` function. */\n    additionalResources?: FirehoseResource[];\n\n    /** Defines whether model's label or abbr should be used when rendering the item. Defaults to false (label). */\n    useAbbr?: boolean;\n\n    /** Function which will map various statuses to groups. */\n    mapper: StatusGroupMapper;\n  }\n}\n\nexport interface DashboardsOverviewHealthURLSubsystem<R = any>\n  extends Extension<ExtensionProperties.DashboardsOverviewHealthURLSubsystem<R>> {\n  type: 'Dashboards/Overview/Health/URL';\n}\n\nexport const isDashboardsOverviewHealthURLSubsystem = (\n  e: Extension,\n): e is DashboardsOverviewHealthURLSubsystem => e.type === 'Dashboards/Overview/Health/URL';\n\nexport interface DashboardsOverviewHealthPrometheusSubsystem\n  extends Extension<ExtensionProperties.DashboardsOverviewHealthPrometheusSubsystem> {\n  type: 'Dashboards/Overview/Health/Prometheus';\n}\n\nexport const isDashboardsOverviewHealthPrometheusSubsystem = (\n  e: Extension,\n): e is DashboardsOverviewHealthPrometheusSubsystem =>\n  e.type === 'Dashboards/Overview/Health/Prometheus';\n\nexport interface DashboardsOverviewHealthResourceSubsystem<\n  R extends ResourcesObject = ResourcesObject\n> extends Extension<ExtensionProperties.DashboardsOverviewHealthResourceSubsystem<R>> {\n  type: 'Dashboards/Overview/Health/Resource';\n}\n\nexport const isDashboardsOverviewHealthResourceSubsystem = (\n  e: Extension,\n): e is DashboardsOverviewHealthResourceSubsystem =>\n  e.type === 'Dashboards/Overview/Health/Resource';\n\nexport interface DashboardsOverviewHealthOperator<R extends K8sResourceCommon = K8sResourceCommon>\n  extends Extension<ExtensionProperties.DashboardsOverviewHealthOperator<R>> {\n  type: 'Dashboards/Overview/Health/Operator';\n}\n\nexport const isDashboardsOverviewHealthOperator = (\n  e: Extension,\n): e is DashboardsOverviewHealthOperator => e.type === 'Dashboards/Overview/Health/Operator';\n\nexport type DashboardsOverviewHealthSubsystem =\n  | DashboardsOverviewHealthURLSubsystem\n  | DashboardsOverviewHealthPrometheusSubsystem\n  | DashboardsOverviewHealthResourceSubsystem\n  | DashboardsOverviewHealthOperator;\n\nexport const isDashboardsOverviewHealthSubsystem = (\n  e: Extension,\n): e is DashboardsOverviewHealthSubsystem =>\n  isDashboardsOverviewHealthURLSubsystem(e) ||\n  isDashboardsOverviewHealthPrometheusSubsystem(e) ||\n  isDashboardsOverviewHealthResourceSubsystem(e) ||\n  isDashboardsOverviewHealthOperator(e);\n\nexport interface DashboardsTab extends Extension<ExtensionProperties.DashboardsTab> {\n  type: 'Dashboards/Tab';\n}\n\nexport const isDashboardsTab = (e: Extension): e is DashboardsTab => e.type === 'Dashboards/Tab';\n\nexport interface DashboardsCard extends Extension<ExtensionProperties.DashboardsCard> {\n  type: 'Dashboards/Card';\n}\n\nexport const isDashboardsCard = (e: Extension): e is DashboardsCard => e.type === 'Dashboards/Card';\n\nexport interface DashboardsOverviewUtilizationItem\n  extends Extension<ExtensionProperties.DashboardsOverviewUtilizationItem> {\n  type: 'Dashboards/Overview/Utilization/Item';\n}\n\nexport const isDashboardsOverviewUtilizationItem = (\n  e: Extension,\n): e is DashboardsOverviewUtilizationItem => e.type === 'Dashboards/Overview/Utilization/Item';\n\nexport interface DashboardsOverviewInventoryItem\n  extends Extension<ExtensionProperties.DashboardsOverviewInventoryItem> {\n  type: 'Dashboards/Overview/Inventory/Item';\n}\n\nexport const isDashboardsOverviewInventoryItem = (\n  e: Extension,\n): e is DashboardsOverviewInventoryItem => e.type === 'Dashboards/Overview/Inventory/Item';\n\nexport interface DashboardsInventoryItemGroup\n  extends Extension<ExtensionProperties.DashboardsInventoryItemGroup> {\n  type: 'Dashboards/Inventory/Item/Group';\n}\n\nexport const isDashboardsInventoryItemGroup = (e: Extension): e is DashboardsInventoryItemGroup =>\n  e.type === 'Dashboards/Inventory/Item/Group';\n\nexport interface DashboardsOverviewResourceActivity\n  extends Extension<ExtensionProperties.DashboardsOverviewResourceActivity> {\n  type: 'Dashboards/Overview/Activity/Resource';\n}\n\nexport const isDashboardsOverviewResourceActivity = (\n  e: Extension,\n): e is DashboardsOverviewResourceActivity => e.type === 'Dashboards/Overview/Activity/Resource';\n\nexport interface DashboardsOverviewPrometheusActivity\n  extends Extension<ExtensionProperties.DashboardsOverviewPrometheusActivity> {\n  type: 'Dashboards/Overview/Activity/Prometheus';\n}\n\nexport const isDashboardsOverviewPrometheusActivity = (\n  e: Extension,\n): e is DashboardsOverviewPrometheusActivity =>\n  e.type === 'Dashboards/Overview/Activity/Prometheus';\n\nexport interface ProjectDashboardInventoryItem\n  extends Extension<ExtensionProperties.ProjectDashboardInventoryItem> {\n  type: 'Project/Dashboard/Inventory/Item';\n}\n\nexport const isProjectDashboardInventoryItem = (e: Extension): e is ProjectDashboardInventoryItem =>\n  e.type === 'Project/Dashboard/Inventory/Item';\n\nexport interface DashboardsOverviewInventoryItemReplacement\n  extends Extension<ExtensionProperties.DashboardsOverviewInventoryItem> {\n  type: 'Dashboards/Overview/Inventory/Item/Replacement';\n}\n\nexport const isDashboardsOverviewInventoryItemReplacement = (\n  e: Extension,\n): e is DashboardsOverviewInventoryItemReplacement =>\n  e.type === 'Dashboards/Overview/Inventory/Item/Replacement';\n\nexport type DashboardCardSpan = 4 | 6 | 12;\n\nexport type K8sActivityProps = {\n  resource: K8sResourceKind;\n};\n\nexport type PrometheusActivityProps = {\n  results: PrometheusResponse[];\n};\n\nexport type SubsystemHealth = {\n  message?: string;\n  state: HealthState;\n};\n\nexport type URLHealthHandler<R> = (\n  response: R,\n  error: any,\n  additionalResource?: FirehoseResult<K8sResourceKind | K8sResourceKind[]>,\n) => SubsystemHealth;\n\nexport type PrometheusHealthPopupProps = {\n  responses: { response: PrometheusResponse; error: any }[];\n  additionalResource?: FirehoseResult<K8sResourceKind | K8sResourceKind[]>;\n};\n\nexport type PrometheusHealthHandler = (\n  responses: { response: PrometheusResponse; error: any }[],\n  additionalResource?: FirehoseResult<K8sResourceKind | K8sResourceKind[]>,\n) => SubsystemHealth;\n\nexport type ResourceHealthHandler<R extends ResourcesObject> = (\n  resourcesResult: WatchK8sResults<R>,\n) => SubsystemHealth;\n\nexport type OperatorHealthHandler = (resources: FirehoseResourcesResult) => OperatorHealth;\n\nexport type OperatorHealth = {\n  health: HealthState;\n  count?: number;\n};\n\nexport type GetOperatorsWithStatuses<R extends K8sResourceCommon = K8sResourceCommon> = (\n  resources: FirehoseResourcesResult,\n) => OperatorStatusWithResources<R>[];\n\nexport type OperatorStatusWithResources<R extends K8sResourceCommon = K8sResourceCommon> = {\n  operators: R[];\n  status: OperatorStatusPriority;\n};\n\nexport type GetOperatorStatusPriority<R extends K8sResourceCommon = K8sResourceCommon> = (\n  operator: R,\n) => OperatorStatusPriority;\n\nexport type OperatorStatusPriority = {\n  title: string;\n  priority: number;\n  icon: React.ReactNode;\n  health: HealthState;\n};\n\nexport type OperatorRowProps<R extends K8sResourceCommon = K8sResourceCommon> = {\n  operatorStatus: OperatorStatusWithResources<R>;\n};\n","import { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { Extension } from './base';\n\nnamespace ExtensionProperties {\n  export interface DevCatalogModel {\n    model: K8sKind;\n    flag?: string;\n    normalize: (data: K8sResourceKind[]) => K8sResourceKind[];\n  }\n}\n\nexport interface DevCatalogModel extends Extension<ExtensionProperties.DevCatalogModel> {\n  type: 'DevCatalogModel';\n}\n\nexport const isDevCatalogModel = (e: Extension): e is DevCatalogModel => {\n  return e.type === 'DevCatalogModel';\n};\n","import { Dispatch } from 'react-redux';\nimport { K8sKind } from '@console/internal/module/k8s';\nimport { Extension, AlwaysOnExtension } from './base';\nimport { Action } from 'typesafe-actions';\n\nnamespace ExtensionProperties {\n  export interface ModelFeatureFlag {\n    /** The name of the feature flag. */\n    flag: string;\n    /** If a CRD for this model exists, the feature will be enabled. */\n    model: K8sKind;\n  }\n\n  export interface CustomFeatureFlag {\n    /** Function used to detect the feature and set arbitrary flag name/value via Redux action dispatch. */\n    detect: FeatureDetector;\n  }\n}\n\nexport interface ModelFeatureFlag extends AlwaysOnExtension<ExtensionProperties.ModelFeatureFlag> {\n  type: 'FeatureFlag/Model';\n}\n\nexport interface CustomFeatureFlag extends Extension<ExtensionProperties.CustomFeatureFlag> {\n  type: 'FeatureFlag/Custom';\n}\n\nexport const isModelFeatureFlag = (e: Extension): e is ModelFeatureFlag => {\n  return e.type === 'FeatureFlag/Model';\n};\n\nexport const isCustomFeatureFlag = (e: Extension): e is CustomFeatureFlag => {\n  return e.type === 'FeatureFlag/Custom';\n};\n\nexport type FeatureDetector = (dispatch: Dispatch) => Promise<void | Action>;\n","import { K8sKind } from '@console/internal/module/k8s';\nimport { Extension } from './base';\n\nnamespace ExtensionProperties {\n  export interface GlobalConfig {\n    /** Kind of this item. */\n    kind: string;\n    /** Model for this item. */\n    model: K8sKind;\n    /** Name of this item. */\n    name: string;\n    /** Namespace of this item. */\n    namespace: string;\n    /** Name of feature flag for this item. */\n    required: string;\n    /** Unique identifier for this item. */\n    uid: string;\n  }\n}\n\nexport interface GlobalConfig extends Extension<ExtensionProperties.GlobalConfig> {\n  type: 'GlobalConfig';\n}\n\nexport function isGlobalConfig(e: Extension): e is GlobalConfig {\n  return e.type === 'GlobalConfig';\n}\n","import { K8sKind } from '@console/internal/module/k8s';\nimport { PageComponentProps, Page } from '@console/internal/components/utils/horizontal-nav';\nimport { Extension, LazyLoader } from './base';\n\nnamespace ExtensionProperties {\n  export interface HorizontalNavTab {\n    model: K8sKind;\n    page: Pick<Page, 'name' | 'href' | 'path'>;\n    loader: LazyLoader<PageComponentProps>;\n  }\n}\n\nexport interface HorizontalNavTab extends Extension<ExtensionProperties.HorizontalNavTab> {\n  type: 'HorizontalNavTab';\n}\n\nexport const isHorizontalNavTab = (e: Extension): e is HorizontalNavTab => {\n  return e.type === 'HorizontalNavTab';\n};\n","export * from './base';\n\n// specific extension types\nexport * from './dashboards';\nexport * from './features';\nexport * from './kebab-actions';\nexport * from './models';\nexport * from './nav-items';\nexport * from './overview';\nexport * from './pages';\nexport * from './perspectives';\nexport * from './yaml-templates';\nexport * from './global-configs';\nexport * from './clusterserviceversions';\nexport * from './dev-catalog';\nexport * from './reducers';\nexport * from './horizontal-nav';\n","import { K8sKind } from '@console/internal/module/k8s';\nimport { KebabAction } from '@console/internal/components/utils/kebab';\nimport { Extension } from './base';\n\nnamespace ExtensionProperties {\n  export interface KebabActions {\n    // no kind should return any actions common for all kinds\n    getKebabActionsForKind: (kind: K8sKind) => KebabAction[];\n  }\n}\n\nexport interface KebabActions extends Extension<ExtensionProperties.KebabActions> {\n  type: 'KebabActions';\n}\n\nexport function isKebabActions(e: Extension): e is KebabActions {\n  return e.type === 'KebabActions';\n}\n","import { K8sKind } from '@console/internal/module/k8s';\nimport { Extension, AlwaysOnExtension } from './base';\n\nnamespace ExtensionProperties {\n  export interface ModelDefinition {\n    /** Additional Kubernetes model definitions to register with Console. */\n    models: K8sKind[];\n  }\n}\n\nexport interface ModelDefinition extends AlwaysOnExtension<ExtensionProperties.ModelDefinition> {\n  type: 'ModelDefinition';\n}\n\nexport const isModelDefinition = (e: Extension): e is ModelDefinition => {\n  return e.type === 'ModelDefinition';\n};\n","import {\n  NavLinkProps,\n  HrefLinkProps,\n  ResourceNSLinkProps,\n  ResourceClusterLinkProps,\n} from '@console/internal/components/nav/items';\nimport { Extension } from './base';\n\nnamespace ExtensionProperties {\n  interface NavItem {\n    /** Perspective id to which this item belongs to. If not specified, use the default perspective. */\n    perspective?: string;\n    /** Nav section to which this item belongs to. If not specified, render item as top-level link. */\n    section?: string;\n    /** Props to pass to the corresponding `NavLink` component. */\n    componentProps: Pick<NavLinkProps, 'name' | 'startsWith' | 'testID'>;\n    /** Nav item before which this item should be placed. */\n    mergeBefore?: string;\n  }\n\n  export interface SeparatorNavItem extends Omit<NavItem, 'componentProps'> {\n    componentProps: {\n      testID?: string;\n    };\n  }\n\n  export interface HrefNavItem extends NavItem {\n    componentProps: NavItem['componentProps'] & Pick<HrefLinkProps, 'href' | 'activePath'>;\n  }\n\n  export interface ResourceNSNavItem extends NavItem {\n    componentProps: NavItem['componentProps'] & Pick<ResourceNSLinkProps, 'resource' | 'model'>;\n  }\n\n  export interface ResourceClusterNavItem extends NavItem {\n    componentProps: NavItem['componentProps'] &\n      Pick<ResourceClusterLinkProps, 'resource' | 'model'>;\n  }\n}\n\nexport interface SeparatorNavItem extends Extension<ExtensionProperties.SeparatorNavItem> {\n  type: 'NavItem/Separator';\n}\n\nexport interface HrefNavItem extends Extension<ExtensionProperties.HrefNavItem> {\n  type: 'NavItem/Href';\n}\n\nexport interface ResourceNSNavItem extends Extension<ExtensionProperties.ResourceNSNavItem> {\n  type: 'NavItem/ResourceNS';\n}\n\nexport interface ResourceClusterNavItem\n  extends Extension<ExtensionProperties.ResourceClusterNavItem> {\n  type: 'NavItem/ResourceCluster';\n}\n\nexport type NavItem = HrefNavItem | ResourceNSNavItem | ResourceClusterNavItem;\n\nexport const isHrefNavItem = (e: Extension): e is HrefNavItem => {\n  return e.type === 'NavItem/Href';\n};\n\nexport const isResourceNSNavItem = (e: Extension): e is ResourceNSNavItem => {\n  return e.type === 'NavItem/ResourceNS';\n};\n\nexport const isResourceClusterNavItem = (e: Extension): e is ResourceClusterNavItem => {\n  return e.type === 'NavItem/ResourceCluster';\n};\n\nexport const isSeparatorNavItem = (e: Extension): e is SeparatorNavItem => {\n  return e.type === 'NavItem/Separator';\n};\n\nexport const isNavItem = (e: Extension): e is NavItem => {\n  return (\n    isHrefNavItem(e) ||\n    isResourceNSNavItem(e) ||\n    isResourceClusterNavItem(e) ||\n    isSeparatorNavItem(e)\n  );\n};\n","import { K8sResourceKind } from '@console/internal/module/k8s';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport { OverviewDetailsResourcesTabProps } from '@console/internal/components/overview/resource-overview-page';\nimport { OverviewMainContentProps } from '@console/internal/components/overview';\nimport { Extension, LazyLoader } from './base';\n\ntype ResourceItem = {\n  [key: string]: K8sResourceKind[];\n};\n\nnamespace ExtensionProperties {\n  export interface OverviewCRD {\n    /** Resources list to be fetched from Firehose. */\n    resources: (namespace: string) => FirehoseResource[];\n\n    /** The name of the feature flag. */\n    required: string;\n\n    /** util to check get resources. */\n    utils: (dc: K8sResourceKind, props: OverviewMainContentProps) => ResourceItem | undefined;\n  }\n\n  export interface OverviewResourceTab {\n    /** The name of Overview tab to be updated. */\n    name: string;\n\n    /** Name of key to be checked in prop items. */\n    key: string;\n\n    /** Loader for the corresponding tab component. */\n    loader: LazyLoader<OverviewDetailsResourcesTabProps>;\n  }\n\n  export interface OverviewTabSection {\n    /** Name of key to be checked in prop items. */\n    key: string;\n\n    /** Loader for the corresponding tab component. */\n    loader: LazyLoader<OverviewDetailsResourcesTabProps>;\n  }\n}\n\nexport interface OverviewCRD extends Extension<ExtensionProperties.OverviewCRD> {\n  type: 'Overview/CRD';\n}\n\nexport const isOverviewCRD = (e: Extension): e is OverviewCRD => {\n  return e.type === 'Overview/CRD';\n};\n\nexport interface OverviewResourceTab extends Extension<ExtensionProperties.OverviewResourceTab> {\n  type: 'Overview/Resource';\n}\n\nexport const isOverviewResourceTab = (e: Extension): e is OverviewResourceTab => {\n  return e.type === 'Overview/Resource';\n};\n\nexport interface OverviewTabSection extends Extension<ExtensionProperties.OverviewTabSection> {\n  type: 'Overview/Section';\n}\n\nexport const isOverviewTabSection = (e: Extension): e is OverviewTabSection => {\n  return e.type === 'Overview/Section';\n};\n","import { RouteComponentProps, RouteProps } from 'react-router-dom';\nimport {\n  K8sKind,\n  K8sResourceKindReference,\n  K8sResourceKind,\n  K8sResourceCommon,\n} from '@console/internal/module/k8s';\nimport { Extension, LazyLoader } from './base';\nimport { PageComponentProps } from '@console/internal/components/utils';\n\nnamespace ExtensionProperties {\n  export interface ResourcePage<T> {\n    /** Model associated with the resource page. */\n    model: K8sKind;\n    /** Loader for the corresponding React page component. */\n    loader: LazyLoader<T>;\n  }\n\n  /** To add an additonal page to public components(ex: PVs, PVCs) via plugins */\n  export type ResourceTabPage<R extends K8sResourceCommon> = ResourcePage<PageComponentProps<R>> & {\n    /** The href for the resource page */\n    href: string;\n    /** Name of the resource tab inside detailsPage  */\n    name: string;\n  };\n\n  export type ResourceListPage = ResourcePage<{\n    /** See https://reacttraining.com/react-router/web/api/match */\n    match: RouteComponentProps['match'];\n    /** The resource kind scope. */\n    kind: K8sResourceKindReference;\n    /** Whether the page should assign focus when loaded. */\n    autoFocus: boolean;\n    /** Whether the page should mock the UI empty state. */\n    mock: boolean;\n    /** The namespace scope. */\n    namespace: string;\n  }> & {\n    /** Some Resources require ReferenceFor instead of ReferenceForModel */\n    modelParser?: (obj: K8sResourceKind) => string;\n  };\n\n  export type ResourceDetailsPage = ResourcePage<{\n    /** See https://reacttraining.com/react-router/web/api/match */\n    match: RouteComponentProps['match'];\n    /** The resource kind scope. */\n    kind: K8sResourceKindReference;\n    /** The namespace scope. */\n    namespace: string;\n    /** The page name. */\n    name: string;\n  }> & {\n    /** Some Resources require ReferenceFor instead of ReferenceForModel */\n    modelParser?: (obj: K8sResourceKind) => string;\n  };\n\n  // Maps to react-router#https://reacttraining.com/react-router/web/api/Route\n  // See https://reacttraining.com/react-router/web/api/Route\n  export type RoutePage = Omit<RouteProps, 'location'> & {\n    /** Loader for the corresponding React page component. */\n    loader?: LazyLoader<RouteComponentProps>;\n    /** Any valid URL path or array of paths that path-to-regexp@^1.7.0 understands. */\n    path: string | string[];\n    /** Perspective id to which this page belongs to. */\n    perspective?: string;\n    /** Feature flags required for this extension to be effective. */\n    required?: string | string[];\n  };\n}\n\nexport interface ResourceListPage extends Extension<ExtensionProperties.ResourceListPage> {\n  type: 'Page/Resource/List';\n}\n\nexport interface ResourceDetailsPage extends Extension<ExtensionProperties.ResourceDetailsPage> {\n  type: 'Page/Resource/Details';\n}\n\nexport interface RoutePage extends Extension<ExtensionProperties.RoutePage> {\n  type: 'Page/Route';\n}\n\nexport interface ResourceTabPage<R extends K8sResourceCommon = K8sResourceCommon>\n  extends Extension<ExtensionProperties.ResourceTabPage<R>> {\n  type: 'Page/Resource/Tab';\n}\n\nexport type ResourcePage = ResourceListPage | ResourceDetailsPage;\n\nexport const isResourceListPage = (e: Extension): e is ResourceListPage => {\n  return e.type === 'Page/Resource/List';\n};\n\nexport const isResourceDetailsPage = (e: Extension): e is ResourceDetailsPage => {\n  return e.type === 'Page/Resource/Details';\n};\n\nexport const isResourceTabPage = (e: Extension): e is ResourceTabPage => {\n  return e.type === 'Page/Resource/Tab';\n};\n\nexport const isRoutePage = (e: Extension): e is RoutePage => {\n  return e.type === 'Page/Route';\n};\n","import * as React from 'react';\nimport { FlagsObject } from '@console/internal/reducers/features';\nimport { Extension } from './base';\n\nnamespace ExtensionProperties {\n  export interface Perspective {\n    /** The perspective identifier. */\n    id: string;\n    /** The perspective display name. */\n    name: string;\n    /** The perspective display icon. */\n    icon: React.ReactElement;\n    /** Whether the perspective is the default. There can only be one default. */\n    default?: boolean;\n    /** Default pinned resources on the nav */\n    defaultPins?: string[];\n    /** The function to get perspective landing page URL. */\n    getLandingPageURL: GetLandingPage;\n    /** The function to get perspective landing page URL for k8s. */\n    getK8sLandingPageURL: GetLandingPage;\n    /** The function to get redirect URL for import flow. */\n    getImportRedirectURL: (project: string) => string;\n  }\n}\n\nexport interface Perspective extends Extension<ExtensionProperties.Perspective> {\n  type: 'Perspective';\n}\n\nexport const isPerspective = (e: Extension): e is Perspective => {\n  return e.type === 'Perspective';\n};\n\nexport type GetLandingPage = (flags?: FlagsObject) => string;\n","import { Reducer } from 'redux';\nimport { Extension } from './base';\n\nnamespace ExtensionProperties {\n  export interface ReduxReducer {\n    /** The key to represent reducer-managed substate within the Redux state object. */\n    namespace: string;\n    /** The reducer function, operating on reducer-managed substate. */\n    reducer: Reducer;\n    /** Feature flags required for this extension to be effective. */\n    required?: string | string[];\n  }\n}\n\nexport interface ReduxReducer extends Extension<ExtensionProperties.ReduxReducer> {\n  type: 'ReduxReducer';\n}\n\nexport const isReduxReducer = (e: Extension): e is ReduxReducer => {\n  return e.type === 'ReduxReducer';\n};\n","import { K8sKind } from '@console/internal/module/k8s';\nimport { Extension } from './base';\n\nnamespace ExtensionProperties {\n  export interface YAMLTemplate {\n    /** Model associated with the template. */\n    model: K8sKind;\n    /** The YAML template to use. */\n    template: string;\n    /** The name of the template. If not specified, use the `default` value. */\n    templateName?: string;\n  }\n}\n\nexport interface YAMLTemplate extends Extension<ExtensionProperties.YAMLTemplate> {\n  type: 'YAMLTemplate';\n}\n\nexport function isYAMLTemplate(e: Extension): e is YAMLTemplate {\n  return e.type === 'YAMLTemplate';\n}\n","import * as React from 'react';\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore: FIXME missing exports due to out-of-sync @types/react-redux version\nimport { useSelector } from 'react-redux';\nimport { createSelectorCreator, defaultMemoize } from 'reselect';\nimport { RootState } from '@console/internal/redux';\nimport { stateToFlagsObject, FlagsObject, FeatureState } from '@console/internal/reducers/features';\nimport { pluginStore } from '@console/internal/plugins';\nimport { getGatingFlagNames, isExtensionInUse } from './store';\nimport { Extension, ExtensionTypeGuard } from './typings';\n\n/**\n * React hook for consuming Console extensions.\n *\n * This hook takes extension type guard as its only argument and returns a list\n * of extension instances, narrowed by the given type guard, which are currently\n * in use.\n *\n * An extension is considered to be in use when\n *\n * - it is an always-on extension, i.e. not gated by any feature flags\n * - all feature flags referenced by its `flags` object are resolved to the right\n *   values\n *\n * Example usage:\n *\n * ```ts\n * import {\n *   useExtensions,\n *   NavItem,\n *   Perspective,\n *   isNavItem,\n *   isPerspective,\n * } from '@console/plugin-sdk';\n *\n * const Example = () => {\n *   const navItemExtensions = useExtensions<NavItem>(isNavItem);\n *   const perspectiveExtensions = useExtensions<Perspective>(isPerspective);\n *   // process extensions and render your component\n * };\n * ```\n *\n * @param typeGuard Type guard used to narrow the extension type.\n */\nexport const useExtensions: UseExtensions = (typeGuard) => {\n  const allExtensions = pluginStore.getAllExtensions();\n\n  // 1) Narrow extensions according to type guard\n  const matchedExtensions = React.useMemo(() => allExtensions.filter(typeGuard), [\n    allExtensions,\n    typeGuard,\n  ]);\n\n  // 2) Compute flags relevant for gating matched extensions\n  const gatingFlagNames = React.useMemo(() => getGatingFlagNames(matchedExtensions), [\n    matchedExtensions,\n  ]);\n  const gatingFlagSelectorCreator = React.useMemo(\n    () =>\n      createSelectorCreator(\n        defaultMemoize as any,\n        (prevFeatureState: FeatureState, nextFeatureState: FeatureState) =>\n          gatingFlagNames.every((f) => prevFeatureState.get(f) === nextFeatureState.get(f)),\n      ),\n    [gatingFlagNames],\n  );\n  const gatingFlagSelector = React.useMemo(\n    () =>\n      gatingFlagSelectorCreator(\n        (state: RootState) => state.FLAGS,\n        (featureState) => stateToFlagsObject(featureState, gatingFlagNames),\n      ),\n    [gatingFlagSelectorCreator, gatingFlagNames],\n  );\n  const gatingFlags = useSelector<RootState, FlagsObject>(gatingFlagSelector);\n\n  // 3) Gate matched extensions by relevant feature flags\n  const extensionsInUse = React.useMemo(\n    () => matchedExtensions.filter((e) => isExtensionInUse(e, gatingFlags)),\n    [matchedExtensions, gatingFlags],\n  );\n\n  return extensionsInUse;\n};\n\ntype UseExtensions = <E extends Extension>(typeGuard: ExtensionTypeGuard<E>) => E[];\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as _ from 'lodash';\nimport { RootState } from '@console/internal/redux';\nimport { stateToFlagsObject } from '@console/internal/reducers/features';\nimport { pluginStore } from '@console/internal/plugins';\nimport { getGatingFlagNames, isExtensionInUse } from './store';\nimport { Extension, ExtensionTypeGuard } from './typings';\n\n/**\n * React higher-order component (HOC) for consuming Console extensions.\n *\n * This is semantically equivalent to `useExtensions` hook with one difference:\n * this HOC supports retrieving different extension types and providing them to\n * your component as props.\n *\n * Example usage:\n *\n * ```ts\n * import {\n *   withExtensions,\n *   NavItem,\n *   Perspective,\n *   isNavItem,\n *   isPerspective,\n * } from '@console/plugin-sdk';\n *\n * const Example = withExtensions<ExampleExtensionProps>({\n *   navItemExtensions: isNavItem,\n *   perspectiveExtensions: isPerspective,\n * })(\n *   class Example extends React.Component<ExampleOwnProps & ExampleExtensionProps> {\n *     render() {\n *       const { navItemExtensions, perspectiveExtensions } = this.props;\n *       // process extensions and render your component\n *     }\n *   },\n * );\n *\n * type ExampleExtensionProps = {\n *   navItemExtensions: NavItem[];\n *   perspectiveExtensions: Perspective[];\n * };\n * ```\n *\n * @param typeGuardMapper Object that maps prop names to extension type guards.\n * It's basically an object-based analogy to Redux `mapStateToProps` function.\n */\nexport const withExtensions = <\n  TExtensionProps extends ExtensionProps<E>,\n  E extends Extension = Extension\n>(\n  typeGuardMapper: ExtensionTypeGuardMapper<E, TExtensionProps>,\n): (<P extends TExtensionProps>(\n  C: React.ComponentType<P>,\n) => React.ComponentType<Omit<P, keyof TExtensionProps>> & {\n  WrappedComponent: React.ComponentType<P>;\n}) => {\n  const allExtensions = pluginStore.getAllExtensions();\n\n  // 1) Narrow extensions according to type guards\n  const matchedExtensions = _.flatMap(\n    Object.values(typeGuardMapper).map((tg) => allExtensions.filter(tg)),\n  );\n\n  // 2.a) Compute flags relevant for gating matched extensions\n  const gatingFlagNames = getGatingFlagNames(matchedExtensions);\n\n  return connect<TExtensionProps, any, any, RootState>(\n    (state) => {\n      // 2.b) Compute flags relevant for gating matched extensions\n      const gatingFlags = stateToFlagsObject(state.FLAGS, gatingFlagNames);\n\n      // 3) Gate matched extensions by relevant feature flags\n      const extensionsInUse = matchedExtensions.filter((e) => isExtensionInUse(e, gatingFlags));\n\n      return Object.keys(typeGuardMapper).reduce(\n        (props, propName) => ({\n          ...props,\n          [propName]: extensionsInUse.filter(typeGuardMapper[propName]),\n        }),\n        {},\n      ) as TExtensionProps;\n    },\n    null,\n    null,\n    {\n      areStatesEqual: ({ FLAGS: next }, { FLAGS: prev }) =>\n        gatingFlagNames.every((f) => next.get(f) === prev.get(f)),\n    },\n  );\n};\n\ntype ExtensionProps<E extends Extension> = {\n  [propName: string]: E[];\n};\n\ntype ExtensionTypeGuardMapper<E extends Extension, P extends ExtensionProps<E>> = {\n  [K in keyof P]: ExtensionTypeGuard<E>;\n};\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\n\nconst ErrorAlert: React.FC<Props> = ({ message, title = 'An error occurred' }) => (\n  <Alert isInline className=\"co-alert co-alert--scrollable\" title={title} variant=\"danger\">\n    {message}\n  </Alert>\n);\n\ntype Props = {\n  message: string;\n  title?: string;\n};\n\nexport default ErrorAlert;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { Label } from '@patternfly/react-core';\n\nconst DevPreviewBadge: React.FC = () => (\n  <Label style={{ backgroundColor: '#D93F00' }}>Dev Preview</Label>\n);\n\nexport default DevPreviewBadge;\n","import * as React from 'react';\nimport { Badge } from '@patternfly/react-core';\nimport './Badge.scss';\n\nexport const InlineTechPreviewBadge = () => (\n  <Badge className=\"ocs-badge__inline\" isRead>\n    Tech Preview\n  </Badge>\n);\nexport const InlineDevPreviewBadge = () => (\n  <Badge className=\"ocs-badge__inline\" isRead>\n    Dev Preview\n  </Badge>\n);\n","import * as React from 'react';\nimport { Label } from '@patternfly/react-core';\n\nconst TechPreviewBadge: React.FC = () => (\n  <Label style={{ backgroundColor: '#D93F00' }}>Tech Preview</Label>\n);\n\nexport default TechPreviewBadge;\n","import * as React from 'react';\nimport DevPreviewBadge from './DevPreviewBadge';\nimport TechPreviewBadge from './TechPreviewBadge';\nimport { InlineDevPreviewBadge, InlineTechPreviewBadge } from './InlineBadge';\n\nexport enum BadgeType {\n  DEV = 'Dev Preview',\n  TECH = 'Tech Preview',\n}\n\nexport const getBadgeFromType = (badge: BadgeType): React.ReactElement => {\n  switch (badge) {\n    case BadgeType.DEV:\n      return <DevPreviewBadge />;\n    case BadgeType.TECH:\n      return <TechPreviewBadge />;\n    default:\n      return null;\n  }\n};\n\nexport const getInlineBadgeFromType = (badge: BadgeType): React.ReactElement => {\n  switch (badge) {\n    case BadgeType.DEV:\n      return <InlineDevPreviewBadge />;\n    case BadgeType.TECH:\n      return <InlineTechPreviewBadge />;\n    default:\n      return null;\n  }\n};\n","export * from './badge-factory';\nexport { default as DevPreviewBadge } from './DevPreviewBadge';\nexport { default as TechPreviewBadge } from './TechPreviewBadge';\nexport * from './InlineBadge';\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash';\nimport { DropdownMenu } from '@patternfly/react-core';\nimport { history, KebabItem, KebabOption } from '@console/internal/components/utils';\nimport './PopupKebabMenu.scss';\n\nexport interface PopupKebabMenuProps {\n  kebabOptions: KebabOption[];\n  className?: string;\n  onClose?(): void;\n  eventX: number;\n  eventY: number;\n  container?: Element;\n}\ninterface PopopKebabMenuState {\n  menuTop: number;\n  menuLeft: number;\n}\n\nconst MENU_PADDING = 20;\n\nexport class PopupKebabMenu extends React.Component<PopupKebabMenuProps, PopopKebabMenuState> {\n  state = {\n    menuTop: 0,\n    menuLeft: 0,\n  };\n\n  private menu: Element;\n\n  componentDidMount() {\n    document.addEventListener('focus', this.handleBlur, true);\n    this.updateMenuPosition();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      this.props.eventX !== prevProps.eventX ||\n      this.props.eventY !== prevProps.eventY ||\n      !_.isEqual(this.props.kebabOptions, prevProps.kebabOptions)\n    ) {\n      this.updateMenuPosition();\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('focus', this.handleBlur, true);\n  }\n\n  updateMenuPosition = () => {\n    const { container, eventX, eventY } = this.props;\n    let menuTop = eventY;\n    let menuLeft = eventX;\n\n    if (container) {\n      const menu: Element = this.menu.firstElementChild;\n      if (menu) {\n        const elementRect = container.getBoundingClientRect();\n        const menuRect = menu.getBoundingClientRect();\n\n        if (\n          eventY + menuRect.height + menuRect.top >\n          elementRect.top + elementRect.height - MENU_PADDING\n        ) {\n          menuTop = Math.max(\n            elementRect.top + elementRect.height - menuRect.height - menuRect.top - MENU_PADDING,\n            0,\n          );\n        }\n        if (\n          eventX + menuRect.width + menuRect.left >\n          elementRect.left + elementRect.width - MENU_PADDING\n        ) {\n          menuLeft = Math.max(\n            elementRect.left + elementRect.width - menuRect.width - menuRect.left - MENU_PADDING,\n            0,\n          );\n        }\n      }\n    }\n\n    if (menuTop !== this.state.menuTop || menuLeft !== this.state.menuLeft) {\n      this.setState({ menuTop, menuLeft });\n    }\n  };\n\n  handleClose = () => {\n    const { onClose } = this.props;\n\n    onClose && onClose();\n  };\n\n  handleMenuMouseDown = (e) => {\n    e.stopPropagation();\n  };\n\n  handleBlur = (e) => {\n    if (!this.menu.contains(e.target)) {\n      let focusTarget;\n\n      const menuItems = this.menu.querySelectorAll('button');\n      if (_.first(menuItems) === e.relatedTarget) {\n        focusTarget = _.last(menuItems);\n      } else if (_.last(menuItems) === e.relatedTarget) {\n        focusTarget = _.first(menuItems);\n      } else {\n        focusTarget = e.relatedTarget;\n      }\n\n      focusTarget.focus();\n    }\n  };\n\n  onKebabOptionClick = (event, option: KebabOption) => {\n    event.stopPropagation();\n\n    if (option.callback) {\n      option.callback();\n    }\n\n    if (option.href) {\n      history.push(option.href);\n    }\n\n    this.handleClose();\n  };\n\n  setMenu = (ref) => {\n    this.menu = ref;\n  };\n\n  render() {\n    const { className, kebabOptions } = this.props;\n    const { menuTop, menuLeft } = this.state;\n    const visibleOptions = _.reject(kebabOptions, (o) => _.get(o, 'hidden', false));\n    const classes = classNames('ocs-popup-kebab-menu', className);\n\n    return (\n      <div className=\"pf-c-page ocs-popup-kebab-menu__container\">\n        <input className=\"ocs-popup-kebab-menu__faux-input\" />\n        <div className={classes}>\n          <div\n            className=\"ocs-popup-kebab-menu__backdrop\"\n            role=\"presentation\"\n            onMouseDown={this.handleClose}\n          >\n            <div\n              className=\"pf-c-dropdown pf-m-expanded\"\n              style={{ top: menuTop, left: menuLeft }}\n              ref={this.setMenu}\n              role=\"presentation\"\n              onMouseDown={this.handleMenuMouseDown}\n            >\n              <DropdownMenu className=\"pf-c-dropdown__menu\">\n                {_.map(visibleOptions, (o, i) => (\n                  <li key={i}>\n                    <KebabItem\n                      option={o}\n                      onClick={this.onKebabOptionClick}\n                      autoFocus={i === 0}\n                      onEscape={this.handleClose}\n                    />\n                  </li>\n                ))}\n              </DropdownMenu>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","export * from './PopupKebabMenu';\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport './dashboard.scss';\n\nconst Dashboard: React.FC<DashboardProps> = ({ className, children }) => (\n  <div data-test-id=\"dashboard\" className={classNames('co-dashboard-body', className)}>\n    {children}\n  </div>\n);\n\nexport default Dashboard;\n\ntype DashboardProps = {\n  className?: string;\n  children: React.ReactNode;\n};\n","import * as React from 'react';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { global_breakpoint_lg as breakpointLG } from '@patternfly/react-tokens';\nimport { DashboardCardSpan } from '@console/plugin-sdk';\nimport { useRefWidth } from '@console/internal/components/utils/ref-width-hook';\n\nexport enum GridPosition {\n  MAIN = 'MAIN',\n  LEFT = 'LEFT',\n  RIGHT = 'RIGHT',\n}\n\nconst mapCardsToGrid = (\n  cards: GridDashboardCard[] = [],\n  keyPrefix: string,\n  ignoreCardSpan: boolean = false,\n): React.ReactNode[] =>\n  cards.map(({ Card, span = 12 }, index) => (\n    // eslint-disable-next-line react/no-array-index-key\n    <GridItem key={`${keyPrefix}-${index}`} span={ignoreCardSpan ? 12 : span}>\n      <Card />\n    </GridItem>\n  ));\n\nconst DashboardGrid: React.FC<DashboardGridProps> = ({ mainCards, leftCards, rightCards }) => {\n  const [containerRef, width] = useRefWidth();\n  const smallGrid = !!containerRef.current && width <= parseInt(breakpointLG.value, 10);\n\n  const mainGridCards = React.useMemo(() => mapCardsToGrid(mainCards, 'main', smallGrid), [\n    mainCards,\n    smallGrid,\n  ]);\n  const leftGridCards = React.useMemo(() => mapCardsToGrid(leftCards, 'left', smallGrid), [\n    leftCards,\n    smallGrid,\n  ]);\n  const rightGridCards = React.useMemo(() => mapCardsToGrid(rightCards, 'right', smallGrid), [\n    rightCards,\n    smallGrid,\n  ]);\n\n  return (\n    <div ref={containerRef}>\n      {smallGrid ? (\n        <Grid className=\"co-dashboard-grid\">\n          <GridItem lg={12} md={12} sm={12}>\n            <Grid className=\"co-dashboard-grid\">{mainGridCards}</Grid>\n          </GridItem>\n          <GridItem lg={12} md={12} sm={12}>\n            <Grid className=\"co-dashboard-grid\">{leftGridCards}</Grid>\n          </GridItem>\n          <GridItem lg={12} md={12} sm={12}>\n            <Grid className=\"co-dashboard-grid\">{rightGridCards}</Grid>\n          </GridItem>\n        </Grid>\n      ) : (\n        <Grid className=\"co-dashboard-grid\">\n          <GridItem lg={3} md={3} sm={3}>\n            <Grid className=\"co-dashboard-grid\">{leftGridCards}</Grid>\n          </GridItem>\n          <GridItem lg={6} md={6} sm={6}>\n            <Grid className=\"co-dashboard-grid\">{mainGridCards}</Grid>\n          </GridItem>\n          <GridItem lg={3} md={3} sm={3}>\n            <Grid className=\"co-dashboard-grid\">{rightGridCards}</Grid>\n          </GridItem>\n        </Grid>\n      )}\n    </div>\n  );\n};\n\nexport default DashboardGrid;\n\nexport type GridDashboardCard = {\n  Card: React.ComponentType<any>;\n  span?: DashboardCardSpan;\n};\n\ntype DashboardGridProps = {\n  mainCards: GridDashboardCard[];\n  leftCards?: GridDashboardCard[];\n  rightCards?: GridDashboardCard[];\n};\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { K8sActivityProps, PrometheusActivityProps, LazyLoader } from '@console/plugin-sdk';\nimport { PlayIcon, PauseIcon } from '@patternfly/react-icons';\nimport { Accordion } from '@patternfly/react-core';\nimport { K8sResourceKind, EventKind } from '@console/internal/module/k8s';\nimport { ErrorLoadingEvents, sortEvents } from '@console/internal/components/events';\nimport { Timestamp } from '@console/internal/components/utils/timestamp';\nimport { AsyncComponent } from '@console/internal/components/utils/async';\nimport { FirehoseResult } from '@console/internal/components/utils/types';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport { DashboardCardButtonLink } from '../dashboard-card/DashboardCardLink';\nimport EventItem from './EventItem';\nimport './activity-card.scss';\nimport { Link } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nexport const Activity: React.FC<ActivityProps> = ({ timestamp, children }) => (\n  <div className=\"co-activity-item__ongoing\">\n    {timestamp && (\n      <span className=\"text-secondary\">\n        Started <Timestamp simple timestamp={timestamp.toString()} />\n      </span>\n    )}\n    {children}\n  </div>\n);\n\nexport const RecentEventsBodyContent: React.FC<RecentEventsBodyContentProps> = ({ events, filter, paused, setPaused, moreLink }) => {\n  const ref = React.useRef<EventKind[]>([]);\n  React.useEffect(() => {\n    if (paused && events) {\n      ref.current = events.data;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [paused]);\n  if (!paused && events) {\n    ref.current = events.data;\n  }\n  const eventsData = ref.current;\n  const [expanded, setExpanded] = React.useState<string[]>([]);\n  const onToggle = React.useCallback(\n    (uid: string) => {\n      const isExpanded = expanded.includes(uid);\n      const newExpanded = isExpanded ? expanded.filter(e => e !== uid) : [...expanded, uid];\n      setPaused(isExpanded ? !!newExpanded.length : !isExpanded);\n      setExpanded(newExpanded);\n    },\n    [expanded, setPaused],\n  );\n  const isExpanded = React.useCallback(\n    (uid: string) => {\n      return expanded.includes(uid);\n    },\n    [expanded],\n  );\n\n  if (events && events.loadError) {\n    return <ErrorLoadingEvents />;\n  }\n  if (!(events && events.loaded)) {\n    return (\n      <div className=\"co-status-card__alerts-body\">\n        <div className=\"co-status-card__alert-item co-status-card__alert-item--loading\">\n          <div className=\"skeleton-activity__dashboard\" />\n          <div className=\"skeleton-activity__dashboard\" />\n          <div className=\"skeleton-activity__dashboard\" />\n          <div className=\"skeleton-activity__dashboard\" />\n          <div className=\"skeleton-activity__dashboard\" />\n        </div>\n      </div>\n    );\n  }\n\n  const filteredEvents = filter ? eventsData.filter(filter) : eventsData;\n  const sortedEvents: EventKind[] = sortEvents(filteredEvents);\n  const lastEvents = sortedEvents.slice(0, 50);\n  if (sortedEvents.length === 0) {\n    return (\n      <Activity>\n        <div className=\"text-secondary\">There are no recent events.</div>\n      </Activity>\n    );\n  }\n  return (\n    <>\n      <Accordion asDefinitionList={false} headingLevel=\"h5\" className=\"co-activity-card__recent-accordion\">\n        {lastEvents.map(e => (\n          <EventItem key={e.metadata.uid} isExpanded={isExpanded} onToggle={onToggle} event={e} />\n        ))}\n      </Accordion>\n      {sortedEvents.length > 50 && !!moreLink && (\n        <Link className=\"co-activity-card__recent-more-link\" to={moreLink}>\n          View all events\n        </Link>\n      )}\n    </>\n  );\n};\n\nexport const PauseButton: React.FC<PauseButtonProps> = ({ paused, togglePause }) => {\n  const { t } = useTranslation();\n  return (\n    <DashboardCardButtonLink onClick={togglePause} className=\"co-activity-card__recent-actions\" icon={paused ? <PlayIcon /> : <PauseIcon />} data-test-id=\"events-pause-button\">\n      {paused ? t('SINGLE:MSG_OVERVIEW_MAIN_CARDACTIVITY_RESUME_1') : t('SINGLE:MSG_OVERVIEW_MAIN_CARDACTIVITY_PAUSE_1')}\n    </DashboardCardButtonLink>\n  );\n};\n\nexport const RecentEventsBody: React.FC<RecentEventsBodyProps> = props => {\n  const [paused, setPaused] = React.useState(false);\n  const togglePause = React.useCallback(() => setPaused(!paused), [paused]);\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-activity-card__recent-title\">\n        {t('SINGLE:MSG_OVERVIEW_MAIN_CARDACTIVITY_RECENT_1')}\n        <PauseButton paused={paused} togglePause={togglePause} />\n      </div>\n      <RecentEventsBodyContent {...props} paused={paused} setPaused={setPaused} />\n    </>\n  );\n};\n\nexport const OngoingActivityBody: React.FC<OngoingActivityBodyProps> = ({ loaded, resourceActivities = [], prometheusActivities = [] }) => {\n  const activitiesLoaded = loaded || resourceActivities.length > 0 || prometheusActivities.length > 0;\n  let body: React.ReactNode;\n  if (!activitiesLoaded) {\n    body = (\n      <div className=\"co-activity-item__ongoing\">\n        <div className=\"skeleton-activity__dashboard\" />\n      </div>\n    );\n  } else {\n    const allActivities = prometheusActivities.map(({ results, loader }, idx) => (\n      // eslint-disable-next-line react/no-array-index-key\n      <Activity key={idx}>\n        <AsyncComponent loader={loader} results={results} />\n      </Activity>\n    ));\n    resourceActivities\n      .sort((a, b) => +b.timestamp - +a.timestamp)\n      .forEach(({ resource, timestamp, loader }) =>\n        allActivities.push(\n          <Activity key={resource.metadata.uid} timestamp={timestamp}>\n            <AsyncComponent loader={loader} resource={resource} />\n          </Activity>,\n        ),\n      );\n    body = allActivities.length ? (\n      allActivities\n    ) : (\n      <Activity>\n        <div className=\"text-secondary\">There are no ongoing activities.</div>\n      </Activity>\n    );\n  }\n  return (\n    <>\n      <div className=\"co-activity-card__ongoing-title\">Ongoing</div>\n      <div className=\"co-activity-card__ongoing-body\">{body}</div>\n    </>\n  );\n};\n\nconst ActivityBody: React.FC<ActivityBodyProps> = ({ children, className }) => (\n  <div className={classNames('co-dashboard-card__body--no-padding co-activity-card__body', className)} id=\"activity-body\">\n    {children}\n  </div>\n);\n\nexport default ActivityBody;\n\ntype ActivityBodyProps = {\n  children: React.ReactNode;\n  className?: string;\n};\n\ntype OngoingActivityBodyProps = {\n  resourceActivities?: {\n    resource: K8sResourceKind;\n    timestamp: Date;\n    loader: LazyLoader<K8sActivityProps>;\n  }[];\n  prometheusActivities?: {\n    results: PrometheusResponse[];\n    loader: LazyLoader<PrometheusActivityProps>;\n  }[];\n  loaded: boolean;\n};\n\ntype RecentEventsBodyProps = {\n  events: FirehoseResult<EventKind[]>;\n  filter?: (event: EventKind) => boolean;\n  moreLink?: string;\n};\n\ntype RecentEventsBodyContentProps = RecentEventsBodyProps & {\n  paused?: boolean;\n  setPaused?: (paused: boolean) => void;\n};\n\ntype ActivityProps = {\n  timestamp?: Date;\n  children: React.ReactNode;\n};\n\ntype PauseButtonProps = {\n  paused: boolean;\n  togglePause: () => void;\n};\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { Progress, ProgressSize } from '@patternfly/react-core';\nimport { InProgressIcon } from '@patternfly/react-icons';\n\nexport const ActivityProgress: React.FC<ActivityProgressProps> = ({\n  title,\n  progress,\n  children,\n}) => (\n  <>\n    <Progress\n      value={progress}\n      title={title}\n      size={ProgressSize.sm}\n      className=\"co-activity-item__progress\"\n    />\n    <div>{children}</div>\n  </>\n);\n\nconst ActivityItem: React.FC<ActivityItemProps> = ({ children, className }) => (\n  <>\n    <div className={classNames('co-activity-item', className)}>\n      <InProgressIcon className=\"co-dashboard-icon co-activity-item__icon\" />\n      {children}\n    </div>\n  </>\n);\n\nexport default ActivityItem;\n\ntype ActivityItemProps = {\n  className?: string;\n};\n\ntype ActivityProgressProps = {\n  title: string;\n  progress: number;\n};\n","import * as React from 'react';\nimport { AccordionContent, AccordionItem, AccordionToggle } from '@patternfly/react-core';\nimport classNames from 'classnames';\nimport { typeFilter, getLastTime } from '@console/internal/components/events';\nimport { twentyFourHourTime } from '@console/internal/components/utils/datetime';\nimport { ResourceIcon } from '@console/internal/components/utils/resource-icon';\nimport { ResourceLink } from '@console/internal/components/utils/resource-link';\nimport { EventKind, referenceFor } from '@console/internal/module/k8s';\nimport { YellowExclamationTriangleIcon } from '../../status';\n\nconst propsAreEqual = (prevProps: EventItemProps, nextProps: EventItemProps) =>\n  prevProps.event.metadata.uid === nextProps.event.metadata.uid &&\n  getLastTime(prevProps.event) === getLastTime(nextProps.event) &&\n  prevProps.isExpanded === nextProps.isExpanded &&\n  prevProps.onToggle === nextProps.onToggle;\n\nconst EventItem: React.FC<EventItemProps> = React.memo(({ event, isExpanded, onToggle }) => {\n  const { involvedObject, message, metadata } = event;\n  const lastTime = getLastTime(event);\n  const isWarning = typeFilter('warning', event);\n  const expanded = isExpanded(metadata.uid);\n  return (\n    <div className=\"co-recent-item__body\">\n      <AccordionItem>\n        <AccordionToggle\n          onClick={() => onToggle(metadata.uid)}\n          isExpanded={expanded}\n          id={metadata.uid}\n          className={classNames('co-recent-item__toggle', {\n            'co-recent-item--warning': isWarning && expanded,\n          })}\n        >\n          <div className=\"co-recent-item__title\">\n            <div className=\"co-recent-item__title-timestamp text-secondary\">\n              {lastTime ? (\n                <span title={lastTime}>{twentyFourHourTime(new Date(lastTime))}</span>\n              ) : (\n                '-'\n              )}\n            </div>\n            <div className=\"co-recent-item__title-message\">\n              {isWarning && (\n                <YellowExclamationTriangleIcon className=\"co-dashboard-icon co-recent-item__icon--warning\" />\n              )}\n              {!expanded && (\n                <>\n                  <ResourceIcon kind={involvedObject.kind} />\n                  <div className=\"co-recent-item__title-message-text\">{message}</div>\n                </>\n              )}\n            </div>\n          </div>\n        </AccordionToggle>\n        <AccordionContent\n          isHidden={!expanded}\n          className={classNames('co-recent-item__content', {\n            'co-recent-item--warning': isWarning,\n          })}\n        >\n          <div>\n            <div className=\"co-recent-item__content-header\">\n              <ResourceLink\n                className=\"co-recent-item__content-resourcelink\"\n                kind={referenceFor(involvedObject)}\n                namespace={involvedObject.namespace}\n                name={involvedObject.name}\n                title={involvedObject.uid}\n              />\n            </div>\n            <div className=\"co-dashboard-text--small co-recent-item__content-message\">\n              {message}\n            </div>\n          </div>\n        </AccordionContent>\n      </AccordionItem>\n    </div>\n  );\n}, propsAreEqual);\n\nexport default EventItem;\n\ntype EventItemProps = {\n  event: EventKind;\n  isExpanded: (key: string) => boolean;\n  onToggle: (key: string) => void;\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport classNames from 'classnames';\nimport { Card, CardProps } from '@patternfly/react-core';\nimport { withFallback } from '@console/shared/src/components/error/error-boundary';\nimport './card.scss';\n\nconst DashboardCard = withFallback<DashboardCardProps>(\n  React.memo(({ className, children, gradient, ...props }) => (\n    <Card\n      {...props}\n      className={classNames(\n        'co-dashboard-card',\n        { 'co-dashboard-card--gradient': gradient },\n        className,\n      )}\n    >\n      {children}\n    </Card>\n  )),\n);\n\nexport default DashboardCard;\n\ntype DashboardCardProps = CardProps & {\n  className?: string;\n  children: React.ReactNode;\n  gradient?: boolean;\n};\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { CardBody, CardBodyProps } from '@patternfly/react-core';\nimport { LoadingInline } from '@console/internal/components/utils/status-box';\n\nconst DashboardCardBody: React.FC<DashboardCardBodyProps> = React.memo(\n  ({ isLoading, classname, children, ...props }) => (\n    <CardBody className={classNames('co-dashboard-card__body', classname)} {...props}>\n      {isLoading ? <LoadingInline /> : children}\n    </CardBody>\n  ),\n);\n\nexport default DashboardCardBody;\n\ntype DashboardCardBodyProps = CardBodyProps & {\n  classname?: string;\n  children: React.ReactNode;\n  isLoading?: boolean;\n};\n","import * as React from 'react';\nimport classNames from 'classnames';\n\nconst DashboardCardHeader: React.FC<DashboardCardHeaderProps> = React.memo(\n  ({ className, children }) => (\n    <div className={classNames('co-dashboard-card__header', className)}>{children}</div>\n  ),\n);\n\nexport default DashboardCardHeader;\n\ntype DashboardCardHeaderProps = {\n  className?: string;\n  children: React.ReactNode;\n};\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Button, ButtonProps, Popover, PopoverPosition } from '@patternfly/react-core';\n\nexport const DashboardCardButtonLink: React.FC<DashboardCardButtonLinkProps> = React.memo(\n  ({ children, className, ...rest }) => (\n    <Button\n      variant=\"link\"\n      isInline\n      className={classNames('co-dashboard-card__button-link', className)}\n      {...rest}\n    >\n      {children}\n    </Button>\n  ),\n);\n\nconst DashboardCardLink: React.FC<DashboardCardLinkProps> = React.memo(\n  ({ children, to, className }) => (\n    <Link to={to} className=\"co-dashboard-card__link\">\n      <DashboardCardButtonLink className={className}>{children}</DashboardCardButtonLink>\n    </Link>\n  ),\n);\n\nexport const DashboardCardPopupLink: React.FC<DashboardCardPopupLinkProps> = React.memo(\n  ({\n    linkTitle,\n    popupTitle,\n    children,\n    className,\n    onShow,\n    onHide,\n    position = PopoverPosition.right,\n  }) => {\n    if (React.Children.count(children) === 0) {\n      return null;\n    }\n\n    return (\n      <Popover\n        position={position}\n        headerContent={popupTitle}\n        bodyContent={children}\n        enableFlip\n        onShow={onShow}\n        onHide={onHide}\n        maxWidth=\"21rem\"\n      >\n        <DashboardCardButtonLink className={className}>{linkTitle}</DashboardCardButtonLink>\n      </Popover>\n    );\n  },\n);\n\nexport default DashboardCardLink;\n\ntype DashboardCardButtonLinkProps = ButtonProps & {\n  children: React.ReactNode;\n  className?: string;\n};\n\ntype DashboardCardPopupLinkProps = {\n  children?: React.ReactNode;\n  popupTitle: string;\n  linkTitle: React.ReactNode;\n  className?: string;\n  onShow?: () => void;\n  onHide?: () => void;\n  position?: PopoverPosition;\n};\n\ntype DashboardCardLinkProps = DashboardCardButtonLinkProps & {\n  to: string;\n};\n","import * as React from 'react';\nimport classNames from 'classnames';\n\nconst DashboardCardTitle: React.FC<DashboardCardTitleProps> = React.memo(\n  ({ className, children }) => (\n    <h2 className={classNames('co-dashboard-card__title', className)}>{children}</h2>\n  ),\n);\n\nexport default DashboardCardTitle;\n\ntype DashboardCardTitleProps = {\n  className?: string;\n  children: React.ReactNode;\n};\n","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as classNames from 'classnames';\n\nexport const DetailItem: React.FC<DetailItemProps> = React.memo(\n  ({ title, isLoading = false, children, error = false, valueClassName }) => {\n    let status: React.ReactNode;\n    if (error) {\n      status = <span className=\"text-secondary\">Not available</span>;\n    } else if (isLoading) {\n      status = <div className=\"skeleton-text\" />;\n    } else {\n      status = children;\n    }\n    return (\n      <>\n        <dt className=\"co-details-card__item-title\">{title}</dt>\n        <dd className={classNames('co-details-card__item-value', valueClassName)}>{status}</dd>\n      </>\n    );\n  },\n);\n\nexport default DetailItem;\n\ntype DetailItemProps = {\n  title: string;\n  children: React.ReactNode;\n  isLoading?: boolean;\n  error?: boolean;\n  valueClassName?: string;\n};\n","import * as React from 'react';\nimport './details-card.scss';\n\nconst DetailsBody: React.FC<DetailsBodyProps> = ({ children }) => (\n  <dl className=\"co-dashboard-card__body--top-margin co-details-card__body co-dashboard-text--small\">\n    {children}\n  </dl>\n);\n\nexport default DetailsBody;\n\ntype DetailsBodyProps = {\n  children: React.ReactNode;\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\n\n// duration dropdown 컴포넌트 i18n 적용...\n\nexport enum Duration {\n  ONE_HR = '1 Hour',\n  SIX_HR = '6 Hours',\n  TWENTY_FOUR_HR = '24 Hours',\n}\n\nconst ONE_HOUR = 60 * 60 * 1000;\n\nexport const UTILIZATION_QUERY_HOUR_MAP = {\n  [Duration.ONE_HR]: ONE_HOUR,\n  [Duration.SIX_HR]: 6 * ONE_HOUR,\n  [Duration.TWENTY_FOUR_HR]: 24 * ONE_HOUR,\n};\n\nexport const useMetricDuration = (): MetricDuration => {\n  const { t } = useTranslation();\n  const durationItems = {\n    ['ONE_HR']: t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_1_1'),\n    ['SIX_HR']: t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_6_1'),\n    ['TWENTY_FOUR_HR']: t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_24_1'),\n  };\n\n  const [duration, setDuration] = React.useState(durationItems['ONE_HR']);\n  const setMetricDuration = React.useCallback(d => setDuration(durationItems[d]), [setDuration]);\n  return [duration, setMetricDuration];\n};\n\ntype MetricDuration = [string, (duration: string) => void];\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { InProgressIcon, QuestionCircleIcon } from '@patternfly/react-icons';\nimport { K8sResourceKind, K8sKind } from '@console/internal/module/k8s';\nimport { resourcePathFromModel } from '@console/internal/components/utils/resource-link';\nimport { Accordion, AccordionItem, AccordionToggle, AccordionContent } from '@patternfly/react-core';\nimport { pluralize } from '@console/internal/components/utils';\nimport { useExtensions, DashboardsInventoryItemGroup, isDashboardsInventoryItemGroup } from '@console/plugin-sdk';\nimport { RedExclamationCircleIcon, YellowExclamationTriangleIcon } from '../../status/icons';\nimport { InventoryStatusGroup } from './status-group';\nimport { ResourceLabel, ResourceLabelPlural } from '@console/internal/models/hypercloud/resource-plural';\nimport { useTranslation } from 'react-i18next';\nimport './inventory-card.scss';\n\nconst defaultStatusGroupIcons = {\n  [InventoryStatusGroup.WARN]: <YellowExclamationTriangleIcon />,\n  [InventoryStatusGroup.ERROR]: <RedExclamationCircleIcon />,\n  [InventoryStatusGroup.PROGRESS]: <InProgressIcon className=\"co-inventory-card__status-icon--progress\" />,\n  [InventoryStatusGroup.UNKNOWN]: <QuestionCircleIcon className=\"co-inventory-card__status-icon--question\" />,\n};\n\nconst getStatusGroupIcons = (groups: DashboardsInventoryItemGroup[]) => {\n  const groupStatusIcons = { ...defaultStatusGroupIcons };\n  groups.forEach(group => {\n    if (!groupStatusIcons[group.properties.id]) {\n      groupStatusIcons[group.properties.id] = group.properties.icon;\n    }\n  });\n  return groupStatusIcons;\n};\n\nconst getTop3Groups = (groups: DashboardsInventoryItemGroup[], groupIDs: string[]) => {\n  const groupStatuses: (InventoryStatusGroup | string)[] = [InventoryStatusGroup.ERROR, InventoryStatusGroup.WARN, InventoryStatusGroup.PROGRESS];\n  groups.forEach(group => {\n    if (!groupStatuses.includes(group.properties.id)) {\n      groupStatuses.push(group.properties.id);\n    }\n  });\n  groupStatuses.push(InventoryStatusGroup.UNKNOWN);\n  return groupIDs.sort((a, b) => groupStatuses.indexOf(a) - groupStatuses.indexOf(b)).slice(0, 3);\n};\n\nexport const InventoryItem: React.FC<InventoryItemProps> = React.memo(({ isLoading, title, titlePlural, count, children, error = false, TitleComponent, ExpandedComponent }) => {\n  const [expanded, setExpanded] = React.useState(false);\n  const onClick = React.useCallback(() => setExpanded(!expanded), [expanded]);\n  const titleMessage = pluralize(count, title, titlePlural, !isLoading && !error);\n  return ExpandedComponent ? (\n    <Accordion asDefinitionList={false} headingLevel=\"h5\" className=\"co-inventory-card__accordion\">\n      <AccordionItem>\n        <AccordionToggle onClick={onClick} isExpanded={expanded} id={title} className=\"co-inventory-card__accordion-toggle\">\n          <div className=\"co-inventory-card__item\">\n            <div className=\"co-inventory-card__item-title\">\n              {isLoading && !error && <div className=\"skeleton-inventory\" />}\n              {TitleComponent ? <TitleComponent>{titleMessage}</TitleComponent> : titleMessage}\n            </div>\n            {!expanded && (error || !isLoading) && <div className=\"co-inventory-card__item-status\">{error ? <div className=\"co-dashboard-text--small text-secondary\">Not available</div> : children}</div>}\n          </div>\n        </AccordionToggle>\n        <AccordionContent isHidden={!expanded} className=\"co-inventory-card__accordion-body\">\n          <ExpandedComponent />\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n  ) : (\n    <div className=\"co-inventory-card__item\">\n      <div className=\"co-inventory-card__item-title\">\n        {isLoading && !error && <div className=\"skeleton-inventory\" />}\n        {TitleComponent ? <TitleComponent>{titleMessage}</TitleComponent> : titleMessage}\n      </div>\n      {(error || !isLoading) && <div className=\"co-inventory-card__item-status\">{error ? <div className=\"co-dashboard-text--small text-secondary\">Not available</div> : children}</div>}\n    </div>\n  );\n});\n\nexport const Status: React.FC<StatusProps> = ({ groupID, count }) => {\n  const groupExtensions = useExtensions<DashboardsInventoryItemGroup>(isDashboardsInventoryItemGroup);\n\n  const statusGroupIcons = React.useMemo(() => getStatusGroupIcons(groupExtensions), [groupExtensions]);\n\n  if (groupID === InventoryStatusGroup.NOT_MAPPED || !count) {\n    return null;\n  }\n\n  const groupIcon = statusGroupIcons[groupID] || statusGroupIcons[InventoryStatusGroup.UNKNOWN];\n\n  return (\n    <div className=\"co-inventory-card__status\">\n      <span className=\"co-dashboard-icon\">{groupIcon}</span>\n      <span className=\"co-inventory-card__status-text\">{count}</span>\n    </div>\n  );\n};\n\nconst StatusLink: React.FC<StatusLinkProps> = ({ groupID, count, statusIDs, kind, namespace, filterType, basePath }) => {\n  const groupExtensions = useExtensions<DashboardsInventoryItemGroup>(isDashboardsInventoryItemGroup);\n\n  const statusGroupIcons = React.useMemo(() => getStatusGroupIcons(groupExtensions), [groupExtensions]);\n\n  if (groupID === InventoryStatusGroup.NOT_MAPPED || !count) {\n    return null;\n  }\n\n  const groupIcon = statusGroupIcons[groupID] || statusGroupIcons[InventoryStatusGroup.NOT_MAPPED];\n  const statusItems = encodeURIComponent(statusIDs.join(','));\n  const path = basePath || resourcePathFromModel(kind, null, namespace);\n  const to = filterType && statusItems.length > 0 ? `${path}?rowFilter-${filterType}=${statusItems}` : path;\n\n  return (\n    <div className=\"co-inventory-card__status\">\n      <Link to={to} style={{ textDecoration: 'none' }}>\n        <span className=\"co-dashboard-icon\">{groupIcon}</span>\n        <span className=\"co-inventory-card__status-text\">{count}</span>\n      </Link>\n    </div>\n  );\n};\n\nconst ResourceTitleComponent: React.FC<ResourceTitleComponentComponent> = ({ kind, namespace, children, basePath }) => <Link to={basePath || resourcePathFromModel(kind, null, namespace)}>{children}</Link>;\n\nexport const ResourceInventoryItem: React.FC<ResourceInventoryItemProps> = ({ kind, useAbbr, TitleComponent, resources = [], additionalResources, isLoading, mapper, namespace, error, showLink = true, ExpandedComponent, basePath }) => {\n  let Title: React.ComponentType = React.useCallback(props => <ResourceTitleComponent kind={kind} namespace={namespace} basePath={basePath} {...props} />, [kind, namespace, basePath]);\n  const { t } = useTranslation();\n\n  if (TitleComponent) Title = TitleComponent;\n\n  const groupExtensions = useExtensions<DashboardsInventoryItemGroup>(isDashboardsInventoryItemGroup);\n\n  const groups = React.useMemo(() => (mapper ? mapper(resources, additionalResources) : {}), [mapper, resources, additionalResources]);\n\n  const top3Groups = React.useMemo(\n    () =>\n      getTop3Groups(\n        groupExtensions,\n        Object.keys(groups).filter(key => groups[key].count > 0),\n      ),\n    [groupExtensions, groups],\n  );\n\n  // The count can depend on additionalResources (like mixing of VM and VMI for kubevirt-plugin)\n  const totalCount = React.useMemo(() => (mapper ? Object.keys(groups).reduce((acc, cur) => groups[cur].count + acc, 0) : resources.length), [mapper, groups, resources]);\n\n  return (\n    <InventoryItem isLoading={isLoading} title={ResourceLabel(kind, t)} titlePlural={ResourceLabelPlural(kind, t)} count={totalCount} error={error} TitleComponent={showLink ? Title : null} ExpandedComponent={ExpandedComponent}>\n      {top3Groups.map(key => (showLink ? <StatusLink key={key} kind={kind} namespace={namespace} groupID={key} count={groups[key].count} statusIDs={groups[key].statusIDs} filterType={groups[key].filterType} basePath={basePath} /> : <Status key={key} groupID={key} count={groups[key].count} />))}\n    </InventoryItem>\n  );\n};\n\nexport default InventoryItem;\n\ntype StatusGroup = {\n  [key in InventoryStatusGroup | string]: {\n    filterType?: string;\n    statusIDs: string[];\n    count: number;\n  };\n};\n\nexport type StatusGroupMapper = (resources: K8sResourceKind[], additionalResources?: { [key: string]: K8sResourceKind[] }) => StatusGroup;\n\ntype InventoryItemProps = {\n  isLoading: boolean;\n  title: string;\n  titlePlural?: string;\n  count: number;\n  children?: React.ReactNode;\n  error?: boolean;\n  TitleComponent?: React.ComponentType<{}>;\n  ExpandedComponent?: React.ComponentType<{}>;\n};\n\ntype StatusProps = {\n  groupID: InventoryStatusGroup | string;\n  count: number;\n};\n\ntype StatusLinkProps = StatusProps & {\n  statusIDs: string[];\n  kind: K8sKind;\n  namespace?: string;\n  filterType?: string;\n  basePath?: string;\n};\n\nexport type ExpandedComponentProps = {\n  resource: K8sResourceKind[];\n  additionalResources?: { [key: string]: K8sResourceKind[] };\n};\n\ntype ResourceInventoryItemProps = {\n  resources: K8sResourceKind[];\n  additionalResources?: { [key: string]: K8sResourceKind[] };\n  mapper?: StatusGroupMapper;\n  kind: K8sKind;\n  useAbbr?: boolean;\n  isLoading: boolean;\n  namespace?: string;\n  error: boolean;\n  showLink?: boolean;\n  TitleComponent?: React.ComponentType<{}>;\n  ExpandedComponent?: React.ComponentType<{}>;\n  basePath?: string;\n};\n\ntype ResourceTitleComponentComponent = {\n  kind: K8sKind;\n  namespace: string;\n  basePath?: string;\n};\n","// extracted by mini-css-extract-plugin","export enum InventoryStatusGroup {\n  WARN = 'WARN',\n  ERROR = 'ERROR',\n  PROGRESS = 'PROGRESS',\n  NOT_MAPPED = 'NOT_MAPPED',\n  UNKNOWN = 'UNKNOWN',\n}\n","import { podPhaseFilterReducer } from '@console/internal/module/k8s';\nimport { nodeStatus } from '@console/app/src/status/node';\nimport { StatusGroupMapper } from './InventoryItem';\nimport { InventoryStatusGroup } from './status-group';\n\nconst POD_PHASE_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Running', 'Succeeded'],\n  [InventoryStatusGroup.ERROR]: ['CrashLoopBackOff', 'Failed'],\n  [InventoryStatusGroup.PROGRESS]: ['Terminating', 'Pending'],\n  [InventoryStatusGroup.WARN]: ['Unknown'],\n};\n\nconst PVC_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Bound'],\n  [InventoryStatusGroup.ERROR]: ['Lost'],\n  [InventoryStatusGroup.PROGRESS]: ['Pending'],\n};\n\nconst PV_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Available', 'Bound'],\n  [InventoryStatusGroup.PROGRESS]: ['Released'],\n  [InventoryStatusGroup.ERROR]: ['Failed'],\n};\n\nconst NODE_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Ready'],\n  [InventoryStatusGroup.PROGRESS]: ['Not Ready'],\n};\n\nexport const getStatusGroups = (resources, mapping, mapper, filterType) => {\n  const groups = {\n    [InventoryStatusGroup.UNKNOWN]: {\n      statusIDs: [],\n      count: 0,\n    },\n  };\n  Object.keys(mapping).forEach((key) => {\n    groups[key] = {\n      statusIDs: [...mapping[key]],\n      count: 0,\n      filterType,\n    };\n  });\n\n  resources.forEach((resource) => {\n    const status = mapper(resource);\n    const group =\n      Object.keys(mapping).find((key) => mapping[key].includes(status)) ||\n      InventoryStatusGroup.UNKNOWN;\n    groups[group].count++;\n  });\n\n  return groups;\n};\n\nexport const getPodStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, POD_PHASE_GROUP_MAPPING, podPhaseFilterReducer, 'pod-status');\nexport const getNodeStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, NODE_STATUS_GROUP_MAPPING, nodeStatus, 'node-status');\nexport const getPVCStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, PVC_STATUS_GROUP_MAPPING, (pvc) => pvc.status.phase, 'pvc-status');\nexport const getPVStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, PV_STATUS_GROUP_MAPPING, (pv) => pv.status.phase, 'pv-status');\n","import * as React from 'react';\n\nimport './launcher-card.scss';\n\nconst LauncherBody: React.FC = ({ children }) => (\n  <div className=\"co-dashboard-card__body--top-margin co-launcher-card__body\">{children}</div>\n);\n\nexport default LauncherBody;\n","import * as React from 'react';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { ExternalLink } from '@console/internal/components/utils/link';\n\nconst LauncherItem: React.FC<LauncherItemProps> = ({ consoleLink }) => (\n  <ExternalLink\n    additionalClassName=\"co-launcher-card__item\"\n    href={consoleLink.spec.href}\n    text={consoleLink.spec.text}\n  />\n);\n\nexport default LauncherItem;\n\ntype LauncherItemProps = {\n  consoleLink: K8sResourceKind;\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\n\nimport './resource-quota-card.scss';\n\nconst ResourceQuotaBody: React.FC<ResourceQuotaBodyProps> = ({ error, isLoading, children }) => {\n  let body: React.ReactNode;\n  if (error) {\n    body = <div className=\"text-secondary\">Not available</div>;\n  } else if (isLoading) {\n    body = <div className=\"skeleton-quota\" />;\n  } else if (!React.Children.count(children)) {\n    body = <div className=\"text-secondary\">No resource quotas</div>;\n  }\n\n  return <div className=\"co-dashboard-card__body--top-margin\">{body || children}</div>;\n};\n\nexport default ResourceQuotaBody;\n\ntype ResourceQuotaBodyProps = {\n  error: boolean;\n  isLoading: boolean;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  getQuotaResourceTypes,\n  QuotaScopesInline,\n  QuotaGaugeCharts,\n} from '@console/internal/components/resource-quota';\nimport { ResourceLink } from '@console/internal/components/utils/resource-link';\nimport { ResourceQuotaModel } from '@console/internal/models';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\n\nimport './resource-quota-card.scss';\n\nconst ResourceQuotaItem: React.FC<ResourceQuotaItemProps> = ({ resourceQuota }) => {\n  const resourceTypes = getQuotaResourceTypes(resourceQuota);\n  const scopes = _.get(resourceQuota, 'spec.scopes');\n  return (\n    <>\n      <div>\n        <ResourceLink\n          kind={ResourceQuotaModel.kind}\n          name={resourceQuota.metadata.name}\n          className=\"co-resource-item--truncate co-resource-quota-card__item-title\"\n          namespace={resourceQuota.metadata.namespace}\n          inline=\"true\"\n          title={resourceQuota.metadata.name}\n        />\n        {scopes && (\n          <QuotaScopesInline className=\"co-resource-quota-dashboard-scopes\" scopes={scopes} />\n        )}\n      </div>\n      <QuotaGaugeCharts\n        quota={resourceQuota}\n        resourceTypes={resourceTypes}\n        chartClassName=\"co-resource-quota-card__chart\"\n      />\n    </>\n  );\n};\n\nexport default ResourceQuotaItem;\n\ntype ResourceQuotaItemProps = {\n  resourceQuota: K8sResourceKind;\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport './status-card.scss';\n\nconst HealthBody: React.FC = ({ children }) => (\n  <div className=\"co-dashboard-card__body--top-margin co-status-card__health-body\">{children}</div>\n);\n\nexport default HealthBody;\n","import * as React from 'react';\n\nimport './status-popup.scss';\n\nexport const StatusPopupSection: React.FC<StatusPopupSectionProps> = ({\n  firstColumn,\n  secondColumn,\n  children,\n}) => (\n  <>\n    <div className=\"co-status-popup__row co-status-popup__section\">\n      <div className=\"co-status-popup__text--bold\">{firstColumn}</div>\n      {secondColumn && <div className=\"text-secondary\">{secondColumn}</div>}\n    </div>\n    {children}\n  </>\n);\n\nconst Status: React.FC<StatusProps> = ({ value, icon, children }) => (\n  <div className=\"co-status-popup__row\">\n    {children}\n    {!!value && (\n      <div className=\"co-status-popup__status\">\n        <div className=\"text-secondary\">{value}</div>\n        <div className=\"co-status-popup__icon\">{icon}</div>\n      </div>\n    )}\n  </div>\n);\n\ntype StatusProps = {\n  children: React.ReactNode;\n  value?: string;\n  icon?: React.ReactNode;\n};\n\ntype StatusPopupSectionProps = {\n  firstColumn: string;\n  secondColumn?: string;\n};\n\nexport default Status;\n","import {\n  Alert,\n  getAlerts as getPrometheusAlerts,\n  PrometheusRulesResponse,\n} from '@console/internal/components/monitoring';\n\nexport const getAlertSeverity = (alert: Alert) =>\n  alert && alert.labels ? alert.labels.severity : null;\nexport const getAlertMessage = (alert: Alert) =>\n  alert && alert.annotations ? alert.annotations.message : null;\nexport const getAlertDescription = (alert: Alert) =>\n  alert && alert.annotations ? alert.annotations.description : null;\nexport const getAlertTime = (alert: Alert) => (alert ? alert.activeAt : null);\nexport const getAlertName = (alert: Alert) =>\n  alert && alert.labels ? alert.labels.alertname : null;\n\nexport const getAlerts = (alertsResults: PrometheusRulesResponse): Alert[] =>\n  alertsResults\n    ? getPrometheusAlerts(alertsResults.data)\n        .filter((a) => a.state === 'firing' && getAlertName(a) !== 'Watchdog')\n        .sort((a, b) => +new Date(getAlertTime(b)) - +new Date(getAlertTime(a)))\n    : [];\n","import * as _ from 'lodash';\nimport { K8sResourceCommon } from '@console/internal/module/k8s';\nimport {\n  OperatorStatusWithResources,\n  OperatorHealth,\n  GetOperatorStatusPriority,\n} from '@console/plugin-sdk';\nimport { healthPriority, HealthState } from './states';\n\nexport const getMostImportantStatuses = (\n  operatorStatuses: OperatorStatusWithResources[],\n): OperatorStatusWithResources[] => {\n  const mostImportantStatus = Math.max(...operatorStatuses.map(({ status }) => status.priority));\n  return operatorStatuses.filter(({ status }) => status.priority === mostImportantStatus);\n};\n\nexport const getOperatorsStatus = <R extends K8sResourceCommon>(\n  operators: R[],\n  getOperatorStatus: GetOperatorStatusPriority<R>,\n): OperatorStatusWithResources<R> => {\n  if (!operators.length) {\n    return {\n      status: {\n        ...healthPriority[HealthState.OK],\n        title: 'Available',\n      },\n      operators: [],\n    };\n  }\n  const operatorsByStatus: { [key: string]: OperatorStatusWithResources<R> } = operators.reduce(\n    (acc, o) => {\n      const status = getOperatorStatus(o);\n      if (!acc[status.health]) {\n        acc[status.health] = {\n          status: {\n            ...status,\n          },\n          operators: [o],\n        };\n      } else {\n        acc[status.health].operators.push(o);\n      }\n      return acc;\n    },\n    {},\n  );\n\n  const mostImportantStatus = Object.keys(operatorsByStatus).sort(\n    (a, b) => operatorsByStatus[b].status.priority - operatorsByStatus[a].status.priority,\n  )[0];\n\n  return operatorsByStatus[mostImportantStatus];\n};\n\nexport const getOperatorsHealthState = (\n  healthStatuses: OperatorHealth[],\n): { health: HealthState; detailMessage: string } => {\n  if (healthStatuses.some((s) => s.health === HealthState.NOT_AVAILABLE)) {\n    return { health: HealthState.NOT_AVAILABLE, detailMessage: undefined };\n  }\n  if (healthStatuses.some((s) => HealthState.LOADING === s.health)) {\n    return { health: HealthState.LOADING, detailMessage: undefined };\n  }\n  const sortedStatuses = healthStatuses.sort(\n    (a, b) => healthPriority[b.health].priority - healthPriority[a.health].priority,\n  );\n  const groupedStatuses = _.groupBy(sortedStatuses, (s) => s.health);\n  const statusKeys = Object.keys(groupedStatuses);\n  let finalCount = 0;\n  groupedStatuses[statusKeys[0]].forEach((g) => {\n    if (!_.isNil(g.count)) {\n      finalCount += g.count;\n    }\n  });\n  // warning and error statuses are counted together as degraded\n  if (\n    statusKeys.length > 1 &&\n    statusKeys[0] === HealthState.ERROR &&\n    statusKeys[1] === HealthState.WARNING\n  ) {\n    groupedStatuses[statusKeys[1]].forEach((g) => {\n      if (!_.isNil(g.count)) {\n        finalCount += g.count;\n      }\n    });\n  }\n\n  return {\n    health: HealthState[statusKeys[0]],\n    detailMessage: healthPriority[statusKeys[0]].message\n      ? `${finalCount} ${healthPriority[statusKeys[0]].message.toLowerCase()}`\n      : undefined,\n  };\n};\n","import * as React from 'react';\nimport {\n  GreenCheckCircleIcon,\n  RedExclamationCircleIcon,\n  YellowExclamationTriangleIcon,\n  BlueSyncIcon,\n  GrayUnknownIcon,\n} from '@console/shared/src/components/status/icons';\nimport { InProgressIcon } from '@patternfly/react-icons';\n\nexport enum HealthState {\n  OK = 'OK',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  LOADING = 'LOADING',\n  UNKNOWN = 'UNKNOWN',\n  UPDATING = 'UPDATING',\n  PROGRESS = 'PROGRESS',\n  NOT_AVAILABLE = 'NOT_AVAILABLE',\n}\n\nexport const healthStateMapping: { [key in HealthStateMappingKeys]: HealthStateMappingValues } = {\n  [HealthState.OK]: {\n    icon: <GreenCheckCircleIcon />,\n  },\n  [HealthState.ERROR]: {\n    icon: <RedExclamationCircleIcon />,\n    message: 'Degraded',\n  },\n  [HealthState.WARNING]: {\n    icon: <YellowExclamationTriangleIcon />,\n    message: 'Degraded',\n  },\n  [HealthState.UPDATING]: {\n    icon: <BlueSyncIcon />,\n    message: 'Updating',\n  },\n  [HealthState.PROGRESS]: {\n    icon: <InProgressIcon />,\n    message: 'Pending',\n  },\n  [HealthState.UNKNOWN]: {\n    icon: <GrayUnknownIcon />,\n    message: 'Unknown',\n  },\n  [HealthState.NOT_AVAILABLE]: {\n    icon: <GrayUnknownIcon />,\n    message: 'Not available',\n  },\n};\n\nexport const healthPriority: {\n  [key in HealthStateMappingKeys]: PriorityHealthState;\n} = {\n  [HealthState.OK]: {\n    priority: 0,\n    health: HealthState.OK,\n    ...healthStateMapping[HealthState.OK],\n  },\n  [HealthState.UNKNOWN]: {\n    priority: 1,\n    health: HealthState.UNKNOWN,\n    ...healthStateMapping[HealthState.UNKNOWN],\n  },\n  [HealthState.PROGRESS]: {\n    priority: 2,\n    health: HealthState.PROGRESS,\n    ...healthStateMapping[HealthState.PROGRESS],\n  },\n  [HealthState.UPDATING]: {\n    priority: 3,\n    health: HealthState.UPDATING,\n    ...healthStateMapping[HealthState.UPDATING],\n  },\n  [HealthState.WARNING]: {\n    priority: 4,\n    health: HealthState.WARNING,\n    ...healthStateMapping[HealthState.WARNING],\n  },\n  [HealthState.ERROR]: {\n    priority: 5,\n    health: HealthState.ERROR,\n    ...healthStateMapping[HealthState.ERROR],\n  },\n  [HealthState.NOT_AVAILABLE]: {\n    priority: 6,\n    health: HealthState.NOT_AVAILABLE,\n    ...healthStateMapping[HealthState.NOT_AVAILABLE],\n  },\n};\n\nexport type PriorityHealthState = {\n  priority: number;\n  health: HealthState;\n} & HealthStateMappingValues;\n\ntype HealthStateMappingKeys = Exclude<keyof typeof HealthState, 'LOADING'>;\n\nexport type HealthStateMappingValues = {\n  icon: React.ReactNode;\n  message?: string;\n};\n","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { Link } from 'react-router-dom';\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore: FIXME missing exports due to out-of-sync @types/react-redux version\nimport { useSelector } from 'react-redux';\nimport { DataPoint } from '@console/internal/components/graphs';\nimport { Humanize, resourcePathFromModel } from '@console/internal/components/utils';\nimport { Dropdown } from '@console/internal/components/utils/dropdown';\nimport { K8sKind, referenceForModel, K8sResourceCommon } from '@console/internal/module/k8s';\nimport {\n  withDashboardResources,\n  DashboardItemProps,\n} from '@console/internal/components/dashboard/with-dashboard-resources';\nimport { getInstantVectorStats } from '@console/internal/components/graphs/utils';\nimport { getPrometheusQueryResponse } from '@console/internal/actions/dashboards';\nimport { PopoverPosition } from '@patternfly/react-core';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { getName, getNamespace } from '../../..';\nimport { DashboardCardPopupLink } from '../dashboard-card/DashboardCardLink';\nimport { RedExclamationCircleIcon, YellowExclamationTriangleIcon } from '../../status';\nimport Status from '../status-card/StatusPopup';\nimport { LIMIT_STATE } from './UtilizationItem';\n\nimport './top-consumer-popover.scss';\n\nconst ConsumerPopover: React.FC<ConsumerPopoverProps> = React.memo(\n  ({ current, title, humanize, consumers, namespace, position, description, children }) => {\n    const [isOpen, setOpen] = React.useState(false);\n    return (\n      <DashboardCardPopupLink\n        popupTitle={`${title} breakdown`}\n        linkTitle={current}\n        onHide={React.useCallback(() => setOpen(false), [])}\n        onShow={React.useCallback(() => setOpen(true), [])}\n        position={position}\n      >\n        <PopoverBody\n          humanize={humanize}\n          consumers={consumers}\n          namespace={namespace}\n          isOpen={isOpen}\n          description={description}\n        >\n          {children}\n        </PopoverBody>\n      </DashboardCardPopupLink>\n    );\n  },\n);\n\nexport default ConsumerPopover;\n\nconst getLimitIcon = (state: LIMIT_STATE): React.ReactNode => {\n  switch (state) {\n    case LIMIT_STATE.ERROR:\n      return <RedExclamationCircleIcon />;\n    case LIMIT_STATE.WARN:\n      return <YellowExclamationTriangleIcon />;\n    default:\n      return null;\n  }\n};\n\nconst getResourceToWatch = (model: K8sKind, namespace: string, fieldSelector: string) => ({\n  isList: true,\n  kind: model.crd ? referenceForModel(model) : model.kind,\n  fieldSelector,\n  namespace,\n});\n\nexport const LimitsBody: React.FC<LimitsBodyProps> = ({\n  limitState,\n  requestedState,\n  total,\n  limit,\n  current,\n  available,\n  requested,\n}) =>\n  ((!!limitState && limitState !== LIMIT_STATE.OK) ||\n    (!!requestedState && requestedState !== LIMIT_STATE.OK)) && (\n    <ul className=\"co-utilization-card-popover__consumer-list\">\n      <Status value={total}>Total capacity</Status>\n      <Status value={limit} icon={getLimitIcon(limitState)}>\n        Total limit\n      </Status>\n      <Status value={current}>Current utilization</Status>\n      <Status value={available}>Current available capacity</Status>\n      <Status value={requested} icon={getLimitIcon(requestedState)}>\n        Total requested\n      </Status>\n    </ul>\n  );\n\nexport const PopoverBody = withDashboardResources<DashboardItemProps & PopoverBodyProps>(\n  React.memo(\n    ({\n      humanize,\n      consumers,\n      namespace,\n      watchPrometheus,\n      stopWatchPrometheusQuery,\n      prometheusResults,\n      isOpen,\n      description,\n      children,\n    }) => {\n      const [currentConsumer, setCurrentConsumer] = React.useState(consumers[0]);\n      // const canAccessMonitoring = useSelector<RootState, boolean>(\n      //   (state) =>\n      //     !!state[featureReducerName].get(FLAGS.CAN_GET_NS) &&\n      //     !!window.SERVER_FLAGS.prometheusBaseURL,\n      // );\n      const { query, model, metric, fieldSelector } = currentConsumer;\n      const k8sResource = React.useMemo(\n        () => (isOpen ? getResourceToWatch(model, namespace, fieldSelector) : null),\n        [fieldSelector, isOpen, model, namespace],\n      );\n      const [consumerData, consumerLoaded, consumersLoadError] = useK8sWatchResource<\n        K8sResourceCommon[]\n      >(k8sResource);\n      React.useEffect(() => {\n        if (!isOpen) {\n          return () => {};\n        }\n        watchPrometheus(query, namespace);\n        return () => {\n          stopWatchPrometheusQuery(query);\n        };\n      }, [query, stopWatchPrometheusQuery, watchPrometheus, namespace, isOpen]);\n\n      const top5Data = [];\n\n      const [data, error] = getPrometheusQueryResponse(prometheusResults, query);\n      const bodyData = getInstantVectorStats(data, metric);\n\n      if (consumerLoaded && !consumersLoadError) {\n        for (const d of bodyData) {\n          const consumerExists = consumerData.some(\n            (consumer) =>\n              getName(consumer) === d.metric[metric] &&\n              (model.namespaced ? getNamespace(consumer) === d.metric.namespace : true),\n          );\n          if (consumerExists) {\n            top5Data.push({ ...d, y: humanize(d.y).string });\n          }\n          if (top5Data.length === 5) {\n            break;\n          }\n        }\n      }\n\n      const monitoringParams = React.useMemo(() => {\n        const params = new URLSearchParams();\n        params.set('query0', currentConsumer.query);\n        return params;\n      }, [currentConsumer.query]);\n\n      const dropdownItems = React.useMemo(\n        () =>\n          consumers.reduce((items, curr) => {\n            items[referenceForModel(curr.model)] = `By ${curr.model.label}`;\n            return items;\n          }, {}),\n        [consumers],\n      );\n\n      const onDropdownChange = React.useCallback(\n        (key) => setCurrentConsumer(consumers.find((c) => referenceForModel(c.model) === key)),\n        [consumers],\n      );\n\n      const monitoringURL = `/monitoring/query-browser?${monitoringParams.toString()}`;\n\n      let body: React.ReactNode;\n      if (error || consumersLoadError) {\n        body = <div className=\"text-secondary\">Not available</div>;\n      } else if (!consumerLoaded || !data) {\n        body = (\n          <ul className=\"co-utilization-card-popover__consumer-list\">\n            <li className=\"skeleton-consumer\" />\n            <li className=\"skeleton-consumer\" />\n            <li className=\"skeleton-consumer\" />\n            <li className=\"skeleton-consumer\" />\n            <li className=\"skeleton-consumer\" />\n          </ul>\n        );\n      } else {\n        body = (\n          <>\n            <ul\n              className=\"co-utilization-card-popover__consumer-list\"\n              aria-label={`Top consumer by ${model.label}`}\n            >\n              {top5Data &&\n                top5Data.map((item) => {\n                  const title = String(item.x);\n                  return (\n                    <ListItem key={title} value={item.y}>\n                      <Link\n                        className=\"co-utilization-card-popover__consumer-name\"\n                        to={resourcePathFromModel(model, title, item.metric.namespace)}\n                      >\n                        {title}\n                      </Link>\n                    </ListItem>\n                  );\n                })}\n            </ul>\n            <Link to={monitoringURL}>View more</Link>\n          </>\n        );\n      }\n\n      return (\n        <div className=\"co-utilization-card-popover__body\">\n          {description && (\n            <div className=\"co-utilization-card-popover__description\">{description}</div>\n          )}\n          {children}\n          <div className=\"co-utilization-card-popover__title\">\n            {consumers.length === 1\n              ? `Top ${currentConsumer.model.label.toLowerCase()} consumers`\n              : 'Top consumers'}\n          </div>\n          {consumers.length > 1 && (\n            <Dropdown\n              className=\"co-utilization-card-popover__dropdown\"\n              id=\"consumer-select\"\n              name=\"selectConsumerType\"\n              aria-label=\"Select consumer type\"\n              items={dropdownItems}\n              onChange={onDropdownChange}\n              selectedKey={referenceForModel(model)}\n            />\n          )}\n          {body}\n        </div>\n      );\n    },\n  ),\n);\n\nconst ListItem: React.FC<ListItemProps> = ({ children, value }) => (\n  <li className=\"co-utilization-card-popover__consumer-item\">\n    {children}\n    <div className=\"co-utilization-card-popover__consumer-value\">{value}</div>\n  </li>\n);\n\ntype ListItemProps = {\n  value: React.ReactText;\n};\n\ntype LimitsBodyProps = {\n  limitState?: LIMIT_STATE;\n  requestedState?: LIMIT_STATE;\n  limit?: string;\n  requested?: string;\n  available?: string;\n  total?: string;\n  current: string;\n};\n\ntype PopoverProps = {\n  humanize: Humanize;\n  consumers: { model: K8sKind; query: string; metric: string; fieldSelector?: string }[];\n  namespace?: string;\n  description?: React.ReactText;\n};\n\ntype PopoverBodyProps = PopoverProps & {\n  topConsumers?: DataPoint[][];\n  error?: boolean;\n  isOpen: boolean;\n};\n\nexport type ConsumerPopoverProps = PopoverProps & {\n  position?: PopoverPosition;\n  title: string;\n  current: string;\n};\n","import * as React from 'react';\nimport { ChartAxis } from '@patternfly/react-charts';\nimport { Grid } from '@patternfly/react-core';\nimport { useRefWidth } from '@console/internal/components/utils/ref-width-hook';\n\nimport './utilization-card.scss';\nimport { useTranslation } from 'react-i18next';\n\nconst formatDate = (date: Date): string => {\n  const minutes = `0${date.getMinutes()}`.slice(-2);\n  return `${date.getHours()}:${minutes}`;\n};\n\nconst UtilizationAxis: React.FC<UtilizationAxisProps> = ({ timestamps = [] }) => {\n  const [containerRef, width] = useRefWidth();\n  return (\n    <div ref={containerRef}>\n      {!!timestamps.length && (\n        <ChartAxis\n          scale={{ x: 'time' }}\n          domain={{ x: [timestamps[0], timestamps[timestamps.length - 1]] }}\n          tickFormat={formatDate}\n          orientation=\"top\"\n          height={15}\n          width={width}\n          padding={{ top: 30, bottom: 0, left: 70, right: 0 }}\n          style={{\n            axis: { visibility: 'hidden' },\n          }}\n          fixLabelOverlap\n        />\n      )}\n    </div>\n  );\n};\n\nexport const UtilizationBody: React.FC<UtilizationBodyProps> = ({ timestamps, children }) => {\n  const { t } = useTranslation();\n  const axis = (\n    <div className=\"co-utilization-card__item\">\n      <div className=\"co-utilization-card__item-section co-u-hidden co-u-visible-on-xl\">\n        <span className=\"co-utilization-card__item-text\">{t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_RESOURCE_1')}</span>\n        <span className=\"co-utilization-card__item-text\">{t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_USAGE_1')}</span>\n      </div>\n      <div className=\"co-utilization-card__item-chart co-utilization-card__item-chart--times\">\n        <UtilizationAxis timestamps={timestamps} />\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"co-utilization-card__body\">\n      <Grid>\n        {axis}\n        {children}\n      </Grid>\n    </div>\n  );\n};\n\nexport default UtilizationBody;\n\ntype UtilizationBodyProps = {\n  children: React.ReactNode;\n  timestamps: Date[];\n};\n\ntype UtilizationAxisProps = {\n  timestamps: Date[];\n};\n","import * as React from 'react';\nimport { chart_color_orange_300 as limitColor } from '@patternfly/react-tokens';\nimport { Humanize } from '@console/internal/components/utils/types';\nimport { AreaChart, AreaChartStatus, chartStatusColors } from '@console/internal/components/graphs/area';\nimport { DataPoint } from '@console/internal/components/graphs';\nimport { ByteDataTypes } from 'packages/console-shared/src/graph-helper/data-utils';\nimport { YellowExclamationTriangleIcon, RedExclamationCircleIcon, ColoredIconProps } from '../../status';\nimport { useTranslation } from 'react-i18next';\n\nexport enum LIMIT_STATE {\n  ERROR = 'ERROR',\n  WARN = 'WARN',\n  OK = 'OK',\n}\n\nconst getCurrentData = (humanizeValue: Humanize, description: string, data?: DataPoint[], dataUnits?: string): string => {\n  let current: string;\n  if (data && data.length > 0) {\n    const latestData = data[data.length - 1];\n    current = humanizeValue(latestData.y).string;\n    if (dataUnits) {\n      current += ` ${dataUnits}`;\n    }\n    current += ` ${description.toLowerCase()}`;\n  }\n\n  return current;\n};\n\nexport const MultilineUtilizationItem: React.FC<MultilineUtilizationItemProps> = React.memo(({ title, data, dataUnits, humanizeValue, isLoading = false, queries, error, TopConsumerPopovers, byteDataType }) => {\n  const current = data.map((datum, index) => getCurrentData(humanizeValue, queries[index].desc, datum, dataUnits && dataUnits[index]));\n  const chart = <AreaChart data={error ? [[]] : data} loading={!error && isLoading} query={queries[0].query} xAxis={false} humanize={humanizeValue} padding={{ top: 13, left: 70, bottom: 0, right: 0 }} height={70} byteDataType={byteDataType} />;\n  const { t } = useTranslation();\n  const currentValue = current.map((curr, index) => {\n    const TopConsumerPopover = TopConsumerPopovers && TopConsumerPopovers[index];\n    return TopConsumerPopover ? <TopConsumerPopover key={queries[index].desc} current={curr} /> : <div key={queries[index].desc}>{curr}</div>;\n  });\n\n  return (\n    <div className=\"co-utilization-card__item\" data-test-id=\"utilization-item\">\n      <div className=\"co-utilization-card__item-description\">\n        <div className=\"co-utilization-card__item-section-multiline\">\n          <h4 className=\"pf-c-title pf-m-md\">{title}</h4>\n          {error || (!isLoading && !data.every(datum => datum.length)) ? <div className=\"text-secondary\">{t('SINGLE:MSG_OVERVIEW_MAIN_CARDSTATUS_1')}</div> : <div className=\"co-utilization-card__item-description\">{currentValue}</div>}\n        </div>\n      </div>\n      <div className=\"co-utilization-card__item-chart\">{chart}</div>\n    </div>\n  );\n});\n\nexport const UtilizationItem: React.FC<UtilizationItemProps> = React.memo(({ title, data, humanizeValue, isLoading = false, query, error, max = null, TopConsumerPopover, byteDataType, limit = null, requested = null, setLimitReqState }) => {\n  let current: string;\n  if (data.length) {\n    const latestData = data[data.length - 1];\n    current = humanizeValue(latestData.y).string;\n  }\n  const {t} = useTranslation();\n\n  let humanMax: string;\n  const chartStyle = [null, null, null];\n\n  let humanAvailable: string;\n  if (current && max) {\n    humanMax = humanizeValue(max).string;\n    const percentage = (100 * data[data.length - 1].y) / max;\n\n    if (percentage >= 90) {\n      chartStyle[0] = { data: { fill: chartStatusColors[AreaChartStatus.ERROR] } };\n    } else if (percentage >= 80) {\n      chartStyle[0] = { data: { fill: chartStatusColors[AreaChartStatus.WARNING] } };\n    }\n\n    humanAvailable = humanizeValue(max - data[data.length - 1].y).string;\n  }\n\n  const chartData = error ? [[]] : [data];\n  if (!error && limit) {\n    chartData.push(limit);\n    chartStyle[1] = { data: { strokeDasharray: '3,3', fillOpacity: 0 } };\n  }\n  if (!error && requested) {\n    chartData.push(requested);\n    chartStyle[2] = {\n      data: {\n        stroke: limitColor.value,\n        strokeDasharray: '3,3',\n        fillOpacity: 0,\n      },\n    };\n  }\n\n  const chart = <AreaChart data={chartData} loading={!error && isLoading} query={query} xAxis={false} humanize={humanizeValue} padding={{ top: 13, left: 70, bottom: 0, right: 0 }} height={70} chartStyle={chartStyle} byteDataType={byteDataType} />;\n\n  let LimitIcon: React.ComponentType<ColoredIconProps>;\n  let humanLimit: string;\n  let limitState = LIMIT_STATE.OK;\n  let requestedState = LIMIT_STATE.OK;\n\n  if (max) {\n    if (limit && limit.length && requested && requested.length) {\n      humanLimit = humanizeValue(limit[limit.length - 1].y).string;\n      const limitPercentage = (100 * limit[limit.length - 1].y) / max;\n      const reqPercentage = (100 * requested[requested.length - 1].y) / max;\n      if (limitPercentage > 100) {\n        limitState = LIMIT_STATE.ERROR;\n      } else if (limitPercentage >= 75) {\n        limitState = LIMIT_STATE.WARN;\n      }\n      if (reqPercentage > 100) {\n        requestedState = LIMIT_STATE.ERROR;\n      } else if (reqPercentage >= 75) {\n        requestedState = LIMIT_STATE.WARN;\n      }\n      if ([limitState, requestedState].includes(LIMIT_STATE.ERROR)) {\n        LimitIcon = RedExclamationCircleIcon;\n      } else if ([limitState, requestedState].includes(LIMIT_STATE.WARN)) {\n        LimitIcon = YellowExclamationTriangleIcon;\n      }\n      setLimitReqState && setLimitReqState({ limit: limitState, requested: requestedState });\n    }\n  }\n\n  return (\n    <div className=\"co-utilization-card__item\" data-test-id=\"utilization-item\">\n      <div className=\"co-utilization-card__item-description\">\n        <div className=\"co-utilization-card__item-section\">\n          <h4 className=\"pf-c-title pf-m-md\">{title}</h4>\n          {error || (!isLoading && !data.length) ? (\n            <div className=\"text-secondary\">{t('SINGLE:MSG_OVERVIEW_MAIN_CARDSTATUS_1')}</div>\n          ) : (\n            <div>\n              {LimitIcon && <LimitIcon className=\"co-utilization-card__item-icon\" />}\n              {TopConsumerPopover ? <TopConsumerPopover current={current} max={humanMax} limit={limit && limit.length ? humanizeValue(limit[limit.length - 1].y).string : null} requested={requested && requested.length ? humanizeValue(requested[requested.length - 1].y).string : null} available={humanAvailable} total={humanMax} limitState={limitState} requestedState={requestedState} /> : current}\n            </div>\n          )}\n        </div>\n        {!error && (humanAvailable || humanMax) && (\n          <div className=\"co-utilization-card__item-section\">\n            <span className=\"co-utilization-card__item-text\">{humanAvailable && <span>{humanAvailable} available</span>}</span>\n            <span className=\"co-utilization-card__item-text\">\n              {humanLimit && <span>{humanLimit} total limit</span>}\n              {!humanLimit && humanMax && <span>of {humanMax}</span>}\n            </span>\n          </div>\n        )}\n      </div>\n      <div className=\"co-utilization-card__item-chart\">{chart}</div>\n    </div>\n  );\n});\n\nexport default UtilizationItem;\n\nexport type LimitRequested = {\n  limit: LIMIT_STATE;\n  requested: LIMIT_STATE;\n};\n\ntype UtilizationItemProps = {\n  title: string;\n  data?: DataPoint[];\n  limit?: DataPoint[];\n  requested?: DataPoint[];\n  isLoading: boolean;\n  humanizeValue: Humanize;\n  query: string;\n  error: boolean;\n  max?: number;\n  byteDataType?: ByteDataTypes;\n  TopConsumerPopover?: React.ComponentType<TopConsumerPopoverProp>;\n  setLimitReqState?: (state: LimitRequested) => void;\n};\n\ntype MultilineUtilizationItemProps = {\n  title: string;\n  data?: DataPoint[][];\n  dataUnits?: string[];\n  dataDescription?: string[];\n  isLoading: boolean;\n  humanizeValue: Humanize;\n  queries: QueryWithDescription[];\n  error: boolean;\n  byteDataType?: ByteDataTypes;\n  TopConsumerPopovers?: React.ComponentType<TopConsumerPopoverProp>[];\n};\n\nexport type TopConsumerPopoverProp = {\n  current: string;\n  max?: string;\n  limit?: string;\n  available?: string;\n  requested?: string;\n  total?: string;\n  limitState?: LIMIT_STATE;\n  requestedState?: LIMIT_STATE;\n};\n\nexport type QueryWithDescription = {\n  query: string;\n  desc: string;\n};\n","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { DraggableCore, DraggableEvent, DraggableData } from 'react-draggable';\n\nimport './DraggableCoreIFrameFix.scss';\n\nconst DraggableCoreIFrameFix: React.FC<React.ComponentProps<typeof DraggableCore>> = ({\n  onStart,\n  onStop,\n  ...other\n}) => {\n  const onStartFn =\n    // rule is inconsistent with typescript return type\n    // eslint-disable-next-line consistent-return\n    (e: DraggableEvent, data: DraggableData): false | void => {\n      document.body.classList.add('ocs-draggable-core-iframe-fix');\n      if (onStart) {\n        return onStart(e, data);\n      }\n    };\n\n  const onStopFn =\n    // rule is inconsistent with typescript return type\n    // eslint-disable-next-line consistent-return\n    (e: DraggableEvent, data: DraggableData): false | void => {\n      document.body.classList.remove('ocs-draggable-core-iframe-fix');\n      if (onStop) {\n        return onStop(e, data);\n      }\n    };\n\n  return <DraggableCore {...other} onStart={onStartFn} onStop={onStopFn} />;\n};\n\nexport default DraggableCoreIFrameFix;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { DraggableEvent } from 'react-draggable';\nimport DraggableCoreIFrameFix from './DraggableCoreIFrameFix';\nimport './Drawer.scss';\n\ntype DrawerProps = {\n  /**\n   * Controlled height of the drawer.\n   * Should be set when used as controlled component with onChange callback.\n   */\n  height?: number;\n  /**\n   * Default Value: 300\n   * Uncontrolled default height of the drawer.\n   */\n  defaultHeight?: number;\n  /**\n   * Toggles controlled open state.\n   */\n  open?: boolean;\n  /**\n   * Default Value: true\n   * Uncontrolled open state of the drawer on first render.\n   */\n  defaultOpen?: boolean;\n  /**\n   * Maximum height drawer can be resized to.\n   */\n  maxHeight?: number | string;\n  /**\n   * Set whether the drawer is resizable or not.\n   */\n  resizable?: boolean;\n  /**\n   * Content for the Header of drawer\n   */\n  header?: React.ReactNode;\n  /**\n   * This callback is invoked while resizing the drawer.\n   * @param open boolean: false when the drawer reached minimum height (minimized state)\n   * @param height number: Height of the drawer while resizing\n   */\n  onChange?: (open: boolean, height: number) => void;\n};\n\nconst useSize = <T extends HTMLElement>(): [number, (element: T) => void] => {\n  const [height, setHeight] = React.useState<number>(0);\n\n  const callback = React.useCallback((element: T): void => {\n    if (element) {\n      const bb = element.getBoundingClientRect();\n      setHeight(bb.height);\n    }\n  }, []);\n  return [height, callback];\n};\n\n// get the pageX value from a mouse or touch event\nconst getPageY = (e: DraggableEvent): number =>\n  (e as MouseEvent).pageY ?? (e as TouchEvent).touches?.[0]?.pageY;\n\nconst Drawer: React.FC<DrawerProps> = ({\n  children,\n  defaultHeight = 300,\n  height,\n  maxHeight = '100%',\n  open,\n  defaultOpen = true,\n  resizable = false,\n  header,\n  onChange,\n}) => {\n  const drawerRef = React.useRef<HTMLDivElement>();\n  const [heightState, setHeightState] = React.useState(defaultHeight);\n  const [openState, setOpenState] = React.useState(defaultOpen);\n  const lastObservedHeightRef = React.useRef<number>();\n  const startRef = React.useRef<number>();\n  const [minHeight, headerRef] = useSize<HTMLDivElement>();\n  const minimumHeight = minHeight ?? 0;\n\n  // merge controlled and uncontrolled states\n  const currentOpen = open ?? openState;\n  const currentHeight = height ?? heightState;\n\n  const setHeight = (drawerHeight: number, forceOpen?: boolean) => {\n    const newHeight = Math.max(drawerHeight, minimumHeight);\n    const newOpen = forceOpen ?? newHeight > minimumHeight;\n    setHeightState(newHeight);\n    setOpenState(newOpen);\n    if (onChange) {\n      onChange(newOpen, newHeight);\n    }\n  };\n\n  const handleDrag = (e: DraggableEvent) => {\n    setHeight(startRef.current - getPageY(e));\n  };\n\n  const handleResizeStart = (e: DraggableEvent) => {\n    e.preventDefault();\n    lastObservedHeightRef.current = currentHeight;\n    // always start with actual drawer height\n    const drawerHeight = drawerRef.current?.offsetHeight || currentHeight;\n    startRef.current = drawerHeight + getPageY(e);\n    if (drawerHeight !== currentHeight) {\n      setHeight(drawerHeight);\n    }\n  };\n\n  const handleResizeStop = () => {\n    if (currentHeight <= minimumHeight) {\n      setHeight(lastObservedHeightRef.current, false);\n    }\n  };\n\n  const draggable = resizable && (\n    <DraggableCoreIFrameFix\n      onDrag={handleDrag}\n      onStart={handleResizeStart}\n      onStop={handleResizeStop}\n    >\n      <div className=\"ocs-drawer__drag-handle\" />\n    </DraggableCoreIFrameFix>\n  );\n  return (\n    <CSSTransition appear in timeout={225} classNames=\"ocs-drawer\">\n      <div\n        ref={drawerRef}\n        className=\"ocs-drawer\"\n        style={{\n          height: currentOpen ? currentHeight : minimumHeight,\n          maxHeight,\n          minHeight: minimumHeight,\n        }}\n      >\n        {draggable}\n        <div ref={headerRef} className=\"ocs-drawer__header\">\n          {header}\n        </div>\n        <div className=\"ocs-drawer__body\">{children}</div>\n      </div>\n    </CSSTransition>\n  );\n};\n\nexport default Drawer;\n","export { default as Drawer } from './Drawer';\n","import * as _ from 'lodash';\nimport * as React from 'react';\nimport * as fuzzy from 'fuzzysearch';\nimport {\n  Dropdown,\n  FirehoseResult,\n  LoadingInline,\n  ResourceIcon,\n} from '@console/internal/components/utils';\nimport {\n  K8sResourceKind,\n  referenceForModel,\n  K8sKind,\n  modelFor,\n  referenceFor,\n} from '@console/internal/module/k8s';\n\ntype DropdownItemProps = {\n  model: K8sKind;\n  name: string;\n};\n\nconst DropdownItem: React.FC<DropdownItemProps> = ({ model, name }) => (\n  <span className=\"co-resource-item\">\n    <span>\n      <ResourceIcon kind={referenceForModel(model)} />\n    </span>\n    <span className=\"co-truncate show co-nowrap small\">{name}</span>\n  </span>\n);\n\ninterface State {\n  items: {};\n  title: React.ReactNode;\n}\n\nexport interface ResourceDropdownItems {\n  [key: string]: string | React.ReactElement;\n}\n\ninterface ResourceDropdownProps {\n  id?: string;\n  className?: string;\n  dropDownClassName?: string;\n  menuClassName?: string;\n  buttonClassName?: string;\n  title?: React.ReactNode;\n  titlePrefix?: string;\n  allApplicationsKey?: string;\n  storageKey?: string;\n  disabled?: boolean;\n  allSelectorItem?: {\n    allSelectorKey?: string;\n    allSelectorTitle?: string;\n  };\n  actionItems?: {\n    actionTitle: string;\n    actionKey: string;\n  }[];\n  dataSelector: string[] | number[] | symbol[];\n  transformLabel?: Function;\n  loaded?: boolean;\n  loadError?: string;\n  placeholder?: string;\n  resources?: FirehoseResult[];\n  selectedKey: string;\n  autoSelect?: boolean;\n  resourceFilter?: (resource: K8sResourceKind) => boolean;\n  onChange?: (key: string, name?: string | object, isListEmpty?: boolean) => void;\n  onLoad?: (items: ResourceDropdownItems) => void;\n  showBadge?: boolean;\n  autocompleteFilter?: (strText: string, item: object) => boolean;\n  appendItems?: ResourceDropdownItems;\n}\n\nclass ResourceDropdown extends React.Component<ResourceDropdownProps, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: this.props.loaded ? this.getDropdownList(props, false) : {},\n      title: this.props.loaded ? (\n        <span className=\"btn-dropdown__item--placeholder\">{this.props.placeholder}</span>\n      ) : (\n        <LoadingInline />\n      ),\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: ResourceDropdownProps) {\n    const {\n      loaded,\n      loadError,\n      autoSelect,\n      selectedKey,\n      placeholder,\n      onLoad,\n      title,\n      actionItems,\n    } = nextProps;\n\n    if (!loaded) {\n      this.setState({ title: <LoadingInline /> });\n      return;\n    }\n\n    // If autoSelect is true only then have an item pre-selected based on selectedKey.\n    if (!autoSelect && (!this.props.loaded || !selectedKey)) {\n      this.setState({\n        title: <span className=\"btn-dropdown__item--placeholder\">{placeholder}</span>,\n      });\n    }\n\n    if (loadError) {\n      this.setState({\n        title: <span className=\"cos-error-title\">Error Loading - {placeholder}</span>,\n      });\n    }\n\n    const resourceList = this.getDropdownList({ ...this.props, ...nextProps }, true);\n    // set placeholder as title if resourceList is empty no actionItems are there\n    if (loaded && _.isEmpty(resourceList) && !actionItems && placeholder && !title) {\n      this.setState({\n        title: <span className=\"btn-dropdown__item--placeholder\">{placeholder}</span>,\n      });\n    }\n    this.setState({ items: resourceList });\n    if (nextProps.loaded && onLoad) {\n      onLoad(resourceList);\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (_.isEqual(this.state, nextState) && _.isEqual(this.props, nextProps)) {\n      return false;\n    }\n    return true;\n  }\n\n  private getDropdownList = (\n    {\n      loaded,\n      actionItems,\n      autoSelect,\n      selectedKey,\n      resources,\n      resourceFilter,\n      dataSelector,\n      transformLabel,\n      allSelectorItem,\n      showBadge = false,\n      appendItems,\n    }: ResourceDropdownProps,\n    updateSelection: boolean,\n  ) => {\n    const unsortedList = { ...appendItems };\n    _.each(resources, ({ data, kind }) => {\n      _.reduce(\n        data,\n        (acc, resource) => {\n          let dataValue;\n          if (resourceFilter && resourceFilter(resource)) {\n            dataValue = _.get(resource, dataSelector);\n          } else if (!resourceFilter) {\n            dataValue = _.get(resource, dataSelector);\n          }\n          if (dataValue) {\n            if (showBadge) {\n              const model = modelFor(referenceFor(resource)) || (kind && modelFor(kind));\n              acc[dataValue] = model ? (\n                <DropdownItem key={resource.metadata.uid} model={model} name={dataValue} />\n              ) : (\n                dataValue\n              );\n            } else {\n              acc[dataValue] = transformLabel ? transformLabel(resource) : dataValue;\n            }\n          }\n          return acc;\n        },\n        unsortedList,\n      );\n    });\n\n    const sortedList = {};\n\n    if (allSelectorItem && !_.isEmpty(unsortedList)) {\n      sortedList[allSelectorItem.allSelectorKey] = allSelectorItem.allSelectorTitle;\n    }\n\n    _.keys(unsortedList)\n      .sort()\n      .forEach((key) => {\n        sortedList[key] = unsortedList[key];\n      });\n\n    if (updateSelection) {\n      let selectedItem = selectedKey;\n      if (\n        (_.isEmpty(sortedList) || !sortedList[selectedKey]) &&\n        allSelectorItem &&\n        allSelectorItem.allSelectorKey !== selectedKey\n      ) {\n        selectedItem = allSelectorItem.allSelectorKey;\n      } else if (autoSelect && !selectedKey) {\n        selectedItem =\n          loaded && _.isEmpty(sortedList) && actionItems\n            ? actionItems[0].actionKey\n            : _.get(_.keys(sortedList), 0);\n      }\n      selectedItem && this.handleChange(selectedItem, sortedList);\n    }\n    return sortedList;\n  };\n\n  private handleChange = (key, items) => {\n    const name = items[key];\n    const { actionItems, onChange, selectedKey } = this.props;\n    const selectedActionItem = actionItems && actionItems.find((ai) => key === ai.actionKey);\n    const title = selectedActionItem ? selectedActionItem.actionTitle : name;\n    if (title !== this.state.title) {\n      this.setState({ title });\n    }\n    if (key !== selectedKey) {\n      onChange && onChange(key, name, _.isEmpty(items));\n    }\n  };\n\n  private onChange = (key: string) => {\n    this.handleChange(key, this.state.items);\n  };\n\n  render() {\n    return (\n      <Dropdown\n        id={this.props.id}\n        className={this.props.className}\n        dropDownClassName={this.props.dropDownClassName}\n        menuClassName={this.props.menuClassName}\n        buttonClassName={this.props.buttonClassName}\n        titlePrefix={this.props.titlePrefix}\n        autocompleteFilter={this.props.autocompleteFilter || fuzzy}\n        actionItems={this.props.actionItems}\n        items={this.state.items}\n        onChange={this.onChange}\n        selectedKey={this.props.selectedKey}\n        title={this.props.title || this.state.title}\n        autocompletePlaceholder={this.props.placeholder}\n        storageKey={this.props.storageKey}\n        disabled={this.props.disabled}\n      />\n    );\n  }\n}\n\nexport default ResourceDropdown;\n","export { default as ResourceDropdown } from './ResourceDropdown';\n","import * as React from 'react';\n\nconst DefaultFallback: React.FC = () => <div />;\n\nexport class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: {\n        message: '',\n        stack: '',\n        name: '',\n      },\n      errorInfo: {\n        componentStack: '',\n      },\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({\n      hasError: true,\n      error,\n      errorInfo,\n    });\n    // Log the error so something shows up in the JS console when `DefaultFallback` is used.\n    // eslint-disable-next-line no-console\n    console.error(error);\n  }\n\n  render() {\n    const { hasError, error, errorInfo } = this.state;\n    const FallbackComponent = this.props.FallbackComponent || DefaultFallback;\n    return hasError ? (\n      <FallbackComponent\n        title={error.name}\n        componentStack={errorInfo.componentStack}\n        errorMessage={error.message}\n        stack={error.stack}\n      />\n    ) : (\n      <>{this.props.children}</>\n    );\n  }\n}\n\nexport const withFallback: WithFallback = (Component, FallbackComponent) => (props) => (\n  <ErrorBoundary FallbackComponent={FallbackComponent}>\n    <Component {...props} />\n  </ErrorBoundary>\n);\n\nexport type WithFallback = <P = {}>(\n  Component: React.ComponentType<P>,\n  FallbackComponent?: React.ComponentType<any>,\n) => React.ComponentType<P>;\n\nexport type ErrorBoundaryFallbackProps = {\n  errorMessage: string;\n  componentStack: string;\n  stack: string;\n  title: string;\n};\n\nexport type ErrorBoundaryProps = {\n  FallbackComponent?: React.ComponentType<ErrorBoundaryFallbackProps>;\n};\n\nexport type ErrorBoundaryState = {\n  hasError: boolean;\n  error: { message: string; stack: string; name: string };\n  errorInfo: { componentStack: string };\n};\n","import * as React from 'react';\nimport { ActionGroup, Button, ButtonVariant } from '@patternfly/react-core';\nimport { CheckIcon, CloseIcon } from '@patternfly/react-icons';\nimport { ActionGroupWithIconsProps } from './form-utils-types';\n\nconst ActionGroupWithIcons: React.FC<ActionGroupWithIconsProps> = ({\n  onSubmit,\n  onClose,\n  isDisabled,\n}) => {\n  return (\n    <ActionGroup className=\"pf-c-form pf-c-form__actions--right\">\n      <Button\n        type=\"submit\"\n        onClick={onSubmit}\n        variant={ButtonVariant.plain}\n        data-test-id=\"check-icon\"\n        style={{ padding: '0' }}\n        isDisabled={isDisabled}\n      >\n        <CheckIcon />\n      </Button>\n      <Button\n        type=\"button\"\n        data-test-id=\"close-icon\"\n        variant={ButtonVariant.plain}\n        onClick={onClose}\n        style={{ padding: '0' }}\n      >\n        <CloseIcon />\n      </Button>\n    </ActionGroup>\n  );\n};\n\nexport default ActionGroupWithIcons;\n","import * as React from 'react';\nimport { Form, FormProps } from '@patternfly/react-core';\n\ninterface FlexFormProps {\n  children?: React.ReactNode;\n}\n\nconst FlexForm: React.FC<FlexFormProps & FormProps> = ({ children, ...props }) => (\n  <Form {...props} style={{ display: 'flex', flex: 1, flexDirection: 'column' }}>\n    {children}\n  </Form>\n);\n\nexport default FlexForm;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as cx from 'classnames';\nimport { ActionGroup, Alert, Button, ButtonVariant } from '@patternfly/react-core';\nimport { ButtonBar } from '@console/internal/components/utils';\nimport { FormFooterProps } from './form-utils-types';\nimport './FormFooter.scss';\n\nconst FormFooter: React.FC<FormFooterProps> = ({\n  handleSubmit,\n  handleReset,\n  handleCancel,\n  submitLabel = 'Save',\n  resetLabel = 'Reload',\n  cancelLabel = 'Cancel',\n  infoTitle = 'You made changes to this page.',\n  infoMessage = `Click ${submitLabel} to save changes or ${resetLabel} to cancel changes.`,\n  isSubmitting,\n  errorMessage,\n  successMessage,\n  disableSubmit,\n  showAlert,\n  sticky,\n}) => (\n  <ButtonBar\n    className={cx('ocs-form-footer', {\n      'ocs-form-footer__sticky': sticky,\n    })}\n    inProgress={isSubmitting}\n    errorMessage={errorMessage}\n    successMessage={successMessage}\n  >\n    {showAlert && (\n      <Alert isInline className=\"co-alert\" variant=\"info\" title={infoTitle}>\n        {infoMessage}\n      </Alert>\n    )}\n    <ActionGroup className=\"pf-c-form pf-c-form__group--no-top-margin\">\n      <Button\n        type={handleSubmit ? 'button' : 'submit'}\n        {...(handleSubmit && { onClick: handleSubmit })}\n        variant={ButtonVariant.primary}\n        isDisabled={disableSubmit}\n        data-test-id=\"submit-button\"\n      >\n        {submitLabel}\n      </Button>\n      {handleReset && (\n        <Button\n          type=\"button\"\n          data-test-id=\"reset-button\"\n          variant={ButtonVariant.secondary}\n          onClick={handleReset}\n        >\n          {resetLabel}\n        </Button>\n      )}\n      {handleCancel && (\n        <Button\n          type=\"button\"\n          data-test-id=\"cancel-button\"\n          variant={ButtonVariant.secondary}\n          onClick={handleCancel}\n        >\n          {cancelLabel}\n        </Button>\n      )}\n    </ActionGroup>\n  </ButtonBar>\n);\n\nexport default FormFooter;\n","import * as React from 'react';\nimport classnames from 'classnames';\n\ninterface PageBodyProps {\n  children?: React.ReactNode;\n  flexLayout?: boolean;\n}\n\nconst PageBody: React.FC<PageBodyProps> = ({ children, flexLayout }) => (\n  <div\n    className={classnames('co-m-pane__body', { 'co-m-page__body': flexLayout })}\n    style={{ paddingBottom: 0 }}\n  >\n    {children}\n  </div>\n);\n\nexport default PageBody;\n","export { default as FormFooter } from './FormFooter';\nexport { default as PageBody } from './PageBody';\nexport { default as FlexForm } from './FlexForm';\nexport { default as ActionGroupWithIcons } from './ActionGroupWithIcons';\n","import * as React from 'react';\nimport { useField } from 'formik';\nimport { FormGroup, ValidatedOptions } from '@patternfly/react-core';\nimport { BaseInputFieldProps } from './field-types';\nimport { getFieldId } from './field-utils';\n\nconst BaseInputField: React.FC<BaseInputFieldProps & {\n  children: (props) => React.ReactNode;\n}> = ({\n  label,\n  helpText,\n  required,\n  children,\n  name,\n  onChange,\n  helpTextInvalid,\n  validated,\n  ...props\n}) => {\n  const [field, { touched, error }] = useField({ name, type: 'input' });\n  const fieldId = getFieldId(name, 'input');\n  const isValid = !(touched && error);\n  const errorMessage = !isValid ? error : '';\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={label}\n      helperText={helpText}\n      helperTextInvalid={errorMessage || helpTextInvalid}\n      validated={!isValid ? ValidatedOptions.error : validated}\n      isRequired={required}\n    >\n      {children({\n        ...field,\n        ...props,\n        value: field.value || '',\n        id: fieldId,\n        label,\n        validated: !isValid ? ValidatedOptions.error : validated,\n        'aria-describedby': `${fieldId}-helper`,\n        onChange: (value, event) => {\n          field.onChange(event);\n          onChange && onChange(event);\n        },\n      })}\n    </FormGroup>\n  );\n};\n\nexport default BaseInputField;\n","/* eslint-disable no-unused-vars, no-undef */\nimport * as React from 'react';\nimport { Checkbox } from '@patternfly/react-core';\nimport { CheckboxFieldProps } from './field-types';\nimport ToggleableFieldBase from './ToggleableFieldBase';\n\nconst CheckboxField: React.FC<CheckboxFieldProps> = (baseProps) => (\n  <ToggleableFieldBase {...baseProps}>{(props) => <Checkbox {...props} />}</ToggleableFieldBase>\n);\n\nexport default CheckboxField;\n","import * as React from 'react';\nimport cx from 'classnames';\nimport { useField, useFormikContext, FormikValues } from 'formik';\nimport { Dropdown } from '@console/internal/components/utils';\nimport { FormGroup } from '@patternfly/react-core';\nimport { DropdownFieldProps } from './field-types';\nimport { getFieldId } from './field-utils';\nimport { useFormikValidationFix } from '../../hooks';\n\nconst DropdownField: React.FC<DropdownFieldProps> = ({ label, helpText, required, ...props }) => {\n  const [field, { touched, error }] = useField(props.name);\n  const { setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const fieldId = getFieldId(props.name, 'dropdown');\n  const isValid = !(touched && error);\n  const errorMessage = !isValid ? error : '';\n\n  useFormikValidationFix(field.value);\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={label}\n      helperText={helpText}\n      helperTextInvalid={errorMessage}\n      isValid={isValid}\n      isRequired={required}\n    >\n      <Dropdown\n        {...props}\n        id={fieldId}\n        selectedKey={field.value}\n        dropDownClassName={cx({ 'dropdown--full-width': props.fullWidth })}\n        aria-describedby={`${fieldId}-helper`}\n        onChange={(value: string) => {\n          props.onChange && props.onChange(value);\n          setFieldValue(props.name, value);\n          setFieldTouched(props.name, true);\n        }}\n      />\n    </FormGroup>\n  );\n};\n\nexport default DropdownField;\n","import * as React from 'react';\nimport { FormikValues, useField, useFormikContext } from 'formik';\nimport { DroppableFileInput } from '@console/internal/components/utils/file-input';\nimport { FormGroup } from '@patternfly/react-core';\nimport { FieldProps } from './field-types';\nimport { getFieldId } from './field-utils';\n\nconst DroppableFileInputField: React.FC<FieldProps> = ({ name, label, helpText }) => {\n  const [field] = useField(name);\n  const { setFieldValue } = useFormikContext<FormikValues>();\n  const fieldId = getFieldId(name, 'droppable-input');\n  return (\n    <FormGroup fieldId={fieldId}>\n      <DroppableFileInput\n        label={label}\n        onChange={(fileData: string) => setFieldValue(name, fileData)}\n        inputFileData={field.value}\n        inputFieldHelpText={helpText}\n        aria-describedby={`${fieldId}-helper`}\n      />\n    </FormGroup>\n  );\n};\n\nexport default DroppableFileInputField;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { NameValueEditor } from '@console/internal/components/utils/name-value-editor';\nimport { FormGroup } from '@patternfly/react-core';\nimport { SecretModel, ConfigMapModel } from '@console/internal/models';\nimport { k8sGet } from '@console/internal/module/k8s';\nimport { errorModal } from '@console/internal/components/modals';\nimport { EnvironmentFieldProps } from './field-types';\nimport { getFieldId } from './field-utils';\n\nconst EnvironmentField: React.FC<EnvironmentFieldProps> = ({\n  label,\n  helpText,\n  required,\n  envs,\n  ...props\n}) => {\n  const {\n    obj: {\n      metadata: { namespace },\n    },\n  } = props;\n  const { setFieldValue } = useFormikContext<FormikValues>();\n  const fieldId = getFieldId(props.name, 'env-input');\n  const environmentVariables = !_.isEmpty(envs) ? envs.map((env) => _.values(env)) : [['', '']];\n  const [nameValue, setNameValue] = React.useState(environmentVariables);\n  const [configMaps, setConfigMaps] = React.useState({});\n  const [secrets, setSecrets] = React.useState({});\n  const handleNameValuePairs = React.useCallback(\n    ({ nameValuePairs }) => {\n      const updatedNameValuePairs = _.compact(\n        nameValuePairs.map(([name, value]) => {\n          if (_.isObject(value)) {\n            return { name, valueFrom: value };\n          }\n          if (value.length) {\n            return { name, value };\n          }\n          return null;\n        }),\n      );\n      setNameValue(nameValuePairs);\n      setFieldValue(props.name, updatedNameValuePairs);\n    },\n    [props.name, setFieldValue],\n  );\n  React.useEffect(() => {\n    Promise.all([k8sGet(ConfigMapModel, null, namespace), k8sGet(SecretModel, null, namespace)])\n      .then(([nsConfigMaps, nsSecrets]) => {\n        setConfigMaps(nsConfigMaps);\n        setSecrets(nsSecrets);\n      })\n      .catch((err) => {\n        if (err?.response?.status !== 403) {\n          errorModal({ error: err?.message });\n        }\n      });\n  }, [namespace]);\n\n  return (\n    <FormGroup fieldId={fieldId} label={label} helperText={helpText} isRequired={required}>\n      <NameValueEditor\n        nameValuePairs={nameValue}\n        valueString=\"Value\"\n        nameString=\"Name\"\n        addString=\"Add Value\"\n        readOnly={false}\n        allowSorting={false}\n        updateParentData={handleNameValuePairs}\n        configMaps={configMaps}\n        secrets={secrets}\n        addConfigMapSecret\n      />\n    </FormGroup>\n  );\n};\n\nexport default EnvironmentField;\n","import * as React from 'react';\nimport { TextInput, TextInputTypes } from '@patternfly/react-core';\nimport { BaseInputFieldProps } from './field-types';\nimport BaseInputField from './BaseInputField';\n\nconst InputField: React.FC<BaseInputFieldProps> = ({\n  type = TextInputTypes.text,\n  ...baseProps\n}) => (\n  <BaseInputField type={type} {...baseProps}>\n    {(props) => <TextInput {...props} />}\n  </BaseInputField>\n);\n\nexport default InputField;\n","import * as React from 'react';\nimport { InputGroup, TextInput, TextArea } from '@patternfly/react-core';\nimport { GroupInputProps, GroupTextType } from './field-types';\nimport BaseInputField from './BaseInputField';\n\nconst InputGroupField: React.FC<GroupInputProps> = ({\n  beforeInput,\n  afterInput,\n  groupTextType,\n  ...baseProps\n}) => {\n  return (\n    <BaseInputField {...baseProps}>\n      {(props) => {\n        return (\n          <InputGroup>\n            {beforeInput}\n            {groupTextType === GroupTextType.TextArea ? (\n              <TextArea {...props} />\n            ) : (\n              <TextInput {...props} />\n            )}\n            {afterInput}\n          </InputGroup>\n        );\n      }}\n    </BaseInputField>\n  );\n};\n\nexport default InputGroupField;\n","import * as React from 'react';\nimport { useField, useFormikContext, FormikValues } from 'formik';\nimport { NsDropdown } from '@console/internal/components/utils';\nimport { FormGroup } from '@patternfly/react-core';\nimport { DropdownFieldProps } from './field-types';\nimport { getFieldId } from './field-utils';\nimport { useFormikValidationFix } from '../../hooks';\n\nconst NSDropdownField: React.FC<DropdownFieldProps> = ({\n  label,\n  helpText,\n  required,\n  fullWidth,\n  ...props\n}) => {\n  const [field, { touched, error }] = useField(props.name);\n  const { setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const fieldId = getFieldId(props.name, 'ns-dropdown');\n  const isValid = !(touched && error);\n  const errorMessage = !isValid ? error : '';\n\n  useFormikValidationFix(field.value);\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={label}\n      helperText={helpText}\n      helperTextInvalid={errorMessage}\n      isValid={isValid}\n      isRequired={required}\n    >\n      <NsDropdown\n        {...props}\n        id={fieldId}\n        selectedKey={field.value}\n        onChange={(value: string) => {\n          setFieldValue(props.name, value);\n          setFieldTouched(props.name, true);\n        }}\n      />\n    </FormGroup>\n  );\n};\n\nexport default NSDropdownField;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useField, useFormikContext, FormikValues } from 'formik';\nimport { NumberSpinner } from '@console/internal/components/utils';\nimport { FormGroup } from '@patternfly/react-core';\nimport { FieldProps } from './field-types';\nimport { getFieldId } from './field-utils';\nimport { useFormikValidationFix } from '../../hooks';\n\nconst NumberSpinnerField: React.FC<FieldProps> = ({ label, helpText, required, ...props }) => {\n  const [field, { touched, error }] = useField(props.name);\n  const { setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const fieldId = getFieldId(props.name, 'number-spinner');\n  const isValid = !(touched && error);\n  const errorMessage = !isValid ? error : '';\n\n  useFormikValidationFix(field.value);\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={label}\n      helperText={helpText}\n      helperTextInvalid={errorMessage}\n      isValid={isValid}\n      isRequired={required}\n    >\n      <NumberSpinner\n        {...field}\n        {...props}\n        id={fieldId}\n        changeValueBy={(operation: number) => {\n          setFieldValue(props.name, _.toInteger(field.value) + operation);\n          setFieldTouched(props.name, true);\n        }}\n        aria-describedby={`${fieldId}-helper`}\n      />\n    </FormGroup>\n  );\n};\n\nexport default NumberSpinnerField;\n","import * as React from 'react';\nimport { useField, useFormikContext, FormikValues } from 'formik';\nimport { Radio } from '@patternfly/react-core';\nimport { RadioButtonFieldProps } from './field-types';\nimport { getFieldId } from './field-utils';\n\nconst RadioButtonField: React.FC<RadioButtonFieldProps> = ({ name, label, value, ...props }) => {\n  const [field, { touched, error }] = useField(name);\n  const { setFieldValue } = useFormikContext<FormikValues>();\n  const fieldId = getFieldId(`${name}-${value}`, 'radiobutton');\n  const isValid = !(touched && error);\n  return (\n    <Radio\n      {...field}\n      {...props}\n      id={fieldId}\n      value={value}\n      label={label}\n      isChecked={field.value === value}\n      isValid={isValid}\n      isDisabled={props.isDisabled}\n      aria-label={`${fieldId}-${label}`}\n      onChange={() => setFieldValue(name, value)}\n    />\n  );\n};\n\nexport default RadioButtonField;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { useField } from 'formik';\nimport { FormGroup } from '@patternfly/react-core';\nimport { RadioGroupFieldProps } from './field-types';\nimport { getFieldId } from './field-utils';\nimport RadioButtonField from './RadioButtonField';\nimport './RadioGroupField.scss';\n\nconst RadioGroupField: React.FC<RadioGroupFieldProps> = ({\n  label,\n  options,\n  helpText,\n  required,\n  ...props\n}) => {\n  const [field, { touched, error }] = useField(props.name);\n  const fieldId = getFieldId(props.name, 'radiogroup');\n  const isValid = !(touched && error);\n  const errorMessage = !isValid ? error : '';\n  return (\n    <FormGroup\n      className=\"ocs-radio-group-field\"\n      fieldId={fieldId}\n      helperText={helpText}\n      helperTextInvalid={errorMessage}\n      isValid={isValid}\n      isRequired={required}\n      label={label}\n    >\n      {options.map((option) => {\n        const activeChild = field.value === option.value && option.activeChildren;\n        const staticChild = option.children;\n\n        const description = (activeChild || staticChild) && (\n          <div className=\"ocs-radio-group-field__children\">\n            {staticChild}\n            {activeChild}\n          </div>\n        );\n\n        return (\n          <React.Fragment key={option.value}>\n            <RadioButtonField\n              {...field}\n              {...props}\n              value={option.value}\n              label={option.label}\n              isDisabled={option.isDisabled}\n              aria-describedby={`${fieldId}-helper`}\n              description={description}\n            />\n          </React.Fragment>\n        );\n      })}\n    </FormGroup>\n  );\n};\n\nexport default RadioGroupField;\n","import * as React from 'react';\nimport cx from 'classnames';\nimport { useField, useFormikContext, FormikValues } from 'formik';\nimport { FormGroup } from '@patternfly/react-core';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { Firehose, FirehoseResource } from '@console/internal/components/utils';\nimport ResourceDropdown, { ResourceDropdownItems } from '../dropdown/ResourceDropdown';\nimport { DropdownFieldProps } from './field-types';\nimport { getFieldId } from './field-utils';\nimport { useFormikValidationFix } from '../../hooks';\n\nexport interface ResourceDropdownFieldProps extends DropdownFieldProps {\n  dataSelector: string[] | number[] | symbol[];\n  resources: FirehoseResource[];\n  showBadge?: boolean;\n  onLoad?: (items: ResourceDropdownItems) => void;\n  onChange?: (key: string, name?: string | object) => void;\n  resourceFilter?: (resource: K8sResourceKind) => boolean;\n  autoSelect?: boolean;\n  placeholder?: string;\n  actionItems?: {\n    actionTitle: string;\n    actionKey: string;\n  }[];\n  appendItems?: ResourceDropdownItems;\n}\n\nconst ResourceDropdownField: React.FC<ResourceDropdownFieldProps> = ({\n  label,\n  helpText,\n  required,\n  fullWidth,\n  dataSelector,\n  resources,\n  onLoad,\n  resourceFilter,\n  ...props\n}) => {\n  const [field, { touched, error }] = useField(props.name);\n  const { setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const fieldId = getFieldId(props.name, 'ns-dropdown');\n  const isValid = !(touched && error);\n  const errorMessage = !isValid ? error : '';\n\n  useFormikValidationFix(field.value);\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={label}\n      helperText={helpText}\n      helperTextInvalid={errorMessage}\n      isValid={isValid}\n      isRequired={required}\n    >\n      <Firehose resources={resources}>\n        <ResourceDropdown\n          {...props}\n          id={fieldId}\n          dataSelector={dataSelector}\n          selectedKey={field.value}\n          dropDownClassName={cx({ 'dropdown--full-width': fullWidth })}\n          onLoad={onLoad}\n          resourceFilter={resourceFilter}\n          onChange={(value: string, name) => {\n            props.onChange && props.onChange(value, name);\n            setFieldValue(props.name, value);\n            setFieldTouched(props.name, true);\n          }}\n        />\n      </Firehose>\n    </FormGroup>\n  );\n};\n\nexport default ResourceDropdownField;\n","import * as React from 'react';\nimport { useField, useFormikContext, FormikValues } from 'formik';\nimport { RequestSizeInput } from '@console/internal/components/utils';\nimport { FormGroup } from '@patternfly/react-core';\nimport { ResourceLimitFieldProps } from './field-types';\nimport { getFieldId } from './field-utils';\nimport { useFormikValidationFix } from '../../hooks';\n\nconst ResourceLimitField: React.FC<ResourceLimitFieldProps> = ({\n  label,\n  unitName,\n  unitOptions,\n  defaultUnitSize,\n  helpText,\n  ...props\n}) => {\n  const [field, { touched, error }] = useField(props.name);\n  const { setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const fieldId = getFieldId(props.name, 'resource-limit');\n  const isValid = !(touched && error);\n  const errorMessage = !isValid ? error : '';\n\n  useFormikValidationFix(field.value);\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={label}\n      helperText={helpText}\n      helperTextInvalid={errorMessage}\n      isValid={isValid}\n      isRequired={props.required}\n    >\n      <RequestSizeInput\n        {...props}\n        onChange={(val) => {\n          setFieldValue(props.name, val.value);\n          setFieldTouched(props.name, true);\n          setFieldValue(unitName, val.unit);\n        }}\n        dropdownUnits={unitOptions}\n        defaultRequestSizeUnit={defaultUnitSize}\n        defaultRequestSizeValue={field.value}\n        describedBy={`${fieldId}-helper`}\n      />\n    </FormGroup>\n  );\n};\n\nexport default ResourceLimitField;\n","import * as React from 'react';\nimport { Switch } from '@patternfly/react-core';\nimport { CheckboxFieldProps } from './field-types';\nimport ToggleableFieldBase from './ToggleableFieldBase';\n\nconst SwitchField: React.FC<CheckboxFieldProps> = (baseProps) => (\n  <ToggleableFieldBase {...baseProps}>\n    {({ isValid, ...props }) => <Switch {...props} />}\n  </ToggleableFieldBase>\n);\n\nexport default SwitchField;\n","import * as React from 'react';\nimport { useField } from 'formik';\nimport { FormGroup, TextArea } from '@patternfly/react-core';\nimport { TextAreaProps } from './field-types';\nimport { getFieldId } from './field-utils';\n\nconst TextAreaField: React.FC<TextAreaProps> = ({ label, helpText, required, ...props }) => {\n  const [field, { touched, error }] = useField(props.name);\n  const fieldId = getFieldId(props.name, 'input');\n  const isValid = !(touched && error);\n  const errorMessage = !isValid ? error : '';\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={label}\n      helperText={helpText}\n      helperTextInvalid={errorMessage}\n      isValid={isValid}\n      isRequired={required}\n    >\n      <TextArea\n        {...field}\n        {...props}\n        id={fieldId}\n        style={{ resize: 'vertical' }}\n        isValid={isValid}\n        isRequired={required}\n        aria-describedby={`${fieldId}-helper`}\n        onChange={(value, event) => field.onChange(event)}\n      />\n    </FormGroup>\n  );\n};\n\nexport default TextAreaField;\n","import * as React from 'react';\nimport { FieldArray, useField } from 'formik';\nimport {\n  Flex,\n  FlexItem,\n  FlexModifiers,\n  FormGroup,\n  TextInputTypes,\n  Button,\n  ButtonVariant,\n  ButtonType,\n} from '@patternfly/react-core';\nimport { MinusCircleIcon } from '@patternfly/react-icons';\nimport { InputField, useFormikValidationFix } from '@console/shared';\nimport MultiColumnFieldFooter from './multi-column-field/MultiColumnFieldFooter';\nimport { getFieldId } from './field-utils';\nimport { FieldProps } from './field-types';\n\nexport interface TextColumnFieldProps extends FieldProps {\n  required?: boolean;\n  name: string;\n  label: string;\n  addLabel: string;\n  tooltip?: string;\n  placeholder?: string;\n}\n\nconst TextColumnField: React.FC<TextColumnFieldProps> = ({\n  required,\n  name,\n  label,\n  addLabel,\n  helpText,\n  placeholder,\n  isReadOnly,\n  disableDeleteRow,\n}) => {\n  const [field, { touched, error }] = useField<string[]>(name);\n  useFormikValidationFix(field.value);\n  const rowValues = field.value ?? [''];\n  const fieldId = getFieldId(name, 'single-column');\n  const isValid = !(touched && error);\n  return (\n    <FieldArray\n      name={name}\n      render={(arrayHelpers) => {\n        return (\n          <>\n            <FormGroup\n              fieldId={fieldId}\n              label={label}\n              isValid={isValid}\n              isRequired={required}\n              helperText={helpText}\n            >\n              {rowValues.map((v, idx) => {\n                return (\n                  <Flex\n                    key={`${idx.toString()}`}\n                    style={{ marginBottom: 'var(--pf-global--spacer--sm)' }}\n                  >\n                    <FlexItem breakpointMods={[{ modifier: FlexModifiers.grow }]}>\n                      <InputField\n                        type={TextInputTypes.text}\n                        name={`${name}.${idx}`}\n                        placeholder={placeholder}\n                        isReadOnly={isReadOnly}\n                      />\n                    </FlexItem>\n                    {!isReadOnly && (\n                      <FlexItem>\n                        <Button\n                          aria-label=\"Delete\"\n                          variant={ButtonVariant.plain}\n                          type={ButtonType.button}\n                          isInline\n                          isDisabled={disableDeleteRow}\n                          onClick={() => {\n                            arrayHelpers.remove(idx);\n                          }}\n                        >\n                          <MinusCircleIcon />\n                        </Button>\n                      </FlexItem>\n                    )}\n                  </Flex>\n                );\n              })}\n            </FormGroup>\n            {!isReadOnly && (\n              <MultiColumnFieldFooter\n                addLabel={addLabel}\n                onAdd={() => {\n                  arrayHelpers.push('');\n                }}\n              />\n            )}\n          </>\n        );\n      }}\n    />\n  );\n};\n\nexport default TextColumnField;\n","import * as React from 'react';\nimport { useField } from 'formik';\nimport { FormGroup } from '@patternfly/react-core';\nimport { CheckboxFieldProps } from './field-types';\nimport { getFieldId } from './field-utils';\n\ntype ToggleableFieldBaseProps = CheckboxFieldProps & {\n  children: (props) => React.ReactNode;\n};\n\nconst ToggleableFieldBase: React.FC<ToggleableFieldBaseProps> = ({\n  label,\n  formLabel,\n  helpText,\n  required,\n  children,\n  value,\n  name,\n  ...props\n}) => {\n  const [field, { touched, error }] = useField({ value, name, type: 'checkbox' });\n  const fieldId = getFieldId(name, 'checkbox');\n  const isValid = !(touched && error);\n  const errorMessage = !isValid ? error : '';\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={formLabel}\n      helperText={helpText}\n      helperTextInvalid={errorMessage}\n      isValid={isValid}\n      isRequired={required}\n    >\n      {children({\n        ...field,\n        ...props,\n        value: field.value,\n        id: fieldId,\n        label,\n        isChecked: field.checked,\n        isValid,\n        'aria-describedby': `${fieldId}-helper`,\n        onChange: (val, event) => field.onChange(event),\n      })}\n    </FormGroup>\n  );\n};\n\nexport default ToggleableFieldBase;\n","import * as React from 'react';\nimport { FormikValues, useField, useFormikContext } from 'formik';\nimport { AsyncComponent } from '@console/internal/components/utils';\nimport { YAMLEditorFieldProps } from './field-types';\n\nconst YAMLEditorField: React.FC<YAMLEditorFieldProps> = ({ name, onSave }) => {\n  const [field] = useField(name);\n  const { setFieldValue } = useFormikContext<FormikValues>();\n\n  return (\n    <AsyncComponent\n      loader={() => import('../editor/YAMLEditor').then((c) => c.default)}\n      value={field.value}\n      minHeight=\"200px\"\n      onChange={(yaml: string) => setFieldValue(name, yaml)}\n      onSave={onSave}\n      showShortcuts\n    />\n  );\n};\n\nexport default YAMLEditorField;\n","import { ValidatedOptions, TextInputTypes, gridItemSpanValueShape } from '@patternfly/react-core';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\n\nexport interface FieldProps {\n  name: string;\n  label?: React.ReactNode;\n  helpText?: React.ReactNode;\n  helpTextInvalid?: React.ReactNode;\n  required?: boolean;\n  style?: React.CSSProperties;\n  isReadOnly?: boolean;\n  disableDeleteRow?: boolean;\n  disableAddRow?: boolean;\n  className?: string;\n  isDisabled?: boolean;\n  validated?: ValidatedOptions;\n}\n\nexport interface BaseInputFieldProps extends FieldProps {\n  type?: TextInputTypes;\n  placeholder?: string;\n  onChange?: (event) => void;\n  onBlur?: (event) => void;\n}\n\nexport interface GroupInputProps extends BaseInputFieldProps {\n  beforeInput?: React.ReactNode;\n  afterInput?: React.ReactNode;\n  groupTextType?: GroupTextType;\n}\n\nexport interface TextAreaProps extends FieldProps {\n  placeholder?: string;\n  onChange?: (event) => void;\n  onBlur?: (event) => void;\n}\n\nexport enum GroupTextType {\n  TextInput = 'text',\n  TextArea = 'textArea',\n}\n\nexport interface CheckboxFieldProps extends FieldProps {\n  formLabel?: string;\n  value?: string;\n}\n\nexport interface SearchInputFieldProps extends BaseInputFieldProps {\n  onSearch: (searchTerm: string) => void;\n}\n\nexport interface DropdownFieldProps extends FieldProps {\n  items?: object;\n  selectedKey?: string;\n  title?: React.ReactNode;\n  fullWidth?: boolean;\n  disabled?: boolean;\n  autocompleteFilter?: (text: string, item: object, key?: string) => boolean;\n  onChange?: (value: string) => void;\n}\n\nexport interface EnvironmentFieldProps extends FieldProps {\n  obj?: K8sResourceKind;\n  envPath: string[];\n  envs?: (NameValuePair | NameValueFromPair)[];\n}\n\nexport interface ResourceLimitFieldProps extends FieldProps {\n  unitName: string;\n  unitOptions: object;\n  defaultUnitSize: string;\n  fullWidth?: boolean;\n}\n\nexport interface MultiColumnFieldProps extends FieldProps {\n  addLabel?: string;\n  toolTip?: string;\n  emptyValues: { [name: string]: string };\n  emptyMessage?: string;\n  headers: ({ name: string; required: boolean } | string)[];\n  children: React.ReactNode;\n  spans?: gridItemSpanValueShape[];\n}\n\nexport interface YAMLEditorFieldProps extends FieldProps {\n  onChange?: (value: string) => void;\n  onSave?: () => void;\n}\n\nexport interface NameValuePair {\n  name: string;\n  value: string;\n}\n\nexport interface NameValueFromPair {\n  name: string;\n  valueForm: ConfigMapKeyRef | SecretKeyRef;\n}\n\nexport interface ConfigMapKeyRef {\n  configMapKeyRef: {\n    key: string;\n    name: string;\n  };\n}\n\nexport interface SecretKeyRef {\n  secretKeyRef: {\n    key: string;\n    name: string;\n  };\n}\n\nexport interface RadioButtonFieldProps extends FieldProps {\n  value: string | number;\n  description?: React.ReactNode;\n}\n\nexport interface RadioGroupFieldProps extends FieldProps {\n  options: RadioGroupOption[];\n}\n\nexport interface RadioGroupOption {\n  value: string | number;\n  label: React.ReactNode;\n  isDisabled?: boolean;\n  children?: React.ReactNode;\n  activeChildren?: React.ReactElement;\n}\n","export const getFieldId = (fieldName: string, fieldType: string) => {\n  return `form-${fieldType}-${fieldName?.replace(/\\./g, '-')}-field`;\n};\n","export { default as CheckboxField } from './CheckboxField';\nexport { default as DropdownField } from './DropdownField';\nexport { default as DroppableFileInputField } from './DroppableFileInputField';\nexport { default as EnvironmentField } from './EnvironmentField';\nexport { default as InputField } from './InputField';\nexport { default as MultiColumnField } from './multi-column-field/MultiColumnField';\nexport { default as NSDropdownField } from './NSDropdownField';\nexport { default as NumberSpinnerField } from './NumberSpinnerField';\nexport { default as RadioButtonField } from './RadioButtonField';\nexport { default as RadioGroupField } from './RadioGroupField';\nexport { default as ResourceDropdownField } from './ResourceDropdownField';\nexport { default as ResourceLimitField } from './ResourceLimitField';\nexport { default as SwitchField } from './SwitchField';\nexport { default as TextAreaField } from './TextAreaField';\nexport { default as YAMLEditorField } from './YAMLEditorField';\nexport { default as ItemSelectorField } from './item-selector-field/ItemSelectorField';\nexport { default as InputGroupField } from './InputGroupField';\nexport { default as TextColumnField } from './TextColumnField';\nexport * from './field-utils';\nexport * from './field-types';\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useField, useFormikContext, FormikValues } from 'formik';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { FormGroup } from '@patternfly/react-core';\nimport { getFieldId } from '@console/shared';\nimport SelectorCard from './SelectorCard';\nimport './ItemSelectorField.scss';\n\ninterface Item {\n  name: string;\n  title: string;\n  displayName?: string;\n  iconUrl?: string;\n}\n\ninterface NormalizedItem {\n  [item: string]: Item;\n}\n\ninterface ItemSelectorFieldProps {\n  itemList: NormalizedItem;\n  name: string;\n  loadingItems?: boolean;\n  recommended?: string;\n  label?: string;\n  autoSelect?: boolean;\n  onSelect?: (name: string) => void;\n}\n\nconst ItemSelectorField: React.FC<ItemSelectorFieldProps> = ({\n  itemList,\n  name,\n  loadingItems,\n  recommended,\n  onSelect,\n  label,\n  autoSelect,\n}) => {\n  const [selected, { error: selectedError, touched: selectedTouched }] = useField(name);\n  const { setFieldValue, setFieldTouched, validateForm } = useFormikContext<FormikValues>();\n  const itemCount = _.keys(itemList).length;\n\n  const handleItemChange = React.useCallback(\n    (item: string) => {\n      setFieldValue(name, item);\n      setFieldTouched(name, true);\n      validateForm();\n      onSelect && onSelect(item);\n    },\n    [name, setFieldValue, setFieldTouched, validateForm, onSelect],\n  );\n\n  React.useEffect(() => {\n    if (!selected.value && itemCount === 1) {\n      const image = _.find(itemList);\n      handleItemChange(image.name);\n    }\n    if (!selected.value && recommended) {\n      handleItemChange(recommended);\n      setFieldTouched(name, false);\n    }\n    if (!selected.value && autoSelect && !_.isEmpty(itemList)) {\n      const image = _.get(_.keys(itemList), 0);\n      handleItemChange(itemList[image]?.name);\n    }\n  }, [\n    autoSelect,\n    itemCount,\n    itemList,\n    handleItemChange,\n    selected.value,\n    recommended,\n    name,\n    setFieldTouched,\n  ]);\n\n  if (itemCount === 1) {\n    return null;\n  }\n\n  const fieldId = getFieldId(name, 'itemselector');\n  const isValid = !(selectedTouched && selectedError);\n  const errorMessage = !isValid ? selectedError : '';\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      helperTextInvalid={errorMessage}\n      isValid={isValid}\n      label={label}\n      isRequired\n    >\n      {loadingItems ? (\n        <LoadingInline />\n      ) : (\n        <div id=\"item-selector-field\" className=\"odc-item-selector-field\">\n          {_.values(itemList).map((item) => (\n            <SelectorCard\n              key={item.name}\n              title={item.title}\n              iconUrl={item.iconUrl}\n              name={item.name}\n              displayName={item.displayName}\n              selected={selected.value === item.name}\n              recommended={recommended === item.name}\n              onChange={handleItemChange}\n            />\n          ))}\n        </div>\n      )}\n    </FormGroup>\n  );\n};\n\nexport default ItemSelectorField;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { Card, CardHeader, CardBody } from '@patternfly/react-core';\nimport { StarIcon } from '@patternfly/react-icons';\nimport './SelectorCard.scss';\n\ninterface SelectorCardProps {\n  title: string;\n  iconUrl: string;\n  name: string;\n  displayName?: string;\n  selected?: boolean;\n  recommended?: boolean;\n  onChange: (name: string) => void;\n}\n\nconst SelectorCard: React.FC<SelectorCardProps> = ({\n  title,\n  iconUrl,\n  name,\n  displayName,\n  selected,\n  recommended = false,\n  onChange,\n}) => {\n  const classes = classNames('odc-selector-card', { 'is-selected': selected });\n  return (\n    <Card\n      component=\"button\"\n      type=\"button\"\n      aria-label={title}\n      className={classes}\n      onClick={() => onChange(name)}\n    >\n      <CardHeader>\n        <img className=\"odc-selector-card__icon\" src={iconUrl} alt={displayName ?? title} />\n      </CardHeader>\n      <CardBody>\n        <span className=\"odc-selector-card__title\">{title}</span>\n      </CardBody>\n      {recommended && (\n        <span className=\"odc-selector-card__recommended\">\n          <StarIcon />\n        </span>\n      )}\n    </Card>\n  );\n};\n\nexport default SelectorCard;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { FieldArray, useFormikContext, FormikValues } from 'formik';\nimport { FormGroup, gridItemSpanValueShape } from '@patternfly/react-core';\nimport { SecondaryStatus, useFormikValidationFix } from '@console/shared';\nimport { MultiColumnFieldProps } from '../field-types';\nimport MultiColumnFieldHeader from './MultiColumnFieldHeader';\nimport MultiColumnFieldRow from './MultiColumnFieldRow';\nimport MultiColumnFieldFooter from './MultiColumnFieldFooter';\nimport { getSpans } from './multicolumn-field-utils';\nimport './MultiColumnField.scss';\n\nconst MultiColumnField: React.FC<MultiColumnFieldProps> = ({\n  children,\n  name,\n  label,\n  helpText,\n  required,\n  addLabel,\n  headers,\n  emptyValues,\n  emptyMessage,\n  isReadOnly,\n  disableDeleteRow,\n  disableAddRow,\n  toolTip,\n  spans,\n}) => {\n  const { values } = useFormikContext<FormikValues>();\n  const fieldValue = _.get(values, name, []);\n  const totalFieldCount: gridItemSpanValueShape = React.Children.count(\n    children,\n  ) as gridItemSpanValueShape;\n  const fieldSpans = spans || getSpans(totalFieldCount);\n  useFormikValidationFix(fieldValue);\n  return (\n    <FieldArray\n      name={name}\n      render={({ push, remove }) => {\n        return (\n          <FormGroup\n            fieldId={`form-multi-column-input-${name.replace(/\\./g, '-')}-field`}\n            label={label}\n            helperText={helpText}\n            isRequired={required}\n          >\n            {fieldValue.length < 1 ? (\n              emptyMessage && (\n                <div className=\"odc-multi-column-field__empty-message\">\n                  <SecondaryStatus status={emptyMessage} />\n                </div>\n              )\n            ) : (\n              <MultiColumnFieldHeader headers={headers} spans={fieldSpans} />\n            )}\n            {fieldValue.length > 0 &&\n              fieldValue.map((value, index) => (\n                <MultiColumnFieldRow\n                  key={`${index.toString()}`} // There is no other usable value for key prop in this case.\n                  name={name}\n                  toolTip={toolTip}\n                  rowIndex={index}\n                  onDelete={() => remove(index)}\n                  isReadOnly={isReadOnly}\n                  disableDeleteRow={disableDeleteRow}\n                  spans={fieldSpans}\n                >\n                  {children}\n                </MultiColumnFieldRow>\n              ))}\n            {!isReadOnly && (\n              <MultiColumnFieldFooter\n                disableAddRow={disableAddRow}\n                addLabel={addLabel}\n                onAdd={() => push(emptyValues)}\n              />\n            )}\n          </FormGroup>\n        );\n      }}\n    />\n  );\n};\n\nexport default MultiColumnField;\n","import * as React from 'react';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\n\nexport interface MultiColumnFieldHeader {\n  addLabel: string;\n  onAdd: () => void;\n  disableAddRow?: boolean;\n}\n\nconst MultiColumnFieldFooter: React.FC<MultiColumnFieldHeader> = ({\n  addLabel,\n  onAdd,\n  disableAddRow = false,\n}) => (\n  <Button\n    variant=\"link\"\n    isDisabled={disableAddRow}\n    onClick={onAdd}\n    icon={<PlusCircleIcon />}\n    isInline\n  >\n    {addLabel || 'Add values'}\n  </Button>\n);\n\nexport default MultiColumnFieldFooter;\n","import * as React from 'react';\nimport { Grid, GridItem, gridItemSpanValueShape } from '@patternfly/react-core';\nimport './MultiColumnField.scss';\n\nexport interface MultiColumnFieldHeaderProps {\n  headers: ({ name: string; required: boolean } | string)[];\n  spans: gridItemSpanValueShape[];\n}\n\nconst MultiColumnFieldHeader: React.FC<MultiColumnFieldHeaderProps> = ({ headers, spans }) => (\n  <div className=\"odc-multi-column-field__row\">\n    <Grid className=\"odc-multi-column-field__row\">\n      {headers.map((header, i) => (\n        <GridItem span={spans[i]} key={typeof header === 'string' ? header : header.name}>\n          <div className=\"odc-multi-column-field__col\">\n            {typeof header === 'string' ? (\n              header\n            ) : (\n              <>\n                {header.name}\n                {header.required && (\n                  <span\n                    className=\"odc-multi-column-field__header--required-label\"\n                    aria-hidden=\"true\"\n                  >\n                    *\n                  </span>\n                )}\n              </>\n            )}\n          </div>\n        </GridItem>\n      ))}\n    </Grid>\n    <div className=\"odc-multi-column-field__col--button\" />\n  </div>\n);\n\nexport default MultiColumnFieldHeader;\n","import * as React from 'react';\nimport { MinusCircleIcon } from '@patternfly/react-icons';\nimport {\n  Tooltip,\n  Button,\n  ButtonVariant,\n  ButtonType,\n  GridItem,\n  Grid,\n  gridItemSpanValueShape,\n} from '@patternfly/react-core';\nimport './MultiColumnField.scss';\n\nexport interface MultiColumnFieldRowProps {\n  name: string;\n  toolTip?: string;\n  rowIndex: number;\n  children: React.ReactNode;\n  onDelete: () => void;\n  isReadOnly?: boolean;\n  disableDeleteRow?: boolean;\n  spans: gridItemSpanValueShape[];\n}\n\nconst minusCircleIcon = (onDelete: () => void, disableDeleteRow?: boolean, toolTip?: string) => {\n  return (\n    <div className={'odc-multi-column-field__col--button'}>\n      <Button\n        aria-label=\"Delete\"\n        variant={ButtonVariant.plain}\n        type={ButtonType.button}\n        isInline\n        onClick={onDelete}\n        isDisabled={disableDeleteRow}\n      >\n        <MinusCircleIcon />\n      </Button>\n      <span className=\"sr-only\">{toolTip || 'Delete'}</span>\n    </div>\n  );\n};\n\nconst renderMinusCircleIcon = (\n  onDelete: () => void,\n  toolTip?: string,\n  disableDeleteRow?: boolean,\n) => {\n  return toolTip ? (\n    <Tooltip content={toolTip}>{minusCircleIcon(onDelete, disableDeleteRow, toolTip)}</Tooltip>\n  ) : (\n    minusCircleIcon(onDelete, disableDeleteRow)\n  );\n};\n\nconst MultiColumnFieldRow: React.FC<MultiColumnFieldRowProps> = ({\n  name,\n  toolTip,\n  rowIndex,\n  onDelete,\n  children,\n  isReadOnly,\n  disableDeleteRow,\n  spans,\n}) => (\n  <div className=\"odc-multi-column-field__row\">\n    <Grid>\n      {React.Children.map(children, (child: React.ReactElement, i) => {\n        const fieldName = `${name}.${rowIndex}.${child.props.name}`;\n        const newProps = { ...child.props, name: fieldName };\n        return (\n          <GridItem span={spans[i]} key={fieldName}>\n            <div className=\"odc-multi-column-field__col\">{React.cloneElement(child, newProps)}</div>\n          </GridItem>\n        );\n      })}\n    </Grid>\n    {!isReadOnly && renderMinusCircleIcon(onDelete, toolTip, disableDeleteRow)}\n  </div>\n);\n\nexport default MultiColumnFieldRow;\n","import * as _ from 'lodash';\nimport { gridItemSpanValueShape } from '@patternfly/react-core';\n\nexport const getSpans = (totalFieldCount: gridItemSpanValueShape): gridItemSpanValueShape[] => {\n  const spans: gridItemSpanValueShape[] = _.fill(\n    Array(totalFieldCount),\n    Math.trunc(12 / totalFieldCount),\n  ) as gridItemSpanValueShape[];\n\n  let remainder = 12 % totalFieldCount;\n\n  while (remainder--) {\n    spans[remainder]++;\n  }\n\n  return spans;\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport { Alert, AlertActionCloseButton } from '@patternfly/react-core';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { ServiceModel as KnativeServiceModel } from '@console/knative-plugin';\nimport {\n  K8sResourceKind,\n  referenceForModel,\n  referenceFor,\n  modelFor,\n} from '@console/internal/module/k8s';\nimport {\n  DeploymentConfigModel,\n  DeploymentModel,\n  DaemonSetModel,\n  StatefulSetModel,\n} from '@console/internal/models';\nimport { STORAGE_PREFIX } from '../../constants';\nimport './HealthChecksAlert.scss';\n\ntype HealthChecksAlertProps = {\n  resource: K8sResourceKind;\n};\n\nconst HIDE_HEALTH_CHECK_ALERT_FOR = `${STORAGE_PREFIX}/hide-health-check-alert-for`;\n\nconst addHealthChecksRefs = [\n  referenceForModel(DeploymentConfigModel),\n  referenceForModel(DeploymentModel),\n  referenceForModel(DaemonSetModel),\n  referenceForModel(StatefulSetModel),\n  referenceForModel(KnativeServiceModel),\n];\n\nconst HealthChecksAlert: React.FC<HealthChecksAlertProps> = ({ resource }) => {\n  const {\n    kind,\n    metadata: { name, namespace, uid },\n  } = resource;\n  const [hideHealthCheckAlertFor, setHideHealthCheckAlertFor] = React.useState([]);\n  const kindForCRDResource = referenceFor(resource);\n  const resourceModel = modelFor(kindForCRDResource);\n  const resourceKind = resourceModel.crd ? kindForCRDResource : kind;\n\n  const canAddHealthChecks = useAccessReview({\n    group: resourceModel.apiGroup,\n    resource: resourceModel.plural,\n    namespace,\n    name,\n    verb: 'update',\n  });\n\n  React.useEffect(() => {\n    setHideHealthCheckAlertFor(JSON.parse(localStorage.getItem(HIDE_HEALTH_CHECK_ALERT_FOR)) || []);\n  }, []);\n\n  if (!_.includes(addHealthChecksRefs, referenceFor(resource))) {\n    return null;\n  }\n\n  const containers = resource?.spec?.template?.spec?.containers;\n  const containersName = containers?.map((container) => container.name);\n  const healthCheckAdded = _.every(\n    containers,\n    (container) => container.readinessProbe || container.livenessProbe || container.startupProbe,\n  );\n\n  const handleAlertAction = () => {\n    const hideHealthCheckAlert = [...hideHealthCheckAlertFor, uid];\n    setHideHealthCheckAlertFor(hideHealthCheckAlert);\n    localStorage.setItem(HIDE_HEALTH_CHECK_ALERT_FOR, JSON.stringify(hideHealthCheckAlert));\n  };\n\n  const showAlert =\n    !healthCheckAdded && !_.includes(hideHealthCheckAlertFor, uid) && canAddHealthChecks;\n\n  const addHealthChecksLink = `/k8s/ns/${namespace}/${resourceKind}/${name}/containers/${containersName[0]}/health-checks`;\n\n  return (\n    <>\n      {showAlert ? (\n        <div className=\"ocs-health-checks-alert\">\n          <Alert\n            variant=\"default\"\n            title=\"Health Checks\"\n            action={<AlertActionCloseButton onClose={handleAlertAction} />}\n            isInline\n          >\n            {_.size(containersName) > 1\n              ? 'Not all containers'\n              : `Container ${_.map(containersName)} does not`}{' '}\n            have health checks to ensure your application is running correctly.{' '}\n            <Link to={addHealthChecksLink}>Add Health Checks</Link>\n          </Alert>\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport default HealthChecksAlert;\n","export { default as HealthChecksAlert } from './HealthChecksAlert';\n","export * from './badges';\nexport * from './contextMenu';\nexport * from './dropdown';\nexport * from './form-utils';\nexport * from './formik-fields';\nexport * from './lists';\nexport * from './status';\nexport * from './pod';\nexport * from './popper';\nexport * from './shortcuts';\nexport * from './drawer';\nexport * from './health-checks';\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { List, ListProps } from '@patternfly/react-core';\n\nimport './DetailPropertyList.scss';\n\nconst DetailPropertyList: React.FC<ListProps> = ({ children, ...props }) => (\n  <List className=\"co-detail-property-list\" {...props}>\n    {children}\n  </List>\n);\n\nexport default DetailPropertyList;\n","import * as React from 'react';\nimport { ListItem } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nimport './DetailPropertyList.scss';\n\ntype DetailPropertyListItemProps = {\n  title?: string;\n};\n\nconst DetailPropertyListItem: React.FC<DetailPropertyListItemProps> = ({ title, children }) => {\n  const { t } = useTranslation();\n  if (title === 'Hostname') {\n    title = t('SINGLE:MSG_OVERVIEW_MAIN_CARDDETAILS_6');\n  } else if (title === 'Internal IP') {\n    title = t('SINGLE:MSG_OVERVIEW_MAIN_CARDDETAILS_7');\n  }\n  return (\n    <ListItem>\n      {title && <span className=\"co-detail-property-list__item-title\">{title} </span>}\n      {children}\n    </ListItem>\n  );\n};\nexport default DetailPropertyListItem;\n","export { default as DetailPropertyList } from './DetailPropertyList';\nexport { default as DetailPropertyListItem } from './DetailPropertyListItem';\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Button, Split, SplitItem, Bullseye } from '@patternfly/react-core';\nimport { K8sResourceKind, k8sPatch, K8sKind } from '@console/internal/module/k8s';\nimport { AngleUpIcon, AngleDownIcon } from '@patternfly/react-icons';\nimport { podRingLabel, usePodScalingAccessStatus } from '../../utils';\nimport { ExtPodKind } from '../../types';\nimport PodStatus from './PodStatus';\nimport './PodRing.scss';\n\ninterface PodRingProps {\n  pods: ExtPodKind[];\n  obj: K8sResourceKind;\n  rc?: K8sResourceKind;\n  resourceKind: K8sKind;\n  path?: string;\n  impersonate?: string;\n  enableScaling?: boolean;\n}\n\nconst PodRing: React.FC<PodRingProps> = ({\n  pods,\n  obj,\n  resourceKind,\n  path,\n  impersonate,\n  rc,\n  enableScaling = true,\n}) => {\n  const [clickCount, setClickCount] = React.useState(obj.spec.replicas);\n  const isScalingAllowed = usePodScalingAccessStatus(\n    obj,\n    resourceKind,\n    pods,\n    enableScaling,\n    impersonate,\n  );\n\n  React.useEffect(\n    () => {\n      if (clickCount !== obj.spec.replicas) {\n        setClickCount(obj.spec.replicas);\n      }\n    },\n    // disabling exhaustive-deps because I do not want to add clickCount to\n    // dependency array. I only want to trigger useEffect when `obj.spec.replicas` changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [obj.spec.replicas],\n  );\n\n  const handleScaling = _.debounce(\n    (operation: number) => {\n      const patch = [{ op: 'replace', path, value: operation }];\n      const promise: Promise<K8sResourceKind> = k8sPatch(resourceKind, obj, patch);\n      promise.catch((error) => {\n        throw error;\n      });\n    },\n    1000,\n    {\n      leading: true,\n      trailing: false,\n    },\n  );\n\n  const handleClick = (operation: number) => {\n    setClickCount(clickCount + operation);\n    handleScaling(clickCount + operation);\n  };\n  const resourceObj = rc || obj;\n  const { title, subTitle, titleComponent } = podRingLabel(resourceObj, obj.kind, pods);\n\n  return (\n    <Split>\n      <SplitItem>\n        <div className=\"odc-pod-ring\">\n          <PodStatus\n            standalone\n            data={pods}\n            subTitle={subTitle}\n            title={title}\n            titleComponent={titleComponent}\n          />\n        </div>\n      </SplitItem>\n      {isScalingAllowed && (\n        <SplitItem>\n          <Bullseye>\n            <div>\n              <Button\n                type=\"button\"\n                variant=\"plain\"\n                aria-label=\"Increase the pod count\"\n                title=\"Increase the pod count\"\n                onClick={() => handleClick(1)}\n                isBlock\n              >\n                <AngleUpIcon style={{ fontSize: '20' }} />\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"plain\"\n                aria-label=\"Decrease the pod count\"\n                title=\"Decrease the pod count\"\n                onClick={() => handleClick(-1)}\n                isBlock\n                isDisabled={clickCount <= 0}\n              >\n                <AngleDownIcon style={{ fontSize: '20' }} />\n              </Button>\n            </div>\n          </Bullseye>\n        </SplitItem>\n      )}\n    </Split>\n  );\n};\n\nexport default PodRing;\n","import * as React from 'react';\nimport { Firehose, FirehoseResource } from '@console/internal/components/utils';\nimport { PodRingResources, PodRingData } from '../../types';\nimport { transformPodRingData, podRingFirehoseProps } from '../../utils';\nimport {\n  DaemonSetModel,\n  PodModel,\n  ReplicaSetModel,\n  ReplicationControllerModel,\n  DeploymentModel,\n  DeploymentConfigModel,\n  StatefulSetModel,\n} from '@console/internal/models';\n\ninterface RenderPropsType {\n  loaded: boolean;\n  loadError: any;\n  data: PodRingData;\n}\n\ninterface ControllerProps {\n  loaded?: boolean;\n  loadError?: any;\n  resources?: PodRingResources;\n  kind: string;\n  render(RenderProps: RenderPropsType): React.ReactElement;\n}\n\ninterface PodRingDataControllerProps {\n  namespace: string;\n  kind: string;\n  render(RenderProps: RenderPropsType): React.ReactElement;\n}\n\nconst Controller: React.FC<ControllerProps> = React.memo(\n  ({ resources, render, loaded, loadError, kind }) => {\n    return render({\n      loaded,\n      loadError,\n      data: loaded ? transformPodRingData(resources, kind) : null,\n    });\n  },\n);\n\nconst PodRingController: React.FC<PodRingDataControllerProps> = ({ namespace, kind, render }) => {\n  const resources: FirehoseResource[] = [\n    {\n      isList: true,\n      kind: PodModel.kind,\n      namespace,\n      prop: podRingFirehoseProps[PodModel.kind],\n    },\n    {\n      isList: true,\n      kind: ReplicaSetModel.kind,\n      namespace,\n      prop: podRingFirehoseProps[ReplicaSetModel.kind],\n    },\n    {\n      isList: true,\n      kind: ReplicationControllerModel.kind,\n      namespace,\n      prop: podRingFirehoseProps[ReplicationControllerModel.kind],\n    },\n  ];\n\n  switch (kind) {\n    case DeploymentModel.kind:\n      resources.push({\n        isList: true,\n        kind,\n        namespace,\n        prop: podRingFirehoseProps[kind],\n      });\n      break;\n    case DeploymentConfigModel.kind:\n      resources.push({\n        isList: true,\n        kind,\n        namespace,\n        prop: podRingFirehoseProps[kind],\n      });\n      break;\n    case StatefulSetModel.kind:\n      resources.push({\n        isList: true,\n        kind,\n        namespace,\n        prop: podRingFirehoseProps[kind],\n      });\n      break;\n    case DaemonSetModel.kind:\n      resources.push({\n        isList: true,\n        kind,\n        namespace,\n        prop: podRingFirehoseProps[kind],\n      });\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <Firehose resources={resources}>\n      <Controller render={render} kind={kind} />\n    </Firehose>\n  );\n};\n\nexport default React.memo(PodRingController);\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { ChartDonut } from '@patternfly/react-charts';\nimport { Tooltip } from '@patternfly/react-core';\nimport { ExtPodKind } from '../../types';\nimport { calculateRadius, podStatus, getPodStatus } from '../../utils';\nimport { podColor, AllPodStatus } from '../../constants';\nimport './PodStatus.scss';\n\nconst ANIMATION_DURATION = 350;\n\ntype PodData = {\n  x: string;\n  y: number;\n};\n\ntype PodStatusProps = {\n  innerRadius?: number;\n  outerRadius?: number;\n  size?: number;\n  standalone?: boolean;\n  x?: number;\n  y?: number;\n  data: ExtPodKind[];\n  showTooltip?: boolean;\n  title?: string;\n  titleComponent?: React.ReactElement;\n  subTitle?: string;\n  subTitleComponent?: React.ReactElement;\n};\n\ntype PodStatusState = {\n  vData: PodData[];\n  updateOnEnd: boolean;\n  tipIndex?: number;\n};\n\nconst { podStatusInnerRadius, podStatusOuterRadius } = calculateRadius(130); // default value of size is 130\n\nconst podStatusIsNumeric = (podStatusValue: string) => {\n  return (\n    podStatusValue !== AllPodStatus.ScaledTo0 &&\n    podStatusValue !== AllPodStatus.AutoScaledTo0 &&\n    podStatusValue !== AllPodStatus.Idle &&\n    podStatusValue !== AllPodStatus.ScalingUp\n  );\n};\n\nclass PodStatus extends React.Component<PodStatusProps, PodStatusState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      vData: [],\n      updateOnEnd: false,\n    };\n  }\n\n  static getDerivedStateFromProps(\n    nextProps: PodStatusProps,\n    prevState: PodStatusState,\n  ): PodStatusState {\n    const { data } = nextProps;\n\n    if (prevState.updateOnEnd) {\n      // Animations complete, remove empty slices\n      return {\n        vData: _.filter(prevState.vData, (nextData) => nextData.y !== 0),\n        updateOnEnd: false,\n      };\n    }\n\n    const vData: PodData[] = podStatus.map((pod) => ({\n      x: pod,\n      y: _.sumBy(data, (d) => +(getPodStatus(d) === pod)) || 0,\n    }));\n\n    if (_.isEmpty(data)) {\n      _.update(vData, `[${_.findKey(vData, { x: AllPodStatus.ScaledTo0 })}]['y']`, () => 1);\n    }\n\n    // Determine if we have moved to just 1 data point left\n    const prevDataPoints = _.size(_.filter(prevState.vData, (nextData) => nextData.y !== 0));\n    const dataPoints = _.size(_.filter(vData, (nextData) => nextData.y !== 0));\n    return { vData, updateOnEnd: dataPoints === 1 && prevDataPoints > 1 };\n  }\n\n  doUpdate = () => {\n    // Animations complete, update to remove empty slices\n    this.forceUpdate();\n  };\n\n  render() {\n    const {\n      innerRadius = podStatusInnerRadius,\n      outerRadius = podStatusOuterRadius,\n      x,\n      y,\n      size = 130,\n      standalone = false,\n      showTooltip = true,\n      title = '',\n      subTitle = '',\n      titleComponent,\n      subTitleComponent,\n    } = this.props;\n    const { vData, updateOnEnd } = this.state;\n\n    const chartDonut = (\n      <ChartDonut\n        animate={{\n          duration: ANIMATION_DURATION,\n          onEnd: updateOnEnd ? this.doUpdate : undefined,\n        }}\n        standalone={standalone}\n        innerRadius={innerRadius}\n        radius={outerRadius}\n        groupComponent={x && y ? <g transform={`translate(${x}, ${y})`} /> : undefined}\n        data={vData}\n        height={size}\n        width={size}\n        title={title}\n        titleComponent={titleComponent}\n        subTitleComponent={subTitleComponent}\n        subTitle={subTitle}\n        allowTooltip={false}\n        labels={() => null}\n        /*\n            // @ts-ignore */\n        padAngle={({ datum }) => (datum.y > 0 ? 2 : 0)}\n        style={{\n          data: {\n            fill: ({ datum }) => podColor[datum.x],\n            stroke: ({ datum }) =>\n              !podStatusIsNumeric(datum.x) && datum.y > 0 ? '#BBBBBB' : 'none',\n            strokeWidth: 1,\n          },\n        }}\n      />\n    );\n    if (showTooltip) {\n      const tipContent = (\n        <div className=\"odc-pod-status-tooltip\">\n          {vData.map((data) => {\n            return data.y > 0 ? (\n              <div key={data.x} className=\"odc-pod-status-tooltip__content\">\n                <span\n                  className=\"odc-pod-status-tooltip__status-box\"\n                  style={{ background: podColor[data.x] }}\n                />\n                {podStatusIsNumeric(data.x) && (\n                  <span key={3} className=\"odc-pod-status-tooltip__status-count\">\n                    {`${Math.round(data.y)}`}\n                  </span>\n                )}\n                {data.x}\n              </div>\n            ) : null;\n          })}\n        </div>\n      );\n      return <Tooltip content={tipContent}>{chartDonut}</Tooltip>;\n    }\n    return chartDonut;\n  }\n}\n\nexport default React.memo((props: PodStatusProps) => <PodStatus {...props} />);\n","export { default as PodRing } from './PodRing';\nexport { default as PodStatus } from './PodStatus';\nexport { default as PodRingController } from './PodRingDataController';\n","import * as React from 'react';\nimport PopperJS, { PopperOptions } from 'popper.js';\nimport { useCombineRefs } from '../../utils/useCombineRefs';\nimport Portal from './Portal';\n\n// alignment with PopperJS reference API\ntype PopperJSReference = {\n  getBoundingClientRect: PopperJS['reference']['getBoundingClientRect'];\n  clientWidth: number;\n  clientHeight: number;\n};\n\ntype ClientRectProp = { x: number; y: number; width?: number; height?: number };\n\ntype Reference = Element | PopperJSReference | ClientRectProp;\n\nclass VirtualReference implements PopperJSReference {\n  private rect: ClientRect;\n\n  constructor({ height = 0, width = 0, x, y }: ClientRectProp) {\n    this.rect = {\n      bottom: y + height,\n      height,\n      left: x,\n      right: x + width,\n      top: y,\n      width,\n    };\n  }\n\n  getBoundingClientRect(): ClientRect {\n    return this.rect;\n  }\n\n  get clientWidth(): number {\n    return this.rect.width || 0;\n  }\n\n  get clientHeight(): number {\n    return this.rect.height || 0;\n  }\n}\n\nconst getReference = (reference: Reference): PopperJSReference =>\n  'getBoundingClientRect' in reference ? reference : new VirtualReference(reference);\n\ntype PopperProps = {\n  closeOnEsc?: boolean;\n  closeOnOutsideClick?: boolean;\n  container?: React.ComponentProps<typeof Portal>['container'];\n  className?: string;\n  open?: boolean;\n  onRequestClose?: (e?: MouseEvent) => void;\n  placement?:\n    | 'bottom-end'\n    | 'bottom-start'\n    | 'bottom'\n    | 'left-end'\n    | 'left-start'\n    | 'left'\n    | 'right-end'\n    | 'right-start'\n    | 'right'\n    | 'top-end'\n    | 'top-start'\n    | 'top';\n  popperOptions?: PopperOptions;\n  popperRef?: React.Ref<PopperJS>;\n  reference: Reference | (() => Reference);\n  zIndex?: number;\n  returnFocus?: boolean;\n};\n\nconst DEFAULT_POPPER_OPTIONS: PopperOptions = {};\n\nconst Popper: React.FC<PopperProps> = ({\n  children,\n  container,\n  className,\n  open,\n  placement = 'bottom-start',\n  reference,\n  popperOptions = DEFAULT_POPPER_OPTIONS,\n  closeOnEsc,\n  closeOnOutsideClick,\n  onRequestClose,\n  popperRef: popperRefIn,\n  zIndex = 9999,\n  returnFocus,\n}) => {\n  const controlled = typeof open === 'boolean';\n  const openProp = controlled ? open || false : true;\n  const nodeRef = React.useRef<Element>();\n  const popperRef = React.useRef<PopperJS>(null);\n  const popperRefs = useCombineRefs<PopperJS>(popperRef, popperRefIn);\n  const [isOpen, setOpenState] = React.useState(openProp);\n  const focusRef = React.useRef<Element | null>();\n  const onRequestCloseRef = React.useRef(onRequestClose);\n  onRequestCloseRef.current = onRequestClose;\n\n  const setOpen = React.useCallback(\n    (newOpen: boolean) => {\n      if (returnFocus && newOpen !== isOpen) {\n        if (newOpen) {\n          if (document.activeElement) {\n            focusRef.current = document.activeElement;\n          }\n        } else if (focusRef.current instanceof HTMLElement && focusRef.current.ownerDocument) {\n          focusRef.current.focus();\n        }\n      }\n      setOpenState(newOpen);\n    },\n    [returnFocus, isOpen],\n  );\n\n  React.useEffect(() => {\n    setOpen(openProp);\n  }, [openProp, setOpen]);\n\n  const onKeyDown = React.useCallback(\n    (e: KeyboardEvent) => {\n      if (e.keyCode === 27) {\n        controlled ? onRequestCloseRef.current && onRequestCloseRef.current() : setOpen(false);\n      }\n    },\n    [controlled, setOpen],\n  );\n\n  const onClickOutside = React.useCallback(\n    (e: MouseEvent) => {\n      if (!nodeRef.current || (e.target instanceof Node && !nodeRef.current.contains(e.target))) {\n        controlled ? onRequestCloseRef.current && onRequestCloseRef.current(e) : setOpen(false);\n      }\n    },\n    [controlled, setOpen],\n  );\n\n  const destroy = React.useCallback(() => {\n    if (popperRef.current) {\n      popperRef.current.destroy();\n      popperRefs(null);\n      document.removeEventListener('keydown', onKeyDown, true);\n      document.removeEventListener('mousedown', onClickOutside, true);\n      document.removeEventListener('touchstart', onClickOutside, true);\n    }\n  }, [onClickOutside, onKeyDown, popperRefs]);\n\n  const initialize = React.useCallback(() => {\n    if (!nodeRef.current || !reference || !isOpen) {\n      return;\n    }\n\n    destroy();\n\n    popperRefs(\n      new PopperJS(\n        getReference(typeof reference === 'function' ? reference() : reference),\n        nodeRef.current,\n        {\n          placement,\n          ...popperOptions,\n          modifiers: {\n            preventOverflow: {\n              boundariesElement: 'window',\n            },\n            ...popperOptions.modifiers,\n          },\n        },\n      ),\n    );\n\n    // init document listenerrs\n    if (closeOnEsc) {\n      document.addEventListener('keydown', onKeyDown, true);\n    }\n    if (closeOnOutsideClick) {\n      document.addEventListener('mousedown', onClickOutside, true);\n      document.addEventListener('touchstart', onClickOutside, true);\n    }\n  }, [\n    popperRefs,\n    reference,\n    isOpen,\n    destroy,\n    placement,\n    popperOptions,\n    closeOnEsc,\n    closeOnOutsideClick,\n    onKeyDown,\n    onClickOutside,\n  ]);\n\n  const nodeRefCallback = React.useCallback(\n    (node) => {\n      nodeRef.current = node;\n      initialize();\n    },\n    [initialize],\n  );\n\n  React.useEffect(() => {\n    initialize();\n  }, [initialize]);\n\n  React.useEffect(() => {\n    return () => {\n      destroy();\n    };\n  }, [destroy]);\n\n  React.useEffect(() => {\n    if (!isOpen) {\n      destroy();\n    }\n  }, [destroy, isOpen]);\n\n  return isOpen ? (\n    <Portal container={container}>\n      <div ref={nodeRefCallback} className={className} style={{ zIndex }}>\n        {children}\n      </div>\n    </Portal>\n  ) : null;\n};\n\nexport default Popper;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\ntype GetContainer = Element | null | undefined | (() => Element);\n\ntype PortalProps = {\n  container?: GetContainer;\n};\n\nconst getContainer = (container: GetContainer): Element | null | undefined =>\n  typeof container === 'function' ? container() : container;\n\nconst Portal: React.FC<PortalProps> = ({ children, container }) => {\n  const [containerNode, setContainerNode] = React.useState<Element>();\n\n  React.useLayoutEffect(() => {\n    setContainerNode(getContainer(container) || document.body);\n  }, [container]);\n\n  return containerNode ? ReactDOM.createPortal(children, containerNode) : null;\n};\n\nexport default Portal;\n","export { default as Popper } from './Popper';\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { MouseIcon } from '@patternfly/react-icons';\nimport './Shortcut.scss';\n\ninterface ShortcutProps {\n  children: React.ReactNode;\n  alt?: boolean;\n  click?: boolean;\n  ctrl?: boolean;\n  ctrlCmd?: boolean;\n  drag?: boolean;\n  hover?: boolean;\n  keyName?: string;\n  rightClick?: boolean;\n  shift?: boolean;\n}\n\nconst Command: React.FC = ({ children }) => (\n  <span className=\"ocs-shortcut__command\">\n    <kbd>{children}</kbd>\n  </span>\n);\n\nconst Shortcut: React.FC<ShortcutProps> = ({\n  children,\n  alt,\n  click,\n  ctrl,\n  ctrlCmd,\n  drag,\n  hover,\n  keyName,\n  rightClick,\n  shift,\n}) => {\n  const isMac = window.navigator.platform.includes('Mac');\n  return (\n    <tr>\n      <td className=\"ocs-shortcut__cell\">\n        {(ctrl || (!isMac && ctrlCmd)) && <Command>Ctrl</Command>}\n        {alt && <Command>{isMac ? '⌥ Opt' : 'Alt'}</Command>}\n        {shift && <Command>Shift</Command>}\n        {isMac && ctrlCmd && <Command>⌘ Cmd</Command>}\n        {hover && (\n          <Command>\n            <MouseIcon /> Hover\n          </Command>\n        )}\n        {keyName && (\n          <Command>\n            {keyName.length === 1 ? keyName.toUpperCase() : _.startCase(keyName.toLowerCase())}\n          </Command>\n        )}\n        {drag && (\n          <Command>\n            <MouseIcon /> Drag\n          </Command>\n        )}\n        {click && (\n          <Command>\n            <MouseIcon /> Click\n          </Command>\n        )}\n        {rightClick && (\n          <Command>\n            <MouseIcon /> Right Click\n          </Command>\n        )}\n      </td>\n      <td className=\"ocs-shortcut__cell\">{children}</td>\n    </tr>\n  );\n};\n\nexport default Shortcut;\n","import * as React from 'react';\n\nconst ShortcutTable: React.FC = ({ children }) => (\n  <table>\n    <tbody>{children}</tbody>\n  </table>\n);\n\nexport default ShortcutTable;\n","export { default as Shortcut } from './Shortcut';\nexport { default as ShortcutTable } from './ShortcutTable';\n","import * as React from 'react';\nimport { StatusComponentProps } from './types';\nimport PopoverStatus from './PopoverStatus';\nimport StatusIconAndText from './StatusIconAndText';\n\nconst GenericStatus: React.FC<GenericStatusProps> = (props) => {\n  const { Icon, children, ...restProps } = props;\n  return children ? (\n    <PopoverStatus {...restProps} icon={<Icon />}>\n      {children}\n    </PopoverStatus>\n  ) : (\n    <StatusIconAndText {...restProps} icon={<Icon />} />\n  );\n};\n\ntype GenericStatusProps = StatusComponentProps & {\n  Icon: React.ComponentType<{}>;\n};\n\nexport default GenericStatus;\n","import * as React from 'react';\nimport * as History from 'history';\nimport { Link } from 'react-router-dom';\nimport StatusIconAndText from './StatusIconAndText';\n\nconst LinkStatus: React.FC<LinkStatusProps> = ({ linkTitle, linkTo, ...other }) =>\n  linkTo ? (\n    <Link to={linkTo} title={linkTitle}>\n      <StatusIconAndText {...other} />\n    </Link>\n  ) : (\n    <StatusIconAndText {...other} />\n  );\n\ntype LinkStatusProps = React.ComponentProps<typeof StatusIconAndText> & {\n  linkTitle?: string;\n  linkTo?: History.LocationDescriptor;\n};\n\nexport default LinkStatus;\n","import * as React from 'react';\nimport { Button, Popover, PopoverPosition } from '@patternfly/react-core';\nimport { Instance as TippyInstance } from 'tippy.js';\nimport StatusIconAndText from './StatusIconAndText';\n\nconst PopoverStatus: React.FC<PopoverStatusProps> = ({\n  title,\n  hideHeader,\n  icon,\n  activeIcon,\n  children,\n  isVisible = null,\n  shouldClose = null,\n  ...other\n}) => {\n  const [isActive, setActive] = React.useState(false);\n  const onHide = React.useCallback(() => setActive(false), [setActive]);\n  const onShow = React.useCallback(() => setActive(true), [setActive]);\n\n  return (\n    <Popover\n      position={PopoverPosition.right}\n      headerContent={hideHeader ? null : title}\n      bodyContent={children}\n      aria-label={title}\n      onHide={onHide}\n      onShow={onShow}\n      isVisible={isVisible}\n      shouldClose={shouldClose}\n    >\n      <Button variant=\"link\" isInline>\n        <StatusIconAndText\n          {...other}\n          title={title}\n          icon={isActive && activeIcon ? activeIcon : icon}\n        />\n      </Button>\n    </Popover>\n  );\n};\n\ntype PopoverStatusProps = React.ComponentProps<typeof StatusIconAndText> & {\n  activeIcon?: React.ReactElement;\n  hideHeader?: boolean;\n  isVisible?: boolean;\n  shouldClose?: (tip: TippyInstance) => void;\n};\n\nexport default PopoverStatus;\n","import * as React from 'react';\nimport * as _ from 'lodash';\n\ntype SecondaryStatusProps = {\n  status?: string | string[];\n};\n\nconst SecondaryStatus: React.FC<SecondaryStatusProps> = ({ status }) => {\n  const statusLabel = _.compact(_.concat([], status)).join(', ');\n  if (statusLabel) {\n    return (\n      <div>\n        <small className=\"text-muted\">{statusLabel}</small>\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default SecondaryStatus;\n","import * as React from 'react';\nimport { ClipboardListIcon, HourglassStartIcon, HourglassHalfIcon, SyncAltIcon, BanIcon, ExclamationTriangleIcon, UnknownIcon } from '@patternfly/react-icons';\nimport { DASH } from '../../constants';\nimport { YellowExclamationTriangleIcon } from './icons';\nimport StatusIconAndText from './StatusIconAndText';\nimport { ErrorStatus, InfoStatus, ProgressStatus, SuccessStatus } from './statuses';\nimport { StatusComponentProps } from './types';\n\nexport const Status: React.FC<StatusProps> = ({ status, title, children, iconOnly, noTooltip, className }) => {\n  const statusProps = { title: title || status, iconOnly, noTooltip, className };\n  switch (status) {\n    case 'New':\n      return <StatusIconAndText {...statusProps} icon={<HourglassStartIcon />} />;\n\n    case 'Pending':\n    case 'Waiting':\n      return <StatusIconAndText {...statusProps} icon={<HourglassHalfIcon />} />;\n\n    case 'Planning':\n      return <StatusIconAndText {...statusProps} icon={<ClipboardListIcon />} />;\n\n    case 'ContainerCreating':\n    case 'Creating':\n    case 'UpgradePending':\n      return <ProgressStatus {...statusProps} />;\n\n    case 'In Progress':\n    case 'Installing':\n    case 'InstallReady':\n    case 'Replacing':\n    case 'Running':\n    case 'Signing':\n    case 'Updating':\n    case 'Upgrading':\n      return <StatusIconAndText {...statusProps} icon={<SyncAltIcon />} />;\n\n    case 'Cancelled':\n    case 'Deleting':\n    case 'Expired':\n    case 'Not Ready':\n    case 'NotReady':\n    case 'Terminating':\n    case 'Deleted':\n      return <StatusIconAndText {...statusProps} icon={<BanIcon />} />;\n\n    case 'Warning':\n      return <StatusIconAndText {...statusProps} icon={<ExclamationTriangleIcon />} />;\n\n    case 'RequiresApproval':\n      return <StatusIconAndText {...statusProps} icon={<YellowExclamationTriangleIcon />} />;\n\n    case 'ContainerCannotRun':\n    case 'CrashLoopBackOff':\n    case 'Critical':\n    case 'ErrImagePull':\n    case 'Error':\n    case 'Failed':\n    case 'Fail':\n    case 'ImagePullBackOff':\n    case 'InstallCheckFailed':\n    case 'Lost':\n    case 'Rejected':\n    case 'UpgradeFailed':\n      return <ErrorStatus {...statusProps}>{children}</ErrorStatus>;\n\n    case 'Accepted':\n    case 'Success':\n    case 'Active':\n    case 'Bound':\n    case 'Complete':\n    case 'Completed':\n    case 'Created':\n    case 'Enabled':\n    case 'Succeeded':\n    case 'Ready':\n    case 'Up to date':\n    case 'Provisioned as node':\n    case 'Approved':\n    case 'Success':\n      return <SuccessStatus {...statusProps} />;\n\n    case 'Info':\n      return <InfoStatus {...statusProps}>{children}</InfoStatus>;\n\n    case 'Unknown':\n      return <StatusIconAndText {...statusProps} icon={<UnknownIcon />} />;\n\n    default:\n      return <>{status || DASH}</>;\n  }\n};\n\nexport const StatusIcon: React.FC<StatusIconProps> = ({ status }) => <Status status={status} iconOnly />;\n\ntype StatusIconProps = {\n  status: string;\n};\n\ntype StatusProps = StatusComponentProps & {\n  status: string;\n};\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { CamelCaseWrap } from '@console/internal/components/utils';\nimport { DASH } from '../../constants';\nimport { StatusComponentProps } from './types';\n\ntype StatusIconAndTextProps = StatusComponentProps & {\n  icon?: React.ReactElement;\n  spin?: boolean;\n};\n\nconst StatusIconAndText: React.FC<StatusIconAndTextProps> = ({\n  icon,\n  title,\n  spin,\n  iconOnly,\n  noTooltip,\n  className,\n}) => {\n  if (!title) {\n    return <>{DASH}</>;\n  }\n\n  return (\n    <span\n      className={classNames('co-icon-and-text', className)}\n      title={iconOnly && !noTooltip ? title : undefined}\n    >\n      {icon &&\n        React.cloneElement(icon, {\n          className: classNames(\n            spin && 'fa-spin',\n            icon.props.className,\n            !iconOnly && 'co-icon-and-text__icon co-icon-flex-child',\n          ),\n        })}\n      {!iconOnly && <CamelCaseWrap value={title} />}\n    </span>\n  );\n};\n\nexport default StatusIconAndText;\n","import * as React from 'react';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  InfoCircleIcon,\n  UnknownIcon,\n  SyncAltIcon,\n  ResourcesAlmostFullIcon,\n  ResourcesFullIcon,\n} from '@patternfly/react-icons';\nimport {\n  global_warning_color_100 as warningColor,\n  global_danger_color_100 as dangerColor,\n  global_success_color_200 as okColor,\n  global_info_color_100 as blueInfoColor,\n  global_disabled_color_100 as disabledColor,\n} from '@patternfly/react-tokens';\n\nexport const GreenCheckCircleIcon: React.FC<ColoredIconProps> = ({ className, alt }) => (\n  <CheckCircleIcon color={okColor.value} className={className} alt={alt} />\n);\n\nexport const RedExclamationCircleIcon: React.FC<ColoredIconProps> = ({ className, alt }) => (\n  <ExclamationCircleIcon color={dangerColor.value} className={className} alt={alt} />\n);\n\nexport const YellowExclamationTriangleIcon: React.FC<ColoredIconProps> = ({ className, alt }) => (\n  <ExclamationTriangleIcon color={warningColor.value} className={className} alt={alt} />\n);\n\nexport const BlueInfoCircleIcon: React.FC<ColoredIconProps> = ({ className, alt }) => (\n  <InfoCircleIcon color={blueInfoColor.value} className={className} alt={alt} />\n);\n\nexport const GrayUnknownIcon: React.FC<ColoredIconProps> = ({ className, alt }) => (\n  <UnknownIcon color={disabledColor.value} className={className} alt={alt} />\n);\n\nexport const BlueSyncIcon: React.FC<ColoredIconProps> = ({ className, alt }) => (\n  <SyncAltIcon color={blueInfoColor.value} className={className} alt={alt} />\n);\n\nexport const RedResourcesFullIcon: React.FC<ColoredIconProps> = ({ className, alt }) => (\n  <ResourcesFullIcon color={dangerColor.value} className={className} alt={alt} />\n);\n\nexport const YellowResourcesAlmostFullIcon: React.FC<ColoredIconProps> = ({ className, alt }) => (\n  <ResourcesAlmostFullIcon color={warningColor.value} className={className} alt={alt} />\n);\n\nexport type ColoredIconProps = {\n  className?: string;\n  alt?: string;\n};\n","export * from './icons';\nexport * from './statuses';\nexport * from './Status';\n\nexport { default as SecondaryStatus } from './SecondaryStatus';\nexport { default as LinkStatus } from './LinkStatus';\nexport { default as StatusIconAndText } from './StatusIconAndText';\nexport { default as PopoverStatus } from './PopoverStatus';\n","import * as React from 'react';\nimport { InfoCircleIcon, HourglassHalfIcon, InProgressIcon } from '@patternfly/react-icons';\nimport {\n  RedExclamationCircleIcon,\n  GreenCheckCircleIcon,\n  YellowExclamationTriangleIcon,\n} from './icons';\nimport GenericStatus from './GenericStatus';\nimport { StatusComponentProps } from './types';\n\nexport const ErrorStatus: React.FC<StatusComponentProps> = (props) => (\n  <GenericStatus {...props} Icon={RedExclamationCircleIcon} />\n);\nErrorStatus.displayName = 'ErrorStatus';\n\nexport const InfoStatus: React.FC<StatusComponentProps> = (props) => (\n  <GenericStatus {...props} Icon={InfoCircleIcon} />\n);\nInfoStatus.displayName = 'InfoStatus';\n\nexport const PendingStatus: React.FC<StatusComponentProps> = (props) => (\n  <GenericStatus {...props} Icon={HourglassHalfIcon} />\n);\nPendingStatus.displayName = 'PendingStatus';\n\nexport const ProgressStatus: React.FC<StatusComponentProps> = (props) => (\n  <GenericStatus {...props} Icon={InProgressIcon} />\n);\nProgressStatus.displayName = 'ProgressStatus';\n\nexport const SuccessStatus: React.FC<StatusComponentProps> = (props) => (\n  <GenericStatus {...props} Icon={GreenCheckCircleIcon} />\n);\nSuccessStatus.displayName = 'SuccessStatus';\n\nexport const WarningStatus: React.FC<StatusComponentProps> = (props) => (\n  <GenericStatus {...props} Icon={YellowExclamationTriangleIcon} />\n);\nWarningStatus.displayName = 'WarningStatus';\n","export const CONST = Object.freeze({\n  // http://kubernetes.io/docs/user-guide/images/#bypassing-kubectl-create-secrets\n  PULL_SECRET_TYPE: 'kubernetes.io/dockerconfigjson',\n  PULL_SECRET_DATA: '.dockerconfigjson',\n});\n\nexport const ANNOTATIONS = Object.freeze({\n  displayName: 'openshift.io/display-name',\n  providerDisplayName: 'openshift.io/provider-display-name',\n  documentationURL: 'openshift.io/documentation-url',\n  supportURL: 'openshift.io/support-url',\n});\n\n// Common shortcuts than span pages.\nexport const KEYBOARD_SHORTCUTS = Object.freeze({\n  focusFilterInput: '/',\n  blurFilterInput: 'Escape',\n  focusNamespaceDropdown: 'n',\n});\n\n// Use a key for the \"all\" namespaces option that would be an invalid namespace name to avoid a potential clash\nexport const ALL_NAMESPACES_KEY = '#ALL_NS#';\n\n// Use a key for the \"all\" applications option that would be an invalid application name to avoid a potential clash\nexport const ALL_APPLICATIONS_KEY = '#ALL_APPS#';\n\n// Prefix our localStorage items to avoid conflicts if another app ever runs on the same domain.\nexport const STORAGE_PREFIX = 'bridge';\n\n// This localStorage key predates the storage prefix.\nexport const NAMESPACE_LOCAL_STORAGE_KEY = 'dropdown-storage-namespaces';\nexport const APPLICATION_LOCAL_STORAGE_KEY = 'dropdown-storage-applications';\nexport const LAST_NAMESPACE_NAME_LOCAL_STORAGE_KEY = `${STORAGE_PREFIX}/last-namespace-name`;\nexport const LAST_PERSPECTIVE_LOCAL_STORAGE_KEY = `${STORAGE_PREFIX}/last-perspective`;\nexport const API_DISCOVERY_RESOURCES_LOCAL_STORAGE_KEY = `${STORAGE_PREFIX}/api-discovery-resources`;\nexport const COMMUNITY_PROVIDERS_WARNING_LOCAL_STORAGE_KEY = `${STORAGE_PREFIX}/community-providers-warning`;\nexport const DEV_CATALOG_FILTER_KEY = `${STORAGE_PREFIX}/dev-catalog-filters`;\nexport const PINNED_RESOURCES_LOCAL_STORAGE_KEY = `${STORAGE_PREFIX}/pinned-resources`;\nexport const LAST_CLUSTER_LOCAL_STORAGE_KEY = `${STORAGE_PREFIX}/last-cluster`;\n\n// Bootstrap user for OpenShift 4.0 clusters\nexport const KUBE_ADMIN_USERNAME = 'kube:admin';\n\nexport const RH_OPERATOR_SUPPORT_POLICY_LINK =\n  'https://access.redhat.com/third-party-software-support';\n\n// Package manifests for the OperatorHub use this label.\nexport const OPERATOR_HUB_LABEL = 'openshift-marketplace';\n\nexport enum FLAGS {\n  AUTH_ENABLED = 'AUTH_ENABLED',\n  PROMETHEUS = 'PROMETHEUS',\n  CHARGEBACK = 'CHARGEBACK',\n  OPENSHIFT = 'OPENSHIFT',\n  CAN_GET_NS = 'CAN_GET_NS',\n  CAN_LIST_NS = 'CAN_LIST_NS',\n  CAN_LIST_NODE = 'CAN_LIST_NODE',\n  CAN_LIST_PV = 'CAN_LIST_PV',\n  CAN_LIST_CRD = 'CAN_LIST_CRD',\n  CAN_LIST_CHARGEBACK_REPORTS = 'CAN_LIST_CHARGEBACK_REPORTS',\n  CAN_LIST_USERS = 'CAN_LIST_USERS',\n  CAN_LIST_GROUPS = 'CAN_LIST_GROUPS',\n  CAN_LIST_OPERATOR_GROUP = 'CAN_LIST_OPERATOR_GROUP',\n  CAN_LIST_PACKAGE_MANIFEST = 'CAN_LIST_PACKAGE_MANIFEST',\n  CAN_CREATE_PROJECT = 'CAN_CREATE_PROJECT',\n  SHOW_OPENSHIFT_START_GUIDE = 'SHOW_OPENSHIFT_START_GUIDE',\n  SERVICE_CATALOG = 'SERVICE_CATALOG',\n  CLUSTER_API = 'CLUSTER_API',\n  CLUSTER_VERSION = 'CLUSTER_VERSION',\n  MACHINE_CONFIG = 'MACHINE_CONFIG',\n  MACHINE_AUTOSCALER = 'MACHINE_AUTOSCALER',\n  MACHINE_HEALTH_CHECK = 'MACHINE_HEALTH_CHECK',\n  CONSOLE_CLI_DOWNLOAD = 'CONSOLE_CLI_DOWNLOAD',\n  CONSOLE_NOTIFICATION = 'CONSOLE_NOTIFICATION',\n  CONSOLE_EXTERNAL_LOG_LINK = 'CONSOLE_EXTERNAL_LOG_LINK',\n  CONSOLE_YAML_SAMPLE = 'CONSOLE_YAML_SAMPLE',\n}\n","export * from './pod';\nexport * from './resource';\nexport * from './common';\nexport * from './ui';\n","export enum AllPodStatus {\n  Running = 'Running',\n  NotReady = 'Not Ready',\n  Warning = 'Warning',\n  Empty = 'Empty',\n  Failed = 'Failed',\n  Pending = 'Pending',\n  Succeeded = 'Succeeded',\n  Terminating = 'Terminating',\n  Unknown = 'Unknown',\n  ScaledTo0 = 'Scaled to 0',\n  Idle = 'Idle',\n  AutoScaledTo0 = 'Autoscaled to 0',\n  ScalingUp = 'Scaling Up',\n  CrashLoopBackOff = 'CrashLoopBackOff',\n}\n\nexport const podColor = {\n  [AllPodStatus.Running]: '#0066CC',\n  [AllPodStatus.NotReady]: '#519DE9',\n  [AllPodStatus.Warning]: '#F0AB00',\n  [AllPodStatus.Empty]: '#FFFFFF',\n  [AllPodStatus.Failed]: '#CC0000',\n  [AllPodStatus.Pending]: '#8BC1F7',\n  [AllPodStatus.Succeeded]: '#519149',\n  [AllPodStatus.Terminating]: '#002F5D',\n  [AllPodStatus.Unknown]: '#A18FFF',\n  [AllPodStatus.ScaledTo0]: '#FFFFFF',\n  [AllPodStatus.Idle]: '#FFFFFF',\n  [AllPodStatus.AutoScaledTo0]: '#FFFFFF',\n  [AllPodStatus.ScalingUp]: '#FFFFFF',\n  [AllPodStatus.CrashLoopBackOff]: '#CC0000',\n};\n","// List of container status waiting reason values that we should call out as errors in project status rows.\nexport const CONTAINER_WAITING_STATE_ERROR_REASONS = [\n  'CrashLoopBackOff',\n  'ErrImagePull',\n  'ImagePullBackOff',\n];\n\n// Annotation key for deployment config latest version\nexport const DEPLOYMENT_CONFIG_LATEST_VERSION_ANNOTATION =\n  'openshift.io/deployment-config.latest-version';\n\nexport const DEPLOYMENT_CONFIG_NAME_ANNOTATION = 'openshift.io/deployment-config.name';\n\n// Annotation key for deployment phase\nexport const DEPLOYMENT_PHASE_ANNOTATION = 'openshift.io/deployment.phase';\n\n// Annotaton key for deployment revision\nexport const DEPLOYMENT_REVISION_ANNOTATION = 'deployment.kubernetes.io/revision';\n\n// Display name for default overview group.\n// Should not be a valid label key to avoid conflicts. https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-setexport\nexport const DEFAULT_GROUP_NAME = 'other resources';\n\n// Interval at which metrics are retrieved and updated\nexport const METRICS_POLL_INTERVAL = 30 * 1000;\n\n// Annotation key for image triggers\nexport const TRIGGERS_ANNOTATION = 'image.openshift.io/triggers';\n\nexport enum DEPLOYMENT_STRATEGY {\n  rolling = 'Rolling',\n  recreate = 'Recreate',\n}\n\nexport enum DEPLOYMENT_PHASE {\n  new = 'New',\n  running = 'Running',\n  pending = 'Pending',\n  complete = 'Complete',\n  failed = 'Failed',\n  cancelled = 'Cancelled',\n}\n","export const DASH = '-';\n","import * as _ from 'lodash';\nimport { DataPoint } from '@console/internal/components/graphs';\nimport { getType } from '@console/internal/components/utils/units';\n\nconst log = (x: number, y: number) => {\n  return Math.log(y) / Math.log(x);\n};\n\n// Get the larget unit seen in the dataframe within the supported range\nconst bestUnit = (dataPoints: DataPoint[][], type) => {\n  const flattenDataPoints = dataPoints.reduce((acc, arr) => acc.concat(arr), []);\n\n  const bestLevel = flattenDataPoints.reduce((maxUnit, point) => {\n    const index = Math.floor(log(_.get(type, 'divisor', 1024), point.y));\n    const unitIndex = index >= type.units.length ? type.units.length - 1 : index;\n    return maxUnit < unitIndex ? unitIndex : maxUnit;\n  }, -1);\n  return _.get(type, ['units', bestLevel]);\n};\n\n// Array based procssor\nexport const processFrame = (dataPoints: DataPoint[][], typeName: string): ProcessFrameResult => {\n  const type = getType(typeName);\n  let unit = null;\n  if (dataPoints && dataPoints[0]) {\n    // Get the appropriate unit and convert the dataset to that level\n    unit = bestUnit(dataPoints, type);\n    const frameLevel = type.units.indexOf(unit);\n    dataPoints.forEach((arr) =>\n      arr.forEach((point) => {\n        point.y /= type.divisor ** frameLevel;\n      }),\n    );\n  }\n  return { processedData: dataPoints, unit };\n};\n\nexport type ProcessFrameResult = {\n  processedData: DataPoint[][];\n  unit: string;\n};\n\nexport enum ByteDataTypes {\n  BinaryBytes = 'binaryBytes',\n  BinaryBytesWithoutB = 'binaryBytesWithoutB',\n  DecimalBytes = 'decimalBytes',\n  DecimalBytesWithoutB = 'decimalBytesWithoutB',\n}\n","import { useCallback } from 'react';\nimport { debounce } from 'lodash';\n\nexport const useDebounceCallback = <T extends (...args: any[]) => any>(\n  callback: T,\n  dependencies: any[],\n  timeout: number = 500,\n  debounceParams: { leading?: boolean; trailing?: boolean; maxWait?: number } = {\n    leading: false,\n    trailing: true,\n  },\n): T => useCallback(debounce(callback, timeout, debounceParams), dependencies);\n","import * as React from 'react';\nimport * as _ from 'lodash';\n\nexport const useDeepCompareMemoize = <T = any>(value: T): T => {\n  const ref = React.useRef<T>();\n\n  if (!_.isEqual(value, ref.current)) {\n    ref.current = value;\n  }\n\n  return ref.current;\n};\n","import * as React from 'react';\nimport { isModalOpen } from '@console/internal/components/modals';\nimport { KEYBOARD_SHORTCUTS } from '../constants/common';\n\n/**\n * Use this hook for components that require visibility only\n * when the user is actively interacting with the document.\n */\n\nexport enum KeyEventModes {\n  HIDE = 'HIDE',\n  FOCUS = 'FOCUS',\n}\n\nconst textInputKeyHandler = {\n  [KEYBOARD_SHORTCUTS.blurFilterInput]: KeyEventModes.HIDE,\n  [KEYBOARD_SHORTCUTS.focusFilterInput]: KeyEventModes.FOCUS,\n};\n\nexport const useDocumentListener = <T extends HTMLElement>(\n  keyEventMap: KeyEventMap = textInputKeyHandler,\n) => {\n  const [visible, setVisible] = React.useState(true);\n  const ref = React.useRef<T>(null);\n\n  const handleEvent = (e) => {\n    if (!ref?.current?.contains(e.target)) {\n      setVisible(false);\n    }\n  };\n\n  const handleKeyEvents = (e) => {\n    // Don't steal focus from a modal open on top of the page.\n    if (isModalOpen()) {\n      return;\n    }\n    const { nodeName } = e.target;\n    switch (keyEventMap[e.key]) {\n      case KeyEventModes.HIDE:\n        setVisible(false);\n        ref.current.blur();\n        break;\n      case KeyEventModes.FOCUS:\n        if (\n          document.activeElement !== ref.current &&\n          // Don't steal focus if the user types the focus shortcut in another text input.\n          nodeName !== 'INPUT' &&\n          nodeName !== 'TEXTAREA'\n        ) {\n          ref.current.focus();\n          e.preventDefault();\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  React.useEffect(() => {\n    document.addEventListener('click', handleEvent, true);\n    document.addEventListener('keydown', handleKeyEvents, true);\n    return () => {\n      document.removeEventListener('click', handleEvent, true);\n      document.removeEventListener('keydown', handleKeyEvents, true);\n    };\n  });\n\n  return { visible, setVisible, ref };\n};\n\nexport type KeyEventMap = {\n  [key: string]: KeyEventModes;\n};\n","import * as React from 'react';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { useDeepCompareMemoize } from './deep-compare-memoize';\n\nexport const useFormikValidationFix = (value: any) => {\n  const { validateForm } = useFormikContext<FormikValues>();\n  const memoizedValue = useDeepCompareMemoize(value);\n\n  React.useEffect(() => {\n    validateForm();\n  }, [memoizedValue, validateForm]);\n};\n","import * as React from 'react';\n\ntype FullScreenAPI = {\n  requestFullscreen: string;\n  exitFullscreen: string;\n  fullscreenElement: string;\n  fullscreenEnabled: string;\n  fullscreenchange: string;\n  fullscreenerror: string;\n};\n\nconst spec: FullScreenAPI = {\n  requestFullscreen: 'requestFullscreen',\n  exitFullscreen: 'exitFullscreen',\n  fullscreenElement: 'fullscreenElement',\n  fullscreenEnabled: 'fullscreenEnabled',\n  fullscreenchange: 'fullscreenchange',\n  fullscreenerror: 'fullscreenerror',\n};\n\nconst moz: FullScreenAPI = {\n  requestFullscreen: 'mozRequestFullscreen',\n  exitFullscreen: 'mozExitFullscreen',\n  fullscreenElement: 'mozFullscreenElement',\n  fullscreenEnabled: 'mozFullscreenEnabled',\n  fullscreenchange: 'mozfullscreenchange',\n  fullscreenerror: 'mozfullscreenerror',\n};\n\nconst webkit: FullScreenAPI = {\n  requestFullscreen: 'webkitRequestFullscreen',\n  exitFullscreen: 'webkitExitFullscreen',\n  fullscreenElement: 'webkitFullscreenElement',\n  fullscreenEnabled: 'webkitFullscreenEnabled',\n  fullscreenchange: 'webkitfullscreenchange',\n  fullscreenerror: 'webkitfullscreenerror',\n};\n\nconst ms: FullScreenAPI = {\n  requestFullscreen: 'msRequestFullscreen',\n  exitFullscreen: 'msExitFullscreen',\n  fullscreenElement: 'msFullscreenElement',\n  fullscreenEnabled: 'msFullscreenEnabled',\n  fullscreenchange: 'msfullscreenchange',\n  fullscreenerror: 'msfullscreenerror',\n};\n\nconst allPrefixes: FullScreenAPI[] = [spec, moz, webkit, ms];\n\nconst nativeAPI: FullScreenAPI =\n  (function(doc) {\n    return allPrefixes.find((x: FullScreenAPI) => !!doc[x.fullscreenEnabled]);\n  })(document) ?? spec;\n\nexport const useFullscreen = <T extends HTMLElement>(): [\n  boolean,\n  (node: T) => void,\n  () => void,\n  boolean,\n] => {\n  const [isFullscreen, setIsFullscreen] = React.useState<boolean>(false);\n  const fullscreenRef = React.useRef<boolean>(isFullscreen);\n  fullscreenRef.current = isFullscreen;\n  const elementRef = React.useRef<any>();\n\n  const listener = React.useCallback((event) => {\n    setIsFullscreen(document[nativeAPI.fullscreenElement] === event.target);\n  }, []);\n\n  const targetCallbackRef = React.useCallback(\n    (node: T) => {\n      if (document[nativeAPI.fullscreenEnabled]) {\n        if (elementRef.current && elementRef.current !== node) {\n          elementRef.current.removeEventListener(nativeAPI.fullscreenchange, listener);\n          elementRef.current.removeEventListener(nativeAPI.fullscreenerror, listener);\n        }\n        if (node != null) {\n          elementRef.current = node;\n          node.addEventListener(nativeAPI.fullscreenchange, listener);\n          node.addEventListener(nativeAPI.fullscreenerror, listener);\n        }\n      }\n    },\n    [listener],\n  );\n\n  const fullscreenToggleCallback = React.useCallback(() => {\n    if (elementRef.current && document[nativeAPI.fullscreenEnabled]) {\n      fullscreenRef.current\n        ? document[nativeAPI.exitFullscreen]()\n        : elementRef.current[nativeAPI.requestFullscreen]();\n    }\n  }, []);\n\n  return [\n    isFullscreen,\n    targetCallbackRef,\n    fullscreenToggleCallback,\n    document[nativeAPI.fullscreenEnabled],\n  ];\n};\n","export * from './formik-validation-fix';\nexport * from './deep-compare-memoize';\nexport * from './document-listener';\nexport * from './fullscreen';\nexport * from './scroll';\nexport * from './plugins-overview-tab-section';\nexport * from './debounce';\n","import * as React from 'react';\nimport { AsyncComponent, AsyncComponentProps } from '@console/internal/components/utils';\nimport { OverviewTabSection, isOverviewTabSection, useExtensions } from '@console/plugin-sdk';\nimport { OverviewItem } from '../types';\n\nexport const getResourceTabSectionComp = (t: OverviewTabSection): React.FC<AsyncComponentProps> => (\n  props: AsyncComponentProps,\n) => React.createElement(AsyncComponent, { ...props, loader: t.properties.loader });\n\nexport const usePluginsOverviewTabSection = (\n  item: OverviewItem,\n): { Component: React.FC<AsyncComponentProps>; key: string }[] => {\n  const tabSections = useExtensions(isOverviewTabSection);\n  return React.useMemo(\n    () =>\n      tabSections\n        .filter((section) => item[section.properties.key])\n        .map((section: OverviewTabSection) => ({\n          Component: getResourceTabSectionComp(section),\n          key: section.properties.key,\n        })),\n    // `item` is complex object but we only use the presence of keys as a dependency\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [JSON.stringify(Object.keys(item).sort())],\n  );\n};\n","import * as React from 'react';\n\nexport enum ScrollDirection {\n  scrollingUp = 'scrolling-up',\n  scrollingDown = 'scrolling-down',\n  scrolledToBottom = 'scrolled-to-bottom',\n  scrolledToTop = 'scrolled-to-top',\n}\n\nexport const getScrollDirection = (\n  prevScrollTop: number,\n  currentScrollTop: number,\n  scrollHeight: number,\n  clientHeight: number,\n) => {\n  let direction;\n  if (scrollHeight - currentScrollTop === clientHeight) {\n    direction = ScrollDirection.scrolledToBottom;\n  } else if (currentScrollTop === 0) {\n    direction = ScrollDirection.scrolledToTop;\n  } else if (prevScrollTop > currentScrollTop) {\n    direction = ScrollDirection.scrollingUp;\n  } else if (prevScrollTop < currentScrollTop) {\n    direction = ScrollDirection.scrollingDown;\n  }\n  return direction;\n};\n\nexport const useScrollDirection = (): [ScrollDirection, (event) => void] => {\n  const scrollPosition = React.useRef<number>(null);\n  const [scrollDirection, setScrollDirection] = React.useState<ScrollDirection>(null);\n  const handleScroll = React.useCallback(\n    (event) => {\n      const { scrollHeight, scrollTop, clientHeight } = event.target;\n      if (scrollPosition.current !== null) {\n        const direction = getScrollDirection(\n          scrollPosition.current,\n          scrollTop,\n          scrollHeight,\n          clientHeight,\n        );\n        if (direction && direction !== scrollDirection) setScrollDirection(direction);\n      }\n      scrollPosition.current = scrollTop;\n    },\n    [scrollDirection],\n  );\n\n  return [scrollDirection, handleScroll];\n};\n","module.exports = __webpack_public_path__ + \"assets/operator.svg\";","export * from './components';\nexport * from './constants';\nexport * from './selectors';\nexport * from './types';\nexport * from './utils';\nexport * from './hooks';\nexport * from './sorts';\n","import * as _ from 'lodash';\nimport { K8sResourceCommon } from '@console/internal/module/k8s';\n\nexport const hasLabel = (obj: K8sResourceCommon, label: string): boolean =>\n  _.has(obj, ['metadata', 'labels', label]);\nexport const getName = <A extends K8sResourceCommon = K8sResourceCommon>(value: A) =>\n  _.get(value, 'metadata.name') as K8sResourceCommon['metadata']['name'];\nexport const getNamespace = <A extends K8sResourceCommon = K8sResourceCommon>(value: A) =>\n  _.get(value, 'metadata.namespace') as K8sResourceCommon['metadata']['namespace'];\nexport const getUID = <A extends K8sResourceCommon = K8sResourceCommon>(value: A) =>\n  _.get(value, 'metadata.uid') as K8sResourceCommon['metadata']['uid'];\nexport const getDeletetionTimestamp = <A extends K8sResourceCommon = K8sResourceCommon>(value: A) =>\n  _.get(value, 'metadata.deletionTimestamp') as K8sResourceCommon['metadata']['deletionTimestamp'];\nexport const getCreationTimestamp = <A extends K8sResourceCommon = K8sResourceCommon>(value: A) =>\n  _.get(value, 'metadata.creationTimestamp') as K8sResourceCommon['metadata']['creationTimestamp'];\nexport const getAPIVersion = <A extends K8sResourceCommon = K8sResourceCommon>(value: A) =>\n  _.get(value, 'apiVersion') as K8sResourceCommon['apiVersion'];\nexport const getKind = <A extends K8sResourceCommon = K8sResourceCommon>(value: A) =>\n  _.get(value, 'kind') as K8sResourceCommon['kind'];\nexport const getOwnerReferences = <A extends K8sResourceCommon = K8sResourceCommon>(value: A) =>\n  _.get(value, 'metadata.ownerReferences') as K8sResourceCommon['metadata']['ownerReferences'];\nexport const getLabels = <A extends K8sResourceCommon = K8sResourceCommon>(\n  value: A,\n  defaultValue?: K8sResourceCommon['metadata']['labels'],\n) => (_.has(value, 'metadata.labels') ? value.metadata.labels : defaultValue);\nexport const getLabel = <A extends K8sResourceCommon = K8sResourceCommon>(\n  value: A,\n  label: string,\n  defaultValue?: string,\n) => (_.has(value, 'metadata.labels') ? value.metadata.labels[label] : defaultValue);\nexport const getAnnotations = <A extends K8sResourceCommon = K8sResourceCommon>(\n  value: A,\n  defaultValue?: K8sResourceCommon['metadata']['annotations'],\n) => (_.has(value, 'metadata.annotations') ? value.metadata.annotations : defaultValue);\n","export * from './common';\nexport * from './infrastructure';\nexport * from './pod';\nexport * from './machine';\nexport * from './namespace';\nexport * from './node';\n","import { K8sResourceKind } from '@console/internal/module/k8s';\n\nexport const getInfrastructurePlatform = (infrastructure: K8sResourceKind): string =>\n  infrastructure && infrastructure.status ? infrastructure.status.platform : undefined;\nexport const getInfrastructureAPIURL = (infrastructure: K8sResourceKind): string =>\n  infrastructure && infrastructure.status ? infrastructure.status.apiServerURL : undefined;\n","import {\n  MachineAWSPlacement,\n  MachineKind,\n  MachineSetKind,\n  MachineDeploymentKind,\n  NodeKind,\n} from '@console/internal/module/k8s';\nimport { getName } from './common';\n\nexport const getMachineRole = (obj: MachineKind | MachineSetKind | MachineDeploymentKind): string =>\n  obj?.metadata?.labels?.['machine.openshift.io/cluster-api-machine-role'];\n\nexport const getMachineInstanceType = (obj: MachineKind): string =>\n  obj?.metadata?.labels?.['machine.openshift.io/instance-type'];\n\nexport const getMachineRegion = (obj: MachineKind): string =>\n  obj?.metadata?.labels?.['machine.openshift.io/region'];\n\nexport const getMachineZone = (obj: MachineKind): string =>\n  obj?.metadata?.labels?.['machine.openshift.io/zone'];\n\n// Machine sets don't have the region and zone labels. Use `providerSpec` if set.\nexport const getMachineAWSPlacement = (\n  machineSet: MachineSetKind | MachineDeploymentKind,\n): MachineAWSPlacement => machineSet?.spec?.template?.spec?.providerSpec?.value?.placement || {};\n\nexport const getMachineNodeName = (obj: MachineKind) => obj?.status?.nodeRef?.name;\n\nexport const getMachineNode = (machine: MachineKind, nodes: NodeKind[] = []): NodeKind =>\n  nodes.find((node) => getMachineNodeName(machine) === getName(node));\n\nexport const getMachineAddresses = (machine: MachineKind) => machine?.status?.addresses;\n\nexport const getMachinePhase = (obj: MachineKind): string => {\n  const phase = obj?.status?.phase;\n  return phase === 'Running' ? 'Provisioned as node' : phase;\n};\n","import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\n\nexport const getRequester = (obj: K8sResourceKind): string =>\n  _.get(obj, ['metadata', 'annotations', 'openshift.io/requester']);\n","import * as _ from 'lodash';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { NodeAddress, NodeCondition } from '../types';\n\nconst NODE_ROLE_PREFIX = 'node-role.kubernetes.io/';\n\nexport const getNodeRoles = (node: NodeKind): string[] => {\n  const labels = _.get(node, 'metadata.labels');\n  return _.reduce(\n    labels,\n    (acc: string[], v: string, k: string) => {\n      if (k.startsWith(NODE_ROLE_PREFIX)) {\n        acc.push(k.slice(NODE_ROLE_PREFIX.length));\n      }\n      return acc;\n    },\n    [],\n  );\n};\n\nexport const getNodeRole = (node: NodeKind): string =>\n  getNodeRoles(node).includes('master') ? 'master' : 'worker';\n\nexport const getNodeAddresses = (node: NodeKind): NodeAddress[] =>\n  _.get(node, 'status.addresses', []);\n\ntype NodeMachineAndNamespace = {\n  name: string;\n  namespace: string;\n};\nexport const getNodeMachineNameAndNamespace = (node: NodeKind): NodeMachineAndNamespace => {\n  const machine = _.get(node, 'metadata.annotations[\"machine.openshift.io/machine\"]', '/');\n  const [namespace, name] = machine.split('/');\n  return { namespace, name };\n};\n\nexport const getNodeMachineName = (node: NodeKind): string =>\n  getNodeMachineNameAndNamespace(node).name;\n\nexport const isNodeUnschedulable = (node: NodeKind): boolean =>\n  _.get(node, 'spec.unschedulable', false);\n\nexport const isNodeReady = (node: NodeKind): boolean => {\n  const conditions = _.get(node, 'status.conditions', []);\n  const readyState = _.find(conditions, { type: 'Ready' }) as NodeCondition;\n\n  return readyState && readyState.status === 'True';\n};\n\nexport const getNodeSecondaryStatus = (node: NodeKind): string[] => {\n  const states = [];\n  if (isNodeUnschedulable(node)) {\n    states.push('Scheduling disabled');\n  }\n  return states;\n};\n\nexport const getNodeCPUCapacity = (node: NodeKind): string => _.get(node.status, 'capacity.cpu');\n\nexport const getNodeAllocatableMemory = (node: NodeKind): string =>\n  _.get(node.status, 'allocatable.memory');\n\nexport const getNodeTaints = (node: NodeKind) => node?.spec?.taints;\n","import { PodKind } from '@console/internal/module/k8s';\n\nexport const getNodeName = (pod: PodKind): PodKind['spec']['nodeName'] =>\n  pod && pod.spec ? pod.spec.nodeName : undefined;\n\nexport const getPodContainers = (pod: PodKind): PodKind['spec']['containers'] =>\n  pod && pod.spec && pod.spec.containers ? pod.spec.containers : [];\nexport const getPodVolumes = (pod: PodKind): PodKind['spec']['volumes'] =>\n  pod && pod.spec && pod.spec.volumes ? pod.spec.volumes : [];\n","export * from './nodes';\n","import * as UIActions from '@console/internal/actions/ui';\nimport { NodeKind } from '@console/internal/module/k8s';\n\nexport const nodeMemory = (node: NodeKind): number => {\n  const used = UIActions.getNodeMetric(node, 'usedMemory');\n  const total = UIActions.getNodeMetric(node, 'totalMemory');\n  return total === 0 ? 0 : used / total;\n};\nexport const nodeFS = (node: NodeKind): number => {\n  const used = UIActions.getNodeMetric(node, 'usedStorage');\n  const total = UIActions.getNodeMetric(node, 'totalStorage');\n  return total === 0 ? 0 : used / total;\n};\nexport const nodeCPU = (node: NodeKind): number => Number(UIActions.getNodeMetric(node, 'cpu'));\nexport const nodePods = (node: NodeKind): number => Number(UIActions.getNodeMetric(node, 'pods'));\n","export * from './pod';\nexport * from './node';\nexport * from './resource';\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { resourceObjPath } from '@console/internal/components/utils';\nimport { K8sResourceKind, PodKind } from '@console/internal/module/k8s';\nimport { PodStatus } from '@console/internal/components/pod';\nimport { PodControllerOverviewItem } from '../types';\nimport { DaemonSetModel } from '@console/internal/models';\n\nexport const resourceStatus = (\n  obj: K8sResourceKind,\n  current?: PodControllerOverviewItem,\n  isRollingOut?: boolean,\n) => {\n  if (obj.kind === DaemonSetModel.kind) {\n    return (\n      <OverviewItemReadiness\n        desired={obj?.status?.desiredNumberScheduled}\n        ready={obj?.status?.currentNumberScheduled}\n        resource={obj}\n      />\n    );\n  }\n  return isRollingOut ? (\n    <span className=\"text-muted\">Rollout in progress...</span>\n  ) : (\n    <OverviewItemReadiness\n      desired={obj.spec.replicas}\n      ready={obj.status.replicas}\n      resource={current ? current.obj : obj}\n    />\n  );\n};\n\nexport const podStatus = (obj: PodKind) => {\n  return <PodStatus pod={obj} />;\n};\n\ntype OverviewItemReadinessProps = {\n  desired: number;\n  resource: K8sResourceKind;\n  ready: number;\n};\n\nexport const OverviewItemReadiness: React.FC<OverviewItemReadinessProps> = ({\n  desired = 0,\n  ready = 0,\n  resource,\n}) => {\n  const href = `${resourceObjPath(resource, resource.kind)}/pods`;\n  return (\n    <Link to={href}>\n      {ready} of {desired} pods\n    </Link>\n  );\n};\n","import * as _ from 'lodash';\n\nexport const joinGrammaticallyListOfItems = (items: string[], separator = 'and') => {\n  const result = items.join(', ');\n  const lastCommaIdx = result.lastIndexOf(',');\n\n  return items.length > 1 && lastCommaIdx >= 0\n    ? `${result.substr(0, lastCommaIdx)} ${separator}${result.substr(lastCommaIdx + 1)}`\n    : result;\n};\n\nexport const assureEndsWith = (sentence: string, appendix: string) => {\n  if (!sentence || !appendix || sentence.endsWith(appendix)) {\n    return sentence;\n  }\n\n  return `${sentence}${appendix}`;\n};\n\nexport const makeSentence = (sentence: string, capitalize = true) => {\n  const result = capitalize ? _.upperFirst(sentence) : sentence;\n  return assureEndsWith(result, '.');\n};\n\nexport const addMissingSubject = (sentence: string, subject: string) => {\n  const c = sentence ? sentence.charAt(0) : '';\n  if (c.toLowerCase() === c.toUpperCase() || c.toLowerCase() !== c) {\n    // c is an upper case letter\n    return sentence;\n  }\n  return subject ? `${_.upperFirst(subject)} ${sentence}` : sentence;\n};\n","import * as operatorLogo from '../images/operator.svg';\n\nexport type CSVIcon = { base64data: string; mediatype: string };\n\nexport const getImageForCSVIcon = (icon: CSVIcon | undefined) => {\n  return icon ? `data:${icon.mediatype};base64,${icon.base64data}` : operatorLogo;\n};\n\nexport const isIconUrl = (url: string): boolean => {\n  try {\n    // eslint-disable-next-line no-new\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nexport const getDefaultOperatorIcon = () => operatorLogo;\n","export * from './grammar';\nexport * from './utils';\nexport * from './pod-utils';\nexport * from './pod-ring-utils';\nexport * from './resource-utils';\nexport * from './transformResourceData';\nexport * from './validation';\nexport * from './table-utils';\nexport * from './storage-utils';\nexport * from './useCombineRefs';\nexport * from './icon-utils';\nexport * from './namespace';\nexport * from './label-filter';\n","import * as _ from 'lodash';\nimport { K8sResourceCommon } from '@console/internal/module/k8s';\nimport { toRequirements } from '@console/internal/module/k8s/selector';\nimport { requirementToString } from '@console/internal/module/k8s/selector-requirement';\n\nexport const getLabelsAsString = (obj: K8sResourceCommon): string[] => {\n  const { labels } = obj.metadata;\n  const requirements = toRequirements(labels);\n  return _.map(requirements, requirementToString);\n};\n","import { ALL_NAMESPACES_KEY } from '../constants/common';\n\nexport const formatNamespacedRouteForResource = (resource, namespace) =>\n  namespace === ALL_NAMESPACES_KEY\n    ? `/k8s/all-namespaces/${resource}`\n    : `/k8s/ns/${namespace}/${resource}`;\n","import { OwnerReference } from '@console/internal/module/k8s';\n\nexport const compareOwnerReference = (\n  obj: OwnerReference,\n  otherObj: OwnerReference,\n  compareModelOnly?: boolean,\n) => {\n  if (obj === otherObj) {\n    return true;\n  }\n  if (!obj || !otherObj) {\n    return false;\n  }\n  const isUIDEqual = obj.uid && otherObj.uid ? compareModelOnly || obj.uid === otherObj.uid : true;\n  const isNameEqual = compareModelOnly || obj.name === otherObj.name;\n\n  return (\n    obj.apiVersion === otherObj.apiVersion &&\n    obj.kind === otherObj.kind &&\n    isNameEqual &&\n    isUIDEqual\n  );\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  DeploymentConfigModel,\n  DeploymentModel,\n  DaemonSetModel,\n  StatefulSetModel,\n  ReplicationControllerModel,\n  ReplicaSetModel,\n  PodModel,\n} from '@console/internal/models';\nimport { ChartLabel } from '@patternfly/react-charts';\nimport {\n  K8sResourceKind,\n  K8sKind,\n  SelfSubjectAccessReviewKind,\n} from '@console/internal/module/k8s';\nimport { useSafetyFirst } from '@console/internal/components/safety-first';\nimport { PodRCData, PodRingResources, PodRingData, ExtPodKind } from '../types';\nimport { checkPodEditAccess, getPodStatus } from './pod-utils';\nimport { RevisionModel } from '@console/knative-plugin';\nimport {\n  getPodsForDeploymentConfigs,\n  getPodsForDeployments,\n  getPodsForStatefulSets,\n  getPodsForDaemonSets,\n} from './resource-utils';\nimport { AllPodStatus } from '../constants';\n\nimport './pod-ring-text.scss';\n\ntype PodRingLabelType = {\n  subTitle: string;\n  title: string;\n  titleComponent: React.ReactElement;\n};\n\nexport const podRingFirehoseProps = {\n  [PodModel.kind]: 'pods',\n  [ReplicaSetModel.kind]: 'replicaSets',\n  [ReplicationControllerModel.kind]: 'replicationControllers',\n  [DeploymentModel.kind]: 'deployments',\n  [DeploymentConfigModel.kind]: 'deploymentConfigs',\n  [StatefulSetModel.kind]: 'statefulSets',\n  [DaemonSetModel.kind]: 'daemonSets',\n};\n\nconst applyPods = (podsData: PodRingData, dc: PodRCData) => {\n  const {\n    pods,\n    current,\n    previous,\n    isRollingOut,\n    obj: {\n      metadata: { uid },\n    },\n  } = dc;\n  podsData[uid] = {\n    pods,\n    current,\n    previous,\n    isRollingOut,\n  };\n  return podsData;\n};\n\nconst pluralizeString = (count: number, singularString: string, expectedString?: string) =>\n  count && count > 1 ? expectedString || `${singularString}s` : singularString;\n\nconst isPendingPods = (\n  pods: ExtPodKind[],\n  currentPodCount: number,\n  desiredPodCount: number,\n): boolean =>\n  (pods?.length === 1 && pods[0].status?.phase === 'Pending') ||\n  (!currentPodCount && !!desiredPodCount);\n\nexport const getFailedPods = (pods: ExtPodKind[]): number => {\n  if (!pods?.length) {\n    return 0;\n  }\n\n  return pods.reduce((acc, currValue) => {\n    if ([AllPodStatus.CrashLoopBackOff, AllPodStatus.Failed].includes(getPodStatus(currValue))) {\n      return acc + 1;\n    }\n    return acc;\n  }, 0);\n};\n\nconst getTitleAndSubtitle = (\n  isPending: boolean,\n  currentPodCount: number,\n  desiredPodCount: number,\n) => {\n  let titlePhrase;\n  let subTitlePhrase = '';\n  let longSubtitle = false;\n\n  // handles the initial state when the first pod is coming up and the state for no pods(scaled to zero)\n  if (!currentPodCount) {\n    titlePhrase = isPending ? '0' : `Scaled to 0`;\n    if (desiredPodCount) {\n      subTitlePhrase = `scaling to ${desiredPodCount}`;\n      longSubtitle = true;\n    }\n  }\n\n  // handles the idle state or scaling to desired no. of pods\n  if (currentPodCount) {\n    titlePhrase = currentPodCount.toString();\n    if (currentPodCount === desiredPodCount) {\n      subTitlePhrase = pluralizeString(currentPodCount, 'pod');\n    } else {\n      subTitlePhrase = `scaling to ${desiredPodCount}`;\n      longSubtitle = true;\n    }\n  }\n\n  return { title: titlePhrase, subTitle: subTitlePhrase, longSubtitle };\n};\n\nconst getTitleComponent = (longSubtitle: boolean = false, reversed: boolean = false) =>\n  React.createElement(ChartLabel, {\n    dy: longSubtitle ? -5 : 0,\n    style: { lineHeight: '11px' },\n    className: `pf-chart-donut-title ${\n      reversed ? 'pod-ring__center-text--reversed' : 'pod-ring__center-text'\n    }`,\n  });\n\nexport const podRingLabel = (\n  obj: K8sResourceKind,\n  ownerKind: string,\n  pods: ExtPodKind[],\n): PodRingLabelType => {\n  let currentPodCount;\n  let desiredPodCount;\n  let title;\n  let subTitle;\n  let isPending;\n  let titleData;\n  const failedPodCount = getFailedPods(pods);\n  switch (ownerKind) {\n    case DaemonSetModel.kind:\n      currentPodCount = (obj.status?.currentNumberScheduled || 0) + failedPodCount;\n      desiredPodCount = obj.status?.desiredNumberScheduled;\n      desiredPodCount = obj.status?.desiredNumberScheduled;\n      isPending = isPendingPods(pods, currentPodCount, desiredPodCount);\n      titleData = getTitleAndSubtitle(isPending, currentPodCount, desiredPodCount);\n      return {\n        title: titleData.title,\n        subTitle: titleData.subTitle,\n        titleComponent: getTitleComponent(titleData.longSubtitle),\n      };\n    case RevisionModel.kind:\n      currentPodCount = (obj.status?.readyReplicas || 0) + failedPodCount;\n      desiredPodCount = obj.spec?.replicas;\n      isPending = isPendingPods(pods, currentPodCount, desiredPodCount);\n      if (!isPending && !desiredPodCount) {\n        title = 'Autoscaled';\n        subTitle = 'to 0';\n        return {\n          title,\n          subTitle,\n          titleComponent: getTitleComponent(false, true),\n        };\n      }\n      if (isPending) {\n        title = '0';\n        subTitle = `scaling to ${desiredPodCount}`;\n      } else {\n        title = currentPodCount;\n        subTitle = pluralizeString(currentPodCount, 'pod');\n      }\n      return {\n        title,\n        subTitle,\n        titleComponent: getTitleComponent(),\n      };\n    default:\n      currentPodCount = (obj.status?.readyReplicas || 0) + failedPodCount;\n      desiredPodCount = obj.spec?.replicas;\n      isPending = isPendingPods(pods, currentPodCount, desiredPodCount);\n      titleData = getTitleAndSubtitle(isPending, currentPodCount, desiredPodCount);\n      return {\n        title: titleData.title,\n        subTitle: titleData.subTitle,\n        titleComponent: getTitleComponent(titleData.longSubtitle),\n      };\n  }\n};\n\nexport const usePodScalingAccessStatus = (\n  obj: K8sResourceKind,\n  resourceKind: K8sKind,\n  pods: ExtPodKind[],\n  enableScaling?: boolean,\n  impersonate?: string,\n) => {\n  const [editable, setEditable] = useSafetyFirst(false);\n  React.useEffect(() => {\n    checkPodEditAccess(obj, resourceKind, impersonate)\n      .then((resp: SelfSubjectAccessReviewKind) =>\n        setEditable(_.get(resp, 'status.allowed', false)),\n      )\n      .catch((error) => {\n        // console.log is used here instead of throw error\n        // throw error will break the thread and likely end-up in a white screen\n        // eslint-disable-next-line\n        console.log(error);\n        setEditable(false);\n      });\n  }, [pods, obj, resourceKind, impersonate, setEditable]);\n\n  const isKnativeRevision = obj.kind === 'Revision';\n  const isScalingAllowed = !isKnativeRevision && editable && enableScaling;\n  return isScalingAllowed;\n};\n\nexport const transformPodRingData = (resources: PodRingResources, kind: string): PodRingData => {\n  const targetResource = podRingFirehoseProps[kind];\n\n  if (!targetResource) {\n    throw new Error(`Invalid target resource: (${targetResource})`);\n  }\n  if (_.isEmpty(resources[targetResource].data)) {\n    return {};\n  }\n\n  const podsData: PodRingData = {};\n  const resourceData = resources[targetResource].data;\n\n  if (kind === DeploymentConfigModel.kind) {\n    return getPodsForDeploymentConfigs(resourceData, resources).reduce(applyPods, podsData);\n  }\n\n  if (kind === DeploymentModel.kind) {\n    return getPodsForDeployments(resourceData, resources).reduce(applyPods, podsData);\n  }\n\n  if (kind === StatefulSetModel.kind) {\n    return getPodsForStatefulSets(resourceData, resources).reduce(applyPods, podsData);\n  }\n\n  if (kind === DaemonSetModel.kind) {\n    return getPodsForDaemonSets(resourceData, resources).reduce(applyPods, podsData);\n  }\n\n  return podsData;\n};\n","import * as _ from 'lodash';\nimport {\n  K8sResourceKind,\n  K8sKind,\n  SelfSubjectAccessReviewKind,\n  AccessReviewResourceAttributes,\n} from '@console/internal/module/k8s';\nimport { checkAccess } from '@console/internal/components/utils';\nimport { podColor, AllPodStatus, DEPLOYMENT_STRATEGY, DEPLOYMENT_PHASE } from '../constants';\nimport { ExtPodKind } from '../types/pod';\nimport { PodControllerOverviewItem, DeploymentStrategy } from '../types';\n\nexport const podStatus = Object.keys(podColor);\n\nconst isContainerFailedFilter = (containerStatus) => {\n  return containerStatus.state.terminated && containerStatus.state.terminated.exitCode !== 0;\n};\n\nexport const isContainerLoopingFilter = (containerStatus) => {\n  return (\n    containerStatus.state.waiting && containerStatus.state.waiting.reason === 'CrashLoopBackOff'\n  );\n};\n\nconst numContainersReadyFilter = (pod) => {\n  const {\n    status: { containerStatuses },\n  } = pod;\n  let numReady = 0;\n  _.forEach(containerStatuses, (status) => {\n    if (status.ready) {\n      numReady++;\n    }\n  });\n  return numReady;\n};\n\nconst isReady = (pod) => {\n  const {\n    spec: { containers },\n  } = pod;\n  const numReady = numContainersReadyFilter(pod);\n  const total = _.size(containers);\n\n  return numReady === total;\n};\n\nconst podWarnings = (pod) => {\n  const {\n    status: { phase, containerStatuses },\n  } = pod;\n  if (phase === AllPodStatus.Running && containerStatuses) {\n    return _.map(containerStatuses, (containerStatus) => {\n      if (!containerStatus.state) {\n        return null;\n      }\n\n      if (isContainerFailedFilter(containerStatus)) {\n        if (_.has(pod, ['metadata', 'deletionTimestamp'])) {\n          return AllPodStatus.Failed;\n        }\n        return AllPodStatus.Warning;\n      }\n      if (isContainerLoopingFilter(containerStatus)) {\n        return AllPodStatus.CrashLoopBackOff;\n      }\n      return null;\n    }).filter((x) => x);\n  }\n  return null;\n};\n\nexport const getPodStatus = (pod) => {\n  if (_.has(pod, ['metadata', 'deletionTimestamp'])) {\n    return AllPodStatus.Terminating;\n  }\n  const warnings = podWarnings(pod);\n  if (warnings !== null && warnings.length) {\n    if (warnings.includes(AllPodStatus.CrashLoopBackOff)) {\n      return AllPodStatus.CrashLoopBackOff;\n    }\n    if (warnings.includes(AllPodStatus.Failed)) {\n      return AllPodStatus.Failed;\n    }\n    return AllPodStatus.Warning;\n  }\n  const phase = _.get(pod, ['status', 'phase'], AllPodStatus.Unknown);\n  if (phase === AllPodStatus.Running && !isReady(pod)) {\n    return AllPodStatus.NotReady;\n  }\n  return phase;\n};\n\nexport const calculateRadius = (size: number) => {\n  const radius = size / 2;\n  const podStatusStrokeWidth = (8 / 104) * size;\n  const podStatusInset = (5 / 104) * size;\n  const podStatusOuterRadius = radius - podStatusInset;\n  const podStatusInnerRadius = podStatusOuterRadius - podStatusStrokeWidth;\n  const decoratorRadius = radius * 0.25;\n\n  return {\n    radius,\n    podStatusInnerRadius,\n    podStatusOuterRadius,\n    decoratorRadius,\n    podStatusStrokeWidth,\n    podStatusInset,\n  };\n};\n\nexport const checkPodEditAccess = (\n  resource: K8sResourceKind,\n  resourceKind: K8sKind,\n  impersonate: string,\n): Promise<SelfSubjectAccessReviewKind> => {\n  if (_.isEmpty(resource) || !resourceKind) {\n    return Promise.resolve(null);\n  }\n  const { name, namespace } = resource.metadata;\n  const resourceAttributes: AccessReviewResourceAttributes = {\n    group: resourceKind.apiGroup,\n    resource: resourceKind.plural,\n    verb: 'patch',\n    name,\n    namespace,\n  };\n  return checkAccess(resourceAttributes, impersonate);\n};\n\n/**\n * check if config is knative serving resource.\n * @param configRes\n * @param properties\n */\nexport const isKnativeServing = (configRes: K8sResourceKind, properties: string): boolean => {\n  const deploymentsLabels = _.get(configRes, properties) || {};\n  return !!deploymentsLabels['serving.knative.dev/configuration'];\n};\n\n/**\n * check if the deployment/deploymentconfig is idled.\n * @param deploymentConfig\n */\nexport const isIdled = (deploymentConfig: K8sResourceKind): boolean => {\n  return !!_.get(\n    deploymentConfig,\n    'metadata.annotations[\"idling.alpha.openshift.io/idled-at\"]',\n    false,\n  );\n};\n\nconst getScalingUp = (dc: K8sResourceKind): ExtPodKind => {\n  return {\n    ..._.pick(dc, 'metadata'),\n    status: {\n      phase: AllPodStatus.ScalingUp,\n    },\n  };\n};\n\nexport const podDataInProgress = (\n  dc: K8sResourceKind,\n  current: PodControllerOverviewItem,\n  isRollingOut: boolean,\n): boolean => {\n  const strategy: DeploymentStrategy = dc?.spec?.strategy?.type;\n  return (\n    current?.phase !== DEPLOYMENT_PHASE.complete &&\n    (strategy === DEPLOYMENT_STRATEGY.recreate || strategy === DEPLOYMENT_STRATEGY.rolling) &&\n    isRollingOut\n  );\n};\n\nexport const getPodData = (\n  dc: K8sResourceKind,\n  pods: ExtPodKind[],\n  current: PodControllerOverviewItem,\n  previous: PodControllerOverviewItem,\n  isRollingOut: boolean,\n): { inProgressDeploymentData: ExtPodKind[] | null; completedDeploymentData: ExtPodKind[] } => {\n  const strategy: DeploymentStrategy = _.get(dc, ['spec', 'strategy', 'type'], null);\n  const currentDeploymentphase = current && current.phase;\n  const currentPods = current && current.pods;\n  const previousPods = previous && previous.pods;\n  // DaemonSets and StatefulSets\n  if (!strategy) return { inProgressDeploymentData: null, completedDeploymentData: pods };\n\n  // Scaling no. of pods\n  if (currentDeploymentphase === DEPLOYMENT_PHASE.complete) {\n    return { inProgressDeploymentData: null, completedDeploymentData: currentPods };\n  }\n\n  // Deploy - Rolling - Recreate\n  if (\n    (strategy === DEPLOYMENT_STRATEGY.recreate || strategy === DEPLOYMENT_STRATEGY.rolling) &&\n    isRollingOut\n  ) {\n    return {\n      inProgressDeploymentData: currentPods,\n      completedDeploymentData: previousPods,\n    };\n  }\n  // if build is not finished show `Scaling Up` on pod phase\n  if (!current && !previous) {\n    return { inProgressDeploymentData: null, completedDeploymentData: [getScalingUp(dc)] };\n  }\n  return { inProgressDeploymentData: null, completedDeploymentData: pods };\n};\n","import * as _ from 'lodash';\nimport {\n  DeploymentKind,\n  K8sResourceKind,\n  LabelSelector,\n  PodKind,\n  PodTemplate,\n  RouteKind,\n  apiVersionForModel,\n  referenceForModel,\n  K8sKind,\n  ObjectMetadata,\n} from '@console/internal/module/k8s';\nimport {\n  DeploymentConfigModel,\n  ReplicationControllerModel,\n  ReplicaSetModel,\n  DeploymentModel,\n  DaemonSetModel,\n  StatefulSetModel,\n  PodModel,\n} from '@console/internal/models';\nimport { getBuildNumber } from '@console/internal/module/k8s/builds';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport {\n  BuildConfigOverviewItem,\n  OverviewItemAlerts,\n  PodControllerOverviewItem,\n  OverviewItem,\n  PodRCData,\n  ExtPodKind,\n  OperatorBackedServiceKindMap,\n} from '../types';\nimport {\n  DEPLOYMENT_REVISION_ANNOTATION,\n  DEPLOYMENT_CONFIG_LATEST_VERSION_ANNOTATION,\n  TRIGGERS_ANNOTATION,\n  DEPLOYMENT_PHASE_ANNOTATION,\n  CONTAINER_WAITING_STATE_ERROR_REASONS,\n  DEPLOYMENT_STRATEGY,\n  DEPLOYMENT_PHASE,\n  AllPodStatus,\n} from '../constants';\nimport { resourceStatus, podStatus } from './ResourceStatus';\nimport { isKnativeServing, isIdled } from './pod-utils';\nimport {\n  ClusterServiceVersionModel,\n  ClusterServiceVersionKind,\n} from '@console/operator-lifecycle-manager';\n\nexport const getResourceList = (namespace: string, resList?: any) => {\n  let resources: FirehoseResource[] = [\n    {\n      isList: true,\n      kind: 'DeploymentConfig',\n      namespace,\n      prop: 'deploymentConfigs',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'Deployment',\n      namespace,\n      prop: 'deployments',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'DaemonSet',\n      namespace,\n      prop: 'daemonSets',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'Pod',\n      namespace,\n      prop: 'pods',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'ReplicationController',\n      namespace,\n      prop: 'replicationControllers',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'Route',\n      namespace,\n      prop: 'routes',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'Service',\n      namespace,\n      prop: 'services',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'ReplicaSet',\n      namespace,\n      prop: 'replicaSets',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'BuildConfig',\n      namespace,\n      prop: 'buildConfigs',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'Build',\n      namespace,\n      prop: 'builds',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'StatefulSet',\n      namespace,\n      prop: 'statefulSets',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'Secret',\n      namespace,\n      prop: 'secrets',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: referenceForModel(ClusterServiceVersionModel),\n      namespace,\n      prop: 'clusterServiceVersions',\n      optional: true,\n    },\n  ];\n\n  let utils = [];\n  if (resList) {\n    resList.forEach((resource) => {\n      resources = [...resources, ...resource.properties.resources(namespace)];\n      utils = [...utils, resource.properties.utils];\n    });\n  }\n\n  return { resources, utils };\n};\n\nexport const getResourcePausedAlert = (resource: K8sResourceKind): OverviewItemAlerts => {\n  if (!resource.spec.paused) {\n    return {};\n  }\n  return {\n    [`${resource.metadata.uid}--Paused`]: {\n      severity: 'info',\n      message: `${resource.metadata.name} is paused.`,\n    },\n  };\n};\n\nexport const getBuildAlerts = (buildConfigs: BuildConfigOverviewItem[]): OverviewItemAlerts => {\n  const buildAlerts = {};\n  const addAlert = (build: K8sResourceKind, buildPhase: string) =>\n    _.set(buildAlerts, `${build.metadata.uid}--build${buildPhase}`, {\n      severity: `build${buildPhase}`,\n      message: _.get(build, ['status', 'message'], buildPhase),\n    });\n\n  _.each(buildConfigs, (bc) => {\n    let seenComplete = false;\n    // Requires builds to be sorted by most recent first.\n    _.each(bc.builds, (build: K8sResourceKind) => {\n      const buildPhase = _.get(build, ['status', 'phase']);\n      switch (buildPhase) {\n        case 'Complete':\n          seenComplete = true;\n          break;\n        case 'Failed':\n        case 'Error':\n          if (!seenComplete) {\n            // show failure/error\n            addAlert(build, buildPhase);\n          }\n          break;\n        case 'New':\n        case 'Pending':\n        case 'Running':\n          // show new/pending/running\n          addAlert(build, buildPhase);\n          break;\n        default:\n          break;\n      }\n    });\n  });\n\n  return buildAlerts;\n};\n\nexport const getOwnedResources = <T extends K8sResourceKind>(\n  { metadata: { uid } }: K8sResourceKind,\n  resources: T[],\n): T[] => {\n  return _.filter(resources, ({ metadata: { ownerReferences } }) => {\n    return _.some(ownerReferences, {\n      uid,\n      controller: true,\n    });\n  });\n};\n\nconst sortByRevision = (\n  replicators: K8sResourceKind[],\n  getRevision: Function,\n  descending: boolean = true,\n): K8sResourceKind[] => {\n  const compare = (left, right) => {\n    const leftVersion = getRevision(left);\n    const rightVersion = getRevision(right);\n    if (!_.isFinite(leftVersion) && !_.isFinite(rightVersion)) {\n      const leftName = _.get(left, 'metadata.name', '');\n      const rightName = _.get(right, 'metadata.name', '');\n      if (descending) {\n        return rightName.localeCompare(leftName);\n      }\n      return leftName.localeCompare(rightName);\n    }\n\n    if (!leftVersion) {\n      return descending ? 1 : -1;\n    }\n\n    if (!rightVersion) {\n      return descending ? -1 : 1;\n    }\n\n    if (descending) {\n      return rightVersion - leftVersion;\n    }\n\n    return leftVersion - rightVersion;\n  };\n\n  return _.toArray(replicators).sort(compare);\n};\n\nconst getAnnotation = (obj: K8sResourceKind, annotation: string): string => {\n  return _.get(obj, ['metadata', 'annotations', annotation]);\n};\n\nexport const parseJSONAnnotation = (\n  annotations: ObjectMetadata['annotations'],\n  annotationKey: string,\n  onError?: (err: Error) => void,\n  defaultReturn?: any,\n): any => {\n  try {\n    return annotations?.[annotationKey] ? JSON.parse(annotations?.[annotationKey]) : defaultReturn;\n  } catch (e) {\n    onError && onError(e);\n    // eslint-disable-next-line no-console\n    console.warn(`Could not parse annotation ${annotationKey} as JSON: `, e);\n    return defaultReturn;\n  }\n};\n\nconst getDeploymentRevision = (obj: K8sResourceKind): number => {\n  const revision = getAnnotation(obj, DEPLOYMENT_REVISION_ANNOTATION);\n  return revision && parseInt(revision, 10);\n};\n\nconst getDeploymentConfigVersion = (obj: K8sResourceKind): number => {\n  const version = getAnnotation(obj, DEPLOYMENT_CONFIG_LATEST_VERSION_ANNOTATION);\n  return version && parseInt(version, 10);\n};\n\nconst getDeploymentConfigName = (obj: K8sResourceKind): string => {\n  return _.get(obj, 'metadata.ownerReferences[0].name', null);\n};\n\nexport const sortReplicaSetsByRevision = (replicaSets: K8sResourceKind[]): K8sResourceKind[] => {\n  return sortByRevision(replicaSets, getDeploymentRevision);\n};\n\nconst sortReplicationControllersByRevision = (\n  replicationControllers: K8sResourceKind[],\n): K8sResourceKind[] => {\n  return sortByRevision(replicationControllers, getDeploymentConfigVersion);\n};\n\nexport const sortBuilds = (builds: K8sResourceKind[]): K8sResourceKind[] => {\n  const byCreationTime = (left, right) => {\n    const leftCreationTime = new Date(_.get(left, 'metadata.creationTimestamp', Date.now()));\n    const rightCreationTime = new Date(_.get(right, 'metadata.creationTimestamp', Date.now()));\n    return rightCreationTime.getMilliseconds() - leftCreationTime.getMilliseconds();\n  };\n\n  const byBuildNumber = (left, right) => {\n    const leftBuildNumber = getBuildNumber(left);\n    const rightBuildNumber = getBuildNumber(right);\n    if (!_.isFinite(leftBuildNumber) || !_.isFinite(rightBuildNumber)) {\n      return byCreationTime(left, right);\n    }\n    return rightBuildNumber - leftBuildNumber;\n  };\n\n  return [...builds].sort(byBuildNumber);\n};\n\n// FIXME use parseJSONAnnotation helper\nconst getAnnotatedTriggers = (obj: K8sResourceKind) => {\n  const triggersJSON = getAnnotation(obj, TRIGGERS_ANNOTATION) || '[]';\n  try {\n    return JSON.parse(triggersJSON);\n  } catch (e) {\n    /* eslint-disable-next-line no-console */\n    console.error('Error parsing triggers annotation', e);\n    return [];\n  }\n};\n\nconst getDeploymentPhase = (rc: K8sResourceKind): DEPLOYMENT_PHASE =>\n  _.get(rc, ['metadata', 'annotations', DEPLOYMENT_PHASE_ANNOTATION]);\n\n// Only show an alert once if multiple pods have the same error for the same owner.\nconst podAlertKey = (alert: any, pod: K8sResourceKind, containerName: string = 'all'): string => {\n  const id = _.get(pod, 'metadata.ownerReferences[0].uid', pod.metadata.uid);\n  return `${alert}--${id}--${containerName}`;\n};\n\nconst getPodAlerts = (pod: K8sResourceKind): OverviewItemAlerts => {\n  const alerts = {};\n  const statuses = [\n    ..._.get(pod, 'status.initContainerStatuses', []),\n    ..._.get(pod, 'status.containerStatuses', []),\n  ];\n  statuses.forEach((status) => {\n    const { name, state } = status;\n    const waitingReason = _.get(state, 'waiting.reason');\n    if (CONTAINER_WAITING_STATE_ERROR_REASONS.includes(waitingReason)) {\n      const key = podAlertKey(waitingReason, pod, name);\n      const message = state.waiting.message || waitingReason;\n      alerts[key] = { severity: 'error', message };\n    }\n  });\n\n  _.get(pod, 'status.conditions', []).forEach((condition) => {\n    const { type, status, reason, message } = condition;\n    if (type === 'PodScheduled' && status === 'False' && reason === 'Unschedulable') {\n      // eslint-disable-next-line\n      const key = podAlertKey(reason, pod, name);\n      alerts[key] = {\n        severity: 'error',\n        message: `${reason}: ${message}`,\n      };\n    }\n  });\n\n  return alerts;\n};\n\nconst combinePodAlerts = (pods: K8sResourceKind[]): OverviewItemAlerts =>\n  _.reduce(\n    pods,\n    (acc, pod) => ({\n      ...acc,\n      ...getPodAlerts(pod),\n    }),\n    {},\n  );\n\nexport const getReplicationControllerAlerts = (rc: K8sResourceKind): OverviewItemAlerts => {\n  const phase = getDeploymentPhase(rc);\n  const version = getDeploymentConfigVersion(rc);\n  const name = getDeploymentConfigName(rc);\n  const label = _.isFinite(version) ? `${name} #${version}` : rc.metadata.name;\n  const key = `${rc.metadata.uid}--Rollout${phase}`;\n  switch (phase) {\n    case 'Cancelled':\n      return {\n        [key]: {\n          severity: 'info',\n          message: `Rollout ${label} was cancelled.`,\n        },\n      };\n    case 'Failed':\n      return {\n        [key]: {\n          severity: 'error',\n          message: `Rollout ${label} failed.`,\n        },\n      };\n    default:\n      return {};\n  }\n};\n\nconst getAutoscaledPods = (rc: K8sResourceKind): ExtPodKind[] => {\n  return [\n    {\n      ..._.pick(rc, 'metadata', 'status', 'spec'),\n      status: { phase: AllPodStatus.AutoScaledTo0 },\n    },\n  ];\n};\n\nconst getIdledStatus = (\n  rc: PodControllerOverviewItem,\n  dc: K8sResourceKind,\n): PodControllerOverviewItem => {\n  const { pods } = rc;\n  if (pods && !pods.length && isIdled(dc)) {\n    return {\n      ...rc,\n      // FIXME: This is not a PodKind.\n      pods: [\n        {\n          ..._.pick(rc.obj, 'metadata', 'status', 'spec'),\n          status: { phase: AllPodStatus.Idle },\n        },\n      ],\n    };\n  }\n  return rc;\n};\n\nexport const getRolloutStatus = (\n  dc: K8sResourceKind,\n  current: PodControllerOverviewItem,\n  previous: PodControllerOverviewItem,\n): boolean => {\n  const {\n    spec: {\n      strategy: { type: strategy },\n    },\n  } = dc;\n  const phase = current && current.phase;\n  const currentRC = current && current.obj;\n  const notFailedOrCancelled =\n    phase !== DEPLOYMENT_PHASE.cancelled && phase !== DEPLOYMENT_PHASE.failed;\n  if (strategy === DEPLOYMENT_STRATEGY.recreate) {\n    return (\n      notFailedOrCancelled &&\n      getDeploymentConfigVersion(currentRC) > 1 &&\n      phase !== DEPLOYMENT_PHASE.complete\n    );\n  }\n  return notFailedOrCancelled && previous && previous.pods.length > 0;\n};\n\nconst isDeploymentInProgressOrCompleted = (resource: K8sResourceKind): boolean => {\n  return (\n    [\n      DEPLOYMENT_PHASE.new,\n      DEPLOYMENT_PHASE.pending,\n      DEPLOYMENT_PHASE.running,\n      DEPLOYMENT_PHASE.complete,\n    ].indexOf(getDeploymentPhase(resource)) > -1\n  );\n};\n\nconst isReplicationControllerVisible = (resource: K8sResourceKind): boolean => {\n  return !!_.get(resource, ['status', 'replicas'], isDeploymentInProgressOrCompleted(resource));\n};\n\nexport const getOperatorBackedServiceKindMap = (\n  installedOperators: ClusterServiceVersionKind[],\n): OperatorBackedServiceKindMap =>\n  installedOperators\n    ? installedOperators.reduce((kindMap, csv) => {\n        (csv?.spec?.customresourcedefinitions?.owned || []).forEach((crd) => {\n          if (!(crd.kind in kindMap)) {\n            kindMap[crd.kind] = csv;\n          }\n        });\n        return kindMap;\n      }, {})\n    : {};\n\nexport const isOperatorBackedService = (\n  obj: K8sResourceKind,\n  installedOperators: ClusterServiceVersionKind[],\n): boolean => {\n  const kind = _.get(obj, 'metadata.ownerReferences[0].kind', null);\n  const ownerUid = _.get(obj, 'metadata.ownerReferences[0].uid');\n  const operatBackedServiceKindMap = getOperatorBackedServiceKindMap(installedOperators);\n  const operatorResource: K8sResourceKind = _.find(installedOperators, {\n    metadata: { uid: ownerUid },\n  }) as K8sResourceKind;\n  return (\n    kind &&\n    operatBackedServiceKindMap &&\n    (!_.isEmpty(operatorResource) || kind in operatBackedServiceKindMap)\n  );\n};\n\nexport const getPodsForResource = (resource: K8sResourceKind, resources: any): PodKind[] => {\n  const { pods } = resources;\n  return getOwnedResources(resource, pods.data);\n};\n\nexport const toReplicationControllerItem = (\n  rc: K8sResourceKind,\n  resources: any,\n): PodControllerOverviewItem => {\n  const pods = getPodsForResource(rc, resources);\n  const alerts = {\n    ...combinePodAlerts(pods),\n    ...getReplicationControllerAlerts(rc),\n  };\n  const phase = getDeploymentPhase(rc);\n  const revision = getDeploymentConfigVersion(rc);\n  const obj = {\n    ...rc,\n    apiVersion: apiVersionForModel(ReplicationControllerModel),\n    kind: ReplicationControllerModel.kind,\n  };\n  return {\n    alerts,\n    obj,\n    phase,\n    pods,\n    revision,\n  };\n};\n\nexport const getReplicationControllersForResource = (\n  resource: K8sResourceKind,\n  resources: any,\n): {\n  mostRecentRC: K8sResourceKind;\n  visibleReplicationControllers: PodControllerOverviewItem[];\n} => {\n  const { replicationControllers } = resources;\n  const ownedRC = getOwnedResources(resource, replicationControllers.data);\n  const sortedRCs = sortReplicationControllersByRevision(ownedRC);\n  // get the most recent RCs included failed or canceled to show warnings\n  const [mostRecentRC] = sortedRCs;\n  // get the visible RCs except failed/canceled\n  const visibleReplicationControllers = _.filter(sortedRCs, isReplicationControllerVisible);\n  return {\n    mostRecentRC,\n    visibleReplicationControllers: visibleReplicationControllers.map((rc) =>\n      getIdledStatus(toReplicationControllerItem(rc, resources), resource),\n    ),\n  };\n};\n\nconst toResourceItem = (\n  rs: K8sResourceKind,\n  model: K8sKind,\n  resources: any,\n): PodControllerOverviewItem => {\n  const obj = {\n    ...rs,\n    apiVersion: apiVersionForModel(model),\n    kind: `${model.kind}`,\n  };\n  const isKnative = isKnativeServing(rs, 'metadata.labels');\n  const podData = getPodsForResource(rs, resources);\n  const pods = podData && !podData.length && isKnative ? getAutoscaledPods(rs) : podData;\n  const alerts = combinePodAlerts(pods);\n  return {\n    alerts,\n    obj,\n    pods,\n    revision: getDeploymentRevision(rs),\n  };\n};\n\nconst getActiveStatefulSets = (ss: K8sResourceKind, resources: any): K8sResourceKind[] => {\n  const { statefulSets } = resources;\n  const ownedRS = _.filter(statefulSets?.data, (f) => f.metadata.name === ss.metadata.name);\n  return _.filter(ownedRS, (rs) => _.get(rs, 'status.replicas'));\n};\n\nexport const getStatefulSetsResource = (\n  ss: K8sResourceKind,\n  resources: any,\n): PodControllerOverviewItem[] => {\n  const activeStatefulSets = getActiveStatefulSets(ss, resources);\n  return activeStatefulSets.map((pss) =>\n    getIdledStatus(toResourceItem(pss, StatefulSetModel, resources), ss),\n  );\n};\n\nexport const getActiveReplicaSets = (\n  deployment: K8sResourceKind,\n  resources: any,\n): K8sResourceKind[] => {\n  const { replicaSets } = resources;\n  const currentRevision = getDeploymentRevision(deployment);\n  const ownedRS = getOwnedResources(deployment, replicaSets.data);\n  return _.filter(\n    ownedRS,\n    (rs) => _.get(rs, 'status.replicas') || getDeploymentRevision(rs) === currentRevision,\n  );\n};\n\nexport const getReplicaSetsForResource = (\n  deployment: K8sResourceKind,\n  resources: any,\n): PodControllerOverviewItem[] => {\n  const replicaSets = getActiveReplicaSets(deployment, resources);\n  return sortReplicaSetsByRevision(replicaSets).map((rs) =>\n    getIdledStatus(toResourceItem(rs, ReplicaSetModel, resources), deployment),\n  );\n};\n\nexport const getBuildsForResource = (\n  buildConfig: K8sResourceKind,\n  resources: any,\n): K8sResourceKind[] => {\n  const { builds } = resources;\n  return getOwnedResources(buildConfig, builds.data);\n};\n\nexport const getBuildConfigsForResource = (\n  resource: K8sResourceKind,\n  resources: any,\n): BuildConfigOverviewItem[] => {\n  const buildConfigs = _.get(resources, ['buildConfigs', 'data']);\n  const currentNamespace = resource.metadata.namespace;\n  const nativeTriggers = _.get(resource, 'spec.triggers');\n  const annotatedTriggers = getAnnotatedTriggers(resource);\n  const triggers = _.unionWith(nativeTriggers, annotatedTriggers, _.isEqual);\n  return _.flatMap(triggers, (trigger) => {\n    const triggerFrom = trigger.from || _.get(trigger, 'imageChangeParams.from', {});\n    if (triggerFrom.kind !== 'ImageStreamTag') {\n      return [];\n    }\n    return _.reduce(\n      buildConfigs,\n      (acc, buildConfig) => {\n        const triggerImageNamespace = triggerFrom.namespace || currentNamespace;\n        const triggerImageName = triggerFrom.name;\n        const targetImageNamespace = _.get(\n          buildConfig,\n          'spec.output.to.namespace',\n          currentNamespace,\n        );\n        const targetImageName = _.get(buildConfig, 'spec.output.to.name');\n        if (\n          triggerImageNamespace === targetImageNamespace &&\n          triggerImageName === targetImageName\n        ) {\n          const builds = getBuildsForResource(buildConfig, resources);\n          return [\n            ...acc,\n            {\n              ...buildConfig,\n              builds: sortBuilds(builds),\n            },\n          ];\n        }\n        return acc;\n      },\n      [],\n    );\n  });\n};\n\nexport const getPodTemplate = (resource: K8sResourceKind): PodTemplate => {\n  switch (resource.kind) {\n    case 'Pod':\n      return resource as PodKind;\n    case 'DeploymentConfig':\n      // Include labels automatically added to deployment config pods since a service\n      // might select them.\n      return _.defaultsDeep(\n        {\n          metadata: {\n            labels: {\n              deploymentconfig: resource.metadata.name,\n            },\n          },\n        },\n        resource.spec.template,\n      );\n    default:\n      return resource.spec.template;\n  }\n};\n\nexport const getRoutesForServices = (services: K8sResourceKind[], resources: any): RouteKind[] => {\n  const { routes } = resources;\n  return _.filter(routes.data, (route) => {\n    const name = _.get(route, 'spec.to.name');\n    return _.some(services, { metadata: { name } });\n  });\n};\n\nexport const getServicesForResource = (\n  resource: K8sResourceKind,\n  resources: any,\n): K8sResourceKind[] => {\n  const { services } = resources;\n  const template: PodTemplate = getPodTemplate(resource);\n  return _.filter(services.data, (service: K8sResourceKind) => {\n    const selector = new LabelSelector(_.get(service, 'spec.selector', {}));\n    return selector.matches(template);\n  });\n};\n\nexport const createDeploymentConfigItems = (\n  deploymentConfigs: K8sResourceKind[],\n  resources: any,\n  installedOperators: ClusterServiceVersionKind[],\n  utils?: Function[],\n  operatorsFilter?: boolean,\n): OverviewItem[] => {\n  const items = _.map(deploymentConfigs, (dc) => {\n    const obj: K8sResourceKind = {\n      ...dc,\n      apiVersion: apiVersionForModel(DeploymentConfigModel),\n      kind: DeploymentConfigModel.kind,\n    };\n    const { mostRecentRC, visibleReplicationControllers } = getReplicationControllersForResource(\n      obj,\n      resources,\n    );\n    const [current, previous] = visibleReplicationControllers;\n    const isRollingOut = getRolloutStatus(obj, current, previous);\n    const buildConfigs = getBuildConfigsForResource(obj, resources);\n    const services = getServicesForResource(obj, resources);\n    const routes = getRoutesForServices(services, resources);\n    const rolloutAlerts = mostRecentRC ? getReplicationControllerAlerts(mostRecentRC) : {};\n    const alerts = {\n      ...getResourcePausedAlert(obj),\n      ...getBuildAlerts(buildConfigs),\n      ...rolloutAlerts,\n    };\n    const status = resourceStatus(obj, current, isRollingOut);\n    const pods = [..._.get(current, 'pods', []), ..._.get(previous, 'pods', [])];\n    const overviewItems = {\n      alerts,\n      buildConfigs,\n      current,\n      isRollingOut,\n      obj,\n      previous,\n      pods,\n      routes,\n      services,\n      status,\n      isMonitorable: true,\n      isOperatorBackedService: isOperatorBackedService(obj, installedOperators),\n    };\n\n    if (utils) {\n      return utils.reduce((acc, element) => {\n        return { ...acc, ...element(obj, resources) };\n      }, overviewItems);\n    }\n    return overviewItems;\n  });\n  if (operatorsFilter !== undefined) {\n    return items.filter((item) => item.isOperatorBackedService === operatorsFilter);\n  }\n  return items;\n};\n\nexport const createDeploymentItems = (\n  deployments: DeploymentKind[],\n  resources: any,\n  installedOperators: ClusterServiceVersionKind[],\n  utils?: Function[],\n  operatorsFilter?: boolean,\n): OverviewItem<DeploymentKind>[] => {\n  const items = _.map(deployments, (d) => {\n    const obj: DeploymentKind = {\n      ...d,\n      apiVersion: apiVersionForModel(DeploymentModel),\n      kind: DeploymentModel.kind,\n    };\n    const replicaSets = getReplicaSetsForResource(obj, resources);\n    const [current, previous] = replicaSets;\n    const isRollingOut = !!current && !!previous;\n    const buildConfigs = getBuildConfigsForResource(obj, resources);\n    const services = getServicesForResource(obj, resources);\n    const routes = getRoutesForServices(services, resources);\n    const alerts = {\n      ...getResourcePausedAlert(obj),\n      ...getBuildAlerts(buildConfigs),\n    };\n    const status = resourceStatus(obj, current, isRollingOut);\n    const pods = [..._.get(current, 'pods', []), ..._.get(previous, 'pods', [])];\n    const overviewItems = {\n      alerts,\n      buildConfigs,\n      current,\n      isRollingOut,\n      obj,\n      previous,\n      pods,\n      routes,\n      services,\n      status,\n      isMonitorable: true,\n      isOperatorBackedService: isOperatorBackedService(obj, installedOperators),\n    };\n\n    if (utils) {\n      return utils.reduce((acc, element) => {\n        return { ...acc, ...element(obj, resources) };\n      }, overviewItems);\n    }\n    return overviewItems;\n  });\n  if (operatorsFilter !== undefined) {\n    return items.filter((item) => item.isOperatorBackedService === operatorsFilter);\n  }\n  return items;\n};\n\nexport const createDaemonSetItems = (\n  daemonSets: K8sResourceKind[],\n  resources: any,\n  installedOperators: ClusterServiceVersionKind[],\n  utils?: Function[],\n  operatorsFilter?: boolean,\n): OverviewItem[] => {\n  const items = _.map(daemonSets, (ds) => {\n    const obj: K8sResourceKind = {\n      ...ds,\n      apiVersion: apiVersionForModel(DaemonSetModel),\n      kind: DaemonSetModel.kind,\n    };\n    const buildConfigs = getBuildConfigsForResource(obj, resources);\n    const services = getServicesForResource(obj, resources);\n    const routes = getRoutesForServices(services, resources);\n    const pods = getPodsForResource(obj, resources);\n    const alerts = {\n      ...combinePodAlerts(pods),\n      ...getBuildAlerts(buildConfigs),\n    };\n    const status = resourceStatus(obj);\n    return {\n      alerts,\n      buildConfigs,\n      obj,\n      pods,\n      routes,\n      services,\n      status,\n      isMonitorable: true,\n      isOperatorBackedService: isOperatorBackedService(obj, installedOperators),\n    };\n  });\n  if (operatorsFilter !== undefined) {\n    return items.filter((item) => item.isOperatorBackedService === operatorsFilter);\n  }\n  return items;\n};\n\nexport const createStatefulSetItems = (\n  statefulSets: K8sResourceKind[],\n  resources: any,\n  installedOperators: ClusterServiceVersionKind[],\n  utils?: Function[],\n  operatorsFilter?: boolean,\n): OverviewItem[] => {\n  const items = _.map(statefulSets, (ss) => {\n    const obj: K8sResourceKind = {\n      ...ss,\n      apiVersion: apiVersionForModel(StatefulSetModel),\n      kind: StatefulSetModel.kind,\n    };\n    const buildConfigs = getBuildConfigsForResource(obj, resources);\n    const pods = getPodsForResource(obj, resources);\n    const alerts = {\n      ...combinePodAlerts(pods),\n      ...getBuildAlerts(buildConfigs),\n    };\n    const services = getServicesForResource(obj, resources);\n    const routes = getRoutesForServices(services, resources);\n    const status = resourceStatus(obj);\n    return {\n      alerts,\n      buildConfigs,\n      obj,\n      pods,\n      routes,\n      services,\n      status,\n      isMonitorable: true,\n      isOperatorBackedService: isOperatorBackedService(obj, installedOperators),\n    };\n  });\n  if (operatorsFilter !== undefined) {\n    return items.filter((item) => item.isOperatorBackedService === operatorsFilter);\n  }\n  return items;\n};\n\nexport const createPodItems = (resources: any): OverviewItem[] => {\n  const { pods } = resources;\n  return _.reduce(\n    pods.data,\n    (acc, pod) => {\n      const obj: PodKind = {\n        ...pod,\n        apiVersion: apiVersionForModel(PodModel),\n        kind: PodModel.kind,\n      };\n      const owners = _.get(obj, 'metadata.ownerReferences');\n      const phase = _.get(obj, 'status.phase');\n      if (!_.isEmpty(owners) || phase === 'Succeeded' || phase === 'Failed') {\n        return acc;\n      }\n\n      const alerts = getPodAlerts(obj);\n      const services = getServicesForResource(obj, resources);\n      const routes = getRoutesForServices(services, resources);\n      const status = podStatus(obj);\n      return [\n        ...acc,\n        {\n          alerts,\n          obj,\n          routes,\n          services,\n          status,\n        },\n      ];\n    },\n    [],\n  );\n};\n\nexport const getPodsForDeploymentConfigs = (\n  deploymentConfigs: K8sResourceKind[],\n  resources: any,\n): PodRCData[] => {\n  return _.map(deploymentConfigs, (dc) => {\n    const obj: K8sResourceKind = {\n      ...dc,\n      apiVersion: apiVersionForModel(DeploymentConfigModel),\n      kind: DeploymentConfigModel.kind,\n    };\n    const { visibleReplicationControllers } = getReplicationControllersForResource(obj, resources);\n    const [current, previous] = visibleReplicationControllers;\n    const isRollingOut = getRolloutStatus(obj, current, previous);\n    return {\n      obj,\n      current,\n      previous,\n      pods: [..._.get(current, 'pods', []), ..._.get(previous, 'pods', [])],\n      isRollingOut,\n    };\n  });\n};\n\nexport const getPodsForDeployments = (\n  deployments: K8sResourceKind[],\n  resources: any,\n): PodRCData[] => {\n  return _.map(deployments, (d) => {\n    const obj: K8sResourceKind = {\n      ...d,\n      apiVersion: apiVersionForModel(DeploymentModel),\n      kind: DeploymentModel.kind,\n    };\n    const replicaSets = getReplicaSetsForResource(obj, resources);\n    const [current, previous] = replicaSets;\n    const isRollingOut = !!current && !!previous;\n\n    return {\n      obj,\n      current,\n      previous,\n      isRollingOut,\n      pods: [..._.get(current, 'pods', []), ..._.get(previous, 'pods', [])],\n    };\n  });\n};\n\nexport const getPodsForStatefulSets = (ss: K8sResourceKind[], resources: any): PodRCData[] => {\n  return _.map(ss, (s) => {\n    const obj: K8sResourceKind = {\n      ...s,\n      apiVersion: apiVersionForModel(StatefulSetModel),\n      kind: StatefulSetModel.kind,\n    };\n    const statefulSets = getStatefulSetsResource(obj, resources);\n    const [current, previous] = statefulSets;\n    const isRollingOut = !!current && !!previous;\n\n    return {\n      obj,\n      current,\n      previous,\n      isRollingOut,\n      pods: [..._.get(current, 'pods', []), ..._.get(previous, 'pods', [])],\n    };\n  });\n};\n\nexport const getPodsForDaemonSets = (ds: K8sResourceKind[], resources: any): PodRCData[] => {\n  return _.map(ds, (d) => {\n    const obj: K8sResourceKind = {\n      ...d,\n      apiVersion: apiVersionForModel(StatefulSetModel),\n      kind: StatefulSetModel.kind,\n    };\n    return {\n      obj,\n      current: undefined,\n      previous: undefined,\n      isRollingOut: undefined,\n      pods: getPodsForResource(d, resources),\n    };\n  });\n};\n","import * as _ from 'lodash';\nimport { StorageClass } from '@console/internal/components/storage-class-form';\n\nexport const cephStorageProvisioners = [\n  'ceph.rook.io/block',\n  'cephfs.csi.ceph.com',\n  'rbd.csi.ceph.com',\n];\n\nconst objectStorageProvisioners = [\n  'openshift-storage.noobaa.io/obc',\n  'openshift-storage.ceph.rook.io/bucket',\n];\n\n// To check if the provisioner is OCS based\nexport const isCephProvisioner = (scProvisioner: string): boolean => {\n  return cephStorageProvisioners.some((provisioner: string) =>\n    _.endsWith(scProvisioner, provisioner),\n  );\n};\n\nexport const isObjectSC = (sc: StorageClass) => objectStorageProvisioners.includes(sc.provisioner);\n","export const dimensifyHeader = (header: any[], columnClasses: string[]) => {\n  if (!header || !columnClasses || header.length !== columnClasses.length) {\n    console.warn('wrong dimensions specified for header'); // eslint-disable-line no-console\n    return header;\n  }\n\n  return header.map((column, idx) => ({\n    ...column,\n    props: {\n      ...column.props,\n      className: columnClasses[idx],\n    },\n  }));\n};\n\ntype DimensionResolver = (isLast?: boolean) => string;\n\nexport const dimensifyRow = (columnClasses: any[]): DimensionResolver => {\n  let index = 0;\n  return (isLast = false) => {\n    if (index >= columnClasses.length) {\n      console.warn('wrong dimensions specified for row (too many columns)'); // eslint-disable-line no-console\n      return null;\n    }\n\n    if (isLast && index !== columnClasses.length - 1) {\n      console.warn('wrong dimensions specified for row (not enough columns)'); // eslint-disable-line no-console\n    }\n    return columnClasses[index++];\n  };\n};\n","import { DeploymentKind, K8sResourceKind, RouteKind } from '@console/internal/module/k8s';\nimport {\n  BuildConfigOverviewItem,\n  PodControllerOverviewItem,\n  OverviewItem,\n  PodRCData,\n} from '../types';\nimport { ClusterServiceVersionKind } from '@console/operator-lifecycle-manager';\nimport {\n  createDaemonSetItems,\n  createDeploymentConfigItems,\n  createDeploymentItems,\n  createPodItems,\n  createStatefulSetItems,\n  getBuildConfigsForResource,\n  getPodsForDeploymentConfigs,\n  getPodsForDeployments,\n  getReplicaSetsForResource,\n  getRoutesForServices,\n  getServicesForResource,\n} from './resource-utils';\n\nexport class TransformResourceData {\n  private resources: any;\n\n  constructor(\n    resources: any,\n    public utils?: Function[],\n    public installedOperators?: ClusterServiceVersionKind[],\n  ) {\n    this.resources = { ...resources };\n  }\n\n  public getReplicaSetsForResource = (deployment: K8sResourceKind): PodControllerOverviewItem[] =>\n    getReplicaSetsForResource(deployment, this.resources);\n\n  public getBuildConfigsForResource = (resource: K8sResourceKind): BuildConfigOverviewItem[] =>\n    getBuildConfigsForResource(resource, this.resources);\n\n  public getRoutesForServices = (services: K8sResourceKind[]): RouteKind[] =>\n    getRoutesForServices(services, this.resources);\n\n  public getServicesForResource = (resource: K8sResourceKind): K8sResourceKind[] =>\n    getServicesForResource(resource, this.resources);\n\n  public createDeploymentConfigItems = (\n    deploymentConfigs: K8sResourceKind[],\n    operatorsFilter?: boolean,\n  ): OverviewItem[] =>\n    createDeploymentConfigItems(\n      deploymentConfigs,\n      this.resources,\n      this.installedOperators,\n      this.utils,\n      operatorsFilter,\n    );\n\n  public createDeploymentItems = (\n    deployments: DeploymentKind[],\n    operatorsFilter?: boolean,\n  ): OverviewItem<DeploymentKind>[] =>\n    createDeploymentItems(\n      deployments,\n      this.resources,\n      this.installedOperators,\n      this.utils,\n      operatorsFilter,\n    );\n\n  public createDaemonSetItems = (\n    daemonSets: K8sResourceKind[],\n    operatorsFilter?: boolean,\n  ): OverviewItem[] =>\n    createDaemonSetItems(\n      daemonSets,\n      this.resources,\n      this.installedOperators,\n      this.utils,\n      operatorsFilter,\n    );\n\n  public createStatefulSetItems = (\n    statefulSets: K8sResourceKind[],\n    operatorsFilter?: boolean,\n  ): OverviewItem[] =>\n    createStatefulSetItems(\n      statefulSets,\n      this.resources,\n      this.installedOperators,\n      this.utils,\n      operatorsFilter,\n    );\n\n  public createPodItems = (): OverviewItem[] => createPodItems(this.resources);\n\n  public getPodsForDeploymentConfigs = (deploymentConfigs: K8sResourceKind[]): PodRCData[] =>\n    getPodsForDeploymentConfigs(deploymentConfigs, this.resources);\n\n  public getPodsForDeployments = (deployments: K8sResourceKind[]): PodRCData[] =>\n    getPodsForDeployments(deployments, this.resources);\n}\n","import * as React from 'react';\n\nexport const useCombineRefs = <RefType extends any>(...refs: (React.Ref<RefType> | undefined)[]) =>\n  React.useCallback(\n    (element: RefType | null): void =>\n      refs.forEach((ref) => {\n        if (ref) {\n          if (typeof ref === 'function') {\n            ref(element);\n          } else {\n            (ref as React.MutableRefObject<any>).current = element;\n          }\n        }\n      }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    refs,\n  );\n","import { K8sResourceKind } from '@console/internal/module/k8s';\nimport { FirehoseResult } from '@console/internal/components/utils/types';\nimport { getUID } from '../selectors/common';\n\nexport type EntityMap<A> = { [propertyName: string]: A };\nexport type K8sEntityMap<A extends K8sResourceKind> = EntityMap<A>;\n\ntype KeyResolver<A> = (entity: A) => string;\n\nexport const createBasicLookup = <A>(list: A[], getKey: KeyResolver<A>): EntityMap<A> => {\n  return (list || []).reduce((lookup, entity) => {\n    const key = getKey(entity);\n    if (key) {\n      lookup[key] = entity;\n    }\n    return lookup;\n  }, {});\n};\n\nexport const createLookup = <A extends K8sResourceKind>(\n  loadingList: FirehoseResult<A[]>,\n  getKey?: KeyResolver<A>,\n): K8sEntityMap<A> => {\n  if (loadingList && loadingList.loaded) {\n    return createBasicLookup(loadingList.data, getKey || getUID);\n  }\n  return {};\n};\n\nexport const getRandomChars = (len = 6): string => {\n  return Math.random()\n    .toString(36)\n    .replace(/[^a-z0-9]+/g, '')\n    .substr(1, len);\n};\n","export * from './strings';\nexport * from './types';\nexport * from './validation';\n","export const EMPTY_ERROR = 'cannot be empty';\n\nexport const DNS1123_START_END_ERROR = 'has to start/end with alphanumeric characters';\nexport const DNS1123_START_ERROR = 'has to start with alphanumeric character';\nexport const DNS1123_END_ERROR = 'has to end with alphanumeric character';\nexport const DNS1123_TOO_LONG_ERROR = 'cannot have more than 253 characters';\n","export enum ValidationErrorType {\n  Error = 'error',\n  TrivialError = 'trivial-error', // should not be visible but affects data validation\n  Warn = 'warning',\n  Info = 'info',\n}\n\nexport type ValidationObject = {\n  message: string;\n  type?: ValidationErrorType;\n};\n","import * as _ from 'lodash';\nimport { addMissingSubject, joinGrammaticallyListOfItems, makeSentence } from '../grammar';\nimport { ValidationErrorType, ValidationObject } from './types';\nimport {\n  DNS1123_END_ERROR,\n  DNS1123_START_END_ERROR,\n  DNS1123_START_ERROR,\n  DNS1123_TOO_LONG_ERROR,\n  EMPTY_ERROR,\n} from './strings';\n\nconst alphanumericRegex = '[a-zA-Z0-9]';\nconst alphanumericRegexWithDash = '[-a-zA-Z0-9]';\n\nconst DNS1123_MAX_LENGTH = 253;\n\nconst DNS_1123_OFFENDING_CHARACTERS = {\n  ',': 'comma',\n  \"'\": 'apostrophe', // eslint-disable-line quotes\n  _: 'underscore',\n};\n\nexport const asValidationObject = (\n  message: string,\n  type: ValidationErrorType = ValidationErrorType.Error,\n): ValidationObject => ({\n  message,\n  type,\n});\n\nexport const validateEmptyValue = (\n  value: string,\n  { subject } = { subject: 'Value' },\n): ValidationObject => {\n  if (!value) {\n    return asValidationObject(\n      addMissingSubject(makeSentence(EMPTY_ERROR, false), subject),\n      ValidationErrorType.TrivialError,\n    );\n  }\n  return null;\n};\n\n// DNS-1123 subdomain\nexport const validateDNS1123SubdomainValue = (\n  value: string,\n  { subject } = { subject: 'Name' },\n): ValidationObject => {\n  const emptyError = validateEmptyValue(value, { subject });\n  if (emptyError) {\n    return emptyError;\n  }\n\n  const forbiddenCharacters = new Set<string>();\n  const validationSentences = [];\n\n  if (value.length > DNS1123_MAX_LENGTH) {\n    validationSentences.push(DNS1123_TOO_LONG_ERROR);\n  }\n\n  const startsWithAlphaNumeric = value.charAt(0).match(alphanumericRegex);\n  const endsWithAlphaNumeric = value.charAt(value.length - 1).match(alphanumericRegex);\n\n  if (!startsWithAlphaNumeric && !endsWithAlphaNumeric) {\n    validationSentences.push(DNS1123_START_END_ERROR);\n  } else if (!startsWithAlphaNumeric) {\n    validationSentences.push(DNS1123_START_ERROR);\n  } else if (!endsWithAlphaNumeric) {\n    validationSentences.push(DNS1123_END_ERROR);\n  }\n\n  for (const c of value) {\n    if (c.toLowerCase() !== c) {\n      forbiddenCharacters.add('uppercase');\n    }\n\n    if (!c.match(alphanumericRegexWithDash)) {\n      let offender;\n      if (c.match('\\\\s')) {\n        offender = 'whitespace';\n      } else {\n        offender = DNS_1123_OFFENDING_CHARACTERS[c] || `'${c}'`;\n      }\n\n      forbiddenCharacters.add(offender);\n    }\n  }\n\n  let result = null;\n\n  if (validationSentences.length > 0) {\n    result = makeSentence(joinGrammaticallyListOfItems(validationSentences), false);\n  }\n\n  if (forbiddenCharacters.size > 0) {\n    const forbiddenChars = joinGrammaticallyListOfItems(\n      [...forbiddenCharacters].sort((a, b) => b.length - a.length),\n    );\n    const forbiddenCharsSentence = makeSentence(`${forbiddenChars} characters are not allowed`);\n    result = result ? `${result} ${forbiddenCharsSentence}` : forbiddenCharsSentence;\n  }\n\n  return (\n    result && asValidationObject(addMissingSubject(result, subject), ValidationErrorType.Error)\n  );\n};\n\nexport const alignWithDNS1123 = (str) => {\n  if (!str) {\n    return '';\n  }\n\n  const chars = str\n    .toLowerCase()\n    .replace(/\\./g, '-')\n    .split('');\n\n  const firstValidCharIndex = chars.findIndex((c) => c.match(alphanumericRegex));\n  const lastValidCharIndex = _.findLastIndex(chars, (c: string) => c.match(alphanumericRegex));\n\n  if (firstValidCharIndex < 0) {\n    return '';\n  }\n\n  let result = chars\n    .slice(firstValidCharIndex, lastValidCharIndex + 1)\n    .filter((c) => c.match(alphanumericRegexWithDash));\n\n  if (result.length > DNS1123_MAX_LENGTH) {\n    result = result.slice(0, DNS1123_MAX_LENGTH);\n  }\n\n  return result.join('');\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { pluralize } from '@patternfly/react-core';\nimport { ChartDonut } from '@patternfly/react-charts';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { ResourceHealthHandler } from '@console/plugin-sdk';\nimport { WatchK8sResults } from '@console/internal/components/utils/k8s-watch-hook';\nimport { ExternalLink } from '@console/internal/components/utils/link';\nimport { HealthState } from '@console/shared/src/components/dashboard/status-card/states';\nimport { Link } from 'react-router-dom';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { ImageManifestVuln, WatchImageVuln } from '../types';\nimport { vulnPriority, priorityFor } from '../const';\nimport { ImageManifestVulnModel } from '../models';\n\nexport const securityHealthHandler: ResourceHealthHandler<WatchImageVuln> = ({\n  imageManifestVuln,\n}) => {\n  const { data, loaded, loadError } = imageManifestVuln;\n\n  if (loadError) {\n    return { state: HealthState.UNKNOWN, message: 'Not available' };\n  }\n  if (!loaded) {\n    return { state: HealthState.LOADING, message: 'Scanning in progress' };\n  }\n  if (!_.isEmpty(data)) {\n    return {\n      state: HealthState.ERROR,\n      message: pluralize(_.uniqBy(data, 'metadata.name').length, 'vulnerable image'),\n    };\n  }\n  return { state: HealthState.OK, message: '0 vulnerable images' };\n};\n\nexport const quayURLFor = (vuln: ImageManifestVuln) => {\n  const base = vuln.spec.image\n    .replace('@sha256', '')\n    .split('/')\n    .reduce((url, part, i) => [...url, part, ...(i === 0 ? ['repository'] : [])], [])\n    .join('/');\n  return `//${base}/manifest/${vuln.spec.manifest}?tab=vulnerabilities`;\n};\n\nexport const SecurityBreakdownPopup: React.FC<SecurityBreakdownPopupProps> = ({\n  imageManifestVuln,\n}) => {\n  const resource = imageManifestVuln.data;\n\n  const vulnsFor = (severity: string) =>\n    resource.filter((v) => v.status?.highestSeverity === severity);\n  const fixableVulns = resource\n    .filter((v) => v.status?.fixableCount > 0)\n    .reduce((all, v) => all.set(v.metadata.name, v), new Map<string, ImageManifestVuln>());\n\n  return (\n    <>\n      <div className=\"co-status-popup__description\">\n        Container images from Quay are analyzed to identify vulnerabilities. Images from other\n        registries are not scanned.\n      </div>\n      {!_.isEmpty(resource) ? (\n        <>\n          <div className=\"co-status-popup__section\">\n            <div className=\"co-status-popup__row\">\n              <div className=\"co-status-popup__text--bold\">Vulnerable Container Images</div>\n            </div>\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n              <div style={{ width: '66%', marginRight: '24px' }}>\n                {vulnPriority\n                  .map((priority) =>\n                    !_.isEmpty(vulnsFor(priority.value)) ? (\n                      <div className=\"co-status-popup__row\" key={priority.value}>\n                        <div>\n                          <ExclamationTriangleIcon\n                            color={priority.color.value}\n                            alt={priority.title}\n                          />\n                          &nbsp;\n                          {_.uniqBy(vulnsFor(priority.value), 'metadata.name').length}{' '}\n                          {priority.title}\n                        </div>\n                      </div>\n                    ) : null,\n                  )\n                  .toArray()}\n              </div>\n              <div>\n                <Link\n                  to={`/k8s/all-namespaces/${referenceForModel(ImageManifestVulnModel)}`}\n                  aria-label=\"View all\"\n                >\n                  <ChartDonut\n                    colorScale={vulnPriority.map((priority) => priority.color.value).toArray()}\n                    data={vulnPriority\n                      .map((priority) => ({\n                        label: priority.title,\n                        x: priority.value,\n                        y: _.uniqBy(vulnsFor(priority.value), 'metadata.name').length,\n                      }))\n                      .toArray()}\n                    title={`${_.uniqBy(resource, 'metadata.name').length} total`}\n                  />\n                </Link>\n              </div>\n            </div>\n          </div>\n          {!_.isEmpty(fixableVulns) && (\n            <div className=\"co-status-popup__section\">\n              <div className=\"co-status-popup__row\">\n                <div>\n                  <span className=\"co-status-popup__text--bold\">Fixable Container Images</span>\n                  <span className=\"text-secondary\">&nbsp;({fixableVulns.size} total)</span>\n                </div>\n              </div>\n              <div className=\"co-status-popup__row\">\n                <span className=\"co-status-popup__text--bold\">Impact</span>\n                <span className=\"co-status-popup__text--bold\">Vulnerabilities</span>\n              </div>\n              {_.sortBy(_.take([...fixableVulns.values()], 5), [\n                (v) => priorityFor(v.status?.highestSeverity).index,\n              ]).map((v) => (\n                <div className=\"co-status-popup__row\" key={v.metadata.name}>\n                  <span>\n                    <ExclamationTriangleIcon\n                      color={priorityFor(v.status?.highestSeverity).color.value}\n                    />{' '}\n                    <Link\n                      to={`/k8s/all-namespaces/${referenceForModel(ImageManifestVulnModel)}?name=${\n                        v.metadata.name\n                      }`}\n                    >\n                      {pluralize(\n                        resource.filter(({ metadata }) => metadata.name === v.metadata.name).length,\n                        'namespace',\n                      )}\n                    </Link>\n                  </span>\n                  <div className=\"text-secondary\">\n                    <ExternalLink href={quayURLFor(v)} text={`${v.status?.fixableCount} fixable`} />\n                  </div>\n                </div>\n              ))}\n              <div className=\"co-status-popup__row\">\n                <Link\n                  to={{\n                    pathname: `/k8s/all-namespaces/${referenceForModel(ImageManifestVulnModel)}`,\n                    search: '?orderBy=desc&sortBy=Fixable',\n                  }}\n                >\n                  View all\n                </Link>\n              </div>\n            </div>\n          )}\n        </>\n      ) : (\n        <div className=\"co-status-popup__section\">\n          <span className=\"text-secondary\">No vulnerabilities detected.</span>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport type SecurityBreakdownPopupProps = WatchK8sResults<WatchImageVuln>;\n\nSecurityBreakdownPopup.displayName = 'SecurityBreakdownPopup';\n","import {\n  /* eslint-disable @typescript-eslint/camelcase */\n  chart_color_red_400 as red400,\n  chart_color_red_300 as red300,\n  chart_color_red_100 as red100,\n  chart_color_orange_300 as orange300,\n  chart_color_gold_400 as gold400,\n  chart_color_black_500 as black500,\n  /* eslint-enable @typescript-eslint/camelcase */\n} from '@patternfly/react-tokens';\nimport { Map as ImmutableMap } from 'immutable';\nimport { ImageManifestVuln } from './types';\n\nexport const ContainerSecurityFlag = 'SECURITY_LABELLER';\n\nexport enum Priority {\n  Defcon1 = 'Defcon1',\n  Critical = 'Critical',\n  High = 'High',\n  Medium = 'Medium',\n  Low = 'Low',\n  Negligible = 'Negligible',\n  Unknown = 'Unknown',\n}\n\nexport const vulnPriority = ImmutableMap<Priority, VulnPriorityDescription>()\n  .set(Priority.Defcon1, {\n    color: red400,\n    description:\n      'Defcon1 is a Critical problem which has been manually highlighted by the Quay team. It requires immediate attention.',\n    index: 0,\n    level: 'error',\n    score: 11,\n    title: 'Defcon 1',\n    value: 'Defcon1',\n  })\n  .set(Priority.Critical, {\n    color: red300,\n    description:\n      'Critical is a world-burning problem, exploitable for nearly all people in a installation of the package. Includes remote root privilege escalations, or massive data loss.',\n    index: 1,\n    level: 'error',\n    score: 10,\n    title: 'Critical',\n    value: 'Critical',\n  })\n  .set(Priority.High, {\n    color: red100,\n    description:\n      'High is a real problem, exploitable for many people in a default installation. Includes serious remote denial of services, local root privilege escalations, or data loss.',\n    index: 2,\n    level: 'warning',\n    score: 9,\n    title: 'High',\n    value: 'High',\n  })\n  .set(Priority.Medium, {\n    color: gold400,\n    description:\n      'Medium is a real security problem, and is exploitable for many people. Includes network daemon denial of service attacks, cross-site scripting, and gaining user privileges.',\n    index: 3,\n    level: 'warning',\n    score: 6,\n    title: 'Medium',\n    value: 'Medium',\n  })\n  .set(Priority.Low, {\n    color: orange300,\n    description:\n      'Low is a security problem, but is hard to exploit due to environment, requires a user-assisted attack, a small install base, or does very little damage.',\n    index: 4,\n    level: 'warning',\n    score: 3,\n    title: 'Low',\n    value: 'Low',\n  })\n  .set(Priority.Negligible, {\n    color: black500,\n    description:\n      'Negligible is technically a security problem, but is only theoretical in nature, requires a very special situation, has almost no install base, or does no real damage.',\n    index: 5,\n    level: 'info',\n    score: 1,\n    title: 'Negligible',\n    value: 'Negligible',\n  })\n  .set(Priority.Unknown, {\n    color: black500,\n    description:\n      'Unknown is either a security problem that has not been assigned to a priority yet or a priority that our system did not recognize',\n    index: 6,\n    level: 'info',\n    score: 0,\n    title: 'Unknown',\n    value: 'Unknown',\n  });\n\nexport type VulnPriorityDescription = {\n  color: any;\n  description: string;\n  index: number;\n  level: 'error' | 'warning' | 'info';\n  score: number;\n  title: string;\n  value: string;\n};\n\nexport const totalFor = (priority: Priority) => (obj: ImageManifestVuln) => {\n  switch (priority) {\n    case Priority.Defcon1:\n      return obj.status.defcon1Count || 0;\n    case Priority.Critical:\n      return obj.status.criticalCount || 0;\n    case Priority.High:\n      return obj.status.highCount || 0;\n    case Priority.Medium:\n      return obj.status.mediumCount || 0;\n    case Priority.Low:\n      return obj.status.lowCount || 0;\n    case Priority.Negligible:\n      return obj.status.negligibleCount || 0;\n    case Priority.Unknown:\n      return obj.status.unknownCount || 0;\n    default:\n      return 0;\n  }\n};\n\nexport const priorityFor = (severity: string) =>\n  vulnPriority.find(({ title }) => title === severity) || vulnPriority.get(Priority.Unknown);\n","import { K8sKind } from '@console/internal/module/k8s';\n\nexport const ImageManifestVulnModel: K8sKind = {\n  kind: 'ImageManifestVuln',\n  label: 'ImageManifestVuln',\n  labelPlural: 'ImageManifestVuln',\n  apiGroup: 'secscan.quay.redhat.com',\n  apiVersion: 'v1alpha1',\n  abbr: 'IMV',\n  namespaced: true,\n  crd: true,\n  plural: 'imagemanifestvulns',\n};\n","import { referenceForModel } from '@console/internal/module/k8s';\nimport {\n  Plugin,\n  ModelDefinition,\n  ModelFeatureFlag,\n  KebabActions,\n  ResourceListPage,\n  DashboardsOverviewHealthURLSubsystem,\n  DashboardsOverviewHealthResourceSubsystem,\n  RoutePage,\n  ResourceDetailsPage,\n  ResourceNSNavItem,\n  HorizontalNavTab,\n} from '@console/plugin-sdk';\nimport { ClusterServiceVersionModel } from '@console/operator-lifecycle-manager';\nimport { ImageManifestVulnModel } from './models';\nimport { ContainerSecurityFlag } from './const';\nimport { securityHealthHandler } from './components/summary';\nimport { WatchImageVuln } from './types';\nimport { PodModel } from '@console/internal/models';\n\ntype ConsumedExtensions =\n  | ModelDefinition\n  | ModelFeatureFlag\n  | ResourceListPage\n  | ResourceDetailsPage\n  | DashboardsOverviewHealthURLSubsystem\n  | DashboardsOverviewHealthResourceSubsystem<WatchImageVuln>\n  | RoutePage\n  | KebabActions\n  | ResourceNSNavItem\n  | HorizontalNavTab;\n\nconst plugin: Plugin<ConsumedExtensions> = [\n  {\n    type: 'ModelDefinition',\n    properties: {\n      models: [ImageManifestVulnModel],\n    },\n  },\n  {\n    type: 'FeatureFlag/Model',\n    properties: {\n      model: ImageManifestVulnModel,\n      flag: ContainerSecurityFlag,\n    },\n  },\n  {\n    type: 'Page/Resource/List',\n    properties: {\n      model: ImageManifestVulnModel,\n      loader: async () =>\n        (\n          await import(\n            './components/image-manifest-vuln' /* webpack-chunk-name: \"container-security\" */\n          )\n        ).ImageManifestVulnPage,\n    },\n  },\n  {\n    type: 'Page/Resource/Details',\n    properties: {\n      model: ImageManifestVulnModel,\n      loader: () =>\n        import(\n          './components/image-manifest-vuln' /* webpackChunkName: \"container-security\" */\n        ).then((m) => m.ImageManifestVulnDetailsPage),\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: false,\n      path: `/k8s/ns/:ns/${ClusterServiceVersionModel.plural}/:appName/${referenceForModel(\n        ImageManifestVulnModel,\n      )}/:name`,\n      loader: () =>\n        import(\n          './components/image-manifest-vuln' /* webpackChunkName: \"container-security\" */\n        ).then((m) => m.ImageManifestVulnDetailsPage),\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: false,\n      path: `/k8s/ns/:ns/${referenceForModel(\n        ClusterServiceVersionModel,\n      )}/:appName/${referenceForModel(ImageManifestVulnModel)}/:name`,\n      loader: () =>\n        import(\n          './components/image-manifest-vuln' /* webpackChunkName: \"container-security\" */\n        ).then((m) => m.ImageManifestVulnDetailsPage),\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Health/Resource',\n    properties: {\n      title: 'Image Vulnerabilities',\n      resources: {\n        imageManifestVuln: {\n          kind: referenceForModel(ImageManifestVulnModel),\n          namespaced: true,\n          isList: true,\n        },\n      },\n      healthHandler: securityHealthHandler,\n      popupTitle: 'Image Vulnerabilities breakdown',\n      popupComponent: () =>\n        import('./components/summary' /* webpackChunkName: \"container-security\" */).then(\n          (m) => m.SecurityBreakdownPopup,\n        ),\n    },\n    flags: {\n      required: [ContainerSecurityFlag],\n    },\n  },\n  {\n    type: 'NavItem/ResourceNS',\n    properties: {\n      perspective: 'admin',\n      section: 'Administration',\n      mergeBefore: 'Custom Resource Definitions',\n      componentProps: {\n        name: 'Image Vulnerabilities',\n        resource: referenceForModel(ImageManifestVulnModel),\n        testID: 'imagemanifestvuln-header',\n      },\n    },\n    flags: {\n      required: [ContainerSecurityFlag],\n    },\n  },\n  {\n    type: 'HorizontalNavTab',\n    properties: {\n      model: PodModel,\n      page: {\n        name: 'Vulnerabilities',\n        href: 'vulnerabilities',\n      },\n      loader: () =>\n        import(\n          './components/image-manifest-vuln' /* webpackChunkName: \"container-security\" */\n        ).then((m) => m.ImageManifestVulnPodTab),\n    },\n    flags: {\n      required: [ContainerSecurityFlag],\n    },\n  },\n];\n\nexport default plugin;\n","import { KebabOption } from '@console/internal/components/utils';\nimport { truncateMiddle } from '@console/internal/components/utils/truncate-middle';\nimport { K8sResourceKind, K8sKind } from '@console/internal/module/k8s';\nimport { ServiceModel as KnativeServiceModel } from '@console/knative-plugin';\nimport { RESOURCE_NAME_TRUNCATE_LENGTH } from '../const';\nimport { editApplicationModal } from '../components/modals';\n\nexport const ModifyApplication = (kind: K8sKind, obj: K8sResourceKind): KebabOption => {\n  return {\n    label: 'Edit Application Grouping',\n    callback: () =>\n      editApplicationModal({\n        resourceKind: kind,\n        resource: obj,\n        blocking: true,\n        initialApplication: '',\n      }),\n    accessReview: {\n      group: kind.apiGroup,\n      resource: kind.plural,\n      name: obj.metadata.name,\n      namespace: obj.metadata.namespace,\n      verb: 'patch',\n    },\n  };\n};\n\nexport const EditApplication = (model: K8sKind, obj: K8sResourceKind): KebabOption => {\n  const annotation = obj?.metadata?.annotations?.['openshift.io/generated-by'];\n  return {\n    label: `Edit ${truncateMiddle(obj.metadata.name, { length: RESOURCE_NAME_TRUNCATE_LENGTH })}`,\n    hidden: obj.kind !== KnativeServiceModel.kind && annotation !== 'OpenShiftWebConsole',\n    href: `/edit/ns/${obj.metadata.namespace}?name=${obj.metadata.name}&kind=${obj.kind ||\n      model.kind}`,\n    accessReview: {\n      group: model.apiGroup,\n      resource: model.plural,\n      name: obj.metadata.name,\n      namespace: obj.metadata.namespace,\n      verb: 'update',\n    },\n  };\n};\n","import { ValidatedOptions } from '@patternfly/react-core';\nimport { K8sResourceKind, ContainerPort } from '@console/internal/module/k8s';\nimport { DeploymentModel, DeploymentConfigModel } from '@console/internal/models';\nimport { LazyLoader } from '@console/plugin-sdk';\nimport { NameValuePair, NameValueFromPair } from '@console/shared';\nimport { ServiceModel } from '@console/knative-plugin/src/models';\nimport { NormalizedBuilderImages } from '../../utils/imagestream-utils';\nimport { HealthCheckProbe } from '../health-checks/health-checks-types';\n\nexport interface DeployImageFormProps {\n  builderImages?: NormalizedBuilderImages;\n  projects?: FirehoseList;\n}\nexport type ImageStreamPayload = boolean | K8sResourceKind;\n\nexport type ImageStreamState = {\n  hasAccessToPullImage: ImageStreamPayload;\n  accessLoading: ImageStreamPayload;\n  loading: ImageStreamPayload;\n  hasCreateAccess: ImageStreamPayload;\n  selectedImageStream: ImageStreamPayload;\n};\nexport enum ImageStreamActions {\n  setAccessLoading = 'setAccessLoading',\n  setLoading = 'setLoading',\n  setSelectedImageStream = 'setSelectedImageStream',\n  setHasAccessToPullImage = 'setHasAccessToPullImage',\n  setHasCreateAccess = 'setHasCreateAccess',\n}\nexport type ImageStreamAction = { type: ImageStreamActions; value: ImageStreamPayload };\nexport interface ImageStreamContextProps {\n  state: ImageStreamState;\n  dispatch: React.Dispatch<ImageStreamAction>;\n  hasImageStreams: boolean;\n  setHasImageStreams: (value: boolean) => void;\n  setValidated: (validated: ValidatedOptions) => void;\n}\nexport interface SourceToImageFormProps {\n  builderImages?: NormalizedBuilderImages;\n  projects?: {\n    data: [];\n    loaded: boolean;\n  };\n}\n\nexport interface GitImportFormProps {\n  builderImages?: NormalizedBuilderImages;\n  projects?: {\n    data: [];\n    loaded: boolean;\n  };\n}\n\nexport interface FirehoseList {\n  data?: K8sResourceKind[];\n  [key: string]: any;\n}\n\nexport interface DeployImageFormData {\n  formType?: string;\n  project: ProjectData;\n  application: ApplicationData;\n  name: string;\n  searchTerm: string;\n  registry: string;\n  imageStream: {\n    image: string;\n    tag: string;\n    namespace: string;\n    grantAccess?: boolean;\n  };\n  isi: ImageStreamImageData;\n  image: ImageStreamImageData;\n  isSearchingForImage: boolean;\n  resources: Resources;\n  resourceTypesNotValid?: Resources[];\n  serverless?: ServerlessData;\n  pipeline?: PipelineData;\n  labels: { [name: string]: string };\n  env?: { [name: string]: string };\n  route: RouteData;\n  build: BuildData;\n  deployment: DeploymentData;\n  limits: LimitsData;\n  healthChecks: HealthChecksData;\n}\n\nexport interface GitImportFormData {\n  formType?: string;\n  name: string;\n  project: ProjectData;\n  application: ApplicationData;\n  git: GitData;\n  docker: DockerData;\n  serverless?: ServerlessData;\n  pipeline?: PipelineData;\n  image: ImageData;\n  route: RouteData;\n  resources: Resources;\n  resourceTypesNotValid?: Resources[];\n  build: BuildData;\n  deployment: DeploymentData;\n  labels: { [name: string]: string };\n  limits: LimitsData;\n  healthChecks: HealthChecksData;\n}\n\nexport interface ApplicationData {\n  initial?: string;\n  name: string;\n  selectedKey: string;\n}\n\nexport interface ImageData {\n  selected: string;\n  recommended: string;\n  isRecommending: boolean;\n  couldNotRecommend: boolean;\n  tag: string;\n  tagObj: object;\n  ports: ContainerPort[];\n}\n\nexport interface ImageStreamImageData {\n  name: string;\n  image: { [key: string]: any };\n  tag: string;\n  status: { metadata: {}; status: string };\n  ports: ContainerPort[];\n}\n\nexport interface ProjectData {\n  name: string;\n  displayName?: string;\n  description?: string;\n}\n\nexport interface GitData {\n  url: string;\n  type: string;\n  ref: string;\n  dir: string;\n  showGitType: boolean;\n  secret: string;\n  isUrlValidating: boolean;\n}\n\nexport interface DockerData {\n  dockerfilePath?: string;\n  containerPort?: number;\n}\n\nexport interface RouteData {\n  disable?: boolean;\n  create: boolean;\n  targetPort: string;\n  unknownTargetPort?: string;\n  defaultUnknownPort?: number;\n  path: string;\n  hostname: string;\n  secure: boolean;\n  tls: TLSData;\n}\n\nexport interface TLSData {\n  termination: string;\n  insecureEdgeTerminationPolicy: string;\n  certificate: string;\n  privateKey: string;\n  caCertificate: string;\n  destinationCACertificate: string;\n}\n\nexport interface BuildData {\n  triggers: {\n    webhook?: boolean;\n    image?: boolean;\n    config?: boolean;\n  };\n  env: (NameValuePair | NameValueFromPair)[];\n  strategy: string;\n}\n\nexport interface DeploymentData {\n  triggers: {\n    image: boolean;\n    config?: boolean;\n  };\n  replicas: number;\n  env: (NameValuePair | NameValueFromPair)[];\n}\n\nexport interface ServerlessData {\n  scaling: ServerlessScaling;\n}\n\nexport interface PipelineData {\n  enabled: boolean;\n  template?: K8sResourceKind;\n}\n\nexport interface ServerlessScaling {\n  minpods: number;\n  maxpods: number | '';\n  concurrencytarget: number | '';\n  concurrencylimit: number | '';\n}\n\nexport enum GitTypes {\n  github = 'github',\n  gitlab = 'gitlab',\n  bitbucket = 'bitbucket',\n  unsure = 'other',\n  invalid = '',\n}\n\nexport const GitReadableTypes = {\n  [GitTypes.github]: 'GitHub',\n  [GitTypes.gitlab]: 'GitLab',\n  [GitTypes.bitbucket]: 'Bitbucket',\n  [GitTypes.unsure]: 'Other',\n};\n\nexport enum ImportTypes {\n  git = 'git',\n  docker = 'docker',\n  s2i = 's2i',\n}\n\nexport enum Resources {\n  OpenShift = 'openshift',\n  Kubernetes = 'kubernetes',\n  KnativeService = 'knative',\n}\n\nexport const ReadableResourcesNames = {\n  [Resources.OpenShift]: DeploymentConfigModel.label,\n  [Resources.Kubernetes]: DeploymentModel.label,\n  [Resources.KnativeService]: `Knative ${ServiceModel.label}`,\n};\n\nexport interface ImportData {\n  type: ImportTypes;\n  title: string;\n  buildStrategy: string;\n  loader: LazyLoader<GitImportFormProps | SourceToImageFormProps>;\n}\n\nexport enum TerminationTypes {\n  edge = 'Edge',\n  passthrough = 'Passthrough',\n  reencrypt = 'Re-encrypt',\n}\n\nexport enum InsecureTrafficTypes {\n  None = 'None',\n  Allow = 'Allow',\n  Redirect = 'Redirect',\n}\n\nexport enum PassthroughInsecureTrafficTypes {\n  None = 'None',\n  Redirect = 'Redirect',\n}\n\nexport interface LimitsData {\n  cpu: ResourceType;\n  memory: ResourceType;\n}\n\nexport interface ResourceType {\n  request: number | string;\n  requestUnit: string;\n  defaultRequestUnit: string;\n  limit: number | string;\n  limitUnit: string;\n  defaultLimitUnit: string;\n}\n\nexport enum CPUUnits {\n  m = 'millicores',\n  '' = 'cores',\n}\n\nexport enum MemoryUnits {\n  Mi = 'Mi',\n  Gi = 'Gi',\n}\n\nexport enum ImportOptions {\n  GIT = 'GIT',\n  CONTAINER = 'CONTAINER',\n  CATALOG = 'CATALOG',\n  DOCKERFILE = 'DOCKERFILE',\n  DATABASE = 'DATABASE',\n  EVENTSOURCE = 'EVENTSOURCE',\n}\n\nexport interface HealthChecksData {\n  readinessProbe: HealthCheckProbe;\n  livenessProbe: HealthCheckProbe;\n  startupProbe?: HealthCheckProbe;\n}\n","export const editApplicationModal = (props) =>\n  import('./EditApplicationModal' /* webpackChunkName: \"dev-console-modals\" */).then((m) =>\n    m.editApplicationModal(props),\n  );\n\nexport const groupEditApplicationModal = (props) =>\n  import('./EditApplicationModal' /* webpackChunkName: \"dev-console-modals\" */).then((m) =>\n    m.groupEditApplicationModal(props),\n  );\n\nexport const deleteResourceModal = (props) =>\n  import('./DeleteResourceModal' /* webpackChunkName: \"dev-console-modals\" */).then((m) =>\n    m.deleteResourceModal(props),\n  );\n","import { action, ActionType } from 'typesafe-actions';\nimport { TopologyFilters } from '../filters/filter-types';\nimport { TOPOLOGY_DISPLAY_FILTERS_LOCAL_STORAGE_KEY } from './const';\n\nexport enum Actions {\n  topologyFilters = 'topologyFilters',\n}\n\nexport const setTopologyFilters = (filters: TopologyFilters) => {\n  localStorage.setItem(TOPOLOGY_DISPLAY_FILTERS_LOCAL_STORAGE_KEY, JSON.stringify(filters.display));\n  return action(Actions.topologyFilters, { filters });\n};\n\nconst actions = {\n  setTopologyFilters,\n};\n\nexport type TopologyAction = ActionType<typeof actions>;\n","export const TOPOLOGY_DISPLAY_FILTERS_LOCAL_STORAGE_KEY = `bridge/topology-display-filters`;\nexport const DEFAULT_TOPOLOGY_FILTERS = {\n  display: {\n    podCount: false,\n    eventSources: true,\n    virtualMachines: true,\n    showLabels: true,\n    knativeServices: true,\n    appGrouping: true,\n    operatorGrouping: true,\n    helmGrouping: true,\n  },\n};\n","import { Map } from 'immutable';\nimport { merge } from 'lodash';\nimport { TopologyAction, Actions } from './action';\nimport { TOPOLOGY_DISPLAY_FILTERS_LOCAL_STORAGE_KEY, DEFAULT_TOPOLOGY_FILTERS } from './const';\n\nexport type State = Map<string, any>;\n\nexport const getDefaultTopologyFilters = () => {\n  const displayFilters = localStorage.getItem(TOPOLOGY_DISPLAY_FILTERS_LOCAL_STORAGE_KEY);\n\n  if (!displayFilters) {\n    localStorage.setItem(\n      TOPOLOGY_DISPLAY_FILTERS_LOCAL_STORAGE_KEY,\n      JSON.stringify(DEFAULT_TOPOLOGY_FILTERS.display),\n    );\n  }\n\n  const filters = merge({}, DEFAULT_TOPOLOGY_FILTERS, {\n    display: JSON.parse(displayFilters) ?? {},\n  });\n\n  return filters;\n};\n\nexport default (state: State, action: TopologyAction) => {\n  if (!state) {\n    return Map({\n      filters: getDefaultTopologyFilters(),\n    });\n  }\n\n  if (action.type === Actions.topologyFilters) {\n    return state.set('filters', action.payload.filters);\n  }\n\n  return state;\n};\n","export const ALLOW_SERVICE_BINDING = 'ALLOW_SERVICE_BINDING';\nexport const FLAG_OPENSHIFT_PIPELINE = 'OPENSHIFT_PIPELINE';\nexport const CLUSTER_PIPELINE_NS = 'openshift';\n\n/** URL query params that adjust scope / purpose of the page */\nexport enum QUERY_PROPERTIES {\n  /** For defining a contextual application group (ie, add new workload into this application group) */\n  APPLICATION = 'application',\n  /** For defining a contextual source of the redirect (ie, connect a new workload from this contextual source) */\n  CONTEXT_SOURCE = 'contextSource',\n}\n\nexport const RESOURCE_NAME_TRUNCATE_LENGTH = 13;\n\nexport const CREATE_APPLICATION_KEY = '#CREATE_APPLICATION_KEY#';\nexport const UNASSIGNED_KEY = '#UNASSIGNED_KEY#';\n","module.exports = __webpack_public_path__ + \"assets/dockerfile.svg\";","module.exports = __webpack_public_path__ + \"assets/from-git.svg\";","module.exports = __webpack_public_path__ + \"assets/pipeline.svg\";","module.exports = __webpack_public_path__ + \"assets/yaml.svg\";","import { K8sKind } from '@console/internal/module/k8s';\n\nexport const ApplicationModel: K8sKind = {\n  id: 'application',\n  kind: 'application',\n  plural: 'applications',\n  label: 'Application',\n  labelPlural: 'Applications',\n  abbr: 'A',\n  apiGroup: '',\n  apiVersion: '',\n  namespaced: true,\n  crd: false,\n};\n","export * from './applications';\nexport * from './pipelines';\nexport * from './service-binding';\n","import { chart_color_green_400 as tektonGroupColor } from '@patternfly/react-tokens';\nimport { K8sKind } from '@console/internal/module/k8s';\nimport { BadgeType } from '@console/shared/src/components/badges/badge-factory';\n\nconst color = tektonGroupColor.value;\n\nexport const PipelineModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'Pipeline',\n  plural: 'pipelines',\n  abbr: 'PL',\n  namespaced: true,\n  kind: 'Pipeline',\n  id: 'pipeline',\n  labelPlural: 'Pipelines',\n  crd: true,\n  badge: BadgeType.TECH,\n  color,\n};\n\nexport const PipelineRunModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'Pipeline Run',\n  plural: 'pipelineruns',\n  abbr: 'PLR',\n  namespaced: true,\n  kind: 'PipelineRun',\n  id: 'pipelinerun',\n  labelPlural: 'Pipeline Runs',\n  crd: true,\n  badge: BadgeType.TECH,\n  color,\n};\n\nexport const TaskModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'Task',\n  plural: 'tasks',\n  abbr: 'T',\n  namespaced: true,\n  kind: 'Task',\n  id: 'task',\n  labelPlural: 'Tasks',\n  crd: true,\n  badge: BadgeType.TECH,\n  color,\n};\n\nexport const TaskRunModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'Task Run',\n  plural: 'taskruns',\n  abbr: 'TR',\n  namespaced: true,\n  kind: 'TaskRun',\n  id: 'taskrun',\n  labelPlural: 'Task Runs',\n  crd: true,\n  badge: BadgeType.TECH,\n  color,\n};\n\nexport const PipelineResourceModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'Pipeline Resource',\n  plural: 'pipelineresources',\n  abbr: 'PR',\n  namespaced: true,\n  kind: 'PipelineResource',\n  id: 'pipelineresource',\n  labelPlural: 'Pipeline Resources',\n  crd: true,\n  badge: BadgeType.TECH,\n  color,\n};\n\nexport const ClusterTaskModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'Cluster Task',\n  plural: 'clustertasks',\n  abbr: 'CT',\n  namespaced: false,\n  kind: 'ClusterTask',\n  id: 'clustertask',\n  labelPlural: 'Cluster Tasks',\n  crd: true,\n  badge: BadgeType.TECH,\n  color,\n};\n\nexport const ConditionModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'Condition',\n  plural: 'conditions',\n  abbr: 'C',\n  namespaced: true,\n  kind: 'Condition',\n  id: 'condition',\n  labelPlural: 'Conditions',\n  crd: true,\n  badge: BadgeType.DEV,\n  color,\n};\n\nexport const TriggerBindingModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'Trigger Binding',\n  plural: 'triggerbindings',\n  abbr: 'TB',\n  namespaced: true,\n  kind: 'TriggerBinding',\n  id: 'triggerbinding',\n  labelPlural: 'Trigger Bindings',\n  crd: true,\n  badge: BadgeType.TECH,\n  color,\n};\n\nexport const ClusterTriggerBindingModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'Cluster Trigger Binding',\n  plural: 'clustertriggerbindings',\n  abbr: 'CTB',\n  namespaced: false,\n  kind: 'ClusterTriggerBinding',\n  id: 'clustertriggerbinding',\n  labelPlural: 'Cluster Trigger Bindings',\n  crd: true,\n  badge: BadgeType.TECH,\n  color,\n};\n\nexport const TriggerTemplateModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'Trigger Template',\n  plural: 'triggertemplates',\n  abbr: 'TT',\n  namespaced: true,\n  kind: 'TriggerTemplate',\n  id: 'triggertemplate',\n  labelPlural: 'Trigger Templates',\n  crd: true,\n  badge: BadgeType.TECH,\n  color,\n};\n\nexport const EventListenerModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'Event Listener',\n  plural: 'eventlisteners',\n  abbr: 'EL',\n  namespaced: true,\n  kind: 'EventListener',\n  id: 'eventlistener',\n  labelPlural: 'Event Listeners',\n  crd: true,\n  badge: BadgeType.TECH,\n  color,\n};\n","import { K8sKind } from '@console/internal/module/k8s';\n\nexport const ServiceBindingRequestModel: K8sKind = {\n  id: 'servicebindingrequest',\n  kind: 'ServiceBindingRequest',\n  plural: 'servicebindingrequests',\n  label: 'ServiceBindingRequest',\n  labelPlural: 'ServiceBindingRequests',\n  abbr: 'SBR',\n  apiGroup: 'apps.openshift.io',\n  apiVersion: 'v1alpha1',\n  namespaced: true,\n  crd: true,\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\n// import { CodeIcon, BoltIcon, DatabaseIcon, CatalogIcon } from '@patternfly/react-icons';\nimport { CodeIcon, CatalogIcon } from '@patternfly/react-icons';\nimport {\n  Plugin,\n  ModelDefinition,\n  ModelFeatureFlag,\n  KebabActions,\n  HrefNavItem,\n  SeparatorNavItem,\n  ResourceNSNavItem,\n  ResourceClusterNavItem,\n  ResourceListPage,\n  ResourceDetailsPage,\n  Perspective,\n  RoutePage,\n  OverviewResourceTab,\n  OverviewCRD,\n  YAMLTemplate,\n  OverviewTabSection,\n  ReduxReducer,\n} from '@console/plugin-sdk';\nimport { NamespaceRedirect } from '@console/internal/components/utils/namespace-redirect';\nimport { FLAGS } from '@console/shared/src/constants';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport {\n  BuildConfigModel,\n  ImageStreamModel,\n  DeploymentConfigModel,\n  SecretModel,\n  RouteModel,\n  ServiceModel,\n  ImageStreamImportsModel,\n  ConfigMapModel,\n} from '@console/internal/models';\nimport * as helmIcon from '@console/internal/imgs/logos/helm.svg';\nimport * as models from './models';\nimport { getKebabActionsForKind } from './utils/kebab-actions';\nimport {\n  tknPipelineAndPipelineRunsResources,\n  getPipelinesAndPipelineRunsForResource,\n} from './utils/pipeline-plugin-utils';\nimport { FLAG_OPENSHIFT_PIPELINE, ALLOW_SERVICE_BINDING } from './const';\nimport {\n  newPipelineTemplate,\n  newTaskTemplate,\n  newTaskRunTemplate,\n  newPipelineResourceTemplate,\n  newClusterTaskTemplate,\n} from './templates';\nimport reducer from './utils/reducer';\nimport { AddAction } from './extensions/add-actions';\nimport * as yamlIcon from './images/yaml.svg';\nimport * as importGitIcon from './images/from-git.svg';\nimport * as dockerfileIcon from './images/dockerfile.svg';\nimport * as pipelineIcon from './images/pipeline.svg';\n\nconst {\n  ClusterTaskModel,\n  PipelineModel,\n  PipelineResourceModel,\n  PipelineRunModel,\n  TaskModel,\n  TaskRunModel,\n  EventListenerModel,\n  TriggerTemplateModel,\n  TriggerBindingModel,\n} = models;\n\ntype ConsumedExtensions =\n  | ModelDefinition\n  | ModelFeatureFlag\n  | HrefNavItem\n  | ResourceClusterNavItem\n  | SeparatorNavItem\n  | ResourceNSNavItem\n  | ResourceListPage\n  | ResourceDetailsPage\n  | Perspective\n  | RoutePage\n  | ReduxReducer\n  | KebabActions\n  | OverviewResourceTab\n  | OverviewCRD\n  | YAMLTemplate\n  | OverviewTabSection\n  | AddAction;\n\nconst plugin: Plugin<ConsumedExtensions> = [\n  {\n    type: 'ModelDefinition',\n    properties: {\n      models: _.values(models),\n    },\n  },\n  {\n    type: 'FeatureFlag/Model',\n    properties: {\n      model: models.PipelineModel,\n      flag: FLAG_OPENSHIFT_PIPELINE,\n    },\n  },\n  {\n    type: 'FeatureFlag/Model',\n    properties: {\n      model: models.ServiceBindingRequestModel,\n      flag: ALLOW_SERVICE_BINDING,\n    },\n  },\n  {\n    type: 'NavItem/Href',\n    properties: {\n      perspective: 'dev',\n      componentProps: {\n        name: '+Add',\n        href: '/add',\n        testID: '+Add-header',\n      },\n    },\n  },\n  {\n    type: 'NavItem/Href',\n    properties: {\n      perspective: 'dev',\n      componentProps: {\n        name: 'Topology',\n        href: '/topology',\n        testID: 'topology-header',\n      },\n    },\n    flags: {\n      required: [FLAGS.OPENSHIFT],\n    },\n  },\n  {\n    type: 'NavItem/Href',\n    properties: {\n      perspective: 'dev',\n      componentProps: {\n        name: 'Monitoring',\n        href: '/dev-monitoring',\n        testID: 'monitoring-header',\n      },\n    },\n    flags: {\n      required: [FLAGS.OPENSHIFT],\n    },\n  },\n  {\n    type: 'NavItem/Href',\n    properties: {\n      perspective: 'dev',\n      componentProps: {\n        name: 'Search',\n        href: '/search',\n        testID: 'search-header',\n      },\n    },\n  },\n  {\n    type: 'NavItem/Separator',\n    properties: {\n      perspective: 'dev',\n      componentProps: {\n        testID: 'dev-separator',\n      },\n    },\n  },\n  {\n    type: 'NavItem/ResourceNS',\n    properties: {\n      perspective: 'dev',\n      componentProps: {\n        name: 'Builds',\n        resource: 'buildconfigs',\n        testID: 'build-header',\n      },\n    },\n    flags: {\n      required: [FLAGS.OPENSHIFT],\n    },\n  },\n  {\n    type: 'NavItem/ResourceNS',\n    properties: {\n      perspective: 'dev',\n      componentProps: {\n        name: PipelineModel.labelPlural,\n        resource: referenceForModel(PipelineModel),\n        testID: 'pipeline-header',\n      },\n    },\n    flags: {\n      required: [FLAG_OPENSHIFT_PIPELINE],\n    },\n  },\n  {\n    type: 'NavItem/Href',\n    properties: {\n      perspective: 'dev',\n      componentProps: {\n        name: 'Helm',\n        href: '/helm-releases',\n        testID: 'helm-releases-header',\n      },\n    },\n    flags: {\n      required: [FLAGS.OPENSHIFT],\n    },\n  },\n  {\n    type: 'NavItem/Href',\n    properties: {\n      perspective: 'dev',\n      componentProps: {\n        name: 'Project',\n        href: '/project-details',\n        testID: 'project-details-header',\n      },\n    },\n    flags: {\n      required: [FLAGS.OPENSHIFT],\n    },\n  },\n  {\n    type: 'Overview/CRD',\n    properties: {\n      resources: tknPipelineAndPipelineRunsResources,\n      required: FLAG_OPENSHIFT_PIPELINE,\n      utils: getPipelinesAndPipelineRunsForResource,\n    },\n  },\n  {\n    type: 'NavItem/ResourceNS',\n    properties: {\n      perspective: 'admin',\n      section: 'Pipelines',\n      componentProps: {\n        name: PipelineModel.labelPlural,\n        resource: referenceForModel(PipelineModel),\n      },\n    },\n    flags: {\n      required: [FLAG_OPENSHIFT_PIPELINE],\n    },\n  },\n  {\n    type: 'NavItem/ResourceNS',\n    properties: {\n      perspective: 'admin',\n      section: 'Pipelines',\n      componentProps: {\n        name: PipelineRunModel.labelPlural,\n        resource: referenceForModel(PipelineRunModel),\n      },\n    },\n    flags: {\n      required: [FLAG_OPENSHIFT_PIPELINE],\n    },\n  },\n  {\n    type: 'NavItem/ResourceNS',\n    properties: {\n      perspective: 'admin',\n      section: 'Pipelines',\n      componentProps: {\n        name: PipelineResourceModel.labelPlural,\n        resource: referenceForModel(PipelineResourceModel),\n      },\n    },\n    flags: {\n      required: [FLAG_OPENSHIFT_PIPELINE],\n    },\n  },\n  {\n    type: 'NavItem/ResourceNS',\n    properties: {\n      perspective: 'admin',\n      section: 'Pipelines',\n      componentProps: {\n        name: TaskModel.labelPlural,\n        resource: referenceForModel(TaskModel),\n      },\n    },\n    flags: {\n      required: [FLAG_OPENSHIFT_PIPELINE],\n    },\n  },\n  {\n    type: 'NavItem/ResourceNS',\n    properties: {\n      perspective: 'admin',\n      section: 'Pipelines',\n      componentProps: {\n        name: TaskRunModel.labelPlural,\n        resource: referenceForModel(TaskRunModel),\n      },\n    },\n    flags: {\n      required: [FLAG_OPENSHIFT_PIPELINE],\n    },\n  },\n  {\n    type: 'NavItem/ResourceCluster',\n    properties: {\n      perspective: 'admin',\n      section: 'Pipelines',\n      componentProps: {\n        name: ClusterTaskModel.labelPlural,\n        resource: referenceForModel(ClusterTaskModel),\n      },\n    },\n    flags: {\n      required: [FLAG_OPENSHIFT_PIPELINE],\n    },\n  },\n  {\n    type: 'Overview/Section',\n    properties: {\n      key: 'pipelines',\n      loader: () =>\n        import(\n          './components/pipelines/pipeline-overview/PipelineOverview' /* webpackChunkName: \"pipeline-overview-list\" */\n        ).then((m) => m.default),\n    },\n  },\n  {\n    type: 'Overview/Resource',\n    properties: {\n      name: 'Monitoring',\n      key: 'isMonitorable',\n      loader: () =>\n        import(\n          './components/monitoring/overview/MonitoringTab' /* webpackChunkName: \"monitoring-overview\" */\n        ).then((m) => m.default),\n    },\n  },\n  {\n    type: 'Page/Resource/Details',\n    properties: {\n      model: PipelineModel,\n      loader: async () =>\n        (\n          await import(\n            './components/pipelines/PipelineDetailsPage' /* webpackChunkName: \"pipeline-details\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Resource/Details',\n    properties: {\n      model: PipelineRunModel,\n      loader: async () =>\n        (\n          await import(\n            './components/pipelineruns/PipelineRunDetailsPage' /* webpackChunkName: \"pipelinerun-details\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Resource/Details',\n    properties: {\n      model: TaskRunModel,\n      loader: async () =>\n        (\n          await import(\n            './components/taskruns/TaskRunDetailsPage' /* webpackChunkName: \"taskrun-details\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Resource/Details',\n    properties: {\n      model: EventListenerModel,\n      loader: async () =>\n        (\n          await import(\n            './components/pipelines/EventListenerPage' /* webpackChunkName: \"eventlistener-details\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Resource/Details',\n    properties: {\n      model: TriggerTemplateModel,\n      loader: async () =>\n        (\n          await import(\n            './components/pipelines/TriggerTemplatePage' /* webpackChunkName: \"trigger-template-details\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Resource/Details',\n    properties: {\n      model: TriggerBindingModel,\n      loader: async () =>\n        (\n          await import(\n            './components/pipelines/TriggerBindingPage' /* webpackChunkName: \"trigger-binding-details\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Resource/List',\n    properties: {\n      model: PipelineModel,\n      loader: async () =>\n        (\n          await import(\n            './components/pipelines/PipelinesResourceList' /* webpackChunkName: \"pipeline-resource-list\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Resource/List',\n    properties: {\n      model: PipelineRunModel,\n      loader: async () =>\n        (\n          await import(\n            './components/pipelineruns/PipelineRunsResourceList' /* webpackChunkName: \"pipelinerun-resource-list\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Perspective',\n    properties: {\n      id: 'dev',\n      name: 'Developer',\n      icon: <CodeIcon />,\n      defaultPins: [ConfigMapModel.kind, SecretModel.kind],\n      getLandingPageURL: () => '/topology',\n      getK8sLandingPageURL: () => '/add',\n      getImportRedirectURL: (project) => `/topology/ns/${project}`,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: [\n        '/add',\n        '/import',\n        '/topology',\n        '/deploy-image',\n        '/project-details',\n        '/dev-monitoring',\n        '/helm-releases',\n      ],\n      component: NamespaceRedirect,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: ['/add/all-namespaces', '/add/ns/:ns'],\n      loader: async () =>\n        (await import('./components/AddPage' /* webpackChunkName: \"dev-console-add\" */)).default,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: [\n        '/topology/all-namespaces',\n        '/topology/ns/:name',\n        '/topology/all-namespaces/graph',\n        '/topology/ns/:name/graph',\n        '/topology/all-namespaces/list',\n        '/topology/ns/:name/list',\n      ],\n      loader: async () =>\n        (\n          await import(\n            './components/topology/TopologyPage' /* webpackChunkName: \"dev-console-topology\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: '/edit/ns/:ns',\n      loader: async () =>\n        (\n          await import(\n            './components/edit-application/EditApplicationPage' /* webpackChunkName: \"dev-console-edit\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: ['/import/all-namespaces', '/import/ns/:ns'],\n      loader: async () =>\n        (\n          await import(\n            './components/import/ImportPage' /* webpackChunkName: \"dev-console-import\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: ['/catalog/source-to-image'],\n      loader: async () =>\n        (\n          await import(\n            './components/import/ImportPage' /* webpackChunkName: \"dev-console-import\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      perspective: 'dev',\n      exact: true,\n      path: ['/k8s/all-namespaces/buildconfigs', '/k8s/ns/:ns/buildconfigs'],\n      loader: async () =>\n        (\n          await import(\n            './components/BuildConfigPage' /* webpackChunkName: \"dev-console-buildconfigs\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      perspective: 'dev',\n      exact: true,\n      path: [\n        `/k8s/all-namespaces/${referenceForModel(PipelineModel)}`,\n        `/k8s/ns/:ns/${referenceForModel(PipelineModel)}`,\n      ],\n      loader: async () =>\n        (\n          await import(\n            './components/pipelines/PipelinesPage' /* webpackChunkName: \"pipeline-page\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: [`/k8s/ns/:ns/${referenceForModel(PipelineModel)}/~new/builder`],\n      loader: async () =>\n        (\n          await import(\n            './components/pipelines/pipeline-builder/PipelineBuilderPage' /* webpackChunkName: \"pipeline-builder-page\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: [`/k8s/ns/:ns/${referenceForModel(PipelineModel)}/:pipelineName/builder`],\n      loader: async () =>\n        (\n          await import(\n            './components/pipelines/pipeline-builder/PipelineBuilderEditPage' /* webpackChunkName: \"pipeline-builder-edit-page\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      perspective: 'dev',\n      exact: true,\n      path: [\n        `/k8s/all-namespaces/${referenceForModel(PipelineRunModel)}`,\n        `/k8s/ns/:ns/${referenceForModel(PipelineRunModel)}`,\n      ],\n      loader: async () =>\n        (\n          await import(\n            './components/pipelineruns/PipelineRunsPage' /* webpackChunkName: \"pipelinerun-page\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: ['/deploy-image/all-namespaces', '/deploy-image/ns/:ns'],\n      loader: async () =>\n        (\n          await import(\n            './components/import/DeployImagePage' /* webpackChunkName: \"dev-console-deployImage\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: ['/catalog/helm-install'],\n      loader: async () =>\n        (\n          await import(\n            './components/helm/HelmInstallUpgradePage' /* webpackChunkName: \"dev-console-helm-install-upgrade\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: [`/helm-releases/ns/:ns/:releaseName/upgrade`],\n      loader: async () =>\n        (\n          await import(\n            './components/helm/HelmInstallUpgradePage' /* webpackChunkName: \"dev-console-helm-install-upgrade\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: [`/helm-releases/ns/:ns/:releaseName/rollback`],\n      loader: async () =>\n        (\n          await import(\n            './components/helm/HelmReleaseRollbackPage' /* webpackChunkName: \"dev-console-helm-rollback\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: ['/helm-releases/all-namespaces', '/helm-releases/ns/:ns'],\n      loader: async () =>\n        (\n          await import(\n            './components/helm/HelmReleaseListPage' /* webpackChunkName: \"dev-console-helm-releases-list\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      path: ['/helm-releases/ns/:ns/release/:name'],\n      exact: false,\n      loader: async () =>\n        (\n          await import(\n            './components/helm/HelmReleaseDetailsPage' /* webpackChunkName: \"dev-console-helm-release-details\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      perspective: 'dev',\n      exact: false,\n      path: ['/project-details/all-namespaces', '/project-details/ns/:ns'],\n      loader: async () =>\n        (\n          await import(\n            './components/projects/details/ProjectDetailsPage' /* webpackChunkName: \"dev-console-projectDetails\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: false,\n      path: ['/dev-monitoring/all-namespaces', '/dev-monitoring/ns/:ns'],\n      loader: async () =>\n        (\n          await import(\n            './components/monitoring/MonitoringPage' /* webpackChunkName: \"dev-console-monitoring\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: ['/k8s/ns/:ns/:kind/:name/containers/:containerName/health-checks'],\n      loader: async () =>\n        (\n          await import(\n            './components/health-checks/HealthChecksPage' /* webpackChunkName: \"dev-console-healthCheck\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      perspective: 'dev',\n      exact: false,\n      path: ['/k8s/all-namespaces/import'],\n      loader: async () =>\n        (\n          await import(\n            '@console/internal/components/import-yaml' /* webpackChunkName: \"import-yaml\" */\n          )\n        ).ImportYamlPage,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      perspective: 'dev',\n      exact: false,\n      path: ['/k8s/all-namespaces/:plural'],\n      loader: async () =>\n        (\n          await import(\n            './components/ProjectSelectPage' /* webpackChunkName: \"dev-console-projectselectpage\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'ReduxReducer',\n    properties: {\n      namespace: 'devconsole',\n      reducer,\n    },\n  },\n  {\n    type: 'KebabActions',\n    properties: {\n      getKebabActionsForKind,\n    },\n  },\n  {\n    type: 'YAMLTemplate',\n    properties: {\n      model: PipelineModel,\n      template: newPipelineTemplate,\n    },\n  },\n  {\n    type: 'YAMLTemplate',\n    properties: {\n      model: TaskModel,\n      template: newTaskTemplate,\n    },\n  },\n  {\n    type: 'YAMLTemplate',\n    properties: {\n      model: TaskRunModel,\n      template: newTaskRunTemplate,\n    },\n  },\n  {\n    type: 'YAMLTemplate',\n    properties: {\n      model: PipelineResourceModel,\n      template: newPipelineResourceTemplate,\n    },\n  },\n  {\n    type: 'YAMLTemplate',\n    properties: {\n      model: ClusterTaskModel,\n      template: newClusterTaskTemplate,\n    },\n  },\n  {\n    type: 'AddAction',\n    properties: {\n      id: 'import-from-git',\n      url: '/import',\n      label: 'From Git',\n      description: 'Import code from your git repository to be built and deployed',\n      icon: importGitIcon,\n      accessReview: [\n        BuildConfigModel,\n        ImageStreamModel,\n        DeploymentConfigModel,\n        SecretModel,\n        RouteModel,\n        ServiceModel,\n      ].map((model) => ({\n        group: model.apiGroup || '',\n        resource: model.plural,\n        verb: 'create',\n      })),\n    },\n  },\n  {\n    type: 'AddAction',\n    properties: {\n      id: 'deploy-image',\n      url: '/deploy-image',\n      label: 'Container Image',\n      description: 'Deploy an existing image from an image registry or image stream tag',\n      iconClass: 'pficon-image',\n      accessReview: [\n        BuildConfigModel,\n        ImageStreamModel,\n        DeploymentConfigModel,\n        ImageStreamImportsModel,\n        SecretModel,\n        RouteModel,\n        ServiceModel,\n      ].map((model) => ({\n        group: model.apiGroup || '',\n        resource: model.plural,\n        verb: 'create',\n      })),\n    },\n  },\n  {\n    type: 'AddAction',\n    properties: {\n      id: 'import-from-dockerfile',\n      url: '/import?importType=docker',\n      label: 'From Dockerfile',\n      description: 'Import your Dockerfile from your git repo to be built and deployed',\n      icon: dockerfileIcon,\n      accessReview: [\n        BuildConfigModel,\n        ImageStreamModel,\n        DeploymentConfigModel,\n        SecretModel,\n        RouteModel,\n        ServiceModel,\n      ].map((model) => ({\n        group: model.apiGroup || '',\n        resource: model.plural,\n        verb: 'create',\n      })),\n    },\n  },\n  {\n    type: 'AddAction',\n    properties: {\n      id: 'import-yaml',\n      url: '/k8s/ns/:namespace/import',\n      label: 'YAML',\n      description: 'Create resources from their YAML or JSON definitions',\n      icon: yamlIcon,\n    },\n  },\n  {\n    type: 'AddAction',\n    properties: {\n      id: 'dev-catalog',\n      url: '/catalog',\n      label: 'From Catalog',\n      description: 'Browse the catalog to discover, deploy and connect to services',\n      icon: <CatalogIcon />,\n    },\n  },\n  // {\n  //   type: 'AddAction',\n  //   properties: {\n  //     id: 'dev-catalog-databases',\n  //     url: '/catalog?category=databases',\n  //     label: 'Database',\n  //     description: 'Browse the catalog to discover database services to add to your application',\n  //     icon: <DatabaseIcon />,\n  //   },\n  // },\n  // {\n  //   type: 'AddAction',\n  //   properties: {\n  //     id: 'operator-backed',\n  //     url: '/catalog?kind=%5B\"ClusterServiceVersion\"%5D',\n  //     label: 'Operator Backed',\n  //     description: 'Browse the catalog to discover and deploy operator managed services',\n  //     icon: <BoltIcon />,\n  //   },\n  // },\n  {\n    type: 'AddAction',\n    properties: {\n      id: 'helm',\n      url: '/catalog?kind=%5B\"HelmChart\"%5D',\n      label: 'Helm Chart',\n      description: 'Browse the catalog to discover and install Helm Charts',\n      icon: helmIcon,\n    },\n  },\n  {\n    type: 'AddAction',\n    flags: {\n      required: [FLAG_OPENSHIFT_PIPELINE],\n    },\n    properties: {\n      id: 'pipeline',\n      url: `/k8s/ns/:namespace/${referenceForModel(PipelineModel)}/~new/builder`,\n      label: 'Pipeline',\n      description: 'Create a Tekton Pipeline to automate delivery of your application',\n      icon: pipelineIcon,\n      accessReview: [\n        {\n          group: PipelineModel.apiGroup,\n          resource: PipelineModel.plural,\n          verb: 'create',\n        },\n      ],\n    },\n  },\n];\n\nexport default plugin;\n","export * from './pipelines';\n","export const newPipelineTemplate = `\napiVersion: tekton.dev/v1beta1\nkind: Pipeline\nmetadata:\n  name: new-pipeline\nspec:\n  params:\n    - name: paramName\n      type: string\n  resources:\n    - name: app-git\n      type: git\n    - name: app-image\n      type: image\n  tasks:\n    - name: build-app\n      taskRef:\n        name: s2i-java-11\n        kind: ClusterTask\n      resources:\n        inputs:\n        - name: source\n          resource: app-git\n        outputs:\n        - name: image\n          resource: app-image\n`;\n\nexport const newPipelineResourceTemplate = `\napiVersion: tekton.dev/v1alpha1\nkind: PipelineResource\nmetadata:\n  name: nginx-ex-git-resource\nspec:\n  type: git\n  params:\n    - name: url\n      value: https://github.com/sclorg/nginx-ex.git\n    - name: revision\n      value: master\n`;\n\nexport const newTaskTemplate = `\napiVersion: tekton.dev/v1beta1\nkind: Task\nmetadata:\n  name: example-task\nspec:\n  params:\n    - name: appName\n      type: string\n  steps:\n  - image: registry.redhat.io/ubi7/ubi-minimal\n    command:\n    - /bin/bash\n    - '-c'\n    - echo\n    - $(inputs.params.appName)\n`;\n\nexport const newTaskRunTemplate = `\napiVersion: tekton.dev/v1beta1\nkind: TaskRun\nmetadata:\n  name: example-taskrun\nspec:\n  taskSpec:\n    steps:\n      - name: echo\n        image: registry.redhat.io/ubi7/ubi-minimal\n        command:\n        - /bin/bash\n        - '-c'\n        - echo\n        - \"Hello OpenShift\"\n`;\n\nexport const newClusterTaskTemplate = `\napiVersion: tekton.dev/v1beta1\nkind: ClusterTask\nmetadata:\n  name: example-cluster-task\nspec:\n  params:\n    - name: appName\n      type: string\n  steps:\n  - image: registry.redhat.io/ubi7/ubi-minimal\n    command:\n    - /bin/bash\n    - '-c'\n    - echo\n    - $(inputs.params.appName)\n`;\n","import { K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\nimport { KebabOption } from '@console/internal/components/utils';\nimport { ImportOptions } from '../components/import/import-types';\nimport { QUERY_PROPERTIES, UNASSIGNED_KEY } from '../const';\n\nconst PART_OF = 'app.kubernetes.io/part-of';\n\nexport const getAddPageUrl = (\n  obj: K8sResourceKind,\n  namespace: string,\n  type: string,\n  hasApplication: boolean,\n  contextSource?: string,\n): string => {\n  let pageUrl = '';\n  const params = new URLSearchParams();\n  const appGroup = obj?.metadata?.labels?.[PART_OF] || '';\n  const ns = namespace || obj?.metadata?.namespace;\n  switch (type) {\n    case ImportOptions.GIT:\n      pageUrl = `/import/ns/${ns}`;\n      params.append('importType', 'git');\n      break;\n    case ImportOptions.CONTAINER:\n      pageUrl = `/deploy-image/ns/${ns}`;\n      break;\n    case ImportOptions.CATALOG:\n      pageUrl = `/catalog/ns/${ns}`;\n      break;\n    case ImportOptions.DOCKERFILE:\n      pageUrl = `/import/ns/${ns}`;\n      params.append('importType', 'docker');\n      break;\n    case ImportOptions.DATABASE:\n      pageUrl = `/catalog/ns/${ns}`;\n      params.append('category', 'databases');\n      break;\n    case ImportOptions.EVENTSOURCE:\n      pageUrl = `/event-source/ns/${ns}`;\n      break;\n    default:\n      throw new Error('Invalid Import option provided');\n  }\n  if (hasApplication && appGroup) {\n    params.append(QUERY_PROPERTIES.APPLICATION, appGroup);\n  } else {\n    params.append(QUERY_PROPERTIES.APPLICATION, UNASSIGNED_KEY);\n  }\n  if (contextSource) {\n    params.append(QUERY_PROPERTIES.CONTEXT_SOURCE, contextSource);\n  }\n  return `${pageUrl}?${params.toString()}`;\n};\n\nexport const getMenuPath = (hasApplication: boolean, connectorSourceContext?: string): string =>\n  connectorSourceContext?.length ? null : hasApplication ? 'Add to Application' : 'Add to Project';\n\ntype KebabFactory = (\n  label: string,\n  icon: React.ReactNode,\n  importType: ImportOptions,\n  checkAccess?: string,\n) => KebabAction;\n\nexport type KebabAction = (\n  obj?: K8sResourceKind,\n  namespace?: string,\n  hasApplication?: boolean,\n  connectorSourceObj?: K8sResourceKind,\n  accessData?: string[],\n) => KebabOption;\n\nexport const createKebabAction: KebabFactory = (label, icon, importType, checkAccess) => (\n  obj: K8sResourceKind,\n  namespace: string,\n  hasApplication: boolean,\n  connectorSourceObj: K8sResourceKind,\n  accessData: string[],\n) => {\n  if (checkAccess && !accessData.includes(checkAccess)) {\n    return null;\n  }\n  const connectorSourceContext: string = connectorSourceObj?.metadata\n    ? `${referenceFor(connectorSourceObj)}/${connectorSourceObj?.metadata?.name}`\n    : null;\n\n  return {\n    label,\n    icon,\n    path: getMenuPath(hasApplication, connectorSourceContext),\n    href: getAddPageUrl(obj, namespace, importType, hasApplication, connectorSourceContext),\n  };\n};\n","import * as _ from 'lodash';\nimport { K8sKind, referenceForModel } from '@console/internal/module/k8s';\nimport { KebabAction } from '@console/internal/components/utils';\nimport {\n  DaemonSetModel,\n  DeploymentConfigModel,\n  DeploymentModel,\n  StatefulSetModel,\n} from '@console/internal/models';\nimport { EditApplication } from '../actions/modify-application';\n\nconst modifyWebConsoleApplicationRefs = [\n  referenceForModel(DeploymentConfigModel),\n  referenceForModel(DeploymentModel),\n  referenceForModel(DaemonSetModel),\n  referenceForModel(StatefulSetModel),\n];\n\nconst editApplicationRefs = [\n  referenceForModel(DeploymentConfigModel),\n  referenceForModel(DeploymentModel),\n];\n\nexport const getKebabActionsForKind = (resourceKind: K8sKind): KebabAction[] => {\n  if (!resourceKind) {\n    // no common actions\n    return [];\n  }\n\n  return _.includes(modifyWebConsoleApplicationRefs, referenceForModel(resourceKind))\n    ? [\n        ...(_.includes(editApplicationRefs, referenceForModel(resourceKind))\n          ? [EditApplication]\n          : []),\n      ]\n    : [];\n};\n","import * as _ from 'lodash';\n\nexport const pipelineRunStatus = (pipelineRun): string => {\n  const conditions = _.get(pipelineRun, ['status', 'conditions'], []);\n  const isCancelled = conditions.find((c) =>\n    ['PipelineRunCancelled', 'TaskRunCancelled'].some((cancel) => cancel === c.reason),\n  );\n  if (isCancelled) {\n    return 'Cancelled';\n  }\n  if (conditions.length === 0) return null;\n\n  const condition = conditions.find((c) => c.type === 'Succeeded');\n  return !condition || !condition.status\n    ? null\n    : condition.status === 'True'\n    ? 'Succeeded'\n    : condition.status === 'False'\n    ? 'Failed'\n    : 'Running';\n};\n\nexport const pipelineFilterReducer = (pipeline): string => {\n  if (!pipeline.latestRun) return '-';\n  return pipelineRunStatus(pipeline.latestRun) || '-';\n};\n\nexport const pipelineRunFilterReducer = (pipelineRun): string => {\n  const status = pipelineRunStatus(pipelineRun);\n  return status || '-';\n};\n\nexport const pipelineStatusFilter = (filters, pipeline) => {\n  if (!filters || !filters.selected || !filters.selected.size) {\n    return true;\n  }\n  const status = pipelineFilterReducer(pipeline);\n  return filters.selected.has(status) || !_.includes(filters.all, status);\n};\n\nexport const pipelineRunStatusFilter = (phases, pipeline) => {\n  if (!phases || !phases.selected || !phases.selected.size) {\n    return true;\n  }\n\n  const status = pipelineRunFilterReducer(pipeline);\n  return phases.selected.has(status) || !_.includes(phases.all, status);\n};\n","import * as _ from 'lodash';\nimport { referenceForModel, K8sResourceKind } from '@console/internal/module/k8s';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport { PipelineRunModel, PipelineModel } from '../models';\nimport { Pipeline, PipelineRun } from './pipeline-augment';\n\n// label to get the pipelines\nexport const INSTANCE_LABEL = 'app.kubernetes.io/instance';\n\nexport const tknPipelineAndPipelineRunsResources = (namespace: string): FirehoseResource[] => {\n  const resources = [\n    {\n      isList: true,\n      kind: referenceForModel(PipelineRunModel),\n      namespace,\n      prop: 'pipelineRuns',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: referenceForModel(PipelineModel),\n      namespace,\n      prop: 'pipelines',\n      optional: true,\n    },\n  ];\n  return resources;\n};\n\ntype PipelineItem = {\n  pipelines: K8sResourceKind[];\n  pipelineRuns: K8sResourceKind[];\n};\n\nconst byCreationTime = (left: K8sResourceKind, right: K8sResourceKind): number => {\n  const leftCreationTime = new Date(_.get(left, ['metadata', 'creationTimestamp'], Date.now()));\n  const rightCreationTime = new Date(_.get(right, ['metadata', 'creationTimestamp'], Date.now()));\n  return rightCreationTime.getTime() - leftCreationTime.getTime();\n};\n\nconst getPipelineRunsForPipeline = (pipeline: Pipeline, props): PipelineRun[] => {\n  if (!props || !props.pipelineRuns) return null;\n  const pipelineRunsData = props.pipelineRuns.data;\n  const PIPELINE_RUN_LABEL = 'tekton.dev/pipeline';\n  const pipelineName = pipeline.metadata.name;\n  return pipelineRunsData\n    .filter((pr: PipelineRun) => {\n      return (\n        pipelineName ===\n        (_.get(pr, ['spec', 'pipelineRef', 'name'], null) ||\n          _.get(pr, ['metadata', 'labels', PIPELINE_RUN_LABEL], null))\n      );\n    })\n    .sort(byCreationTime);\n};\n\nexport const getPipelinesAndPipelineRunsForResource = (\n  resource: K8sResourceKind,\n  props,\n): PipelineItem => {\n  if (!_.has(props, ['pipelines', 'data'])) return null;\n  const pipelinesData = props.pipelines.data;\n  const resourceIntanceName = _.get(resource, ['metadata', 'labels', INSTANCE_LABEL], null);\n  if (!resourceIntanceName) return null;\n  const resourcePipeline = pipelinesData.find(\n    (pl) => _.get(pl, ['metadata', 'labels', INSTANCE_LABEL], null) === resourceIntanceName,\n  );\n  if (!resourcePipeline) return null;\n  return {\n    pipelines: [resourcePipeline],\n    pipelineRuns: getPipelineRunsForPipeline(resourcePipeline, props),\n  };\n};\n","import { combineReducers } from 'redux';\nimport filterReducer from '../components/topology/redux/reducer';\n\nexport default combineReducers({\n  topology: filterReducer,\n});\n","import * as React from 'react';\nimport {\n  createKebabAction,\n  KebabAction,\n} from '@console/dev-console/src/utils/add-resources-menu-utils';\nimport { ImportOptions } from '@console/dev-console/src/components/import/import-types';\nimport * as eventSourceImg from '../imgs/event-source.svg';\n\nconst eventSourceIconStyle = {\n  width: '1em',\n  height: '1em',\n};\nconst EventSourceIcon: React.FC = () => {\n  return <img style={eventSourceIconStyle} src={eventSourceImg} alt=\"\" />;\n};\n\nexport const addEventSource: KebabAction = createKebabAction(\n  'Event Source',\n  <EventSourceIcon />,\n  ImportOptions.EVENTSOURCE,\n);\n","export * from './add-event-source';\nexport * from './traffic-splitting';\n","import { KebabOption } from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { setSinkSourceModal } from '../components/modals';\n\nexport const setSinkSource = (model: K8sKind, source: K8sResourceKind): KebabOption => {\n  return {\n    label: 'Move Sink',\n    callback: () =>\n      setSinkSourceModal({\n        source,\n      }),\n    accessReview: {\n      group: model.apiGroup,\n      resource: model.plural,\n      name: source.metadata.name,\n      namespace: source.metadata.namespace,\n      verb: 'update',\n    },\n  };\n};\n","import { KebabOption } from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { setTrafficDistributionModal } from '../components/modals';\n\nexport const setTrafficDistribution = (model: K8sKind, obj: K8sResourceKind): KebabOption => {\n  return {\n    label: 'Set Traffic Distribution',\n    callback: () =>\n      setTrafficDistributionModal({\n        obj,\n      }),\n    accessReview: {\n      group: model.apiGroup,\n      resource: model.plural,\n      name: obj.metadata.name,\n      namespace: obj.metadata.namespace,\n      verb: 'update',\n    },\n  };\n};\n","export const setTrafficDistributionModal = (props) =>\n  import(\n    '../traffic-splitting/TrafficSplittingController' /* webpackChunkName: \"set-traffic-splitting\" */\n  ).then((m) => m.trafficModalLauncher(props));\n\nexport const setSinkSourceModal = (props) =>\n  import('../sink-source/SinkSourceController' /* webpackChunkName: \"sink-source\" */).then((m) =>\n    m.sinkModalLauncher(props),\n  );\n\nexport const deleteRevisionModal = (props) =>\n  import(\n    '../revisions/DeleteRevisionModalController' /* webpackChunkName: \"delete-revision\" */\n  ).then((m) => m.deleteRevisionModalLauncher(props));\n","export const FLAG_KNATIVE_SERVING_CONFIGURATION = 'KNATIVE_SERVING_CONFIGURATION';\nexport const FLAG_KNATIVE_SERVING = 'KNATIVE_SERVING';\nexport const FLAG_KNATIVE_EVENTING = 'KNATIVE_EVENTING';\nexport const FLAG_KNATIVE_SERVING_REVISION = 'KNATIVE_SERVING_REVISION';\nexport const FLAG_KNATIVE_SERVING_ROUTE = 'KNATIVE_SERVING_ROUTE';\nexport const FLAG_KNATIVE_SERVING_SERVICE = 'KNATIVE_SERVING_SERVICE';\nexport const KNATIVE_SERVING_LABEL = 'serving.knative.dev/service';\nexport const KNATIVE_SERVING_APIGROUP = 'serving.knative.dev';\nexport const KNATIVE_EVENT_SOURCE_APIGROUP_DEP = 'sources.eventing.knative.dev';\nexport const KNATIVE_EVENT_SOURCE_APIGROUP = 'sources.knative.dev';\n","module.exports = __webpack_public_path__ + \"assets/event-source.svg\";","export * from './const';\nexport * from './models';\nexport * from './types';\nexport * from './actions';\n","import {\n  chart_color_cyan_400 as knativeServingColor,\n  chart_color_red_300 as knativeEventingColor,\n} from '@patternfly/react-tokens';\nimport { K8sKind } from '@console/internal/module/k8s';\nimport { BadgeType } from '@console/shared/src/components/badges/badge-factory';\nimport {\n  KNATIVE_EVENT_SOURCE_APIGROUP,\n  KNATIVE_EVENT_SOURCE_APIGROUP_DEP,\n  KNATIVE_SERVING_APIGROUP,\n} from './const';\n\nconst apiVersion = 'v1';\n\nexport const ConfigurationModel: K8sKind = {\n  apiGroup: KNATIVE_SERVING_APIGROUP,\n  apiVersion,\n  kind: 'Configuration',\n  plural: 'configurations',\n  label: 'Configuration',\n  labelPlural: 'Configurations',\n  id: 'configuration',\n  abbr: 'CFG',\n  namespaced: true,\n  crd: true,\n  color: knativeServingColor.value,\n};\n\nexport const KnativeServingModel: K8sKind = {\n  apiGroup: 'operator.knative.dev',\n  apiVersion: 'v1alpha1',\n  kind: 'KnativeServing',\n  label: 'Knative Serving',\n  labelPlural: 'Knative Servings',\n  plural: 'knativeservings',\n  id: 'knativeserving',\n  abbr: 'KS',\n  namespaced: true,\n  crd: true,\n  color: knativeServingColor.value,\n};\n\nexport const KnativeEventingModel: K8sKind = {\n  apiGroup: 'operator.knative.dev',\n  apiVersion: 'v1alpha1',\n  kind: 'KnativeEventing',\n  label: 'Knative Eventing',\n  labelPlural: 'Knative Eventings',\n  plural: 'knativeeventings',\n  id: 'knativeeventing',\n  abbr: 'KE',\n  namespaced: true,\n  crd: true,\n  badge: BadgeType.TECH,\n  color: knativeEventingColor.value,\n};\n\nexport const RevisionModel: K8sKind = {\n  apiGroup: KNATIVE_SERVING_APIGROUP,\n  apiVersion,\n  kind: 'Revision',\n  label: 'Revision',\n  labelPlural: 'Revisions',\n  plural: 'revisions',\n  id: 'revision',\n  abbr: 'REV',\n  namespaced: true,\n  crd: true,\n  color: knativeServingColor.value,\n};\n\nexport const RouteModel: K8sKind = {\n  apiGroup: KNATIVE_SERVING_APIGROUP,\n  apiVersion,\n  kind: 'Route',\n  label: 'Route',\n  labelPlural: 'Routes',\n  plural: 'routes',\n  id: 'route',\n  abbr: 'RT',\n  namespaced: true,\n  crd: true,\n  color: knativeServingColor.value,\n};\n\nexport const ServiceModel: K8sKind = {\n  apiGroup: KNATIVE_SERVING_APIGROUP,\n  apiVersion,\n  kind: 'Service',\n  label: 'Service',\n  labelPlural: 'Services',\n  plural: 'services',\n  id: 'service',\n  abbr: 'KSVC',\n  namespaced: true,\n  crd: true,\n  color: knativeServingColor.value,\n};\n\nexport const EventSourceCronJobModel: K8sKind = {\n  apiGroup: KNATIVE_EVENT_SOURCE_APIGROUP_DEP,\n  apiVersion: 'v1alpha1',\n  kind: 'CronJobSource',\n  label: 'CronJob Source',\n  labelPlural: 'CronJob Sources',\n  plural: 'cronjobsources',\n  id: 'cronjobsource',\n  abbr: 'CJS',\n  namespaced: true,\n  crd: true,\n  color: knativeEventingColor.value,\n};\n\nexport const EventSourcePingModel: K8sKind = {\n  apiGroup: KNATIVE_EVENT_SOURCE_APIGROUP,\n  apiVersion: 'v1alpha1',\n  kind: 'PingSource',\n  label: 'Ping Source',\n  labelPlural: 'Ping Sources',\n  plural: 'pingsources',\n  id: 'pingsource',\n  abbr: 'PS',\n  namespaced: true,\n  crd: true,\n  color: knativeEventingColor.value,\n};\n\nexport const EventSourceContainerModel: K8sKind = {\n  apiGroup: KNATIVE_EVENT_SOURCE_APIGROUP_DEP,\n  apiVersion: 'v1alpha1',\n  kind: 'ContainerSource',\n  label: 'Container Source',\n  labelPlural: 'Container Sources',\n  plural: 'containersources',\n  id: 'containersource',\n  abbr: 'CS',\n  namespaced: true,\n  crd: true,\n  color: knativeEventingColor.value,\n};\n\nexport const EventSourceApiServerModel: K8sKind = {\n  apiGroup: KNATIVE_EVENT_SOURCE_APIGROUP,\n  apiVersion: 'v1alpha1',\n  kind: 'ApiServerSource',\n  label: 'ApiServerSource',\n  labelPlural: 'ApiServerSources',\n  plural: 'apiserversources',\n  id: 'apiserversource',\n  abbr: 'AS',\n  namespaced: true,\n  crd: true,\n  color: knativeEventingColor.value,\n};\n\nexport const EventSourceCamelModel: K8sKind = {\n  apiGroup: KNATIVE_EVENT_SOURCE_APIGROUP,\n  apiVersion: 'v1alpha1',\n  kind: 'CamelSource',\n  label: 'CamelSource',\n  labelPlural: 'CamelSources',\n  plural: 'camelsources',\n  id: 'camelsource',\n  abbr: 'CS',\n  namespaced: true,\n  crd: true,\n  color: knativeEventingColor.value,\n};\n\nexport const EventSourceKafkaModel: K8sKind = {\n  apiGroup: KNATIVE_EVENT_SOURCE_APIGROUP,\n  apiVersion: 'v1alpha1',\n  kind: 'KafkaSource',\n  label: 'KafkaSource',\n  labelPlural: 'KafkaSources',\n  plural: 'kafkasources',\n  id: 'kafkasource',\n  abbr: 'KS',\n  namespaced: true,\n  crd: true,\n  color: knativeEventingColor.value,\n};\n\nexport const EventSourceSinkBindingModel: K8sKind = {\n  apiGroup: KNATIVE_EVENT_SOURCE_APIGROUP,\n  apiVersion: 'v1alpha1',\n  kind: 'SinkBinding',\n  label: 'SinkBinding',\n  labelPlural: 'SinkBindings',\n  plural: 'sinkbindings',\n  id: 'sinkbindingsource',\n  abbr: 'SBS',\n  namespaced: true,\n  crd: true,\n  color: knativeEventingColor.value,\n};\n","import * as _ from 'lodash';\nimport {\n  Plugin,\n  ResourceNSNavItem,\n  ModelFeatureFlag,\n  ModelDefinition,\n  OverviewResourceTab,\n  OverviewCRD,\n  ResourceListPage,\n  ResourceDetailsPage,\n  RoutePage,\n  GlobalConfig,\n  KebabActions,\n  YAMLTemplate,\n} from '@console/plugin-sdk';\nimport { NamespaceRedirect } from '@console/internal/components/utils/namespace-redirect';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { AddAction } from '@console/dev-console/src/extensions/add-actions';\nimport * as models from './models';\nimport { yamlTemplates } from './yaml-templates';\nimport {\n  FLAG_KNATIVE_SERVING_CONFIGURATION,\n  FLAG_KNATIVE_SERVING,\n  FLAG_KNATIVE_SERVING_REVISION,\n  FLAG_KNATIVE_SERVING_ROUTE,\n  FLAG_KNATIVE_SERVING_SERVICE,\n  FLAG_KNATIVE_EVENTING,\n} from './const';\nimport {\n  getKnativeServingConfigurations,\n  getKnativeServingRoutes,\n  getKnativeServingRevisions,\n  getKnativeServingServices,\n  knativeServingResourcesRevision,\n  knativeServingResourcesConfigurations,\n  knativeServingResourcesRoutes,\n  knativeServingResourcesServices,\n} from './utils/get-knative-resources';\nimport { getKebabActionsForKind } from './utils/kebab-actions';\nimport {\n // fetchEventSourcesCrd,\n  getDynamicEventSourcesResourceList,\n  hideDynamicEventSourceCard,\n} from './utils/fetch-dynamic-eventsources-utils';\nimport * as eventSourceIcon from './imgs/event-source.svg';\n\ntype ConsumedExtensions =\n  | ResourceNSNavItem\n  | ModelFeatureFlag\n  | ModelDefinition\n  | GlobalConfig\n  | OverviewResourceTab\n  | OverviewCRD\n  | ResourceListPage\n  | RoutePage\n  | KebabActions\n  | YAMLTemplate\n  | ResourceDetailsPage\n  | AddAction;\n\n// Added it to perform discovery of Dynamic event sources on cluster on app load as kebab option needed models upfront\n// fetchEventSourcesCrd();\nconst plugin: Plugin<ConsumedExtensions> = [\n  {\n    type: 'ModelDefinition',\n    properties: {\n      models: _.values(models),\n    },\n  },\n  {\n    type: 'FeatureFlag/Model',\n    properties: {\n      model: models.ConfigurationModel,\n      flag: FLAG_KNATIVE_SERVING_CONFIGURATION,\n    },\n  },\n  {\n    type: 'FeatureFlag/Model',\n    properties: {\n      model: models.KnativeServingModel,\n      flag: FLAG_KNATIVE_SERVING,\n    },\n  },\n  {\n    type: 'FeatureFlag/Model',\n    properties: {\n      model: models.KnativeEventingModel,\n      flag: FLAG_KNATIVE_EVENTING,\n    },\n  },\n  {\n    type: 'FeatureFlag/Model',\n    properties: {\n      model: models.RevisionModel,\n      flag: FLAG_KNATIVE_SERVING_REVISION,\n    },\n  },\n  {\n    type: 'FeatureFlag/Model',\n    properties: {\n      model: models.RouteModel,\n      flag: FLAG_KNATIVE_SERVING_ROUTE,\n    },\n  },\n  {\n    type: 'FeatureFlag/Model',\n    properties: {\n      model: models.ServiceModel,\n      flag: FLAG_KNATIVE_SERVING_SERVICE,\n    },\n  },\n  {\n    type: 'GlobalConfig',\n    properties: {\n      kind: 'KnativeServing',\n      model: models.KnativeServingModel,\n      name: 'knative-serving',\n      namespace: 'knative-serving',\n      required: FLAG_KNATIVE_SERVING,\n      uid: 'knative-serving',\n    },\n  },\n  {\n    type: 'NavItem/ResourceNS',\n    properties: {\n      section: 'Serverless',\n      componentProps: {\n        name: models.ServiceModel.labelPlural,\n        resource: referenceForModel(models.ServiceModel),\n      },\n    },\n    flags: {\n      required: [FLAG_KNATIVE_SERVING_SERVICE],\n    },\n  },\n  {\n    type: 'NavItem/ResourceNS',\n    properties: {\n      section: 'Serverless',\n      componentProps: {\n        name: models.RevisionModel.labelPlural,\n        resource: referenceForModel(models.RevisionModel),\n      },\n    },\n    flags: {\n      required: [FLAG_KNATIVE_SERVING_REVISION],\n    },\n  },\n  {\n    type: 'NavItem/ResourceNS',\n    properties: {\n      section: 'Serverless',\n      componentProps: {\n        name: models.RouteModel.labelPlural,\n        resource: referenceForModel(models.RouteModel),\n      },\n    },\n    flags: {\n      required: [FLAG_KNATIVE_SERVING_ROUTE],\n    },\n  },\n  {\n    type: 'Overview/Resource',\n    properties: {\n      name: 'Resources',\n      key: 'configurations',\n      loader: () =>\n        import(\n          './components/overview/OverviewDetailsKnativeResourcesTab' /* webpackChunkName: \"knative-overview\" */\n        ).then((m) => m.default),\n    },\n  },\n  {\n    type: 'Overview/CRD',\n    properties: {\n      resources: knativeServingResourcesRevision,\n      required: FLAG_KNATIVE_SERVING_REVISION,\n      utils: getKnativeServingRevisions,\n    },\n  },\n  {\n    type: 'Overview/CRD',\n    properties: {\n      resources: knativeServingResourcesConfigurations,\n      required: FLAG_KNATIVE_SERVING_CONFIGURATION,\n      utils: getKnativeServingConfigurations,\n    },\n  },\n  {\n    type: 'Overview/CRD',\n    properties: {\n      resources: knativeServingResourcesRoutes,\n      required: FLAG_KNATIVE_SERVING_ROUTE,\n      utils: getKnativeServingRoutes,\n    },\n  },\n  {\n    type: 'Overview/CRD',\n    properties: {\n      resources: knativeServingResourcesServices,\n      required: FLAG_KNATIVE_SERVING_SERVICE,\n      utils: getKnativeServingServices,\n    },\n  },\n  {\n    type: 'Overview/CRD',\n    properties: {\n      resources: getDynamicEventSourcesResourceList,\n      required: FLAG_KNATIVE_EVENTING,\n      utils: () => null,\n    },\n  },\n  {\n    type: 'Page/Resource/List',\n    properties: {\n      model: models.RevisionModel,\n      loader: async () =>\n        (\n          await import(\n            './components/revisions/RevisionsPage' /* webpackChunkName: \"knative-revisions-page\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Resource/Details',\n    properties: {\n      model: models.RevisionModel,\n      loader: async () =>\n        (\n          await import(\n            './components/revisions/RevisionDetailsPage' /* webpackChunkName: \"knative-revisions-details page\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Resource/List',\n    properties: {\n      model: models.ServiceModel,\n      loader: async () =>\n        (\n          await import(\n            './components/services/ServicesPage' /* webpackChunkName: \"knative-services-page\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Resource/List',\n    properties: {\n      model: models.RouteModel,\n      loader: async () =>\n        (\n          await import(\n            './components/routes/RoutesPage' /* webpackChunkName: \"knative-routes-page\" */\n          )\n        ).default,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: ['/event-source'],\n      component: NamespaceRedirect,\n      required: FLAG_KNATIVE_EVENTING,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: ['/event-source/all-namespaces', '/event-source/ns/:ns'],\n      loader: async () =>\n        (\n          await import(\n            './components/add/EventSourcePage' /* webpackChunkName: \"knative-event-source-page\" */\n          )\n        ).default,\n      required: FLAG_KNATIVE_EVENTING,\n    },\n  },\n  {\n    type: 'YAMLTemplate',\n    properties: {\n      model: models.ServiceModel,\n      template: yamlTemplates.getIn([models.ServiceModel, 'default']),\n    },\n  },\n  {\n    type: 'KebabActions',\n    properties: {\n      getKebabActionsForKind,\n    },\n  },\n  {\n    type: 'AddAction',\n    flags: {\n      required: [FLAG_KNATIVE_EVENTING],\n    },\n    properties: {\n      id: 'knative-event-source',\n      url: '/event-source',\n      label: 'Event Source',\n      description:\n        'Create an event source to register interest in a class of events from a particular system',\n      icon: eventSourceIcon,\n      hide: hideDynamicEventSourceCard,\n    },\n  },\n];\n\nexport default plugin;\n","import { K8sResourceKind, K8sResourceCondition } from '@console/internal/module/k8s';\n\nexport type ConfigurationKind = K8sResourceKind;\n\nexport type RevisionKind = {\n  status?: {\n    conditions?: RevisionCondition[];\n  };\n} & K8sResourceKind;\n\nexport type ServiceKind = K8sResourceKind & {\n  metadata?: {\n    generation?: number;\n  };\n  status?: {\n    url?: string;\n    traffic?: Traffic[];\n  };\n};\n\nexport type RouteKind = {\n  status: {\n    url: string;\n    traffic: Traffic[];\n  };\n} & K8sResourceKind;\n\nexport enum ConditionTypes {\n  Ready = 'Ready',\n  Active = 'Active',\n  ContainerHealthy = 'ContainerHealthy',\n  ResourcesAvailable = 'ResourcesAvailable',\n}\n\nexport type RevisionCondition = {\n  type: keyof typeof ConditionTypes;\n} & K8sResourceCondition;\n\nexport type Traffic = {\n  revisionName: string;\n  percent: number;\n  latestRevision?: boolean;\n  tag?: string;\n  url?: string;\n};\n\nexport type RoutesOverviewListItem = {\n  uid: string;\n  url: string;\n  percent: string;\n  name: string;\n  namespace: string;\n};\n","import * as _ from 'lodash';\nimport { useEffect } from 'react';\nimport { coFetch } from '@console/internal/co-fetch';\nimport { useSafetyFirst } from '@console/internal/components/safety-first';\nimport { K8sKind, kindToAbbr, referenceForModel } from '@console/internal/module/k8s';\nimport { chart_color_red_300 as knativeEventingColor } from '@patternfly/react-tokens';\nimport {\n  EventSourceContainerModel,\n  EventSourceApiServerModel,\n  EventSourceSinkBindingModel,\n  EventSourceCamelModel,\n  EventSourcePingModel,\n  EventSourceKafkaModel,\n  EventSourceCronJobModel,\n} from '../models';\n\ninterface EventSourcetData {\n  loaded: boolean;\n  eventSourceModels: K8sKind[];\n}\n\nconst eventSourceData: EventSourcetData = {\n  loaded: false,\n  eventSourceModels: [],\n};\n\n// To order sources with known followed by CamelSource and everything else\nexport const orderedEventSourceModelData = (allModels: K8sKind[]): K8sKind[] => {\n  const sortModels = _.orderBy(allModels, ['kind'], ['asc']);\n  const knownSourcesList = [\n    EventSourceApiServerModel.kind,\n    EventSourceContainerModel.kind,\n    EventSourceCronJobModel.kind,\n    EventSourceKafkaModel.kind,\n    EventSourcePingModel.kind,\n    EventSourceSinkBindingModel.kind,\n  ];\n  const knownSourcesCrd = _.filter(sortModels, (model) => knownSourcesList.includes(model.kind));\n  const camelSourcesCrd = _.filter(\n    sortModels,\n    (model) => model?.kind === EventSourceCamelModel.kind,\n  );\n  const dynamicSourcesCrd = _.filter(\n    sortModels,\n    (model) => !knownSourcesList.includes(model.kind) && model.kind !== EventSourceCamelModel.kind,\n  );\n  return [...knownSourcesCrd, ...camelSourcesCrd, ...dynamicSourcesCrd];\n};\n\nexport const fetchEventSourcesCrd = async () => {\n  const url = 'api/console/knative-event-sources';\n  try {\n    const res = await coFetch(url);\n    const resolvedRes = await res.json();\n    const allModels = _.reduce(\n      resolvedRes?.items,\n      (accumulator, crd) => {\n        const {\n          metadata: { labels },\n          spec: {\n            group,\n            versions,\n            names: { kind, plural, singular },\n          },\n        } = crd;\n        const { name: version } = versions?.find((ver) => ver.served && ver.storage);\n        if (version) {\n          const sourceModel = {\n            apiGroup: group,\n            apiVersion: version,\n            kind,\n            plural,\n            id: singular,\n            label: singular,\n            labelPlural: plural,\n            abbr: kindToAbbr(kind),\n            namespaced: true,\n            crd: true,\n            color: knativeEventingColor.value,\n          };\n          const sourceIndex = _.findIndex(accumulator, ['kind', kind]);\n          // added check as some sources has multiple entries with deprecated APIgroups\n          if (sourceIndex === -1) {\n            accumulator.push(sourceModel);\n          } else if (!labels?.['eventing.knative.dev/deprecated'] === true) {\n            accumulator.splice(sourceIndex, 1, sourceModel);\n          }\n        }\n        return accumulator;\n      },\n      [],\n    );\n\n    eventSourceData.eventSourceModels = orderedEventSourceModelData(allModels);\n  } catch (err) {\n    // show warning if there is an error fetching the CRDs\n    // eslint-disable-next-line no-console\n    console.warn('Error fetching CRDs for dynamic event sources', err);\n    eventSourceData.eventSourceModels = [];\n  }\n  eventSourceData.loaded = true;\n  return eventSourceData.eventSourceModels;\n};\n\nexport const useEventSourceModels = (): EventSourcetData => {\n  const [modelsData, setModelsData] = useSafetyFirst({ loaded: false, eventSourceModels: [] });\n  useEffect(() => {\n    if (!eventSourceData.loaded) {\n      fetchEventSourcesCrd()\n        .then((data) => {\n          setModelsData({ loaded: true, eventSourceModels: data });\n        })\n        .catch((err) => {\n          setModelsData({ loaded: true, eventSourceModels: eventSourceData.eventSourceModels });\n          // eslint-disable-next-line no-console\n          console.warn('Error fetching CRDs for dynamic event sources', err);\n        });\n    } else {\n      setModelsData({ loaded: true, eventSourceModels: eventSourceData.eventSourceModels });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return modelsData;\n};\n\nexport const getEventSourceModels = (): K8sKind[] => eventSourceData.eventSourceModels;\n\nexport const getDynamicEventSourcesResourceList = (namespace: string) => {\n  return eventSourceData.eventSourceModels.map((model) => {\n    return {\n      isList: true,\n      kind: referenceForModel(model),\n      namespace,\n      prop: referenceForModel(model),\n      optional: true,\n    };\n  });\n};\n\nexport const getDynamicEventSourceModel = (resourceRef: string): K8sKind => {\n  return eventSourceData.eventSourceModels.find(\n    (model: K8sKind) => referenceForModel(model) === resourceRef,\n  );\n};\n\nexport const getDynamicEventSourcesModelRefs = (): string[] => {\n  return eventSourceData.eventSourceModels.map((model: K8sKind) => referenceForModel(model));\n};\n\nexport const isDynamicEventResourceKind = (resourceRef: string): boolean => {\n  const index = eventSourceData.eventSourceModels.findIndex(\n    (model: K8sKind) => referenceForModel(model) === resourceRef,\n  );\n  return index !== -1;\n};\n\nexport const hideDynamicEventSourceCard = () =>\n  eventSourceData.eventSourceModels && eventSourceData.eventSourceModels.length > 0;\n","import * as _ from 'lodash';\nimport { K8sResourceKind, PodKind, referenceForModel } from '@console/internal/module/k8s';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport { KNATIVE_SERVING_LABEL } from '../const';\nimport { ServiceModel, RevisionModel, ConfigurationModel, RouteModel } from '../models';\n\nexport type KnativeItem = {\n  revisions?: K8sResourceKind[];\n  configurations?: K8sResourceKind[];\n  ksroutes?: K8sResourceKind[];\n  ksservices?: K8sResourceKind[];\n  eventSourceCronjob?: K8sResourceKind[];\n  eventSourceContainers?: K8sResourceKind[];\n  eventSourceApiserver?: K8sResourceKind[];\n  eventSourceCamel?: K8sResourceKind[];\n  eventSourceKafka?: K8sResourceKind[];\n  eventSourceSinkbinding?: K8sResourceKind[];\n  pods?: PodKind[];\n};\n\nconst isKnativeDeployment = (dc: K8sResourceKind) => {\n  return !!_.get(dc.metadata, `labels[\"${KNATIVE_SERVING_LABEL}\"]`);\n};\n\nconst getKsResource = (dc: K8sResourceKind, { data }: K8sResourceKind): K8sResourceKind[] => {\n  let ksResource = [];\n  if (isKnativeDeployment(dc)) {\n    ksResource = _.filter(data, (config: K8sResourceKind) => {\n      return dc.metadata.labels[KNATIVE_SERVING_LABEL] === _.get(config, 'metadata.name');\n    });\n  }\n  return ksResource;\n};\n\nconst getRevisions = (dc: K8sResourceKind, { data }): K8sResourceKind[] => {\n  let revisionResource = [];\n  if (isKnativeDeployment(dc)) {\n    revisionResource = _.filter(data, (revision: K8sResourceKind) => {\n      return dc.metadata.ownerReferences[0].uid === revision.metadata.uid;\n    });\n  }\n  return revisionResource;\n};\n\nexport const getKnativeServingRevisions = (dc: K8sResourceKind, props): KnativeItem | undefined => {\n  const revisions = props && props.revisions && getRevisions(dc, props.revisions);\n  return revisions && revisions.length > 0 ? { revisions } : undefined;\n};\n\nexport const getKnativeServingConfigurations = (\n  dc: K8sResourceKind,\n  props,\n): KnativeItem | undefined => {\n  const configurations = props && props.configurations && getKsResource(dc, props.configurations);\n  return configurations && configurations.length > 0 ? { configurations } : undefined;\n};\n\nexport const getKnativeServingRoutes = (dc: K8sResourceKind, props): KnativeItem | undefined => {\n  const ksroutes = props && props.ksroutes && getKsResource(dc, props.ksroutes);\n  return ksroutes && ksroutes.length > 0 ? { ksroutes } : undefined;\n};\n\nexport const getKnativeServingServices = (dc: K8sResourceKind, props): KnativeItem | undefined => {\n  const ksservices = props && props.ksservices && getKsResource(dc, props.ksservices);\n  return ksservices && ksservices.length > 0 ? { ksservices } : undefined;\n};\n\nexport const knativeServingResourcesRevision = (namespace: string): FirehoseResource[] => {\n  const knativeResource = [\n    {\n      isList: true,\n      kind: referenceForModel(RevisionModel),\n      namespace,\n      prop: 'revisions',\n      optional: true,\n    },\n  ];\n  return knativeResource;\n};\n\nexport const knativeServingResourcesConfigurations = (namespace: string): FirehoseResource[] => {\n  const knativeResource = [\n    {\n      isList: true,\n      kind: referenceForModel(ConfigurationModel),\n      namespace,\n      prop: 'configurations',\n      optional: true,\n    },\n  ];\n  return knativeResource;\n};\n\nexport const knativeServingResourcesRoutes = (namespace: string): FirehoseResource[] => {\n  const knativeResource = [\n    {\n      isList: true,\n      kind: referenceForModel(RouteModel),\n      namespace,\n      prop: 'ksroutes',\n      optional: true,\n    },\n  ];\n  return knativeResource;\n};\n\nexport const knativeServingResourcesServices = (namespace: string): FirehoseResource[] => {\n  const knativeResource = [\n    {\n      isList: true,\n      kind: referenceForModel(ServiceModel),\n      namespace,\n      prop: 'ksservices',\n      optional: true,\n    },\n  ];\n  return knativeResource;\n};\n","import * as _ from 'lodash';\nimport { K8sKind, referenceForModel } from '@console/internal/module/k8s';\nimport { KebabAction } from '@console/internal/components/utils';\nimport { EditApplication } from '@console/dev-console/src/actions/modify-application';\nimport { AddHealthChecks, EditHealthChecks } from '@console/app/src/actions/modify-health-checks';\nimport { setTrafficDistribution } from '../actions/traffic-splitting';\nimport { setSinkSource } from '../actions/sink-source';\nimport { ServiceModel } from '../models';\nimport { getDynamicEventSourcesModelRefs } from './fetch-dynamic-eventsources-utils';\n\nexport const getKebabActionsForKind = (resourceKind: K8sKind): KebabAction[] => {\n  const menuActions: KebabAction[] = [];\n  const eventSourceModelrefs: string[] = getDynamicEventSourcesModelRefs();\n  if (resourceKind) {\n    if (referenceForModel(resourceKind) === referenceForModel(ServiceModel)) {\n      menuActions.push(setTrafficDistribution, AddHealthChecks, EditApplication, EditHealthChecks);\n    }\n    if (_.includes(eventSourceModelrefs, referenceForModel(resourceKind))) {\n      menuActions.push(setSinkSource);\n    }\n  }\n  return menuActions;\n};\n","import { Map as ImmutableMap } from 'immutable';\nimport { ServiceModel } from './models';\n\nexport const yamlTemplates = ImmutableMap().setIn(\n  [ServiceModel, 'default'],\n  `\napiVersion: ${ServiceModel.apiGroup}/${ServiceModel.apiVersion}\nkind: ${ServiceModel.kind}\nmetadata:\n  name: sample\n  namespace: default\nspec:\n  template:\n    spec:\n      containers:\n      - image: openshift/hello-openshift\n`,\n);\n","import * as _ from 'lodash';\nimport { fromJS, Map as ImmutableMap } from 'immutable';\nimport { ImportProvidersField, VMWizardTab } from '../types';\nimport { iGet } from '../../../utils/immutable';\nimport { DeviceType } from '../../../constants/vm';\nimport { InternalActionType, WizardInternalAction } from './types';\n\nconst sequentializeBootOrderIndexes = (state, dialogId: string) => {\n  const bootOrderIndexes = [\n    ...state\n      .getIn([dialogId, 'tabs', VMWizardTab.NETWORKING, 'value'])\n      .toArray()\n      .map((network) => network.getIn(['networkInterface', 'bootOrder'])),\n    ...state\n      .getIn([dialogId, 'tabs', VMWizardTab.STORAGE, 'value'])\n      .toArray()\n      .map((storage) => storage.getIn(['disk', 'bootOrder'])),\n  ]\n    .filter((bootOrder) => bootOrder != null)\n    .sort((a, b) => a - b);\n\n  return [DeviceType.NIC, DeviceType.DISK].reduce((newState, deviceType) => {\n    const tab = deviceType === DeviceType.DISK ? VMWizardTab.STORAGE : VMWizardTab.NETWORKING;\n    const deviceName = deviceType === DeviceType.DISK ? 'disk' : 'networkInterface';\n\n    return newState.updateIn([dialogId, 'tabs', tab, 'value'], (deviceWrappers) => {\n      return deviceWrappers.map((deviceWrapper) => {\n        const oldBootOrder = deviceWrapper.getIn([deviceName, 'bootOrder']);\n\n        if (oldBootOrder != null) {\n          const newBootOrder = bootOrderIndexes.indexOf(oldBootOrder) + 1;\n          if (newBootOrder !== oldBootOrder) {\n            return deviceWrapper.setIn([deviceName, 'bootOrder'], newBootOrder);\n          }\n        }\n        return deviceWrapper;\n      });\n    });\n  }, state);\n};\n\nconst setDeviceBootOrder = (\n  state,\n  dialogId: string,\n  deviceID: string,\n  updatedDeviceType: DeviceType,\n  updatedDeviceBootOrder: number,\n) => {\n  const resultState = [DeviceType.NIC, DeviceType.DISK].reduce((newState, devType) => {\n    const tab = devType === DeviceType.DISK ? VMWizardTab.STORAGE : VMWizardTab.NETWORKING;\n    const deviceName = devType === DeviceType.DISK ? 'disk' : 'networkInterface';\n\n    return newState.updateIn([dialogId, 'tabs', tab, 'value'], (deviceWrappers) => {\n      return deviceWrappers.map((deviceWrapper) => {\n        const wrapperID = deviceWrapper.get('id');\n        const oldBootOrder = deviceWrapper.getIn([deviceName, 'bootOrder']);\n        const isUpdatedDevice = updatedDeviceType === devType && wrapperID === deviceID;\n        if (isUpdatedDevice || (oldBootOrder != null && updatedDeviceBootOrder <= oldBootOrder)) {\n          return deviceWrapper.setIn(\n            [deviceName, 'bootOrder'],\n            isUpdatedDevice ? updatedDeviceBootOrder : oldBootOrder + 1,\n          );\n        }\n        return deviceWrapper;\n      });\n    });\n  }, state);\n\n  return sequentializeBootOrderIndexes(resultState, dialogId);\n};\n\n// Merge deep in without updating the keys with undefined values\nconst mergeDeepInSpecial = (state, path: string[], value) =>\n  state.updateIn(path, (oldValue) => {\n    if (oldValue) {\n      return oldValue.mergeDeepWith(\n        (oldSubValue, newSubValue) =>\n          typeof newSubValue === 'undefined' ? oldSubValue : newSubValue,\n        value,\n      );\n    }\n    return value;\n  });\n\nconst TAB_UPDATE_KEYS = ['value', 'isValid', 'isLocked', 'isPending', 'hasAllRequiredFilled'];\n\nconst setTabKeys = (state, tab: VMWizardTab, action: WizardInternalAction) =>\n  TAB_UPDATE_KEYS.reduce((nextState, key) => {\n    if (typeof action.payload[key] === 'undefined') {\n      return nextState;\n    }\n    return nextState.setIn([action.payload.id, 'tabs', tab, key], fromJS(action.payload[key]));\n  }, state);\n\nconst setObjectValues = (state, path, obj) => {\n  return obj\n    ? Object.keys(obj).reduce(\n        (nextState, key) => nextState.setIn([...path, key], fromJS(obj[key])),\n        state,\n      )\n    : state;\n};\n\nconst updateIDItemInList = (state, path, item?) => {\n  const itemID = iGet(item, 'id');\n  return state.updateIn(path, (items) => {\n    const networkIndex = itemID != null ? items.findIndex((t) => iGet(t, 'id') === itemID) : -1;\n    if (networkIndex === -1) {\n      const maxID = items.map((t) => iGet(t, 'id')).max() || 0;\n      return items.push(item.set('id', _.toString(_.toSafeInteger(maxID) + 1)));\n    }\n    return items.set(networkIndex, item);\n  });\n};\n\nconst removeIDItemFromList = (state, path, itemID?) => {\n  return state.updateIn(path, (items) => {\n    const networkIndex = itemID == null ? -1 : items.findIndex((t) => iGet(t, 'id') === itemID);\n    return networkIndex === -1 ? items : items.delete(networkIndex);\n  });\n};\n\nexport default (state, action: WizardInternalAction) => {\n  if (!state) {\n    return ImmutableMap();\n  }\n  const { payload } = action;\n  const dialogID = payload && payload.id;\n\n  switch (action.type) {\n    case InternalActionType.Create:\n      return state.set(dialogID, fromJS(payload.value));\n    case InternalActionType.Dispose:\n      return state.delete(dialogID);\n    case InternalActionType.UpdateNIC:\n      return updateIDItemInList(\n        state,\n        [dialogID, 'tabs', VMWizardTab.NETWORKING, 'value'],\n        fromJS(payload.network),\n      );\n    case InternalActionType.RemoveNIC:\n      return removeIDItemFromList(\n        state,\n        [dialogID, 'tabs', VMWizardTab.NETWORKING, 'value'],\n        payload.networkID,\n      );\n    case InternalActionType.UpdateStorage:\n      return updateIDItemInList(\n        state,\n        [dialogID, 'tabs', VMWizardTab.STORAGE, 'value'],\n        fromJS(payload.storage),\n      );\n    case InternalActionType.RemoveStorage:\n      return removeIDItemFromList(\n        state,\n        [dialogID, 'tabs', VMWizardTab.STORAGE, 'value'],\n        payload.storageID,\n      );\n    case InternalActionType.SetDeviceBootOrder:\n      return setDeviceBootOrder(\n        state,\n        dialogID,\n        payload.deviceID,\n        payload.deviceType,\n        payload.bootOrder,\n      );\n    case InternalActionType.SetNetworks:\n      return setTabKeys(state, VMWizardTab.NETWORKING, action);\n    case InternalActionType.SetStorages:\n      return setTabKeys(state, VMWizardTab.STORAGE, action);\n    case InternalActionType.SetResults:\n      return setTabKeys(state, VMWizardTab.RESULT, action);\n    case InternalActionType.Update:\n      return mergeDeepInSpecial(state, [dialogID], fromJS(payload.value));\n    case InternalActionType.UpdateCommonData:\n      return setObjectValues(\n        setObjectValues(state, [dialogID, 'commonData', 'data'], payload.value.data),\n        [dialogID, 'commonData', 'dataIDReferences'],\n        payload.value.dataIDReferences,\n      );\n    case InternalActionType.SetExtraWSQueries:\n      return state.setIn([dialogID, 'extraWSQueries', payload.queryKey], fromJS(payload.wsQueries));\n    case InternalActionType.SetGoToStep:\n      return state.setIn([dialogID, 'transient', 'goToStep'], payload.tab);\n    case InternalActionType.SetTabValidity:\n      return state\n        .setIn([dialogID, 'tabs', payload.tab, 'isValid'], payload.isValid)\n        .setIn(\n          [dialogID, 'tabs', payload.tab, 'hasAllRequiredFilled'],\n          payload.hasAllRequiredFilled,\n        )\n        .setIn([dialogID, 'tabs', payload.tab, 'error'], payload.error);\n    case InternalActionType.SetTabLocked:\n      return state.setIn([dialogID, 'tabs', payload.tab, 'isLocked'], payload.isLocked);\n    case InternalActionType.SetTabHidden:\n      return state.setIn([dialogID, 'tabs', payload.tab, 'isHidden'], payload.isHidden);\n    case InternalActionType.SetTabIsCreateDisabled:\n      return state.setIn([dialogID, 'tabs', payload.tab, 'isCreateDisabled'], payload.isDisabled);\n    case InternalActionType.SetTabIsUpdateDisabled:\n      return state.setIn([dialogID, 'tabs', payload.tab, 'isUpdateDisabled'], payload.isDisabled);\n    case InternalActionType.SetTabIsDeleteDisabled:\n      return state.setIn([dialogID, 'tabs', payload.tab, 'isDeleteDisabled'], payload.isDisabled);\n    case InternalActionType.SetVmSettingsFieldValue:\n      return state.setIn(\n        [dialogID, 'tabs', VMWizardTab.VM_SETTINGS, 'value', payload.key, 'value'],\n        fromJS(payload.value),\n      );\n    case InternalActionType.SetImportProvidersFieldValue:\n      return state.setIn(\n        [dialogID, 'tabs', VMWizardTab.IMPORT_PROVIDERS, 'value', payload.key, 'value'],\n        fromJS(payload.value),\n      );\n    case InternalActionType.UpdateImportProviderField:\n      return mergeDeepInSpecial(\n        state,\n        [\n          dialogID,\n          'tabs',\n          VMWizardTab.IMPORT_PROVIDERS,\n          'value',\n          ImportProvidersField.PROVIDERS_DATA,\n          payload.provider,\n          payload.key,\n        ],\n        fromJS(payload.value),\n      );\n    case InternalActionType.SetImportProvider:\n      return state.setIn(\n        [\n          dialogID,\n          'tabs',\n          VMWizardTab.IMPORT_PROVIDERS,\n          'value',\n          ImportProvidersField.PROVIDERS_DATA,\n          payload.provider,\n        ],\n        fromJS(payload.value),\n      );\n    case InternalActionType.UpdateImportProvider:\n      return mergeDeepInSpecial(\n        state,\n        [\n          dialogID,\n          'tabs',\n          VMWizardTab.IMPORT_PROVIDERS,\n          'value',\n          ImportProvidersField.PROVIDERS_DATA,\n          payload.provider,\n        ],\n        fromJS(payload.value),\n      );\n    case InternalActionType.SetCloudInitFieldValue:\n      return state.setIn(\n        [dialogID, 'tabs', VMWizardTab.ADVANCED_CLOUD_INIT, 'value', payload.key, 'value'],\n        fromJS(payload.value),\n      );\n    case InternalActionType.SetInVmSettings:\n      return state.setIn(\n        [dialogID, 'tabs', VMWizardTab.VM_SETTINGS, 'value', ...payload.path],\n        fromJS(payload.value),\n      );\n    case InternalActionType.SetInVmSettingsBatch:\n      return payload.batch.reduce(\n        (nextState, { path, value }) =>\n          nextState.setIn(\n            [dialogID, 'tabs', VMWizardTab.VM_SETTINGS, 'value', ...path],\n            fromJS(value),\n          ),\n        state,\n      );\n    case InternalActionType.UpdateVmSettingsField:\n      return mergeDeepInSpecial(\n        state,\n        [dialogID, 'tabs', VMWizardTab.VM_SETTINGS, 'value', payload.key],\n        fromJS(payload.value),\n      );\n    case InternalActionType.UpdateVmSettings:\n      return mergeDeepInSpecial(\n        state,\n        [dialogID, 'tabs', VMWizardTab.VM_SETTINGS, 'value'],\n        fromJS(payload.value),\n      );\n    default:\n      break;\n  }\n  return state;\n};\n","import { ValidationObject } from '@console/shared';\nimport {\n  ChangedCommonData,\n  ChangedCommonDataProp,\n  CloudInitField,\n  ImportProvidersField,\n  OvirtProviderField,\n  VMImportProvider,\n  VMSettingsField,\n  SettingsFieldType,\n  VMWareProviderField,\n  VMWizardNetwork,\n  VMWizardStorage,\n  VMWizardTab,\n} from '../types';\nimport { DeviceType } from '../../../constants/vm';\nimport { FirehoseResourceEnhanced } from '../../../types/custom';\n\nexport enum ActionType {\n  Create = 'KubevirtVMWizardExternalCreate',\n  Dispose = 'KubevirtVMWiExternalDispose',\n  CreateVM = 'KubevirtVMWiExternalCreateVM',\n  UpdateCommonData = 'KubevirtVMWizardExternalUpdateCommonData',\n  SetGoToStep = 'KubevirtVMWizardExternalSetGoToStep',\n  OpenDifficultTabs = 'KubevirtVMWizardExternalOpenDifficultTabs',\n  SetVmSettingsFieldValue = 'KubevirtVMWizardExternalSetVmSettingsFieldValue',\n  SetImportProvidersFieldValue = 'KubevirtVMWizardExternalSetImportProvidersFieldValue',\n  UpdateImportProviderField = 'KubevirtVMWizardExternalUpdateImportProviderField',\n  SetCloudInitFieldValue = 'KubevirtVMWizardExternalSetCloudInitFieldValue',\n  SetTabLocked = 'KubevirtVMWizardExternalSetTabLocked',\n  SetTabHidden = 'KubevirtVMWizardExternalSetTabHidden',\n  RemoveNIC = 'KubevirtVMWizardExternalRemoveNIC',\n  UpdateNIC = 'KubevirtVMWizardExternalUpdateNIC',\n  SetDeviceBootOrder = 'KubevirtVMWizardExternalSetDeviceBootOrder',\n  RemoveStorage = 'KubevirtVMWizardExternalRemoveStorage',\n  UpdateStorage = 'KubevirtVMWizardExternalUpdateStorage',\n  SetResults = 'KubevirtVMWizardExternalSetResults',\n}\n\n// should not be called directly from outside redux code (e.g. stateUpdate)\nexport enum InternalActionType {\n  Create = 'KubevirtVMWizardCreate',\n  Dispose = 'KubevirtVMWizardDispose',\n  Update = 'KubevirtVMWizardUpdate',\n  UpdateCommonData = 'KubevirtVMWizardUpdateCommonData',\n  SetExtraWSQueries = 'KubevirtVMWizardSetExtraWSQueries',\n  SetGoToStep = 'KubevirtVMWizardSetGoToStep',\n  SetTabValidity = 'KubevirtVMWizardSetTabValidity',\n  SetTabLocked = 'KubevirtVMWizardSetTabLocked',\n  SetTabHidden = 'KubevirtVMWizardSetTabHidden',\n  SetTabIsCreateDisabled = 'KubevirtVMWizardSetTabIsCreateDisabled',\n  SetTabIsUpdateDisabled = 'KubevirtVMWizardSetTabIsUpdateDisabled',\n  SetTabIsDeleteDisabled = 'KubevirtVMWizardSetTabIsDeleteDisabled',\n  SetVmSettingsFieldValue = 'KubevirtVMWizardSetVmSettingsFieldValue',\n  SetImportProvidersFieldValue = 'KubevirtVMWizardSetImportProvidersFieldValue',\n  UpdateImportProviderField = 'KubevirtVMWizardUpdateImportProviderField',\n  SetImportProvider = 'KubevirtVMWizardSetImportProvider',\n  UpdateImportProvider = 'KubevirtVMWizardUpdateImportProvider',\n  SetCloudInitFieldValue = 'KubevirtVMWizardSetCloudInitFieldValue',\n  SetInVmSettings = 'KubevirtVMWizardSetInVmSettings',\n  SetInVmSettingsBatch = 'KubevirtVMWizardSetInVmSettingsBatch',\n  UpdateVmSettingsField = 'KubevirtVMWizardUpdateVmSettingsField',\n  UpdateVmSettings = 'KubevirtVMWizardUpdateVmSettings',\n  RemoveNIC = 'KubevirtVMWizardRemoveNIC',\n  UpdateNIC = 'KubevirtVMWizardUpdateNIC',\n  SetDeviceBootOrder = 'KubevirtVMWizardSetDeviceBootOrder',\n  RemoveStorage = 'KubevirtVMWizardRemoveStorage',\n  UpdateStorage = 'KubevirtVMWizardUpdateStorage',\n  SetNetworks = 'KubevirtVMWizardSetNetworks',\n  SetStorages = 'KubevirtVMWizardSetStorages',\n  SetResults = 'KubevirtVMWizardSetResults',\n}\n\nexport type WizardInternalAction = {\n  type: InternalActionType;\n  payload: {\n    id: string;\n    value?: any;\n    isValid?: boolean;\n    isLocked?: boolean;\n    isPending?: boolean;\n    isHidden?: boolean;\n    isDisabled?: boolean;\n    hasAllRequiredFilled?: boolean;\n    path?: string[];\n    key?:\n      | VMSettingsField\n      | CloudInitField\n      | VMWareProviderField\n      | OvirtProviderField\n      | ImportProvidersField;\n    queryKey?: string;\n    wsQueries?: FirehoseResourceEnhanced[];\n    provider?: VMImportProvider;\n    tab?: VMWizardTab;\n    batch?: ActionBatch;\n    network?: VMWizardNetwork;\n    networkID?: string;\n    storage?: VMWizardStorage;\n    storageID?: string;\n    deviceID?: string;\n    deviceType?: DeviceType;\n    bootOrder?: number;\n    error?: string;\n  };\n};\n\nexport type WizardInternalActionDispatcher = (id: string, ...any) => WizardInternalAction;\nexport type WizardActionDispatcher = (\n  id: string,\n  ...any\n) => (dispatch: Function, getState: Function) => void;\n\nexport type ActionBatch = { path: string[]; value: any }[];\n\nexport type UpdateOptions = {\n  id: string;\n  changedCommonData: ChangedCommonData;\n  dispatch: Function;\n  getState: Function;\n  prevState: any;\n};\n\nexport type Validator<Field = VMSettingsField> = (\n  field: SettingsFieldType<Field>,\n  options: UpdateOptions,\n) => ValidationObject;\n\nexport type ValidationConfig<Field = VMSettingsField> = {\n  [key: string]: {\n    detectValueChanges?: ((field, options) => Field[]) | Field[];\n    detectCommonDataChanges?:\n      | ((field, options) => ChangedCommonDataProp[])\n      | ChangedCommonDataProp[];\n    validator: Validator<Field>;\n  };\n};\n","import { ConfigMapKind } from '@console/internal/module/k8s';\nimport { V1Network, V1NetworkInterface } from '../../types/vm';\nimport { IDReferences } from '../../utils/redux/id-reference';\nimport { UINetworkEditConfig, UINetworkInterfaceValidation } from '../../types/ui/nic';\nimport { V1Disk } from '../../types/vm/disk/V1Disk';\nimport { V1Volume } from '../../types/vm/disk/V1Volume';\nimport { V1alpha1DataVolume } from '../../types/vm/disk/V1alpha1DataVolume';\nimport { V1PersistentVolumeClaim } from '../../types/vm/disk/V1PersistentVolumeClaim';\nimport { UIStorageEditConfig, UIStorageValidation } from '../../types/ui/storage';\n\nexport enum VMWizardTab {\n  IMPORT_PROVIDERS = 'IMPORT_PROVIDERS',\n  VM_SETTINGS = 'VM_SETTINGS',\n  NETWORKING = 'NETWORKING',\n  STORAGE = 'STORAGE',\n  ADVANCED_CLOUD_INIT = 'ADVANCED_CLOUD_INIT',\n  ADVANCED_VIRTUAL_HARDWARE = 'ADVANCED_VIRTUAL_HARDWARE',\n  REVIEW = 'REVIEW',\n  RESULT = 'RESULT',\n}\n\nexport enum VMWizardProps {\n  isSimpleView = 'isSimpleView',\n  isCreateTemplate = 'isCreateTemplate',\n  isProviderImport = 'isProviderImport',\n  userTemplateName = 'userTemplateName',\n  activeNamespace = 'activeNamespace',\n  openshiftFlag = 'openshiftFlag',\n  reduxID = 'reduxID',\n  virtualMachines = 'virtualMachines',\n  userTemplates = 'userTemplates',\n  commonTemplates = 'commonTemplates',\n  dataVolumes = 'dataVolumes',\n  storageClassConfigMap = 'storageClassConfigMap',\n}\n\n// order important\nexport const ALL_VM_WIZARD_TABS = [\n  VMWizardTab.IMPORT_PROVIDERS,\n  VMWizardTab.VM_SETTINGS,\n  VMWizardTab.NETWORKING,\n  VMWizardTab.STORAGE,\n  VMWizardTab.ADVANCED_CLOUD_INIT,\n  VMWizardTab.ADVANCED_VIRTUAL_HARDWARE,\n  VMWizardTab.REVIEW,\n  VMWizardTab.RESULT,\n];\n\nexport const VM_WIZARD_SIMPLE_TABS = [\n  VMWizardTab.IMPORT_PROVIDERS,\n  VMWizardTab.REVIEW,\n  VMWizardTab.RESULT,\n];\n\nexport const VM_WIZARD_DIFFICULT_TABS = ALL_VM_WIZARD_TABS.filter(\n  (tab) => !VM_WIZARD_SIMPLE_TABS.includes(tab),\n);\n\nexport enum VMSettingsField {\n  NAME = 'NAME',\n  HOSTNAME = 'HOSTNAME',\n  DESCRIPTION = 'DESCRIPTION',\n  PROVISION_SOURCE_TYPE = 'PROVISION_SOURCE_TYPE',\n  CONTAINER_IMAGE = 'CONTAINER_IMAGE',\n  IMAGE_URL = 'IMAGE_URL',\n  USER_TEMPLATE = 'USER_TEMPLATE',\n  OPERATING_SYSTEM = 'OPERATING_SYSTEM',\n  FLAVOR = 'FLAVOR',\n  MEMORY = 'MEMORY',\n  CPU = 'CPU',\n  WORKLOAD_PROFILE = 'WORKLOAD_PROFILE',\n  START_VM = 'START_VM',\n}\n\nexport enum ImportProvidersField {\n  PROVIDER = 'PROVIDER',\n  PROVIDERS_DATA = 'PROVIDERS_DATA',\n}\n\nexport enum VMImportProvider {\n  VMWARE = 'VMWARE',\n  OVIRT = 'OVIRT',\n}\n\nexport enum VMWareProviderProps {\n  vCenterSecrets = 'vCenterSecrets',\n  vmwareToKubevirtOsConfigMap = 'vmwareToKubevirtOsConfigMap',\n  deploymentPods = 'vmwareDeploymentPods',\n  deployment = 'vmwareDeployment',\n  v2vvmware = 'v2vvmware',\n}\n\nexport enum OvirtProviderProps {\n  ovirtEngineSecrets = 'ovirtEngineSecrets',\n  deploymentPods = 'ovirtDeploymentPods',\n  deployment = 'ovirtDeployment',\n  ovirtProvider = 'ovirtProvider',\n}\n\nexport enum VMWareProviderField {\n  VCENTER_SECRET_NAME = 'vmware_VCENTER',\n  HOSTNAME = 'vmware_HOSTNAME',\n  USERNAME = 'vmware_USER_NAME',\n  PASSWORD = 'vmware_USER_PASSWORD_AND_CHECK_CONNECTION',\n  REMEMBER_PASSWORD = 'vmware_REMEMBER_PASSWORD',\n\n  VM = 'vmware_VM',\n\n  STATUS = 'vmware_STATUS',\n\n  CONTROLLER_LAST_ERROR = 'vmware_CONTROLLER_LAST_ERROR',\n\n  CURRENT_V2V_VMWARE_CR_NAME = 'vmware_CURRENT_V2V_VMWARE_CR_NAME',\n  CURRENT_RESOLVED_VCENTER_SECRET_NAME = 'vmware_CURRENT_RESOLVED_VCENTER_SECRET_NAME',\n}\n\nexport enum OvirtProviderField {\n  OVIRT_ENGINE_SECRET_NAME = 'ovirt_OVIRT_ENGINE_SECRET_NAME',\n  API_URL = 'ovirt_API_URL',\n  CERTIFICATE = 'ovirt_CERTIFICATE',\n  USERNAME = 'ovirt_USERNAME',\n  PASSWORD = 'ovirt_PASSWORD',\n  REMEMBER_PASSWORD = 'ovirt_REMEMBER_PASSWORD',\n\n  VM = 'ovirt_VM',\n  CLUSTER = 'ovirt_CLUSTER',\n\n  STATUS = 'ovirt_STATUS',\n\n  CONTROLLER_LAST_ERROR = 'ovirt_CONTROLLER_LAST_ERROR',\n\n  CURRENT_OVIRT_PROVIDER_CR_NAME = 'ovirt_CURRENT_OVIRT_PROVIDER_CR_NAME',\n  CURRENT_RESOLVED_OVIRT_ENGINE_SECRET_NAME = 'ovirt_CURRENT_RESOLVED_OVIRT_ENGINE_SECRET_NAME',\n}\n\nexport enum CloudInitField {\n  IS_FORM = 'IS_FORM',\n}\n\nexport type VMSettingsRenderableField = Exclude<VMSettingsField, VMSettingsField.HOSTNAME>;\n\nexport type ImportProviderRenderableField = Exclude<\n  ImportProvidersField,\n  ImportProvidersField.PROVIDERS_DATA\n>;\n\nexport type VMWareProviderRenderableField =\n  | VMWareProviderField.VCENTER_SECRET_NAME\n  | VMWareProviderField.HOSTNAME\n  | VMWareProviderField.USERNAME\n  | VMWareProviderField.PASSWORD\n  | VMWareProviderField.REMEMBER_PASSWORD\n  | VMWareProviderField.STATUS\n  | VMWareProviderField.VM;\n\nexport type OvirtProviderRenderableField =\n  | OvirtProviderField.OVIRT_ENGINE_SECRET_NAME\n  | OvirtProviderField.API_URL\n  | OvirtProviderField.CERTIFICATE\n  | OvirtProviderField.USERNAME\n  | OvirtProviderField.PASSWORD\n  | OvirtProviderField.REMEMBER_PASSWORD\n  | OvirtProviderField.STATUS\n  | OvirtProviderField.CLUSTER\n  | OvirtProviderField.VM;\n\nexport type RenderableField =\n  | VMSettingsRenderableField\n  | ImportProviderRenderableField\n  | VMWareProviderRenderableField\n  | OvirtProviderRenderableField;\n\nexport type RenderableFieldResolver = {\n  [key in RenderableField]: string;\n};\n\nexport type VMWizardTabMetadata = {\n  isValid?: boolean;\n  isLocked?: boolean;\n  isHidden?: boolean;\n  isPending?: boolean;\n  hasAllRequiredFilled?: boolean;\n  error?: string;\n  isCreateDisabled?: boolean;\n  isUpdateDisabled?: boolean;\n  isDeleteDisabled?: boolean;\n};\n\nexport type VMWizardTabsMetadata = {\n  [k in VMWizardTab]: VMWizardTabMetadata;\n};\n\nexport type VMWizardTabState = VMWizardTabMetadata & {\n  value: any;\n};\n\nexport type SettingsFieldType<Field = VMSettingsField> = {\n  value: any;\n  key: Field;\n  isRequired?: any;\n  isHidden?: any;\n  isDisabled?: any;\n  [k: string]: any;\n};\n\nexport type ChangedCommonDataProp =\n  | VMWizardProps.activeNamespace\n  | VMWizardProps.openshiftFlag\n  | VMWizardProps.virtualMachines\n  | VMWizardProps.userTemplates\n  | VMWizardProps.commonTemplates\n  | VMWizardProps.dataVolumes\n  | VMWizardProps.storageClassConfigMap\n  | VMWareProviderProps.deployment\n  | VMWareProviderProps.deploymentPods\n  | VMWareProviderProps.v2vvmware\n  | VMWareProviderProps.vmwareToKubevirtOsConfigMap\n  | VMWareProviderProps.vCenterSecrets\n  | OvirtProviderProps.deployment\n  | OvirtProviderProps.deploymentPods\n  | OvirtProviderProps.ovirtEngineSecrets\n  | OvirtProviderProps.ovirtProvider;\n\nexport type CommonDataProp =\n  | VMWizardProps.isSimpleView\n  | VMWizardProps.isCreateTemplate\n  | VMWizardProps.isProviderImport\n  | VMWizardProps.userTemplateName\n  | ChangedCommonDataProp;\n\nexport type ChangedCommonData = Set<ChangedCommonDataProp>;\n\nexport const DetectCommonDataChanges = new Set<ChangedCommonDataProp>([\n  VMWizardProps.activeNamespace,\n  VMWizardProps.openshiftFlag,\n  VMWizardProps.virtualMachines,\n  VMWizardProps.userTemplates,\n  VMWizardProps.commonTemplates,\n  VMWizardProps.storageClassConfigMap,\n  VMWizardProps.dataVolumes,\n  VMWareProviderProps.deployment,\n  VMWareProviderProps.deploymentPods,\n  VMWareProviderProps.v2vvmware,\n  VMWareProviderProps.vmwareToKubevirtOsConfigMap,\n  VMWareProviderProps.vCenterSecrets,\n  OvirtProviderProps.deployment,\n  OvirtProviderProps.deploymentPods,\n  OvirtProviderProps.ovirtEngineSecrets,\n  OvirtProviderProps.ovirtProvider,\n]);\n\nexport type CommonData = {\n  data?: {\n    isSimpleView?: boolean;\n    isCreateTemplate?: boolean;\n    isProviderImport?: boolean;\n    userTemplateName?: string;\n    storageClassConfigMap?: {\n      loaded: boolean;\n      loadError: string;\n      data: ConfigMapKind;\n    };\n  };\n  dataIDReferences?: IDReferences;\n};\n\nexport enum VMWizardNetworkType {\n  V2V_OVIRT_IMPORT = 'V2V_OVIRT_IMPORT',\n  V2V_VMWARE_IMPORT = 'V2V_VMWARE_IMPORT',\n  TEMPLATE = 'TEMPLATE',\n  UI_DEFAULT_POD_NETWORK = 'UI_DEFAULT_POD_NETWORK',\n  UI_INPUT = 'UI_INPUT',\n}\n\nexport type VMWizardNetwork = {\n  id?: string;\n  type: VMWizardNetworkType;\n  network: V1Network;\n  networkInterface: V1NetworkInterface;\n  validation?: UINetworkInterfaceValidation;\n  editConfig?: UINetworkEditConfig;\n  importData?: {\n    id?: string;\n    vnicID?: string;\n  };\n};\n\nexport enum VMWizardStorageType {\n  TEMPLATE = 'TEMPLATE',\n  PROVISION_SOURCE_TEMPLATE_DISK = 'PROVISION_SOURCE_TEMPLATE_DISK',\n  PROVISION_SOURCE_DISK = 'PROVISION_SOURCE_DISK',\n  UI_INPUT = 'UI_INPUT',\n  V2V_VMWARE_IMPORT = 'V2V_VMWARE_IMPORT',\n  V2V_VMWARE_IMPORT_TEMP = 'V2V_VMWARE_IMPORT_TEMP',\n  V2V_OVIRT_IMPORT = 'V2V_OVIRT_IMPORT',\n  WINDOWS_GUEST_TOOLS = 'WINDOWS_GUEST_TOOLS',\n  WINDOWS_GUEST_TOOLS_TEMPLATE = 'WINDOWS_GUEST_TOOLS_TEMPLATE',\n}\n\nexport type VMWizardStorage = {\n  id?: string;\n  type: VMWizardStorageType;\n  disk?: V1Disk;\n  volume?: V1Volume;\n  dataVolume?: V1alpha1DataVolume;\n  validation?: UIStorageValidation;\n  persistentVolumeClaim?: V1PersistentVolumeClaim;\n  editConfig?: UIStorageEditConfig;\n  importData?: {\n    id?: string;\n    mountPath?: string;\n    devicePath?: string;\n    fileName?: string;\n  };\n};\n","import * as _ from 'lodash';\nimport { HealthState } from '@console/shared/src/components/dashboard/status-card/states';\nimport { URLHealthHandler } from '@console/plugin-sdk';\n\nexport const getKubevirtHealthState: URLHealthHandler<KubevirtHealthResponse> = (\n  response,\n  error,\n) => {\n  if (error) {\n    return { state: HealthState.NOT_AVAILABLE };\n  }\n  if (!response) {\n    return { state: HealthState.LOADING };\n  }\n  return _.get(response, 'apiserver.connectivity') === 'ok'\n    ? { state: HealthState.OK }\n    : { state: HealthState.ERROR };\n};\n\ntype KubevirtHealthResponse = {\n  apiserver: {\n    connectivity: string;\n  };\n};\n","// extracted by mini-css-extract-plugin","import * as _ from 'lodash';\nimport * as React from 'react';\nimport { OffIcon } from '@patternfly/react-icons';\nimport { getNamespace } from '@console/shared/src/selectors/common';\nimport { createBasicLookup } from '@console/shared/src/utils/utils';\nimport { K8sResourceKind, PodKind } from '@console/internal/module/k8s';\nimport { StatusGroupMapper } from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport { InventoryStatusGroup } from '@console/shared/src/components/dashboard/inventory-card/status-group';\nimport { getVMStatus } from '../../../statuses/vm/vm-status';\nimport { VMImportKind } from '../../../types/vm-import/ovirt/vm-import';\nimport { VMIKind, VMKind } from '../../../types';\nimport { VMStatusSimpleLabel } from '../../../constants/vm/vm-status';\nimport { StatusSimpleLabel } from '../../../constants/status-constants';\nimport { VMImportWrappper } from '../../../k8s/wrapper/vm-import/vm-import-wrapper';\nimport { getVMImportStatus } from '../../../statuses/vm-import/vm-import-status';\nimport { V1alpha1DataVolume } from '../../../types/vm/disk/V1alpha1DataVolume';\nimport { isVM, isVMImport } from '../../../selectors/check-type';\nimport { getBasicID } from '../../../utils';\n\nimport './inventory.scss';\n\nexport const getVMStatusGroups: StatusGroupMapper = (\n  vms,\n  {\n    vmis,\n    pods,\n    migrations,\n    dataVolumes,\n    vmImports,\n  }: {\n    vmis?: VMIKind[];\n    pods?: PodKind[];\n    dataVolumes?: V1alpha1DataVolume[];\n    migrations?: K8sResourceKind[];\n    vmImports?: VMImportKind[];\n  },\n) => {\n  const groups = {\n    [InventoryStatusGroup.NOT_MAPPED]: {\n      statusIDs: [VMStatusSimpleLabel.Running],\n      count: 0,\n      filterType: 'vm-status',\n    },\n    [InventoryStatusGroup.PROGRESS]: {\n      statusIDs: [\n        StatusSimpleLabel.Importing,\n        VMStatusSimpleLabel.Starting,\n        VMStatusSimpleLabel.Migrating,\n        VMStatusSimpleLabel.Stopping,\n        StatusSimpleLabel.Pending,\n      ],\n      count: 0,\n      filterType: 'vm-status',\n    },\n    [InventoryStatusGroup.ERROR]: {\n      statusIDs: [StatusSimpleLabel.Error],\n      count: 0,\n      filterType: 'vm-status',\n    },\n    [InventoryStatusGroup.WARN]: {\n      statusIDs: [VMStatusSimpleLabel.Paused],\n      count: 0,\n      filterType: 'vm-status',\n    },\n    [InventoryStatusGroup.UNKNOWN]: {\n      statusIDs: [StatusSimpleLabel.Other],\n      count: 0,\n      filterType: 'vm-status',\n    },\n    'vm-off': {\n      statusIDs: [VMStatusSimpleLabel.Off],\n      count: 0,\n      filterType: 'vm-status',\n    },\n  };\n\n  const vmisLookup = createBasicLookup<VMIKind>(vmis, getBasicID);\n\n  const virtualMachines = _.unionBy(\n    // order of arrays designates the priority\n    vms,\n    vmis,\n    vmImports,\n    (entity: VMKind | VMIKind | VMImportKind) =>\n      isVMImport(entity)\n        ? `${getNamespace(entity)}-${new VMImportWrappper(entity).getResolvedVMTargetName()}`\n        : getBasicID(entity),\n  );\n\n  virtualMachines\n    .map((obj: VMKind | VMIKind | VMImportKind) => {\n      if (isVMImport(obj)) {\n        const statusBundle = getVMImportStatus({\n          vmImport: obj,\n        });\n        if (statusBundle.status.isCompleted()) {\n          return null;\n        }\n        return statusBundle.status.getSimpleLabel();\n      }\n      const lookupID = getBasicID(obj);\n      let vm = null;\n      let vmi;\n\n      if (isVM(obj)) {\n        vm = obj;\n        vmi = vmisLookup[lookupID];\n      } else {\n        vmi = obj;\n      }\n      return getVMStatus({\n        vm,\n        vmi,\n        pods,\n        migrations,\n        dataVolumes,\n        vmImports,\n      }).status.getSimpleLabel();\n    })\n    .filter((simpleStatus) => simpleStatus)\n    .forEach((simpleStatus) => {\n      const group =\n        Object.keys(groups).find((key) => groups[key].statusIDs.includes(simpleStatus)) ||\n        InventoryStatusGroup.UNKNOWN;\n      groups[group].count++;\n    });\n\n  return groups;\n};\n\nexport const VMOffGroupIcon: React.FC<{}> = () => (\n  <OffIcon className=\"kubevirt-inventory-card__status-icon--off\" />\n);\n","import { TemplateModel } from '@console/internal/models';\n\nimport { VirtualMachineModel, VirtualMachineInstanceModel } from '../../../models';\n\nexport const diskImportKindMapping = {\n  [VirtualMachineModel.kind]: VirtualMachineModel,\n  [VirtualMachineInstanceModel.kind]: VirtualMachineInstanceModel,\n  [TemplateModel.kind]: TemplateModel,\n};\n","export const CD_SIZE = 'size';\nexport const CD_STORAGE_CLASS = 'storageClass';\n\nexport const WINTOOLS_CONTAINER_NAMES = {\n  openshift: 'registry.redhat.io/container-native-virtualization/virtio-win',\n  ocp: 'registry.redhat.io/container-native-virtualization/virtio-win',\n  online: 'registry.redhat.io/container-native-virtualization/virtio-win',\n  dedicated: 'registry.redhat.io/container-native-virtualization/virtio-win',\n  azure: 'registry.redhat.io/container-native-virtualization/virtio-win',\n  okd: 'kubevirt/virtio-container-disk',\n};\n\nexport const initialDisk = {\n  container: 'path/to/container',\n  url: 'http://path/to/iso',\n  size: 10,\n  isURLValid: true,\n  changed: false,\n};\n\nexport const StorageType = {\n  WINTOOLS: 'windowsTools',\n  CONTAINER: 'container',\n  URL: 'url',\n  PVC: 'pvc',\n};\n","export const CDI_KUBEVIRT_IO = 'cdi.kubevirt.io';\nexport const STORAGE_IMPORT_PVC_NAME = 'storage.import.importPvcName';\n","export * from './vm';\nexport * from './vm-templates';\nexport * from './cdi';\nexport * from './namespace';\nexport * from './object-enum';\n","export const NAMESPACE_OPENSHIFT = 'openshift';\n","import * as _ from 'lodash';\n\nexport abstract class ObjectEnum<T> {\n  protected static getAllClassEnumProperties = <A extends ObjectEnum<any>>(Clazz: Function) => {\n    const usedValues = new Set();\n    return Object.keys(Clazz)\n      .filter((value) => Clazz[value] instanceof Clazz)\n      .map((key) => {\n        const result = Clazz[key];\n        if (usedValues.has(result.getValue())) {\n          throw new Error(`${result}: value must be unique`);\n        }\n        usedValues.add(result.getValue());\n        return result;\n      }) as A[];\n  };\n\n  static getAll = () => Object.freeze([]);\n\n  protected readonly value: T;\n\n  protected constructor(value: T) {\n    if (!value) {\n      throw new Error(\"ObjectEnum: value can't be empty\");\n    }\n    this.value = value;\n  }\n\n  getValue = () => this.value;\n\n  toString() {\n    return _.toString(this.value);\n  }\n}\n","export enum StatusSimpleLabel {\n  Error = 'Error',\n  Completed = 'Completed',\n  Pending = 'Pending',\n  Importing = 'Importing',\n  InProgress = 'InProgress',\n  Other = 'Other',\n}\n","/* eslint-disable lines-between-class-members,no-underscore-dangle */\nimport { ObjectEnum } from './object-enum';\nimport { StatusSimpleLabel } from './status-constants';\nimport { StatusGroup } from './status-group';\n\nexport interface StatusMetadata {\n  isError?: boolean;\n  isCompleted?: boolean;\n  isPending?: boolean;\n  isImporting?: boolean;\n  isInProgress?: boolean;\n  isUnknown?: boolean;\n  group?: StatusGroup;\n}\n\nexport abstract class StatusEnum<SIMPLE_LABEL = StatusSimpleLabel> extends ObjectEnum<string> {\n  protected readonly _isError: boolean;\n  protected readonly _isCompleted: boolean;\n  protected readonly _isPending: boolean;\n  protected readonly _isImporting: boolean;\n  protected readonly _isInProgress: boolean;\n  protected readonly _isUnknown: boolean;\n\n  protected readonly group: StatusGroup;\n  protected readonly label: string;\n  protected readonly simpleLabel: SIMPLE_LABEL | StatusSimpleLabel; // cache resolveSimpleLabel call\n\n  protected constructor(\n    value: string,\n    label: string,\n    {\n      isError,\n      isCompleted,\n      isPending,\n      isImporting,\n      isInProgress,\n      isUnknown,\n      group,\n    }: StatusMetadata = {},\n  ) {\n    super(value);\n    if (label == null) {\n      throw new Error('StatusEnum: requires label');\n    }\n\n    this._isError = isError || false;\n    this._isCompleted = isCompleted || false;\n    this._isPending = isPending || false;\n    this._isImporting = isImporting || false;\n    this._isInProgress = this._isPending || this._isImporting || isInProgress || false; // pending means expected progress\n\n    const isKnown = isError || isCompleted || isPending || isImporting || isInProgress;\n\n    if (isUnknown && isKnown) {\n      throw new Error('StatusEnum: isUnknown flag should not include other metadata');\n    }\n\n    this._isUnknown = isUnknown;\n\n    this.group = group;\n    this.label = label;\n    this.simpleLabel = this.resolveSimpleLabel();\n  }\n\n  isError = () => this._isError;\n\n  isCompleted = () => this._isCompleted;\n\n  isPending = () => this._isPending;\n\n  isImporting = () => this._isImporting;\n\n  isInProgress = () => this._isInProgress;\n\n  isUnknown = () => this._isUnknown;\n\n  getMetadata = (): StatusMetadata =>\n    ({\n      isError: this._isError,\n      isCompleted: this._isCompleted,\n      isPending: this._isPending,\n      isImporting: this._isImporting,\n      isInProgress: this._isInProgress,\n      isUnknown: this._isUnknown,\n      group: this.group,\n    } as any);\n\n  getLabel = () => this.label;\n\n  getGroup = () => this.group;\n\n  getSimpleLabel = () => this.simpleLabel;\n\n  toString() {\n    const result = this.label || super.toString();\n    return this.group && !this._isUnknown ? `${result} (${this.group.toString()})` : result;\n  }\n\n  toSimpleSortString = () => {\n    return `${this.simpleLabel}${this.simpleLabel === this.toString() ? '' : this.toString()}`;\n  };\n\n  toVerboseString = () => {\n    const result = this.label || super.toString();\n    return this.group && !this._isUnknown ? `${result} (${this.group.getVerboseName()})` : result;\n  };\n\n  protected resolveSimpleLabel(): SIMPLE_LABEL | StatusSimpleLabel {\n    if (this._isError) {\n      return StatusSimpleLabel.Error;\n    }\n    if (this._isCompleted) {\n      return StatusSimpleLabel.Completed;\n    }\n    if (this._isPending) {\n      return StatusSimpleLabel.Pending;\n    }\n    if (this._isImporting) {\n      return StatusSimpleLabel.Importing;\n    }\n    if (this._isInProgress) {\n      return StatusSimpleLabel.InProgress;\n    }\n    return StatusSimpleLabel.Other;\n  }\n}\n","/* eslint-disable lines-between-class-members */\nimport { ObjectEnum } from './object-enum';\n\nexport class StatusGroup extends ObjectEnum<string> {\n  static readonly RHV = new StatusGroup('RHV', 'RHV', 'Red Hat Virtualization');\n  static readonly CDI = new StatusGroup('CDI', 'CDI', 'Containerized Data Importer');\n  static readonly VMWARE = new StatusGroup('VMWARE', 'VMware', 'VMware');\n\n  private readonly name: string;\n\n  private readonly verboseName: string;\n\n  protected constructor(value: string, name: string, verboseName: string) {\n    super(value);\n    this.name = name;\n    this.verboseName = verboseName;\n  }\n\n  getVerboseName = () => this.verboseName;\n\n  toString() {\n    return this.name || super.toString();\n  }\n}\n","export const VM_IMPORT_PROGRESS_ANNOTATION = 'vmimport.v2v.kubevirt.io/progress';\nexport const VM_IMPORT_PROPAGATE_ANNOTATIONS_ANNOTATION =\n  'vmimport.v2v.kubevirt.io/propagate-annotations';\n","/* eslint-disable lines-between-class-members */\nimport { ObjectEnum } from '../../object-enum';\nimport { StatusEnum } from '../../status-enum';\nimport { StatusSimpleLabel } from '../../status-constants';\nimport { StatusGroup } from '../../status-group';\n\nexport class V2VVMImportStatus extends StatusEnum {\n  static readonly ERROR = new V2VVMImportStatus('V2VVMImportStatus_ERROR', 'Import error', {\n    isError: true,\n    group: StatusGroup.RHV,\n  });\n  static readonly COMPLETE = new V2VVMImportStatus(\n    'V2VVMImportStatus_COMPLETE',\n    'Import complete',\n    {\n      isCompleted: true,\n      group: StatusGroup.RHV,\n    },\n  );\n  static readonly PENDING = new V2VVMImportStatus('V2VVMImportStatus_PENDING', 'Import pending', {\n    isPending: true,\n    group: StatusGroup.RHV,\n  });\n  static readonly IN_PROGRESS = new V2VVMImportStatus(\n    'V2VVMImportStatus_IN_PROGRESS',\n    StatusSimpleLabel.Importing,\n    {\n      isImporting: true,\n      group: StatusGroup.RHV,\n    },\n  );\n  static readonly UNKNOWN = new V2VVMImportStatus('V2VVMImportStatus_UNKNOWN', 'Unknown', {\n    isUnknown: true,\n    group: StatusGroup.RHV,\n  });\n\n  private static readonly ALL = Object.freeze(\n    ObjectEnum.getAllClassEnumProperties<V2VVMImportStatus>(V2VVMImportStatus),\n  );\n\n  private static readonly stringMapper = V2VVMImportStatus.ALL.reduce(\n    (accumulator, type: V2VVMImportStatus) => ({\n      ...accumulator,\n      [type.value]: type,\n    }),\n    {},\n  );\n\n  static getAll = () => V2VVMImportStatus.ALL;\n\n  static fromString = (model: string): V2VVMImportStatus => V2VVMImportStatus.stringMapper[model];\n}\n","/* eslint-disable lines-between-class-members */\nimport { ObjectEnum } from '../../object-enum';\n\nexport class VMImportType extends ObjectEnum<string> {\n  static readonly OVIRT = new VMImportType('ovirt');\n\n  private static readonly ALL = Object.freeze(\n    ObjectEnum.getAllClassEnumProperties<VMImportType>(VMImportType),\n  );\n\n  private static readonly stringMapper = VMImportType.ALL.reduce(\n    (accumulator, type: VMImportType) => ({\n      ...accumulator,\n      [type.value]: type,\n    }),\n    {},\n  );\n\n  static getAll = () => VMImportType.ALL;\n\n  static fromString = (model: string): VMImportType => VMImportType.stringMapper[model];\n}\n","export const CONVERSION_POD_TEMP_MOUNT_PATH = '/var/tmp';\n\nexport const V2VVMWARE_DEPLOYMENT_NAME = 'v2v-vmware';\n\nexport const CONVERSION_BASE_NAME = 'kubevirt-v2v-conversion';\nexport const CONVERSION_GENERATE_NAME = `${CONVERSION_BASE_NAME}-`;\n\nexport const VMWARE_KUBEVIRT_VMWARE_CONFIG_MAP_NAME = 'v2v-vmware';\n// Different releases, different locations. Respect the order when resolving. Otherwise the configMap name/namespace is considered as well-known.\nexport const VMWARE_KUBEVIRT_VMWARE_CONFIG_MAP_NAMESPACES = [\n  'openshift-cnv',\n  'kubevirt-hyperconverged',\n];\n\nexport const VMWARE_TO_KUBEVIRT_OS_CONFIG_MAP_NAMESPACE = 'kube-public'; // note: common-templates are in the \"openshift\" namespace\n// TODO: make it configurable via VMWARE_KUBEVIRT_VMWARE_CONFIG_MAP\nexport const VMWARE_TO_KUBEVIRT_OS_CONFIG_MAP_NAME = 'vmware-to-kubevirt-os'; // single configMap per cluster, contains mapping of vmware guestId to common-templates OS ID\n\nexport const CONVERSION_SERVICEACCOUNT_DELAY = 2 * 1000; // in ms\n\nexport const VCENTER_TYPE_LABEL = 'kubevirt.io/vcenter';\nexport const OVIRT_TYPE_LABEL = 'kubevirt.io/ovirt';\nexport const V2V_TEMPORARY_LABEL = 'kubevirt.io/temporary';\n\nexport const CONVERSION_VDDK_INIT_POD_NAME = 'vddk-init';\nexport const CONVERSION_VOLUME_VDDK_NAME = 'volume-vddk';\nexport const CONVERSION_VDDK_MOUNT_PATH = '/opt/vmware-vix-disklib-distrib';\n\nexport const CONVERSION_PROGRESS_ANNOTATION = 'v2vConversionProgress';\n","export const VM_TEMPLATE_LABEL_PLURAL = 'Virtual Machine Templates';\nexport const VM_TEMPLATE_CREATE_HEADER = 'Create Virtual Machine Template';\n\nexport const VM_TEMPLATE_NAME_PARAMETER = '${NAME}'; // eslint-disable-line no-template-curly-in-string\n","export * from './constants';\n","export const VIRT_LAUNCHER_POD_PREFIX = 'virt-launcher-';\nexport const READABLE_VIRTIO = 'VirtIO';\nexport const ANNOTATION_FIRST_BOOT = 'kubevirt.ui/firstBoot';\nexport const ANNOTATION_DESCRIPTION = 'description';\nexport const ANNOTATION_PXE_INTERFACE = 'kubevirt.ui/pxeInterface';\nexport const ANNOTATION_VALIDATIONS = 'validations';\nexport const CUSTOM_FLAVOR = 'Custom';\n\nexport const APP = 'app';\nexport const BOOT_ORDER_FIRST = 1;\nexport const BOOT_ORDER_SECOND = 2;\n\nexport const TEMPLATE_FLAVOR_LABEL = 'flavor.template.kubevirt.io';\nexport const TEMPLATE_OS_LABEL = 'os.template.kubevirt.io';\nexport const TEMPLATE_PARAM_VM_NAME = 'NAME';\nexport const TEMPLATE_PARAM_VM_NAME_DESC = 'Name for the new VM';\nexport const TEMPLATE_TYPE_LABEL = 'template.kubevirt.io/type';\nexport const TEMPLATE_VERSION_LABEL = 'template.kubevirt.io/version';\nexport const TEMPLATE_TYPE_VM = 'vm';\nexport const TEMPLATE_TYPE_BASE = 'base';\nexport const TEMPLATE_WORKLOAD_LABEL = 'workload.template.kubevirt.io';\nexport const TEMPLATE_VM_NAME_LABEL = 'vm.kubevirt.io/name';\nexport const TEMPLATE_OS_NAME_ANNOTATION = 'name.os.template.kubevirt.io';\nexport const TEMPLATE_VM_DOMAIN_LABEL = 'kubevirt.io/domain';\nexport const TEMPLATE_VM_SIZE_LABEL = 'kubevirt.io/size';\n\nexport const LABEL_USED_TEMPLATE_NAME = 'vm.kubevirt.io/template';\nexport const LABEL_USED_TEMPLATE_NAMESPACE = 'vm.kubevirt.io/template.namespace';\n\nexport const DEFAULT_RDP_PORT = 3389;\n\nexport const VM_DETAIL_DETAILS_HREF = 'details';\nexport const VM_DETAIL_DISKS_HREF = 'disks';\nexport const VM_DETAIL_NETWORKS_HREF = 'nics';\nexport const VM_DETAIL_CONSOLES_HREF = 'consoles';\nexport const VM_DETAIL_ENVIRONMENT = 'environment';\n\nexport const CLOUDINIT_DISK = 'cloudinitdisk';\n\nexport const OS_WINDOWS_PREFIX = 'win';\n\nexport enum DeviceType {\n  NIC = 'NIC',\n  DISK = 'DISK',\n}\n\nexport const VM_DETAIL_EVENTS_HREF = 'events';\n\nexport const PAUSED_VM_MODAL_MESSAGE =\n  'This VM has been paused. If you wish to unpause it, please click the Unpause button below. For further details, please check with your system administrator.';\n","export * from './constants';\nexport * from './network';\nexport * from './storage';\nexport * from './ui';\n","export const POD_NETWORK = 'Pod Networking';\n","export * from './constants';\nexport * from './network-interface-type';\nexport * from './network-interface-model';\nexport * from './network-type';\n","/* eslint-disable lines-between-class-members */\nimport { ObjectEnum } from '../../object-enum';\nimport { READABLE_VIRTIO } from '../constants';\n\nexport class NetworkInterfaceModel extends ObjectEnum<string> {\n  static readonly VIRTIO = new NetworkInterfaceModel('virtio');\n  static readonly E1000 = new NetworkInterfaceModel('e1000');\n  static readonly E1000E = new NetworkInterfaceModel('e1000e');\n  static readonly NE2kPCI = new NetworkInterfaceModel('ne2kPCI');\n  static readonly PCNET = new NetworkInterfaceModel('pcnet');\n  static readonly RTL8139 = new NetworkInterfaceModel('rtl8139');\n\n  private static readonly ALL = Object.freeze(\n    ObjectEnum.getAllClassEnumProperties<NetworkInterfaceModel>(NetworkInterfaceModel),\n  );\n\n  private static readonly stringMapper = NetworkInterfaceModel.ALL.reduce(\n    (accumulator, networkInterfaceModel: NetworkInterfaceModel) => ({\n      ...accumulator,\n      [networkInterfaceModel.value]: networkInterfaceModel,\n    }),\n    {},\n  );\n\n  static getAll = () => NetworkInterfaceModel.ALL;\n\n  static fromString = (model: string): NetworkInterfaceModel =>\n    NetworkInterfaceModel.stringMapper[model];\n\n  toString() {\n    if (this === NetworkInterfaceModel.VIRTIO) {\n      return READABLE_VIRTIO;\n    }\n    return this.value;\n  }\n}\n","/* eslint-disable lines-between-class-members */\nimport { ObjectEnum } from '../../object-enum';\n\nexport class NetworkInterfaceType extends ObjectEnum<string> {\n  static readonly MASQUERADE = new NetworkInterfaceType('masquerade');\n  static readonly BRIDGE = new NetworkInterfaceType('bridge');\n  static readonly SRIOV = new NetworkInterfaceType('sriov');\n  static readonly SLIRP = new NetworkInterfaceType('slirp');\n\n  private static readonly ALL = Object.freeze(\n    ObjectEnum.getAllClassEnumProperties<NetworkInterfaceType>(NetworkInterfaceType),\n  );\n\n  private static readonly stringMapper = NetworkInterfaceType.ALL.reduce(\n    (accumulator, networkType: NetworkInterfaceType) => ({\n      ...accumulator,\n      [networkType.value]: networkType,\n    }),\n    {},\n  );\n\n  static getAll = () => NetworkInterfaceType.ALL;\n\n  static fromString = (model: string): NetworkInterfaceType =>\n    NetworkInterfaceType.stringMapper[model];\n}\n","/* eslint-disable lines-between-class-members */\nimport { ObjectEnum } from '../../object-enum';\nimport { NetworkInterfaceType } from './network-interface-type';\n\nexport class NetworkType extends ObjectEnum<string> {\n  static readonly MULTUS = new NetworkType('multus', NetworkInterfaceType.BRIDGE, [\n    NetworkInterfaceType.BRIDGE,\n    NetworkInterfaceType.SRIOV,\n  ]);\n  static readonly POD = new NetworkType('pod', NetworkInterfaceType.MASQUERADE, [\n    NetworkInterfaceType.MASQUERADE,\n    NetworkInterfaceType.BRIDGE,\n    NetworkInterfaceType.SRIOV,\n  ]);\n  static readonly GENIE = new NetworkType(\n    'genie',\n    NetworkInterfaceType.BRIDGE,\n    [NetworkInterfaceType.BRIDGE],\n    false,\n  ); // not possible to select in NIC modal\n\n  private static ALL = Object.freeze(\n    ObjectEnum.getAllClassEnumProperties<NetworkType>(NetworkType),\n  );\n\n  private static stringMapper = NetworkType.ALL.reduce(\n    (accumulator, networkType: NetworkType) => ({\n      ...accumulator,\n      [networkType.value]: networkType,\n    }),\n    {},\n  );\n\n  static getAll = () => NetworkType.ALL;\n\n  static fromString = (model: string): NetworkType => NetworkType.stringMapper[model];\n\n  private readonly defaultInterfaceType: NetworkInterfaceType;\n  private readonly allowedInterfaceTypes: Readonly<NetworkInterfaceType[]>;\n  private readonly allowedInterfaceTypesSet: Set<NetworkInterfaceType>;\n  private readonly supported: boolean;\n\n  private constructor(\n    value?: string,\n    defaultInterfaceType?: NetworkInterfaceType,\n    allowedInterfaceTypes?: NetworkInterfaceType[],\n    isSupported = true,\n  ) {\n    super(value);\n    this.defaultInterfaceType = defaultInterfaceType;\n    this.allowedInterfaceTypes = Object.freeze(allowedInterfaceTypes);\n    this.allowedInterfaceTypesSet = new Set(allowedInterfaceTypes);\n    this.supported = isSupported;\n  }\n\n  getDefaultInterfaceType = () => this.defaultInterfaceType;\n  getAllowedInterfaceTypes = () => this.allowedInterfaceTypes;\n  allowsInterfaceType = (interfaceType: NetworkInterfaceType) =>\n    this.allowedInterfaceTypesSet.has(interfaceType);\n\n  isSupported = () => this.supported;\n\n  private static getSupportedAllowedInterfaceTypesInternal = () => {\n    const allowedSupportedInterfaceTypes = new Set();\n\n    NetworkType.ALL.filter((network) => network.isSupported()).forEach((network) =>\n      network\n        .getAllowedInterfaceTypes()\n        .forEach((iType) => allowedSupportedInterfaceTypes.add(iType)),\n    );\n\n    // preserve order\n    return NetworkInterfaceType.getAll().filter((interfaceType) =>\n      allowedSupportedInterfaceTypes.has(interfaceType),\n    );\n  };\n\n  private static ALLOWED_SUPPORTED_INTERFACES = Object.freeze(\n    NetworkType.getSupportedAllowedInterfaceTypesInternal(),\n  );\n\n  static getSupportedAllowedInterfaceTypes = () => NetworkType.ALLOWED_SUPPORTED_INTERFACES;\n}\n","/* eslint-disable lines-between-class-members */\nimport { ObjectEnum } from '../../object-enum';\n\nexport class AccessMode extends ObjectEnum<string> {\n  static readonly READ_WRITE_ONCE = new AccessMode('ReadWriteOnce', 'Single User (RWO)');\n  static readonly READ_WRITE_MANY = new AccessMode('ReadWriteMany', 'Shared Access (RWX)');\n  static readonly READ_ONLY_MANY = new AccessMode('ReadOnlyMany', 'Read Only (ROX)');\n\n  private readonly label: string;\n\n  protected constructor(value: string, label: string) {\n    super(value);\n    this.label = label;\n  }\n\n  private static readonly ALL = Object.freeze(\n    ObjectEnum.getAllClassEnumProperties<AccessMode>(AccessMode),\n  );\n\n  private static readonly stringMapper = AccessMode.ALL.reduce(\n    (accumulator, accessMode: AccessMode) => ({\n      ...accumulator,\n      [accessMode.value]: accessMode,\n    }),\n    {},\n  );\n\n  static getAll = () => AccessMode.ALL;\n\n  static fromString = (model: string): AccessMode => AccessMode.stringMapper[model];\n\n  toString() {\n    return this.label;\n  }\n}\n","/* eslint-disable lines-between-class-members */\nimport { ObjectEnum } from '../../object-enum';\n\nexport class DataVolumeSourceType extends ObjectEnum<string> {\n  static readonly BLANK = new DataVolumeSourceType('blank');\n  static readonly HTTP = new DataVolumeSourceType('http');\n  static readonly PVC = new DataVolumeSourceType('pvc');\n  static readonly REGISTRY = new DataVolumeSourceType('registry');\n  static readonly S3 = new DataVolumeSourceType('s3');\n  static readonly UPLOAD = new DataVolumeSourceType('upload');\n\n  private static readonly ALL = Object.freeze(\n    ObjectEnum.getAllClassEnumProperties<DataVolumeSourceType>(DataVolumeSourceType),\n  );\n\n  private static readonly stringMapper = DataVolumeSourceType.ALL.reduce(\n    (accumulator, dataVolumeSourceType: DataVolumeSourceType) => ({\n      ...accumulator,\n      [dataVolumeSourceType.value]: dataVolumeSourceType,\n    }),\n    {},\n  );\n\n  static getAll = () => DataVolumeSourceType.ALL;\n\n  static fromString = (model: string): DataVolumeSourceType =>\n    DataVolumeSourceType.stringMapper[model];\n}\n","/* eslint-disable lines-between-class-members */\nimport { ObjectEnum } from '../../object-enum';\nimport { READABLE_VIRTIO } from '../constants';\n\nexport class DiskBus extends ObjectEnum<string> {\n  static readonly VIRTIO = new DiskBus('virtio');\n  static readonly SATA = new DiskBus('sata');\n  static readonly SCSI = new DiskBus('scsi');\n\n  private static readonly ALL = Object.freeze(\n    ObjectEnum.getAllClassEnumProperties<DiskBus>(DiskBus),\n  );\n\n  private static readonly stringMapper = DiskBus.ALL.reduce(\n    (accumulator, diskBusType: DiskBus) => ({\n      ...accumulator,\n      [diskBusType.value]: diskBusType,\n    }),\n    {},\n  );\n\n  static getAll = () => DiskBus.ALL;\n\n  static fromString = (model: string): DiskBus => DiskBus.stringMapper[model];\n\n  toString() {\n    if (this === DiskBus.VIRTIO) {\n      return READABLE_VIRTIO;\n    }\n    return this.value;\n  }\n}\n","/* eslint-disable lines-between-class-members */\nimport * as _ from 'lodash';\nimport { ObjectEnum } from '../../object-enum';\nimport { DiskBus } from './disk-bus';\n\nexport class DiskType extends ObjectEnum<string> {\n  static readonly DISK = new DiskType('disk');\n  static readonly CDROM = new DiskType(\n    'cdrom',\n    'CD-ROM',\n    DiskBus.getAll().filter((bus) => bus !== DiskBus.VIRTIO), // kubevirt removed support for virtIO\n  );\n  static readonly FLOPPY = new DiskType('floppy');\n  static readonly LUN = new DiskType('lun', 'LUN');\n\n  private readonly label: string;\n  private readonly supportedDiskBuses: Set<DiskBus>;\n\n  protected constructor(value: string, label?: string, supportedDiskBuses?: DiskBus[]) {\n    super(value);\n    this.label = label || _.capitalize(value);\n    this.supportedDiskBuses = new Set<DiskBus>(supportedDiskBuses || DiskBus.getAll());\n  }\n\n  private static readonly ALL = Object.freeze(\n    ObjectEnum.getAllClassEnumProperties<DiskType>(DiskType),\n  );\n\n  private static readonly stringMapper = DiskType.ALL.reduce(\n    (accumulator, diskType: DiskType) => ({\n      ...accumulator,\n      [diskType.value]: diskType,\n    }),\n    {},\n  );\n\n  static getAll = () => DiskType.ALL;\n\n  static fromString = (model: string): DiskType => DiskType.stringMapper[model];\n\n  isBusSupported = (bus: DiskBus) => this.supportedDiskBuses.has(bus);\n\n  // Overide ObjectEnum's default toString method.\n  toString() {\n    return this.label;\n  }\n}\n","export * from './access-mode';\nexport * from './data-volume-source-type';\nexport * from './disk-bus';\nexport * from './disk-type';\nexport * from './volume-type';\nexport * from './volume-mode';\n","/* eslint-disable lines-between-class-members */\nimport { ObjectEnum } from '../../object-enum';\n\nexport class VolumeMode extends ObjectEnum<string> {\n  static readonly BLOCK = new VolumeMode('Block');\n  static readonly FILESYSTEM = new VolumeMode('Filesystem');\n\n  private static readonly ALL = Object.freeze(\n    ObjectEnum.getAllClassEnumProperties<VolumeMode>(VolumeMode),\n  );\n\n  private static readonly stringMapper = VolumeMode.ALL.reduce(\n    (accumulator, volumeMode: VolumeMode) => ({\n      ...accumulator,\n      [volumeMode.value]: volumeMode,\n    }),\n    {},\n  );\n\n  static getAll = () => VolumeMode.ALL;\n\n  static fromString = (model: string): VolumeMode => VolumeMode.stringMapper[model];\n}\n","/* eslint-disable lines-between-class-members */\nimport { ObjectEnum } from '../../object-enum';\n\nexport class VolumeType extends ObjectEnum<string> {\n  static readonly CLOUD_INIT_CONFIG_DRIVE = new VolumeType('cloudInitConfigDrive');\n  static readonly CLOUD_INIT_NO_CLOUD = new VolumeType('cloudInitNoCloud');\n  static readonly CONFIG_MAP = new VolumeType('configMap');\n  static readonly CONTAINER_DISK = new VolumeType('containerDisk');\n  static readonly DATA_VOLUME = new VolumeType('dataVolume');\n  static readonly EMPTY_DISK = new VolumeType('emptyDisk');\n  static readonly EPHEMERAL = new VolumeType('ephemeral');\n  static readonly PERSISTENT_VOLUME_CLAIM = new VolumeType('persistentVolumeClaim');\n  static readonly SECRET = new VolumeType('secret');\n  static readonly SERVICE_ACCOUNT = new VolumeType('serviceAccount');\n\n  private static readonly ALL = Object.freeze(\n    ObjectEnum.getAllClassEnumProperties<VolumeType>(VolumeType),\n  );\n\n  private static readonly stringMapper = VolumeType.ALL.reduce(\n    (accumulator, volumeType: VolumeType) => ({\n      ...accumulator,\n      [volumeType.value]: volumeType,\n    }),\n    {},\n  );\n\n  static getAll = () => VolumeType.ALL;\n\n  static fromString = (model: string): VolumeType => VolumeType.stringMapper[model];\n}\n","export enum VMWizardActionLabels {\n  YAML = 'New from YAML',\n  WIZARD = 'New with Wizard',\n  IMPORT = 'Import with Wizard',\n}\n\nexport enum VMWizardName {\n  YAML = 'yaml',\n  WIZARD = 'wizard',\n}\n\nexport enum VMWizardMode {\n  IMPORT = 'import',\n  TEMPLATE = 'template',\n  VM = 'vm',\n}\n\nexport enum VMWizardView {\n  ADVANCED = 'advanced',\n  SIMPLE = 'simple',\n}\n","/* eslint-disable lines-between-class-members,no-underscore-dangle */\nimport { ObjectEnum } from '../object-enum';\nimport { V2VVMImportStatus } from '../v2v-import/ovirt/v2v-vm-import-status';\nimport { StatusEnum, StatusMetadata } from '../status-enum';\nimport { getStringEnumValues } from '../../utils/types';\nimport { StatusSimpleLabel } from '../status-constants';\nimport { StatusGroup } from '../status-group';\n\nexport enum VMStatusSimpleLabel {\n  Starting = 'Starting',\n  Paused = 'Paused',\n  Migrating = 'Migrating',\n  Stopping = 'Stopping',\n  Running = 'Running',\n  Off = 'Off',\n}\n\nexport const VM_STATUS_SIMPLE_LABELS = [\n  StatusSimpleLabel.Error,\n  StatusSimpleLabel.Pending,\n  StatusSimpleLabel.Importing,\n  StatusSimpleLabel.Other,\n  ...getStringEnumValues<VMStatusSimpleLabel>(VMStatusSimpleLabel),\n];\n\nconst VM_STATUS_SIMPLE_LABELS_SET = new Set(VM_STATUS_SIMPLE_LABELS);\n\nconst isVMStatusSimpleLabel = (label: string): label is VMStatusSimpleLabel | StatusSimpleLabel =>\n  VM_STATUS_SIMPLE_LABELS_SET.has(label as any);\n\ntype VMStatusMetadata = StatusMetadata & { isMigrating?: boolean };\n\nexport class VMStatus extends StatusEnum<VMStatusSimpleLabel | StatusSimpleLabel> {\n  static readonly OFF = new VMStatus('VMStatus_OFF', VMStatusSimpleLabel.Off); // normal state\n  static readonly RUNNING = new VMStatus('VMStatus_RUNNING', VMStatusSimpleLabel.Running); // normal state\n  static readonly PAUSED = new VMStatus('VMStatus_PAUSED', VMStatusSimpleLabel.Paused); // normal state\n  static readonly STARTING = new VMStatus('VMStatus_STARTING', VMStatusSimpleLabel.Starting, {\n    isInProgress: true,\n  });\n  static readonly VMI_WAITING = new VMStatus('VMStatus_VMI_WAITING', StatusSimpleLabel.Pending, {\n    isPending: true,\n  });\n  static readonly STOPPING = new VMStatus('VMStatus_STOPPING', VMStatusSimpleLabel.Stopping, {\n    isInProgress: true,\n  });\n  static readonly VM_ERROR = new VMStatus('VMStatus_VM_ERROR', 'VM error', { isError: true });\n  static readonly VMI_ERROR = new VMStatus('VMStatus_VMI_ERROR', 'VMI error', { isError: true });\n  static readonly POD_ERROR = new VMStatus('VMStatus_POD_ERROR', 'Pod error', { isError: true });\n  static readonly CDI_IMPORT_ERROR = new VMStatus('VMStatus_CDI_IMPORT_ERROR', 'Import error', {\n    isError: true,\n    group: StatusGroup.CDI,\n  });\n  static readonly CDI_IMPORTING = new VMStatus(\n    'VMStatus_CDI_IMPORTING',\n    StatusSimpleLabel.Importing,\n    {\n      isImporting: true,\n      group: StatusGroup.CDI,\n    },\n  );\n  static readonly CDI_IMPORT_PENDING = new VMStatus(\n    'VMStatus_CDI_IMPORT_PENDING',\n    'Import pending',\n    {\n      isImporting: true,\n      isPending: true,\n      group: StatusGroup.CDI,\n    },\n  );\n  static readonly MIGRATING = new VMStatus('VMStatus_MIGRATING', VMStatusSimpleLabel.Migrating, {\n    isMigrating: true,\n  });\n  static readonly V2V_CONVERSION_ERROR = new VMStatus(\n    'VMStatus_V2V_CONVERSION_ERROR',\n    'Import error',\n    { isError: true, group: StatusGroup.VMWARE },\n  );\n  static readonly V2V_CONVERSION_IN_PROGRESS = new VMStatus(\n    'VMStatus_V2V_CONVERSION_IN_PROGRESS',\n    StatusSimpleLabel.Importing,\n    {\n      isImporting: true,\n      group: StatusGroup.VMWARE,\n    },\n  );\n  static readonly V2V_CONVERSION_PENDING = new VMStatus(\n    'VMStatus_V2V_CONVERSION_PENDING',\n    'Import pending',\n    {\n      isImporting: true,\n      isPending: true,\n      group: StatusGroup.VMWARE,\n    },\n  );\n\n  static readonly UNKNOWN = new VMStatus('UNKNOWN', 'Unknown', { isUnknown: true });\n\n  private static newInstanceFromV2VVMImportStatus = (status: V2VVMImportStatus) => {\n    return new VMStatus(`VMStatus_${status.getValue()}`, status.getLabel(), status.getMetadata());\n  };\n\n  static readonly V2V_VM_IMPORT_ERROR = VMStatus.newInstanceFromV2VVMImportStatus(\n    V2VVMImportStatus.ERROR,\n  );\n  static readonly V2V_VM_IMPORT_PENDING = VMStatus.newInstanceFromV2VVMImportStatus(\n    V2VVMImportStatus.PENDING,\n  );\n  static readonly V2V_VM_IMPORT_IN_PROGRESS = VMStatus.newInstanceFromV2VVMImportStatus(\n    V2VVMImportStatus.IN_PROGRESS,\n  );\n\n  private readonly _isMigrating: boolean;\n\n  protected constructor(\n    value: string,\n    label: string,\n    { isMigrating, ...metadata }: VMStatusMetadata = {},\n  ) {\n    super(value, label, {\n      ...metadata,\n      isInProgress: isMigrating || metadata.isInProgress,\n    });\n\n    this._isMigrating = isMigrating || false;\n  }\n\n  isMigrating = () => this._isMigrating;\n\n  getMetadata = (): VMStatusMetadata => ({\n    ...super.getMetadata(),\n    isMigrating: this._isMigrating,\n  });\n\n  protected resolveSimpleLabel(): StatusSimpleLabel | VMStatusSimpleLabel {\n    return isVMStatusSimpleLabel(this.label) ? this.label : super.resolveSimpleLabel();\n  }\n\n  private static readonly ALL = Object.freeze(\n    ObjectEnum.getAllClassEnumProperties<VMStatus>(VMStatus),\n  );\n\n  private static readonly stringMapper = VMStatus.ALL.reduce(\n    (accumulator, type: VMStatus) => ({\n      ...accumulator,\n      [type.value]: type,\n    }),\n    {},\n  );\n\n  static getAll = () => VMStatus.ALL;\n\n  static fromString = (model: string): VMStatus => VMStatus.stringMapper[model];\n\n  static fromV2VImportStatus = (v2VVMImportStatus: V2VVMImportStatus): VMStatus => {\n    if (v2VVMImportStatus.isUnknown()) {\n      return VMStatus.UNKNOWN;\n    }\n    return VMStatus.stringMapper[`VMStatus_${v2VVMImportStatus.getValue()}`];\n  };\n}\n","export enum RunStrategy {\n  Always = 'Always',\n  RerunOnFailure = 'RerunOnFailure',\n  Halted = 'Halted',\n  Manual = 'Manual',\n}\n\nexport enum StateChangeRequest {\n  Start = 'Start',\n  Stop = 'Stop',\n}\n","export enum VMIPhase {\n  Pending = 'Pending',\n  Scheduling = 'Scheduling',\n  Scheduled = 'Scheduled',\n  Running = 'Running',\n  Succeeded = 'Succeeded',\n  Failed = 'Failed',\n  Unknown = 'Unknown',\n}\n","module.exports = __webpack_public_path__ + \"assets/virtual-machine.svg\";","/* eslint-disable lines-between-class-members */\nimport {\n  getName,\n  hasLabel,\n  getLabels,\n  getOwnerReferences,\n  getCreationTimestamp,\n} from '@console/shared/src/selectors/common';\nimport { K8sKind, K8sResourceKind } from '@console/internal/module/k8s/types';\nimport { K8sResourceKindMethods } from '../types/types';\nimport { ObjectWithTypePropertyWrapper } from './object-with-type-property-wrapper';\nimport { ObjectEnum } from '../../../constants';\nimport { clearMetadata, clearRuntimeMetadata, initK8sObject, K8sInitAddon } from './util/k8s-mixin';\n\nexport abstract class K8sResourceObjectWithTypePropertyWrapper<\n  RESOURCE extends K8sResourceKind,\n  TYPE extends ObjectEnum<string>,\n  COMBINED_TYPE_DATA,\n  SELF extends K8sResourceObjectWithTypePropertyWrapper<RESOURCE, TYPE, COMBINED_TYPE_DATA, SELF>\n> extends ObjectWithTypePropertyWrapper<RESOURCE, TYPE, COMBINED_TYPE_DATA, SELF>\n  implements K8sResourceKindMethods {\n  private readonly model: K8sKind;\n\n  protected constructor(\n    model: K8sKind,\n    data?: RESOURCE | SELF,\n    copy = false,\n    typeClass: { getAll: () => TYPE[] | Readonly<TYPE[]> } = undefined,\n    typeDataPath: string[] = [],\n  ) {\n    super(data, copy, typeClass, typeDataPath);\n    this.model = model;\n    if (!this.model) {\n      throw new Error('model must be defined');\n    }\n  }\n\n  init(data: K8sInitAddon = {}) {\n    initK8sObject(this.data, this.model, data);\n    return (this as any) as SELF;\n  }\n\n  clearMetadata() {\n    clearMetadata(this.data);\n    return (this as any) as SELF;\n  }\n\n  clearRuntimeMetadata() {\n    clearRuntimeMetadata(this.data);\n    return (this as any) as SELF;\n  }\n\n  getModel = () => this.model;\n  getName = () => getName(this.data);\n  getCreationTimestamp = () => getCreationTimestamp(this.data);\n  getLabels = (defaultValue = {}) => getLabels(this.data, defaultValue);\n  hasLabel = (label: string) => hasLabel(this.data, label);\n  getOwnerReferences = () => getOwnerReferences(this.data);\n\n  setName = (name: string) => {\n    this.ensurePath('metadata');\n    this.data.metadata.name = name;\n    return (this as any) as SELF;\n  };\n\n  setNamespace = (namespace: string) => {\n    this.ensurePath('metadata');\n    this.data.metadata.namespace = namespace;\n    return (this as any) as SELF;\n  };\n\n  addAnotation = (key: string, value: string) => {\n    if (key) {\n      this.ensurePath('metadata.annotations');\n      this.data.metadata.annotations[key] = value;\n    }\n    return (this as any) as SELF;\n  };\n\n  addLabel = (key: string, value: string) => {\n    if (key) {\n      this.ensurePath('metadata.labels');\n      this.data.metadata.labels[key] = value;\n    }\n    return (this as any) as SELF;\n  };\n}\n","import * as _ from 'lodash';\nimport { ObjectEnum } from '../../../constants';\nimport { omitEmpty } from '../../../utils/common';\nimport { Wrapper } from './wrapper';\n\nexport abstract class ObjectWithTypePropertyWrapper<\n  RESOURCE,\n  TYPE extends ObjectEnum<string>,\n  COMBINED_TYPE_DATA,\n  SELF extends ObjectWithTypePropertyWrapper<RESOURCE, TYPE, COMBINED_TYPE_DATA, SELF>\n> extends Wrapper<RESOURCE, SELF> {\n  private readonly TypeClass: { getAll: () => TYPE[] | Readonly<TYPE[]> };\n\n  private readonly typeDataPath: string[];\n\n  protected constructor(\n    data: RESOURCE | SELF,\n    copy = false,\n    typeClass: { getAll: () => TYPE[] | Readonly<TYPE[]> },\n    typeDataPath: string[] = [],\n  ) {\n    super(data, copy);\n    this.TypeClass = typeClass;\n    this.typeDataPath = typeDataPath;\n    if (!typeClass || !_.isFunction(typeClass.getAll) || typeClass.getAll === ObjectEnum.getAll) {\n      throw new Error('typeClass must implement ObjectEnum.getAll method');\n    }\n  }\n\n  getType = (): TYPE =>\n    this.TypeClass.getAll().find((type) => this.getIn([...this.typeDataPath, type.getValue()]));\n\n  getTypeValue = (): string => {\n    const type = this.getType();\n    return type && type.getValue();\n  };\n\n  hasType = (): boolean => !!this.getType();\n\n  getTypeData = (type?: TYPE): COMBINED_TYPE_DATA => {\n    const requestType = type || this.getType();\n    return requestType ? this.getIn([...this.typeDataPath, requestType.getValue()]) : undefined;\n  };\n\n  mergeWith(...wrappers: SELF[]): SELF {\n    super.mergeWith(...wrappers);\n    const lastWithType = _.last(wrappers.filter((wrapper) => wrapper?.getType()));\n\n    if (lastWithType) {\n      this.appendType(lastWithType.getType(), undefined, false); // removes typeData of other types\n    }\n    return (this as any) as SELF;\n  }\n\n  setType = (type?: TYPE, typeData?: COMBINED_TYPE_DATA, sanitize = true) => {\n    let typeDataParent = this.typeDataPath.length === 0 ? this.data : this.getIn(this.typeDataPath);\n\n    if (type && !typeDataParent) {\n      this.ensurePath(this.typeDataPath);\n      typeDataParent = this.getIn(this.typeDataPath);\n    }\n\n    if (typeDataParent) {\n      this.TypeClass.getAll().forEach(\n        (superfluousProperty) => delete typeDataParent[superfluousProperty.getValue()],\n      );\n      if (type) {\n        const finalTypeData = typeData\n          ? sanitize\n            ? this.sanitize(type, typeData) || {}\n            : _.cloneDeep(typeData)\n          : {};\n        if (sanitize) {\n          omitEmpty(finalTypeData, true);\n        }\n        typeDataParent[type.getValue()] = finalTypeData;\n      }\n    }\n    return (this as any) as SELF;\n  };\n\n  appendType = (type?: TYPE, newTypeData?: COMBINED_TYPE_DATA, sanitize = true) =>\n    this.setType(type, { ...this.getTypeData(type), ...newTypeData }, sanitize);\n\n  setTypeData = (newTypeData?: COMBINED_TYPE_DATA, sanitize = true) =>\n    this.setType(this.getType(), newTypeData, sanitize);\n\n  appendTypeData(newTypeData?: COMBINED_TYPE_DATA, sanitize = true) {\n    return this.appendType(this.getType(), newTypeData, sanitize);\n  }\n\n  // should be implemented by derived wrappers\n  protected sanitize(type: TYPE, typeData: COMBINED_TYPE_DATA): COMBINED_TYPE_DATA {\n    return _.cloneDeep(typeData);\n  }\n}\n","import { K8sKind, K8sResourceCommon } from '@console/internal/module/k8s/types';\nimport { apiVersionForModel } from '@console/internal/module/k8s/k8s';\nimport { ensurePath } from '../../utils/utils';\nimport { omitEmpty } from '../../../../utils/common';\n\nexport type K8sInitAddon = {\n  name?: string;\n  generateName?: string;\n  namespace?: string;\n  labels?: { [k: string]: string };\n  annotations?: { [k: string]: string };\n};\n\nexport const initK8sObject = (\n  base: K8sResourceCommon,\n  model: K8sKind,\n  { name, generateName, namespace, labels, annotations }: K8sInitAddon = {},\n) => {\n  if (base && model) {\n    base.kind = model.kind;\n    base.apiVersion = apiVersionForModel(model);\n\n    ensurePath(base, 'metadata');\n    const { metadata } = base;\n    if (name) {\n      metadata.name = name;\n      metadata.generateName = undefined;\n    } else if (generateName) {\n      metadata.name = undefined;\n      metadata.generateName = generateName;\n    }\n    metadata.namespace = namespace || metadata.namespace;\n    metadata.labels = labels || metadata.labels;\n    metadata.annotations = annotations || metadata.annotations;\n    omitEmpty(metadata, true);\n  }\n};\n\nexport const clearMetadata = (base: K8sResourceCommon) => {\n  if (base?.metadata) {\n    delete base.metadata;\n  }\n};\n\nexport const clearRuntimeMetadata = (base: K8sResourceCommon) => {\n  if (base) {\n    delete (base as any).status;\n  }\n  if (base?.metadata) {\n    const { metadata } = base;\n    delete metadata.selfLink;\n    delete metadata.resourceVersion;\n    delete metadata.uid;\n    delete metadata.creationTimestamp;\n    delete metadata.deletionTimestamp;\n    delete metadata.generation;\n  }\n};\n","import * as _ from 'lodash';\nimport { ensurePath } from '../utils/utils';\nimport { omitEmpty } from '../../../utils/common';\n\nexport abstract class Wrapper<RESOURCE extends {}, SELF extends Wrapper<RESOURCE, SELF>> {\n  protected data: RESOURCE;\n\n  constructor(data?: RESOURCE | SELF, copy = false) {\n    const d = _.isFunction((data as any)?.asResource)\n      ? (data as SELF).asResource()\n      : (data as RESOURCE);\n    this.data = (d && copy ? _.cloneDeep(d) : d || {}) as any;\n  }\n\n  asResource = (copy = false): RESOURCE => (copy ? _.cloneDeep(this.data) : this.data);\n\n  mergeWith(...wrappers: SELF[]): SELF {\n    if (wrappers) {\n      const update = _.merge({}, ...wrappers.filter((w) => w?.data).map((w) => w.data));\n\n      _.merge(this.data, _.cloneDeep(update)); // clone to dispose of all old references\n    }\n    return (this as any) as SELF;\n  }\n\n  omitEmpty = (path?: string[] | string, justUndefined = true) => {\n    omitEmpty(path ? this.getIn(path) : this.data, justUndefined);\n    return (this as any) as SELF;\n  };\n\n  protected get = (key: string) => (this.data && key ? this.data[key] : null);\n\n  protected getIn = (path: string[] | string) =>\n    this.data && path ? _.get(this.data, path) : null;\n\n  protected ensurePath = (path: string[] | string, value: any[] | {} = {}) =>\n    ensurePath(this.data, path, value);\n\n  protected clearIfEmpty = (path: string[] | string) => {\n    if (path && path.length > 0) {\n      const arrPath = _.isString(path) ? path.split('.') : [...path];\n      const childKey = arrPath.pop();\n      const parent = arrPath.length > 0 ? this.getIn(arrPath) : this.data;\n      if (parent && parent.hasOwnProperty(childKey) && _.isEmpty(parent[childKey])) {\n        delete parent[childKey];\n      }\n    }\n    return (this as any) as SELF;\n  };\n\n  protected uncheckedData = () => this.data as any;\n}\n","import * as _ from 'lodash';\n\nexport const ensurePath = (data: {}, path: string[] | string, value: any = {}) => {\n  let currentFragment: any = data;\n  if (data && path) {\n    const arrPath = _.isString(path) ? path.split('.') : path;\n\n    arrPath.forEach((pathElement, idx) => {\n      const isLast = idx === arrPath.length - 1;\n\n      const nextFragment = currentFragment[pathElement];\n\n      if (isLast ? nextFragment != null : _.isObject(nextFragment)) {\n        currentFragment = nextFragment;\n      } else {\n        const newFragment = isLast ? value : {};\n        currentFragment[pathElement] = newFragment;\n        currentFragment = newFragment;\n      }\n    });\n  }\n\n  return currentFragment;\n};\n","import {\n  DiskMapping,\n  NetworkMapping,\n  StorageMapping,\n  VMImportOvirtSource,\n} from '../../../types/vm-import/ovirt/vm-import';\nimport { Wrapper } from '../common/wrapper';\n\nexport class VMImportOvirtSourceWrappper extends Wrapper<\n  VMImportOvirtSource,\n  VMImportOvirtSourceWrappper\n> {\n  constructor(\n    vmImportOvirtSource?: VMImportOvirtSource | VMImportOvirtSourceWrappper | any,\n    copy = false,\n  ) {\n    super(vmImportOvirtSource, copy);\n  }\n\n  setVM = (id: string) => {\n    this.ensurePath('vm');\n    this.data.vm.id = id;\n    return this;\n  };\n\n  setNetworkMappings = (networkMappings: NetworkMapping[]) => {\n    this.ensurePath('mappings');\n    this.data.mappings.networkMappings = networkMappings;\n    this.clearIfEmpty('mappings.networkMappings');\n    this.clearIfEmpty('mappings');\n    return this;\n  };\n\n  setStorageMappings = (storageMappings: StorageMapping[]) => {\n    this.ensurePath('mappings');\n    this.data.mappings.storageMappings = storageMappings;\n    this.clearIfEmpty('mappings.storageMappings');\n    this.clearIfEmpty('mappings');\n    return this;\n  };\n\n  setDiskMappings = (diskMappings: DiskMapping[]) => {\n    this.ensurePath('mappings');\n    this.data.mappings.diskMappings = diskMappings;\n    this.clearIfEmpty('mappings.diskMappings');\n    this.clearIfEmpty('mappings');\n    return this;\n  };\n}\n","import { VirtualMachineImportModel } from '../../../models';\nimport { K8sResourceObjectWithTypePropertyWrapper } from '../common/k8s-resource-object-with-type-property-wrapper';\nimport { VMImportKind, VMImportOvirtSource } from '../../../types/vm-import/ovirt/vm-import';\nimport { VMImportType } from '../../../constants/v2v-import/ovirt/vm-import-type';\nimport { K8sInitAddon } from '../common/util/k8s-mixin';\nimport { VMImportOvirtSourceWrappper } from './vm-import-ovirt-source-wrapper';\n\ntype CombinedTypeData = VMImportOvirtSource; // add other sources once available\n\nexport class VMImportWrappper extends K8sResourceObjectWithTypePropertyWrapper<\n  VMImportKind,\n  VMImportType,\n  CombinedTypeData,\n  VMImportWrappper\n> {\n  constructor(vmImport?: VMImportKind | VMImportWrappper | any, copy = false) {\n    super(VirtualMachineImportModel, vmImport, copy, VMImportType, ['spec', 'source']);\n  }\n\n  init(data: K8sInitAddon = {}) {\n    super.init(data);\n    this.setStartVM(false);\n    return this;\n  }\n\n  setTargetVMName = (name: string) => {\n    this.ensurePath('spec');\n    this.data.spec.targetVmName = name;\n    return this;\n  };\n\n  setStartVM = (startVM = false) => {\n    this.ensurePath('spec');\n    this.data.spec.startVm = startVM;\n    return this;\n  };\n\n  setCredentialsSecret = (secretName: string, secretNamespace: string = undefined) => {\n    this.ensurePath('spec.providerCredentialsSecret');\n    this.data.spec.providerCredentialsSecret.name = secretName;\n    this.data.spec.providerCredentialsSecret.namespace = secretNamespace;\n    this.clearIfEmpty('spec.providerCredentialsSecret');\n    return this;\n  };\n\n  setResourceMapping = (mappingName: string, mappingNamespace: string = undefined) => {\n    this.ensurePath('spec.resourceMapping');\n    this.data.spec.resourceMapping.name = mappingName;\n    this.data.spec.resourceMapping.namespace = mappingNamespace;\n    this.clearIfEmpty('spec.resourceMapping');\n    return this;\n  };\n\n  getOvirtSourceWrapper = () => {\n    return this.getType() === VMImportType.OVIRT\n      ? new VMImportOvirtSourceWrappper(this.getTypeData(VMImportType.OVIRT))\n      : undefined;\n  };\n\n  getResolvedVMTargetName = () => this.data.status?.targetVmName || this.data.spec?.targetVmName;\n\n  protected sanitize(type: VMImportType, data: VMImportOvirtSource) {\n    return super.sanitize(type, data) || ({} as any);\n  }\n}\n","import * as _ from 'lodash';\nimport { ObjectWithTypePropertyWrapper } from '../common/object-with-type-property-wrapper';\nimport { V1Disk } from '../../../types/vm/disk/V1Disk';\nimport { DiskType, DiskBus } from '../../../constants/vm/storage';\n\ntype CombinedTypeData = {\n  bus?: string | DiskBus;\n};\n\nexport class DiskWrapper extends ObjectWithTypePropertyWrapper<\n  V1Disk,\n  DiskType,\n  CombinedTypeData,\n  DiskWrapper\n> {\n  /**\n   * @deprecated FIXME deprecate initializeFromSimpleData in favor of init\n   */\n  static initializeFromSimpleData = ({\n    name,\n    type,\n    bus,\n    bootOrder,\n  }: {\n    name?: string;\n    type?: DiskType;\n    bus?: DiskBus;\n    bootOrder?: number;\n  }) =>\n    new DiskWrapper({\n      name,\n      bootOrder,\n    }).setType(type, { bus: bus?.getValue() });\n\n  constructor(disk?: V1Disk | DiskWrapper, copy = false) {\n    super(disk, copy, DiskType);\n  }\n\n  init({ name, bootOrder }: { name?: string; bootOrder?: number }) {\n    if (name !== undefined) {\n      this.data.name = name;\n    }\n    if (bootOrder !== undefined) {\n      this.data.bootOrder = bootOrder;\n    }\n    return this;\n  }\n\n  getName = () => this.get('name');\n\n  getDiskBus = (): DiskBus => DiskBus.fromString(this.getIn([this.getTypeValue(), 'bus']));\n\n  getReadableDiskBus = () => {\n    const diskBus = this.getDiskBus();\n    return diskBus && diskBus.toString();\n  };\n\n  getBootOrder = () => this.get('bootOrder');\n\n  isFirstBootableDevice = () => this.getBootOrder() === 1;\n\n  hasBootOrder = () => this.getBootOrder() != null;\n\n  protected sanitize(type: DiskType, { bus }: CombinedTypeData) {\n    switch (type) {\n      case DiskType.FLOPPY:\n        return {};\n      default:\n        return {\n          bus: _.isString(bus) ? bus : bus?.getValue(),\n        };\n    }\n  }\n}\n","import { NetworkType, POD_NETWORK } from '../../../constants';\nimport { V1Network } from '../../../types/vm';\nimport { ObjectWithTypePropertyWrapper } from '../common/object-with-type-property-wrapper';\n\ntype CombinedTypeData = {\n  networkName?: string;\n};\n\nexport class NetworkWrapper extends ObjectWithTypePropertyWrapper<\n  V1Network,\n  NetworkType,\n  CombinedTypeData,\n  NetworkWrapper\n> {\n  constructor(network?: V1Network | NetworkWrapper, copy = false) {\n    super(network, copy, NetworkType);\n  }\n\n  init({ name }: { name?: string }) {\n    if (name !== undefined) {\n      this.data.name = name;\n    }\n    return this;\n  }\n\n  getName = () => this.data?.name;\n\n  getMultusNetworkName = () => this.data?.multus?.networkName;\n\n  isPodNetwork = () => this.getType() === NetworkType.POD;\n\n  getReadableName = () => {\n    switch (this.getType()) {\n      case NetworkType.MULTUS:\n        return this.getMultusNetworkName();\n      case NetworkType.POD:\n        return POD_NETWORK;\n      default:\n        return null;\n    }\n  };\n\n  protected sanitize(type: NetworkType, { networkName }: CombinedTypeData) {\n    switch (type) {\n      case NetworkType.MULTUS:\n        return { networkName };\n      default:\n        return {};\n    }\n  }\n}\n","import { K8sKind } from '@console/internal/module/k8s/types';\n\nexport const VirtualMachineModel: K8sKind = {\n  label: 'Virtual Machine',\n  labelPlural: 'Virtual Machines',\n  apiVersion: 'v1alpha3',\n  apiGroup: 'kubevirt.io',\n  plural: 'virtualmachines',\n  abbr: 'VM',\n  namespaced: true,\n  kind: 'VirtualMachine',\n  id: 'virtualmachine',\n};\n\nexport const VirtualMachineInstanceModel: K8sKind = {\n  label: 'Virtual Machine Instance',\n  labelPlural: 'Virtual Machine Instances',\n  apiVersion: 'v1alpha3',\n  apiGroup: 'kubevirt.io',\n  plural: 'virtualmachineinstances',\n  abbr: 'VMI',\n  namespaced: true,\n  kind: 'VirtualMachineInstance',\n  id: 'virtualmachineinstance',\n  color: '#002F5D',\n};\n\nexport const VirtualMachineInstancePresetModel: K8sKind = {\n  label: 'Virtual Machine Instance Preset',\n  labelPlural: 'Virtual Machine Instance Presets',\n  apiVersion: 'v1alpha3',\n  apiGroup: 'kubevirt.io',\n  plural: 'virtualmachineinstancepresets',\n  abbr: 'VMIP',\n  namespaced: true,\n  kind: 'VirtualMachineInstancePreset',\n  id: 'virtualmachineinstancepreset',\n};\n\nexport const VirtualMachineInstanceReplicaSetModel: K8sKind = {\n  label: 'Virtual Machine Instance Replica Set',\n  labelPlural: 'Virtual Machine Instance Replica Sets',\n  apiVersion: 'v1alpha3',\n  apiGroup: 'kubevirt.io',\n  plural: 'virtualmachineinstancereplicasets',\n  abbr: 'VMIR',\n  namespaced: true,\n  kind: 'VirtualMachineInstanceReplicaSet',\n  id: 'virtualmachineinstancereplicaset',\n};\n\nexport const VirtualMachineInstanceMigrationModel: K8sKind = {\n  label: 'Virtual Machine Instance Migration',\n  labelPlural: 'Virtual Machine Instance Migrations',\n  apiVersion: 'v1alpha3',\n  apiGroup: 'kubevirt.io',\n  plural: 'virtualmachineinstancemigrations',\n  abbr: 'VMIM',\n  namespaced: true,\n  kind: 'VirtualMachineInstanceMigration',\n  id: 'virtualmachineinstancemigration',\n};\n\nexport const DataVolumeModel: K8sKind = {\n  label: 'Data Volume',\n  labelPlural: 'Data Volumes',\n  apiVersion: 'v1alpha1',\n  apiGroup: 'cdi.kubevirt.io',\n  plural: 'datavolumes',\n  abbr: 'DV',\n  namespaced: true,\n  kind: 'DataVolume',\n  id: 'datavolume',\n};\n\nexport const V2VVMwareModel: K8sKind = {\n  label: 'V2V VMWare Provider',\n  labelPlural: 'V2V VMWare Providers',\n  apiVersion: 'v1alpha1',\n  apiGroup: 'v2v.kubevirt.io',\n  plural: 'v2vvmwares',\n  abbr: 'VVW',\n  namespaced: true,\n  kind: 'V2VVmware',\n  id: 'v2vvmware',\n};\n\nexport const OVirtProviderModel: K8sKind = {\n  label: 'Ovirt Provider',\n  labelPlural: 'Ovirt Providers',\n  apiVersion: 'v1alpha1',\n  apiGroup: 'v2v.kubevirt.io',\n  plural: 'ovirtproviders',\n  abbr: 'OVP',\n  namespaced: true,\n  kind: 'OVirtProvider',\n  id: 'ovirtprovider',\n};\n\nexport const VirtualMachineImportModel: K8sKind = {\n  label: 'Virtual Machine Import',\n  labelPlural: 'Virtual Machine Imports',\n  apiVersion: 'v1alpha1',\n  apiGroup: 'v2v.kubevirt.io',\n  plural: 'virtualmachineimports',\n  abbr: 'VMImport',\n  namespaced: true,\n  kind: 'VirtualMachineImport',\n  id: 'virtualmachineimport',\n};\n","export * from './vm-template-yaml';\nexport * from './vm-yaml';\n","import { Map as ImmutableMap } from 'immutable';\nimport { TemplateModel } from '@console/internal/models';\n\nexport const VMTemplateYAMLTemplates = ImmutableMap().setIn(\n  ['vm-template'],\n  `\napiVersion: ${TemplateModel.apiGroup}/${TemplateModel.apiVersion}\nkind: ${TemplateModel.kind}\nmetadata:\n  name: vm-template-example\n  labels:\n    template.kubevirt.io/type: vm\n    os.template.kubevirt.io/fedora31: 'true'\n    workload.template.kubevirt.io/server: 'true'\n  annotations:\n    name.os.template.kubevirt.io/fedora31: Fedora 31\n    description: VM template example\nobjects:\n  - apiVersion: kubevirt.io/v1alpha3\n    kind: VirtualMachine\n    metadata:\n      labels:\n        app: '\\${NAME}'\n      name: '\\${NAME}'\n    spec:\n      running: false\n      template:\n        metadata:\n          labels:\n            kubevirt.io/domain: '\\${NAME}'\n        spec:\n          domain:\n            cpu:\n              cores: 1\n              sockets: 1\n              threads: 1\n            devices:\n              disks:\n                - name: containerdisk\n                  bootOrder: 1\n                  disk:\n                    bus: virtio\n                - disk:\n                    bus: virtio\n                  name: cloudinitdisk\n              interfaces:\n                - masquerade: {}\n                  name: default\n              networkInterfaceMultiqueue: true\n              rng: {}\n            resources:\n              requests:\n                memory: 1G\n          networks:\n            - name: default\n              pod: {}\n          terminationGracePeriodSeconds: 0\n          volumes:\n            - name: containerdisk\n              containerDisk:\n                image: 'kubevirt/fedora-cloud-container-disk-demo:latest'\n            - cloudInitNoCloud:\n                userData: |-\n                  #cloud-config\n                  password: fedora\n                  chpasswd: { expire: False }\n              name: cloudinitdisk\n          hostname: '\\${NAME}'\nparameters:\n  - name: NAME\n    description: Name for the new VM\n    required: true\n`,\n);\n","import { Map as ImmutableMap } from 'immutable';\nimport { VirtualMachineModel } from '..';\n\nexport const VirtualMachineYAMLTemplates = ImmutableMap().setIn(\n  ['default'],\n  `\napiVersion: ${VirtualMachineModel.apiGroup}/${VirtualMachineModel.apiVersion}\nkind: ${VirtualMachineModel.kind}\nmetadata:\n  name: vm-example\n  labels:\n    app: vm-example\n    os.template.kubevirt.io/fedora31: 'true'\n    workload.template.kubevirt.io/server: 'true'\n  annotations:\n    name.os.template.kubevirt.io/fedora31: Fedora 31\n    description: VM example\nspec:\n  running: false\n  template:\n    metadata:\n      labels:\n        kubevirt.io/domain: vm-example\n        vm.kubevirt.io/name: vm-example\n        os.template.kubevirt.io/fedora31: 'true'\n        workload.template.kubevirt.io/server: 'true'\n    spec:\n      domain:\n        cpu:\n          cores: 1\n          sockets: 1\n          threads: 1\n        devices:\n          disks:\n            - bootOrder: 1\n              disk:\n                bus: virtio\n              name: containerdisk\n            - disk:\n                bus: virtio\n              name: cloudinitdisk\n          interfaces:\n            - masquerade: {}\n              name: default\n          networkInterfaceMultiqueue: true\n          rng: {}\n        resources:\n          requests:\n            memory: 1G\n      hostname: vm-example\n      networks:\n        - name: default\n          pod: {}\n      terminationGracePeriodSeconds: 0\n      volumes:\n        - containerDisk:\n            image: 'kubevirt/fedora-cloud-container-disk-demo:latest'\n          name: containerdisk\n        - cloudInitNoCloud:\n            userData: |-\n              #cloud-config\n              password: fedora\n              chpasswd: { expire: False }\n          name: cloudinitdisk\n`,\n);\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport * as virtualMachineIcon from './images/virtual-machine.svg';\nimport {\n  Plugin,\n  ResourceNSNavItem,\n  OverviewCRD,\n  ResourceListPage,\n  ResourceDetailsPage,\n  ModelFeatureFlag,\n  YAMLTemplate,\n  ModelDefinition,\n  RoutePage,\n  DashboardsOverviewHealthURLSubsystem,\n  DashboardsOverviewInventoryItem,\n  DashboardsInventoryItemGroup,\n  ReduxReducer,\n  ProjectDashboardInventoryItem,\n  DashboardsOverviewResourceActivity,\n} from '@console/plugin-sdk';\nimport { DashboardsStorageCapacityDropdownItem } from '@console/ceph-storage-plugin';\nimport { TemplateModel, PodModel } from '@console/internal/models';\nimport { getName } from '@console/shared/src/selectors/common';\nimport { AddAction } from '@console/dev-console/src/extensions/add-actions';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport * as models from './models';\nimport { VMTemplateYAMLTemplates, VirtualMachineYAMLTemplates } from './models/templates';\nimport { getKubevirtHealthState } from './components/dashboards-page/overview-dashboard/health';\nimport {\n  getVMStatusGroups,\n  VMOffGroupIcon,\n} from './components/dashboards-page/overview-dashboard/inventory';\nimport kubevirtReducer from './redux';\nimport { accessReviewImportVM } from './utils/accessReview-v2v';\nimport { diskImportKindMapping } from './components/dashboards-page/overview-dashboard/utils';\n\nimport './style.scss';\n\ntype ConsumedExtensions =\n  | ResourceNSNavItem\n  | OverviewCRD\n  | ResourceListPage\n  | ResourceDetailsPage\n  | ModelFeatureFlag\n  | YAMLTemplate\n  | ModelDefinition\n  | RoutePage\n  | DashboardsOverviewHealthURLSubsystem\n  | DashboardsOverviewInventoryItem\n  | DashboardsInventoryItemGroup\n  | DashboardsStorageCapacityDropdownItem\n  | ReduxReducer\n  | ProjectDashboardInventoryItem\n  | DashboardsOverviewResourceActivity\n  | AddAction;\n\nexport const FLAG_KUBEVIRT = 'KUBEVIRT';\n\nconst virtualMachineConfigurations = (namespace: string): FirehoseResource[] => {\n  const virtualMachineResource = [\n    {\n      isList: true,\n      kind: models.VirtualMachineModel.kind,\n      namespace,\n      prop: 'virtualmachines',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: models.VirtualMachineInstanceModel.kind,\n      namespace,\n      prop: 'virtualmachineinstances',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: TemplateModel.kind,\n      prop: 'virtualmachinetemplates',\n      selector: {\n        matchLabels: { 'template.kubevirt.io/type': 'base' },\n      },\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: models.VirtualMachineInstanceMigrationModel.kind,\n      namespace,\n      prop: 'migrations',\n      optional: true,\n    },\n    {\n      isList: true,\n      optional: true,\n      kind: models.DataVolumeModel.kind,\n      prop: 'dataVolumes',\n    },\n    {\n      isList: true,\n      optional: true,\n      kind: models.VirtualMachineImportModel.kind,\n      prop: 'vmImports',\n    },\n  ];\n  return virtualMachineResource;\n};\n\nconst plugin: Plugin<ConsumedExtensions> = [\n  {\n    type: 'ModelDefinition',\n    properties: {\n      models: _.values(models),\n    },\n  },\n  {\n    type: 'FeatureFlag/Model',\n    properties: {\n      model: models.VirtualMachineModel,\n      flag: FLAG_KUBEVIRT,\n    },\n  },\n  {\n    type: 'Overview/CRD',\n    properties: {\n      resources: virtualMachineConfigurations,\n      required: FLAG_KUBEVIRT,\n      utils: () => null,\n    },\n  },\n  {\n    type: 'NavItem/ResourceNS',\n    properties: {\n      section: 'Workloads',\n      componentProps: {\n        name: 'Virtualization',\n        resource: 'virtualization',\n      },\n      mergeBefore: 'Deployments',\n    },\n    flags: {\n      required: [FLAG_KUBEVIRT],\n    },\n  },\n  {\n    type: 'YAMLTemplate',\n    properties: {\n      model: models.VirtualMachineModel,\n      template: VirtualMachineYAMLTemplates.getIn(['default']),\n    },\n  },\n  {\n    type: 'YAMLTemplate',\n    properties: {\n      model: TemplateModel,\n      template: VMTemplateYAMLTemplates.getIn(['vm-template']),\n      templateName: 'vm-template',\n    },\n  },\n  // {\n  //   type: 'Page/Route',\n  //   properties: {\n  //     exact: true,\n  //     path: ['/k8s/ns/:ns/virtualization/~new'],\n  //     loader: () =>\n  //       import('./components/vms/vm-create-yaml' /* webpackChunkName: \"kubevirt\" */).then(\n  //         (m) => m.VMCreateYAML,\n  //       ),\n  //     required: FLAG_KUBEVIRT,\n  //   },\n  // },\n  // {\n  //   type: 'Page/Route',\n  //   properties: {\n  //     exact: true,\n  //     path: ['/k8s/ns/:ns/virtualization/~new-wizard'],\n  //     loader: () =>\n  //       import(\n  //         './components/create-vm-wizard' /* webpackChunkName: \"kubevirt-create-vm-wizard\" */\n  //       ).then((m) => m.CreateVMWizardPage),\n  //     required: FLAG_KUBEVIRT,\n  //   },\n  // },\n  // {\n  //   type: 'Page/Route',\n  //   properties: {\n  //     path: '/k8s/ns/:ns/virtualmachines/:name',\n  //     loader: () =>\n  //       import('./components/vms/vm-details-page' /* webpackChunkName: \"kubevirt\" */).then(\n  //         (m) => m.VirtualMachinesDetailsPage,\n  //       ),\n  //   },\n  // },\n  // {\n  //   type: 'Page/Route',\n  //   properties: {\n  //     path: '/k8s/ns/:ns/virtualmachineinstances/:name',\n  //     loader: () =>\n  //       import('./components/vms/vmi-details-page' /* webpackChunkName: \"kubevirt\" */).then(\n  //         (m) => m.VirtualMachinesInstanceDetailsPage,\n  //       ),\n  //   },\n  // },\n  // {\n  //   type: 'Page/Route',\n  //   properties: {\n  //     path: ['/k8s/ns/:ns/virtualization', '/k8s/all-namespaces/virtualization'],\n  //     loader: () =>\n  //       import('./components/vms/virtualization' /* webpackChunkName: \"kubevirt\" */).then(\n  //         (m) => m.VirtualizationPage,\n  //       ),\n  //     required: FLAG_KUBEVIRT,\n  //   },\n  // },\n  // {\n  //   type: 'Page/Route',\n  //   properties: {\n  //     exact: true,\n  //     path: ['/k8s/ns/:ns/virtualmachines', '/k8s/all-namespaces/virtualmachines'],\n  //     loader: () =>\n  //       import('./components/vms/virtualization' /* webpackChunkName: \"kubevirt\" */).then(\n  //         (m) => m.RedirectToVirtualizationPage,\n  //       ),\n  //     required: FLAG_KUBEVIRT,\n  //   },\n  // },\n  // {\n  //   type: 'Page/Route',\n  //   properties: {\n  //     exact: true,\n  //     path: ['/k8s/ns/:ns/vmtemplates', '/k8s/all-namespaces/vmtemplates'],\n  //     loader: () =>\n  //       import('./components/vms/virtualization' /* webpackChunkName: \"kubevirt\" */).then(\n  //         (m) => m.RedirectToVirtualizationTemplatePage,\n  //       ),\n  //     required: FLAG_KUBEVIRT,\n  //   },\n  // },\n  // {\n  //   type: 'Page/Route',\n  //   properties: {\n  //     path: '/k8s/ns/:ns/vmtemplates/:name',\n  //     loader: () =>\n  //       import(\n  //         './components/vm-templates/vm-template-details-page' /* webpackChunkName: \"kubevirt\" */\n  //       ).then((m) => m.VMTemplateDetailsPage),\n  //     required: FLAG_KUBEVIRT,\n  //   },\n  // },\n  // {\n  //   type: 'Page/Route',\n  //   properties: {\n  //     exact: true,\n  //     path: ['/k8s/ns/:ns/vmtemplates', '/k8s/all-namespaces/vmtemplates'],\n  //     loader: () =>\n  //       import('./components/vm-templates/vm-template' /* webpackChunkName: \"kubevirt\" */).then(\n  //         (m) => m.VirtualMachineTemplatesPage,\n  //       ),\n  //     required: FLAG_KUBEVIRT,\n  //   },\n  // },\n  {\n    type: 'Dashboards/Overview/Health/URL',\n    properties: {\n      title: 'Virtualization',\n      url: `apis/subresources.${models.VirtualMachineModel.apiGroup}/${models.VirtualMachineModel.apiVersion}/healthz`,\n      healthHandler: getKubevirtHealthState,\n    },\n    flags: {\n      required: [FLAG_KUBEVIRT],\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Inventory/Item',\n    properties: {\n      additionalResources: {\n        vmis: {\n          isList: true,\n          kind: models.VirtualMachineInstanceModel.kind,\n        },\n        pods: {\n          isList: true,\n          kind: PodModel.kind,\n        },\n        migrations: {\n          isList: true,\n          kind: models.VirtualMachineInstanceMigrationModel.kind,\n        },\n        dataVolumes: {\n          kind: models.DataVolumeModel.kind,\n          isList: true,\n          optional: true,\n        },\n        vmImports: {\n          isList: true,\n          kind: models.VirtualMachineImportModel.kind,\n          optional: true,\n        },\n      },\n      model: models.VirtualMachineModel,\n      mapper: getVMStatusGroups,\n      useAbbr: true,\n    },\n    flags: {\n      required: [FLAG_KUBEVIRT],\n    },\n  },\n  {\n    type: 'Dashboards/Inventory/Item/Group',\n    properties: {\n      id: 'vm-off',\n      icon: <VMOffGroupIcon />,\n    },\n    flags: {\n      required: [FLAG_KUBEVIRT],\n    },\n  },\n  {\n    type: 'Dashboards/Storage/Capacity/Dropdown/Item',\n    properties: {\n      metric: 'VMs vs Pods',\n      queries: [\n        'sum((kube_persistentvolumeclaim_resource_requests_storage_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info{pod=~\"virt-launcher-.*\"}) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"}))',\n        'sum((kube_persistentvolumeclaim_resource_requests_storage_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info{pod !~\"virt-launcher-.*\"}) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"}))',\n      ],\n      required: FLAG_KUBEVIRT,\n    },\n  },\n  {\n    type: 'ReduxReducer',\n    properties: {\n      namespace: 'kubevirt',\n      reducer: kubevirtReducer,\n      required: FLAG_KUBEVIRT,\n    },\n  },\n  {\n    type: 'Project/Dashboard/Inventory/Item',\n    properties: {\n      additionalResources: [\n        {\n          isList: true,\n          kind: models.VirtualMachineInstanceModel.kind,\n          prop: 'vmis',\n        },\n        {\n          isList: true,\n          kind: PodModel.kind,\n          prop: 'pods',\n        },\n        {\n          isList: true,\n          kind: models.VirtualMachineInstanceMigrationModel.kind,\n          prop: 'migrations',\n        },\n        {\n          isList: true,\n          optional: true,\n          kind: models.DataVolumeModel.kind,\n          prop: 'dataVolumes',\n        },\n        {\n          isList: true,\n          optional: true,\n          kind: models.VirtualMachineImportModel.kind,\n          prop: 'vmImports',\n        },\n      ],\n      model: models.VirtualMachineModel,\n      mapper: getVMStatusGroups,\n      useAbbr: true,\n    },\n    flags: {\n      required: [FLAG_KUBEVIRT],\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Activity/Resource',\n    properties: {\n      k8sResource: {\n        isList: true,\n        kind: models.DataVolumeModel.kind,\n        prop: 'dvs',\n      },\n      isActivity: (resource) =>\n        resource?.status?.phase === 'ImportInProgress' &&\n        Object.keys(diskImportKindMapping).includes(resource?.metadata?.ownerReferences?.[0]?.kind),\n      getTimestamp: (resource) => new Date(resource.metadata.creationTimestamp),\n      loader: () =>\n        import(\n          './components/dashboards-page/overview-dashboard/activity' /* webpackChunkName: \"kubevirt-activity\" */\n        ).then((m) => m.DiskImportActivity),\n    },\n    flags: {\n      required: [FLAG_KUBEVIRT],\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Activity/Resource',\n    properties: {\n      k8sResource: {\n        isList: true,\n        kind: PodModel.kind,\n        prop: 'pods',\n      },\n      isActivity: (resource) => getName(resource).startsWith('kubevirt-v2v-conversion'),\n      getTimestamp: (resource) => new Date(resource.metadata.creationTimestamp),\n      loader: () =>\n        import(\n          './components/dashboards-page/overview-dashboard/activity' /* webpackChunkName: \"kubevirt-activity\" */\n        ).then((m) => m.V2VImportActivity),\n    },\n    flags: {\n      required: [FLAG_KUBEVIRT],\n    },\n  },\n  {\n    type: 'AddAction',\n    flags: {\n      required: [FLAG_KUBEVIRT],\n    },\n    properties: {\n      id: 'import-via-v2v',\n      url: '/k8s/ns/:namespace/virtualization/~new-wizard?mode=import',\n      label: 'Import Virtual Machine',\n      description: 'Import a virtual machine from external hypervisor',\n      icon: virtualMachineIcon,\n      accessReview: accessReviewImportVM,\n    },\n  },\n];\n\nexport default plugin;\n","import { combineReducers } from 'redux';\nimport createVmWizardReducers from '../components/create-vm-wizard/redux/reducers';\n\nexport default combineReducers({\n  createVmWizards: createVmWizardReducers,\n});\n","import { K8sResourceCommon, TemplateKind } from '@console/internal/module/k8s';\nimport { TemplateModel } from '@console/internal/models';\nimport { VMImportKind } from '../types/vm-import/ovirt/vm-import';\nimport { VMIKind, VMKind } from '../types/vm';\nimport {\n  VirtualMachineImportModel,\n  VirtualMachineInstanceModel,\n  VirtualMachineModel,\n} from '../models';\n\nexport const isVM = (entity: K8sResourceCommon): entity is VMKind =>\n  entity?.kind === VirtualMachineModel.kind;\n\nexport const isTemplate = (entity: K8sResourceCommon): entity is TemplateKind =>\n  entity?.kind === TemplateModel.kind;\n\nexport const isVMI = (entity: K8sResourceCommon): entity is VMIKind =>\n  entity?.kind === VirtualMachineInstanceModel.kind;\n\nexport const isVMImport = (entity: K8sResourceCommon): entity is VMImportKind =>\n  entity?.kind === VirtualMachineImportModel.kind;\n","import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { getStorageSize } from '../selectors';\n\nexport const getDataVolumeResources = (dataVolume: K8sResourceKind) =>\n  _.get(dataVolume, 'spec.pvc.resources');\n\nexport const getDataVolumeStorageSize = (dataVolume: K8sResourceKind): string =>\n  getStorageSize(getDataVolumeResources(dataVolume));\n\nexport const getDataVolumeAccessModes = (dataVolume: K8sResourceKind) =>\n  _.get(dataVolume, 'spec.pvc.accessModes');\nexport const getDataVolumeVolumeMode = (dataVolume: K8sResourceKind) =>\n  _.get(dataVolume, 'spec.pvc.volumeMode');\nexport const getDataVolumeStorageClassName = (dataVolume: K8sResourceKind): string =>\n  _.get(dataVolume, 'spec.pvc.storageClassName');\n","import { get, includes } from 'lodash';\nimport { PodKind, ContainerStatus, ContainerSpec } from '@console/internal/module/k8s';\n\nconst failedWaitingContainerReasons = ['ImagePullBackOff', 'ErrImagePull', 'CrashLoopBackOff'];\nconst failedTerminationContaineReasons = ['Error'];\n\nconst getContainerWaitingReason = (container: ContainerStatus) =>\n  get(container, 'state.waiting.reason') as ContainerStatus['state']['waiting']['reason'];\nexport const getContainerImage = (container: ContainerStatus | ContainerSpec) =>\n  get(container, 'image') as ContainerStatus['image'];\nconst getContainerTerminatedReason = (container: ContainerStatus) =>\n  get(container, 'state.terminated.reason') as ContainerStatus['state']['terminated']['reason'];\n\nconst stateReasonResolver = {\n  terminated: ({ reason, exitCode }) =>\n    `Terminated with ${reason}${exitCode ? ` (exit code ${exitCode}).` : '.'}`,\n  waiting: ({ reason }) => `Waiting (${reason}).`,\n};\nexport const isContainerFailing = (container: ContainerStatus) =>\n  !container.ready &&\n  (includes(failedWaitingContainerReasons, getContainerWaitingReason(container)) ||\n    includes(failedTerminationContaineReasons, getContainerTerminatedReason(container)));\n\nexport const getContainerStatusReason = (containerStatus: ContainerStatus) => {\n  if (containerStatus) {\n    const stateName = Object.getOwnPropertyNames(containerStatus.state).find(\n      (pn) => !!containerStatus.state[pn].reason,\n    );\n    if (stateName) {\n      const state = containerStatus.state[stateName];\n      return (\n        state.message ||\n        (stateReasonResolver[stateName] && stateReasonResolver[stateName](state)) ||\n        stateName\n      );\n    }\n  }\n  return undefined;\n};\n\nexport const getContainerStatuses = (pod: PodKind) =>\n  get(pod, 'status.containerStatuses', []) as PodKind['status']['containerStatuses'];\n\nexport const findFailingContainerStatus = (pod: PodKind) =>\n  getContainerStatuses(pod).find(isContainerFailing);\n","import { get } from 'lodash';\nimport { getName, getNamespace, getOwnerReferences, getUID } from '@console/shared/src/selectors';\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\nimport { PodKind } from '@console/internal/module/k8s';\nimport { getLabelValue } from '../selectors';\nimport { VMKind, VMIKind } from '../../types';\nimport { getDataVolumeTemplates } from '../vm';\nimport {\n  CDI_KUBEVIRT_IO,\n  STORAGE_IMPORT_PVC_NAME,\n  VIRT_LAUNCHER_POD_PREFIX,\n} from '../../constants';\nimport { buildOwnerReferenceForModel } from '../../utils';\nimport { VirtualMachineInstanceModel } from '../../models';\n\nexport const getHostName = (pod: PodKind) =>\n  get(pod, 'spec.hostname') as PodKind['spec']['hostname'];\n\nexport const getPodStatusPhase = (pod: PodKind) =>\n  get(pod, 'status.phase') as PodKind['status']['phase'];\nexport const getPodStatusConditions = (pod: PodKind) =>\n  get(pod, 'status.conditions', []) as PodKind['status']['conditions'];\nexport const getPodStatusConditionOfType = (pod: PodKind, type: string) =>\n  getPodStatusConditions(pod).find((condition) => condition.type === type);\n\nexport const getPodFalseStatusConditions = (pod: PodKind) =>\n  getPodStatusConditions(pod).filter((condition) => condition.status !== 'True');\n\nexport const getPodContainerStatuses = (pod: PodKind) =>\n  get(pod, 'status.containerStatuses') as PodKind['status']['containerStatuses'];\n\nexport const findPodFalseStatusConditionMessage = (pod: PodKind) => {\n  const notReadyConditions = getPodFalseStatusConditions(pod);\n  if (notReadyConditions.length > 0) {\n    return notReadyConditions[0].message || `Step: ${notReadyConditions[0].type}`;\n  }\n  return undefined;\n};\n\nexport const isPodSchedulable = (pod: PodKind) => {\n  const podScheduledCond = getPodStatusConditionOfType(pod, 'PodScheduled');\n  return !(\n    podScheduledCond &&\n    podScheduledCond.status !== 'True' &&\n    podScheduledCond.reason === 'Unschedulable'\n  );\n};\n\nconst isPodReady = (pod: PodKind): boolean =>\n  pod?.status?.phase === 'Running' && pod?.status?.containerStatuses?.every((s) => s.ready);\n\nexport const findVMIPod = (\n  vmi?: VMIKind,\n  pods?: PodKind[],\n  podNamePrefix = VIRT_LAUNCHER_POD_PREFIX,\n) => {\n  if (!pods || !vmi) {\n    return null;\n  }\n\n  // the UID is not set as we mimic VMI here\n  const vmOwnerReference = buildOwnerReferenceForModel(\n    VirtualMachineInstanceModel,\n    getName(vmi),\n    getUID(vmi),\n  );\n  const prefix = `${podNamePrefix}${getName(vmi)}-`;\n  const prefixedPods = pods.filter((p) => {\n    const podOwnerReferences = getOwnerReferences(p);\n    return (\n      getNamespace(p) === getNamespace(vmi) &&\n      getName(p).startsWith(prefix) &&\n      podOwnerReferences &&\n      podOwnerReferences.some((podOwnerReference) =>\n        compareOwnerReference(podOwnerReference, vmOwnerReference),\n      )\n    );\n  });\n\n  // Return the newet most ready Pod created\n  return prefixedPods\n    .sort((a: PodKind, b: PodKind) =>\n      a.metadata.creationTimestamp > b.metadata.creationTimestamp ? -1 : 1,\n    )\n    .sort((a: PodKind) => (isPodReady(a) ? -1 : 1))[0];\n};\n\nexport const getVMImporterPods = (\n  vm: VMKind,\n  pods?: PodKind[],\n  pvcNameLabel = `${CDI_KUBEVIRT_IO}/${STORAGE_IMPORT_PVC_NAME}`,\n) => {\n  if (!pods) {\n    return null;\n  }\n\n  const datavolumeNames = getDataVolumeTemplates(vm)\n    .map((dataVolumeTemplate) => getName(dataVolumeTemplate))\n    .filter((dataVolumeTemplate) => dataVolumeTemplate);\n\n  return pods.filter(\n    (p) =>\n      getNamespace(p) === getNamespace(vm) &&\n      getLabelValue(p, CDI_KUBEVIRT_IO) === 'importer' &&\n      datavolumeNames.some((name) => getLabelValue(p, pvcNameLabel) === name),\n  );\n};\n","import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { VMGenericLikeEntityKind } from '../types/vmLike';\n\nexport const getKind = (value) => _.get(value, 'kind') as K8sResourceKind['kind'];\n\nexport const getGeneratedName = (value) =>\n  _.get(value, 'metadata.generateName') as K8sResourceKind['metadata']['generateName'];\n\nexport const getLabels = (entity: K8sResourceKind, defaultValue?: any) =>\n  _.get(entity, 'metadata.labels', defaultValue) as K8sResourceKind['metadata']['labels'];\nexport const getAnnotations = (vm: VMGenericLikeEntityKind, defaultValue?: any) =>\n  _.get(vm, 'metadata.annotations', defaultValue);\nexport const getAnnotation = (\n  vm: VMGenericLikeEntityKind,\n  annotationName: string,\n  defaultValue?: any,\n) => _.get(vm, ['metadata', 'annotations', annotationName], defaultValue);\n\nexport const getDescription = (vm: VMGenericLikeEntityKind) =>\n  _.get(vm, 'metadata.annotations.description');\n\nexport const getLabelValue = (entity: K8sResourceKind, label: string): string =>\n  _.get(entity, ['metadata', 'labels', label]);\n\nexport const getStorageSize = (value): string => _.get(value, 'requests.storage');\n\nexport const getValueByPrefix = (obj = {}, keyPrefix: string): string => {\n  const objectKey = Object.keys(obj).find((key) => key.startsWith(keyPrefix));\n  return objectKey ? obj[objectKey] : null;\n};\n\nexport const getAnnotationKeySuffix = (\n  entity: K8sResourceKind,\n  annotationPrefix: string,\n): string => {\n  const annotations = _.get(\n    entity,\n    'metadata.annotations',\n  ) as K8sResourceKind['metadata']['annotations'];\n  return getValueByPrefix(annotations, annotationPrefix);\n};\n\nexport const getStatusPhase = <T = string>(entity: K8sResourceKind): T => entity?.status?.phase;\n\nexport const getStatusConditions = (statusResource: K8sResourceKind, defaultValue = []) =>\n  _.get(statusResource, 'status.conditions') === undefined\n    ? defaultValue\n    : statusResource.status.conditions;\n\nexport const getStatusConditionOfType = (statusResource: K8sResourceKind, type: string) =>\n  getStatusConditions(statusResource).find((condition) => condition.type === type);\n\nexport const getConditionReason = (condition) => condition && condition.reason;\nexport const isConditionStatusTrue = (condition) => (condition && condition.status) === 'True';\nexport const isConditionReason = (condition, reason) => getConditionReason(condition) === reason;\n","type StringHashMap = {\n  [key: string]: string;\n};\n\nconst getPrefixedKey = (obj: StringHashMap, keyPrefix: string) =>\n  obj ? Object.keys(obj).find((key) => key.startsWith(keyPrefix)) : null;\n\nconst getSuffixValue = (key: string) => {\n  const index = key ? key.lastIndexOf('/') : -1;\n  return index > 0 ? key.substring(index + 1) : null;\n};\n\nexport const getValueByPrefix = (obj: StringHashMap, keyPrefix: string) => {\n  const key = getPrefixedKey(obj, keyPrefix);\n  return key ? obj[key] : null;\n};\n\nexport const findKeySuffixValue = (obj: StringHashMap, keyPrefix: string) =>\n  getSuffixValue(getPrefixedKey(obj, keyPrefix));\n\nexport const findHighestKeyBySuffixValue = (obj: StringHashMap, keyPrefix: string) => {\n  const sortedKeys = Object.keys(obj)\n    .filter((key) => key.startsWith(keyPrefix))\n    .sort();\n  return getSuffixValue(sortedKeys[sortedKeys.length - 1]);\n};\n\nexport const getSimpleName = (obj): string => obj && obj.name;\n","import { TemplateKind } from '@console/internal/module/k8s';\nimport { VMKind } from '../../types/vm';\nimport { VirtualMachineModel } from '../../models';\n\nexport const selectVM = (vmTemplate: TemplateKind): VMKind =>\n  vmTemplate && vmTemplate.objects\n    ? vmTemplate.objects.find((obj) => obj.kind === VirtualMachineModel.kind)\n    : null;\n","import { getName, getNamespace, getOwnerReferences } from '@console/shared/src/selectors';\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\nimport { PodKind } from '@console/internal/module/k8s';\nimport { buildOwnerReference } from '../../utils';\nimport { VMKind } from '../../types/vm';\nimport { OS_WINDOWS_PREFIX } from '../../constants';\nimport { getOperatingSystem } from './selectors';\nimport { VMILikeEntityKind } from '../../types/vmLike';\n\nexport const isWindows = (vm: VMKind): boolean =>\n  (getOperatingSystem(vm) || '').startsWith(OS_WINDOWS_PREFIX);\n\nexport const findConversionPod = (vm: VMILikeEntityKind, pods: PodKind[]) => {\n  if (!pods) {\n    return null;\n  }\n\n  const vmOwnerReference = buildOwnerReference(vm);\n\n  return pods.find((pod) => {\n    const podOwnerReferences = getOwnerReferences(pod);\n    return (\n      getNamespace(pod) === getNamespace(vm) &&\n      getName(pod).startsWith('kubevirt-v2v-conversion') &&\n      podOwnerReferences &&\n      podOwnerReferences.some((podOwnerReference) =>\n        compareOwnerReference(podOwnerReference, vmOwnerReference),\n      )\n    );\n  });\n};\n","import { CPURaw, CPU } from '../../types';\n\nexport const DEFAULT_CPU: CPU = { sockets: 1, cores: 1, threads: 1 };\n\nexport const parseCPU = (sourceCPURaw: CPURaw, defaultValue?: CPU): CPU => {\n  if (!sourceCPURaw) {\n    return defaultValue;\n  }\n\n  if (typeof sourceCPURaw === 'string') {\n    return { sockets: 1, cores: parseInt(sourceCPURaw as string, 10), threads: 1 };\n  }\n\n  return {\n    sockets: parseInt(sourceCPURaw.sockets, 10) || 1,\n    cores: parseInt(sourceCPURaw.cores, 10) || 1,\n    threads: parseInt(sourceCPURaw.threads, 10) || 1,\n  };\n};\n\nexport const vCPUCount = (sourceCPURaw: CPURaw): number => {\n  const cpu = parseCPU(sourceCPURaw, DEFAULT_CPU);\n  return cpu.sockets * cpu.cores * cpu.threads;\n};\n","import * as _ from 'lodash';\nimport { BootableDeviceType, V1NetworkInterface } from '../../types';\nimport { DiskWrapper } from '../../k8s/wrapper/vm/disk-wrapper';\nimport { DeviceType } from '../../constants';\nimport { getBootableDisks, getInterfaces, getDisks } from './selectors';\nimport { asVM } from './vmlike';\nimport { VMLikeEntityKind } from '../../types/vmLike';\nimport { V1Disk } from '../../types/vm/disk/V1Disk';\n\nexport const getBootDeviceIndex = (devices, bootOrder) =>\n  devices.findIndex((device) => device.bootOrder === bootOrder);\n\nexport const getDeviceBootOrder = (device, defaultValue?): number =>\n  device && device.bootOrder === undefined ? defaultValue : device.bootOrder;\n\nexport const transformDevices = (\n  disks: V1Disk[] = [],\n  nics: V1NetworkInterface[] = [],\n): BootableDeviceType[] => {\n  const transformedDisks = disks.map((disk) => ({\n    type: DeviceType.DISK,\n    typeLabel: new DiskWrapper(disk).getType().toString(),\n    value: disk,\n  }));\n  const transformedNics = nics.map((nic) => ({\n    type: DeviceType.NIC,\n    typeLabel: 'NIC',\n    value: nic,\n  }));\n\n  return [...transformedDisks, ...transformedNics];\n};\n\nexport const getDevices = (vmLikeEntity: VMLikeEntityKind): BootableDeviceType[] => {\n  const vm = asVM(vmLikeEntity);\n  return transformDevices(getDisks(vm), getInterfaces(vm));\n};\n\nexport const getBootableDevices = (vmLikeEntity: VMLikeEntityKind): BootableDeviceType[] => {\n  const vm = asVM(vmLikeEntity);\n  return transformDevices(getBootableDisks(vm), getInterfaces(vm));\n};\n\nexport const getSelectedBootableDevices = (vm: VMLikeEntityKind): BootableDeviceType[] => {\n  const devices = getBootableDevices(vm).filter((device) => device.value.bootOrder);\n  return [...devices];\n};\n\nexport const getBootableDevicesInOrder = (vm: VMLikeEntityKind): BootableDeviceType[] =>\n  _.sortBy(getSelectedBootableDevices(vm), 'value.bootOrder');\n\nexport const getNonBootableDevices = (vm: VMLikeEntityKind): BootableDeviceType[] => {\n  const devices = getBootableDevices(vm).filter((device) => !device.value.bootOrder);\n  return [...devices];\n};\n","export * from './combined';\nexport * from './devices';\nexport * from './nic';\nexport * from './selectors';\nexport * from './volume';\nexport * from './vmlike';\nexport * from './cpu';\n","import * as _ from 'lodash';\n\nexport const getNicBus = (nic, defaultValue?): string => _.get(nic, 'model', defaultValue);\n","import * as _ from 'lodash';\nimport { getName } from '@console/shared/src/selectors/common';\nimport { createBasicLookup } from '@console/shared/src/utils/utils';\nimport {\n  TEMPLATE_FLAVOR_LABEL,\n  TEMPLATE_OS_LABEL,\n  TEMPLATE_OS_NAME_ANNOTATION,\n  TEMPLATE_WORKLOAD_LABEL,\n} from '../../constants/vm';\nimport { CPURaw, V1Network, V1NetworkInterface, VMIKind, VMKind } from '../../types';\nimport { findKeySuffixValue, getSimpleName, getValueByPrefix } from '../utils';\nimport { getAnnotations, getLabels } from '../selectors';\nimport { NetworkWrapper } from '../../k8s/wrapper/vm/network-wrapper';\nimport { getDataVolumeStorageClassName, getDataVolumeStorageSize } from '../dv/selectors';\nimport { V1Disk } from '../../types/vm/disk/V1Disk';\nimport {\n  getVolumeCloudInitNoCloud,\n  getVolumeContainerImage,\n  getVolumePersistentVolumeClaimName,\n} from './volume';\nimport { getVMIDisks } from '../vmi/basic';\nimport { VirtualMachineModel } from '../../models';\nimport { V1Volume } from '../../types/vm/disk/V1Volume';\nimport { VMGenericLikeEntityKind, VMILikeEntityKind } from '../../types/vmLike';\nimport { RunStrategy, StateChangeRequest } from '../../constants/vm/vm';\n\nexport const getMemory = (vm: VMKind) =>\n  _.get(vm, 'spec.template.spec.domain.resources.requests.memory');\nexport const getCPU = (vm: VMKind): CPURaw => _.get(vm, 'spec.template.spec.domain.cpu');\nexport const getResourcesRequestsCPUCount = (vm: VMKind): string =>\n  vm?.spec?.template?.spec?.domain?.resources?.requests?.cpu;\nexport const getResourcesLimitsCPUCount = (vm: VMKind): string =>\n  vm?.spec?.template?.spec?.domain?.resources?.limits?.cpu;\nexport const isDedicatedCPUPlacement = (vm: VMKind) =>\n  _.get(vm, 'spec.template.spec.domain.cpu.dedicatedCpuPlacement');\nexport const getDisks = (vm: VMKind, defaultValue: V1Disk[] = []): V1Disk[] =>\n  _.get(vm, 'spec.template.spec.domain.devices.disks') == null\n    ? defaultValue\n    : vm.spec.template.spec.domain.devices.disks;\n\nexport const getInterfaces = (\n  vm: VMKind,\n  defaultValue: V1NetworkInterface[] = [],\n): V1NetworkInterface[] =>\n  _.get(vm, 'spec.template.spec.domain.devices.interfaces') == null\n    ? defaultValue\n    : vm.spec.template.spec.domain.devices.interfaces;\n\nexport const getNetworks = (vm: VMKind, defaultValue: V1Network[] = []): V1Network[] =>\n  _.get(vm, 'spec.template.spec.networks') == null ? defaultValue : vm.spec.template.spec.networks;\nexport const getVolumes = (vm: VMKind, defaultValue: V1Volume[] = []): V1Volume[] =>\n  _.get(vm, 'spec.template.spec.volumes') == null ? defaultValue : vm.spec.template.spec.volumes;\nexport const getDataVolumeTemplates = (vm: VMKind, defaultValue = []) =>\n  _.get(vm, 'spec.dataVolumeTemplates') == null ? defaultValue : vm.spec.dataVolumeTemplates;\n\nexport const getConfigMapVolumes = (vm: VMKind, defaultValue: V1Volume[] = []): V1Volume[] =>\n  getVolumes(vm, defaultValue).filter((vol) => Object.keys(vol).includes('configMap'));\n\nexport const getSecretVolumes = (vm: VMKind, defaultValue: V1Volume[] = []): V1Volume[] =>\n  getVolumes(vm, defaultValue).filter((vol) => Object.keys(vol).includes('secret'));\n\nexport const getServiceAccountVolumes = (vm: VMKind, defaultValue: V1Volume[] = []): V1Volume[] =>\n  getVolumes(vm, defaultValue).filter((vol) => Object.keys(vol).includes('serviceAccount'));\n\nexport const getEnvDiskVolumes = (vm: VMKind, defaultValue: V1Volume[] = []): V1Volume[] => [\n  ...getConfigMapVolumes(vm, defaultValue),\n  ...getSecretVolumes(vm, defaultValue),\n  ...getServiceAccountVolumes(vm, defaultValue),\n];\n\nexport const getConfigMapDisks = (vm: VMKind, defaultValue: V1Disk[] = []): V1Disk[] =>\n  getDisks(vm, defaultValue).filter(\n    (disk) => !!getConfigMapVolumes(vm).find((vol) => vol.name === disk.name),\n  );\n\nexport const getSecretDisks = (vm: VMKind, defaultValue: V1Disk[] = []): V1Disk[] =>\n  getDisks(vm, defaultValue).filter(\n    (disk) => !!getSecretVolumes(vm).find((vol) => vol.name === disk.name),\n  );\n\nexport const getServiceAccountDisks = (vm: VMKind, defaultValue: V1Disk[] = []): V1Disk[] =>\n  getDisks(vm, defaultValue).filter(\n    (disk) => !!getServiceAccountVolumes(vm).find((vol) => vol.name === disk.name),\n  );\n\nexport const getEnvDisks = (vm: VMKind, defaultValue: V1Disk[] = []): V1Disk[] => [\n  ...getConfigMapDisks(vm, defaultValue),\n  ...getSecretDisks(vm, defaultValue),\n  ...getServiceAccountDisks(vm, defaultValue),\n];\n\nexport const getBootableDisks = (vm: VMKind, defaultValue: V1Disk[] = []): V1Disk[] =>\n  getDisks(vm, defaultValue).filter(\n    (disk) => !getEnvDisks(vm).find((envDisk) => envDisk.name === disk.name),\n  );\n\nexport const getNonBootableDisks = (vm: VMKind, defaultValue: V1Disk[] = []): V1Disk[] =>\n  getDisks(vm, defaultValue).filter((disk) =>\n    getEnvDisks(vm).find((envDisk) => envDisk.name === disk.name),\n  );\n\nexport const getOperatingSystem = (vmLike: VMGenericLikeEntityKind): string =>\n  findKeySuffixValue(getLabels(vmLike), TEMPLATE_OS_LABEL);\nexport const getOperatingSystemName = (vmLike: VMGenericLikeEntityKind) =>\n  getValueByPrefix(\n    getAnnotations(vmLike),\n    `${TEMPLATE_OS_NAME_ANNOTATION}/${getOperatingSystem(vmLike)}`,\n  );\n\nexport const getWorkloadProfile = (vm: VMGenericLikeEntityKind) =>\n  findKeySuffixValue(getLabels(vm), TEMPLATE_WORKLOAD_LABEL);\nexport const getFlavor = (vmLike: VMGenericLikeEntityKind) =>\n  findKeySuffixValue(getLabels(vmLike), TEMPLATE_FLAVOR_LABEL);\n\nexport const isVMReady = (vm: VMKind) => !!vm?.status?.ready;\n\nexport const isVMCreated = (vm: VMKind) => !!vm?.status?.created;\n\nexport const isVMExpectedRunning = (vm: VMKind) => {\n  if (!vm?.spec) {\n    return false;\n  }\n  const { running, runStrategy } = vm.spec;\n\n  if (running != null) {\n    return running;\n  }\n\n  if (runStrategy != null) {\n    let changeRequests;\n    switch (runStrategy as RunStrategy) {\n      case RunStrategy.Halted:\n        return false;\n      case RunStrategy.Always:\n      case RunStrategy.RerunOnFailure:\n        return true;\n      case RunStrategy.Manual:\n      default:\n        changeRequests = new Set(\n          (vm.status?.stateChangeRequests || []).map((chRequest) => chRequest?.action),\n        );\n\n        if (changeRequests.has(StateChangeRequest.Stop)) {\n          return false;\n        }\n        if (changeRequests.has(StateChangeRequest.Start)) {\n          return true;\n        }\n\n        return isVMCreated(vm); // if there is no change request we can assume created is representing running (current and expected)\n    }\n  }\n  return false;\n};\n\nexport const isVMRunningOrExpectedRunning = (vm: VMKind) => {\n  return isVMCreated(vm) || isVMExpectedRunning(vm);\n};\n\nexport const getUsedNetworks = (vm: VMKind): NetworkWrapper[] => {\n  const interfaces = getInterfaces(vm);\n  const networkLookup = createBasicLookup<any>(getNetworks(vm), getSimpleName);\n\n  return interfaces\n    .map((i) => new NetworkWrapper(networkLookup[i.name]))\n    .filter((i) => i.getType());\n};\n\nexport const getCloudInitVolume = (vm: VMKind) => {\n  const cloudInitVolume = getVolumes(vm).find(getVolumeCloudInitNoCloud);\n\n  if (cloudInitVolume) {\n    // make sure volume is used by disk\n    const disks = getDisks(vm);\n    if (disks.find((disk) => disk.name === cloudInitVolume.name)) {\n      return cloudInitVolume;\n    }\n  }\n  return null;\n};\n\nexport const hasAutoAttachPodInterface = (vm: VMKind, defaultValue = false) =>\n  _.get(vm, 'spec.template.spec.domain.devices.autoattachPodInterface', defaultValue);\n\nexport const getCDRoms = (vm: VMILikeEntityKind) =>\n  vm.kind === VirtualMachineModel.kind\n    ? getDisks(vm as VMKind).filter((device) => !!device.cdrom)\n    : getVMIDisks(vm as VMIKind).filter((device) => !!device.cdrom);\n\nexport const getContainerImageByDisk = (vm: VMKind, name: string) =>\n  getVolumeContainerImage(getVolumes(vm).find((vol) => name === vol.name));\n\nexport const getPVCSourceByDisk = (vm: VMKind, diskName: string) =>\n  getVolumePersistentVolumeClaimName(getVolumes(vm).find((vol) => vol.name === diskName));\n\nexport const getURLSourceByDisk = (vm: VMKind, name: string) => {\n  const dvTemplate = getDataVolumeTemplates(vm).find((vol) => getName(vol).includes(name));\n  return (\n    dvTemplate &&\n    dvTemplate.spec &&\n    dvTemplate.spec.source &&\n    dvTemplate.spec.source.http &&\n    dvTemplate.spec.source.http.url\n  );\n};\n\nexport const getStorageSizeByDisk = (vm: VMKind, diskName: string) =>\n  getDataVolumeStorageSize(\n    getDataVolumeTemplates(vm).find((vol) => getName(vol).includes(diskName)),\n  );\n\nexport const getStorageClassNameByDisk = (vm: VMKind, diskName: string) =>\n  getDataVolumeStorageClassName(\n    getDataVolumeTemplates(vm).find((vol) => getName(vol).includes(diskName)),\n  );\n\nexport const getNodeSelector = (vm: VMKind) => vm?.spec?.template?.spec?.nodeSelector;\n\nexport const getTolerations = (vm: VMKind) => vm?.spec?.template?.spec?.tolerations;\n\nexport const getAffinity = (vm: VMKind) => vm?.spec?.template?.spec?.affinity;\n","import { K8sKind } from '@console/internal/module/k8s';\nimport { TemplateModel } from '@console/internal/models';\nimport { VMKind } from '../../types/vm';\nimport { VMGenericLikeEntityKind } from '../../types/vmLike';\nimport { VirtualMachineInstanceModel, VirtualMachineModel } from '../../models';\nimport { selectVM } from '../vm-template/basic';\nimport { isVM, isVMI } from '../check-type';\n\nexport const getVMLikeModel = (vmLikeEntity: VMGenericLikeEntityKind): K8sKind =>\n  isVM(vmLikeEntity)\n    ? VirtualMachineModel\n    : isVMI(vmLikeEntity)\n    ? VirtualMachineInstanceModel\n    : TemplateModel;\n\nexport const asVM = (vmLikeEntity: VMGenericLikeEntityKind): VMKind => {\n  if (!vmLikeEntity || isVMI(vmLikeEntity)) {\n    return null;\n  }\n\n  return isVM(vmLikeEntity) ? vmLikeEntity : selectVM(vmLikeEntity);\n};\n","import * as _ from 'lodash';\nimport { WINTOOLS_CONTAINER_NAMES } from '../../components/modals/cdrom-vm-modal/constants';\n\nexport const getVolumePersistentVolumeClaimName = (volume) =>\n  _.get(volume, 'persistentVolumeClaim.claimName');\nexport const getVolumeDataVolumeName = (volume) => _.get(volume, 'dataVolume.name');\n\nexport const getVolumeCloudInitNoCloud = (volume) => volume && volume.cloudInitNoCloud;\n\nexport const getVolumeContainerImage = (volume) =>\n  volume && volume.containerDisk && volume.containerDisk.image;\n\nexport const isWinToolsImage = (image) =>\n  Object.values(WINTOOLS_CONTAINER_NAMES).find((winTool) => image && image.startsWith(winTool));\n","import { getNamespace } from '@console/shared/src/selectors';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { getMigrationVMIName, isMigrating } from './selectors';\n\nexport const findVMIMigration = (\n  name: string,\n  namespace: string,\n  migrations?: K8sResourceKind[],\n) => {\n  if (!migrations) {\n    return null;\n  }\n\n  return migrations\n    .filter((m) => getNamespace(m) === namespace && getMigrationVMIName(m) === name)\n    .find(isMigrating);\n};\n","export * from './combined';\nexport * from './selectors';\n","import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\n\nexport const getMigrationStatusPhase = (value: K8sResourceKind) =>\n  _.get(value, 'status.phase') as K8sResourceKind['status']['phase'];\n\nexport const hasMigrationStatus = (migration: K8sResourceKind, status) => {\n  const phase = getMigrationStatusPhase(migration);\n  return phase && phase.toLowerCase() === status.toLowerCase();\n};\n\nexport const isMigrating = (migration: K8sResourceKind) =>\n  migration &&\n  !hasMigrationStatus(migration, 'succeeded') &&\n  !hasMigrationStatus(migration, 'failed');\n\nexport const getMigrationVMIName = (migration: K8sResourceKind) => _.get(migration, 'spec.vmiName');\n","import * as _ from 'lodash';\nimport { V1Network, V1NetworkInterface, VMIKind } from '../../types';\nimport { V1Disk } from '../../types/vm/disk/V1Disk';\nimport { V1Volume } from '../../types/vm/disk/V1Volume';\n\nexport const getVMIDisks = (vmi: VMIKind, defaultValue: V1Disk[] = []): V1Disk[] =>\n  vmi && vmi.spec && vmi.spec.domain && vmi.spec.domain.devices && vmi.spec.domain.devices.disks\n    ? vmi.spec.domain.devices.disks\n    : defaultValue;\n\nexport const getVMINetworks = (vmi: VMIKind, defaultValue: V1Network[] = []): V1Network[] =>\n  vmi && vmi.spec && vmi.spec.networks ? vmi.spec.networks : defaultValue;\n\nexport const getVMIVolumes = (vmi: VMIKind, defaultValue: V1Volume[] = []): V1Volume[] =>\n  vmi && vmi.spec && vmi.spec.volumes ? vmi.spec.volumes : defaultValue;\n\nexport const getVMIInterfaces = (\n  vmi: VMIKind,\n  defaultValue: V1NetworkInterface[] = [],\n): V1NetworkInterface[] =>\n  _.has(vmi, 'spec.domain.devices.interfaces') ? vmi.spec.domain.devices.interfaces : defaultValue;\n\nexport const getVMIConditionsByType = (\n  vmi: VMIKind,\n  condType: string,\n): VMIKind['status']['conditions'] => {\n  const conditions = vmi && vmi.status && vmi.status.conditions;\n  return (conditions || []).filter((cond) => cond.type === condType);\n};\n\nexport const isVMIRunning = (vmi: VMIKind) => vmi && vmi.status && vmi.status.phase === 'Running';\n\nexport const getVMIAvailableStatusInterfaces = (vmi: VMIKind) =>\n  (vmi && vmi.status && vmi.status.interfaces) || [];\n\nexport const getVMINodeName = (vmi: VMIKind) => vmi && vmi.status && vmi.status.nodeName;\n\nexport const isVMIPaused = (vmi: VMIKind): boolean =>\n  getVMIConditionsByType(vmi, 'Paused').length > 0;\n\nexport const getVMINodeSelector = (vmi: VMIKind) => vmi?.spec?.nodeSelector;\n\nexport const getVMITolerations = (vmi: VMIKind) => vmi?.spec?.tolerations;\n\nexport const getVMIAffinity = (vmi: VMIKind) => vmi?.spec?.affinity;\n","export const POD_STATUS_NOT_SCHEDULABLE = 'POD_NOT_SCHEDULABLE';\nexport const POD_STATUS_CONTAINER_FAILING = 'POD_CONTAINER_FAILING';\nexport const POD_STATUS_NOT_READY = 'POD_NOT_READY';\n\nexport const POD_STATUS_FAILED = 'POD_FAILED';\nexport const POD_STATUS_CRASHLOOP_BACKOFF = 'POD_CRASHLOOP_BACKOFF';\nexport const POD_STATUS_UNKNOWN = 'POD_STATUS_UNKNOWN';\n\nexport const POD_STATUS_PENDING = 'POD_STATUS_PENDING';\nexport const POD_STATUS_COMPLETED = 'POD_STATUS_COMPLETED';\nexport const POD_STATUS_SUCCEEDED = 'POD_STATUS_SUCCEEDED';\nexport const POD_STATUS_RUNNING = 'POD_STATUS_RUNNING';\n\nexport const POD_STATUS_ALL_ERROR = [\n  POD_STATUS_NOT_SCHEDULABLE,\n  POD_STATUS_CONTAINER_FAILING,\n  POD_STATUS_FAILED,\n  POD_STATUS_CRASHLOOP_BACKOFF,\n  POD_STATUS_UNKNOWN,\n];\n\nexport const POD_STATUS_ALL_PROGRESS = [POD_STATUS_PENDING];\nexport const POD_STATUS_ALL_READY = [\n  POD_STATUS_RUNNING,\n  POD_STATUS_COMPLETED,\n  POD_STATUS_SUCCEEDED,\n];\n\nexport const POD_PHASE_SUCEEDED = 'Succeeded';\nexport const POD_PHASE_PENDING = 'Pending';\n","import { PodKind } from '@console/internal/module/k8s';\nimport {\n  isPodSchedulable,\n  getPodStatusPhase,\n  findPodFalseStatusConditionMessage,\n} from '../../selectors/pod/selectors';\nimport {\n  getContainerStatusReason,\n  findFailingContainerStatus,\n} from '../../selectors/pod/container';\nimport {\n  POD_STATUS_NOT_SCHEDULABLE,\n  POD_STATUS_CONTAINER_FAILING,\n  POD_STATUS_NOT_READY,\n  POD_STATUS_FAILED,\n  POD_STATUS_CRASHLOOP_BACKOFF,\n  POD_STATUS_PENDING,\n  POD_STATUS_UNKNOWN,\n  POD_STATUS_COMPLETED,\n  POD_STATUS_RUNNING,\n  POD_STATUS_SUCCEEDED,\n} from './constants';\nimport { Status } from '..';\n\nconst errorStatusMapper = {\n  Failed: POD_STATUS_FAILED,\n  CrashLoopBackOff: POD_STATUS_CRASHLOOP_BACKOFF,\n  Unknown: POD_STATUS_UNKNOWN,\n};\n\nconst okStatusMapper = {\n  Pending: POD_STATUS_PENDING,\n  Running: POD_STATUS_RUNNING,\n  Completed: POD_STATUS_COMPLETED,\n  Succeeded: POD_STATUS_SUCCEEDED,\n};\n\nconst isNotSchedulable = (pod: PodKind): Status => {\n  if (!isPodSchedulable(pod)) {\n    return {\n      status: POD_STATUS_NOT_SCHEDULABLE,\n      message: 'Pod scheduling failed.',\n    };\n  }\n  return null;\n};\n\nconst hasErrorStatus = (pod: PodKind): Status => {\n  const status = errorStatusMapper[getPodStatusPhase(pod)];\n\n  if (status) {\n    return {\n      status,\n      message: getContainerStatusReason(findFailingContainerStatus(pod)),\n    };\n  }\n  return null;\n};\n\nconst isContainerFailing = (pod: PodKind): Status => {\n  const failingContainer = findFailingContainerStatus(pod);\n  if (failingContainer) {\n    return {\n      status: POD_STATUS_CONTAINER_FAILING,\n      message: getContainerStatusReason(failingContainer),\n    };\n  }\n  return null;\n};\nconst isNotReady = (pod: PodKind): Status => {\n  const message = findPodFalseStatusConditionMessage(pod);\n  if (message) {\n    return {\n      status: POD_STATUS_NOT_READY,\n      message,\n    };\n  }\n  return null;\n};\n\nconst hasOkStatus = (pod: PodKind): Status => {\n  const status = okStatusMapper[getPodStatusPhase(pod)];\n\n  if (status) {\n    return {\n      status,\n    };\n  }\n  return null;\n};\n\nexport const getPodStatus = (pod: PodKind) =>\n  isNotSchedulable(pod) ||\n  hasErrorStatus(pod) ||\n  isContainerFailing(pod) ||\n  isNotReady(pod) ||\n  hasOkStatus(pod) || { status: POD_STATUS_UNKNOWN };\n\nexport const getSimplePodStatus = (pod: PodKind) => getPodStatus(pod).status;\n","import { V2VVMImportStatus } from '../../constants/v2v-import/ovirt/v2v-vm-import-status';\nimport { VMImportKind } from '../../types/vm-import/ovirt/vm-import';\nimport { StatusBundle } from '../../types/status-bundle';\n\nexport enum VirtualMachineImportConditionType {\n  Succeeded = 'Succeeded',\n  Valid = 'Valid',\n  MappingRulesVerified = 'MappingRulesVerified',\n  Processing = 'Processing',\n}\n\nexport interface VMImportStatusBundle extends StatusBundle<V2VVMImportStatus> {\n  vmImport?: VMImportKind;\n}\n","import * as _ from 'lodash';\nimport { getAnnotations } from '@console/shared/src/selectors/common'; // do not import just from shared - causes cycles\nimport { K8sResourceCondition } from '@console/internal/module/k8s';\nimport { VMImportKind } from '../../types/vm-import/ovirt/vm-import';\nimport { parseNumber } from '../../utils';\nimport {\n  getStatusConditionOfType,\n  getStatusConditions,\n  isConditionStatusTrue,\n} from '../../selectors/selectors';\nimport { VirtualMachineImportConditionType, VMImportStatusBundle } from './types';\nimport { VM_IMPORT_PROGRESS_ANNOTATION } from '../../constants/v2v-import/constants';\nimport { V2VVMImportStatus } from '../../constants/v2v-import/ovirt/v2v-vm-import-status';\nimport { IMPORTING_ERROR_OVIRT_MESSAGE, IMPORTING_OVIRT_MESSAGE } from '../../strings/vm/status';\nimport { VMStatus as VMStatusEnum } from '../../constants/vm/vm-status';\nimport { VMStatusBundle } from '../vm/types';\n\nconst isV2VVMImportConversion = (vmImport?: VMImportKind): VMImportStatusBundle => {\n  if (!vmImport) {\n    return null;\n  }\n\n  const statusConditions = getStatusConditions(vmImport);\n\n  if (_.isEmpty(statusConditions)) {\n    return {\n      status: V2VVMImportStatus.PENDING,\n    };\n  }\n\n  const failedFinalStateCondType: VirtualMachineImportConditionType = [\n    VirtualMachineImportConditionType.Succeeded,\n    VirtualMachineImportConditionType.MappingRulesVerified,\n    VirtualMachineImportConditionType.Valid,\n  ].find((type) => {\n    const condition = getStatusConditionOfType(vmImport, type);\n    return condition && !isConditionStatusTrue(condition);\n  });\n\n  if (failedFinalStateCondType) {\n    const failedCond: K8sResourceCondition = getStatusConditionOfType(\n      vmImport,\n      failedFinalStateCondType,\n    );\n\n    return {\n      status: V2VVMImportStatus.ERROR,\n      message: IMPORTING_ERROR_OVIRT_MESSAGE,\n      detailedMessage: failedCond && `${failedCond.reason}: ${failedCond.message}`,\n    };\n  }\n\n  const suceededCond: K8sResourceCondition = getStatusConditionOfType(\n    vmImport,\n    VirtualMachineImportConditionType.Succeeded,\n  );\n\n  if (suceededCond) {\n    // must be 'True' due to the check above\n    return {\n      status: V2VVMImportStatus.COMPLETE,\n      detailedMessage: `${suceededCond.reason}: ${suceededCond.message}`,\n    };\n  }\n\n  const progressingCondType: VirtualMachineImportConditionType = [\n    VirtualMachineImportConditionType.Processing,\n    VirtualMachineImportConditionType.Valid,\n    VirtualMachineImportConditionType.MappingRulesVerified,\n  ].find((type) => isConditionStatusTrue(getStatusConditionOfType(vmImport, type)));\n\n  const progressingCond: K8sResourceCondition = progressingCondType\n    ? getStatusConditionOfType(vmImport, progressingCondType)\n    : statusConditions[0];\n\n  const progress = parseNumber(getAnnotations(vmImport, {})[VM_IMPORT_PROGRESS_ANNOTATION], 0);\n\n  return {\n    status: V2VVMImportStatus.IN_PROGRESS,\n    message: IMPORTING_OVIRT_MESSAGE,\n    detailedMessage: progressingCond && `${progressingCond.reason}: ${progressingCond.message}`,\n    progress,\n  };\n};\n\ntype Parameters = {\n  vmImport?: VMImportKind;\n};\n\nexport const getVMImportStatus = ({ vmImport }: Parameters): VMImportStatusBundle => {\n  const bundle = isV2VVMImportConversion(vmImport) || {\n    status: V2VVMImportStatus.UNKNOWN,\n  };\n  bundle.vmImport = vmImport;\n  return bundle;\n};\n\nexport const getVMImportStatusAsVMStatus = ({\n  vmImport,\n}: Parameters): VMStatusBundle & { vmImportStatus?: V2VVMImportStatus } => {\n  const vmImportStatusBundle = getVMImportStatus({ vmImport });\n  return {\n    ...vmImportStatusBundle,\n    vmImportStatus: vmImportStatusBundle.status,\n    status: VMStatusEnum.fromV2VImportStatus(vmImportStatusBundle.status) || VMStatusEnum.UNKNOWN, // no Completed status in VM list\n  };\n};\n","import { K8sResourceKind, PodKind } from '@console/internal/module/k8s';\nimport { createBasicLookup } from '@console/shared/src/utils/utils';\nimport { getName, getNamespace, getOwnerReferences } from '@console/shared/src/selectors/common'; // do not import just from shared - causes cycles\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\nimport {\n  buildOwnerReference,\n  buildOwnerReferenceForModel,\n  parseNumber,\n  parsePercentage,\n} from '../../utils';\nimport {\n  getAnnotationKeySuffix,\n  getLabelValue,\n  getStatusConditionOfType,\n  getStatusPhase,\n} from '../../selectors/selectors';\nimport {\n  findVMIMigration,\n  getMigrationStatusPhase,\n  isMigrating,\n} from '../../selectors/vmi-migration';\nimport { findVMIPod, getPodStatusPhase, getVMImporterPods } from '../../selectors/pod/selectors';\nimport { findConversionPod, isVMCreated, isVMExpectedRunning } from '../../selectors/vm';\nimport { getPodStatus } from '../pod/pod';\nimport {\n  POD_PHASE_PENDING,\n  POD_PHASE_SUCEEDED,\n  POD_STATUS_ALL_ERROR,\n  POD_STATUS_ALL_READY,\n  POD_STATUS_NOT_SCHEDULABLE,\n} from '../pod/constants';\nimport { VMIKind, VMKind } from '../../types';\nimport { isVMIPaused } from '../../selectors/vmi/basic';\nimport { VMImportKind } from '../../types/vm-import/ovirt/vm-import';\nimport { VirtualMachineImportModel } from '../../models';\nimport { getVMImportStatus } from '../vm-import/vm-import-status';\nimport { VMStatus } from '../../constants/vm/vm-status';\nimport { VMStatusBundle } from './types';\nimport {\n  IMPORT_CDI_PENDING_MESSAGE,\n  IMPORTING_CDI_ERROR_MESSAGE,\n  IMPORTING_CDI_MESSAGE,\n  IMPORTING_ERROR_VMWARE_MESSAGE,\n  IMPORTING_VMWARE_MESSAGE,\n  STARTING_MESSAGE,\n  VMI_WAITING_MESSAGE,\n} from '../../strings/vm/status';\nimport { CDI_KUBEVIRT_IO, STORAGE_IMPORT_PVC_NAME } from '../../constants';\nimport { CONVERSION_PROGRESS_ANNOTATION } from '../../constants/v2v';\nimport { PAUSED_VM_MODAL_MESSAGE } from '../../constants/vm';\nimport { V1alpha1DataVolume } from '../../types/vm/disk/V1alpha1DataVolume';\nimport { VMIPhase } from '../../constants/vmi/phase';\n\nconst isPaused = (vmi: VMIKind): VMStatusBundle =>\n  isVMIPaused(vmi) ? { status: VMStatus.PAUSED, message: PAUSED_VM_MODAL_MESSAGE } : null;\n\nconst isV2VVMWareConversion = (vm: VMKind, pods?: PodKind[]): VMStatusBundle => {\n  if (!vm || !pods) {\n    return null;\n  }\n\n  const conversionPod = findConversionPod(vm, pods);\n  const podPhase = getPodStatusPhase(conversionPod);\n  if (conversionPod && podPhase !== POD_PHASE_SUCEEDED) {\n    const conversionPodStatus = getPodStatus(conversionPod);\n    if (podPhase === POD_PHASE_PENDING) {\n      return {\n        ...conversionPodStatus,\n        status: VMStatus.V2V_CONVERSION_PENDING,\n        message: IMPORTING_VMWARE_MESSAGE,\n        detailedMessage: conversionPodStatus.message,\n        pod: conversionPod,\n        progress: null,\n      };\n    }\n    if (POD_STATUS_ALL_ERROR.includes(conversionPodStatus.status)) {\n      return {\n        ...conversionPodStatus,\n        status: VMStatus.V2V_CONVERSION_ERROR,\n        message: IMPORTING_ERROR_VMWARE_MESSAGE,\n        detailedMessage: conversionPodStatus.message,\n        pod: conversionPod,\n        progress: null,\n      };\n    }\n    const progress = parseNumber(\n      getAnnotationKeySuffix(conversionPod, CONVERSION_PROGRESS_ANNOTATION),\n      0,\n    );\n    return {\n      ...conversionPodStatus,\n      status: VMStatus.V2V_CONVERSION_IN_PROGRESS,\n      message: IMPORTING_VMWARE_MESSAGE,\n      pod: conversionPod,\n      progress,\n    };\n  }\n  return null;\n};\n\nconst isV2VVMImportConversion = (vm: VMKind, vmImports?: VMImportKind[]): VMStatusBundle => {\n  const vmImportOwnerReference = (getOwnerReferences(vm) || []).find((reference) =>\n    compareOwnerReference(reference, buildOwnerReferenceForModel(VirtualMachineImportModel), true),\n  );\n  if (!vmImportOwnerReference || !vmImports) {\n    return null;\n  }\n  const vmImport = vmImports.find((i) =>\n    compareOwnerReference(buildOwnerReference(i), vmImportOwnerReference),\n  );\n\n  const statusBundle = getVMImportStatus({ vmImport });\n\n  if (statusBundle.status.isCompleted() || statusBundle.status.isUnknown()) {\n    return null;\n  }\n\n  return {\n    ...statusBundle,\n    status: VMStatus.fromV2VImportStatus(statusBundle.status),\n  };\n};\n\nconst isBeingMigrated = (\n  vm: VMKind,\n  vmi: VMIKind,\n  migrations?: K8sResourceKind[],\n): VMStatusBundle => {\n  const name = getName(vm || vmi);\n  const namespace = getNamespace(vm || vmi);\n\n  const migration = findVMIMigration(name, namespace, migrations);\n  if (isMigrating(migration)) {\n    return {\n      status: VMStatus.MIGRATING,\n      migration,\n      detailedMessage: getMigrationStatusPhase(migration),\n    };\n  }\n  return null;\n};\n\nconst isBeingImported = (\n  vm: VMKind,\n  pods?: PodKind[],\n  dataVolumes?: V1alpha1DataVolume[],\n): VMStatusBundle => {\n  const importerPods = getVMImporterPods(vm, pods);\n  if (importerPods && importerPods.length > 0 && !isVMCreated(vm)) {\n    const dvLookup = createBasicLookup(dataVolumes, getName);\n    const importerPodsStatuses = importerPods.map((pod) => {\n      const podStatus = getPodStatus(pod);\n      const dvName = getLabelValue(pod, `${CDI_KUBEVIRT_IO}/${STORAGE_IMPORT_PVC_NAME}`);\n      const dataVolume = dvLookup[dvName];\n\n      if (POD_STATUS_ALL_ERROR.includes(podStatus.status)) {\n        let status = VMStatus.CDI_IMPORT_ERROR;\n        if (\n          podStatus.status === POD_STATUS_NOT_SCHEDULABLE &&\n          getPodStatusPhase(pod) === POD_PHASE_PENDING\n        ) {\n          status = VMStatus.CDI_IMPORT_PENDING;\n        }\n\n        return {\n          message: podStatus.message,\n          status,\n          progress: null,\n          dataVolume,\n          pod,\n        };\n      }\n      return {\n        status: VMStatus.CDI_IMPORTING,\n        message: podStatus.message,\n        pod,\n        dataVolume,\n        progress: parsePercentage(dataVolume?.status?.progress, 0),\n      };\n    });\n    const importStatus =\n      importerPodsStatuses.find(({ status }) => status.isError()) ||\n      importerPodsStatuses.find(({ status }) => status.isPending()) ||\n      importerPodsStatuses[0];\n    const resultStatus = importStatus?.status || VMStatus.CDI_IMPORT_PENDING;\n    return {\n      status: resultStatus,\n      message: resultStatus.isError()\n        ? IMPORTING_CDI_ERROR_MESSAGE\n        : resultStatus.isPending()\n        ? IMPORT_CDI_PENDING_MESSAGE\n        : IMPORTING_CDI_MESSAGE,\n      importerPodsStatuses,\n    };\n  }\n  return null;\n};\n\nconst isVMError = (vm: VMKind): VMStatusBundle => {\n  const vmFailureCond = getStatusConditionOfType(vm, 'Failure');\n  if (vmFailureCond) {\n    return {\n      status: VMStatus.VM_ERROR,\n      detailedMessage: vmFailureCond.message,\n    };\n  }\n\n  return null;\n};\n\nconst isBeingStopped = (vm: VMKind): VMStatusBundle => {\n  if (vm && !isVMExpectedRunning(vm) && isVMCreated(vm)) {\n    return {\n      status: VMStatus.STOPPING,\n    };\n  }\n\n  return null;\n};\n\nconst isOff = (vm: VMKind): VMStatusBundle => {\n  return vm && !isVMExpectedRunning(vm) ? { status: VMStatus.OFF } : null;\n};\n\nconst isError = (vm: VMKind, vmi: VMIKind, launcherPod: PodKind): VMStatusBundle => {\n  const vmiFailureCond = getStatusConditionOfType(vmi, 'Failure');\n  if (vmiFailureCond) {\n    return { status: VMStatus.VMI_ERROR, detailedMessage: vmiFailureCond.message };\n  }\n\n  if ((vmi || isVMCreated(vm)) && launcherPod) {\n    const podStatus = getPodStatus(launcherPod);\n    if (POD_STATUS_ALL_ERROR.includes(podStatus.status)) {\n      return {\n        ...podStatus,\n        status: VMStatus.POD_ERROR,\n        pod: launcherPod,\n      };\n    }\n  }\n  return null;\n};\n\nconst isRunning = (vmi: VMIKind): VMStatusBundle => {\n  if (getStatusPhase(vmi) === VMIPhase.Running) {\n    return {\n      status: VMStatus.RUNNING,\n    };\n  }\n  return null;\n};\n\nconst isStarting = (vm: VMKind, launcherPod: PodKind = null): VMStatusBundle => {\n  if (vm && isVMExpectedRunning(vm) && isVMCreated(vm)) {\n    // created but not yet ready\n    if (launcherPod) {\n      const podStatus = getPodStatus(launcherPod);\n      if (!POD_STATUS_ALL_READY.includes(podStatus.status)) {\n        return {\n          ...podStatus,\n          status: VMStatus.STARTING,\n          message: STARTING_MESSAGE,\n          detailedMessage: podStatus.message,\n          pod: launcherPod,\n        };\n      }\n    }\n    return { status: VMStatus.STARTING, message: STARTING_MESSAGE, pod: launcherPod };\n  }\n  return null;\n};\n\nconst isWaitingForVMI = (vm: VMKind): VMStatusBundle => {\n  if (vm && isVMExpectedRunning(vm) && !isVMCreated(vm)) {\n    return { status: VMStatus.VMI_WAITING, message: VMI_WAITING_MESSAGE };\n  }\n  return null;\n};\n\nexport const getVMStatus = ({\n  vm,\n  vmi,\n  pods,\n  migrations,\n  dataVolumes,\n  vmImports,\n}: {\n  vm?: VMKind;\n  vmi?: VMIKind;\n  pods?: PodKind[];\n  dataVolumes?: V1alpha1DataVolume[];\n  migrations?: K8sResourceKind[];\n  vmImports?: VMImportKind[];\n}): VMStatusBundle => {\n  const launcherPod = findVMIPod(vmi, pods);\n\n  return (\n    isPaused(vmi) ||\n    isV2VVMWareConversion(vm, pods) || // these statuses must precede isRunning() because they do not rely on ready vms\n    isV2VVMImportConversion(vm, vmImports) ||\n    isBeingMigrated(vm, vmi, migrations) ||\n    isBeingImported(vm, pods, dataVolumes) ||\n    isVMError(vm) ||\n    isBeingStopped(vm) ||\n    isOff(vm) ||\n    isError(vm, vmi, launcherPod) ||\n    isRunning(vmi) ||\n    isStarting(vm, launcherPod) ||\n    isWaitingForVMI(vm) ||\n    ([VMIPhase.Scheduling, VMIPhase.Scheduled].includes(getStatusPhase<VMIPhase>(vmi)) && {\n      status: VMStatus.STARTING,\n      message: STARTING_MESSAGE,\n    }) ||\n    (getStatusPhase(vmi) === VMIPhase.Pending && {\n      status: VMStatus.VMI_WAITING,\n      message: VMI_WAITING_MESSAGE,\n    }) ||\n    (getStatusPhase(vmi) === VMIPhase.Failed && { status: VMStatus.VMI_ERROR }) || {\n      status: VMStatus.UNKNOWN,\n    }\n  );\n};\n","export const IMPORTING_VMWARE_MESSAGE =\n  'The virtual machine is being imported. Disks will be converted to the libvirt format.';\nexport const IMPORTING_ERROR_VMWARE_MESSAGE = 'The virtual machine could not be imported.';\nexport const IMPORTING_OVIRT_MESSAGE = 'The virtual machine is being imported.';\nexport const IMPORTING_ERROR_OVIRT_MESSAGE = 'The virtual machine could not be imported.';\nexport const IMPORTING_CDI_MESSAGE =\n  'The virtual machine is being imported. Disks are being copied from the source image.';\nexport const IMPORTING_CDI_ERROR_MESSAGE = 'The virtual machine could not be imported.';\nexport const VMI_WAITING_MESSAGE =\n  'The virtual machine is waiting for resources to become available.';\nexport const STARTING_MESSAGE =\n  'This virtual machine will start shortly. Preparing storage, networking, and compute resources.';\nexport const IMPORT_CDI_PENDING_MESSAGE =\n  'The importer pod is waiting for resources to become available.';\n","// extracted by mini-css-extract-plugin","import { K8sVerb, K8sKind, AccessReviewResourceAttributes } from '@console/internal/module/k8s';\nimport { DeploymentModel, TemplateModel } from '@console/internal/models';\nimport * as models from '../models';\n\nconst accessReviewModelMapper = (verb: K8sVerb) => (\n  model: K8sKind,\n): AccessReviewResourceAttributes => ({\n  group: model.apiGroup || '',\n  resource: model.plural,\n  verb,\n});\n\nexport const accessReviewImportVM = [\n  ...[models.VirtualMachineModel, models.DataVolumeModel, DeploymentModel].map(\n    accessReviewModelMapper('create'),\n  ),\n  ...[TemplateModel].map(accessReviewModelMapper('get')),\n];\n","import * as _ from 'lodash';\n\nexport const omitEmpty = (obj, justUndefined = false) => {\n  const omit = (o) => {\n    if (_.isArray(o)) {\n      for (let idx = o.length - 1; idx >= 0; idx--) {\n        const item = o[idx];\n        if (item === undefined || (!justUndefined && item === null)) {\n          o.splice(idx, 1);\n        } else {\n          omit(item);\n        }\n      }\n    } else if (_.isObject(o)) {\n      Object.keys(o).forEach((k) => {\n        const value = o[k];\n        if (value === undefined || (!justUndefined && value === null)) {\n          delete o[k];\n        } else {\n          omit(value);\n        }\n      });\n    }\n  };\n  omit(obj);\n};\n\nexport const isSetEqual = (set: Set<any>, otherSet: Set<any>) =>\n  set.size === otherSet.size && [...set].every((s) => otherSet.has(s));\n","import * as _ from 'lodash';\nimport { List } from 'immutable';\n\n// ATTENTION: please do not add any new imports here\n//   - it can easily cause cyclic dependencies\n\nexport const concatImmutableLists = (...args): List<any> =>\n  args.filter((list) => list).reduce((acc, nextArray) => acc.concat(nextArray), List());\n\nexport const iFirehoseResultToJS = (immutableValue, isList = true) => {\n  if (!immutableValue) {\n    return {};\n  }\n\n  const data = immutableValue.get('data');\n\n  return {\n    data: data && isList ? data.toArray().map((p) => p.toJSON()) : data.toJS(),\n    loadError: immutableValue.get('loadError'),\n    loaded: immutableValue.get('loaded'),\n  };\n};\n\nexport const immutableListToShallowJS = <A = any>(list, defaultValue: A[] = []): A[] =>\n  list ? list.toArray().map((p) => p.toJSON()) : defaultValue;\n\nexport const immutableListToJS = <A = any>(list, defaultValue: A[] = []): A[] =>\n  list ? list.toArray().map((p) => p.toJS()) : defaultValue;\n\nexport const hasTruthyValue = (obj) => !!(obj && !!obj.find((value) => value));\n\nexport const iGet = (obj, key: string, defaultValue = undefined) =>\n  obj ? obj.get(key, defaultValue) : defaultValue;\n\nexport const toShallowJS = (obj, defaultValue = undefined, discardEmpty: boolean = false) => {\n  if (discardEmpty && _.isEmpty(obj)) {\n    return defaultValue;\n  }\n  return obj && obj.isEmpty && !obj.isEmpty() ? obj.toJSON() : defaultValue;\n};\n\nexport const toJS = (obj, defaultValue = undefined) => (obj ? obj.toJS() : defaultValue);\n\nexport const iGetIn = (obj, path: string[], defaultValue = undefined) =>\n  obj && obj.getIn ? obj.getIn(path, defaultValue) : defaultValue;\n\nexport const ihasIn = (obj, path: string[]) => obj && obj.hasIn(path);\n\nexport const iGetIsLoaded = (result): boolean => iGet(result, 'loaded', false);\n\nexport const iGetLoadedData = (result, defaultValue = undefined) =>\n  iGetIsLoaded(result) && !iGet(result, 'loadError') ? iGet(result, 'data') : defaultValue;\n","import * as _ from 'lodash';\nimport { FirehoseResult } from '@console/internal/components/utils';\nimport {\n  K8sKind,\n  K8sResourceKind,\n  OwnerReference,\n  MatchExpression,\n} from '@console/internal/module/k8s';\nimport { NamespaceModel, ProjectModel } from '@console/internal/models';\nimport {\n  getName,\n  getNamespace,\n  getAPIVersion,\n  getKind,\n  getUID,\n} from '@console/shared/src/selectors';\nimport { VM_TEMPLATE_NAME_PARAMETER } from '../constants/vm-templates';\nimport { pluralize } from './strings';\n\nexport const getBasicID = <A extends K8sResourceKind = K8sResourceKind>(entity: A) =>\n  `${getNamespace(entity)}-${getName(entity)}`;\n\nexport const prefixedID = (idPrefix: string, id: string) =>\n  idPrefix && id ? `${idPrefix}-${id}` : null;\n\nexport const joinIDs = (...ids: string[]) => ids.join('-');\n\nexport const isLoaded = (result: FirehoseResult<K8sResourceKind | K8sResourceKind[]>) =>\n  result && result.loaded;\n\nexport const getLoadedData = <T extends K8sResourceKind | K8sResourceKind[] = K8sResourceKind[]>(\n  result: FirehoseResult<T>,\n  defaultValue = null,\n): T => (result && result.loaded && !result.loadError ? result.data : defaultValue);\n\nexport const getModelString = (model: K8sKind | any, isList: boolean) =>\n  pluralize(isList ? 2 : 1, model && model.kind ? model.kind : model);\n\nexport const getLoadError = (\n  result: FirehoseResult<K8sResourceKind | K8sResourceKind[]>,\n  model: K8sKind | any,\n  isList = false,\n) => {\n  if (!result) {\n    return `No model registered for ${getModelString(model, isList)}`;\n  }\n\n  if (result && result.loadError) {\n    const status = _.get(result.loadError, 'response.status');\n    const message = _.get(result.loadError, 'message');\n\n    if (status === 404) {\n      return message && !message.toLowerCase().includes('not found')\n        ? `Could not find ${getModelString(model, isList)}: ${message}`\n        : _.capitalize(message);\n    }\n    if (status === 403) {\n      return `Restricted Access: ${message}`;\n    }\n\n    return message;\n  }\n\n  return null;\n};\n\nexport const insertName = (value: string, name) => {\n  if (value.indexOf(VM_TEMPLATE_NAME_PARAMETER) > -1) {\n    return value.replace(VM_TEMPLATE_NAME_PARAMETER, name);\n  }\n  return joinIDs(name, value);\n};\n\nexport const parseNumber = (value, defaultValue = null) => {\n  const result = Number(value);\n  return Number.isNaN(result) ? defaultValue : result;\n};\n\nexport const parsePercentage = (value: string, defaultValue = null) => {\n  return parseNumber(value?.replace('%', ''), defaultValue);\n};\n\nexport const buildOwnerReference = (\n  owner: K8sResourceKind,\n  opts: { blockOwnerDeletion?: boolean; controller?: boolean } = { blockOwnerDeletion: true },\n): OwnerReference => ({\n  apiVersion: getAPIVersion(owner),\n  kind: getKind(owner),\n  name: getName(owner),\n  uid: getUID(owner),\n  blockOwnerDeletion: opts && opts.blockOwnerDeletion,\n  controller: opts && opts.controller,\n});\n\nexport const buildOwnerReferenceForModel = (\n  model: K8sKind,\n  name?: string,\n  uid?: string,\n): OwnerReference => ({\n  apiVersion: `${model.apiGroup}/${model.apiVersion}`,\n  kind: getKind(model),\n  name,\n  uid,\n});\n\n// FIXME: Avoid this helper! The implementation is not correct. We should remove this.\n// Beware: VM Wizard depends on this custom implementation - mainly the model\nexport const getResource = (\n  model: K8sResourceKind,\n  {\n    name,\n    namespaced = true,\n    namespace,\n    isList = true,\n    matchLabels,\n    matchExpressions,\n    prop,\n    fieldSelector,\n    optional,\n  }: {\n    name?: string;\n    namespace?: string;\n    namespaced?: boolean;\n    isList?: boolean;\n    matchLabels?: { [key: string]: string };\n    matchExpressions?: MatchExpression[];\n    prop?: string;\n    fieldSelector?: string;\n    optional?: boolean;\n  } = {\n    namespaced: true,\n    isList: true,\n  },\n) => {\n  const m = model.kind === NamespaceModel.kind ? ProjectModel : model;\n  const res: any = {\n    // non-admin user cannot list namespaces (k8s wont return only namespaces available to user but 403 forbidden, ).\n    // Instead we need to use ProjectModel which will return available projects (namespaces)\n    //\n    // FIXME: This is incorrect! `m.kind` is not unique. These model definitions should have `crd: true`, which will\n    // break this utility. We should be using `referenceForModel` and `crd: true` in our model definitions!\n    kind: m.kind,\n    model: m,\n    namespaced,\n    namespace,\n    isList,\n    prop: prop || model.kind,\n    optional,\n  };\n\n  if (name) {\n    res.name = name;\n  }\n  if (matchLabels) {\n    res.selector = { matchLabels };\n  }\n  if (matchExpressions) {\n    res.selector = { matchExpressions };\n  }\n  if (fieldSelector) {\n    res.fieldSelector = fieldSelector;\n  }\n\n  return res;\n};\n","export const COULD_NOT_LOAD_DATA = 'Could not load data';\n\nexport const CREATED = 'created';\nexport const CREATED_WITH_FAILED_CLEANUP = 'created & failed to clean up';\nexport const CREATED_WITH_CLEANUP = 'created & cleaned up';\nexport const FAILED_TO_CREATE = 'failed to create';\nexport const FAILED_TO_PATCH = 'failed to patch';\nexport const DYNAMIC = 'Dynamic';\n\nexport const EDIT = 'Edit';\nexport const SAVE = 'Save';\nexport const ADD = 'Add';\n\nexport const ADD_DISK = 'Add Disk';\nexport const ADD_NETWORK_INTERFACE = 'Add Network Interface';\n\nexport const getDialogUIError = (hasAllRequiredFilled) =>\n  hasAllRequiredFilled\n    ? 'Please correct the invalid fields.'\n    : 'Please fill in all required fields.';\n\nexport const getSimpleDialogUIError = (hasAllRequiredFilled) =>\n  hasAllRequiredFilled ? 'Some fields are not correct' : 'Required fields not completed';\n\nexport const getBooleanReadableValue = (value: boolean) => (value ? 'yes' : 'no');\n\nexport const getBooleanAsEnabledValue = (value: boolean) => (value ? 'Enabled' : 'Not Enabled');\n\nexport const getSequenceName = (name: string, usedSequenceNames?: Set<string>) => {\n  if (!usedSequenceNames) {\n    return `${name}-${0}`;\n  }\n\n  for (let i = 0; i < usedSequenceNames.size + 1; i++) {\n    const sequenceName = `${name}-${i}`;\n    if (!usedSequenceNames.has(sequenceName)) {\n      return sequenceName;\n    }\n  }\n  return null;\n};\n\nexport const pluralize = (i: number, singular: string, plural: string = `${singular}s`) =>\n  i === 1 ? singular : plural;\n\nexport const intervalBracket = (isInclusive: boolean, leftValue?: number, rightValue?: number) => {\n  if (leftValue) {\n    return isInclusive && Number.isFinite(leftValue) ? '[' : '(';\n  }\n\n  return isInclusive && Number.isFinite(rightValue) ? ']' : ')';\n};\n\nexport const createUniqueNameResolver = (data: { name: string }[]) => {\n  const nameCounts = (data || [])\n    .filter(({ name }) => name)\n    .reduce((acc, { name }) => {\n      if (acc[name]) {\n        acc[name].max++;\n      } else {\n        acc[name] = { max: 1, next: 1 };\n      }\n      return acc;\n    }, {});\n\n  return (name: string) => {\n    if (!name) {\n      return name;\n    }\n    if (nameCounts[name].max === 1) {\n      return name;\n    }\n    nameCounts[name].next++;\n    return `${name}-${nameCounts[name].next - 1}`;\n  };\n};\n","export const getStringEnumValues = <T>(enu) => Object.keys(enu).map((k) => enu[k] as T);\n","import { K8sKind } from '@console/internal/module/k8s';\n\nexport const LocalVolumeSetModel: K8sKind = {\n  label: 'Local Volume Set',\n  labelPlural: 'Local Volume Sets',\n  apiVersion: 'v1alpha1',\n  apiGroup: 'local.storage.openshift.io',\n  plural: 'localvolumesets',\n  abbr: 'LVS',\n  namespaced: true,\n  kind: 'LocalVolumeSet',\n  id: 'localvolumeset',\n  crd: true,\n};\n\nexport const LocalVolumeModel: K8sKind = {\n  label: 'Local Volume',\n  labelPlural: 'Local Volumes',\n  apiVersion: 'v1',\n  apiGroup: 'local.storage.openshift.io',\n  plural: 'localvolumes',\n  abbr: 'LV',\n  namespaced: true,\n  kind: 'LocalVolume',\n  id: 'localvolume',\n  crd: true,\n};\n","import * as _ from 'lodash';\nimport { ModelDefinition, ModelFeatureFlag, Plugin, RoutePage } from '@console/plugin-sdk';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport * as models from './models';\nimport { ClusterServiceVersionModel } from '@console/operator-lifecycle-manager';\n\ntype ConsumedExtensions = ModelFeatureFlag | ModelDefinition | RoutePage;\n\nconst LSO_FLAG = 'LSO';\n\nconst plugin: Plugin<ConsumedExtensions> = [\n  {\n    type: 'ModelDefinition',\n    properties: {\n      models: _.values(models),\n    },\n  },\n  {\n    type: 'FeatureFlag/Model',\n    properties: {\n      model: models.LocalVolumeModel,\n      flag: LSO_FLAG,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: `/k8s/ns/:ns/${ClusterServiceVersionModel.plural}/:appName/${referenceForModel(\n        models.LocalVolumeSetModel,\n      )}/~new`,\n      loader: () =>\n        import(\n          './components/local-volume-set/create-local-volume-set' /* webpackChunkName: \"create-local-volume-set\" */\n        ).then((m) => m.default),\n      required: LSO_FLAG,\n    },\n  },\n];\n\nexport default plugin;\n","import { StatusGroupMapper } from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport { InventoryStatusGroup } from '@console/shared/src/components/dashboard/inventory-card/status-group';\nimport { MachineKind, NodeKind } from '@console/internal/module/k8s';\nimport { getName } from '@console/shared/src/selectors/common';\nimport { getNodeMachineName } from '@console/shared/src/selectors/node';\nimport { createBasicLookup } from '@console/shared/src/utils/utils';\nimport { getHostStatus } from '../../../status/host-status';\nimport { HOST_ERROR_STATES, HOST_PROGRESS_STATES, HOST_SUCCESS_STATES } from '../../../constants';\nimport { getHostMachine, getNodeMaintenanceNodeName } from '../../../selectors';\nimport { getHostFilterStatus } from '../table-filters';\nimport { BareMetalHostKind } from '../../../types';\n\nconst BMH_STATUS_GROUP_MAPPER = {\n  [InventoryStatusGroup.NOT_MAPPED]: HOST_SUCCESS_STATES,\n  [InventoryStatusGroup.PROGRESS]: HOST_PROGRESS_STATES,\n  [InventoryStatusGroup.ERROR]: HOST_ERROR_STATES,\n  'node-maintenance': ['maintenance'],\n};\n\nexport const getBMHStatusGroups: StatusGroupMapper = (\n  hosts: BareMetalHostKind[],\n  { machines, nodes, maintenances },\n) => {\n  const groups = {\n    [InventoryStatusGroup.NOT_MAPPED]: {\n      statusIDs: ['ready', 'provisioned'],\n      count: 0,\n      filterType: 'host-status',\n    },\n    [InventoryStatusGroup.ERROR]: {\n      statusIDs: ['error'],\n      count: 0,\n      filterType: 'host-status',\n    },\n    [InventoryStatusGroup.PROGRESS]: {\n      statusIDs: ['registering', 'provisioning'],\n      count: 0,\n      filterType: 'host-status',\n    },\n    [InventoryStatusGroup.UNKNOWN]: {\n      statusIDs: ['other'],\n      count: 0,\n      filterType: 'host-status',\n    },\n    'node-maintenance': {\n      statusIDs: ['maintenance'],\n      count: 0,\n      filterType: 'host-status',\n    },\n  };\n\n  const maintenancesByNodeName = createBasicLookup(maintenances, getNodeMaintenanceNodeName);\n  const nodesByMachineName = createBasicLookup(nodes, getNodeMachineName);\n\n  hosts.forEach((host) => {\n    // TODO(jtomasek): replace this with createLookup once there is metal3.io/BareMetalHost annotation\n    // on machines\n    const machine = getHostMachine(host, machines as MachineKind[]);\n    const node = nodesByMachineName[getName(machine)] as NodeKind;\n    const nodeMaintenance = maintenancesByNodeName[getName(node)];\n    const bareMetalHostStatus = getHostStatus({ host, nodeMaintenance });\n\n    const status = getHostFilterStatus({\n      machine,\n      node,\n      host,\n      nodeMaintenance,\n      status: bareMetalHostStatus,\n    });\n    const group =\n      Object.keys(BMH_STATUS_GROUP_MAPPER).find((key) =>\n        BMH_STATUS_GROUP_MAPPER[key].includes(status),\n      ) || InventoryStatusGroup.NOT_MAPPED;\n    groups[group].count++;\n  });\n\n  return groups;\n};\n","import * as _ from 'lodash';\nimport { RowFilter } from '@console/internal/components/filter-toolbar';\nimport {\n  HOST_REGISTERING_STATES,\n  HOST_PROVISIONING_STATES,\n  HOST_STATUS_READY,\n  HOST_ERROR_STATES,\n  HOST_STATUS_TITLES,\n  HOST_STATUS_PROVISIONED,\n  HOST_STATUS_EXTERNALLY_PROVISIONED,\n  NODE_STATUS_TITLES,\n  HOST_STATUS_AVAILABLE,\n} from '../../constants';\nimport { BareMetalHostBundle } from '../types';\n\nconst hostStatesToFilterMap = Object.freeze({\n  registering: {\n    title: 'Registering',\n    states: HOST_REGISTERING_STATES,\n  },\n  ready: {\n    title: 'Available',\n    states: [HOST_STATUS_READY, HOST_STATUS_AVAILABLE],\n  },\n  provisioning: {\n    title: 'Provisioning',\n    states: HOST_PROVISIONING_STATES,\n  },\n  provisioned: {\n    title: 'Provisioned',\n    states: [HOST_STATUS_PROVISIONED, HOST_STATUS_EXTERNALLY_PROVISIONED],\n  },\n  error: {\n    title: 'Error',\n    states: HOST_ERROR_STATES,\n  },\n  maintenance: {\n    title: 'Maintenance',\n    states: Object.keys(NODE_STATUS_TITLES),\n  },\n  other: {\n    title: 'Other',\n    states: Object.keys(HOST_STATUS_TITLES),\n  },\n});\n\nexport const getHostFilterStatus = (bundle: BareMetalHostBundle): string => {\n  return _.findKey(hostStatesToFilterMap, ({ states }) => states.includes(bundle.status.status));\n};\n\nexport const hostStatusFilter: RowFilter = {\n  filterGroupName: 'Status',\n  type: 'host-status',\n  reducer: getHostFilterStatus,\n  items: _.map(hostStatesToFilterMap, ({ title }, id) => ({ id, title })),\n  filter: (groups, bundle: BareMetalHostBundle) => {\n    const status = getHostFilterStatus(bundle);\n    return (\n      groups.selected.has(status) || !_.includes(groups.all, status) || _.isEmpty(groups.selected)\n    );\n  },\n};\n","import { StatusGroupMapper } from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport { createBasicLookup } from '@console/shared/src/utils/utils';\nimport { getName } from '@console/shared/src/selectors/common';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { InventoryStatusGroup } from '@console/shared/src/components/dashboard/inventory-card/status-group';\nimport { getNodeMaintenanceNodeName } from '../../../selectors';\nimport { bareMetalNodeStatus } from '../../../status/baremetal-node-status';\nimport { NODE_STATUS_TITLES } from '../../../constants';\n\nconst BMN_STATUS_GROUP_MAPPER = {\n  [InventoryStatusGroup.PROGRESS]: ['Not Ready'],\n  [InventoryStatusGroup.NOT_MAPPED]: ['Ready'],\n  'node-maintenance': Object.keys(NODE_STATUS_TITLES),\n};\n\nexport const getBMNStatusGroups: StatusGroupMapper = (nodes: NodeKind[], { maintenances }) => {\n  const groups = {\n    [InventoryStatusGroup.NOT_MAPPED]: {\n      statusIDs: ['ready'],\n      count: 0,\n      filterType: 'bare-metal-node-status',\n    },\n    [InventoryStatusGroup.PROGRESS]: {\n      statusIDs: ['notReady'],\n      count: 0,\n      filterType: 'bare-metal-node-status',\n    },\n    'node-maintenance': {\n      statusIDs: ['maintenance'],\n      count: 0,\n      filterType: 'bare-metal-node-status',\n    },\n  };\n  const maintenancesByNodeName = createBasicLookup(maintenances, getNodeMaintenanceNodeName);\n  nodes.forEach((node) => {\n    const nodeName = getName(node);\n    const nodeMaintenance = maintenancesByNodeName[nodeName];\n    const { status } = bareMetalNodeStatus({ node, nodeMaintenance });\n    const group =\n      Object.keys(BMN_STATUS_GROUP_MAPPER).find((key) =>\n        BMN_STATUS_GROUP_MAPPER[key].includes(status),\n      ) || InventoryStatusGroup.NOT_MAPPED;\n    groups[group].count++;\n  });\n  return groups;\n};\n","// TODO(jtomasek): HOST_STATUS_READY is deprecated, remove its occurrences\n// once 'ready' status is replaced with 'available' in BMO\nexport const HOST_STATUS_READY = 'ready';\nexport const HOST_STATUS_AVAILABLE = 'available';\nexport const HOST_STATUS_DISCOVERED = 'discovered';\nexport const HOST_STATUS_OK = 'OK';\nexport const HOST_STATUS_ERROR = 'error';\nexport const HOST_STATUS_UNKNOWN = 'Unknown';\nexport const HOST_STATUS_EXTERNALLY_PROVISIONED = 'externally provisioned';\nexport const HOST_STATUS_PROVISIONED = 'provisioned';\nexport const HOST_STATUS_DEPROVISIONED = 'deprovisioned';\nexport const HOST_STATUS_REGISTERING = 'registering';\nexport const HOST_STATUS_INSPECTING = 'inspecting';\nexport const HOST_STATUS_PROVISIONING = 'provisioning';\nexport const HOST_STATUS_DEPROVISIONING = 'deprovisioning';\nexport const HOST_STATUS_MATCH_PROFILE = 'match profile';\nexport const HOST_STATUS_REGISTRATION_ERROR = 'registration error';\nexport const HOST_STATUS_INSPECTION_ERROR = 'inspection error';\nexport const HOST_STATUS_PROVISIONING_ERROR = 'provisioning error';\nexport const HOST_STATUS_POWER_MANAGEMENT_ERROR = 'power management error';\nexport const HOST_STATUS_DELETING = 'deleting';\n\nexport const HOST_POWER_STATUS_POWERED_ON = 'Powered on';\nexport const HOST_POWER_STATUS_POWERED_OFF = 'Powered off';\nexport const HOST_POWER_STATUS_POWERING_OFF = 'Powering off';\nexport const HOST_POWER_STATUS_POWERING_ON = 'Powering on';\n\nexport const HOST_STATUS_TITLES = {\n  [HOST_STATUS_READY]: 'Available',\n  [HOST_STATUS_AVAILABLE]: 'Available',\n  [HOST_STATUS_DISCOVERED]: 'Discovered',\n  [HOST_STATUS_OK]: 'OK',\n  [HOST_STATUS_ERROR]: 'Error',\n  [HOST_STATUS_PROVISIONED]: 'Provisioned',\n  [HOST_STATUS_EXTERNALLY_PROVISIONED]: 'Externally provisioned',\n  [HOST_STATUS_DEPROVISIONED]: 'Deprovisioned',\n  [HOST_STATUS_REGISTERING]: 'Registering',\n  [HOST_STATUS_INSPECTING]: 'Inspecting',\n  [HOST_STATUS_PROVISIONING]: 'Provisioning',\n  [HOST_STATUS_DEPROVISIONING]: 'Deprovisioning',\n  [HOST_STATUS_REGISTRATION_ERROR]: 'Registration error',\n  [HOST_STATUS_INSPECTION_ERROR]: 'Inspection error',\n  [HOST_STATUS_PROVISIONING_ERROR]: 'Provisioning error',\n  [HOST_STATUS_POWER_MANAGEMENT_ERROR]: 'Power Management Error',\n  [HOST_STATUS_MATCH_PROFILE]: 'Matching profile',\n  [HOST_STATUS_DELETING]: 'Deleting',\n  [HOST_STATUS_UNKNOWN]: 'Unknown',\n};\n\nexport const HOST_STATUS_DESCRIPTIONS = {\n  [HOST_STATUS_READY]: 'The host is available to be provisioned as a node.',\n  [HOST_STATUS_AVAILABLE]: 'The host is available to be provisioned as a node.',\n  [HOST_STATUS_INSPECTING]:\n    'The hardware details of the host are being collected. This will take a while. The host will become available when finished.',\n  [HOST_STATUS_PROVISIONING]:\n    \"An image is being written to the host's disk(s). This will take a while.\",\n  [HOST_STATUS_DEPROVISIONING]:\n    \"The image is being wiped from the host's disk(s). This may take a while.\",\n  [HOST_STATUS_REGISTRATION_ERROR]:\n    \"The details for the host's BMC are either incorrect or incomplete therefore the host could not be managed.\",\n  [HOST_STATUS_INSPECTION_ERROR]: 'Collecting hardware details from the host failed',\n  [HOST_STATUS_PROVISIONING_ERROR]: 'The image could not be written to the host.',\n  [HOST_STATUS_POWER_MANAGEMENT_ERROR]:\n    'An error was found while trying to power the host either on or off.',\n};\n\nexport const HOST_REGISTERING_STATES = [\n  HOST_STATUS_REGISTERING,\n  HOST_STATUS_INSPECTING,\n  HOST_STATUS_MATCH_PROFILE,\n];\n\nexport const HOST_PROVISIONING_STATES = [HOST_STATUS_PROVISIONING, HOST_STATUS_DEPROVISIONING];\n\nexport const HOST_ERROR_STATES = [\n  HOST_STATUS_REGISTRATION_ERROR,\n  HOST_STATUS_INSPECTION_ERROR,\n  HOST_STATUS_PROVISIONING_ERROR,\n  HOST_STATUS_POWER_MANAGEMENT_ERROR,\n  HOST_STATUS_ERROR,\n];\n\nexport const HOST_WARN_STATES = [];\n\nexport const HOST_PROGRESS_STATES = [\n  HOST_STATUS_INSPECTING,\n  HOST_STATUS_PROVISIONING,\n  HOST_STATUS_DEPROVISIONING,\n  HOST_STATUS_REGISTERING,\n  HOST_STATUS_MATCH_PROFILE,\n  HOST_STATUS_DELETING,\n];\n\nexport const HOST_SUCCESS_STATES = [\n  HOST_STATUS_READY,\n  HOST_STATUS_AVAILABLE,\n  HOST_STATUS_DISCOVERED,\n  HOST_STATUS_OK,\n  HOST_STATUS_PROVISIONED,\n  HOST_STATUS_EXTERNALLY_PROVISIONED,\n  HOST_STATUS_DEPROVISIONED,\n];\n\nexport const HOST_HARDWARE_ERROR_STATES = [HOST_STATUS_POWER_MANAGEMENT_ERROR];\n\nexport const HOST_HEALTH_OK = 'Host is healthy';\nexport const HOST_HEALTH_ERROR = 'Host is in an error state';\nexport const HOST_HEALTH_LOADING = 'Loading host health data';\n","export * from './node-maintenance';\nexport * from './bare-metal-host';\n","export const NODE_STATUS_STARTING_MAINTENANCE = 'starting maintenance';\nexport const NODE_STATUS_UNDER_MAINTENANCE = 'under maintenance';\nexport const NODE_STATUS_STOPPING_MAINTENANCE = 'stopping maintenance';\n\nexport const NODE_STATUS_TITLES = {\n  [NODE_STATUS_STARTING_MAINTENANCE]: 'Starting maintenance',\n  [NODE_STATUS_UNDER_MAINTENANCE]: 'Under maintenance',\n  [NODE_STATUS_STOPPING_MAINTENANCE]: 'Stopping maintenance',\n};\n","import { k8sGet, K8sResourceKind } from '@console/internal/module/k8s';\nimport { InfrastructureModel } from '@console/internal/models';\nimport { getInfrastructurePlatform } from '@console/shared/src/selectors/infrastructure';\nimport { setFlag, handleError } from '@console/internal/actions/features';\nimport { FeatureDetector } from '@console/plugin-sdk';\n\nexport const BAREMETAL_FLAG = 'BAREMETAL';\nexport const NODE_MAINTENANCE_FLAG = 'NODE_MAINTENANCE';\n\nexport const detectBaremetalPlatform: FeatureDetector = (dispatch) =>\n  k8sGet(InfrastructureModel, 'cluster').then(\n    (infra: K8sResourceKind) =>\n      dispatch(setFlag(BAREMETAL_FLAG, getInfrastructurePlatform(infra) === 'BareMetal')),\n    (err) => {\n      err?.response?.status === 404\n        ? dispatch(setFlag(BAREMETAL_FLAG, false))\n        : handleError(err, BAREMETAL_FLAG, dispatch, detectBaremetalPlatform);\n    },\n  );\n","import { useEffect, useRef } from 'react';\n\nexport const usePrevious = (value) => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n","import { K8sKind } from '@console/internal/module/k8s';\n\nexport const BareMetalHostModel: K8sKind = {\n  label: 'Bare Metal Host',\n  labelPlural: 'Bare Metal Hosts',\n  apiVersion: 'v1alpha1',\n  apiGroup: 'metal3.io',\n  plural: 'baremetalhosts',\n  abbr: 'BMH',\n  namespaced: true,\n  kind: 'BareMetalHost',\n  id: 'baremetalhost',\n  crd: true,\n};\n\nexport const NodeMaintenanceModel: K8sKind = {\n  label: 'Node Maintenance',\n  labelPlural: 'Node Maintenances',\n  apiVersion: 'v1beta1',\n  apiGroup: 'nodemaintenance.kubevirt.io',\n  plural: 'nodemaintenances',\n  abbr: 'NM',\n  namespaced: false,\n  kind: 'NodeMaintenance',\n  id: 'nodemaintenance',\n  crd: true,\n};\n","import * as _ from 'lodash';\nimport * as React from 'react';\nimport { MaintenanceIcon } from '@patternfly/react-icons';\nimport {\n  DashboardsOverviewInventoryItem,\n  Plugin,\n  HrefNavItem,\n  ResourceListPage,\n  ResourceDetailsPage,\n  RoutePage,\n  ModelFeatureFlag,\n  ModelDefinition,\n  DashboardsOverviewResourceActivity,\n  DashboardsOverviewInventoryItemReplacement,\n  DashboardsInventoryItemGroup,\n  CustomFeatureFlag,\n  ResourceTabPage,\n} from '@console/plugin-sdk';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { MachineModel, NodeModel } from '@console/internal/models';\n// TODO(jtomasek): change this to '@console/shared/src/utils' once @console/shared/src/utils modules\n// no longer import from @console/internal (cyclic deps issues)\nimport { formatNamespacedRouteForResource } from '@console/shared/src/utils/namespace';\nimport { BareMetalHostModel, NodeMaintenanceModel } from './models';\nimport { getBMHStatusGroups } from './components/baremetal-hosts/dashboard/utils';\nimport { getBMNStatusGroups } from './components/baremetal-nodes/dashboard/utils';\nimport { getHostPowerStatus } from './selectors';\nimport { HOST_POWER_STATUS_POWERING_OFF, HOST_POWER_STATUS_POWERING_ON } from './constants';\nimport { BareMetalHostKind } from './types';\nimport { detectBaremetalPlatform, BAREMETAL_FLAG, NODE_MAINTENANCE_FLAG } from './features';\n\ntype ConsumedExtensions =\n  | DashboardsOverviewInventoryItem\n  | DashboardsOverviewInventoryItemReplacement\n  | DashboardsInventoryItemGroup\n  | HrefNavItem\n  | ResourceListPage\n  | ResourceDetailsPage\n  | RoutePage\n  | ModelFeatureFlag\n  | ModelDefinition\n  | CustomFeatureFlag\n  | DashboardsOverviewResourceActivity\n  | ResourceTabPage;\n\nconst METAL3_FLAG = 'METAL3';\n\nconst plugin: Plugin<ConsumedExtensions> = [\n  {\n    type: 'ModelDefinition',\n    properties: {\n      models: [BareMetalHostModel, NodeMaintenanceModel],\n    },\n  },\n  {\n    type: 'FeatureFlag/Model',\n    properties: {\n      model: BareMetalHostModel,\n      flag: METAL3_FLAG,\n    },\n  },\n  {\n    type: 'FeatureFlag/Model',\n    properties: {\n      model: NodeMaintenanceModel,\n      flag: NODE_MAINTENANCE_FLAG,\n    },\n  },\n  {\n    type: 'FeatureFlag/Custom',\n    properties: {\n      detect: detectBaremetalPlatform,\n    },\n  },\n  {\n    type: 'NavItem/Href',\n    properties: {\n      section: 'Compute',\n      componentProps: {\n        name: 'Bare Metal Hosts',\n        href: formatNamespacedRouteForResource(\n          referenceForModel(BareMetalHostModel),\n          'openshift-machine-api',\n        ),\n      },\n      mergeBefore: 'ComputeSeparator',\n    },\n    flags: {\n      required: [BAREMETAL_FLAG, METAL3_FLAG],\n    },\n  },\n  {\n    type: 'Page/Resource/List',\n    properties: {\n      model: BareMetalHostModel,\n      loader: () =>\n        import(\n          './components/baremetal-hosts/BareMetalHostsPage' /* webpackChunkName: \"metal3-baremetalhosts\" */\n        ).then((m) => m.default),\n    },\n  },\n  {\n    type: 'Page/Resource/Details',\n    properties: {\n      model: BareMetalHostModel,\n      loader: () =>\n        import(\n          './components/baremetal-hosts/BareMetalHostDetailsPage' /* webpackChunkName: \"metal3-baremetalhost\" */\n        ).then((m) => m.default),\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: `/k8s/ns/:ns/${referenceForModel(BareMetalHostModel)}/~new/form`,\n      loader: () =>\n        import(\n          './components/baremetal-hosts/add-baremetal-host/AddBareMetalHostPage' /* webpackChunkName: \"metal3-baremetalhost\" */\n        ).then((m) => m.default),\n      required: [BAREMETAL_FLAG, METAL3_FLAG],\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: `/k8s/ns/:ns/${referenceForModel(BareMetalHostModel)}/:name/edit`,\n      loader: () =>\n        import(\n          './components/baremetal-hosts/add-baremetal-host/AddBareMetalHostPage' /* webpackChunkName: \"metal3-baremetalhost\" */\n        ).then((m) => m.default),\n      required: [BAREMETAL_FLAG, METAL3_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Inventory/Item/Replacement',\n    properties: {\n      model: NodeModel,\n      additionalResources: {\n        maintenances: {\n          isList: true,\n          kind: referenceForModel(NodeMaintenanceModel),\n          optional: true,\n        },\n      },\n      mapper: getBMNStatusGroups,\n    },\n    flags: {\n      required: [BAREMETAL_FLAG, METAL3_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Inventory/Item',\n    properties: {\n      additionalResources: {\n        machines: {\n          isList: true,\n          kind: referenceForModel(MachineModel),\n        },\n        nodes: {\n          isList: true,\n          kind: NodeModel.kind,\n        },\n        maintenances: {\n          isList: true,\n          kind: referenceForModel(NodeMaintenanceModel),\n          optional: true,\n        },\n      },\n      model: BareMetalHostModel,\n      mapper: getBMHStatusGroups,\n    },\n    flags: {\n      required: [BAREMETAL_FLAG, METAL3_FLAG],\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: ['/k8s/cluster/nodes/'],\n      loader: () =>\n        import(\n          './components/baremetal-nodes/BareMetalNodesPage' /* webpackChunkName: \"node\" */\n        ).then((m) => m.default),\n      required: [BAREMETAL_FLAG, METAL3_FLAG],\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      path: ['/k8s/cluster/nodes/:name'],\n      loader: () =>\n        import(\n          './components/baremetal-nodes/BareMetalNodeDetailsPage' /* webpackChunkName: \"node\" */\n        ).then((m) => m.default),\n      required: [BAREMETAL_FLAG, METAL3_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Activity/Resource',\n    properties: {\n      k8sResource: {\n        isList: true,\n        kind: referenceForModel(NodeMaintenanceModel),\n        prop: 'maintenances',\n      },\n      isActivity: (resource) => _.get(resource.status, 'phase') === 'Running',\n      getTimestamp: (resource) => new Date(resource.metadata.creationTimestamp),\n      loader: () =>\n        import(\n          './components/maintenance/MaintenanceDashboardActivity' /* webpackChunkName: \"node-maintenance\" */\n        ).then((m) => m.default),\n    },\n    flags: {\n      required: [BAREMETAL_FLAG, METAL3_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Inventory/Item/Group',\n    properties: {\n      id: 'node-maintenance',\n      icon: <MaintenanceIcon />,\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Activity/Resource',\n    properties: {\n      k8sResource: {\n        kind: referenceForModel(BareMetalHostModel),\n        prop: 'bmhs',\n        isList: true,\n      },\n      isActivity: (resource: BareMetalHostKind) =>\n        [HOST_POWER_STATUS_POWERING_OFF, HOST_POWER_STATUS_POWERING_ON].includes(\n          getHostPowerStatus(resource),\n        ),\n      loader: () =>\n        import(\n          './components/baremetal-hosts/dashboard/BareMetalStatusActivity' /* webpackChunkName: \"metal3-powering\" */\n        ).then((m) => m.default),\n    },\n    flags: {\n      required: [BAREMETAL_FLAG, METAL3_FLAG],\n    },\n  },\n  {\n    type: 'Page/Resource/Tab',\n    properties: {\n      href: 'nics',\n      model: NodeModel,\n      name: 'Network Interfaces',\n      loader: () =>\n        import('./components/baremetal-nodes/NICsPage').then(\n          (m) => m.default,\n        ) /* webpackChunkName: \"metal3-bmn-nics\" */,\n    },\n    flags: {\n      required: [BAREMETAL_FLAG, METAL3_FLAG],\n    },\n  },\n  {\n    type: 'Page/Resource/Tab',\n    properties: {\n      href: 'disks',\n      model: NodeModel,\n      name: 'Disks',\n      loader: () =>\n        import('./components/baremetal-nodes/DisksPage').then(\n          (m) => m.default,\n        ) /* webpackChunkName: \"metal3-bmn-disks\" */,\n    },\n    flags: {\n      required: [BAREMETAL_FLAG, METAL3_FLAG],\n    },\n  },\n];\n\nexport default plugin;\n","import * as _ from 'lodash';\nimport { getName, getAnnotations } from '@console/shared/src/selectors/common';\nimport { MachineKind } from '@console/internal/module/k8s';\nimport {\n  BareMetalHostDisk,\n  BareMetalHostNIC,\n  BareMetalHostCPU,\n  BareMetalHostSystemVendor,\n  BareMetalHostBios,\n  BareMetalHostKind,\n} from '../types';\nimport {\n  HOST_POWER_STATUS_POWERED_ON,\n  HOST_POWER_STATUS_POWERING_OFF,\n  HOST_POWER_STATUS_POWERING_ON,\n  HOST_POWER_STATUS_POWERED_OFF,\n} from '../constants';\n\nconst ANNOTATION_HOST_RESTART = 'reboot.metal3.io';\n\nexport const getHostOperationalStatus = (host: BareMetalHostKind): string =>\n  _.get(host, 'status.operationalStatus');\nexport const getHostErrorType = (host: BareMetalHostKind): string => host.status?.errorType;\nexport const getHostProvisioningState = (host: BareMetalHostKind): string =>\n  _.get(host, 'status.provisioning.state');\nexport const getHostMachineName = (host: BareMetalHostKind): string =>\n  _.get(host, 'spec.consumerRef.name');\nexport const getHostBMCAddress = (host: BareMetalHostKind): string =>\n  _.get(host, 'spec.bmc.address');\nexport const getHostDisableCertificateVerification = (host: BareMetalHostKind): boolean =>\n  _.get(host, 'spec.bmc.disableCertificateVerification', false);\nexport const getHostBootMACAddress = (host: BareMetalHostKind) =>\n  _.get(host, 'spec') && host.spec.bootMACAddress;\nexport const isHostOnline = (host: BareMetalHostKind): boolean => _.get(host, 'spec.online', false);\nexport const getHostNICs = (host: BareMetalHostKind): BareMetalHostNIC[] =>\n  _.get(host, 'status.hardware.nics', []);\nexport const getHostStorage = (host: BareMetalHostKind): BareMetalHostDisk[] =>\n  _.get(host, 'status.hardware.storage', []);\nexport const getHostCPU = (host: BareMetalHostKind): BareMetalHostCPU =>\n  _.get(host, 'status.hardware.cpu', {});\nexport const getHostRAMMiB = (host: BareMetalHostKind): number =>\n  _.get(host, 'status.hardware.ramMebibytes');\nexport const getHostErrorMessage = (host: BareMetalHostKind): string =>\n  _.get(host, 'status.errorMessage');\nexport const getHostDescription = (host: BareMetalHostKind): string =>\n  _.get(host, 'spec.description', '');\nexport const isHostPoweredOn = (host: BareMetalHostKind): boolean =>\n  _.get(host, 'status.poweredOn', false);\nexport const isHostScheduledForRestart = (host: BareMetalHostKind) =>\n  !!Object.getOwnPropertyNames(getAnnotations(host, {})).find(\n    (annotation) =>\n      annotation === ANNOTATION_HOST_RESTART ||\n      annotation.startsWith(`${ANNOTATION_HOST_RESTART}/`),\n  );\nexport const getHostPowerStatus = (host: BareMetalHostKind): string => {\n  const isOnline = isHostOnline(host);\n  const isPoweredOn = isHostPoweredOn(host);\n  if (isOnline && isPoweredOn) return HOST_POWER_STATUS_POWERED_ON;\n  if (!isOnline && isPoweredOn) return HOST_POWER_STATUS_POWERING_OFF;\n  if (isOnline && !isPoweredOn) return HOST_POWER_STATUS_POWERING_ON;\n  return HOST_POWER_STATUS_POWERED_OFF;\n};\nexport const getHostVendorInfo = (host: BareMetalHostKind): BareMetalHostSystemVendor =>\n  _.get(host, 'status.hardware.systemVendor', {});\nexport const getHostTotalStorageCapacity = (host: BareMetalHostKind): number =>\n  _.reduce(\n    getHostStorage(host),\n    (sum: number, disk: BareMetalHostDisk): number => sum + disk.sizeBytes,\n    0,\n  );\nexport const getHostBios = (host: BareMetalHostKind): BareMetalHostBios =>\n  _.get(host, 'status.hardware.firmware.bios');\n\nexport const getHostMachine = (\n  host: BareMetalHostKind,\n  machines: MachineKind[] = [],\n): MachineKind =>\n  machines.find((machine: MachineKind) => getHostMachineName(host) === getName(machine));\n","export * from './node-maintenance';\nexport * from './baremetal-hosts';\n","import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\n\nexport const getNodeMaintenanceNodeName = (nodeMaintenance: K8sResourceKind): string =>\n  _.get(nodeMaintenance, 'spec.nodeName');\nexport const getNodeMaintenanceReason = (nodeMaintenance: K8sResourceKind): string =>\n  _.get(nodeMaintenance, 'spec.reason');\nexport const getNodeMaintenancePhase = (nodeMaintenance: K8sResourceKind): string =>\n  _.get(nodeMaintenance, 'status.phase');\nexport const getNodeMaintenanceLastError = (nodeMaintenance: K8sResourceKind): string =>\n  _.get(nodeMaintenance, 'status.lastError');\nexport const getNodeMaintenancePendingPods = (nodeMaintenance: K8sResourceKind): string[] =>\n  _.get(nodeMaintenance, 'status.pendingPods', []);\nexport const getNodeMaintenanceProgressPercent = (nodeMaintenance: K8sResourceKind): number => {\n  if (!nodeMaintenance.status) return 0;\n  const pendingPods = _.get(nodeMaintenance, 'status.pendingPods', []);\n  const evictionPods = _.get(nodeMaintenance, 'status.evictionPods', 0);\n  if (evictionPods === 0) return 100;\n  return (Math.max(evictionPods - pendingPods.length, 0) / evictionPods) * 100;\n};\n// TODO(jtomasek): Move this into console-shared/src/selectors/common.ts\nexport const getNodeMaintenanceCreationTimestamp = <A extends K8sResourceKind = K8sResourceKind>(\n  value: A,\n) => _.get(value, 'metadata.creationTimestamp') as K8sResourceKind['metadata']['creationTimestamp'];\n\nexport const findNodeMaintenance = (nodeMaintenances: K8sResourceKind[], nodeName: string) =>\n  (nodeMaintenances || []).find(\n    (nodeMaintenance) => getNodeMaintenanceNodeName(nodeMaintenance) === nodeName,\n  );\n","import { NodeKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { nodeStatus } from '@console/app/src/status/node';\nimport { isNodeUnschedulable } from '@console/shared/src/selectors/node';\nimport { StatusProps } from '../components/types';\nimport { BareMetalHostKind } from '../types';\nimport { isHostPoweredOn } from '../selectors';\nimport { getNodeMaintenanceStatus } from './node-maintenance-status';\n\ntype BareMetalNodeStatusProps = {\n  node: NodeKind;\n  nodeMaintenance?: K8sResourceKind;\n};\n\nexport const bareMetalNodeStatus = ({\n  node,\n  nodeMaintenance,\n}: BareMetalNodeStatusProps): StatusProps =>\n  getNodeMaintenanceStatus(nodeMaintenance) || { status: nodeStatus(node) };\n\ntype BareMetalNodeSecondaryStatusProps = {\n  node: NodeKind;\n  host?: BareMetalHostKind;\n  nodeMaintenance?: K8sResourceKind;\n};\n\nexport const baremetalNodeSecondaryStatus = ({\n  node,\n  host,\n  nodeMaintenance,\n}: BareMetalNodeSecondaryStatusProps): string[] => {\n  const states = [];\n  if (!nodeMaintenance && isNodeUnschedulable(node)) {\n    states.push('Scheduling disabled');\n  }\n  // show host power status only if there is actual host associated to node\n  if (host && !isHostPoweredOn(host)) {\n    states.push('Host is powered off');\n  }\n  return states;\n};\n","import { K8sResourceKind, MachineKind, NodeKind } from '@console/internal/module/k8s';\nimport { getHostOperationalStatus, getHostProvisioningState, getHostErrorType } from '../selectors';\nimport {\n  HOST_STATUS_TITLES,\n  HOST_STATUS_DESCRIPTIONS,\n  HOST_STATUS_ERROR,\n  HOST_STATUS_DISCOVERED,\n  HOST_PROGRESS_STATES,\n  HOST_STATUS_DEPROVISIONING,\n  HOST_STATUS_UNKNOWN,\n} from '../constants';\nimport { StatusProps } from '../components/types';\nimport { BareMetalHostKind } from '../types';\nimport { getNodeMaintenanceStatus } from './node-maintenance-status';\n\nexport const getBareMetalHostStatus = (host: BareMetalHostKind): StatusProps => {\n  const operationalStatus = getHostOperationalStatus(host);\n  const provisioningState = getHostProvisioningState(host);\n  const errorType = getHostErrorType(host);\n\n  let hostStatus;\n\n  if (operationalStatus === HOST_STATUS_ERROR) {\n    if (errorType) {\n      hostStatus = errorType;\n    } else {\n      hostStatus = HOST_STATUS_ERROR;\n    }\n  } else if (operationalStatus === HOST_STATUS_DISCOVERED) {\n    hostStatus = HOST_STATUS_DISCOVERED;\n  } else if (provisioningState) {\n    hostStatus = provisioningState;\n  } else {\n    hostStatus = HOST_STATUS_UNKNOWN;\n  }\n\n  return {\n    status: hostStatus,\n    title: HOST_STATUS_TITLES[hostStatus] || hostStatus,\n    description: HOST_STATUS_DESCRIPTIONS[hostStatus],\n  };\n};\n\ntype HostStatusProps = {\n  host: BareMetalHostKind;\n  machine?: MachineKind;\n  node?: NodeKind;\n  nodeMaintenance?: K8sResourceKind;\n};\n\nexport const getHostStatus = ({ host, nodeMaintenance }: HostStatusProps): StatusProps => {\n  const hostStatus = getBareMetalHostStatus(host);\n  if (hostStatus.status === HOST_STATUS_DEPROVISIONING) return hostStatus;\n  return getNodeMaintenanceStatus(nodeMaintenance) || hostStatus;\n};\n\nexport const isHostInProgressState = (host: BareMetalHostKind): boolean =>\n  HOST_PROGRESS_STATES.includes(getBareMetalHostStatus(host).status);\n","import { K8sResourceKind } from '@console/internal/module/k8s';\nimport { getDeletetionTimestamp } from '@console/shared/src/selectors';\nimport { getNodeMaintenancePhase } from '../selectors';\nimport {\n  NODE_STATUS_TITLES,\n  NODE_STATUS_UNDER_MAINTENANCE,\n  NODE_STATUS_STOPPING_MAINTENANCE,\n  NODE_STATUS_STARTING_MAINTENANCE,\n} from '../constants';\nimport { StatusProps } from '../components/types';\n\nexport const getNodeMaintenanceStatus = (maintenance: K8sResourceKind): StatusProps => {\n  if (!maintenance) return null;\n\n  if (getDeletetionTimestamp(maintenance)) {\n    return {\n      status: NODE_STATUS_STOPPING_MAINTENANCE,\n      title: NODE_STATUS_TITLES[NODE_STATUS_STOPPING_MAINTENANCE],\n    };\n  }\n  if (getNodeMaintenancePhase(maintenance) === 'Succeeded') {\n    return {\n      status: NODE_STATUS_UNDER_MAINTENANCE,\n      title: NODE_STATUS_TITLES[NODE_STATUS_UNDER_MAINTENANCE],\n    };\n  }\n  return {\n    status: NODE_STATUS_STARTING_MAINTENANCE,\n    title: NODE_STATUS_TITLES[NODE_STATUS_STARTING_MAINTENANCE],\n  };\n};\n","import { K8sKind } from '@console/internal/module/k8s';\n\nexport const NetworkAttachmentDefinitionModel: K8sKind = {\n  label: 'Network Attachment Definition',\n  labelPlural: 'Network Attachment Definitions',\n  apiVersion: 'v1',\n  apiGroup: 'k8s.cni.cncf.io',\n  plural: 'network-attachment-definitions',\n  namespaced: true,\n  abbr: 'NAD',\n  kind: 'NetworkAttachmentDefinition',\n  id: 'network-attachment-definition',\n  crd: true,\n  legacyPluralURL: true,\n};\n\nexport const SriovNetworkNodePolicyModel: K8sKind = {\n  label: 'SR-IOV Network Node Policy',\n  labelPlural: 'SR-IOV Network Node Policies',\n  apiVersion: 'v1',\n  apiGroup: 'sriovnetwork.openshift.io',\n  plural: 'sriovnetworknodepolicies',\n  namespaced: true,\n  abbr: 'SRNNPM', // TODO check on this\n  kind: 'SriovNetworkNodePolicy',\n  id: 'sriov-network-node-policy',\n  crd: true,\n};\n\nexport const HyperConvergedModel: K8sKind = {\n  label: 'HyperConverged Cluster',\n  labelPlural: 'HyperConverged Clusters',\n  apiVersion: 'v1alpha1',\n  apiGroup: 'hco.kubevirt.io',\n  plural: 'hyperconvergeds',\n  namespaced: true,\n  abbr: 'HCO',\n  kind: 'HyperConverged',\n  id: 'hyperconverged',\n  crd: true,\n};\n","import { Map as ImmutableMap } from 'immutable';\nimport { NetworkAttachmentDefinitionModel } from '..';\n\nexport const NetworkAttachmentDefinitionsYAMLTemplates = ImmutableMap().setIn(\n  ['default'],\n  `\napiVersion: ${NetworkAttachmentDefinitionModel.apiGroup}/${NetworkAttachmentDefinitionModel.apiVersion}\nkind: ${NetworkAttachmentDefinitionModel.kind}\nmetadata:\n  name: example\nspec:\n  config: '{}'\n`,\n);\n","import * as _ from 'lodash';\nimport {\n  Plugin,\n  ResourceNSNavItem,\n  ResourceDetailsPage,\n  ResourceListPage,\n  ModelFeatureFlag,\n  YAMLTemplate,\n  ModelDefinition,\n  RoutePage,\n} from '@console/plugin-sdk';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { FLAG_KUBEVIRT } from '@console/kubevirt-plugin/src/plugin';\nimport * as models from './models';\nimport { NetworkAttachmentDefinitionsYAMLTemplates } from './models/templates';\n\ntype ConsumedExtensions =\n  | ResourceNSNavItem\n  | ResourceDetailsPage\n  | ResourceListPage\n  | ModelFeatureFlag\n  | YAMLTemplate\n  | ModelDefinition\n  | RoutePage;\n\nconst FLAG_NET_ATTACH_DEF = 'NET_ATTACH_DEF';\n\nconst plugin: Plugin<ConsumedExtensions> = [\n  {\n    type: 'ModelDefinition',\n    properties: {\n      models: _.values(models),\n    },\n  },\n  {\n    type: 'FeatureFlag/Model',\n    properties: {\n      model: models.NetworkAttachmentDefinitionModel,\n      flag: FLAG_NET_ATTACH_DEF,\n    },\n  },\n  {\n    type: 'NavItem/ResourceNS',\n    properties: {\n      section: 'Networking',\n      componentProps: {\n        name: 'Network Attachment Definitions',\n        resource: referenceForModel(models.NetworkAttachmentDefinitionModel),\n      },\n    },\n    flags: {\n      required: [FLAG_NET_ATTACH_DEF, FLAG_KUBEVIRT],\n    },\n  },\n  {\n    type: 'Page/Resource/List',\n    properties: {\n      model: models.NetworkAttachmentDefinitionModel,\n      loader: () =>\n        import(\n          './components/network-attachment-definitions/NetworkAttachmentDefinition' /* webpackChunkName: \"network-attachment-definitions\" */\n        ).then((m) => m.NetworkAttachmentDefinitionsPage),\n    },\n  },\n  {\n    type: 'Page/Resource/Details',\n    properties: {\n      model: models.NetworkAttachmentDefinitionModel,\n      loader: () =>\n        import(\n          './components/network-attachment-definitions/NetworkAttachmentDefinitionDetailsPage' /* webpackChunkName: \"network-attachment-definitions\" */\n        ).then((m) => m.NetworkAttachmentDefinitionsDetailsPage),\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: [`/k8s/ns/:ns/${referenceForModel(models.NetworkAttachmentDefinitionModel)}/~new`],\n      loader: () =>\n        import(\n          './components/network-attachment-definitions/NetworkAttachmentDefinitionCreateYaml' /* webpackChunkName: \"network-attachment-definitions\" */\n        ).then((m) => m.default),\n      required: FLAG_NET_ATTACH_DEF,\n    },\n  },\n  {\n    type: 'YAMLTemplate',\n    properties: {\n      model: models.NetworkAttachmentDefinitionModel,\n      template: NetworkAttachmentDefinitionsYAMLTemplates.getIn(['default']),\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: [`/k8s/ns/:ns/${referenceForModel(models.NetworkAttachmentDefinitionModel)}/~new/form`],\n      loader: () =>\n        import(\n          './components/network-attachment-definitions/NetworkAttachmentDefinitionsForm' /* webpackChunkName: \"network-attachment-definitions\" */\n        ).then((m) => m.default),\n      required: FLAG_NET_ATTACH_DEF,\n    },\n  },\n];\n\nexport default plugin;\n","import { K8sKind } from '@console/internal/module/k8s';\n\nexport const NooBaaSystemModel: K8sKind = {\n  label: 'NooBaa System',\n  labelPlural: 'NooBaa Systems',\n  apiVersion: 'v1alpha1',\n  apiGroup: 'noobaa.io',\n  plural: 'noobaas',\n  abbr: 'NB',\n  namespaced: true,\n  kind: 'NooBaa',\n  id: 'noobaasystem',\n  crd: true,\n  legacyPluralURL: true,\n};\n\nexport const NooBaaBackingStoreModel: K8sKind = {\n  label: 'Backing Store',\n  labelPlural: 'Backing Stores',\n  apiVersion: 'v1alpha1',\n  apiGroup: 'noobaa.io',\n  plural: 'backingstores',\n  abbr: 'NBS',\n  namespaced: true,\n  kind: 'BackingStore',\n  id: 'noobaabackingstore',\n  crd: true,\n  legacyPluralURL: true,\n};\n\nexport const NooBaaBucketClassModel: K8sKind = {\n  label: 'Bucket Class',\n  labelPlural: 'Bucket Classes',\n  apiVersion: 'v1alpha1',\n  apiGroup: 'noobaa.io',\n  plural: 'bucketclasses',\n  abbr: 'NBC',\n  namespaced: true,\n  kind: 'BucketClass',\n  id: 'noobaabucketclasses',\n  crd: true,\n  legacyPluralURL: true,\n};\n\nexport const NooBaaObjectBucketClaimModel: K8sKind = {\n  label: 'Object Bucket Claim',\n  labelPlural: 'Object Bucket Claims',\n  apiVersion: 'v1alpha1',\n  apiGroup: 'objectbucket.io',\n  plural: 'objectbucketclaims',\n  abbr: 'OBC',\n  namespaced: true,\n  kind: 'ObjectBucketClaim',\n  id: 'objectbucketclaims',\n  crd: true,\n  legacyPluralURL: true,\n};\n\nexport const NooBaaObjectBucketModel: K8sKind = {\n  label: 'Object Bucket',\n  labelPlural: 'Object Buckets',\n  apiVersion: 'v1alpha1',\n  apiGroup: 'objectbucket.io',\n  plural: 'objectbuckets',\n  abbr: 'OB',\n  namespaced: false,\n  kind: 'ObjectBucket',\n  id: 'objectbucket',\n  crd: true,\n  legacyPluralURL: true,\n};\n","import * as _ from 'lodash';\nimport {\n  DashboardsCard,\n  DashboardsTab,\n  ModelDefinition,\n  ModelFeatureFlag,\n  Plugin,\n  ResourceClusterNavItem,\n  ResourceDetailsPage,\n  ResourceListPage,\n  ResourceNSNavItem,\n  RoutePage,\n  YAMLTemplate,\n} from '@console/plugin-sdk';\nimport { GridPosition } from '@console/shared/src/components/dashboard/DashboardGrid';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { ClusterServiceVersionModel } from '@console/operator-lifecycle-manager';\nimport { OCS_FLAG } from '@console/ceph-storage-plugin/src/features';\nimport * as models from './models';\n\ntype ConsumedExtensions =\n  | ModelFeatureFlag\n  | ModelDefinition\n  | DashboardsTab\n  | DashboardsCard\n  | ResourceNSNavItem\n  | ResourceClusterNavItem\n  | ResourceListPage\n  | ResourceDetailsPage\n  | YAMLTemplate\n  | RoutePage;\n\nconst NOOBAA_FLAG = 'NOOBAA';\n\nconst plugin: Plugin<ConsumedExtensions> = [\n  {\n    type: 'ModelDefinition',\n    properties: {\n      models: _.values(models),\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: `/k8s/ns/:ns/${ClusterServiceVersionModel.plural}/:appName/${referenceForModel(\n        models.NooBaaBucketClassModel,\n      )}/~new`,\n      loader: () =>\n        import('./components/bucket-class/create-bc' /* webpackChunkName: \"create-bc\" */).then(\n          (m) => m.default,\n        ),\n      required: NOOBAA_FLAG,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      path: `/k8s/ns/:ns/${ClusterServiceVersionModel.plural}/:appName/${referenceForModel(\n        models.NooBaaSystemModel,\n      )}/noobaa/`,\n      loader: () =>\n        import('./components/noobaa-operator/noobaa-page' /* webpackChunkName: \"create-bc\" */).then(\n          (m) => m.default,\n        ),\n      required: NOOBAA_FLAG,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: [\n        `/k8s/ns/:ns/${ClusterServiceVersionModel.plural}/:appName/${referenceForModel(\n          models.NooBaaBackingStoreModel,\n        )}/~new`,\n        `/k8s/ns/:ns/${referenceForModel(models.NooBaaBackingStoreModel)}/~new`,\n      ],\n      loader: () =>\n        import(\n          './components/create-backingstore-page/create-bs-page' /* webpackChunkName: \"create-bs\" */\n        ).then((m) => m.default),\n      required: NOOBAA_FLAG,\n    },\n  },\n  {\n    type: 'FeatureFlag/Model',\n    properties: {\n      model: models.NooBaaSystemModel,\n      flag: NOOBAA_FLAG,\n    },\n  },\n  {\n    type: 'Dashboards/Tab',\n    properties: {\n      id: 'object-service',\n      title: 'Object Service',\n    },\n    flags: {\n      required: [NOOBAA_FLAG, OCS_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Card',\n    properties: {\n      tab: 'object-service',\n      position: GridPosition.MAIN,\n      loader: () =>\n        import(\n          './components/status-card/status-card' /* webpackChunkName: \"object-service-status-card\" */\n        ).then((m) => m.default),\n    },\n    flags: {\n      required: [NOOBAA_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Card',\n    properties: {\n      tab: 'object-service',\n      position: GridPosition.LEFT,\n      loader: () =>\n        import(\n          './components/details-card/details-card' /* webpackChunkName: \"object-service-details-card\" */\n        ).then((m) => m.DetailsCard),\n    },\n    flags: {\n      required: [NOOBAA_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Card',\n    properties: {\n      tab: 'object-service',\n      position: GridPosition.LEFT,\n      loader: () =>\n        import(\n          './components/object-data-reduction-card/object-data-reduction-card' /* webpackChunkName: \"object-service-data-reduction-card\" */\n        ).then((m) => m.default),\n    },\n    flags: {\n      required: [NOOBAA_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Card',\n    properties: {\n      tab: 'object-service',\n      position: GridPosition.LEFT,\n      loader: () =>\n        import(\n          './components/buckets-card/buckets-card' /* webpackChunkName: \"object-service-buckets-card\" */\n        ).then((m) => m.BucketsCard),\n    },\n    flags: {\n      required: [NOOBAA_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Card',\n    properties: {\n      tab: 'object-service',\n      position: GridPosition.MAIN,\n      loader: () =>\n        import(\n          './components/capacity-breakdown/capacity-breakdown-card' /* webpackChunkName: \"object-service-capacity-breakdown-card\" */\n        ).then((m) => m.default),\n    },\n    flags: {\n      required: [NOOBAA_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Card',\n    properties: {\n      tab: 'object-service',\n      position: GridPosition.MAIN,\n      loader: () =>\n        import(\n          './components/data-consumption-card/data-consumption-card' /* webpackChunkName: \"object-service-data-consumption-card\" */\n        ).then((m) => m.default),\n    },\n    flags: {\n      required: [NOOBAA_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Card',\n    properties: {\n      tab: 'object-service',\n      position: GridPosition.RIGHT,\n      loader: () =>\n        import(\n          './components/activity-card/activity-card' /* webpackChunkName: \"object-service-activity-card\" */\n        ).then((m) => m.default),\n    },\n    flags: {\n      required: [NOOBAA_FLAG],\n    },\n  },\n  {\n    type: 'Dashboards/Card',\n    properties: {\n      tab: 'object-service',\n      position: GridPosition.LEFT,\n      loader: () =>\n        import(\n          './components/resource-providers-card/resource-providers-card' /* webpackChunkName: \"object-service-resource-providers-card\" */\n        ).then((m) => m.ResourceProvidersCard),\n    },\n    flags: {\n      required: [NOOBAA_FLAG],\n    },\n  },\n  {\n    type: 'NavItem/ResourceCluster',\n    properties: {\n      section: 'Storage',\n      componentProps: {\n        name: 'Object Buckets',\n        resource: models.NooBaaObjectBucketModel.plural,\n      },\n    },\n    flags: {\n      required: [NOOBAA_FLAG],\n    },\n  },\n  {\n    type: 'Page/Resource/List',\n    properties: {\n      model: models.NooBaaObjectBucketModel,\n      loader: () =>\n        import(\n          './components/object-bucket-page/object-bucket' /* webpackChunkName: \"object-bucket-page\" */\n        ).then((m) => m.ObjectBucketsPage),\n    },\n  },\n  {\n    type: 'Page/Resource/Details',\n    properties: {\n      model: models.NooBaaObjectBucketModel,\n      loader: () =>\n        import(\n          './components/object-bucket-page/object-bucket' /* webpackChunkName: \"object-bucket-page\" */\n        ).then((m) => m.ObjectBucketDetailsPage),\n    },\n  },\n  {\n    type: 'NavItem/ResourceNS',\n    properties: {\n      section: 'Storage',\n      componentProps: {\n        name: 'Object Bucket Claims',\n        resource: models.NooBaaObjectBucketClaimModel.plural,\n      },\n    },\n    flags: {\n      required: [NOOBAA_FLAG],\n    },\n  },\n  {\n    type: 'Page/Resource/List',\n    properties: {\n      model: models.NooBaaObjectBucketClaimModel,\n      loader: () =>\n        import(\n          './components/object-bucket-claim-page/object-bucket-claim' /* webpackChunkName: \"object-bucket-claim-page\" */\n        ).then((m) => m.ObjectBucketClaimsPage),\n    },\n  },\n  {\n    type: 'Page/Resource/Details',\n    properties: {\n      model: models.NooBaaObjectBucketClaimModel,\n      loader: () =>\n        import(\n          './components/object-bucket-claim-page/object-bucket-claim' /* webpackChunkName: \"object-bucket-claim-page\" */\n        ).then((m) => m.ObjectBucketClaimsDetailsPage),\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      path: `/k8s/ns/:ns/${referenceForModel(models.NooBaaObjectBucketClaimModel)}/~new/form`,\n      loader: () =>\n        import(\n          './components/object-bucket-claim-page/create-obc' /* webpackChunkName: \"create-obc\" */\n        ).then((m) => m.CreateOBCPage),\n      required: NOOBAA_FLAG,\n    },\n  },\n];\n\nexport default plugin;\n","import * as _ from 'lodash';\nimport {\n  HealthState,\n  healthPriority,\n} from '@console/shared/src/components/dashboard/status-card/states';\nimport { OperatorStatusPriority, GetOperatorsWithStatuses } from '@console/plugin-sdk';\nimport { getOperatorsStatus } from '@console/shared/src/components/dashboard/status-card/state-utils';\nimport { getSubscriptionStatus, getCSVStatus, subscriptionForCSV } from '../../status/csv-status';\nimport {\n  ClusterServiceVersionKind,\n  SubscriptionKind,\n  SubscriptionState,\n  ClusterServiceVersionStatus,\n} from '../../types';\n\nconst getOperatorStatus = (\n  subscriptionStatus: { status: SubscriptionState; title?: string },\n  csvStatus: { status: ClusterServiceVersionStatus; title?: string },\n): OperatorStatusPriority => {\n  let operatorHealth: HealthState;\n  switch (csvStatus.status) {\n    case ClusterServiceVersionStatus.Failed:\n      operatorHealth = HealthState.ERROR;\n      break;\n    case ClusterServiceVersionStatus.Pending:\n      operatorHealth = HealthState.PROGRESS;\n      break;\n    case ClusterServiceVersionStatus.Unknown:\n      operatorHealth = HealthState.UNKNOWN;\n      break;\n    default:\n      operatorHealth = HealthState.OK;\n  }\n  if (\n    operatorHealth !== HealthState.ERROR &&\n    subscriptionStatus.status === SubscriptionState.SubscriptionStateUpgradePending\n  ) {\n    return {\n      ...healthPriority[HealthState.UPDATING],\n      title: subscriptionStatus.title,\n    };\n  }\n  return {\n    ...healthPriority[operatorHealth],\n    title: csvStatus.title,\n  };\n};\n\nconst getCSVPriorityStatus = (\n  csv: ClusterServiceVersionKind,\n  subscriptions: SubscriptionKind[],\n): OperatorStatusPriority => {\n  const subscriptionStatus = getSubscriptionStatus(subscriptionForCSV(subscriptions, csv));\n  const csvStatus = getCSVStatus(csv);\n  return getOperatorStatus(subscriptionStatus, csvStatus);\n};\n\nexport const getClusterServiceVersionsWithStatuses: GetOperatorsWithStatuses<ClusterServiceVersionKind> = (\n  resources,\n) => {\n  const grouppedOperators = _.groupBy(\n    resources.clusterServiceVersions.data as ClusterServiceVersionKind[],\n    (o) => o.metadata.name,\n  );\n  return _.values(grouppedOperators).map((operators) =>\n    getOperatorsStatus<ClusterServiceVersionKind>(operators, (csv) =>\n      getCSVPriorityStatus(csv, resources.subscriptions.data as SubscriptionKind[]),\n    ),\n  );\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  GroupVersionKind,\n  referenceForGroupVersionKind,\n  resourceURL,\n  referenceFor,\n  referenceForModel,\n  K8sKind,\n  K8sResourceKind,\n} from '@console/internal/module/k8s';\nimport { PackageManifestModel } from '../models';\nimport {\n  ClusterServiceVersionKind,\n  CRDDescription,\n  APIServiceDefinition,\n  PackageManifestKind,\n  StepResource,\n  ClusterServiceVersionIcon,\n  ProvidedAPI,\n} from '../types';\nimport * as operatorLogo from '../operator.svg';\n\nexport const visibilityLabel = 'olm-visibility';\n\ntype ProvidedAPIsFor = (csv: ClusterServiceVersionKind) => ProvidedAPI[];\nexport const providedAPIsFor: ProvidedAPIsFor = (csv) =>\n  _.get(csv, 'spec.customresourcedefinitions.owned', []).concat(\n    _.get(csv, 'spec.apiservicedefinitions.owned', []),\n  );\n\nexport const referenceForProvidedAPI = (\n  desc: CRDDescription | APIServiceDefinition,\n): GroupVersionKind =>\n  _.get(desc, 'group')\n    ? referenceForGroupVersionKind((desc as APIServiceDefinition).group)(desc.version)(desc.kind)\n    : referenceForGroupVersionKind((desc as CRDDescription).name.slice(desc.name.indexOf('.') + 1))(\n        desc.version,\n      )(desc.kind);\nexport const referenceForStepResource = (resource: StepResource): GroupVersionKind =>\n  referenceForGroupVersionKind(resource.group || 'core')(resource.version)(resource.kind);\n\nexport const defaultChannelFor = (pkg: PackageManifestKind) =>\n  pkg.status.defaultChannel || pkg?.status?.channels?.[0]?.name;\nexport const installModesFor = (pkg: PackageManifestKind) => (channel: string) =>\n  pkg.status.channels.find((ch) => ch.name === channel)?.currentCSVDesc?.installModes || [];\nexport const supportedInstallModesFor = (pkg: PackageManifestKind) => (channel: string) =>\n  installModesFor(pkg)(channel).filter(({ supported }) => supported);\nexport const providedAPIsForChannel = (pkg: PackageManifestKind) => (channel: string) =>\n  _.compact(\n    _.flatten([\n      pkg.status.channels.find((ch) => ch.name === channel).currentCSVDesc.customresourcedefinitions\n        .owned,\n      pkg.status.channels.find((ch) => ch.name === channel).currentCSVDesc.apiservicedefinitions\n        .owned,\n    ]),\n  );\n\nexport const iconFor = (pkg: PackageManifestKind) => {\n  const defaultChannel = pkg?.status?.defaultChannel\n    ? pkg.status.channels?.find((ch) => ch.name === pkg.status.defaultChannel)\n    : pkg?.status?.channels?.[0];\n  if (!defaultChannel) {\n    return null;\n  }\n\n  return resourceURL(PackageManifestModel, {\n    ns: pkg?.status?.catalogSourceNamespace,\n    name: pkg.metadata.name,\n    path: 'icon',\n    queryParams: {\n      resourceVersion: [pkg.metadata.name, defaultChannel.name, defaultChannel.currentCSV].join(\n        '.',\n      ),\n    },\n  });\n};\n\nexport const ClusterServiceVersionLogo: React.SFC<ClusterServiceVersionLogoProps> = (props) => {\n  const { icon, displayName, provider, version } = props;\n  const imgSrc: string = _.isString(icon)\n    ? icon\n    : _.isEmpty(icon)\n    ? operatorLogo\n    : `data:${icon.mediatype};base64,${icon.base64data}`;\n\n  return (\n    <div className=\"co-clusterserviceversion-logo\">\n      <div className=\"co-clusterserviceversion-logo__icon\">\n        <img\n          className=\"co-catalog-item-icon__img co-catalog-item-icon__img--large\"\n          src={imgSrc}\n          alt=\"\"\n        />\n      </div>\n      <div className=\"co-clusterserviceversion-logo__name\">\n        <h1 className=\"co-clusterserviceversion-logo__name__clusterserviceversion\">\n          {displayName}\n        </h1>\n        {provider && (\n          <span className=\"co-clusterserviceversion-logo__name__provider text-muted\">{`${version ||\n            ''} provided by ${_.get(provider, 'name', provider)}`}</span>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport const providedAPIForModel = (csv: ClusterServiceVersionKind, model: K8sKind): ProvidedAPI =>\n  _.find<ProvidedAPI>(\n    providedAPIsFor(csv),\n    (crd) => referenceForProvidedAPI(crd) === referenceForModel(model),\n  );\n\nexport const parseALMExamples = (csv: ClusterServiceVersionKind) => {\n  try {\n    return JSON.parse(csv?.metadata?.annotations?.['alm-examples'] ?? '[]');\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.warn('Unable to parse ALM expamples\\n', e);\n    return [];\n  }\n};\n\nexport const exampleForModel = (csv: ClusterServiceVersionKind, model: K8sKind) =>\n  _.defaultsDeep(\n    {},\n    {\n      kind: model.kind,\n      apiVersion: `${model.apiGroup}/${model.apiVersion}`,\n    },\n    _.find(\n      parseALMExamples(csv),\n      (s: K8sResourceKind) => referenceFor(s) === referenceForModel(model),\n    ),\n  );\n\nexport type ClusterServiceVersionLogoProps = {\n  displayName: string;\n  icon: ClusterServiceVersionIcon | string;\n  provider: { name: string } | string;\n  version?: string;\n};\n\nClusterServiceVersionLogo.displayName = 'ClusterServiceVersionLogo';\n","export enum Flags {\n  OPERATOR_LIFECYCLE_MANAGER = 'OPERATOR_LIFECYCLE_MANAGER',\n}\n","import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { ClusterServiceVersionKind } from './types';\nimport { referenceForProvidedAPI, providedAPIsFor } from './components';\nimport * as operatorLogo from './operator.svg';\n\nconst isInternal = (crd: { name: string }): boolean => {\n  const internalOpListString = _.get(\n    crd,\n    ['csv', 'metadata', 'annotations', 'operators.operatorframework.io/internal-objects'],\n    '[]',\n  );\n  try {\n    const internalOpList = JSON.parse(internalOpListString); // JSON.parse fails if incorrect annotation structure\n    return internalOpList.some((op) => op === crd.name);\n  } catch {\n    /* eslint-disable-next-line no-console */\n    console.error('Failed to parse CSV annotation: Invalid JSON structure');\n    return false;\n  }\n};\nexport const normalizeClusterServiceVersions = (\n  clusterServiceVersions: ClusterServiceVersionKind[],\n): K8sResourceKind[] => {\n  const imgFor = (desc) =>\n    _.get(desc.csv, 'spec.icon')\n      ? `data:${_.get(desc.csv, 'spec.icon', [])[0].mediatype};base64,${\n          _.get(desc.csv, 'spec.icon', [])[0].base64data\n        }`\n      : operatorLogo;\n\n  const formatTileDescription = (csvDescription: string): string =>\n    `## Operator Description\\n${csvDescription}`;\n\n  const operatorProvidedAPIs: K8sResourceKind[] = _.flatten(\n    clusterServiceVersions.map((csv) => providedAPIsFor(csv).map((desc) => ({ ...desc, csv }))),\n  )\n    .reduce(\n      (all, cur) =>\n        all.find((v) => referenceForProvidedAPI(v) === referenceForProvidedAPI(cur))\n          ? all\n          : all.concat([cur]),\n      [],\n    )\n    // remove internal CRDs\n    .filter((crd) => !isInternal(crd))\n    .map((desc) => ({\n      // NOTE: Faking a real k8s object to avoid fetching all CRDs\n      obj: {\n        metadata: {\n          uid: `${desc.csv.metadata.uid}-${desc.displayName}`,\n          creationTimestamp: desc.csv.metadata.creationTimestamp,\n        },\n        ...desc,\n      },\n      kind: 'InstalledOperator',\n      tileName: desc.displayName || desc.kind,\n      tileIconClass: null,\n      capabilityLevel: _.get(desc, ['csv', 'metadata', 'annotations', 'capabilities'], '')\n        .toLowerCase()\n        .replace(/\\s/g, ''),\n      tileImgUrl: imgFor(desc),\n      tileDescription: desc.description,\n      markdownDescription: formatTileDescription(desc.csv.spec.description),\n      tileProvider: desc.csv.spec.provider.name,\n      tags: desc.csv.spec.keywords,\n      createLabel: 'Create',\n      href: `/ns/${desc.csv.metadata.namespace}/clusterserviceversions/${\n        desc.csv.metadata.name\n      }/${referenceForProvidedAPI(desc)}/~new`,\n      supportUrl: desc.csv.metadata.annotations?.['marketplace.openshift.io/support-workflow'],\n      longDescription: `This resource is provided by ${desc.csv.spec.displayName}, a Kubernetes Operator enabled by the Operator Lifecycle Manager.`,\n      documentationUrl: _.get(\n        (desc.csv.spec.links || []).find(({ name }) => name === 'Documentation'),\n        'url',\n      ),\n    }));\n\n  return operatorProvidedAPIs;\n};\n","export * from './models';\nexport * from './components';\nexport * from './types';\n","import { K8sKind } from '@console/internal/module/k8s';\n\nexport const OperatorSourceModel: K8sKind = {\n  kind: 'OperatorSource',\n  label: 'OperatorSource',\n  labelPlural: 'OperatorSource',\n  apiGroup: 'operators.coreos.com',\n  apiVersion: 'v1',\n  abbr: 'OSRC',\n  namespaced: true,\n  crd: true,\n  plural: 'operatorsources',\n};\n\nexport const CatalogSourceModel: K8sKind = {\n  kind: 'CatalogSource',\n  label: 'CatalogSource',\n  labelPlural: 'CatalogSources',\n  apiGroup: 'operators.coreos.com',\n  apiVersion: 'v1alpha1',\n  abbr: 'CS',\n  namespaced: true,\n  crd: true,\n  plural: 'catalogsources',\n};\n\nexport const PackageManifestModel: K8sKind = {\n  kind: 'PackageManifest',\n  label: 'PackageManifest',\n  labelPlural: 'PackageManifests',\n  apiGroup: 'packages.operators.coreos.com',\n  apiVersion: 'v1',\n  abbr: 'PM',\n  namespaced: true,\n  crd: true,\n  plural: 'packagemanifests',\n};\n\nexport const ClusterServiceVersionModel: K8sKind = {\n  kind: 'ClusterServiceVersion',\n  label: 'ClusterServiceVersion',\n  labelPlural: 'ClusterServiceVersions',\n  apiGroup: 'operators.coreos.com',\n  apiVersion: 'v1alpha1',\n  abbr: 'CSV',\n  namespaced: true,\n  crd: true,\n  plural: 'clusterserviceversions',\n  propagationPolicy: 'Foreground',\n  legacyPluralURL: true,\n};\n\nexport const InstallPlanModel: K8sKind = {\n  kind: 'InstallPlan',\n  label: 'InstallPlan',\n  labelPlural: 'InstallPlans',\n  apiGroup: 'operators.coreos.com',\n  apiVersion: 'v1alpha1',\n  abbr: 'IP',\n  namespaced: true,\n  crd: true,\n  plural: 'installplans',\n  legacyPluralURL: true,\n};\n\nexport const SubscriptionModel: K8sKind = {\n  kind: 'Subscription',\n  label: 'Subscription',\n  labelPlural: 'Subscriptions',\n  apiGroup: 'operators.coreos.com',\n  apiVersion: 'v1alpha1',\n  abbr: 'SUB',\n  namespaced: true,\n  crd: true,\n  plural: 'subscriptions',\n  legacyPluralURL: true,\n};\n\nexport const OperatorGroupModel: K8sKind = {\n  kind: 'OperatorGroup',\n  label: 'OperatorGroup',\n  labelPlural: 'OperatorGroups',\n  apiGroup: 'operators.coreos.com',\n  apiVersion: 'v1',\n  abbr: 'OG',\n  namespaced: true,\n  crd: true,\n  plural: 'operatorgroups',\n};\n\nexport const OperatorHubModel: K8sKind = {\n  kind: 'OperatorHub',\n  label: 'OperatorHub',\n  labelPlural: 'OperatorHubs',\n  apiGroup: 'config.openshift.io',\n  apiVersion: 'v1',\n  abbr: 'OH',\n  namespaced: false,\n  crd: true,\n  plural: 'operatorhubs',\n};\n","module.exports = __webpack_public_path__ + \"assets/operator.svg\";","import * as _ from 'lodash';\nimport {\n  Plugin,\n  ModelDefinition,\n  ModelFeatureFlag,\n  HrefNavItem,\n  ResourceNSNavItem,\n  ResourceListPage,\n  ResourceDetailsPage,\n  RoutePage,\n  DevCatalogModel,\n  DashboardsOverviewHealthOperator,\n} from '@console/plugin-sdk';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { FLAGS } from '@console/shared/src/constants';\nimport { normalizeClusterServiceVersions } from './dev-catalog';\nimport * as models from './models';\nimport { Flags } from './const';\nimport { getClusterServiceVersionsWithStatuses } from './components/dashboard/utils';\nimport { ClusterServiceVersionKind } from './types';\n\nimport './style.scss';\n\ntype ConsumedExtensions =\n  | ModelDefinition\n  | ModelFeatureFlag\n  | HrefNavItem\n  | ResourceNSNavItem\n  | ResourceListPage\n  | ResourceDetailsPage\n  | RoutePage\n  | DevCatalogModel\n  | DashboardsOverviewHealthOperator<ClusterServiceVersionKind>;\n\nconst plugin: Plugin<ConsumedExtensions> = [\n  {\n    type: 'ModelDefinition',\n    properties: {\n      models: _.values(models),\n    },\n  },\n  {\n    type: 'FeatureFlag/Model',\n    properties: {\n      model: models.ClusterServiceVersionModel,\n      flag: Flags.OPERATOR_LIFECYCLE_MANAGER,\n    },\n  },\n  {\n    type: 'DevCatalogModel',\n    properties: {\n      model: models.ClusterServiceVersionModel,\n      flag: Flags.OPERATOR_LIFECYCLE_MANAGER,\n      normalize: normalizeClusterServiceVersions,\n    },\n  },\n  {\n    type: 'NavItem/Href',\n    properties: {\n      section: 'Operators',\n      componentProps: {\n        name: 'OperatorHub',\n        href: '/operatorhub',\n      },\n    },\n  },\n  {\n    type: 'NavItem/ResourceNS',\n    properties: {\n      section: 'Operators',\n      componentProps: {\n        name: 'Installed Operators',\n        resource: referenceForModel(models.ClusterServiceVersionModel),\n        startsWith: [\n          models.ClusterServiceVersionModel.apiGroup,\n          models.ClusterServiceVersionModel.plural,\n        ],\n      },\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: `/k8s/ns/:ns/${referenceForModel(\n        models.ClusterServiceVersionModel,\n      )}/:appName/:plural/~new`,\n      loader: async () =>\n        (\n          await import(\n            './components/operand/create-operand' /* webpackChunkName: \"create-operand\" */\n          )\n        ).CreateOperandPage,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: `/k8s/ns/:ns/${models.ClusterServiceVersionModel.plural}/:appName/:plural/~new`,\n      loader: async () =>\n        (\n          await import(\n            './components/operand/create-operand' /* webpackChunkName: \"create-operand\" */\n          )\n        ).CreateOperandPage,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      path: `/k8s/ns/:ns/${models.ClusterServiceVersionModel.plural}/:appName/:plural/:name`,\n      loader: async () =>\n        (await import('./components/operand' /* webpackChunkName: \"operand\" */)).OperandDetailsPage,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      path: `/k8s/ns/:ns/${referenceForModel(\n        models.ClusterServiceVersionModel,\n      )}/:appName/:plural/:name`,\n      loader: async () =>\n        (await import('./components/operand' /* webpackChunkName: \"operand\" */)).OperandDetailsPage,\n    },\n  },\n  {\n    type: 'Page/Resource/List',\n    properties: {\n      model: models.SubscriptionModel,\n      loader: async () =>\n        (await import('./components/subscription' /* webpackChunkName: \"subscriptions\" */))\n          .SubscriptionsPage,\n    },\n  },\n  {\n    type: 'Page/Resource/Details',\n    properties: {\n      model: models.SubscriptionModel,\n      loader: async () =>\n        (await import('./components/subscription' /* webpackChunkName: \"subscriptions\" */))\n          .SubscriptionDetailsPage,\n    },\n  },\n  {\n    type: 'Page/Resource/List',\n    properties: {\n      model: models.ClusterServiceVersionModel,\n      loader: async () =>\n        (\n          await import(\n            './components/clusterserviceversion' /* webpackChunkName: \"clusterserviceversion\" */\n          )\n        ).ClusterServiceVersionsPage,\n    },\n  },\n  {\n    type: 'Page/Resource/Details',\n    properties: {\n      model: models.ClusterServiceVersionModel,\n      loader: async () =>\n        (\n          await import(\n            './components/clusterserviceversion' /* webpackChunkName: \"clusterserviceversion\" */\n          )\n        ).ClusterServiceVersionsDetailsPage,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: `/k8s/ns/:ns/${models.SubscriptionModel.plural}/~new`,\n      loader: async () =>\n        (\n          await import(\n            './components/catalog-source' /* webpackChunkName: \"create-subscription-yaml\" */\n          )\n        ).CreateSubscriptionYAML,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: `/k8s/ns/:ns/${models.ClusterServiceVersionModel.plural}/:appName/:plural/~new`,\n      loader: async () =>\n        (\n          await import(\n            './components/operand/create-operand' /* webpackChunkName: \"create-operand\" */\n          )\n        ).CreateOperandPage,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: '/operatorhub/all-namespaces',\n      loader: async () =>\n        (\n          await import(\n            './components/operator-hub/operator-hub-page' /* webpackChunkName: \"operator-hub\" */\n          )\n        ).OperatorHubPage,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: '/operatorhub/ns/:ns',\n      loader: async () =>\n        (\n          await import(\n            './components/operator-hub/operator-hub-page' /* webpackChunkName: \"operator-hub\" */\n          )\n        ).OperatorHubPage,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: '/operatorhub/subscribe',\n      loader: async () =>\n        (\n          await import(\n            './components/operator-hub/operator-hub-subscribe' /* webpackChunkName: \"operator-hub-subscribe\" */\n          )\n        ).OperatorHubSubscribePage,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: `/k8s/ns/:ns/${models.SubscriptionModel.plural}/~new`,\n      loader: async () =>\n        (\n          await import(\n            './components/catalog-source' /* webpackChunkName: \"create-subscription-yaml\" */\n          )\n        ).CreateSubscriptionYAML,\n    },\n  },\n  {\n    type: 'Page/Resource/Details',\n    properties: {\n      model: models.OperatorHubModel,\n      loader: async () =>\n        (await import('./components/operator-hub/operator-hub-details')).OperatorHubDetailsPage,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: `/k8s/cluster/${referenceForModel(models.CatalogSourceModel)}/~new`,\n      loader: async () => (await import('./components/create-catalog-source')).CreateCatalogSource,\n    },\n  },\n  {\n    type: 'Page/Route',\n    properties: {\n      exact: true,\n      path: `/k8s/ns/:ns/${referenceForModel(models.CatalogSourceModel)}/~new`,\n      loader: async () => (await import('./components/create-catalog-source')).CreateCatalogSource,\n    },\n  },\n  {\n    type: 'Page/Resource/Details',\n    properties: {\n      model: models.InstallPlanModel,\n      loader: async () =>\n        (await import('./components/install-plan' /* webpackChunkName: \"install-plan\" */))\n          .InstallPlanDetailsPage,\n    },\n  },\n  {\n    type: 'Page/Resource/List',\n    properties: {\n      model: models.InstallPlanModel,\n      loader: async () =>\n        (await import('./components/install-plan' /* webpackChunkName: \"install-plan\" */))\n          .InstallPlansPage,\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Health/Operator',\n    properties: {\n      title: 'Operators',\n      resources: [\n        {\n          kind: referenceForModel(models.ClusterServiceVersionModel),\n          isList: true,\n          prop: 'clusterServiceVersions',\n        },\n        {\n          kind: referenceForModel(models.SubscriptionModel),\n          prop: 'subscriptions',\n          isList: true,\n        },\n      ],\n      getOperatorsWithStatuses: getClusterServiceVersionsWithStatuses,\n      operatorRowLoader: async () =>\n        (\n          await import(\n            './components/dashboard/csv-status' /* webpackChunkName: \"csv-dashboard-status\" */\n          )\n        ).default,\n    },\n    flags: {\n      required: [FLAGS.CAN_LIST_OPERATOR_GROUP],\n    },\n  },\n];\n\nexport default plugin;\n","import * as _ from 'lodash';\nimport { getName } from '@console/shared/src/selectors/common';\nimport {\n  ClusterServiceVersionKind,\n  SubscriptionKind,\n  SubscriptionState,\n  ClusterServiceVersionPhase,\n  ClusterServiceVersionStatus,\n} from '../types';\n\nconst pedingPhases = [\n  ClusterServiceVersionPhase.CSVPhasePending,\n  ClusterServiceVersionPhase.CSVPhaseInstalling,\n  ClusterServiceVersionPhase.CSVPhaseReplacing,\n  ClusterServiceVersionPhase.CSVPhaseDeleting,\n];\n\nexport const subscriptionForCSV = (\n  subscriptions: SubscriptionKind[],\n  csv: ClusterServiceVersionKind,\n): SubscriptionKind =>\n  _.find(subscriptions, {\n    metadata: {\n      namespace: _.get(csv, ['metadata', 'annotations', 'olm.operatorNamespace']),\n    },\n    status: {\n      installedCSV: getName(csv),\n    },\n  } as any); // 'as any' to supress typescript error caused by lodash;\n\nexport const getCSVStatus = (\n  csv: ClusterServiceVersionKind,\n): { status: ClusterServiceVersionStatus; title: string } => {\n  const statusPhase = _.get(csv, 'status.phase', ClusterServiceVersionPhase.CSVPhaseUnknown);\n  let status: ClusterServiceVersionStatus;\n  if (pedingPhases.includes(statusPhase)) {\n    status = ClusterServiceVersionStatus.Pending;\n  } else {\n    switch (statusPhase) {\n      case ClusterServiceVersionPhase.CSVPhaseSucceeded:\n        status = ClusterServiceVersionStatus.OK;\n        break;\n      case ClusterServiceVersionPhase.CSVPhaseFailed:\n        status = ClusterServiceVersionStatus.Failed;\n        break;\n      default:\n        return {\n          status: ClusterServiceVersionStatus.Unknown,\n          title: statusPhase,\n        };\n    }\n  }\n  return {\n    status,\n    title: statusPhase,\n  };\n};\n\nexport const getSubscriptionStatus = (\n  subscription: SubscriptionKind,\n): { status: SubscriptionState; title?: string } => {\n  const state = _.get(subscription, 'status.state', SubscriptionState.SubscriptionStateNone);\n  let title: string;\n  switch (state) {\n    case SubscriptionState.SubscriptionStateUpgradeAvailable:\n      title = 'Upgrade available';\n      break;\n    case SubscriptionState.SubscriptionStateUpgradePending:\n      title = 'Upgrading';\n      break;\n    case SubscriptionState.SubscriptionStateAtLatest:\n      title = 'Up to date';\n      break;\n    default:\n      title = '';\n  }\n  return { status: state, title };\n};\n","// extracted by mini-css-extract-plugin","import {\n  K8sResourceCommon,\n  K8sResourceCondition,\n  K8sResourceKind,\n  OwnerReference,\n  Selector,\n} from '@console/internal/module/k8s';\nimport { Descriptor } from './components/descriptors/types';\n\nexport enum AppCatalog {\n  rhOperators = 'rh-operators',\n}\n\nexport enum ClusterServiceVersionPhase {\n  CSVPhaseNone = '',\n  CSVPhasePending = 'Pending',\n  CSVPhaseInstallReady = 'InstallReady',\n  CSVPhaseInstalling = 'Installing',\n  CSVPhaseSucceeded = 'Succeeded',\n  CSVPhaseFailed = 'Failed',\n  CSVPhaseUnknown = 'Unknown',\n  CSVPhaseReplacing = 'Replacing',\n  CSVPhaseDeleting = 'Deleting',\n}\n\nexport enum CSVConditionReason {\n  CSVReasonRequirementsUnknown = 'RequirementsUnknown',\n  CSVReasonRequirementsNotMet = 'RequirementsNotMet',\n  CSVReasonRequirementsMet = 'AllRequirementsMet',\n  CSVReasonOwnerConflict = 'OwnerConflict',\n  CSVReasonComponentFailed = 'InstallComponentFailed',\n  CSVReasonInvalidStrategy = 'InvalidInstallStrategy',\n  CSVReasonWaiting = 'InstallWaiting',\n  CSVReasonInstallSuccessful = 'InstallSucceeded',\n  CSVReasonInstallCheckFailed = 'InstallCheckFailed',\n  CSVReasonComponentUnhealthy = 'ComponentUnhealthy',\n  CSVReasonBeingReplaced = 'BeingReplaced',\n  CSVReasonReplaced = 'Replaced',\n  CSVReasonCopied = 'Copied',\n}\n\nexport enum InstallPlanApproval {\n  Automatic = 'Automatic',\n  Manual = 'Manual',\n}\n\nexport enum InstallModeType {\n  InstallModeTypeOwnNamespace = 'OwnNamespace',\n  InstallModeTypeSingleNamespace = 'SingleNamespace',\n  InstallModeTypeMultiNamespace = 'MultiNamespace',\n  InstallModeTypeAllNamespaces = 'AllNamespaces',\n}\n\nexport enum SubscriptionState {\n  SubscriptionStateNone = '',\n  SubscriptionStateFailed = 'UpgradeFailed',\n  SubscriptionStateUpgradeAvailable = 'UpgradeAvailable',\n  SubscriptionStateUpgradePending = 'UpgradePending',\n  SubscriptionStateAtLatest = 'AtLatestKnown',\n}\n\nexport enum ClusterServiceVersionStatus {\n  Failed = 'Failed',\n  OK = 'OK',\n  Pending = 'Pending',\n  Unknown = 'Unknown',\n}\n\nexport type CRDDescription = {\n  name: string;\n  version: string;\n  kind: string;\n  displayName: string;\n  description?: string;\n  specDescriptors?: Descriptor[];\n  statusDescriptors?: Descriptor[];\n  resources?: {\n    name?: string;\n    version: string;\n    kind: string;\n  }[];\n};\n\nexport type APIServiceDefinition = {\n  name: string;\n  group: string;\n  version: string;\n  kind: string;\n  deploymentName: string;\n  containerPort: number;\n  displayName: string;\n  description?: string;\n  specDescriptors?: Descriptor[];\n  statusDescriptors?: Descriptor[];\n  resources?: {\n    name?: string;\n    version: string;\n    kind: string;\n  }[];\n};\n\nexport type ProvidedAPI = CRDDescription | APIServiceDefinition;\n\nexport type RequirementStatus = {\n  group: string;\n  version: string;\n  kind: string;\n  name: string;\n  status: string;\n  uuid?: string;\n};\n\nexport type ClusterServiceVersionIcon = { base64data: string; mediatype: string };\n\nexport type ClusterServiceVersionKind = {\n  apiVersion: 'operators.coreos.com/v1alpha1';\n  kind: 'ClusterServiceVersion';\n  spec: {\n    install: {\n      strategy: 'Deployment';\n      spec: {\n        permissions: {\n          serviceAccountName: string;\n          rules: { apiGroups: string[]; resources: string[]; verbs: string[] }[];\n        }[];\n        deployments: { name: string; spec: any }[];\n      };\n    };\n    customresourcedefinitions?: { owned?: CRDDescription[]; required?: CRDDescription[] };\n    apiservicedefinitions?: { owned?: APIServiceDefinition[]; required?: APIServiceDefinition[] };\n    replaces?: string;\n    installModes: { type: InstallModeType; supported: boolean }[];\n    displayName?: string;\n    description?: string;\n    provider?: { name: string };\n    version?: string;\n    icon?: ClusterServiceVersionIcon[];\n  };\n  status?: {\n    phase: ClusterServiceVersionPhase;\n    reason: CSVConditionReason;\n    requirementStatus?: RequirementStatus[];\n  };\n} & K8sResourceKind;\n\nexport type StepResource = {\n  group: string;\n  version: string;\n  kind: string;\n  name: string;\n  manifest?: string;\n};\n\nexport type Step = {\n  resolving: string;\n  resource: StepResource;\n  status: 'Unknown' | 'NotPresent' | 'Present' | 'Created';\n};\n\nexport enum InstallPlanPhase {\n  InstallPlanPhaseNone = '',\n  InstallPlanPhasePlanning = 'Planning',\n  InstallPlanPhaseRequiresApproval = 'RequiresApproval',\n  InstallPlanPhaseInstalling = 'Installing',\n  InstallPlanPhaseComplete = 'Complete',\n  InstallPlanPhaseFailed = 'Failed',\n}\n\nexport type InstallPlanKind = {\n  spec: {\n    clusterServiceVersionNames: string[];\n    approval: InstallPlanApproval;\n    approved?: boolean;\n  };\n  status?: {\n    phase: InstallPlanPhase;\n    catalogSources: string[];\n    plan: Step[];\n    conditions?: K8sResourceCondition[];\n  };\n} & K8sResourceCommon;\n\nexport type SubscriptionKind = {\n  apiVersion: 'operators.coreos.com/v1alpha1';\n  kind: 'Subscription';\n  spec: {\n    source: string;\n    name: string;\n    channel?: string;\n    startingCSV?: string;\n    sourceNamespace?: string;\n    installPlanApproval?: InstallPlanApproval;\n  };\n  status?: {\n    installedCSV?: string;\n    installplan?: OwnerReference;\n    state?: SubscriptionState;\n  };\n} & K8sResourceKind;\n\nexport type CatalogSourceKind = {\n  apiVersion: 'operators.coreos.com/v1alpha1';\n  kind: 'CatalogSource';\n  spec: {\n    name: string;\n    sourceType: 'internal' | 'grpc' | 'configMap';\n    configMap?: string;\n    secrets?: string[];\n    displayName?: string;\n    description?: string;\n    publisher?: string;\n    icon?: { mediatype: string; data: string };\n  };\n} & K8sResourceKind;\n\nexport type PackageManifestKind = {\n  apiVersion: 'packages.operators.coreos.com/v1';\n  kind: 'PackageManifest';\n  spec: {};\n  status: {\n    catalogSource: string;\n    catalogSourceNamespace: string;\n    catalogSourceDisplayName: string;\n    catalogSourcePublisher: string;\n    provider: {\n      name: string;\n    };\n    packageName: string;\n    channels: {\n      name: string;\n      currentCSV: string;\n      currentCSVDesc: {\n        annotations?: any;\n        description?: string;\n        displayName: string;\n        icon: { mediatype: string; base64data: string }[];\n        version: string;\n        provider: {\n          name: string;\n        };\n        installModes: { type: InstallModeType; supported: boolean }[];\n        customresourcedefinitions?: { owned?: CRDDescription[]; required?: CRDDescription[] };\n        apiservicedefinitions?: {\n          owned?: APIServiceDefinition[];\n          required?: APIServiceDefinition[];\n        };\n      };\n    }[];\n    defaultChannel: string;\n  };\n} & K8sResourceKind;\n\nexport type OperatorGroupKind = {\n  apiVersion: 'operators.coreos.com/v1';\n  kind: 'OperatorGroup';\n  spec?: {\n    selector?: Selector;\n    targetNamespaces?: string[];\n    serviceAccount?: K8sResourceKind;\n  };\n  status?: {\n    namespaces?: string[];\n    lastUpdated: string;\n  };\n} & K8sResourceKind;\n","export * from './notification-drawer';\n","export { default as NotificationDrawer } from './notification-drawer';\nexport { default as NotificationDrawerHeading } from './notification-drawer-heading';\nexport { default as NotificationEntry, NotificationTypes } from './notification-entry';\nexport { default as NotificationCategory } from './notification-category';\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { Badge } from '@patternfly/react-core';\n\nconst NotificationCategory: React.FC<NotificationCategoryProps> = ({\n  label,\n  count,\n  isExpanded,\n  children,\n  onExpandContents,\n}) => (\n  <section\n    className={classNames('query-pf-c-notification-drawer__group', {\n      'pf-m-expanded': isExpanded,\n    })}\n  >\n    <button\n      className=\"pf-c-notification-drawer__group-toggle\"\n      aria-expanded={isExpanded}\n      onClick={() => onExpandContents(!isExpanded)}\n    >\n      <div className=\"pf-c-notification-drawer__group-toggle-title\">{label}</div>\n      <div className=\"pf-c-notification-drawer__group-toggle-count\">\n        <Badge isRead>{count}</Badge>\n      </div>\n      <span className=\"pf-c-notification-drawer__group-toggle-icon\">\n        <i\n          className={classNames({\n            'fas fa-angle-down': isExpanded,\n            'fas fa-angle-right': !isExpanded,\n          })}\n          aria-hidden={!isExpanded}\n        />\n      </span>\n    </button>\n    <ul className=\"pf-c-notification-drawer__list\" hidden={!isExpanded}>\n      {children}\n    </ul>\n  </section>\n);\n\ntype NotificationCategoryProps = {\n  children: React.ReactNode;\n  count: number;\n  isExpanded: boolean;\n  label: string;\n  onExpandContents: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport default NotificationCategory;\n","import * as React from 'react';\n\nconst NotificationDrawerHeading: React.FC<NotificationDrawerHeadingProps> = ({\n  count,\n  children,\n}) => (\n  <div className=\"pf-c-notification-drawer\">\n    <div className=\"pf-c-notification-drawer__header\">\n      <h1 className=\"pf-c-notification-drawer__header-title\">Notifications</h1>\n      {count && (\n        <span className=\"pf-c-notification-drawer__header-status\">{`${count} unread`}</span>\n      )}\n    </div>\n    <div className=\"pf-c-notification-drawer__body\">\n      <div className=\"pf-c-notification-drawer__group-list\">{children}</div>\n    </div>\n  </div>\n);\n\ntype NotificationDrawerHeadingProps = {\n  children: React.ReactNode;\n  count?: number;\n};\n\nexport default NotificationDrawerHeading;\n","import * as React from 'react';\nimport {\n  Drawer,\n  DrawerContent,\n  DrawerPanelContent,\n  DrawerPanelBody,\n} from '@patternfly/react-core/dist/js/experimental/components/Drawer';\n\nimport NotificationDrawerHeading from './notification-drawer-heading';\n\nconst NotificationDrawer: React.FC<NotificationDrawerProps> = ({\n  isExpanded,\n  isInline,\n  children,\n  notificationEntries,\n  className,\n}) => {\n  const panelContent = (\n    <DrawerPanelContent className={className}>\n      <NotificationDrawerHeading>{notificationEntries}</NotificationDrawerHeading>\n      <DrawerPanelBody noPadding />\n    </DrawerPanelContent>\n  );\n  return (\n    <Drawer isExpanded={isExpanded} isInline={isInline}>\n      <DrawerContent panelContent={panelContent}>{children}</DrawerContent>\n    </Drawer>\n  );\n};\n\nNotificationDrawer.displayName = 'NotificationDrawer';\n\nexport type NotificationDrawerProps = {\n  isInline: boolean;\n  isExpanded: boolean;\n  notificationEntries?: JSX.Element[];\n  count?: number;\n  children: React.ReactNode;\n  className: string;\n};\n\nexport default NotificationDrawer;\n","import * as classNames from 'classnames';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  YellowExclamationTriangleIcon,\n  GreenCheckCircleIcon,\n  BlueInfoCircleIcon,\n  RedExclamationCircleIcon,\n} from '@console/shared';\nimport { ArrowCircleUpIcon } from '@patternfly/react-icons';\nimport { global_info_color_100 as blueInfoColor } from '@patternfly/react-tokens';\nimport { history, Timestamp } from '@console/internal/components/utils';\n\nexport enum NotificationTypes {\n  info = 'info',\n  warning = 'warning',\n  critical = 'danger',\n  success = 'success',\n  update = 'update',\n}\n\nconst NotificationIcon: React.FC<NotificationIconTypes> = ({ type }) => {\n  switch (type) {\n    case NotificationTypes.update:\n      return <ArrowCircleUpIcon color={blueInfoColor.value} />;\n    case NotificationTypes.success:\n      return <GreenCheckCircleIcon />;\n    case NotificationTypes.critical:\n      return <RedExclamationCircleIcon />;\n    case NotificationTypes.warning:\n      return <YellowExclamationTriangleIcon />;\n    case NotificationTypes.info:\n    default:\n      return <BlueInfoCircleIcon />;\n  }\n};\n\nconst NotificationAction: React.FC<NotificationActionProps> = ({ onClick, text, path }) => (\n  <div className=\"pf-c-notification-drawer__header-action\">\n    <Link\n      to={path}\n      onClick={(e) => {\n        e.stopPropagation();\n        onClick(e);\n      }}\n    >\n      {text}\n    </Link>\n  </div>\n);\n\nconst NotificationEntry: React.FC<NotificationEntryProps> = ({\n  actionText,\n  actionPath,\n  title,\n  description,\n  isRead = false,\n  timestamp,\n  targetPath,\n  toggleNotificationDrawer,\n  type,\n}) => (\n  <li\n    className={classNames(`pf-c-notification-drawer__list-item pf-m-hoverable pf-m-${type}`, {\n      'pf-m-read': isRead,\n    })}\n    tabIndex={0}\n    onClick={\n      targetPath\n        ? () => {\n            history.push(targetPath);\n            toggleNotificationDrawer();\n          }\n        : null\n    }\n  >\n    <div className=\"pf-c-notification-drawer__list-item-header\">\n      <span className=\"pf-c-notification-drawer__list-item-header-icon\">\n        <NotificationIcon type={type} />\n      </span>\n      <h4 className=\"pf-c-notification-drawer__list-item-header-title\">\n        <span className=\"pf-screen-reader\">{`${_.capitalize(type)} notification:`}</span>\n        {title}\n      </h4>\n      {actionText && actionPath && (\n        <NotificationAction\n          text={actionText}\n          path={actionPath}\n          onClick={toggleNotificationDrawer}\n        />\n      )}\n    </div>\n    <div className=\"pf-c-notification-drawer__list-item-description\">{description}</div>\n    <div className=\"pf-c-notification-drawer__list-item-timestamp\">\n      {timestamp && <Timestamp simple timestamp={timestamp} />}\n    </div>\n  </li>\n);\n\nexport type NotificationEntryProps = {\n  actionText?: string;\n  actionPath?: string;\n  description: string;\n  isRead?: boolean;\n  targetPath?: string;\n  timestamp?: string;\n  title: string;\n  toggleNotificationDrawer?: () => any;\n  type: NotificationTypes;\n};\n\ntype NotificationIconTypes = {\n  type: NotificationTypes;\n};\n\ntype NotificationActionProps = {\n  onClick: (event: React.MouseEvent<HTMLElement>) => void;\n  text: string;\n  path: string;\n};\n\nexport default NotificationEntry;\n","export * from './components';\n","// Polyfills. Mostly for IE11\nimport 'core-js/es6/map';\nimport 'core-js/es6/promise';\nimport 'core-js/es6/reflect';\nimport 'core-js/fn/array/find';\nimport 'core-js/fn/array/includes';\nimport 'core-js/fn/object/assign';\nimport 'core-js/fn/string/ends-with';\nimport 'core-js/fn/string/includes';\nimport 'core-js/fn/string/pad-start';\nimport 'core-js/fn/string/starts-with';\nimport 'url-polyfill';\n","import { action } from 'typesafe-actions';\n\nenum ActionType {\n  SetCreateProjectMessage = 'setCreateProjectMessage',\n  SetClusterID = 'setClusterID',\n  SetUser = 'setUser',\n  SetConsoleLinks = 'setConsoleLinks',\n}\n\nexport const setClusterID = (clusterID: string) => action(ActionType.SetClusterID, { clusterID });\nexport const setUser = (user: any) => action(ActionType.SetUser, { user });\nexport const setCreateProjectMessage = (message: string) =>\n  action(ActionType.SetCreateProjectMessage, { message });\nexport const setConsoleLinks = (consoleLinks: string[]) =>\n  action(ActionType.SetConsoleLinks, { consoleLinks });\n","import { action, ActionType as Action } from 'typesafe-actions';\nimport { Dispatch } from 'react-redux';\n\nimport { coFetchJSON } from '../co-fetch';\nimport { k8sBasePath } from '../module/k8s/k8s';\nimport { isWatchActive, RESULTS_TYPE, RequestMap } from '../reducers/dashboards';\nimport { RootState } from '../redux';\nimport { getPrometheusURL, PrometheusEndpoint } from '../components/graphs/helpers';\nimport { PrometheusResponse } from '../components/graphs';\n\nexport enum ActionType {\n  StopWatch = 'stopWatch',\n  SetData = 'setData',\n  ActivateWatch = 'activateWatch',\n  UpdateWatchTimeout = 'updateWatchTimeout',\n  UpdateWatchInFlight = 'updateWatchInFlight',\n  SetError = 'setError',\n}\n\nconst REFRESH_TIMEOUT = 5000;\n\nexport const stopWatch = (type: RESULTS_TYPE, key: string) =>\n  action(ActionType.StopWatch, { type, key });\nexport const setData = (type: RESULTS_TYPE, key: string, data) =>\n  action(ActionType.SetData, { type, key, data });\nexport const activateWatch = (type: RESULTS_TYPE, key: string) =>\n  action(ActionType.ActivateWatch, { type, key });\nexport const updateWatchTimeout = (type: RESULTS_TYPE, key: string, timeout: NodeJS.Timer) =>\n  action(ActionType.UpdateWatchTimeout, { type, key, timeout });\nexport const updateWatchInFlight = (type: RESULTS_TYPE, key: string, inFlight: boolean) =>\n  action(ActionType.UpdateWatchInFlight, { type, key, inFlight });\nexport const setError = (type: RESULTS_TYPE, key: string, error) =>\n  action(ActionType.SetError, { type, key, error });\n\nconst dashboardsActions = {\n  stopWatch,\n  setData,\n  activateWatch,\n  updateWatchTimeout,\n  updateWatchInFlight,\n  setError,\n};\n\nexport const getQueryKey = (query: string, timespan?: number): string =>\n  timespan ? `${query}@${timespan}` : query;\n\nexport const getPrometheusQueryResponse = (\n  prometheusResults: RequestMap<PrometheusResponse>,\n  query: string,\n  timespan?: number,\n): [PrometheusResponse, any] => {\n  const queryKey = getQueryKey(query, timespan);\n  const data = prometheusResults.getIn([queryKey, 'data']);\n  const loadError = prometheusResults.getIn([queryKey, 'loadError']);\n  return [data, loadError];\n};\n\nconst fetchPeriodically: FetchPeriodically = async (\n  dispatch,\n  type,\n  key,\n  getURL,\n  getState,\n  fetch,\n) => {\n  if (!isWatchActive(getState().dashboards, type, key)) {\n    return;\n  }\n  try {\n    dispatch(updateWatchInFlight(type, key, true));\n    const data = await fetch(getURL());\n    dispatch(setData(type, key, data));\n  } catch (error) {\n    dispatch(setError(type, key, error));\n  } finally {\n    dispatch(updateWatchInFlight(type, key, false));\n    const timeout = setTimeout(\n      () => fetchPeriodically(dispatch, type, key, getURL, getState, fetch),\n      REFRESH_TIMEOUT,\n    );\n    dispatch(updateWatchTimeout(type, key, timeout));\n  }\n};\n\nexport const watchPrometheusQuery: WatchPrometheusQueryAction = (query, namespace, timespan) => (\n  dispatch,\n  getState,\n) => {\n  const queryKey = getQueryKey(query, timespan);\n  const isActive = isWatchActive(getState().dashboards, RESULTS_TYPE.PROMETHEUS, queryKey);\n  dispatch(activateWatch(RESULTS_TYPE.PROMETHEUS, queryKey));\n  if (!isActive) {\n    const prometheusBaseURL = namespace\n      ? window.SERVER_FLAGS.prometheusTenancyBaseURL\n      : window.SERVER_FLAGS.prometheusBaseURL;\n    if (!prometheusBaseURL) {\n      dispatch(\n        setError(RESULTS_TYPE.PROMETHEUS, queryKey, new Error('Prometheus URL is not available')),\n      );\n    } else {\n      const url = () =>\n        getPrometheusURL({\n          endpoint: timespan ? PrometheusEndpoint.QUERY_RANGE : PrometheusEndpoint.QUERY,\n          namespace,\n          query,\n          timespan,\n        });\n      fetchPeriodically(dispatch, RESULTS_TYPE.PROMETHEUS, queryKey, url, getState, coFetchJSON);\n    }\n  }\n};\n\nexport const watchURL: WatchURLAction = (url, fetch = coFetchJSON) => (dispatch, getState) => {\n  const isActive = isWatchActive(getState().dashboards, RESULTS_TYPE.URL, url);\n  dispatch(activateWatch(RESULTS_TYPE.URL, url));\n  if (!isActive) {\n    const k8sURL = () => `${k8sBasePath}/${url}`;\n    fetchPeriodically(dispatch, RESULTS_TYPE.URL, url, k8sURL, getState, fetch);\n  }\n};\n\nexport const stopWatchPrometheusQuery: StopWatchPrometheusAction = (query, timespan) =>\n  stopWatch(RESULTS_TYPE.PROMETHEUS, getQueryKey(query, timespan));\nexport const stopWatchURL = (url: string) => stopWatch(RESULTS_TYPE.URL, url);\n\ntype ThunkAction = (dispatch: Dispatch, getState: () => RootState) => void;\n\nexport type WatchURLAction = (url: string, fetch?: Fetch) => ThunkAction;\nexport type WatchPrometheusQueryAction = (\n  query: string,\n  namespace?: string,\n  timespan?: number,\n) => ThunkAction;\nexport type StopWatchURLAction = (url: string) => void;\nexport type StopWatchPrometheusAction = (query: string, timespan?: number) => void;\n\nexport type Fetch = (url: string) => Promise<any>;\n\ntype FetchPeriodically = (\n  dispatch: Dispatch,\n  type: RESULTS_TYPE,\n  key: string,\n  getURL: () => string,\n  getState: () => RootState,\n  fetch: Fetch,\n) => void;\n\nexport type DashboardsAction = Action<typeof dashboardsActions>;\n","import { Dispatch } from 'react-redux';\nimport * as _ from 'lodash-es';\nimport { ActionType as Action, action } from 'typesafe-actions';\nimport { FLAGS } from '@console/shared/src/constants/common';\nimport { GroupModel, SelfSubjectAccessReviewModel, UserModel } from '../models';\nimport { k8sBasePath, ClusterVersionKind, k8sCreate } from '../module/k8s';\nimport { receivedResources } from './k8s';\nimport { coFetchJSON } from '../co-fetch';\nimport { MonitoringRoutes } from '../reducers/monitoring';\nimport { setMonitoringURL } from './monitoring';\nimport * as plugins from '../plugins';\nimport { setClusterID, setCreateProjectMessage, setUser, setConsoleLinks } from './common';\n\nexport enum ActionType {\n  SetFlag = 'setFlag',\n  ClearSSARFlags = 'clearSSARFlags',\n}\n\nexport const defaults = _.mapValues(FLAGS, (flag) =>\n  flag === FLAGS.AUTH_ENABLED ? !window.SERVER_FLAGS.authDisabled : undefined,\n);\n\nexport const setFlag = (flag: FLAGS | string, value: boolean) =>\n  action(ActionType.SetFlag, { flag, value });\n\nconst retryFlagDetection = (dispatch, cb) => {\n  setTimeout(() => cb(dispatch), 15000);\n};\n\nexport const handleError = (res, flag, dispatch, cb) => {\n  const status = _.get(res, 'response.status');\n  if (_.includes([403, 502], status)) {\n    dispatch(setFlag(flag, undefined));\n  }\n  if (!_.includes([401, 403, 500], status)) {\n    retryFlagDetection(dispatch, cb);\n  }\n};\n\nconst projectListPath = `${k8sBasePath}/apis/project.openshift.io/v1/projects?limit=1`;\nconst detectShowOpenShiftStartGuide = (dispatch, canListNS: boolean = false) => {\n  // Skip the project check if we know the user can list all namespaces. This\n  // avoids potentially listing thousands of projects more than once (projects\n  // dropdown and flag check). Even though we only ask for one project, the\n  // projects API currently doesn't support paging.\n  //\n  // TODO: Consider adding a global watch for projects / namespaces, which\n  // could remove the need for this flag entirely. It would also prevent us\n  // from re-listing projects when switching from a namespace-scoped resource\n  // to a cluster-scoped resource and back.\n  if (canListNS) {\n    dispatch(setFlag(FLAGS.SHOW_OPENSHIFT_START_GUIDE, false));\n    return;\n  }\n\n  coFetchJSON(projectListPath).then(\n    (res) => dispatch(setFlag(FLAGS.SHOW_OPENSHIFT_START_GUIDE, _.isEmpty(res.items))),\n    (err) =>\n      _.get(err, 'response.status') === 404\n        ? dispatch(setFlag(FLAGS.SHOW_OPENSHIFT_START_GUIDE, false))\n        : handleError(\n            err,\n            FLAGS.SHOW_OPENSHIFT_START_GUIDE,\n            dispatch,\n            detectShowOpenShiftStartGuide,\n          ),\n  );\n};\n\n// Check the user's access to some resources.\nconst ssarChecks = [\n  {\n    flag: FLAGS.CAN_GET_NS,\n    resourceAttributes: { resource: 'namespaces', verb: 'get' },\n  },\n  {\n    flag: FLAGS.CAN_LIST_NS,\n    resourceAttributes: { resource: 'namespaces', verb: 'list' },\n    after: detectShowOpenShiftStartGuide,\n  },\n  {\n    flag: FLAGS.CAN_LIST_NODE,\n    resourceAttributes: { resource: 'nodes', verb: 'list' },\n  },\n  {\n    flag: FLAGS.CAN_LIST_PV,\n    resourceAttributes: { resource: 'persistentvolumes', verb: 'list' },\n  },\n  {\n    flag: FLAGS.CAN_LIST_USERS,\n    resourceAttributes: {\n      group: UserModel.apiGroup,\n      resource: UserModel.plural,\n      verb: 'list',\n    },\n  },\n  {\n    flag: FLAGS.CAN_LIST_GROUPS,\n    resourceAttributes: {\n      group: GroupModel.apiGroup,\n      resource: GroupModel.plural,\n      verb: 'list',\n    },\n  },\n  {\n    flag: FLAGS.CAN_LIST_CRD,\n    resourceAttributes: {\n      group: 'apiextensions.k8s.io',\n      resource: 'customresourcedefinitions',\n      verb: 'list',\n    },\n  },\n  {\n    // TODO: Move into OLM plugin\n    flag: FLAGS.CAN_LIST_OPERATOR_GROUP,\n    resourceAttributes: {\n      group: 'operators.coreos.com',\n      resource: 'operatorgroups',\n      verb: 'list',\n    },\n  },\n  {\n    // TODO: Move into OLM plugin\n    flag: FLAGS.CAN_LIST_PACKAGE_MANIFEST,\n    resourceAttributes: {\n      group: 'packages.operators.coreos.com',\n      resource: 'packagemanifests',\n      verb: 'list',\n    },\n  },\n  {\n    flag: FLAGS.CAN_LIST_CHARGEBACK_REPORTS,\n    resourceAttributes: {\n      group: 'metering.openshift.io',\n      resource: 'reports',\n      namespace: 'openshift-metering',\n      verb: 'list',\n    },\n  },\n];\n\nexport const clearSSARFlags = () =>\n  action(ActionType.ClearSSARFlags, {\n    flags: ssarChecks.map((check) => check.flag),\n  });\n\nconst featureActions = { setFlag };\nconst clearFlags = { clearSSARFlags };\n\nexport type FeatureAction = Action<\n  typeof featureActions | typeof receivedResources | typeof clearFlags\n>;\n\nconst openshiftPath = `${k8sBasePath}/apis/apps.openshift.io/v1`;\nconst detectOpenShift = (dispatch) =>\n  coFetchJSON(openshiftPath).then(\n    (res) => dispatch(setFlag(FLAGS.OPENSHIFT, _.size(res.resources) > 0)),\n    (err) =>\n      _.get(err, 'response.status') === 404\n        ? dispatch(setFlag(FLAGS.OPENSHIFT, false))\n        : handleError(err, FLAGS.OPENSHIFT, dispatch, detectOpenShift),\n  );\n\nconst clusterVersionPath = `${k8sBasePath}/apis/config.openshift.io/v1/clusterversions/version`;\nconst detectClusterVersion = (dispatch) =>\n  coFetchJSON(clusterVersionPath).then(\n    (clusterVersion: ClusterVersionKind) => {\n      const hasClusterVersion = !_.isEmpty(clusterVersion);\n      dispatch(setFlag(FLAGS.CLUSTER_VERSION, hasClusterVersion));\n      dispatch(setClusterID(clusterVersion.spec.clusterID));\n    },\n    (err) => {\n      if (_.includes([403, 404], _.get(err, 'response.status'))) {\n        dispatch(setFlag(FLAGS.CLUSTER_VERSION, false));\n      } else {\n        handleError(err, FLAGS.CLUSTER_VERSION, dispatch, detectClusterVersion);\n      }\n    },\n  );\n\nconst projectRequestPath = `${k8sBasePath}/apis/project.openshift.io/v1/projectrequests`;\nconst detectCanCreateProject = (dispatch) =>\n  coFetchJSON(projectRequestPath).then(\n    (res) => dispatch(setFlag(FLAGS.CAN_CREATE_PROJECT, res.status === 'Success')),\n    (err) => {\n      const status = _.get(err, 'response.status');\n      if (status === 403) {\n        dispatch(setFlag(FLAGS.CAN_CREATE_PROJECT, false));\n        dispatch(setCreateProjectMessage(_.get(err, 'json.details.causes[0].message')));\n      } else if (!_.includes([400, 404, 500], status)) {\n        retryFlagDetection(dispatch, detectCanCreateProject);\n      }\n    },\n  );\n\nconst loggingConfigMapPath = `${k8sBasePath}/api/v1/namespaces/openshift-logging/configmaps/sharing-config`;\nconst detectLoggingURL = (dispatch) =>\n  coFetchJSON(loggingConfigMapPath).then(\n    (res) => {\n      const { kibanaAppURL } = res.data;\n      if (!_.isEmpty(kibanaAppURL)) {\n        dispatch(setMonitoringURL(MonitoringRoutes.Kibana, kibanaAppURL));\n      }\n    },\n    (err) => {\n      if (!_.includes([401, 403, 404, 500], _.get(err, 'response.status'))) {\n        setTimeout(() => detectLoggingURL(dispatch), 15000);\n      }\n    },\n  );\n\nconst detectUser = (dispatch) =>\n  coFetchJSON('api/kubernetes/apis/user.openshift.io/v1/users/~').then(\n    (user) => {\n      dispatch(setUser(user));\n    },\n    (err) => {\n      if (!_.includes([401, 403, 404, 500], _.get(err, 'response.status'))) {\n        setTimeout(() => detectUser(dispatch), 15000);\n      }\n    },\n  );\n\nconst detectConsoleLinks = (dispatch) =>\n  coFetchJSON('api/kubernetes/apis/console.openshift.io/v1/consolelinks').then(\n    (consoleLinks) => {\n      dispatch(setConsoleLinks(_.get(consoleLinks, 'items')));\n    },\n    (err) => {\n      if (!_.includes([401, 403, 404, 500], _.get(err, 'response.status'))) {\n        setTimeout(() => detectConsoleLinks(dispatch), 15000);\n      }\n    },\n  );\n\nconst ssarCheckActions = ssarChecks.map(({ flag, resourceAttributes, after }) => {\n  const req = {\n    spec: { resourceAttributes },\n  };\n  const fn = (dispatch) => {\n    return k8sCreate(SelfSubjectAccessReviewModel, req).then(\n      (res) => {\n        const allowed: boolean = res.status.allowed;\n        dispatch(setFlag(flag, allowed));\n        if (after) {\n          after(dispatch, allowed);\n        }\n      },\n      (err) => handleError(err, flag, dispatch, fn),\n    );\n  };\n  return fn;\n});\n\nexport const detectFeatures = () => (dispatch: Dispatch) =>\n  [\n    detectOpenShift,\n    detectCanCreateProject,\n    detectClusterVersion,\n    detectUser,\n    detectLoggingURL,\n    detectConsoleLinks,\n    ...ssarCheckActions,\n    ...plugins.registry.getCustomFeatureFlags().map((ff) => ff.properties.detect),\n  ].forEach((detect) => detect(dispatch));\n","import * as _ from 'lodash-es';\nimport { Dispatch } from 'react-redux';\nimport { ActionType as Action, action } from 'typesafe-actions';\n\nimport {\n  cacheResources,\n  getResources as getResources_,\n  DiscoveryResources,\n} from '../module/k8s/get-resources';\nimport { k8sList, k8sWatch, k8sGet } from '../module/k8s/resource';\nimport { makeReduxID } from '../components/utils/k8s-watcher';\nimport { APIServiceModel } from '../models';\nimport { coFetchJSON } from '../co-fetch';\nimport { referenceForModel, K8sResourceKind, K8sKind } from '../module/k8s';\n\nexport enum ActionType {\n  ReceivedResources = 'resources',\n  GetResourcesInFlight = 'getResourcesInFlight',\n  SetAPIGroups = 'setAPIGroups',\n\n  StartWatchK8sObject = 'startWatchK8sObject',\n  StartWatchK8sList = 'startWatchK8sList',\n  StopWatchK8s = 'stopWatchK8s',\n  ModifyObject = 'modifyObject',\n\n  Loaded = 'loaded',\n  Errored = 'errored',\n\n  BulkAddToList = 'bulkAddToList',\n  FilterList = 'filterList',\n  UpdateListFromWS = 'updateListFromWS',\n}\n\nconst WS = {} as { [id: string]: WebSocket & any };\nconst POLLs = {};\nconst REF_COUNTS = {};\n\nconst nop = () => { };\nconst paginationLimit = 250;\nconst apiGroups = 'apiGroups';\n\ntype K8sEvent = { type: 'ADDED' | 'DELETED' | 'MODIFIED'; object: K8sResourceKind };\n\nexport const updateListFromWS = (id: string, k8sObjects: K8sEvent[]) =>\n  action(ActionType.UpdateListFromWS, { id, k8sObjects });\nexport const bulkAddToList = (id: string, k8sObjects: K8sResourceKind[]) =>\n  action(ActionType.BulkAddToList, { id, k8sObjects });\nexport const loaded = (id: string, k8sObjects: K8sResourceKind | K8sResourceKind[]) =>\n  action(ActionType.Loaded, { id, k8sObjects });\nexport const errored = (id: string, k8sObjects: any) =>\n  action(ActionType.Errored, { id, k8sObjects });\nexport const modifyObject = (id: string, k8sObjects: K8sResourceKind) =>\n  action(ActionType.ModifyObject, { id, k8sObjects });\n\nexport const getResourcesInFlight = () => action(ActionType.GetResourcesInFlight);\nexport const receivedResources = (resources: DiscoveryResources) =>\n  action(ActionType.ReceivedResources, { resources });\n\nexport const getResources = () => (dispatch: Dispatch) => {\n  dispatch(getResourcesInFlight());\n  getResources_()\n    .then((resources) => {\n      // Cache the resources whenever discovery completes to improve console load times.\n      cacheResources(resources);\n      dispatch(receivedResources(resources));\n    })\n    // eslint-disable-next-line no-console\n    .catch((err) => console.error(err));\n};\n\nexport const filterList = (id: string, name: string, value: string) =>\n  action(ActionType.FilterList, { id, name, value });\n\nexport const startWatchK8sObject = (id: string) => action(ActionType.StartWatchK8sObject, { id });\n\nexport const watchK8sObject = (\n  id: string,\n  name: string,\n  namespace: string,\n  query: { [key: string]: string },\n  k8sType: K8sKind,\n) => (dispatch: Dispatch, getState) => {\n  if (id in REF_COUNTS) {\n    REF_COUNTS[id] += 1;\n    return nop;\n  }\n  dispatch(startWatchK8sObject(id));\n  REF_COUNTS[id] = 1;\n\n  if (query.name) {\n    query.fieldSelector = `metadata.name=${query.name}`;\n    delete query.name;\n  }\n\n  const poller = () => {\n    k8sGet(k8sType, name, namespace).then(\n      (o) => dispatch(modifyObject(id, o)),\n      (e) => dispatch(errored(id, e)),\n    );\n  };\n  POLLs[id] = setInterval(poller, 30 * 1000);\n  poller();\n\n  if (!_.get(k8sType, 'verbs', ['watch']).includes('watch')) {\n    // eslint-disable-next-line no-console\n    console.warn(`${referenceForModel(k8sType)} does not support watching`);\n    return;\n  }\n\n  const { subprotocols } = getState().UI.get('impersonate', {});\n\n  WS[id] = k8sWatch(k8sType, { ...query, subprotocols }).onbulkmessage((events) =>\n    events.forEach((e) => dispatch(modifyObject(id, e.object))),\n  );\n};\n\nexport const stopWatchK8s = (id: string) => action(ActionType.StopWatchK8s, { id });\n\nexport const stopK8sWatch = (id: string) => (dispatch: Dispatch) => {\n  REF_COUNTS[id] -= 1;\n  if (REF_COUNTS[id] > 0) {\n    return nop;\n  }\n\n  const ws = WS[id];\n  if (ws) {\n    ws.destroy();\n    delete WS[id];\n  }\n  const poller = POLLs[id];\n  clearInterval(poller);\n  delete POLLs[id];\n  delete REF_COUNTS[id];\n  dispatch(stopWatchK8s(id));\n};\n\nexport const startWatchK8sList = (id: string, query: { [key: string]: string }) =>\n  action(ActionType.StartWatchK8sList, { id, query });\n\nexport const watchK8sList = (\n  id: string,\n  query: { [key: string]: string },\n  k8skind: K8sKind,\n  extraAction?,\n  // listName?: string,\n) => (dispatch, getState) => {\n  // Only one watch per unique list ID\n  if (id in REF_COUNTS) {\n    REF_COUNTS[id] += 1;\n    return nop;\n  }\n\n  dispatch(startWatchK8sList(id, query));\n  REF_COUNTS[id] = 1;\n\n  const incrementallyLoad = async (continueToken = ''): Promise<string> => {\n    // the list may not still be around...\n    if (!REF_COUNTS[id]) {\n      // let .then handle the cleanup\n      return;\n    }\n\n    const response = await k8sList(\n      k8skind,\n      {\n        limit: paginationLimit,\n        ...query,\n        ...(continueToken ? { continue: continueToken } : {}),\n      },\n      true,\n      // {},\n      // listName\n    );\n\n    if (!REF_COUNTS[id]) {\n      return;\n    }\n\n    if (!continueToken) {\n      [loaded, extraAction].forEach((f) => f && dispatch(f(id, response.items)));\n    } else {\n      dispatch(bulkAddToList(id, response.items));\n    }\n\n    if (response.metadata.continue) {\n      return incrementallyLoad(response.metadata.continue);\n    }\n    return response.metadata.resourceVersion;\n  };\n  /**\n   * Incrementally fetch list (XHR) using k8s pagination then use its resourceVersion to\n   *  start listening on a WS (?resourceVersion=$resourceVersion)\n   *  start the process over when:\n   *   1. the WS closes abnormally\n   *   2. the WS can not establish a connection within $TIMEOUT\n   */\n  const pollAndWatch = async () => {\n    delete POLLs[id];\n\n    try {\n      const resourceVersion = await incrementallyLoad();\n      // ensure this watch should still exist because pollAndWatch is recursiveish\n      if (!REF_COUNTS[id]) {\n        // eslint-disable-next-line no-console\n        console.log(`stopped watching ${id} before finishing incremental loading.`);\n        // call cleanup function out of abundance of caution...\n        dispatch(stopK8sWatch(id));\n        return;\n      }\n\n      if (WS[id]) {\n        // eslint-disable-next-line no-console\n        console.warn(`Attempted to create multiple websockets for ${id}.`);\n        return;\n      }\n\n      if (!_.get(k8skind, 'verbs', ['watch']).includes('watch')) {\n        // eslint-disable-next-line no-console\n        console.warn(`${referenceForModel(k8skind)} does not support watching`);\n        return;\n      }\n\n      const { subprotocols } = getState().UI.get('impersonate', {});\n      WS[id] = k8sWatch(\n        k8skind,\n        { ...query, resourceVersion },\n        { subprotocols, timeout: 60 * 1000 },\n      );\n    } catch (e) {\n      if (!REF_COUNTS[id]) {\n        // eslint-disable-next-line no-console\n        console.log(`stopped watching ${id} before finishing incremental loading with error ${e}!`);\n        // call cleanup function out of abundance of caution...\n        dispatch(stopK8sWatch(id));\n        return;\n      }\n\n      dispatch(errored(id, e));\n\n      if (!POLLs[id]) {\n        POLLs[id] = setTimeout(pollAndWatch, 15 * 1000);\n      }\n      return;\n    }\n\n    WS[id]\n      .onclose((event) => {\n        // Close Frame Status Codes: https://tools.ietf.org/html/rfc6455#section-7.4.1\n        if (event.code !== 1006) {\n          return;\n        }\n        // eslint-disable-next-line no-console\n        console.log('WS closed abnormally - starting polling loop over!');\n        const ws = WS[id];\n        const timedOut = true;\n        ws && ws.destroy(timedOut);\n      })\n      .ondestroy((timedOut) => {\n        if (!timedOut) {\n          return;\n        }\n        // If the WS is unsucessful for timeout duration, assume it is less work\n        //  to update the entire list and then start the WS again\n\n        // eslint-disable-next-line no-console\n        console.log(`${id} timed out - restarting polling`);\n        delete WS[id];\n\n        if (POLLs[id]) {\n          return;\n        }\n\n        POLLs[id] = setTimeout(pollAndWatch, 15 * 1000);\n      })\n      .onbulkmessage((events) =>\n        [updateListFromWS, extraAction].forEach((f) => f && dispatch(f(id, events))),\n      );\n  };\n  pollAndWatch();\n};\n\nexport const setAPIGroups = (value: number) => action(ActionType.SetAPIGroups, { value });\n\nexport const watchAPIServices = () => (dispatch, getState) => {\n  if (getState().k8s.has('apiservices') || POLLs[apiGroups]) {\n    return;\n  }\n  dispatch({ type: ActionType.GetResourcesInFlight });\n\n  k8sList(APIServiceModel, {})\n    .then(() =>\n      dispatch(\n        watchK8sList(\n          makeReduxID(APIServiceModel, {}),\n          {},\n          APIServiceModel,\n          (id: string, events: K8sEvent[]) => {\n            // Only re-run API discovery on added or removed API services. A\n            // misbehaving API service can trigger frequent watch updates,\n            // which could cause console to thrash.\n            return events.some(({ type }) => type !== 'MODIFIED') ? getResources() : _.noop;\n          },\n        ),\n      ),\n    )\n    .catch(() => {\n      const poller = () =>\n        coFetchJSON('api/kubernetes/apis').then((d) => {\n          if (d.groups.length !== getState().k8s.getIn(['RESOURCES', apiGroups], 0)) {\n            dispatch(getResources());\n          }\n          dispatch(setAPIGroups(d.groups.length));\n        });\n\n      POLLs[apiGroups] = setInterval(poller, 30 * 1000);\n      poller();\n    });\n};\n\nconst k8sActions = {\n  updateListFromWS,\n  bulkAddToList,\n  loaded,\n  errored,\n  modifyObject,\n  getResourcesInFlight,\n  receivedResources,\n  filterList,\n  startWatchK8sObject,\n  startWatchK8sList,\n  stopWatchK8s,\n  setAPIGroups,\n};\n\nexport type K8sAction = Action<typeof k8sActions>;\n","import { ActionType as Action, action } from 'typesafe-actions';\n\nexport enum ActionType {\n  SetMonitoringURL = 'setMonitoringURL',\n}\n\nexport const setMonitoringURL = (name: string, url: string) =>\n  action(ActionType.SetMonitoringURL, { name, url });\n\nconst monitoringActions = { setMonitoringURL };\n\nexport type MonitoringAction = Action<typeof monitoringActions>;\n","import { Base64 } from 'js-base64';\nimport { action, ActionType as Action } from 'typesafe-actions';\nimport * as _ from 'lodash-es';\n\n// FIXME(alecmerdler): Do not `import store`\nimport store from '../redux';\nimport { history } from '../components/utils/router';\nimport { OverviewItem } from '@console/shared';\nimport {\n  ALL_NAMESPACES_KEY,\n  LAST_NAMESPACE_NAME_LOCAL_STORAGE_KEY,\n  LAST_PERSPECTIVE_LOCAL_STORAGE_KEY,\n  LAST_CLUSTER_LOCAL_STORAGE_KEY,\n} from '@console/shared/src/constants';\nimport { K8sResourceKind, PodKind, NodeKind } from '../module/k8s';\nimport { allModels } from '../module/k8s/k8s-models';\nimport { detectFeatures, clearSSARFlags } from './features';\nimport { OverviewSpecialGroup } from '../components/overview/constants';\nimport { setClusterID, setCreateProjectMessage, setUser, setConsoleLinks } from './common';\n\nexport enum ActionType {\n  DismissOverviewDetails = 'dismissOverviewDetails',\n  SelectOverviewDetailsTab = 'selectOverviewDetailsTab',\n  SelectOverviewItem = 'selectOverviewItem',\n  SetActiveApplication = 'setActiveApplication',\n  SetActiveNamespace = 'setActiveNamespace',\n  SetActivePerspective = 'setActivePerspective',\n  SetCreateProjectMessage = 'setCreateProjectMessage',\n  SetCurrentLocation = 'setCurrentLocation',\n  MonitoringDashboardsClearVariables = 'monitoringDashboardsClearVariables',\n  MonitoringDashboardsPatchVariable = 'monitoringDashboardsPatchVariable',\n  MonitoringDashboardsPatchAllVariables = 'monitoringDashboardsPatchAllVariables',\n  MonitoringDashboardsSetPollInterval = 'monitoringDashboardsSetPollInterval',\n  MonitoringDashboardsSetTimespan = 'monitoringDashboardsSetTimespan',\n  MonitoringDashboardsVariableOptionsLoaded = 'monitoringDashboardsVariableOptionsLoaded',\n  MonitoringSetRules = 'monitoringSetRules',\n  SetMonitoringData = 'setMonitoringData',\n  ToggleMonitoringGraphs = 'monitoringToggleGraphs',\n  NotificationDrawerToggleExpanded = 'notificationDrawerExpanded',\n  NotificationDrawerToggleRead = 'notificationDrawerRead',\n  QueryBrowserAddQuery = 'queryBrowserAddQuery',\n  QueryBrowserDeleteAllQueries = 'queryBrowserDeleteAllQueries',\n  QueryBrowserDeleteQuery = 'queryBrowserDeleteQuery',\n  QueryBrowserDismissNamespaceAlert = 'queryBrowserDismissNamespaceAlert',\n  QueryBrowserInsertText = 'queryBrowserInsertText',\n  QueryBrowserPatchQuery = 'queryBrowserPatchQuery',\n  QueryBrowserRunQueries = 'queryBrowserRunQueries',\n  QueryBrowserSetAllExpanded = 'queryBrowserSetAllExpanded',\n  QueryBrowserSetMetrics = 'queryBrowserSetMetrics',\n  QueryBrowserToggleIsEnabled = 'queryBrowserToggleIsEnabled',\n  QueryBrowserToggleSeries = 'queryBrowserToggleSeries',\n  SetClusterID = 'setClusterID',\n  SetUser = 'setUser',\n  SortList = 'sortList',\n  BeginImpersonate = 'beginImpersonate',\n  EndImpersonate = 'endImpersonate',\n  UpdateOverviewMetrics = 'updateOverviewMetrics',\n  UpdateOverviewResources = 'updateOverviewResources',\n  UpdateOverviewSelectedGroup = 'updateOverviewSelectedGroup',\n  UpdateOverviewLabels = 'updateOverviewLabels',\n  UpdateOverviewFilterValue = 'updateOverviewFilterValue',\n  UpdateTimestamps = 'updateTimestamps',\n  SetConsoleLinks = 'setConsoleLinks',\n  SetPodMetrics = 'setPodMetrics',\n  SetNamespaceMetrics = 'setNamespaceMetrics',\n  SetNodeMetrics = 'setNodeMetrics',\n  SetPinnedResources = 'setPinnedResources',\n  SetActiveCluster = \"setActiveCluster\",\n}\n\ntype MetricValuesByName = {\n  [name: string]: number;\n};\n\nexport type NamespaceMetrics = {\n  cpu: MetricValuesByName;\n  memory: MetricValuesByName;\n};\n\ntype MetricValuesByNamespace = {\n  [namespace: string]: MetricValuesByName;\n};\n\nexport type PodMetrics = {\n  cpu: MetricValuesByNamespace;\n  memory: MetricValuesByNamespace;\n};\n\nexport type NodeMetrics = {\n  cpu: MetricValuesByName;\n  pods: MetricValuesByName;\n  usedMemory: MetricValuesByName;\n  totalMemory: MetricValuesByName;\n  usedStorage: MetricValuesByName;\n  totalStorage: MetricValuesByName;\n};\n\n// URL routes that can be namespaced\nexport const namespacedResources = new Set();\n\nallModels().forEach((v, k) => {\n  if (!v.namespaced) {\n    return;\n  }\n  if (v.crd) {\n    namespacedResources.add(k);\n  }\n  if (!v.crd || v.legacyPluralURL) {\n    namespacedResources.add(v.plural);\n  }\n});\n\nexport const getActiveNamespace = (): string => store.getState().UI.get('activeNamespace');\n\nexport const getNamespaceMetric = (ns: K8sResourceKind, metric: string): number => {\n  const metrics = store.getState().UI.getIn(['metrics', 'namespace']);\n  return _.get(metrics, [metric, ns.metadata.name], 0);\n};\n\nexport const getPodMetric = (pod: PodKind, metric: string): number => {\n  const metrics = store.getState().UI.getIn(['metrics', 'pod']);\n  return metrics?.[metric]?.[pod.metadata.namespace]?.[pod.metadata.name] ?? 0;\n};\n\nexport const getNodeMetric = (node: NodeKind, metric: string): number => {\n  const metrics = store.getState().UI.getIn(['metrics', 'node']);\n  return metrics?.[metric]?.[node.metadata.name] ?? 0;\n};\n\nexport const formatNamespaceRoute = (activeNamespace, originalPath, location?) => {\n  let path = originalPath.substr(window.SERVER_FLAGS.basePath.length);\n\n  let parts = path.split('/').filter((p) => p);\n  const prefix = parts.shift();\n\n  let previousNS;\n  if (parts[0] === 'all-namespaces') {\n    parts.shift();\n    previousNS = ALL_NAMESPACES_KEY;\n  } else if (parts[0] === 'ns') {\n    parts.shift();\n    previousNS = parts.shift();\n  }\n\n  if (!previousNS) {\n    return originalPath;\n  }\n\n  if (\n    (previousNS !== activeNamespace &&\n      (parts[1] !== 'new' || activeNamespace !== ALL_NAMESPACES_KEY)) ||\n    (activeNamespace === ALL_NAMESPACES_KEY && parts[1] === 'new')\n  ) {\n    // a given resource will not exist when we switch namespaces, so pop off the tail end\n    parts = parts.slice(0, 1);\n  }\n\n  const namespacePrefix =\n    activeNamespace === ALL_NAMESPACES_KEY ? 'all-namespaces' : `ns/${activeNamespace}`;\n\n  path = `/${prefix}/${namespacePrefix}`;\n  if (parts.length) {\n    path += `/${parts.join('/')}`;\n  }\n\n  if (location) {\n    path += `${location.search}${location.hash}`;\n  }\n\n  return path;\n};\n\nexport const setCurrentLocation = (location: string) =>\n  action(ActionType.SetCurrentLocation, { location });\n\nexport const setActiveApplication = (application: string) => {\n  return action(ActionType.SetActiveApplication, { application });\n};\n\nexport const setActiveNamespace = (namespace: string = '') => {\n  namespace = namespace.trim();\n  // make it noop when new active namespace is the same\n  // otherwise users will get page refresh and cry about\n  // broken direct links and bookmarks\n  if (namespace !== getActiveNamespace()) {\n    const oldPath = window.location.pathname;\n    const newPath = formatNamespaceRoute(namespace, oldPath, window.location);\n    if (newPath !== oldPath) {\n      history.pushPath(newPath);\n    }\n    // remember the most recently-viewed project, which is automatically\n    // selected when returning to the console\n    localStorage.setItem(LAST_NAMESPACE_NAME_LOCAL_STORAGE_KEY, namespace);\n  }\n\n  return action(ActionType.SetActiveNamespace, { namespace });\n};\n\nexport const getActivePerspective = (): string => store.getState().UI.get('activePerspective');\n\nexport const setActivePerspective = (perspective: string) => {\n  // remember the most recently-viewed perspective, which is automatically\n  // selected when returning to the console\n  localStorage.setItem(LAST_PERSPECTIVE_LOCAL_STORAGE_KEY, perspective);\n  return action(ActionType.SetActivePerspective, { perspective });\n};\n\nexport const getActiveCluster = (): string => store.getState().UI.get('activeCluster');\n\nexport const setActiveCluster = (cluster: string) => {\n  localStorage.setItem(LAST_CLUSTER_LOCAL_STORAGE_KEY, cluster);\n\n  return action(ActionType.SetActiveCluster, { cluster });\n};\n\nexport const setPinnedResources = (resources: string[]) => {\n  return action(ActionType.SetPinnedResources, { resources });\n};\n\nexport const beginImpersonate = (kind: string, name: string, subprotocols: string[]) =>\n  action(ActionType.BeginImpersonate, { kind, name, subprotocols });\nexport const endImpersonate = () => action(ActionType.EndImpersonate);\nexport const startImpersonate = (kind: string, name: string) => async (dispatch, getState) => {\n  let textEncoder;\n  try {\n    textEncoder = new TextEncoder();\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.info('Browser lacks TextEncoder. Falling back to polyfill.', e);\n  }\n\n  if (!textEncoder) {\n    textEncoder = await import('text-encoding').then((module) => new module.TextEncoder('utf-8'));\n  }\n\n  const imp = getState().UI.get('impersonate', {});\n  if ((imp.name && imp.name !== name) || (imp.kin && imp.kind !== kind)) {\n    // eslint-disable-next-line no-console\n    console.warn(`Impersonate race detected: ${name} vs ${imp.name} / ${kind} ${imp.kind}`);\n    return;\n  }\n\n  /**\n   * Subprotocols are comma-separated, so commas aren't allowed. Also \"=\"\n   * and \"/\" aren't allowed, so base64 but replace illegal chars.\n   */\n  let encodedName = textEncoder.encode(name);\n  encodedName = Base64.encode(String.fromCharCode.apply(String, encodedName));\n  encodedName = encodedName.replace(/=/g, '_').replace(/\\//g, '-');\n\n  let subprotocols;\n  if (kind === 'User') {\n    subprotocols = [`Impersonate-User.${encodedName}`];\n  }\n  if (kind === 'Group') {\n    subprotocols = [`Impersonate-Group.${encodedName}`];\n  }\n\n  dispatch(beginImpersonate(kind, name, subprotocols));\n  dispatch(clearSSARFlags());\n  dispatch(detectFeatures());\n  history.push(window.SERVER_FLAGS.basePath);\n};\nexport const stopImpersonate = () => (dispatch) => {\n  dispatch(endImpersonate());\n  dispatch(clearSSARFlags());\n  dispatch(detectFeatures());\n  history.push(window.SERVER_FLAGS.basePath);\n};\nexport const sortList = (\n  listId: string,\n  field: string,\n  func: string,\n  orderBy: string,\n  column: string,\n) => {\n  const url = new URL(window.location.href);\n  const sp = new URLSearchParams(window.location.search);\n  sp.set('orderBy', orderBy);\n  sp.set('sortBy', column);\n  history.replace(`${url.pathname}?${sp.toString()}${url.hash}`);\n\n  return action(ActionType.SortList, { listId, field, func, orderBy });\n};\nexport const selectOverviewItem = (uid: string) => action(ActionType.SelectOverviewItem, { uid });\nexport const selectOverviewDetailsTab = (tab: string) =>\n  action(ActionType.SelectOverviewDetailsTab, { tab });\nexport const updateOverviewMetrics = (metrics: any) =>\n  action(ActionType.UpdateOverviewMetrics, { metrics });\nexport const updateOverviewResources = (resources: OverviewItem[]) =>\n  action(ActionType.UpdateOverviewResources, { resources });\nexport const updateTimestamps = (lastTick: number) =>\n  action(ActionType.UpdateTimestamps, { lastTick });\nexport const dismissOverviewDetails = () => action(ActionType.DismissOverviewDetails);\nexport const updateOverviewSelectedGroup = (group: OverviewSpecialGroup | string) =>\n  action(ActionType.UpdateOverviewSelectedGroup, { group });\nexport const updateOverviewLabels = (labels: string[]) =>\n  action(ActionType.UpdateOverviewLabels, { labels });\nexport const updateOverviewFilterValue = (value: string) =>\n  action(ActionType.UpdateOverviewFilterValue, { value });\nexport const monitoringDashboardsClearVariables = () =>\n  action(ActionType.MonitoringDashboardsClearVariables);\nexport const monitoringDashboardsPatchVariable = (key: string, patch: any) =>\n  action(ActionType.MonitoringDashboardsPatchVariable, { key, patch });\nexport const monitoringDashboardsPatchAllVariables = (variables: any) =>\n  action(ActionType.MonitoringDashboardsPatchAllVariables, { variables });\nexport const monitoringDashboardsSetPollInterval = (pollInterval: number) =>\n  action(ActionType.MonitoringDashboardsSetPollInterval, { pollInterval });\nexport const monitoringDashboardsSetTimespan = (timespan: number) =>\n  action(ActionType.MonitoringDashboardsSetTimespan, { timespan });\nexport const monitoringDashboardsVariableOptionsLoaded = (key: string, newOptions: string[]) =>\n  action(ActionType.MonitoringDashboardsVariableOptionsLoaded, { key, newOptions });\nexport const monitoringLoading = (key: 'alerts' | 'silences' | 'notificationAlerts') =>\n  action(ActionType.SetMonitoringData, {\n    key,\n    data: { loaded: false, loadError: null, data: null },\n  });\nexport const monitoringLoaded = (key: 'alerts' | 'silences' | 'notificationAlerts', data: any) =>\n  action(ActionType.SetMonitoringData, { key, data: { loaded: true, loadError: null, data } });\nexport const monitoringErrored = (\n  key: 'alerts' | 'silences' | 'notificationAlerts',\n  loadError: any,\n) => action(ActionType.SetMonitoringData, { key, data: { loaded: true, loadError, data: null } });\nexport const monitoringSetRules = (rules: any) => action(ActionType.MonitoringSetRules, { rules });\nexport const monitoringToggleGraphs = () => action(ActionType.ToggleMonitoringGraphs);\nexport const notificationDrawerToggleExpanded = () =>\n  action(ActionType.NotificationDrawerToggleExpanded);\nexport const notificationDrawerToggleRead = () => action(ActionType.NotificationDrawerToggleRead);\nexport const queryBrowserAddQuery = () => action(ActionType.QueryBrowserAddQuery);\nexport const queryBrowserDeleteAllQueries = () => action(ActionType.QueryBrowserDeleteAllQueries);\nexport const queryBrowserDismissNamespaceAlert = () =>\n  action(ActionType.QueryBrowserDismissNamespaceAlert);\nexport const queryBrowserDeleteQuery = (index: number) =>\n  action(ActionType.QueryBrowserDeleteQuery, { index });\nexport const queryBrowserInsertText = (\n  index: number,\n  newText: string,\n  replaceFrom: number,\n  replaceTo: number,\n) => {\n  return action(ActionType.QueryBrowserInsertText, { index, newText, replaceFrom, replaceTo });\n};\nexport const queryBrowserPatchQuery = (index: number, patch: { [key: string]: unknown }) => {\n  return action(ActionType.QueryBrowserPatchQuery, { index, patch });\n};\nexport const queryBrowserRunQueries = () => action(ActionType.QueryBrowserRunQueries);\nexport const queryBrowserSetAllExpanded = (isExpanded: boolean) => {\n  return action(ActionType.QueryBrowserSetAllExpanded, { isExpanded });\n};\nexport const queryBrowserSetMetrics = (metrics: string[]) =>\n  action(ActionType.QueryBrowserSetMetrics, { metrics });\nexport const queryBrowserToggleIsEnabled = (index: number) =>\n  action(ActionType.QueryBrowserToggleIsEnabled, { index });\nexport const queryBrowserToggleSeries = (index: number, labels: { [key: string]: unknown }) => {\n  return action(ActionType.QueryBrowserToggleSeries, { index, labels });\n};\nexport const setPodMetrics = (podMetrics: PodMetrics) =>\n  action(ActionType.SetPodMetrics, { podMetrics });\nexport const setNamespaceMetrics = (namespaceMetrics: NamespaceMetrics) =>\n  action(ActionType.SetNamespaceMetrics, { namespaceMetrics });\nexport const setNodeMetrics = (nodeMetrics: NodeMetrics) =>\n  action(ActionType.SetNodeMetrics, { nodeMetrics });\n\n// TODO(alecmerdler): Implement all actions using `typesafe-actions` and add them to this export\nconst uiActions = {\n  setCurrentLocation,\n  setActiveApplication,\n  setActiveNamespace,\n  setActivePerspective,\n  beginImpersonate,\n  endImpersonate,\n  sortList,\n  setCreateProjectMessage,\n  setClusterID,\n  setUser,\n  selectOverviewItem,\n  selectOverviewDetailsTab,\n  updateOverviewMetrics,\n  updateOverviewResources,\n  updateTimestamps,\n  dismissOverviewDetails,\n  updateOverviewSelectedGroup,\n  updateOverviewLabels,\n  updateOverviewFilterValue,\n  monitoringDashboardsClearVariables,\n  monitoringDashboardsPatchVariable,\n  monitoringDashboardsPatchAllVariables,\n  monitoringDashboardsSetPollInterval,\n  monitoringDashboardsSetTimespan,\n  monitoringDashboardsVariableOptionsLoaded,\n  monitoringLoading,\n  monitoringLoaded,\n  monitoringErrored,\n  monitoringSetRules,\n  monitoringToggleGraphs,\n  queryBrowserAddQuery,\n  queryBrowserDeleteAllQueries,\n  queryBrowserDeleteQuery,\n  queryBrowserDismissNamespaceAlert,\n  queryBrowserInsertText,\n  queryBrowserPatchQuery,\n  queryBrowserRunQueries,\n  queryBrowserSetAllExpanded,\n  queryBrowserSetMetrics,\n  queryBrowserToggleIsEnabled,\n  queryBrowserToggleSeries,\n  setConsoleLinks,\n  setPodMetrics,\n  setNamespaceMetrics,\n  setNodeMetrics,\n  notificationDrawerToggleExpanded,\n  notificationDrawerToggleRead,\n  setPinnedResources,\n  setActiveCluster,\n};\n\nexport type UIAction = Action<typeof uiActions>;\n","import * as _ from 'lodash-es';\nimport 'whatwg-fetch';\nimport { getAccessToken } from './hypercloud/auth';\nimport { authSvc } from './module/auth';\nimport store from './redux';\nimport keycloak from './hypercloud/keycloak';\n\nconst initDefaults = {\n  headers: {},\n  credentials: 'same-origin',\n};\n\n// TODO: url can be url or path, but shouldLogout only handles paths\nexport const shouldLogout = url => {\n  const k8sRegex = new RegExp(`^${window.SERVER_FLAGS.basePath}api/kubernetes/`);\n  // 401 from k8s. show logout screen\n  if (k8sRegex.test(url)) {\n    // Don't let 401s from proxied services log out users\n    const proxyRegex = new RegExp(`^${window.SERVER_FLAGS.basePath}api/kubernetes/api/v1/proxy/`);\n    if (proxyRegex.test(url)) {\n      return false;\n    }\n    const serviceRegex = new RegExp(`^${window.SERVER_FLAGS.basePath}api/kubernetes/api/v1/namespaces/\\\\w+/services/\\\\w+/proxy/`);\n    if (serviceRegex.test(url)) {\n      return false;\n    }\n    return true;\n  }\n  return false;\n};\n\nconst validateStatus = (response, url) => {\n  if (response.ok) {\n    return response;\n  }\n\n  if (response.status === 401) {\n    //authSvc.logout(window.location.pathname);\n    //keycloak.logout();\n    // return response.json().then(json => {\n    //   const error = new Error(json.message || 'Authorization failed.');\n    //   error.response = response;\n    //   error.json = json;\n    //   throw error;\n    // });\n  }\n\n  const contentType = response.headers.get('content-type');\n  if (!contentType || contentType.indexOf('json') === -1) {\n    const error = new Error(response.statusText);\n    error.response = response;\n    throw error;\n  }\n\n  if (response.status === 403) {\n    return response.json().then(json => {\n      const error = new Error(json.message || 'Access denied due to cluster policy.');\n      error.response = response;\n      error.json = json;\n      throw error;\n    });\n  }\n\n  return response.json().then(json => {\n    const cause = _.get(json, 'details.causes[0]');\n    let reason;\n    if (cause) {\n      reason = `Error \"${cause.message}\" for field \"${cause.field}\".`;\n    }\n    if (!reason) {\n      reason = json?.message;\n    }\n    if (!reason) {\n      reason = json?.error;\n    }\n    if (!reason) {\n      reason = response.statusText;\n    }\n    const error = new Error(reason);\n    error.response = response;\n    error.json = json;\n    throw error;\n  });\n};\n\nexport class TimeoutError extends Error {\n  constructor(url, ms, ...params) {\n    super(`Call to ${url} timed out after ${ms}ms.`, ...params);\n    // Dumb hack to fix `instanceof TimeoutError`\n    Object.setPrototypeOf(this, TimeoutError.prototype);\n  }\n}\n\nconst cookiePrefix = 'csrf-token=';\nconst getCSRFToken = () =>\n  document &&\n  document.cookie &&\n  document.cookie\n    .split(';')\n    .map(c => _.trim(c))\n    .filter(c => c.startsWith(cookiePrefix))\n    .map(c => c.slice(cookiePrefix.length))\n    .pop();\n\nexport const coFetch = (url, options = {}, timeout = 60000) => {\n  const allOptions = _.defaultsDeep({}, initDefaults, options);\n  if (allOptions.method !== 'GET') {\n    allOptions.headers['X-CSRFToken'] = getCSRFToken();\n  }\n\n  // If the URL being requested is absolute (and therefore, not a local request),\n  // remove the authorization header to prevent credentials from leaking.\n  if (url.indexOf('://') >= 0) {\n    delete allOptions.headers.Authorization;\n    delete allOptions.headers['X-CSRFToken'];\n  }\n\n  if (!!getAccessToken()) {\n    allOptions.headers.Authorization = 'Bearer ' + getAccessToken();\n    const fetchPromise = fetch(url, allOptions).then(response => validateStatus(response, url));\n\n    // return fetch promise directly if timeout <= 0\n    if (timeout < 1) {\n      return fetchPromise;\n    }\n\n    const timeoutPromise = new Promise((unused, reject) => setTimeout(() => reject(new TimeoutError(url, timeout)), timeout));\n\n    // Initiate both the fetch promise and a timeout promise\n    return Promise.race([fetchPromise, timeoutPromise]);\n  } else {\n    // return fetch promise directly if timeout <= 0\n    if (timeout < 1) {\n      return fetchPromise;\n    }\n\n    const timeoutPromise = new Promise((unused, reject) => setTimeout(() => reject(new TimeoutError(url, timeout)), timeout));\n\n    // Initiate both the fetch promise and a timeout promise\n    return Promise.race([timeoutPromise]);\n  }\n};\n\nconst parseJson = response => response.json();\n\nexport const coFetchUtils = {\n  parseJson,\n};\n\nexport const coFetchCommon = (url, method = 'GET', options = {}, timeout) => {\n  const headers = {};\n  const { kind, name } = store.getState().UI.get('impersonate', {});\n  if ((kind === 'User' || kind === 'Group') && name) {\n    // Even if we are impersonating a group, we still need to set Impersonate-User to something or k8s will complain\n    headers['Impersonate-User'] = name;\n    if (kind === 'Group') {\n      headers['Impersonate-Group'] = name;\n    }\n  }\n  // Pass headers last to let callers to override Accept.\n  const allOptions = _.defaultsDeep({ method }, options, { headers });\n  return coFetch(url, allOptions, timeout).then(response => {\n    if (!response.ok) {\n      return response.text();\n    }\n\n    // If the response has no body, return promise that resolves with an empty object\n    if (response.headers.get('Content-Length') === '0') {\n      return Promise.resolve(response.headers.get('Content-Type') === 'text/plain' ? '' : {});\n    }\n    if (response.headers.get('Content-Type') === 'text/plain') {\n      return response.text();\n    }\n    return response.json();\n  });\n};\n\nexport const coFetchJSON = (url, method = 'GET', options = {}, timeout) => {\n  const allOptions = _.defaultsDeep({}, options, { headers: { Accept: 'application/json' } });\n  return coFetchCommon(url, method, allOptions, timeout);\n};\n\nexport const coFetchText = (url, options = {}, timeout) => {\n  return coFetchCommon(url, 'GET', options, timeout);\n};\n\nconst coFetchSendJSON = (url, method, json = null, options = {}, timeout) => {\n  const allOptions = {\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': `application/${method === 'PATCH' ? 'json-patch+json' : 'json'};charset=UTF-8`,\n    },\n  };\n  if (json) {\n    allOptions.body = JSON.stringify(json);\n  }\n  return coFetchJSON(url, method, _.defaultsDeep(allOptions, options), timeout);\n};\n\ncoFetchJSON.delete = (url, options = {}, json = null, timeout) => {\n  return json ? coFetchSendJSON(url, 'DELETE', json, options, timeout) : coFetchJSON(url, 'DELETE', options, timeout);\n};\ncoFetchJSON.post = (url, json, options = {}, timeout) => coFetchSendJSON(url, 'POST', json, options, timeout);\ncoFetchJSON.put = (url, json, options = {}, timeout) => coFetchSendJSON(url, 'PUT', json, options, timeout);\ncoFetchJSON.patch = (url, json, options = {}, timeout) => coFetchSendJSON(url, 'PATCH', json, options, timeout);\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport * as classNames from 'classnames';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\nimport { FLAGS } from '@console/shared/src/constants';\nimport { ClusterRoleBindingModel } from '../../models';\nimport { getQN, k8sCreate, k8sPatch, referenceFor } from '../../module/k8s';\nimport * as UIActions from '../../actions/ui';\nimport { MultiListPage, Table, TableRow, TableData } from '../factory';\nimport { RadioGroup } from '../radio';\nimport { confirmModal } from '../modals';\nimport { ButtonBar, Kebab, Firehose, ListDropdown, MsgBox, NsDropdown, ResourceKebab, ResourceLink, ResourceName, StatusBox, getQueryArgument, history, kindObj, resourceObjPath, useAccessReview } from '../utils';\nimport { isSystemRole } from './index';\nimport { connectToFlags, flagPending } from '../../reducers/features';\nimport { useTranslation } from 'react-i18next';\nimport { ResourceLabel } from '../../models/hypercloud/resource-plural';\nconst bindingKind = binding => (binding.metadata.namespace ? 'RoleBinding' : 'ClusterRoleBinding');\n\n// Split each binding into one row per subject\nexport const flatten = resources =>\n  _.flatMap(resources, resource => {\n    const ret = [];\n\n    _.each(resource.data, binding => {\n      if (!binding) {\n        return undefined;\n      }\n      if (_.isEmpty(binding.subjects)) {\n        const subject = { kind: '-', name: '-' };\n        return ret.push(Object.assign({}, binding, { subject }));\n      }\n      _.each(binding.subjects, (subject, subjectIndex) => {\n        ret.push(\n          Object.assign({}, binding, {\n            subject,\n            subjectIndex,\n            rowKey: `${getQN(binding)}|${subject.kind}|${subject.name}${subject.namespace ? `|${subject.namespace}` : ''}`,\n          }),\n        );\n      });\n    });\n\n    return ret;\n  });\n\nconst menuActions = ({ subjectIndex, subjects }, startImpersonate) => {\n  const subject = subjects[subjectIndex];\n\n  const { t } = useTranslation();\n\n  const actions = [\n    (kind, obj) => ({\n      label: `Duplicate ${kind.label}`,\n      href: `${resourceObjPath(obj, kind.kind)}/copy?subjectIndex=${subjectIndex}`,\n      // Only perform access checks when duplicating cluster role bindings.\n      // It's not practical to check namespace role bindings since we don't know what namespace the user will pick in the form.\n      accessReview: _.get(obj, 'metadata.namespace') ? null : { group: kind.apiGroup, resource: kind.plural, verb: 'create' },\n    }),\n    (kind, obj) => ({\n      label: t('COMMON:MSG_MAIN_ACTIONBUTTON_39', { 0: ResourceLabel(kind, t) }),\n      href: `${resourceObjPath(obj, kind.kind)}/edit?subjectIndex=${subjectIndex}`,\n      accessReview: {\n        group: kind.apiGroup,\n        resource: kind.plural,\n        name: obj.metadata.name,\n        namespace: obj.metadata.namespace,\n        verb: 'update',\n      },\n    }),\n    subjects.length === 1\n      ? Kebab.factory.Delete\n      : (kind, binding) => ({\n          label: t('COMMON:MSG_MAIN_ACTIONBUTTON_40', { 0: ResourceLabel(kind, t) }),\n          callback: () =>\n            confirmModal({\n              title: t('COMMON:MSG_MAIN_ACTIONBUTTON_40', { 0: ResourceLabel(kind, t) }),\n              message: t('COMMON:MSG_MAIN_POPUP_DESCRIPTION_2', { 0: subject.name, 1: ResourceLabel(modelFor(subject.kind), t) }),\n              btnText: t('COMMON:MSG_MAIN_ACTIONBUTTON_41'),\n              executeFn: () => k8sPatch(kind, binding, [{ op: 'remove', path: `/subjects/${subjectIndex}` }]),\n            }),\n          accessReview: {\n            group: kind.apiGroup,\n            resource: kind.plural,\n            name: binding.metadata.name,\n            namespace: binding.metadata.namespace,\n            verb: 'patch',\n          },\n        }),\n  ];\n\n  if (subject.kind === 'User' || subject.kind === 'Group') {\n    actions.unshift(() => ({\n      label: t('COMMON:MSG_MAIN_ACTIONBUTTON_42', { 0: subject.kind, 1: subject.name }),\n      // label: `Impersonate ${subject.kind} \"${subject.name}\"`,\n      callback: () => startImpersonate(subject.kind, subject.name),\n    }));\n  }\n\n  return actions;\n};\n\nconst tableColumnClasses = [classNames('col-md-3', 'col-sm-4', 'col-xs-6'), classNames('col-md-3', 'col-sm-4', 'hidden-xs'), classNames('col-lg-2', 'col-md-3', 'hidden-sm', 'hidden-xs'), classNames('col-lg-2', 'hidden-md', 'hidden-sm', 'hidden-xs'), classNames('col-lg-2', 'col-md-3', 'col-sm-4', 'col-xs-6'), Kebab.columnClass];\n\nconst RoleBindingsTableHeader = t => [\n  {\n    title: t('COMMON:MSG_DETAILS_TABROLEBINDINGS_TABLEHEADER_1'),\n    sortField: 'metadata.name',\n    transforms: [sortable],\n    props: { className: tableColumnClasses[0] },\n  },\n  {\n    title: t('COMMON:MSG_DETAILS_TABROLEBINDINGS_TABLEHEADER_2'),\n    sortField: 'roleRef.name',\n    transforms: [sortable],\n    props: { className: tableColumnClasses[1] },\n  },\n  {\n    title: t('COMMON:MSG_DETAILS_TABROLEBINDINGS_TABLEHEADER_3'),\n    sortField: 'subject.kind',\n    transforms: [sortable],\n    props: { className: tableColumnClasses[2] },\n  },\n  {\n    title: t('COMMON:MSG_DETAILS_TABROLEBINDINGS_TABLEHEADER_4'),\n    sortField: 'subject.name',\n    transforms: [sortable],\n    props: { className: tableColumnClasses[3] },\n  },\n  {\n    title: t('COMMON:MSG_DETAILS_TABROLEBINDINGS_TABLEHEADER_5'),\n    sortField: 'metadata.namespace',\n    transforms: [sortable],\n    props: { className: tableColumnClasses[4] },\n  },\n  {\n    title: '',\n    props: { className: tableColumnClasses[5] },\n  },\n];\n\nRoleBindingsTableHeader.displayName = 'RoleBindingsTableHeader';\n\nexport const BindingName = ({ binding }) => {\n  <ResourceLink kind={bindingKind(binding)} name={binding.metadata.name} namespace={binding.metadata.namespace} className=\"co-resource-item__resource-name\" />;\n};\n\nexport const BindingKebab = connect(null, {\n  startImpersonate: UIActions.startImpersonate,\n})(({ binding, startImpersonate }) => (binding.subjects ? <ResourceKebab actions={menuActions(binding, startImpersonate)} kind={bindingKind(binding)} resource={binding} /> : null));\n\nexport const RoleLink = ({ binding }) => {\n  const kind = binding.roleRef.kind;\n\n  // Cluster Roles have no namespace and for Roles, the Role's namespace matches the Role Binding's namespace\n  const ns = kind === 'ClusterRole' ? undefined : binding.metadata.namespace;\n  return <ResourceLink kind={kind} name={binding.roleRef.name} namespace={ns} />;\n};\n\nconst RoleBindingsTableRow = ({ obj: binding, index, key, style }) => {\n  return (\n    <TableRow id={binding.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={bindingKind(binding)} name={binding.metadata.name} namespace={binding.metadata.namespace} className=\"co-resource-item__resource-name\" />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <RoleLink binding={binding} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[2], 'co-break-word')}>{binding.subject.kind}</TableData>\n      <TableData className={classNames(tableColumnClasses[3], 'co-break-word')}>{binding.subject.name}</TableData>\n      <TableData className={classNames(tableColumnClasses[4], 'co-break-word')}>{binding.metadata.namespace ? <ResourceLink kind=\"Namespace\" name={binding.metadata.namespace} /> : 'All Namespaces'}</TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <BindingKebab binding={binding} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst EmptyMsg = () => {\n  const { t } = useTranslation();\n  return <MsgBox title={t('COMMON:MSG_DETAILS_TABDETAILS_ROLEBINDINGS_1')} detail={t('COMMON:MSG_DETAILS_TABDETAILS_ROLEBINDINGS_2')} />;\n};\n\nexport const BindingsList = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Role Bindings\" EmptyMsg={EmptyMsg} Header={RoleBindingsTableHeader.bind(null, t)} Row={RoleBindingsTableRow} virtualize />;\n};\n\nexport const bindingType = binding => {\n  if (!binding) {\n    return undefined;\n  }\n  if (binding.roleRef.name.startsWith('system:')) {\n    return 'system';\n  }\n  return binding.metadata.namespace ? 'namespace' : 'cluster';\n};\n\nconst roleResources = [\n  { kind: 'RoleBinding', namespaced: true },\n  { kind: 'ClusterRoleBinding', namespaced: false, optional: true },\n];\n\nconst rowFilters = [\n  {\n    filterGroupName: 'Kind',\n    type: 'role-binding-kind',\n    reducer: bindingType,\n    itemsGenerator: ({ ClusterRoleBinding: data }) => {\n      const items = [\n        { id: 'namespace', title: 'Namespace Role Bindings' },\n        { id: 'system', title: 'System Role Bindings' },\n      ];\n      if (data && data.loaded && !data.loadError) {\n        items.unshift({ id: 'cluster', title: 'Cluster-wide Role Bindings' });\n      }\n      return items;\n    },\n  },\n];\n\nexport const RoleBindingsPage = ({ namespace = undefined, showTitle = true, mock = false, staticFilters = undefined, createPath = '/k8s/cluster/rolebindings/~new' }) => {\n  const { t } = useTranslation();\n  return (\n    <MultiListPage\n      canCreate={!mock}\n      createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: t('COMMON:MSG_DETAILS_TABDETAILS_ROLEBINDINGS_3') })}\n      createProps={{\n        to: createPath,\n      }}\n      mock={mock}\n      filterLabel=\"by role or subject\"\n      flatten={flatten}\n      label={t('COMMON:MSG_LNB_MENU_76')}\n      ListComponent={BindingsList}\n      namespace={namespace}\n      resources={roleResources}\n      rowFilters={staticFilters ? [] : rowFilters}\n      staticFilters={staticFilters}\n      showTitle={showTitle}\n      textFilter=\"role-binding\"\n      title={t('COMMON:MSG_LNB_MENU_76')}\n    />\n  );\n};\n\nconst NsRoleDropdown_ = props => {\n  const openshiftFlag = props.flags[FLAGS.OPENSHIFT];\n  if (flagPending(openshiftFlag)) {\n    return null;\n  }\n\n  const roleFilter = role => !isSystemRole(role);\n\n  let kinds;\n  if (props.fixed) {\n    kinds = [props.selectedKeyKind];\n  } else if (props.namespace) {\n    kinds = ['Role', 'ClusterRole'];\n  } else {\n    kinds = ['ClusterRole'];\n  }\n  const resourceForKind = kind => ({ kind, namespace: kind === 'Role' ? props.namespace : null });\n  const resources = _.map(kinds, resourceForKind);\n\n  return <ListDropdown {...props} dataFilter={roleFilter} desc=\"Namespace Roles (Role)\" resources={resources} placeholder=\"Select role name\" />;\n};\nconst NsRoleDropdown = connectToFlags(FLAGS.OPENSHIFT)(NsRoleDropdown_);\n\nconst ClusterRoleDropdown = props => <ListDropdown {...props} dataFilter={role => !isSystemRole(role)} desc=\"Cluster-wide Roles (ClusterRole)\" resources={[{ kind: 'ClusterRole' }]} placeholder=\"Select role name\" />;\n\nconst bindingKinds = [\n  {\n    value: 'RoleBinding',\n    title: 'Namespace Role Binding (RoleBinding)',\n    desc: 'Grant the permissions to a user or set of users within the selected namespace.',\n  },\n  {\n    value: 'ClusterRoleBinding',\n    title: 'Cluster-wide Role Binding (ClusterRoleBinding)',\n    desc: 'Grant the permissions to a user or set of users at the cluster level and in all namespaces.',\n  },\n];\nconst subjectKinds = [\n  { value: 'User', title: 'User' },\n  { value: 'Group', title: 'Group' },\n  { value: 'ServiceAccount', title: 'Service Account' },\n];\n\nconst Section = ({ label, children }) => (\n  <div>\n    <div className=\"co-form-section__label\">{label}</div>\n    <div className=\"co-form-subsection\">{children}</div>\n  </div>\n);\n\nconst BaseEditRoleBinding = connect(null, { setActiveNamespace: UIActions.setActiveNamespace })(\n  class BaseEditRoleBinding_ extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.subjectIndex = props.subjectIndex || 0;\n\n      const existingData = _.pick(props.obj, ['metadata.name', 'metadata.namespace', 'roleRef', 'subjects']);\n      existingData.kind = props.kind;\n      const data = _.defaultsDeep({}, props.fixed, existingData, {\n        apiVersion: 'rbac.authorization.k8s.io/v1',\n        kind: 'RoleBinding',\n        metadata: {\n          name: '',\n        },\n        roleRef: {\n          apiGroup: 'rbac.authorization.k8s.io',\n        },\n        subjects: [\n          {\n            apiGroup: 'rbac.authorization.k8s.io',\n            kind: 'User',\n            name: '',\n          },\n        ],\n      });\n      this.state = { data, inProgress: false };\n\n      this.setKind = this.setKind.bind(this);\n      this.setSubject = this.setSubject.bind(this);\n      this.save = this.save.bind(this);\n\n      this.setData = patch => this.setState({ data: _.defaultsDeep({}, patch, this.state.data) });\n      this.changeName = e => this.setData({ metadata: { name: e.target.value } });\n      this.changeNamespace = namespace => this.setData({ metadata: { namespace } });\n      this.changeRoleRef = (name, kindId) => this.setData({ roleRef: { name, kind: kindId } });\n      this.changeSubjectKind = e => this.setSubject({ kind: e.target.value });\n      this.changeSubjectName = e => this.setSubject({ name: e.target.value });\n      this.changeSubjectNamespace = namespace => this.setSubject({ namespace });\n    }\n\n    setKind(e) {\n      const kind = e.target.value;\n      const patch = { kind };\n      if (kind === 'ClusterRoleBinding') {\n        patch.metadata = { namespace: null };\n      }\n      this.setData(patch);\n    }\n\n    getSubject() {\n      return _.get(this.state.data, `subjects[${this.subjectIndex}]`);\n    }\n\n    setSubject(patch) {\n      const { kind, name, namespace } = Object.assign({}, this.getSubject(), patch);\n      const data = Object.assign({}, this.state.data);\n      data.subjects[this.subjectIndex] = kind === 'ServiceAccount' ? { kind, name, namespace } : { apiGroup: 'rbac.authorization.k8s.io', kind, name };\n      this.setState({ data });\n    }\n\n    save(e) {\n      e.preventDefault();\n\n      const { kind, metadata, roleRef } = this.state.data;\n      const subject = this.getSubject();\n\n      if (!kind || !metadata.name || !roleRef.kind || !roleRef.name || !subject.kind || !subject.name || (kind === 'RoleBinding' && !metadata.namespace) || (subject.kind === 'ServiceAccount' && !subject.namespace)) {\n        this.setState({ error: 'Please complete all fields.' });\n        return;\n      }\n\n      this.setState({ inProgress: true });\n\n      const ko = kindObj(kind);\n      (this.props.isCreate ? k8sCreate(ko, this.state.data) : k8sPatch(ko, { metadata }, [{ op: 'replace', path: `/subjects/${this.subjectIndex}`, value: subject }])).then(\n        obj => {\n          this.setState({ inProgress: false });\n          if (metadata.namespace) {\n            this.props.setActiveNamespace(metadata.namespace);\n          }\n          history.push(resourceObjPath(obj, referenceFor(obj)));\n        },\n        err => this.setState({ error: err.message, inProgress: false }),\n      );\n    }\n\n    render() {\n      const { kind, metadata, roleRef } = this.state.data;\n      const subject = this.getSubject();\n      const { fixed, saveButtonText } = this.props;\n      const RoleDropdown = kind === 'RoleBinding' ? NsRoleDropdown : ClusterRoleDropdown;\n      const title = `${this.props.titleVerb} ${kindObj(kind).label}`;\n\n      return (\n        <div className=\"co-m-pane__body\">\n          <Helmet>\n            <title>{title}</title>\n          </Helmet>\n          <form className=\"co-m-pane__body-group co-m-pane__form\" onSubmit={this.save}>\n            <h1 className=\"co-m-pane__heading\">{title}</h1>\n            <p className=\"co-m-pane__explanation\">Associate a user/group to the selected role to define the type of access and resources that are allowed.</p>\n\n            {!_.get(fixed, 'kind') && (\n              <Section label=\"Binding Type\">\n                <RadioGroup currentValue={kind} items={bindingKinds} onChange={this.setKind} />\n              </Section>\n            )}\n\n            <div className=\"co-form-section__separator\" />\n\n            <Section label=\"Role Binding\">\n              <div className=\"form-group\">\n                <label htmlFor=\"role-binding-name\" className=\"co-required\">\n                  Name\n                </label>\n                {_.get(fixed, 'metadata.name') ? <ResourceName kind={kind} name={metadata.name} /> : <input className=\"pf-c-form-control\" type=\"text\" onChange={this.changeName} placeholder=\"Role binding name\" value={metadata.name} required id=\"role-binding-name\" />}\n              </div>\n              {kind === 'RoleBinding' && (\n                <div className=\"form-group\">\n                  <label htmlFor=\"ns-dropdown\" className=\"co-required\">\n                    Namespace\n                  </label>\n                  <NsDropdown fixed={!!_.get(fixed, 'metadata.namespace')} selectedKey={metadata.namespace} onChange={this.changeNamespace} id=\"ns-dropdown\" />\n                </div>\n              )}\n            </Section>\n\n            <div className=\"co-form-section__separator\" />\n\n            <Section label=\"Role\">\n              <div className=\"form-group\">\n                <label htmlFor=\"role-dropdown\" className=\"co-required\">\n                  Role Name\n                </label>\n                <RoleDropdown fixed={!!_.get(fixed, 'roleRef.name')} namespace={metadata.namespace} onChange={this.changeRoleRef} selectedKey={_.get(fixed, 'roleRef.name') || roleRef.name} selectedKeyKind={_.get(fixed, 'roleRef.kind') || roleRef.kind} id=\"role-dropdown\" />\n              </div>\n            </Section>\n\n            <div className=\"co-form-section__separator\" />\n\n            <Section label=\"Subject\">\n              <div className=\"form-group\">\n                <RadioGroup currentValue={subject.kind} items={subjectKinds} onChange={this.changeSubjectKind} />\n              </div>\n              {subject.kind === 'ServiceAccount' && (\n                <div className=\"form-group\">\n                  <label htmlFor=\"subject-namespace\" className=\"co-required\">\n                    Subject Namespace\n                  </label>\n                  <NsDropdown id=\"subject-namespace\" selectedKey={subject.namespace} onChange={this.changeSubjectNamespace} />\n                </div>\n              )}\n              <div className=\"form-group\">\n                <label htmlFor=\"subject-name\" className=\"co-required\">\n                  Subject Name\n                </label>\n                <input className=\"pf-c-form-control\" type=\"text\" onChange={this.changeSubjectName} placeholder=\"Subject name\" value={subject.name} required id=\"subject-name\" />\n              </div>\n            </Section>\n\n            <div className=\"co-form-section__separator\" />\n\n            <ButtonBar errorMessage={this.state.error} inProgress={this.state.inProgress}>\n              <ActionGroup className=\"pf-c-form\">\n                <Button type=\"submit\" id=\"save-changes\" variant=\"primary\">\n                  {saveButtonText || 'Create'}\n                </Button>\n                <Button onClick={history.goBack} id=\"cancel\" variant=\"secondary\">\n                  Cancel\n                </Button>\n              </ActionGroup>\n            </ButtonBar>\n          </form>\n        </div>\n      );\n    }\n  },\n);\n\nexport const CreateRoleBinding = ({ match: { params }, location }) => {\n  const searchParams = new URLSearchParams(location.search);\n  const roleKind = searchParams.get('rolekind');\n  const roleName = searchParams.get('rolename');\n  const metadata = { namespace: UIActions.getActiveNamespace() };\n  const clusterAllowed = useAccessReview({\n    group: ClusterRoleBindingModel.apiGroup,\n    resource: ClusterRoleBindingModel.plural,\n    verb: 'create',\n  });\n  const fixed = {\n    kind: params.ns || roleKind === 'Role' || !clusterAllowed ? 'RoleBinding' : undefined,\n    metadata: { namespace: params.ns },\n    roleRef: { kind: roleKind, name: roleName },\n  };\n  return <BaseEditRoleBinding metadata={metadata} fixed={fixed} isCreate={true} titleVerb=\"Create\" />;\n};\n\nconst getSubjectIndex = () => {\n  const subjectIndex = getQueryArgument('subjectIndex') || '0';\n  return parseInt(subjectIndex, 10);\n};\n\nconst BindingLoadingWrapper = props => {\n  const fixed = {};\n  _.each(props.fixedKeys, k => (fixed[k] = _.get(props.obj.data, k)));\n  return (\n    <StatusBox {...props.obj}>\n      <BaseEditRoleBinding {...props} obj={props.obj.data} fixed={fixed} />\n    </StatusBox>\n  );\n};\n\nexport const EditRoleBinding = ({ match: { params }, kind }) => (\n  <Firehose resources={[{ kind, name: params.name, namespace: params.ns, isList: false, prop: 'obj' }]}>\n    <BindingLoadingWrapper fixedKeys={['kind', 'metadata', 'roleRef']} subjectIndex={getSubjectIndex()} titleVerb=\"Edit\" saveButtonText=\"Save\" />\n  </Firehose>\n);\n\nexport const CopyRoleBinding = ({ match: { params }, kind }) => (\n  <Firehose resources={[{ kind, name: params.name, namespace: params.ns, isList: false, prop: 'obj' }]}>\n    <BindingLoadingWrapper isCreate={true} fixedKeys={['kind']} subjectIndex={getSubjectIndex()} titleVerb=\"Duplicate\" />\n  </Firehose>\n);\n","export * from './bindings';\n// export * from './edit-rule';\nexport * from './role';\nexport * from './rules';\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as fuzzy from 'fuzzysearch';\n// import { Link } from 'react-router-dom';\nimport { RoleModel } from '../../models';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { flatten as bindingsFlatten } from './bindings';\nimport { BindingName, BindingsList, RulesList } from './index';\nimport { DetailsPage, MultiListPage, TextFilter, Table, TableRow, TableData } from '../factory';\nimport { Kebab, SectionHeading, MsgBox, navFactory, ResourceKebab, ResourceLink, Timestamp } from '../utils';\nimport { useTranslation, withTranslation } from 'react-i18next';\nimport { ResourceLabel } from '../../models/hypercloud/resource-plural';\n\nexport const isSystemRole = role => _.startsWith(role.metadata.name, 'system:');\n\n// const addHref = (name, ns) => ns ? `/k8s/ns/${ns}/roles/${name}/add-rule` : `/k8s/cluster/clusterroles/${name}/add-rule`;\n\nexport const roleKind = role => (role.metadata.namespace ? 'Role' : 'ClusterRole');\n\nconst roleColumnClasses = [classNames('col-xs-6'), classNames('col-xs-6'), Kebab.columnClass];\n\nconst RolesTableHeader = t => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: roleColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: roleColumnClasses[1] },\n    },\n    { title: '', props: { className: roleColumnClasses[2] } },\n  ];\n};\nRolesTableHeader.displayName = 'RolesTableHeader';\n\nconst RolesTableRow = (t, { obj: role, index, key, style }) => {\n  const menuActions = [\n    // This page is temporarily disabled until we update the safe resources list.\n    // (kind, role) => ({\n    //   label: 'Add Rule',\n    //   href: addHref(role.metadata.name, role.metadata.namespace),\n    // }),\n    (kind, role) => ({\n      label: roleKind(role) === 'Role' ? t('COMMON:MSG_COMMON_ACTIONBUTTON_52') : t('COMMON:MSG_COMMON_ACTIONBUTTON_52'),\n      href: `/k8s/cluster/rolebindings/~new?rolekind=${roleKind(role)}&rolename=${role.metadata.name}`,\n    }),\n    Kebab.factory.Edit,\n    Kebab.factory.Delete,\n  ];\n  console.log(roleKind(role));\n  return (\n    <TableRow id={role.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={roleColumnClasses[0]}>\n        <ResourceLink kind={roleKind(role)} name={role.metadata.name} namespace={role.metadata.namespace} />\n      </TableData>\n      <TableData className={classNames(roleColumnClasses[1], 'co-break-word')}>{role.metadata.namespace ? <ResourceLink kind=\"Namespace\" name={role.metadata.namespace} /> : 'All Namespaces'}</TableData>\n      <TableData className={roleColumnClasses[2]}>\n        <ResourceKebab actions={menuActions} kind={roleKind(role)} resource={role} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nclass Details extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.changeFilter = val => this.setState({ ruleFilter: val });\n  }\n  render() {\n    const ruleObj = this.props.obj;\n    const { creationTimestamp, name, namespace } = ruleObj.metadata;\n    const { ruleFilter } = this.state;\n    const { t } = this.props;\n    let rules = ruleObj.rules;\n    if (ruleFilter) {\n      const fuzzyCaseInsensitive = (a, b) => fuzzy(_.toLower(a), _.toLower(b));\n      const searchKeys = ['nonResourceURLs', 'resources', 'verbs'];\n      rules = rules.filter(rule => searchKeys.some(k => _.some(rule[k], v => fuzzyCaseInsensitive(ruleFilter, v))));\n    }\n    return (\n      <div>\n        <div className=\"co-m-pane__body\">\n          <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: t('COMMON:MSG_LNB_MENU_75') })} />\n          <div className=\"row\">\n            <div className=\"col-xs-6\">\n              <dl className=\"co-m-pane__details\">\n                <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_115')}</dt>\n                <dd>{name}</dd>\n                {namespace && (\n                  <div>\n                    <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_6')}</dt>\n                    <dd>\n                      <ResourceLink kind=\"Namespace\" name={namespace} />\n                    </dd>\n                  </div>\n                )}\n              </dl>\n            </div>\n            <div className=\"col-xs-6\">\n              <dl className=\"co-m-pane__details\">\n                <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_43')}</dt>\n                <dd>\n                  <Timestamp timestamp={creationTimestamp} />\n                </dd>\n              </dl>\n            </div>\n          </div>\n        </div>\n        <div className=\"co-m-pane__body\">\n          <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_RULES_1')} />\n          <div className=\"co-m-pane__filter-bar co-m-pane__filter-bar--alt\">\n            {/* This page is temporarily disabled until we update the safe resources list.\n        <div className=\"co-m-pane__filter-bar-group\">\n          <Link to={addHref(name, namespace)} className=\"co-m-primary-action\">\n            <button className=\"btn btn-primary\">Add Rule</button>\n          </Link>\n        </div>\n        */}\n            <div className=\"co-m-pane__filter-bar-group co-m-pane__filter-bar-group--filter\">\n              <TextFilter label={t('COMMON:MSG_COMMON_SEARCH_PLACEHOLDER_2')} onChange={this.changeFilter} />\n            </div>\n          </div>\n          <RulesList rules={rules} name={name} namespace={namespace} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst bindingsColumnClasses = [classNames('col-xs-4'), classNames('col-xs-2'), classNames('col-xs-4'), classNames('col-xs-2')];\n\n// const BindingsTableHeader = () => {\n//   return [\n//     {\n//       title: 'Name',\n//       sortField: 'metadata.name',\n//       transforms: [sortable],\n//       props: { className: bindingsColumnClasses[0] },\n//     },\n//     {\n//       title: 'Subject Kind',\n//       sortField: 'subject.kind',\n//       transforms: [sortable],\n//       props: { className: bindingsColumnClasses[1] },\n//     },\n//     {\n//       title: 'Subject Name',\n//       sortField: 'subject.name',\n//       transforms: [sortable],\n//       props: { className: bindingsColumnClasses[2] },\n//     },\n//     {\n//       title: 'Namespace',\n//       sortField: 'metadata.namespace',\n//       transforms: [sortable],\n//       props: { className: bindingsColumnClasses[3] },\n//     },\n//   ];\n// };\n// BindingsTableHeader.displayName = 'BindingsTableHeader';\n\n// const BindingsTableRow = ({ obj: binding, index, key, style }) => {\n//   return (\n//     <TableRow id={binding.metadata.uid} index={index} trKey={key} style={style}>\n//       <TableData className={bindingsColumnClasses[0]}>\n//         <BindingName binding={binding} />\n//       </TableData>\n//       <TableData className={bindingsColumnClasses[1]}>{binding.subject.kind}</TableData>\n//       <TableData className={bindingsColumnClasses[2]}>{binding.subject.name}</TableData>\n//       <TableData className={bindingsColumnClasses[3]}>{binding.namespace || 'All Namespaces'}</TableData>\n//     </TableRow>\n//   );\n// };\n\nconst BindingsListComponent = props => <BindingsList {...props} virtualize />;\n\nexport const BindingsForRolePage = props => {\n  const {\n    match: {\n      params: { name, ns },\n    },\n    obj: { kind },\n  } = props;\n  const { t } = useTranslation();\n  const resources = [{ kind: 'RoleBinding', namespaced: true }];\n  if (!ns) {\n    resources.push({ kind: 'ClusterRoleBinding', namespaced: false, optional: true });\n  }\n  return (\n    <MultiListPage\n      canCreate={true}\n      createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: t('COMMON:MSG_DETAILS_TABDETAILS_ROLEBINDINGS_3') })}\n      createProps={{\n        to: `/k8s/${ns ? `ns/${ns}` : 'cluster'}/rolebindings/~new?rolekind=${kind}&rolename=${name}`,\n      }}\n      ListComponent={BindingsListComponent}\n      staticFilters={[{ 'role-binding-roleRef-name': name }, { 'role-binding-roleRef-kind': kind }]}\n      resources={resources}\n      textFilter=\"role-binding\"\n      filterLabel=\"by role or subject\"\n      namespace={ns}\n      flatten={bindingsFlatten}\n    />\n  );\n};\n\nexport const RolesDetailsPage = props => {\n  const { t } = useTranslation();\n  const menuActions = [\n    // This page is temporarily disabled until we update the safe resources list.\n    // (kind, role) => ({\n    //   label: 'Add Rule',\n    //   href: addHref(role.metadata.name, role.metadata.namespace),\n    // }),\n    (kind, role) => ({\n      label: t('COMMON:MSG_COMMON_ACTIONBUTTON_52'),\n      href: `/k8s/cluster/rolebindings/~new?rolekind=${roleKind(role)}&rolename=${role.metadata.name}`,\n    }),\n    Kebab.factory.Edit,\n    Kebab.factory.Delete,\n  ];\n  return <DetailsPage {...props} pages={[navFactory.details(withTranslation()(Details)), navFactory.editYaml(), { href: 'bindings', name: t('COMMON:MSG_DETAILS_TAB_14'), component: BindingsForRolePage }]} menuActions={menuActions} />;\n};\n\nexport const ClusterRolesDetailsPage = RolesDetailsPage;\n\nconst EmptyMsg = () => <MsgBox title=\"No Roles Found\" detail=\"Roles grant access to types of objects in the cluster. Roles are applied to a team or user via a Role Binding.\" />;\n\nconst RolesList = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Roles\" EmptyMsg={EmptyMsg} Header={RolesTableHeader.bind(null, t)} Row={RolesTableRow.bind(null, t)} virtualize />;\n};\n\nexport const roleType = role => {\n  if (!role) {\n    return undefined;\n  }\n  if (isSystemRole(role)) {\n    return 'system';\n  }\n  return role.metadata.namespace ? 'namespace' : 'cluster';\n};\n\nexport const RolesPage = ({ namespace, mock, showTitle }) => {\n  const { t } = useTranslation();\n  const createNS = namespace || 'default';\n  const accessReview = {\n    model: RoleModel,\n    namespace: createNS,\n  };\n  return (\n    <MultiListPage\n      ListComponent={RolesList}\n      canCreate={true}\n      showTitle={showTitle}\n      namespace={namespace}\n      createAccessReview={accessReview}\n      createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: ResourceLabel(RoleModel, t) })}\n      createProps={{ to: `/k8s/ns/${createNS}/roles/~new` }}\n      flatten={resources => _.flatMap(resources, 'data').filter(r => !!r)}\n      resources={[\n        { kind: 'Role', namespaced: true, optional: mock },\n        { kind: 'ClusterRole', namespaced: false, optional: true },\n      ]}\n      rowFilters={[\n        {\n          filterGroupName: 'Role',\n          type: 'role-kind',\n          reducer: roleType,\n          items: [\n            { id: 'cluster', title: 'Cluster-wide Roles' },\n            { id: 'namespace', title: 'Namespace Roles' },\n            { id: 'system', title: 'System Roles' },\n          ],\n        },\n      ]}\n      title={t('COMMON:MSG_LNB_MENU_75')}\n    />\n  );\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\n\nimport { k8sPatch } from '../../module/k8s';\nimport { RoleModel, ClusterRoleModel } from '../../models';\nimport { Kebab, EmptyBox, ResourceIcon } from '../utils';\nimport { confirmModal } from '../modals';\nimport { useTranslation } from 'react-i18next';\n\nexport const RulesList = ({ rules, name, namespace }) => {\n  const { t } = useTranslation();\n  return _.isEmpty(rules) ? (\n    <EmptyBox label={t('COMMON:MSG_LNB_MENU_75')} />\n  ) : (\n    <div className=\"co-m-table-grid co-m-table-grid--bordered rbac-rules-list\">\n      <div className=\"row co-m-table-grid__head\">\n        <div className=\"col-xs-5 col-sm-4 col-md-3 col-lg-2\">{t('COMMON:MSG_DETAILS_TABDETAILS_RULES_TABLEHEADER_1')}</div>\n        <div className=\"hidden-xs col-sm-4 col-md-3 col-lg-3\">{t('COMMON:MSG_DETAILS_TABDETAILS_RULES_TABLEHEADER_2')}</div>\n        <div className=\"col-xs-7 col-sm-4 col-md-6 col-lg-7\">{t('COMMON:MSG_DETAILS_TABDETAILS_RULES_TABLEHEADER_3')}</div>\n      </div>\n      <div className=\"co-m-table-grid__body\">\n        {rules.map((rule, i) => (\n          <div className=\"row co-resource-list__item\" key={i}>\n            <Rule {...rule} name={name} namespace={namespace} i={i} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst Actions = ({ verbs }) => {\n  let actions = [];\n  _.each(verbs, a => {\n    if (a === '*') {\n      actions = <div className=\"rbac-rule-row\">All</div>;\n      return false;\n    }\n    actions.push(\n      <div className=\"rbac-rule-row\" key={a}>\n        {a}\n      </div>,\n    );\n  });\n  return <div>{actions}</div>;\n};\n\nconst Groups = ({ apiGroups }) => {\n  // defaults to [\"\"]\n  let groups = [];\n  _.each(apiGroups, g => {\n    if (g === '*') {\n      groups = (\n        <div className=\"rbac-rule-row\">\n          * <i>All</i>\n        </div>\n      );\n      return false;\n    }\n    groups.push(\n      <div className=\"rbac-rule-row\" key={g}>\n        {g}\n      </div>,\n    );\n  });\n  return <div>{groups}</div>;\n};\n\nconst Resources = connect(({ k8s }) => ({ allModels: k8s.getIn(['RESOURCES', 'models']) }))(({ resources, nonResourceURLs, allModels }) => {\n  let allResources = [];\n  resources &&\n    _.each([...new Set(resources)].sort(), r => {\n      if (r === '') {\n        return false;\n      }\n      if (r === '*') {\n        allResources = [\n          <span key={r} className=\"rbac-rule-resource rbac-rule-row\">\n            All Resources\n          </span>,\n        ];\n        return false;\n      }\n      const base = r.split('/')[0];\n      const kind = allModels.find(model => model.plural === base);\n\n      allResources.push(\n        <span key={r} className=\"rbac-rule-resource rbac-rule-row\">\n          <ResourceIcon kind={kind ? kind.kind : r} /> <span className=\"rbac-rule-resource__label\">{r}</span>\n        </span>,\n      );\n    });\n\n  if (nonResourceURLs && nonResourceURLs.length) {\n    if (allResources.length) {\n      allResources.push(<hr key=\"hr\" className=\"resource-separator\" />);\n    }\n    let URLs = [];\n    _.each(nonResourceURLs.sort(), r => {\n      if (r === '*') {\n        URLs = [\n          <div className=\"rbac-rule-row\" key={r}>\n            All Non-resource URLs\n          </div>,\n        ];\n        return false;\n      }\n      URLs.push(\n        <div className=\"rbac-rule-row\" key={r}>\n          {r}\n        </div>,\n      );\n    });\n    allResources.push.apply(allResources, URLs);\n  }\n  return <div className=\"rbac-rule-resources\">{allResources}</div>;\n});\n\nconst DeleteRule = (name, namespace, i) => {\n  const { t } = useTranslation();\n  return {\n    label: t('COMMON:MSG_COMMON_ACTIONBUTTON_65'),\n    callback: () =>\n      confirmModal({\n        title: t('COMMON:MSG_COMMON_ACTIONBUTTON_65'),\n        message: t('SINGLE:MSG_ROLES_ROLEDETAILS_TABDETAILS_RULES_2', { 0: `#${i}` }),\n        btnText: t('COMMON:MSG_COMMON_ACTIONBUTTON_65'),\n        executeFn: () => {\n          const kind = namespace ? RoleModel : ClusterRoleModel;\n          return k8sPatch(kind, { metadata: { name, namespace } }, [\n            {\n              op: 'remove',\n              path: `/rules/${i}`,\n            },\n          ]);\n        },\n      }),\n  };\n};\n\n// This page is temporarily disabled until we update the safe resources list.\n// const EditRule = (name, namespace, i) => ({\n//   label: 'Edit Rule',\n//   href: namespace ? `/k8s/ns/${namespace}/roles/${name}/${i}/edit` : `/k8s/cluster/clusterroles/${name}/${i}/edit`,\n// });\n\nconst RuleKebab = ({ name, namespace, i }) => {\n  const options = [\n    // EditRule,\n    DeleteRule,\n  ].map(f => f(name, namespace, i));\n  return <Kebab options={options} />;\n};\n\nconst Rule = ({ resources, nonResourceURLs, verbs, apiGroups, name, namespace, i }) => (\n  <div className=\"rbac-rule\">\n    <div className=\"col-xs-5 col-sm-4 col-md-3 col-lg-2\">\n      <Actions verbs={verbs} />\n    </div>\n    <div className=\"hidden-xs col-sm-4 col-md-3 col-lg-3\">\n      <Groups apiGroups={apiGroups} />\n    </div>\n    <div className=\"col-xs-7 col-sm-4 col-md-6 col-lg-7\">\n      <Resources resources={resources} nonResourceURLs={nonResourceURLs} />\n    </div>\n    <div className=\"dropdown-kebab-pf\">\n      <RuleKebab name={name} namespace={namespace} i={i} />\n    </div>\n  </div>\n);\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport {\n  Alert,\n  AboutModal as PfAboutModal,\n  TextContent,\n  TextList,\n  TextListItem,\n} from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\n\nimport { FLAGS } from '@console/shared';\nimport { connectToFlags, FlagsObject } from '../reducers/features';\nimport { getBrandingDetails } from './masthead';\nimport { ExternalLink, Firehose } from './utils';\nimport { ClusterVersionModel } from '../models';\nimport { ClusterVersionKind, referenceForModel } from '../module/k8s';\nimport { k8sVersion } from '../module/status';\nimport {\n  hasAvailableUpdates,\n  getK8sGitVersion,\n  getOpenShiftVersion,\n  getClusterID,\n  getErrataLink,\n} from '../module/k8s/cluster-settings';\n\nconst AboutModalItems: React.FC<AboutModalItemsProps> = ({ closeAboutModal, cv }) => {\n  const [kubernetesVersion, setKubernetesVersion] = React.useState('');\n  React.useEffect(() => {\n    k8sVersion()\n      .then((response) => setKubernetesVersion(getK8sGitVersion(response) || '-'))\n      .catch(() => setKubernetesVersion('unknown'));\n  }, []);\n\n  const clusterVersion = _.get(cv, 'data') as ClusterVersionKind;\n  const clusterID = getClusterID(clusterVersion);\n  const channel: string = _.get(cv, 'data.spec.channel');\n  const openshiftVersion = getOpenShiftVersion(clusterVersion);\n  const errataLink = getErrataLink(clusterVersion);\n  return (\n    <>\n      {clusterVersion && hasAvailableUpdates(clusterVersion) && (\n        <Alert\n          className=\"co-alert co-about-modal__alert\"\n          variant=\"info\"\n          title={\n            <>\n              Update available.{' '}\n              <Link to=\"/settings/cluster\" onClick={closeAboutModal}>\n                View cluster settings\n              </Link>\n            </>\n          }\n        />\n      )}\n      <TextContent>\n        <TextList component=\"dl\">\n          {openshiftVersion && (\n            <>\n              <TextListItem component=\"dt\">OpenShift Version</TextListItem>\n              <TextListItem component=\"dd\">\n                <div className=\"co-select-to-copy\">{openshiftVersion}</div>\n                {errataLink && (\n                  <div>\n                    <ExternalLink text=\"View errata\" href={errataLink} />\n                  </div>\n                )}\n              </TextListItem>\n            </>\n          )}\n          <TextListItem component=\"dt\">Kubernetes Version</TextListItem>\n          <TextListItem component=\"dd\" className=\"co-select-to-copy\">\n            {kubernetesVersion}\n          </TextListItem>\n          {channel && (\n            <>\n              <TextListItem component=\"dt\">Channel</TextListItem>\n              <TextListItem component=\"dd\" className=\"co-select-to-copy\">\n                {channel}\n              </TextListItem>\n            </>\n          )}\n          {clusterID && (\n            <>\n              <TextListItem component=\"dt\">Cluster ID</TextListItem>\n              <TextListItem component=\"dd\" className=\"co-select-to-copy\">\n                {clusterID}\n              </TextListItem>\n            </>\n          )}\n          <TextListItem component=\"dt\">API Server</TextListItem>\n          <TextListItem component=\"dd\" className=\"co-select-to-copy\">\n            {window.SERVER_FLAGS.kubeAPIServerURL}\n          </TextListItem>\n        </TextList>\n      </TextContent>\n    </>\n  );\n};\nAboutModalItems.displayName = 'AboutModalItems';\n\nconst AboutModal_: React.FC<AboutModalProps> = (props) => {\n  const { isOpen, closeAboutModal, flags } = props;\n  const details = getBrandingDetails();\n  const customBranding = window.SERVER_FLAGS.customLogoURL || window.SERVER_FLAGS.customProductName;\n  const resources = flags[FLAGS.CLUSTER_VERSION]\n    ? [{ kind: referenceForModel(ClusterVersionModel), name: 'version', isList: false, prop: 'cv' }]\n    : [];\n  return (\n    <PfAboutModal\n      isOpen={isOpen}\n      onClose={closeAboutModal}\n      productName=\"\"\n      brandImageSrc={details.logoImg}\n      brandImageAlt={details.productName}\n      noAboutModalBoxContentContainer={true}\n    >\n      {!customBranding && (\n        <p>\n          OpenShift is Red Hat&apos;s container application platform that allows developers to\n          quickly develop, host, and scale applications in a cloud environment.\n        </p>\n      )}\n      <Firehose resources={resources}>\n        <AboutModalItems {...(props as any)} />\n      </Firehose>\n    </PfAboutModal>\n  );\n};\nexport const AboutModal = connectToFlags(FLAGS.CLUSTER_VERSION)(AboutModal_);\nAboutModal.displayName = 'AboutModal';\n\ntype AboutModalItemsProps = {\n  closeAboutModal: () => void;\n  cv?: {\n    data?: ClusterVersionKind;\n  };\n};\n\ntype AboutModalProps = {\n  isOpen: boolean;\n  closeAboutModal: () => void;\n  flags: FlagsObject;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { GlobalNotifications } from './global-notifications';\nimport { NamespaceBar } from './namespace';\nimport { SearchPage } from './hypercloud/search';\nimport { ResourceDetailsPage, ResourceListPage } from './resource-list';\nimport { AsyncComponent } from './utils';\nimport { namespacedPrefixes } from './utils/link';\nimport { AlertmanagerModel } from '../models';\nimport { referenceForModel } from '../module/k8s';\nimport * as plugins from '../plugins';\nimport { getActivePerspective } from '../reducers/ui';\nimport { NamespaceRedirect } from './utils/namespace-redirect';\nimport { RootState } from '../redux';\nimport { pluralToKind } from './hypercloud/form';\nimport { getPerspectives } from '../hypercloud/perspectives';\nimport { GrafanaPage } from './hypercloud/grafana';\n\n//PF4 Imports\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport WelcomePage from './hypercloud/login/welcome';\n\nconst RedirectComponent = props => {\n  const to = `/k8s${props.location.pathname}`;\n  return <Redirect to={to} />;\n};\n\nconst RedirectClusterComponent = props => {\n  const to = props.location.pathname.replace(/^(\\/master|\\/single)/, '');\n  return <Redirect to={to} />;\n};\n\n// Ensure a *const* function wrapper for each namespaced Component so that react router doesn't recreate them\nconst Memoized = new Map();\nfunction NamespaceFromURL(Component) {\n  let C = Memoized.get(Component);\n  if (!C) {\n    C = function NamespaceInjector(props) {\n      return <Component namespace={props.match.params.ns} {...props} />;\n    };\n    Memoized.set(Component, C);\n  }\n  return C;\n}\n// const ActiveNamespaceRedirect = ({ location }) => {\n//   const activeNamespace = localStorage.getItem('bridge/last-namespace-name');\n//   let to;\n//   if (activeNamespace === '#ALL_NS#') {\n//     to = `${location.pathname}/all-namespaces`;\n//   } else if (activeNamespace) {\n//     to = `${location.pathname}/ns/${activeNamespace}`;\n//   }\n//   to += location.search;\n//   return <Redirect to={to} />;\n// };\n\nconst namespacedRoutes = [];\n_.each(namespacedPrefixes, p => {\n  namespacedRoutes.push(`${p}/ns/:ns`);\n  namespacedRoutes.push(`${p}/all-namespaces`);\n});\n\ntype DefaultPageProps = {\n  activePerspective: string;\n};\n\nconst DefaultPage_: React.FC<DefaultPageProps> = ({ activePerspective }) => {\n  // support redirecting to perspective landing page\n  return (\n    <Redirect\n      to={getPerspectives()\n        .find(p => p.properties.id === activePerspective)\n        .properties.getLandingPageURL()}\n    />\n  );\n};\n\nconst DefaultPage = connect((state: RootState) => ({\n  activePerspective: getActivePerspective(state),\n}))(DefaultPage_);\n\nconst LazyRoute = props => {\n  let { kind, loader } = props;\n  let plural = props.computedMatch.params.plural;\n  kind = pluralToKind.get(plural)?.['createType'] ? 'form' : kind;\n  // 생성페이지 분기\n  if (props.computedMatch.url.split('/').indexOf('~new') > 0 && !loader) {\n    if (kind === 'form') {\n      kind = pluralToKind.get(plural)['kind'];\n      loader = () => import(`./hypercloud/form/${plural}/create-${kind.toLowerCase()}` /* webpackChunkName: \"create-secret\" */).then(m => m[`Create${kind}`]);\n    } else {\n      loader = () => import('./hypercloud/crd/create-pinned-resource').then(m => m.CreateDefaultPage);\n    }\n  }\n  return <Route {...props} component={undefined} render={componentProps => <AsyncComponent loader={loader} kind={kind} {...componentProps} />} />;\n};\n\nconst getPluginPageRoutes = (activePerspective: string) =>\n  plugins.registry.getRoutePages().map(r => {\n    if (r.properties.perspective && r.properties.perspective !== activePerspective) {\n      return null;\n    }\n    const Component = r.properties.loader ? LazyRoute : Route;\n    return <Component {...r.properties} key={Array.from(r.properties.path).join(',')} />;\n  });\n\ntype AppContentsProps = {\n  activePerspective: string;\n};\n\nconst AppContents_: React.FC<AppContentsProps> = ({ activePerspective }) => (\n  <PageSection variant={PageSectionVariants.light}>\n    <div id=\"content\">\n      <GlobalNotifications />\n      <Route path={namespacedRoutes} component={NamespaceBar} />\n      {/* tabIndex is necessary to restore keyboard scrolling as a result of PatternFly's <Page> having a hard-coded tabIndex.  See https://github.com/patternfly/patternfly-react/issues/4180 */}\n      <div id=\"content-scrollable\" tabIndex={-1}>\n        <Switch>\n          {getPluginPageRoutes(activePerspective)}\n          <Route path={['/all-namespaces', '/ns/:ns']} component={RedirectComponent} />\n          <Route path={['/single', '/master']} component={RedirectClusterComponent} />\n          <LazyRoute path=\"/dashboards\" loader={() => import('./dashboard/dashboards-page/dashboards' /* webpackChunkName: \"dashboards\" */).then(m => m.DashboardsPage)} />\n          {/* Redirect legacy routes to avoid breaking links */}\n          <Redirect from=\"/cluster-status\" to=\"/dashboards\" />\n          <Redirect from=\"/status/all-namespaces\" to=\"/dashboards\" />\n          <Redirect from=\"/status/ns/:ns\" to=\"/k8s/cluster/projects/:ns\" />\n          <Route path=\"/status\" exact component={NamespaceRedirect} />\n          <Redirect from=\"/overview/all-namespaces\" to=\"/dashboards\" />\n          <Redirect from=\"/overview/ns/:ns\" to=\"/k8s/cluster/projects/:ns/workloads\" />\n          <Route path=\"/overview\" exact component={NamespaceRedirect} />\n          <LazyRoute path=\"/api-explorer\" exact loader={() => import('./api-explorer' /* webpackChunkName: \"api-explorer\" */).then(m => m.APIExplorerPage)} />\n          <LazyRoute path=\"/api-resource/cluster/:plural\" loader={() => import('./api-explorer' /* webpackChunkName: \"api-explorer\" */).then(m => m.APIResourcePage)} />\n          <LazyRoute path=\"/api-resource/all-namespaces/:plural\" loader={() => import('./api-explorer' /* webpackChunkName: \"api-explorer\" */).then(m => NamespaceFromURL(m.APIResourcePage))} />\n          <LazyRoute path=\"/api-resource/ns/:ns/:plural\" loader={() => import('./api-explorer' /* webpackChunkName: \"api-explorer\" */).then(m => NamespaceFromURL(m.APIResourcePage))} />\n          <LazyRoute path=\"/command-line-tools\" exact loader={() => import('./command-line-tools' /* webpackChunkName: \"command-line-tools\" */).then(m => m.CommandLineToolsPage)} />\n          <Route path=\"/operatorhub\" exact component={NamespaceRedirect} />\n          <LazyRoute path=\"/catalog/all-namespaces\" exact loader={() => import('./catalog/catalog-page' /* webpackChunkName: \"catalog\" */).then(m => m.CatalogPage)} />\n          <LazyRoute path=\"/catalog/ns/:ns\" exact loader={() => import('./catalog/catalog-page' /* webpackChunkName: \"catalog\" */).then(m => m.CatalogPage)} />\n          <Route path=\"/catalog\" exact component={NamespaceRedirect} />\n          <LazyRoute path=\"/provisionedservices/all-namespaces\" loader={() => import('./provisioned-services' /* webpackChunkName: \"provisionedservices\" */).then(m => m.ProvisionedServicesPage)} />\n          <LazyRoute path=\"/provisionedservices/ns/:ns\" loader={() => import('./provisioned-services' /* webpackChunkName: \"provisionedservices\" */).then(m => m.ProvisionedServicesPage)} />\n          <Route path=\"/provisionedservices\" component={NamespaceRedirect} />\n          <LazyRoute path=\"/brokermanagement\" loader={() => import('./broker-management' /* webpackChunkName: \"brokermanagment\" */).then(m => m.BrokerManagementPage)} />\n          <LazyRoute path=\"/catalog/create-service-instance\" exact loader={() => import('./service-catalog/create-instance' /* webpackChunkName: \"create-service-instance\" */).then(m => m.CreateInstancePage)} />\n          <LazyRoute path=\"/k8s/ns/:ns/serviceinstances/:name/create-binding\" exact loader={() => import('./service-catalog/create-binding' /* webpackChunkName: \"create-binding\" */).then(m => m.CreateBindingPage)} />\n          <LazyRoute path=\"/catalog/instantiate-template\" exact loader={() => import('./instantiate-template' /* webpackChunkName: \"instantiate-template\" */).then(m => m.InstantiateTemplatePage)} />\n          <Route path=\"/k8s/ns/:ns/alertmanagers/:name\" exact render={({ match }) => <Redirect to={`/k8s/ns/${match.params.ns}/${referenceForModel(AlertmanagerModel)}/${match.params.name}`} />} />\n          <LazyRoute path=\"/k8s/all-namespaces/events\" exact loader={() => import('./events' /* webpackChunkName: \"events\" */).then(m => NamespaceFromURL(m.EventStreamPage))} />\n          <LazyRoute path=\"/k8s/ns/:ns/events\" exact loader={() => import('./events' /* webpackChunkName: \"events\" */).then(m => NamespaceFromURL(m.EventStreamPage))} />\n          <Route path=\"/search/all-namespaces\" exact component={NamespaceFromURL(SearchPage)} />\n          <Route path=\"/search/ns/:ns\" exact component={NamespaceFromURL(SearchPage)} />\n          <Route path=\"/search\" exact component={NamespaceRedirect} />\n          <LazyRoute path=\"/add/all-namespaces\" exact loader={() => import('../../packages/dev-console/src/components/AddPage' /* webpackChunkName: \"import-yaml\" */).then(m => NamespaceFromURL(m.AddPage))} />\n          <LazyRoute path=\"/add/ns/:ns\" exact loader={() => import('../../packages/dev-console/src/components/AddPage' /* webpackChunkName: \"import-yaml\" */).then(m => NamespaceFromURL(m.AddPage))} />\n          <Route path=\"/add\" exact component={NamespaceRedirect} />\n          <Route path=\"/welcome\" exact component={WelcomePage} />\n\n          <LazyRoute path=\"/kiali/all-namespaces\" exact loader={() => import('./hypercloud/kiali' /* webpackChunkName: \"kiali\" */).then(m => NamespaceFromURL(m.KialiPage))} />\n          <LazyRoute path=\"/kiali/ns/:ns\" exact loader={() => import('./hypercloud/kiali' /* webpackChunkName: \"kiali\" */).then(m => NamespaceFromURL(m.KialiPage))} />\n          <Route path=\"/kiali\" exact component={NamespaceRedirect} />\n\n          <LazyRoute path=\"/k8s/all-namespaces/import\" exact loader={() => import('./import-yaml' /* webpackChunkName: \"import-yaml\" */).then(m => NamespaceFromURL(m.ImportYamlPage))} />\n          <LazyRoute path=\"/k8s/ns/:ns/import/\" exact loader={() => import('./import-yaml' /* webpackChunkName: \"import-yaml\" */).then(m => NamespaceFromURL(m.ImportYamlPage))} />\n          {\n            // These pages are temporarily disabled. We need to update the safe resources list.\n            // <LazyRoute path=\"/k8s/cluster/clusterroles/:name/add-rule\" exact loader={() => import('./RBAC' /* webpackChunkName: \"rbac\" */).then(m => m.EditRulePage)} />\n            // <LazyRoute path=\"/k8s/cluster/clusterroles/:name/:rule/edit\" exact loader={() => import('./RBAC' /* webpackChunkName: \"rbac\" */).then(m => m.EditRulePage)} />\n          }\n          {\n            // <LazyRoute path=\"/k8s/ns/:ns/roles/:name/add-rule\" exact loader={() => import('./RBAC' /* webpackChunkName: \"rbac\" */).then(m => m.EditRulePage)} />\n            // <LazyRoute path=\"/k8s/ns/:ns/roles/:name/:rule/edit\" exact loader={() => import('./RBAC' /* webpackChunkName: \"rbac\" */).then(m => m.EditRulePage)} />\n          }\n          <LazyRoute path=\"/k8s/ns/:ns/audits\" exact loader={() => import('./hypercloud/audit').then(m => NamespaceFromURL(m.AuditPage))} />\n          <LazyRoute path=\"/k8s/all-namespaces/audits\" exact loader={() => import('./hypercloud/audit').then(m => NamespaceFromURL(m.AuditPage))} />\n          <Route path=\"/grafana/all-namespaces\" exact component={NamespaceFromURL(GrafanaPage)} />\n          <Route path=\"/grafana/ns/:ns\" exact component={NamespaceFromURL(GrafanaPage)} />\n          <Route path=\"/grafana\" exact component={NamespaceRedirect} />\n          <LazyRoute path=\"/kibana/all-namespaces\" exact loader={() => import('./hypercloud/kibana' /* webpackChunkName: \"kibana\" */).then(m => NamespaceFromURL(m.KibanaPage))} />\n          <LazyRoute path=\"/kibana/ns/:ns\" exact loader={() => import('./hypercloud/kibana' /* webpackChunkName: \"kibana\" */).then(m => NamespaceFromURL(m.KibanaPage))} />\n          <Route path=\"/kibana\" exact component={NamespaceRedirect} />\n          {/* <Route path=\"/grafana\" exact component={ActiveNamespaceRedirect} />\n          <LazyRoute path=\"/grafana/all-namespaces\" exact loader={() => import('./hypercloud/grafana').then(m => NamespaceFromURL(m.GrafanaPage))} />\n          <LazyRoute path=\"/grafana/ns/:ns\" exact loader={() => import('./hypercloud/grafana').then(m => NamespaceFromURL(m.GrafanaPage))} /> */}\n\n          {/*Create Form */}\n          <LazyRoute path=\"/k8s/cluster/rolebindings/~new\" exact loader={() => import('./RBAC' /* webpackChunkName: \"rbac\" */).then(m => m.CreateRoleBinding)} kind=\"RoleBinding\" />\n          <LazyRoute path=\"/k8s/ns/:ns/rolebindings/~new\" exact loader={() => import('./RBAC' /* webpackChunkName: \"rbac\" */).then(m => m.CreateRoleBinding)} kind=\"RoleBinding\" />\n          <LazyRoute path=\"/k8s/cluster/pipelines/~new\" exact loader={() => import('../../packages/dev-console/src/components/pipelines/pipeline-builder' /* webpackChunkName: \"PipelineBuilderPage\" */).then(m => m.PipelineBuilderPage)} kind=\"Pipeline\" />\n          <LazyRoute path=\"/k8s/ns/:ns/pipelines/~new\" exact loader={() => import('../../packages/dev-console/src/components/pipelines/pipeline-builder' /* webpackChunkName: \"PipelineBuilderPage\" */).then(m => m.PipelineBuilderPage)} kind=\"Pipeline\" />\n          <LazyRoute path=\"/k8s/ns/:ns/:plural/~new/\" exact />\n          <LazyRoute path=\"/k8s/cluster/:plural/~new/\" exact />\n          {/* <LazyRoute path=\"/k8s/ns/:ns/:plural/~new\" kind=\"CustomResourceDefinition\" exact loader={() => import('./hypercloud/crd/create-pinned-resource').then(m => m.CreateDefaultPage)} />\n          <LazyRoute path=\"/k8s/cluster/:plural/~new\" kind=\"CustomResourceDefinition\" exact loader={() => import('./hypercloud/crd/create-pinned-resource').then(m => m.CreateDefaultPage)} />\n          <LazyRoute path=\"/k8s/ns/:ns/customresourcedefinitions/:plural/~new\" kind=\"CustomResourceDefinition\" exact loader={() => import('./hypercloud/crd/create-custom-resource-definition').then(m => m.CreateCRDPage)} />\n          <LazyRoute path=\"/k8s/cluster/customresourcedefinitions/:plural/~new\" kind=\"CustomResourceDefinition\" exact loader={() => import('./hypercloud/crd/create-custom-resource-definition').then(m => m.CreateCRDPage)} /> */}\n          <LazyRoute path=\"/k8s/ns/:ns/routes/~new/form\" exact kind=\"Route\" loader={() => import('./routes/create-route' /* webpackChunkName: \"create-route\" */).then(m => m.CreateRoute)} />\n          <LazyRoute path=\"/k8s/ns/:ns/persistentvolumeclaims/~new/form\" exact kind=\"PersistentVolumeClaim\" loader={() => import('./storage/create-pvc' /* webpackChunkName: \"create-pvc\" */).then(m => m.CreatePVC)} />\n          <LazyRoute path=\"/monitoring/alertmanagerconfig/receivers/~new\" exact loader={() => import('./monitoring/receiver-forms/alert-manager-receiver-forms' /* webpackChunkName: \"receiver-forms\" */).then(m => m.CreateReceiver)} />\n          <LazyRoute path={'/k8s/cluster/storageclasses/~new/form'} exact loader={() => import('./storage-class-form' /* webpackChunkName: \"storage-class-form\" */).then(m => m.StorageClassForm)} />\n          <LazyRoute path=\"/k8s/cluster/:plural/~new\" exact loader={() => import('./create-yaml' /* webpackChunkName: \"create-yaml\" */).then(m => m.CreateYAML)} />\n          <LazyRoute path=\"/k8s/ns/:ns/:plural/~new\" exact loader={() => import('./create-yaml' /* webpackChunkName: \"create-yaml\" */).then(m => NamespaceFromURL(m.CreateYAML))} />\n          <LazyRoute path=\"/k8s/ns/:ns/secrets/~new/:type\" exact kind=\"Secret\" loader={() => import('./secrets/create-secret' /* webpackChunkName: \"create-secret\" */).then(m => m.CreateSecret)} />\n          <LazyRoute path=\"/k8s/ns/:ns/secrets/:name/edit\" exact kind=\"Secret\" loader={() => import('./secrets/create-secret' /* webpackChunkName: \"create-secret\" */).then(m => m.EditSecret)} />\n          <LazyRoute path=\"/k8s/ns/:ns/secrets/:name/edit-yaml\" exact kind=\"Secret\" loader={() => import('./create-yaml').then(m => m.EditYAMLPage)} />\n          <LazyRoute path=\"/k8s/ns/:ns/rolebindings/:name/copy\" exact kind=\"RoleBinding\" loader={() => import('./RBAC' /* webpackChunkName: \"rbac\" */).then(m => m.CopyRoleBinding)} />\n          <LazyRoute path=\"/k8s/ns/:ns/rolebindings/:name/edit\" exact kind=\"RoleBinding\" loader={() => import('./RBAC' /* webpackChunkName: \"rbac\" */).then(m => m.EditRoleBinding)} />\n          <LazyRoute path=\"/k8s/cluster/clusterrolebindings/:name/copy\" exact kind=\"ClusterRoleBinding\" loader={() => import('./RBAC' /* webpackChunkName: \"rbac\" */).then(m => m.CopyRoleBinding)} />\n          <LazyRoute path=\"/k8s/cluster/clusterrolebindings/:name/edit\" exact kind=\"ClusterRoleBinding\" loader={() => import('./RBAC' /* webpackChunkName: \"rbac\" */).then(m => m.EditRoleBinding)} />\n          <LazyRoute path=\"/k8s/ns/:ns/:plural/:name/attach-storage\" exact loader={() => import('./storage/attach-storage' /* webpackChunkName: \"attach-storage\" */).then(m => m.AttachStorage)} />\n          <LazyRoute path=\"/monitoring/alerts\" exact loader={() => import('./monitoring' /* webpackChunkName: \"monitoring\" */).then(m => m.MonitoringUI)} />\n          <LazyRoute path=\"/monitoring/alertrules\" exact loader={() => import('./monitoring' /* webpackChunkName: \"monitoring\" */).then(m => m.MonitoringUI)} />\n          <LazyRoute path=\"/monitoring/silences\" exact loader={() => import('./monitoring' /* webpackChunkName: \"monitoring\" */).then(m => m.MonitoringUI)} />\n          <LazyRoute path=\"/monitoring/alertmanageryaml\" exact loader={() => import('./monitoring' /* webpackChunkName: \"monitoring\" */).then(m => m.MonitoringUI)} />\n          <LazyRoute path=\"/monitoring/alertmanagerconfig\" exact loader={() => import('./monitoring' /* webpackChunkName: \"monitoring\" */).then(m => m.MonitoringUI)} />\n          <LazyRoute path=\"/monitoring/alertmanagerconfig/receivers/:name/edit\" exact loader={() => import('./monitoring/receiver-forms/alert-manager-receiver-forms' /* webpackChunkName: \"receiver-forms\" */).then(m => m.EditReceiver)} />\n          <LazyRoute path=\"/monitoring\" loader={() => import('./monitoring' /* webpackChunkName: \"monitoring\" */).then(m => m.MonitoringUI)} />\n          <LazyRoute path=\"/settings/idp/github\" exact loader={() => import('./cluster-settings/github-idp-form' /* webpackChunkName: \"github-idp-form\" */).then(m => m.AddGitHubPage)} />\n          <LazyRoute path=\"/settings/idp/gitlab\" exact loader={() => import('./cluster-settings/gitlab-idp-form' /* webpackChunkName: \"gitlab-idp-form\" */).then(m => m.AddGitLabPage)} />\n          <LazyRoute path=\"/settings/idp/google\" exact loader={() => import('./cluster-settings/google-idp-form' /* webpackChunkName: \"google-idp-form\" */).then(m => m.AddGooglePage)} />\n          <LazyRoute path=\"/settings/idp/htpasswd\" exact loader={() => import('./cluster-settings/htpasswd-idp-form' /* webpackChunkName: \"htpasswd-idp-form\" */).then(m => m.AddHTPasswdPage)} />\n          <LazyRoute path=\"/settings/idp/keystone\" exact loader={() => import('./cluster-settings/keystone-idp-form' /* webpackChunkName: \"keystone-idp-form\" */).then(m => m.AddKeystonePage)} />\n          <LazyRoute path=\"/settings/idp/ldap\" exact loader={() => import('./cluster-settings/ldap-idp-form' /* webpackChunkName: \"ldap-idp-form\" */).then(m => m.AddLDAPPage)} />\n          <LazyRoute path=\"/settings/idp/oidconnect\" exact loader={() => import('./cluster-settings/openid-idp-form' /* webpackChunkName: \"openid-idp-form\" */).then(m => m.AddOpenIDPage)} />\n          <LazyRoute path=\"/settings/idp/basicauth\" exact loader={() => import('./cluster-settings/basicauth-idp-form' /* webpackChunkName: \"basicauth-idp-form\" */).then(m => m.AddBasicAuthPage)} />\n          <LazyRoute path=\"/settings/idp/requestheader\" exact loader={() => import('./cluster-settings/request-header-idp-form' /* webpackChunkName: \"request-header-idp-form\" */).then(m => m.AddRequestHeaderPage)} />\n          <LazyRoute path=\"/settings/cluster\" loader={() => import('./cluster-settings/cluster-settings' /* webpackChunkName: \"cluster-settings\" */).then(m => m.ClusterSettingsPage)} />\n          <Route path=\"/k8s/cluster/:plural\" exact component={ResourceListPage} />\n          <Route path=\"/k8s/cluster/:plural/:name\" component={ResourceDetailsPage} />\n          <LazyRoute path=\"/k8s/ns/:ns/pods/:podName/containers/:name\" loader={() => import('./container').then(m => m.ContainersDetailsPage)} />\n          <Route path=\"/k8s/ns/:ns/:plural/:name\" component={ResourceDetailsPage} />\n          <Route path=\"/k8s/ns/:ns/:plural\" exact component={ResourceListPage} />\n          <Route path=\"/k8s/all-namespaces/:plural\" exact component={ResourceListPage} />\n          <Route path=\"/k8s/all-namespaces/:plural/:name\" component={ResourceDetailsPage} />\n          <LazyRoute path=\"/create-sample\" loader={() => import('./hypercloud/create-sample').then(m => m.CreateSample)} />\n          <LazyRoute path=\"/error\" exact loader={() => import('./error' /* webpackChunkName: \"error\" */).then(m => m.ErrorPage)} />\n          <Route path=\"/\" exact component={DefaultPage} />\n          <LazyRoute loader={() => import('./error' /* webpackChunkName: \"error\" */).then(m => m.ErrorPage404)} />\n        </Switch>\n      </div>\n    </div>\n  </PageSection>\n);\n\nconst AppContents = connect((state: RootState) => ({\n  activePerspective: getActivePerspective(state),\n}))(AppContents_);\n\nexport default AppContents;\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { render } from 'react-dom';\nimport { Helmet } from 'react-helmet';\nimport { Provider } from 'react-redux';\nimport { Route, Router, Switch } from 'react-router-dom';\n// AbortController is not supported in some older browser versions\nimport 'abort-controller/polyfill';\nimport store from '../redux';\nimport { detectFeatures } from '../actions/features';\nimport AppContents from './app-contents';\nimport { getBrandingDetails, Masthead } from './masthead';\nimport { ConsoleNotifier } from './console-notifier';\nimport { ConnectedNotificationDrawer } from './notification-drawer';\nimport { Navigation } from './nav';\nimport { history, LoadingBox } from './utils';\nimport * as UIActions from '../actions/ui';\nimport { fetchSwagger, getCachedResources } from '../module/k8s';\nimport { fetchEventSourcesCrd } from '../../packages/knative-plugin/src/utils/fetch-dynamic-eventsources-utils';\nimport { receivedResources, watchAPIServices } from '../actions/k8s';\n// cloud shell imports must come later than features\nimport CloudShell from '@console/app/src/components/cloud-shell/CloudShell';\nimport CloudShellTab from '@console/app/src/components/cloud-shell/CloudShellTab';\nimport '../vendor.scss';\nimport '../style.scss';\nimport './hypercloud/utils/langs/i18n';\n//PF4 Imports\nimport { Page } from '@patternfly/react-core';\n// import Keycloak from 'keycloak-js';\nimport keycloak from '../hypercloud/keycloak';\nimport { setAccessToken, setId, resetLoginState } from '../hypercloud/auth';\nconst breakpointMD = 768;\nconst NOTIFICATION_DRAWER_BREAKPOINT = 1800;\n\n// Edge lacks URLSearchParams\nimport 'url-search-params-polyfill';\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this._onNavToggle = this._onNavToggle.bind(this);\n    this._onNavSelect = this._onNavSelect.bind(this);\n    this._onNotificationDrawerToggle = this._onNotificationDrawerToggle.bind(this);\n    this._isDesktop = this._isDesktop.bind(this);\n    this._onResize = this._onResize.bind(this);\n    this.previousDesktopState = this._isDesktop();\n    this.previousDrawerInlineState = this._isLargeLayout();\n\n    this.state = {\n      isNavOpen: this._isDesktop(),\n      isDrawerInline: this._isLargeLayout(),\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    window.addEventListener('resize', this._onResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this._onResize);\n  }\n\n  componentDidUpdate(prevProps) {\n    const props = this.props;\n    // Prevent infinite loop in case React Router decides to destroy & recreate the component (changing key)\n    const oldLocation = _.omit(prevProps.location, ['key']);\n    const newLocation = _.omit(props.location, ['key']);\n    if (_.isEqual(newLocation, oldLocation) && _.isEqual(props.match, prevProps.match)) {\n      return;\n    }\n    // two way data binding :-/\n    const { pathname } = props.location;\n    store.dispatch(UIActions.setCurrentLocation(pathname));\n  }\n\n  _isLargeLayout() {\n    return window.innerWidth >= NOTIFICATION_DRAWER_BREAKPOINT;\n  }\n\n  _isDesktop() {\n    return window.innerWidth >= breakpointMD;\n  }\n\n  _onNavToggle() {\n    // Some components, like svg charts, need to reflow when nav is toggled.\n    // Fire event after a short delay to allow nav animation to complete.\n    setTimeout(() => {\n      window.dispatchEvent(new Event('sidebar_toggle'));\n    }, 100);\n\n    this.setState(prevState => {\n      return {\n        isNavOpen: !prevState.isNavOpen,\n      };\n    });\n  }\n\n  _onNotificationDrawerToggle() {\n    if (this._isLargeLayout()) {\n      // Fire event after the drawer animation speed delay.\n      setTimeout(() => {\n        window.dispatchEvent(new Event('sidebar_toggle'));\n      }, 250);\n    }\n  }\n\n  _onNavSelect() {\n    //close nav on mobile nav selects\n    if (!this._isDesktop()) {\n      this.setState({ isNavOpen: false });\n    }\n  }\n\n  _onResize() {\n    const isDesktop = this._isDesktop();\n    const isDrawerInline = this._isLargeLayout();\n    if (this.previousDesktopState !== isDesktop) {\n      this.setState({ isNavOpen: isDesktop });\n      this.previousDesktopState = isDesktop;\n    }\n    if (this.previousDrawerInlineState !== isDrawerInline) {\n      this.setState({ isDrawerInline });\n      this.previousDrawerInlineState = isDrawerInline;\n    }\n  }\n\n  render() {\n    const { isNavOpen, isDrawerInline } = this.state;\n    const { productName } = getBrandingDetails();\n\n    return (\n      <>\n        <Helmet titleTemplate={`%s · ${productName}`} defaultTitle={productName} />\n        <ConsoleNotifier location=\"BannerTop\" />\n        <Page header={<Masthead keycloak={keycloak} onNavToggle={this._onNavToggle} />} sidebar={<Navigation isNavOpen={isNavOpen} onNavSelect={this._onNavSelect} onPerspectiveSelected={this._onNavSelect} onClusterSelected={this._onNavSelect} />}>\n          <ConnectedNotificationDrawer isDesktop={isDrawerInline} onDrawerChange={this._onNotificationDrawerToggle}>\n            <AppContents />\n          </ConnectedNotificationDrawer>\n        </Page>\n        <CloudShell />\n        <ConsoleNotifier location=\"BannerBottom\" />\n      </>\n    );\n  }\n}\n\n// export const keycloak = new Keycloak({\n//   realm: window.SERVER_FLAGS.KeycloakRealm,\n//   url: window.SERVER_FLAGS.KeycloakAuthURL,\n//   clientId: window.SERVER_FLAGS.KeycloakClientId,\n// });\n\n// keycloak.logout = keycloak.logout.bind(keycloak, { redirectUri: document.location.origin });\n\nkeycloak\n  .init({\n    onLoad: 'check-sso',\n    checkLoginIframe: false,\n  })\n  .then(authorization => {\n    if (!authorization) {\n      keycloak.login();\n      return;\n    }\n    render(\n      <Provider store={store}>\n        <Router history={history} basename={window.SERVER_FLAGS.basePath}>\n          <Switch>\n            <Route path=\"/terminal\" component={CloudShellTab} />\n            <Route path=\"/\" component={App} />\n          </Switch>\n        </Router>\n      </Provider>,\n      document.getElementById('app'),\n    );\n  })\n  .catch(error => {\n    // render(<div>{!!error ? error : 'Failed to initialize Keycloak'}</div>, document.getElementById('app'));\n    render(\n      <div className=\"co-m-pane__body\">\n        <h1 className=\"co-m-pane__heading co-m-pane__heading--center\">Oh no! Something went wrong.</h1>\n        <label htmlFor=\"description\">Description: </label>\n        <p>{!!error ? error.stack : 'Failed to initialize keycloak'}</p>\n      </div>,\n      document.getElementById('app'),\n    );\n  });\n\nkeycloak.onReady = function() {\n  console.log('[keycloak] onReady');\n};\nkeycloak.onAuthSuccess = function() {\n  console.log('[keycloak] onAuthSuccess');\n\n  setAccessToken(keycloak.idToken);\n  setId(keycloak.idTokenParsed.preferred_username);\n\n  const startDiscovery = () => store.dispatch(watchAPIServices());\n\n  // Load cached API resources from localStorage to speed up page load.\n  getCachedResources()\n    .then(resources => {\n      if (resources) {\n        store.dispatch(receivedResources(resources));\n      }\n      // Still perform discovery to refresh the cache.\n      startDiscovery();\n    })\n    .catch(startDiscovery);\n\n  store.dispatch(detectFeatures());\n\n  // Global timer to ensure all <Timestamp> components update in sync\n  setInterval(() => store.dispatch(UIActions.updateTimestamps(Date.now())), 10000);\n\n  fetchEventSourcesCrd();\n\n  // Fetch swagger on load if it's stale.\n  fetchSwagger();\n\n  // Used by GUI tests to check for unhandled exceptions\n  window.windowError = false;\n  window.onerror = window.onunhandledrejection = e => {\n    // eslint-disable-next-line no-console\n    console.error('Uncaught error', e);\n    window.windowError = e || true;\n  };\n\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker\n      .getRegistrations()\n      .then(registrations => registrations.forEach(reg => reg.unregister()))\n      // eslint-disable-next-line no-console\n      .catch(e => console.warn('Error unregistering service workers', e));\n  }\n};\nkeycloak.onAuthError = function() {\n  console.log('[keycloak] onAuthError');\n};\nkeycloak.onAuthRefreshSuccess = function() {\n  console.log('[keycloak] onAuthRefreshSuccess');\n};\nkeycloak.onAuthRefreshError = function() {\n  console.log('[keycloak] onAuthRefreshError');\n};\nkeycloak.onAuthLogout = function() {\n  console.log('[keycloak] onAuthLogout');\n  keycloak.logout();\n  resetLoginState();\n};\nkeycloak.onTokenExpired = function() {\n  console.log('[keycloak] onTokenExpired ');\n  keycloak.logout();\n  resetLoginState();\n};\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { useDocumentListener, getLabelsAsString } from '@console/shared';\nimport { KeyEventModes } from '@console/shared/src/hooks';\nimport { fuzzyCaseInsensitive } from './factory/table-filters';\nimport { K8sResourceCommon } from '../module/k8s';\nimport { TextFilter } from './factory';\n\nconst MAX_SUGGESTIONS = 5;\n\nconst labelParser = (resources: K8sResourceCommon[]): Set<string> => {\n  return resources.reduce((acc: Set<string>, resource: K8sResourceCommon) => {\n    getLabelsAsString(resource).forEach((label) => acc.add(label));\n    return acc;\n  }, new Set<string>());\n};\n\nconst suggestionBoxKeyHandler = {\n  Escape: KeyEventModes.HIDE,\n};\n\nconst AutocompleteInput: React.FC<AutocompleteInputProps> = (props) => {\n  const [suggestions, setSuggestions] = React.useState<string[]>();\n  const { visible, setVisible, ref } = useDocumentListener<HTMLDivElement>(suggestionBoxKeyHandler);\n  const {\n    textValue,\n    setTextValue,\n    onSuggestionSelect,\n    placeholder,\n    showSuggestions,\n    data,\n    className,\n  } = props;\n\n  const onSelect = (value: string) => {\n    onSuggestionSelect(value);\n    if (visible) {\n      setVisible(false);\n    }\n  };\n\n  const activate = () => {\n    if (textValue.trim()) {\n      setVisible(true);\n    }\n  };\n\n  const handleInput = (input: string) => {\n    if (input) {\n      setVisible(true);\n    } else {\n      setVisible(false);\n    }\n    setTextValue(input);\n  };\n\n  React.useEffect(() => {\n    if (textValue && visible && showSuggestions) {\n      const processed = labelParser(data);\n      const filtered = [...processed]\n        .filter((item) => fuzzyCaseInsensitive(textValue, item))\n        .slice(0, MAX_SUGGESTIONS);\n      setSuggestions(filtered);\n    }\n  }, [visible, textValue, showSuggestions, data]);\n\n  return (\n    <div className=\"co-suggestion-box\" ref={ref}>\n      <div className=\"has-feedback\">\n        <TextFilter\n          data-test-id=\"list-page-search-input\"\n          aria-label=\"Enter Query\"\n          value={textValue}\n          onChange={handleInput}\n          placeholder={placeholder}\n          onFocus={activate}\n        />\n      </div>\n      {showSuggestions && (\n        <div\n          className={classNames('co-suggestion-box__suggestions', {\n            'co-suggestion-box__suggestions--shadowed': visible && suggestions?.length > 0,\n          })}\n        >\n          {visible &&\n            suggestions?.map((elem) => (\n              <SuggestionLine\n                suggestion={elem}\n                key={elem}\n                onClick={onSelect}\n                className={className}\n              />\n            ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\ntype AutocompleteInputProps = {\n  onSuggestionSelect: (selected: string) => void;\n  placeholder?: string;\n  suggestionCount?: number;\n  showSuggestions?: boolean;\n  textValue: string;\n  setTextValue: React.Dispatch<React.SetStateAction<String>>;\n  className?: string;\n  data?: any;\n};\n\nconst SuggestionLine: React.FC<SuggestionLineProps> = ({ suggestion, onClick, className }) => {\n  return (\n    <button className=\"co-suggestion-line\" onClick={() => onClick(suggestion)}>\n      <span className={className}>{suggestion}</span>\n    </button>\n  );\n};\n\ntype SuggestionLineProps = {\n  suggestion: string;\n  onClick: (param: string) => void;\n  className?: string;\n};\n\nexport default AutocompleteInput;\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport {\n  LOG_SOURCE_RUNNING,\n  LOG_SOURCE_TERMINATED,\n  LOG_SOURCE_WAITING,\n  MsgBox,\n  ResourceLog,\n} from './utils';\nimport { getJenkinsLogURL, BuildPipelineLogLink } from './build-pipeline';\nimport { BuildStrategyType } from './build';\nimport { BuildPhase } from '../module/k8s/builds';\n\nconst PipelineLogMessage = ({ build }) => {\n  const logURL = getJenkinsLogURL(build);\n  const message = logURL\n    ? 'Pipeline build logs are available through Jenkins (linked below)'\n    : 'A link to the Jenkins pipeline build logs will appear below when the build starts';\n\n  const detail = (\n    <>\n      <p>{message}</p>\n      <BuildPipelineLogLink obj={build} />\n    </>\n  );\n\n  return <MsgBox title=\"See Jenkins Log\" detail={detail} />;\n};\n\nconst buildPhaseToLogSourceStatus = (phase) => {\n  switch (phase) {\n    case BuildPhase.New:\n    case BuildPhase.Pending:\n      return LOG_SOURCE_WAITING;\n\n    case BuildPhase.Cancelled:\n    case BuildPhase.Complete:\n    case BuildPhase.Error:\n    case BuildPhase.Failed:\n      return LOG_SOURCE_TERMINATED;\n\n    default:\n      return LOG_SOURCE_RUNNING;\n  }\n};\n\nexport class BuildLogs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: LOG_SOURCE_WAITING,\n    };\n  }\n\n  static getDerivedStateFromProps({ obj: build }, { status: prevStatus }) {\n    const phase = _.get(build, 'status.phase');\n    const status = buildPhaseToLogSourceStatus(phase);\n    return prevStatus !== status ? { status } : null;\n  }\n\n  render() {\n    const { obj: build } = this.props;\n    const isPipeline = _.get(build, 'spec.strategy.type') === BuildStrategyType.JenkinsPipeline;\n\n    return (\n      <div className=\"co-m-pane__body\">\n        {isPipeline ? (\n          <PipelineLogMessage build={build} />\n        ) : (\n          <ResourceLog resource={build} resourceStatus={this.state.status} />\n        )}\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as _ from 'lodash-es';\nimport { BanIcon, PendingIcon, SyncAltIcon } from '@patternfly/react-icons';\n\nimport { resourcePath, ExternalLink } from './utils';\nimport { fromNow } from './utils/datetime';\nimport { K8sResourceKind } from '../module/k8s';\nimport { getBuildNumber } from '../module/k8s/builds';\nimport { GreenCheckCircleIcon, RedExclamationCircleIcon } from '@console/shared';\n\nconst getStages = (status): any[] => (status && status.stages) || [];\nconst getJenkinsStatus = (resource: K8sResourceKind) => {\n  const json = _.get(resource, ['metadata', 'annotations', 'openshift.io/jenkins-status-json']);\n  if (!json) {\n    return {};\n  }\n\n  const status = _.attempt(JSON.parse, json);\n  return _.isError(status) ? {} : status;\n};\n\nexport const getJenkinsLogURL = (resource: K8sResourceKind): string =>\n  _.get(resource, ['metadata', 'annotations', 'openshift.io/jenkins-console-log-url']);\nexport const getJenkinsBuildURL = (resource: K8sResourceKind): string =>\n  _.get(resource, ['metadata', 'annotations', 'openshift.io/jenkins-build-uri']);\n\nconst BuildSummaryStatusIcon: React.SFC<BuildSummaryStatusIconProps> = ({ status }) => {\n  const statusClass = _.lowerCase(status);\n  const icon = {\n    new: '',\n    pending: <PendingIcon />,\n    running: <SyncAltIcon className=\"fa-spin\" />,\n    complete: <GreenCheckCircleIcon />,\n    failed: <RedExclamationCircleIcon />,\n    cancelled: <BanIcon />,\n  }[statusClass];\n\n  return icon ? (\n    <span className={`build-pipeline__status-icon build-pipeline__status-icon--${statusClass}`}>\n      {icon}\n    </span>\n  ) : null;\n};\n\nexport const BuildPipelineLogLink: React.SFC<BuildPipelineLogLinkProps> = ({ obj }) => {\n  const link = getJenkinsLogURL(obj);\n  return link ? (\n    <ExternalLink href={link} text=\"View logs\" additionalClassName=\"build-pipeline__log-link\" />\n  ) : null;\n};\n\nconst StagesNotStarted: React.SFC = () => (\n  <div className=\"build-pipeline__stage build-pipeline__stage--none\">No stages have started.</div>\n);\n\nconst BuildSummaryTimestamp: React.SFC<BuildSummaryTimestampProps> = ({ timestamp }) => (\n  <span className=\"build-pipeline__timestamp text-muted\">{fromNow(timestamp)}</span>\n);\n\nconst BuildPipelineSummary: React.SFC<BuildPipelineSummaryProps> = ({ obj }) => {\n  const { name, namespace } = obj.metadata;\n  const buildNumber = getBuildNumber(obj);\n  const path: string = resourcePath(obj.kind, name, namespace);\n  return (\n    <div className=\"build-pipeline__summary\">\n      <div className=\"build-pipeline__phase\">\n        <BuildSummaryStatusIcon status={obj.status.phase} />{' '}\n        <Link to={path} title={name}>\n          Build {buildNumber}\n        </Link>\n      </div>\n      <BuildSummaryTimestamp timestamp={obj.metadata.creationTimestamp} />\n      <BuildPipelineLogLink obj={obj} />\n    </div>\n  );\n};\n\nconst BuildAnimation: React.SFC<BuildAnimationProps> = ({ status }) => (\n  <div className={`build-pipeline__status-bar build-pipeline__status-bar--${_.kebabCase(status)}`}>\n    <div className=\"build-pipeline__animation-line\" />\n    <div className=\"build-pipeline__animation-circle\">\n      <div className=\"build-pipeline__circle-clip1\" />\n      <div className=\"build-pipeline__circle-clip2\" />\n      <div className=\"build-pipeline__circle-inner\">\n        <div className=\"build-pipeline__circle-inner-fill\" />\n      </div>\n    </div>\n  </div>\n);\n\nconst JenkinsInputUrl: React.SFC<JenkinsInputUrlProps> = ({ obj, stage }) => {\n  const pending = stage.status === 'PAUSED_PENDING_INPUT';\n\n  if (!pending) {\n    return null;\n  }\n\n  const buildUrl = getJenkinsBuildURL(obj);\n  return (\n    <div className=\"build-pipeline__stage-actions text-muted\">\n      <ExternalLink href={buildUrl} text=\"Input Required\" />\n    </div>\n  );\n};\n\nconst BuildStageTimestamp: React.SFC<BuildStageTimestampProps> = ({ timestamp }) => (\n  <div className=\"build-pipeline__stage-time text-muted\">{fromNow(timestamp)}</div>\n);\n\nconst BuildStageName: React.SFC<BuildStageNameProps> = ({ name }) => {\n  return (\n    <div title={name} className=\"build-pipeline__stage-name\">\n      {name}\n    </div>\n  );\n};\n\nconst BuildStage: React.SFC<BuildStageProps> = ({ obj, stage }) => {\n  return (\n    <div className=\"build-pipeline__stage\">\n      <div className=\"build-pipeline__stage-column\">\n        <BuildStageName name={stage.name} />\n        <BuildAnimation status={stage.status} />\n        <JenkinsInputUrl obj={obj} stage={stage} />\n        <BuildStageTimestamp timestamp={stage.startTimeMillis} />\n      </div>\n    </div>\n  );\n};\n\nexport const BuildPipeline: React.SFC<BuildPipelineProps> = ({ obj }) => {\n  const jenkinsStatus: any = getJenkinsStatus(obj);\n  const stages = getStages(jenkinsStatus);\n  return (\n    <div className=\"build-pipeline\">\n      <BuildPipelineSummary obj={obj} />\n      <div className=\"build-pipeline__container\">\n        <div className=\"build-pipeline__stages\">\n          {_.isEmpty(stages) ? (\n            <StagesNotStarted />\n          ) : (\n            stages.map((stage) => <BuildStage obj={obj} stage={stage} key={stage.id} />)\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport type BuildPipelineProps = {\n  obj: K8sResourceKind;\n};\n\nexport type BuildStageProps = {\n  obj: K8sResourceKind;\n  stage: any;\n};\n\nexport type BuildAnimationProps = {\n  status: string;\n};\n\nexport type BuildPipelineSummaryProps = {\n  obj: K8sResourceKind;\n};\n\nexport type BuildSummaryStatusIconProps = {\n  status: string;\n};\n\nexport type BuildStageTimestampProps = {\n  timestamp: string;\n};\n\nexport type BuildPipelineLogLinkProps = {\n  obj: K8sResourceKind;\n};\n\nexport type BuildPipelineLinkProps = {\n  obj: K8sResourceKind;\n  title: string;\n};\n\nexport type BuildSummaryTimestampProps = {\n  timestamp: string;\n};\n\nexport type BuildStageNameProps = {\n  name: string;\n};\n\nexport type JenkinsInputUrlProps = {\n  obj: K8sResourceKind;\n  stage: any;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Link } from 'react-router-dom';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { Alert } from '@patternfly/react-core';\n\nimport { Status } from '@console/shared';\nimport { ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\nimport {\n  K8sResourceKindReference,\n  referenceFor,\n  K8sResourceKind,\n  k8sPatch,\n  K8sKind,\n} from '../module/k8s';\nimport { cloneBuild, formatBuildDuration, getBuildNumber } from '../module/k8s/builds';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport { errorModal, confirmModal } from './modals';\nimport {\n  AsyncComponent,\n  BuildHooks,\n  BuildStrategy,\n  DetailsItem,\n  ExternalLink,\n  history,\n  humanizeBinaryBytes,\n  humanizeCpuCores,\n  Kebab,\n  KebabAction,\n  navFactory,\n  ResourceKebab,\n  ResourceLink,\n  resourceObjPath,\n  resourcePath,\n  ResourceSummary,\n  SectionHeading,\n  Timestamp,\n} from './utils';\nimport { BuildPipeline, BuildPipelineLogLink } from './build-pipeline';\nimport { BuildLogs } from './build-logs';\nimport { ResourceEventStream } from './events';\nimport { Area, requirePrometheus } from './graphs';\nimport { BuildModel } from '../models';\n\nconst BuildsReference: K8sResourceKindReference = 'Build';\n\nconst CloneBuildAction: KebabAction = (kind: K8sKind, build: K8sResourceKind) => ({\n  label: 'Rebuild',\n  callback: () =>\n    cloneBuild(build)\n      .then((clone) => {\n        history.push(resourceObjPath(clone, referenceFor(clone)));\n      })\n      .catch((err) => {\n        const error = err.message;\n        errorModal({ error });\n      }),\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    subresource: 'clone',\n    name: build.metadata.name,\n    namespace: build.metadata.namespace,\n    verb: 'create',\n  },\n});\n\nconst CancelAction: KebabAction = (kind: K8sKind, build: K8sResourceKind) => ({\n  label: 'Cancel Build',\n  hidden:\n    build.status.phase !== 'Running' &&\n    build.status.phase !== 'Pending' &&\n    build.status.phase !== 'New',\n  callback: () =>\n    confirmModal({\n      title: 'Cancel build',\n      message: 'Are you sure you want to cancel this build?',\n      btnText: 'Yes, cancel',\n      cancelText: \"No, don't cancel\",\n      executeFn: () =>\n        k8sPatch(kind, build, [{ op: 'add', path: '/status/cancelled', value: true }]),\n    }),\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    name: build.metadata.name,\n    namespace: build.metadata.namespace,\n    verb: 'patch',\n  },\n});\n\nconst menuActions = [\n  CloneBuildAction,\n  CancelAction,\n  ...Kebab.getExtensionsActionsForKind(BuildModel),\n  ...Kebab.factory.common,\n];\n\nexport enum BuildStrategyType {\n  Docker = 'Docker',\n  Custom = 'Custom',\n  JenkinsPipeline = 'JenkinsPipeline',\n  Source = 'Source',\n}\n\nexport const BuildLogLink = ({ build }) => {\n  const {\n    metadata: { name, namespace },\n  } = build;\n  const isPipeline = _.get(build, 'spec.strategy.type') === BuildStrategyType.JenkinsPipeline;\n  return isPipeline ? (\n    <BuildPipelineLogLink obj={build} />\n  ) : (\n    <Link to={`${resourcePath('Build', name, namespace)}/logs`}>View logs</Link>\n  );\n};\n\nexport const BuildNumberLink = ({ build }) => {\n  const {\n    metadata: { name, namespace },\n  } = build;\n  const buildNumber = getBuildNumber(build);\n  const title = _.isFinite(buildNumber) ? `#${buildNumber}` : name;\n\n  return <Link to={resourcePath('Build', name, namespace)}>{title}</Link>;\n};\n\nconst BuildGraphs = requirePrometheus(({ build }) => {\n  const podName = _.get(build, ['metadata', 'annotations', 'openshift.io/build.pod-name']);\n  if (!podName) {\n    return null;\n  }\n\n  const namespace = build.metadata.namespace;\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-md-12 col-lg-4\">\n          <Area\n            title=\"Memory Usage\"\n            humanize={humanizeBinaryBytes}\n            byteDataType={ByteDataTypes.BinaryBytes}\n            namespace={namespace}\n            query={`sum(container_memory_working_set_bytes{pod='${podName}',namespace='${namespace}',container=''}) BY (pod, namespace)`}\n          />\n        </div>\n        <div className=\"col-md-12 col-lg-4\">\n          <Area\n            title=\"CPU Usage\"\n            humanize={humanizeCpuCores}\n            namespace={namespace}\n            query={`pod:container_cpu_usage:sum{pod='${podName}',container='',namespace='${namespace}'}`}\n          />\n        </div>\n        <div className=\"col-md-12 col-lg-4\">\n          <Area\n            title=\"Filesystem\"\n            humanize={humanizeBinaryBytes}\n            byteDataType={ByteDataTypes.BinaryBytes}\n            namespace={namespace}\n            query={`pod:container_fs_usage_bytes:sum{pod='${podName}',container='',namespace='${namespace}'}`}\n          />\n        </div>\n      </div>\n      <br />\n    </>\n  );\n});\n\nexport const PipelineBuildStrategyAlert: React.FC<BuildsDetailsProps> = () => {\n  return (\n    <Alert isInline className=\"co-alert\" variant=\"info\" title=\"Pipeline build strategy deprecation\">\n      With the release of{' '}\n      <ExternalLink\n        href=\"https://openshift.github.io/pipelines-docs/\"\n        text=\"OpenShift Pipelines based on Tekton\"\n      />\n      , the pipelines build strategy has been deprecated. Users should either use Jenkins files\n      directly on Jenkins or use cloud-native CI/CD with Openshift Pipelines.\n      <ExternalLink\n        href=\"https://github.com/openshift/pipelines-tutorial/\"\n        text=\"Try the OpenShift Pipelines tutorial\"\n      />\n    </Alert>\n  );\n};\n\nexport const BuildsDetails: React.SFC<BuildsDetailsProps> = ({ obj: build }) => {\n  const { logSnippet, message, startTimestamp } = build.status;\n  const triggeredBy = _.map(build.spec.triggeredBy, 'message').join(', ');\n  const duration = formatBuildDuration(build);\n  const hasPipeline = build.spec.strategy.type === BuildStrategyType.JenkinsPipeline;\n\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        {hasPipeline && <PipelineBuildStrategyAlert obj={build} />}\n        <SectionHeading text=\"Build Details\" />\n        <BuildGraphs build={build} />\n        {hasPipeline && (\n          <div className=\"row\">\n            <div className=\"col-xs-12\">\n              <BuildPipeline obj={build} />\n            </div>\n          </div>\n        )}\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={build}>\n              <DetailsItem label=\"Triggered By\" obj={build} path=\"spec.triggeredBy\" hideEmpty>\n                {triggeredBy}\n              </DetailsItem>\n              <DetailsItem label=\"Started\" obj={build} path=\"status.startTimestamp\" hideEmpty>\n                <Timestamp timestamp={startTimestamp} />\n              </DetailsItem>\n            </ResourceSummary>\n          </div>\n          <div className=\"col-sm-6\">\n            <BuildStrategy resource={build}>\n              <DetailsItem label=\"Status\" obj={build} path=\"status.phase\">\n                <Status status={build.status.phase} />\n              </DetailsItem>\n              <DetailsItem label=\"Log Snippet\" obj={build} path=\"status.logSnippet\" hideEmpty>\n                <pre>{logSnippet}</pre>\n              </DetailsItem>\n              <DetailsItem label=\"Message\" obj={build} path=\"status.message\" hideEmpty>\n                {message}\n              </DetailsItem>\n              <DetailsItem label=\"Duration\" obj={build} path=\"status.duration\" hideEmpty>\n                {duration}\n              </DetailsItem>\n            </BuildStrategy>\n          </div>\n        </div>\n      </div>\n      <BuildHooks resource={build} />\n    </>\n  );\n};\n\nexport const getStrategyType = (strategy: BuildStrategyType) => {\n  switch (strategy) {\n    case BuildStrategyType.Docker:\n      return 'dockerStrategy';\n    case BuildStrategyType.Custom:\n      return 'customStrategy';\n    case BuildStrategyType.JenkinsPipeline:\n      return 'jenkinsPipelineStrategy';\n    case BuildStrategyType.Source:\n      return 'sourceStrategy';\n    default:\n      return null;\n  }\n};\n\nexport const getEnvPath = (props) => {\n  const strategyType = getStrategyType(props.obj.spec.strategy.type);\n  return strategyType ? ['spec', 'strategy', strategyType] : null;\n};\n\nconst EnvironmentPage = (props) => (\n  <AsyncComponent\n    loader={() => import('./environment.jsx').then((c) => c.EnvironmentPage)}\n    {...props}\n  />\n);\n\nexport const BuildEnvironmentComponent = (props) => {\n  const { obj } = props;\n  const readOnly = obj.kind === 'Build';\n  const envPath = getEnvPath(props);\n  if (envPath) {\n    return (\n      <EnvironmentPage\n        obj={obj}\n        rawEnvData={obj.spec.strategy[getStrategyType(obj.spec.strategy.type)]}\n        envPath={getEnvPath(props)}\n        readOnly={readOnly}\n      />\n    );\n  }\n  return (\n    <div className=\"cos-status-box\">\n      <div className=\"text-center\">\n        The environment variable editor does not support build strategy: {obj.spec.strategy.type}.\n      </div>\n    </div>\n  );\n};\n\nconst pages = [\n  navFactory.details(BuildsDetails),\n  navFactory.editYaml(),\n  navFactory.envEditor(BuildEnvironmentComponent),\n  navFactory.logs(BuildLogs),\n  navFactory.events(ResourceEventStream),\n];\n\nexport const BuildsDetailsPage: React.SFC<BuildsDetailsPageProps> = (props) => (\n  <DetailsPage {...props} kind={BuildsReference} menuActions={menuActions} pages={pages} />\n);\nBuildsDetailsPage.displayName = 'BuildsDetailsPage';\n\nconst tableColumnClasses = [\n  classNames('col-sm-3', 'col-xs-6'),\n  classNames('col-sm-3', 'col-xs-6'),\n  classNames('col-sm-3', 'hidden-xs'),\n  classNames('col-sm-3', 'hidden-xs'),\n  Kebab.columnClass,\n];\n\nconst BuildsTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Status',\n      sortField: 'status.phase',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Created',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[4] },\n    },\n  ];\n};\nBuildsTableHeader.displayName = 'BuildsTableHeader';\n\nconst BuildsTableRow: RowFunction<K8sResourceKind> = ({ obj, index, key, style }) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={BuildsReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.name}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Status status={obj.status.phase} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ResourceKebab actions={menuActions} kind={BuildsReference} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const BuildsList: React.SFC = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Builds\"\n    Header={BuildsTableHeader}\n    Row={BuildsTableRow}\n    virtualize\n  />\n);\n\nBuildsList.displayName = 'BuildsList';\n\nexport const buildPhase = (build) => build.status.phase;\n\nconst allPhases = ['New', 'Pending', 'Running', 'Complete', 'Failed', 'Error', 'Cancelled'];\nconst filters = [\n  {\n    filterGroupName: 'Status',\n    type: 'build-status',\n    reducer: buildPhase,\n    items: _.map(allPhases, (phase) => ({\n      id: phase,\n      title: phase,\n    })),\n  },\n];\n\nexport const BuildsPage: React.SFC<BuildsPageProps> = (props) => (\n  <ListPage\n    {...props}\n    title=\"Builds\"\n    kind={BuildsReference}\n    ListComponent={BuildsList}\n    canCreate={false}\n    rowFilters={filters}\n  />\n);\nBuildsPage.displayName = 'BuildsListPage';\n\nexport type BuildsDetailsProps = {\n  obj: any;\n};\n\nexport type BuildsPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\nexport type BuildsDetailsPageProps = {\n  match: any;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\n\nimport { connectToFlags } from '../reducers/features';\nimport { FLAGS } from '@console/shared';\nimport { Conditions } from './conditions';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport { coFetchJSON } from '../co-fetch';\nimport { ChargebackReportModel, ReportQueryModel } from '../models';\nimport { LoadError, LoadingInline, MsgBox } from './utils/status-box';\nimport { GroupVersionKind, K8sResourceKind, modelFor, referenceForModel } from '../module/k8s';\nimport {\n  Kebab,\n  DownloadButton,\n  LabelList,\n  NavBar,\n  navFactory,\n  PageHeading,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  Timestamp,\n} from './utils';\n\nexport const ReportReference: GroupVersionKind = referenceForModel(ChargebackReportModel);\nexport const ScheduledReportReference: GroupVersionKind = 'metering.openshift.io~ScheduledReport';\nexport const ReportGenerationQueryReference: GroupVersionKind = referenceForModel(ReportQueryModel);\n\nconst reportPages = [\n  { name: 'All Reports', href: ReportReference },\n  { name: 'Report Queries', href: ReportGenerationQueryReference },\n];\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(ChargebackReportModel), ...common];\n\nconst dataURL = (obj: K8sResourceKind, format = 'json') => {\n  return `/api/v2/reports/${obj.metadata.namespace}/${obj.metadata.name}/table?format=${format}`;\n};\n\nconst removeLastPathElement = (path: string) =>\n  path\n    .split('/')\n    .slice(0, -1)\n    .join('/');\n\nconst ChargebackNavBar: React.SFC<{ match: { url: string; path: string } }> = (props) => (\n  <div>\n    <PageHeading title=\"Chargeback Reporting\" style={{ paddingBottom: 15 }} />\n    <NavBar\n      pages={reportPages}\n      basePath={removeLastPathElement(props.match.path)}\n      baseURL={removeLastPathElement(props.match.url)}\n    />\n  </div>\n);\n\nconst tableColumnClasses = [\n  classNames('col-lg-3', 'col-md-3', 'col-xs-4'),\n  classNames('col-lg-2', 'col-md-3', 'col-xs-4'),\n  classNames('col-lg-3', 'hidden-md', 'hidden-sm', 'hidden-xs'),\n  classNames('col-lg-2', 'col-md-2', 'hidden-sm', 'hidden-xs'),\n  classNames('col-lg-2', 'col-md-2', 'hidden-sm', 'hidden-xs'),\n  Kebab.columnClass,\n];\n\nconst ReportsTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Report Query',\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Reporting Start',\n      sortField: 'spec.reportingStart',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Reporting End',\n      sortField: 'spec.reportingEnd',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nReportsTableHeader.displayName = 'ReportsTableHeader';\n\nconst ReportsTableRow: RowFunction<K8sResourceKind> = ({ obj, index, key, style }) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={ReportReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.name}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        <ResourceLink\n          kind=\"Namespace\"\n          name={obj.metadata.namespace}\n          namespace={undefined}\n          title={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <ResourceLink\n          kind={ReportGenerationQueryReference}\n          name={_.get(obj, ['spec', 'query'])}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Timestamp timestamp={_.get(obj, ['spec', 'reportingStart'])} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Timestamp timestamp={_.get(obj, ['spec', 'reportingEnd'])} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab actions={menuActions} kind={ReportReference} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nclass ReportsDetails extends React.Component<ReportsDetailsProps> {\n  render() {\n    const { obj } = this.props;\n    return (\n      <div>\n        <div className=\"co-m-pane__body\">\n          <SectionHeading text=\"Report Details\" />\n          <div className=\"row\">\n            <div className=\"col-sm-6 col-xs-12\">\n              <ResourceSummary resource={obj} />\n            </div>\n            <div className=\"col-sm-6 col-xs-12\">\n              <dl className=\"co-m-pane__details\">\n                <dt>Reporting Start</dt>\n                <dd>\n                  <Timestamp timestamp={_.get(obj, ['spec', 'reportingStart'])} />\n                </dd>\n                <dt>Reporting End</dt>\n                <dd>\n                  <Timestamp timestamp={_.get(obj, ['spec', 'reportingEnd'])} />\n                </dd>\n                <dt>Report Query</dt>\n                <dd>\n                  <ResourceLink\n                    kind={ReportGenerationQueryReference}\n                    name={_.get(obj, ['spec', 'query'])}\n                    namespace={obj.metadata.namespace}\n                    title={obj.metadata.namespace}\n                  />\n                </dd>\n                <dt>Run Immediately?</dt>\n                <dd>{Boolean(_.get(obj, ['spec', 'runImmediately'])).toString()}</dd>\n              </dl>\n            </div>\n          </div>\n        </div>\n        <div className=\"co-m-pane__body\">\n          <SectionHeading text=\"Conditions\" />\n          <Conditions conditions={_.get(obj, 'status.conditions')} />\n        </div>\n        <ReportData obj={obj} />\n      </div>\n    );\n  }\n}\n\nconst numericUnits = new Set([\n  'bytes',\n  'byte_seconds',\n  'cpu_core_seconds',\n  'cpu_cores',\n  'memory_bytes',\n  'memory_byte_seconds',\n  'numeric',\n  'seconds',\n]);\n\nconst DataCell = ({ name, value, unit }: DataTableCellProps) => {\n  if (numericUnits.has(unit)) {\n    return <div className=\"text-right\">{_.round(value, 2).toLocaleString()}</div>;\n  }\n  if (unit === 'date' || unit === 'time') {\n    return <Timestamp timestamp={value} />;\n  }\n  name = _.startCase(name);\n  const model = modelFor(name);\n  if (model) {\n    return <ResourceLink kind={name} name={value} title={value} linkTo={!model.namespaced} />;\n  }\n  return value;\n};\n\nconst DataTable = ({ cols, rows, schema }: DataTableProps) => {\n  const getUnit = (col: string) => {\n    const colSchema = _.find(schema.values, { name: col });\n    return _.get(colSchema, 'unit', _.isFinite(_.get(colSchema, 'value')) ? 'numeric' : null);\n  };\n\n  const DataTableHeader = () =>\n    _.map(cols, (col) => {\n      return {\n        sortField: col,\n        title: <span className=\"pf-m-wrap co-break-word\">{col.replace(/_/g, ' ')}</span>,\n        transforms: [sortable],\n      };\n    });\n\n  const DataTableRows = ({ componentProps: { data } }: DataTableRowsProps) =>\n    _.map(data, (r) =>\n      _.map(r, (v, c) => {\n        return { title: <DataCell name={c} value={v} unit={getUnit(c)} /> };\n      }),\n    );\n\n  return (\n    <Table\n      aria-label=\"Usage Report\"\n      Header={DataTableHeader}\n      Rows={DataTableRows}\n      data={rows}\n      virtualize={false}\n      loaded={true}\n    />\n  );\n};\n\nclass ReportData extends React.Component<ReportDataProps, ReportDataState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inFlight: false,\n      error: null,\n      data: null,\n      sortBy: null,\n      orderBy: null,\n      cols: [],\n      rows: null,\n    };\n  }\n\n  fetchData() {\n    this.setState(\n      {\n        inFlight: true,\n        error: null,\n        // setState is async. Re-render with inFlight = true so that we don't show a \"No data\" msg while data is loading\n      },\n      () =>\n        coFetchJSON(dataURL(this.props.obj))\n          .then((data) => this.makeTable(data))\n          .catch((e) => this.setState({ error: e }))\n          .then(() => this.setState({ inFlight: false })),\n    );\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // if request is still inFlight or props haven't changed then return\n    if (this.state.inFlight || _.isEqual(this.props, nextProps)) {\n      return;\n    }\n\n    const conditions = _.get(nextProps.obj, 'status.conditions');\n    const isReportFinished = _.some(conditions, { type: 'Running', status: 'False' });\n    if (isReportFinished) {\n      this.fetchData();\n    }\n  }\n\n  makeTable(data = this.state.data) {\n    if (!data || _.isEmpty(data.results)) {\n      return;\n    }\n    const cols = this.getColumns(data);\n    const rows = this.getRows(data);\n\n    this.setState({\n      data,\n      cols,\n      rows,\n    });\n  }\n\n  getColumns(data: { results: any[] }) {\n    const firstRow = _.head(data.results);\n    return _.map(firstRow.values, (item) => item.name);\n  }\n\n  getRows(data: { results: any[] }) {\n    /* Converts data to rows:\n    //  data = {\n    //   results: [\n    //     {\n    //       values: [\n    //         {\n    //           name: \"period_start\",\n    //           value: \"2019-01-01T00:00:00Z\",\n    //           unit: \"date\"\n    //         },\n    //         {\n    //           name: \"pod_usage_cpu_core_seconds\",\n    //           value: 235.73856000000004,\n    //           unit: \"core_seconds\"\n    //         },\n    //         ...\n    //       ]\n    //     },\n    //     {\n    //       values: [\n    //         {\n    //           name: \"period_start\",\n    //           value: \"2019-01-01T00:00:00Z\",\n    //           unit: \"date\"\n    //         },\n    //         {\n    //           name: \"pod_usage_cpu_core_seconds\",\n    //           value: 21.864000000000004,\n    //           unit: \"core_seconds\"\n    //\n    //   ... to ...\n    //\n    //   rows = [\n    //   {\n    //   \"period_start\": \"2019-01-01T00:00:00Z\",\n    //   \"pod_usage_cpu_core_seconds\": 235.73856000000004\n    //   ...\n    //  },\n    //  {\n    //   \"period_start\": \"2019-01-01T00:00:00Z\",\n    //   \"pod_usage_cpu_core_seconds\": 21.864000000000004\n    //   ...\n    //  },\n    //  ...\n     */\n    const rows = _.map(data.results, ({ values }) => {\n      return _.reduce(\n        values,\n        (acc, { name, value }) => {\n          acc[name] = value;\n          return acc;\n        },\n        {},\n      );\n    });\n\n    return rows;\n  }\n\n  render() {\n    const { obj } = this.props;\n    const { data, cols, rows, inFlight, error } = this.state;\n\n    let dataElem = <MsgBox title=\"No Data\" detail=\"Report contains no results.\" />;\n    if (inFlight) {\n      dataElem = (\n        <div className=\"row\">\n          <div className=\"col-xs-12 text-center\">\n            <LoadingInline />\n          </div>\n        </div>\n      );\n    } else if (error) {\n      dataElem = <LoadError label=\"Report\" message={_.get(error, 'json.error') || error.message} />;\n    } else if (data) {\n      if (data.error) {\n        dataElem = <LoadError label=\"Report\" message={data.error} />;\n      } else {\n        dataElem = <DataTable cols={cols} rows={rows} schema={_.head(data.results)} />;\n      }\n    }\n    const format = 'csv';\n    const downloadURL = dataURL(obj, format);\n\n    return (\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Usage Report\" />\n        <DownloadButton url={downloadURL} />\n        {dataElem}\n      </div>\n    );\n  }\n}\n\nconst reportsPages = [navFactory.details(ReportsDetails), navFactory.editYaml()];\n\nconst EmptyMsg = () => (\n  <MsgBox\n    title=\"No reports have been generated\"\n    detail=\"Reports allow resource usage and cost to be tracked per namespace, pod, and more.\"\n  />\n);\n\nexport const ReportsList: React.SFC = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Reports\"\n    Header={ReportsTableHeader}\n    Row={ReportsTableRow}\n    EmptyMsg={EmptyMsg}\n    virtualize\n  />\n);\n\nconst ReportsPage_: React.SFC<ReportsPageProps> = (props) => {\n  return (\n    <div>\n      <ChargebackNavBar match={props.match} />\n      <ListPage\n        {...props}\n        showTitle={false}\n        kind={ReportReference}\n        ListComponent={ReportsList}\n        canCreate={true}\n      />\n    </div>\n  );\n};\n\nexport const ReportsPage = connectToFlags(FLAGS.CHARGEBACK)(ReportsPage_);\n\nexport const ReportsDetailsPage: React.SFC<ReportsDetailsPageProps> = (props) => {\n  return (\n    <DetailsPage {...props} kind={ReportReference} menuActions={menuActions} pages={reportsPages} />\n  );\n};\n\nconst reportsGenerationColumnClasses = [\n  classNames('col-md-3', 'col-sm-4'),\n  classNames('col-md-3', 'col-sm-4'),\n  classNames('col-md-3', 'hidden-sm', 'hidden-xs'),\n  classNames('col-md-3', 'col-sm-4'),\n  Kebab.columnClass,\n];\n\nconst ReportGenerationQueriesTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: reportsGenerationColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: reportsGenerationColumnClasses[1] },\n    },\n    {\n      title: 'Labels',\n      props: { className: reportsGenerationColumnClasses[2] },\n    },\n    {\n      title: 'Created',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: reportsGenerationColumnClasses[3] },\n    },\n    {\n      title: '',\n      props: { className: reportsGenerationColumnClasses[4] },\n    },\n  ];\n};\nReportGenerationQueriesTableHeader.displayName = 'ReportGenerationQueriesTableHeader';\n\nconst ReportGenerationQueriesTableRow: RowFunction<K8sResourceKind> = ({\n  obj,\n  index,\n  key,\n  style,\n}) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={reportsGenerationColumnClasses[0]}>\n        <ResourceLink\n          kind={ReportGenerationQueryReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.name}\n        />\n      </TableData>\n      <TableData className={reportsGenerationColumnClasses[1]}>\n        <ResourceLink\n          kind=\"Namespace\"\n          namespace={undefined}\n          name={obj.metadata.namespace}\n          title={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={reportsGenerationColumnClasses[2]}>\n        <LabelList\n          kind={ReportGenerationQueryReference}\n          labels={_.get(obj, ['metadata', 'labels'])}\n        />\n      </TableData>\n      <TableData className={reportsGenerationColumnClasses[3]}>\n        <Timestamp timestamp={_.get(obj, ['metadata', 'creationTimestamp'])} />\n      </TableData>\n      <TableData className={reportsGenerationColumnClasses[4]}>\n        <ResourceKebab actions={menuActions} kind={ReportGenerationQueryReference} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst ReportGenerationQueriesDetails: React.SFC<ReportGenerationQueriesDetailsProps> = ({\n  obj,\n}) => {\n  const columns = _.get(obj, ['spec', 'columns'], []).map((column, i) => (\n    <tr key={i}>\n      <td>{column.name}</td>\n      <td>{column.type}</td>\n    </tr>\n  ));\n\n  return (\n    <div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Chargeback Report Generation Query\" />\n        <ResourceSummary resource={obj}>\n          <dt>Query</dt>\n          <dd>\n            <pre>\n              <code>{_.get(obj, ['spec', 'query'])}</code>\n            </pre>\n          </dd>\n          <div className=\"row\">\n            <div className=\"col-xs-12\">\n              <h3>Columns</h3>\n              <div className=\"co-table-container\">\n                <table className=\"table\">\n                  <thead>\n                    <tr>\n                      <th>Column</th>\n                      <th>Type</th>\n                    </tr>\n                  </thead>\n                  <tbody>{columns}</tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </ResourceSummary>\n      </div>\n    </div>\n  );\n};\n\nexport const ReportGenerationQueriesList: React.SFC = (props) => (\n  <Table\n    aria-label=\"Chargeback Queries List\"\n    {...props}\n    Header={ReportGenerationQueriesTableHeader}\n    Row={ReportGenerationQueriesTableRow}\n    virtualize\n  />\n);\n\nexport const ReportGenerationQueriesPage: React.SFC<ReportGenerationQueriesPageProps> = (props) => (\n  <div>\n    <ChargebackNavBar match={props.match} />\n    <ListPage\n      {...props}\n      showTitle={false}\n      kind={ReportGenerationQueryReference}\n      ListComponent={ReportGenerationQueriesList}\n      canCreate={true}\n      filterLabel={props.filterLabel}\n    />\n  </div>\n);\n\nconst reportGenerationQueryPages = [\n  navFactory.details(ReportGenerationQueriesDetails),\n  navFactory.editYaml(),\n];\nexport const ReportGenerationQueriesDetailsPage: React.SFC<ReportGenerationQueriesDetailsPageProps> = (\n  props,\n) => {\n  return (\n    <DetailsPage\n      {...props}\n      kind={ReportGenerationQueryReference}\n      menuActions={menuActions}\n      pages={reportGenerationQueryPages}\n    />\n  );\n};\n\nexport type ReportsDetailsProps = {\n  obj: any;\n};\n\nexport type ReportDataProps = {\n  obj: any;\n};\nexport type ReportDataState = {\n  error: any;\n  data: any;\n  inFlight: boolean;\n  sortBy: string;\n  orderBy: string;\n  cols: string[];\n  rows: any[];\n};\n\nexport type DataTableProps = {\n  rows: any[];\n  cols: string[];\n  schema: any;\n};\n\nexport type DataTableCellProps = {\n  name: string;\n  value: any;\n  unit: string;\n};\n\nexport type DataTableRowsProps = {\n  componentProps: { data: any[] };\n};\n\nexport type ReportsPageProps = {\n  filterLabel: string;\n  flags: { [_: string]: boolean };\n  match: {\n    url: string;\n    path: string;\n  };\n};\n\nexport type ReportsDetailsPageProps = {\n  match: any;\n};\n\nexport type ReportGenerationQueriesRowProps = {\n  obj: any;\n};\n\nexport type ReportGenerationQueriesDetailsProps = {\n  obj: any;\n};\n\nexport type ReportGenerationQueriesPageProps = {\n  filterLabel: string;\n  match: {\n    url: string;\n    path: string;\n  };\n};\n\nexport type ReportGenerationQueriesDetailsPageProps = {\n  match: any;\n};\n\nReportsList.displayName = 'ReportsList';\nReportsPage.displayName = 'ReportsPage';\nReportsDetailsPage.displayName = 'ReportsDetailsPage';\n\nReportGenerationQueriesDetails.displayName = 'ReportGenerationQueriesDetails';\nReportGenerationQueriesList.displayName = 'ReportGenerationQueriesList';\nReportGenerationQueriesPage.displayName = 'ReportGenerationQueriesPage';\nReportGenerationQueriesDetailsPage.displayName = 'ReportGenerationQueriesDetailsPage';\n","import * as React from 'react';\nimport { Timestamp } from './utils';\nimport { CamelCaseWrap } from './utils/camel-case-wrap';\nimport { K8sResourceCondition } from '../module/k8s';\nimport { useTranslation } from 'react-i18next';\n\nexport const Conditions: React.SFC<ConditionsProps> = ({ conditions, showReason = true, showMessage = true }) => {\n  const { t } = useTranslation();\n  const rows = conditions?.map?.((condition: K8sResourceCondition, i: number) => (\n    <div className=\"row\" data-test-id={condition.type} key={i}>\n      <div className=\"col-xs-4 col-sm-2 col-md-2\">\n        <CamelCaseWrap value={condition.type} />\n      </div>\n      <div className=\"col-xs-4 col-sm-2 col-md-2\" data-test-id=\"status\">\n        {condition.status}\n      </div>\n      <div className=\"hidden-xs hidden-sm col-md-2\">\n        <Timestamp timestamp={condition.lastTransitionTime} />\n      </div>\n      {showReason && (\n        <div className=\"col-xs-4 col-sm-3 col-md-2\">\n          <CamelCaseWrap value={condition.reason} />\n        </div>\n      )}\n      {/* remove initial newline which appears in route messages */}\n      {showMessage && <div className=\"hidden-xs col-sm-5 col-md-4 co-break-word co-pre-line co-conditions__message\">{condition.message?.trim() || '-'}</div>}\n    </div>\n  ));\n\n  return (\n    <>\n      {conditions?.length ? (\n        <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n          <div className=\"row co-m-table-grid__head\">\n            <div className=\"col-xs-4 col-sm-2 col-md-2\">{t('COMMON:MSG_DETAILS_TABDETAILS_CONDITIONS_TABLEHEADER_2')}</div>\n            <div className=\"col-xs-4 col-sm-2 col-md-2\">{t('COMMON:MSG_DETAILS_TABDETAILS_CONDITIONS_TABLEHEADER_3')}</div>\n            <div className=\"hidden-xs hidden-sm col-md-2\">{t('COMMON:MSG_DETAILS_TABDETAILS_CONDITIONS_TABLEHEADER_4')}</div>\n            {showReason && <div className=\"col-xs-4 col-sm-3 col-md-2\">{t('COMMON:MSG_DETAILS_TABDETAILS_CONDITIONS_TABLEHEADER_5')}</div>}\n            {showMessage && <div className=\"hidden-xs col-sm-5 col-md-4\">{t('COMMON:MSG_DETAILS_TABDETAILS_CONDITIONS_TABLEHEADER_6')}</div>}\n          </div>\n          <div className=\"co-m-table-grid__body\">{rows}</div>\n        </div>\n      ) : (\n        <div className=\"cos-status-box\">\n          <div className=\"text-center\">{t('COMMON:MSG_DETAILS_TABDETAILS_CONDITIONS_2')}</div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport type ConditionsProps = {\n  conditions: K8sResourceCondition[];\n  showReason?: boolean;\n  showMessage?: boolean;\n  title?: string;\n  subTitle?: string;\n};\n","import * as React from 'react';\nimport { Base64 } from 'js-base64';\nimport { saveAs } from 'file-saver';\nimport { EyeIcon, EyeSlashIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\n\nimport { CopyToClipboard, EmptyBox, SectionHeading } from './utils';\n\nexport const MaskedData: React.FC<{}> = () => (\n  <>\n    <span className=\"sr-only\">Value hidden</span>\n    <span aria-hidden=\"true\">&bull;&bull;&bull;&bull;&bull;</span>\n  </>\n);\n\nconst downloadBinary = (key, value) => {\n  const rawBinary = window.atob(value);\n  const rawBinaryLength = rawBinary.length;\n  const array = new Uint8Array(new ArrayBuffer(rawBinaryLength));\n  for (let i = 0; i < rawBinaryLength; i++) {\n    array[i] = rawBinary.charCodeAt(i);\n  }\n  const blob = new Blob([array], { type: 'data:application/octet-stream;' });\n  saveAs(blob, key);\n};\n\nexport const ConfigMapBinaryData: React.FC<DownloadValueProps> = ({ data }) => {\n  const dl = [];\n  Object.keys(data || {})\n    .sort()\n    .forEach((k) => {\n      const value = data[k];\n      dl.push(<dt key={`${k}-k`}>{k}</dt>);\n      dl.push(\n        <dd key={`${k}-v`}>\n          <Button\n            className=\"pf-m-link--align-left\"\n            type=\"button\"\n            onClick={() => downloadBinary(k, value)}\n            variant=\"link\"\n          >\n            Save File\n          </Button>\n        </dd>,\n      );\n    });\n  return dl.length ? <dl>{dl}</dl> : <EmptyBox label=\"Binary Data\" />;\n};\nConfigMapBinaryData.displayName = 'ConfigMapBinaryData';\n\nexport const ConfigMapData: React.FC<ConfigMapDataProps> = ({ data, label }) => {\n  const dl = [];\n  Object.keys(data || {})\n    .sort()\n    .forEach((k) => {\n      const value = data[k];\n      dl.push(<dt key={`${k}-k`}>{k}</dt>);\n      dl.push(\n        <dd key={`${k}-v`}>\n          <CopyToClipboard value={value} />\n        </dd>,\n      );\n    });\n  return dl.length ? <dl>{dl}</dl> : <EmptyBox label={label} />;\n};\nConfigMapData.displayName = 'ConfigMapData';\n\nexport const SecretValue: React.FC<SecretValueProps> = ({ value, reveal, encoded = true }) => {\n  if (!value) {\n    return <span className=\"text-muted\">No value</span>;\n  }\n\n  const decodedValue = encoded ? Base64.decode(value) : value;\n  const visibleValue = reveal ? decodedValue : <MaskedData />;\n  return <CopyToClipboard value={decodedValue} visibleValue={visibleValue} />;\n};\nSecretValue.displayName = 'SecretValue';\n\nexport const SecretData: React.FC<SecretDataProps> = ({ data, title = 'Data' }) => {\n  const [reveal, setReveal] = React.useState(false);\n\n  const dl = [];\n  Object.keys(data || {})\n    .sort()\n    .forEach((k) => {\n      dl.push(<dt key={`${k}-k`}>{k}</dt>);\n      dl.push(\n        <dd key={`${k}-v`}>\n          <SecretValue value={data[k]} reveal={reveal} />\n        </dd>,\n      );\n    });\n\n  return (\n    <>\n      <SectionHeading text={title}>\n        {dl.length ? (\n          <Button\n            type=\"button\"\n            onClick={() => setReveal(!reveal)}\n            variant=\"link\"\n            className=\"pf-m-link--align-right\"\n          >\n            {reveal ? (\n              <>\n                <EyeSlashIcon className=\"co-icon-space-r\" />\n                Hide Values\n              </>\n            ) : (\n              <>\n                <EyeIcon className=\"co-icon-space-r\" />\n                Reveal Values\n              </>\n            )}\n          </Button>\n        ) : null}\n      </SectionHeading>\n      {dl.length ? <dl className=\"secret-data\">{dl}</dl> : <EmptyBox label=\"Data\" />}\n    </>\n  );\n};\nSecretData.displayName = 'SecretData';\n\ntype KeyValueData = {\n  [key: string]: string;\n};\n\ntype ConfigMapDataProps = {\n  data: KeyValueData;\n  label: string;\n};\n\ntype DownloadValueProps = {\n  data: KeyValueData;\n};\n\ntype SecretValueProps = {\n  value: string;\n  encoded?: boolean;\n  reveal: boolean;\n};\n\ntype SecretDataProps = {\n  data: KeyValueData;\n  title?: string;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\n\nimport { FLAGS } from '@console/shared';\nimport { connectToFlags } from '../reducers/features';\nimport { Firehose, FirehoseResult } from './utils';\nimport { referenceForModel } from '../module/k8s';\nimport { ConsoleNotificationModel } from '../models/index';\n\nconst ConsoleNotifier_: React.FC<ConsoleNotifierProps> = ({ obj, location }) => {\n  if (_.isEmpty(obj)) {\n    return null;\n  }\n\n  return (\n    <>\n      {_.map(_.get(obj, 'data'), (notification) =>\n        notification.spec.location === location ||\n        notification.spec.location === 'BannerTopBottom' ? (\n          <div\n            key={notification.metadata.uid}\n            className=\"co-global-notification\"\n            style={{\n              backgroundColor: notification.spec.backgroundColor,\n              color: notification.spec.color,\n            }}\n            data-test={`${notification.metadata.name}-${notification.spec.location}`}\n          >\n            <div className=\"co-global-notification__content\">\n              <p className=\"co-global-notification__text\">\n                {notification.spec.text}{' '}\n                {_.get(notification.spec, ['link', 'href']) && (\n                  <a\n                    href={notification.spec.link.href}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"co-external-link\"\n                    style={{ color: notification.spec.color }}\n                  >\n                    {notification.spec.link.text || 'More info'}\n                  </a>\n                )}\n              </p>\n            </div>\n          </div>\n        ) : null,\n      )}\n    </>\n  );\n};\nConsoleNotifier_.displayName = 'ConsoleNotifier_';\n\nexport const ConsoleNotifier = connectToFlags(FLAGS.CONSOLE_NOTIFICATION)(({ flags, ...props }) => {\n  const resources = flags[FLAGS.CONSOLE_NOTIFICATION]\n    ? [\n        {\n          kind: referenceForModel(ConsoleNotificationModel),\n          isList: true,\n          prop: 'obj',\n        },\n      ]\n    : [];\n  return (\n    <Firehose resources={resources}>\n      <ConsoleNotifier_ {...(props as ConsoleNotifierProps)} />\n    </Firehose>\n  );\n});\nConsoleNotifier.displayName = 'ConsoleNotifier';\n\ntype ConsoleNotifierProps = {\n  obj: FirehoseResult;\n  location: 'BannerTop' | 'BannerBottom' | 'BannerTopBottom';\n};\n","export enum OverviewQuery {\n  MEMORY_TOTAL = 'MEMORY_TOTAL',\n  MEMORY_UTILIZATION = 'MEMORY_UTILIZATION',\n  NETWORK_UTILIZATION = 'NETWORK_UTILIZATION',\n  NETWORK_IN_UTILIZATION = 'NETWORK_IN_UTILIZATION',\n  NETWORK_OUT_UTILIZATION = 'NETWORK_OUT_UTILIZATION',\n  CPU_UTILIZATION = 'CPU_UTILIZATION',\n  CPU_TOTAL = 'CPU_TOTAL',\n  STORAGE_UTILIZATION = 'STORAGE_UTILIZATION',\n  STORAGE_TOTAL = 'STORAGE_TOTAL',\n  PODS_BY_CPU = 'PODS_BY_CPU',\n  PODS_BY_MEMORY = 'PODS_BY_MEMORY',\n  PODS_BY_STORAGE = 'PODS_BY_STORAGE',\n  PODS_BY_NETWORK_IN = 'PODS_BY_NETWORK_IN',\n  PODS_BY_NETWORK_OUT = 'PODS_BY_NETWORK_OUT',\n  NODES_BY_CPU = 'NODES_BY_CPU',\n  NODES_BY_MEMORY = 'NODES_BY_MEMORY',\n  NODES_BY_STORAGE = 'NODES_BY_STORAGE',\n  NODES_BY_NETWORK_IN = 'NODES_BY_NETWORK_IN',\n  NODES_BY_NETWORK_OUT = 'NODES_BY_NETWORK_OUT',\n  NODES_BY_PODS = 'NODES_BY_PODS',\n  PROJECTS_BY_CPU = 'PROJECTS_BY_CPU',\n  PROJECTS_BY_MEMORY = 'PROJECTS_BY_MEMORY',\n  PROJECTS_BY_STORAGE = 'PROJECTS_BY_STORAGE',\n  PROJECTS_BY_NETWORK_IN = 'PROJECTS_BY_NETWORK_IN',\n  PROJECTS_BY_NETWORK_OUT = 'PROJECTS_BY_NETWORK_OUT',\n  PROJECTS_BY_PODS = 'PROJECTS_BY_PODS',\n  POD_UTILIZATION = 'POD_UTILIZATION',\n}\n\nconst top25Queries = {\n  [OverviewQuery.PODS_BY_CPU]: 'topk(25, sort_desc(sum(avg_over_time(pod:container_cpu_usage:sum{container=\"\",pod!=\"\"}[5m])) BY (pod, namespace)))',\n  [OverviewQuery.PODS_BY_MEMORY]: 'topk(25, sort_desc(sum(avg_over_time(container_memory_working_set_bytes{container=\"\",pod!=\"\"}[5m])) BY (pod, namespace)))',\n  [OverviewQuery.PODS_BY_STORAGE]: 'topk(25, sort_desc(sum(avg_over_time(pod:container_fs_usage_bytes:sum{container=\"\", pod!=\"\"}[5m])) BY (pod, namespace)))',\n  [OverviewQuery.PODS_BY_NETWORK_IN]: 'topk(25, sort_desc(sum(rate(container_network_receive_bytes_total{ container=\"POD\", pod!= \"\"}[5m])) BY (namespace, pod)))',\n  [OverviewQuery.PODS_BY_NETWORK_OUT]: 'topk(25, sort_desc(sum(rate(container_network_transmit_bytes_total{ container=\"POD\", pod!= \"\"}[5m])) BY (namespace, pod)))',\n  [OverviewQuery.NODES_BY_CPU]: 'topk(25, sort_desc(avg_over_time(instance:node_cpu:rate:sum[5m])))',\n  [OverviewQuery.NODES_BY_MEMORY]: 'topk(25, sort_desc(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes))',\n  [OverviewQuery.NODES_BY_STORAGE]: 'topk(25, sort_desc(avg_over_time(instance:node_filesystem_usage:sum[5m])))',\n  [OverviewQuery.NODES_BY_PODS]: 'topk(25, sort_desc(sum(avg_over_time(kube_pod_info[5m])) BY (node)))',\n  [OverviewQuery.NODES_BY_NETWORK_IN]: 'topk(25, sort_desc(sum(rate(container_network_receive_bytes_total{ container=\"POD\", pod!= \"\"}[5m])) BY (node)))',\n  [OverviewQuery.NODES_BY_NETWORK_OUT]: 'topk(25, sort_desc(sum(rate(container_network_transmit_bytes_total{ container=\"POD\", pod!= \"\"}[5m])) BY (node)))',\n  [OverviewQuery.PROJECTS_BY_CPU]: 'topk(25, sort_desc(sum(avg_over_time(pod:container_cpu_usage:sum{container=\"\",pod!=\"\"}[5m])) BY (namespace)))',\n  [OverviewQuery.PROJECTS_BY_MEMORY]: 'topk(25, sort_desc(sum(avg_over_time(container_memory_working_set_bytes{container=\"\",pod!=\"\"}[5m])) BY (namespace)))',\n  [OverviewQuery.PROJECTS_BY_STORAGE]: 'topk(25, sort_desc(sum(avg_over_time(pod:container_fs_usage_bytes:sum{container=\"\", pod!=\"\"}[5m])) BY (namespace)))',\n  [OverviewQuery.PROJECTS_BY_PODS]: 'topk(25, sort_desc(sum(avg_over_time(kube_pod_info[5m])) BY (namespace)))',\n  [OverviewQuery.PROJECTS_BY_NETWORK_IN]: 'topk(25, sort_desc(sum(rate(container_network_receive_bytes_total{ container=\"POD\", pod!= \"\"}[5m])) BY (namespace)))',\n  [OverviewQuery.PROJECTS_BY_NETWORK_OUT]: 'topk(25, sort_desc(sum(rate(container_network_transmit_bytes_total{ container=\"POD\", pod!= \"\"}[5m])) BY (namespace)))',\n};\n\nconst overviewQueries = {\n  [OverviewQuery.MEMORY_TOTAL]: 'sum(node_memory_MemTotal_bytes)',\n  [OverviewQuery.MEMORY_UTILIZATION]: 'sum(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes)',\n  [OverviewQuery.NETWORK_UTILIZATION]: 'sum(instance:node_network_transmit_bytes_excluding_lo:rate1m+instance:node_network_receive_bytes_excluding_lo:rate1m)',\n  // [OverviewQuery.CPU_UTILIZATION]: 'cluster:cpu_usage_cores:sum',\n  [OverviewQuery.CPU_UTILIZATION]: 'sum(sum by (cpu) (rate(node_cpu_seconds_total{job=\"node-exporter\", mode!=\"idle\"}[1m])))',\n  // [OverviewQuery.CPU_TOTAL]: 'sum(cluster:capacity_cpu_cores:sum)',\n  [OverviewQuery.CPU_TOTAL]: 'sum(sum by (cpu) (rate(node_cpu_seconds_total{job=\"node-exporter\"}[1m])))',\n  [OverviewQuery.STORAGE_UTILIZATION]: '(sum(node_filesystem_size_bytes) - sum(node_filesystem_free_bytes))',\n  [OverviewQuery.STORAGE_TOTAL]: 'sum(node_filesystem_size_bytes)',\n  [OverviewQuery.POD_UTILIZATION]: 'count(kube_pod_info)',\n  [OverviewQuery.NETWORK_IN_UTILIZATION]: 'sum(rate(container_network_receive_bytes_total{container=\"POD\",pod!=\"\"}[5m]))',\n  [OverviewQuery.NETWORK_OUT_UTILIZATION]: 'sum(rate(container_network_transmit_bytes_total{container=\"POD\",pod!=\"\"}[5m]))',\n};\n\nexport const utilizationQueries = {\n  [OverviewQuery.CPU_UTILIZATION]: {\n    utilization: overviewQueries[OverviewQuery.CPU_UTILIZATION],\n    total: overviewQueries[OverviewQuery.CPU_TOTAL],\n  },\n  [OverviewQuery.MEMORY_UTILIZATION]: {\n    utilization: overviewQueries[OverviewQuery.MEMORY_UTILIZATION],\n    total: overviewQueries[OverviewQuery.MEMORY_TOTAL],\n  },\n  [OverviewQuery.STORAGE_UTILIZATION]: {\n    utilization: overviewQueries[OverviewQuery.STORAGE_UTILIZATION],\n    total: overviewQueries[OverviewQuery.STORAGE_TOTAL],\n  },\n  [OverviewQuery.POD_UTILIZATION]: {\n    utilization: overviewQueries[OverviewQuery.POD_UTILIZATION],\n  },\n};\n\nexport const multilineQueries = {\n  [OverviewQuery.NETWORK_UTILIZATION]: [\n    { query: overviewQueries[OverviewQuery.NETWORK_IN_UTILIZATION], desc: 'In' },\n    { query: overviewQueries[OverviewQuery.NETWORK_OUT_UTILIZATION], desc: 'Out' },\n  ],\n};\n\nexport const top25ConsumerQueries = {\n  [OverviewQuery.PODS_BY_CPU]: top25Queries[OverviewQuery.PODS_BY_CPU],\n  [OverviewQuery.PODS_BY_MEMORY]: top25Queries[OverviewQuery.PODS_BY_MEMORY],\n  [OverviewQuery.PODS_BY_STORAGE]: top25Queries[OverviewQuery.PODS_BY_STORAGE],\n  [OverviewQuery.PODS_BY_NETWORK_IN]: top25Queries[OverviewQuery.PODS_BY_NETWORK_IN],\n  [OverviewQuery.PODS_BY_NETWORK_OUT]: top25Queries[OverviewQuery.PODS_BY_NETWORK_OUT],\n  [OverviewQuery.NODES_BY_CPU]: top25Queries[OverviewQuery.NODES_BY_CPU],\n  [OverviewQuery.NODES_BY_MEMORY]: top25Queries[OverviewQuery.NODES_BY_MEMORY],\n  [OverviewQuery.NODES_BY_STORAGE]: top25Queries[OverviewQuery.NODES_BY_STORAGE],\n  [OverviewQuery.NODES_BY_PODS]: top25Queries[OverviewQuery.NODES_BY_PODS],\n  [OverviewQuery.NODES_BY_NETWORK_IN]: top25Queries[OverviewQuery.NODES_BY_NETWORK_IN],\n  [OverviewQuery.NODES_BY_NETWORK_OUT]: top25Queries[OverviewQuery.NODES_BY_NETWORK_OUT],\n  [OverviewQuery.PROJECTS_BY_CPU]: top25Queries[OverviewQuery.PROJECTS_BY_CPU],\n  [OverviewQuery.PROJECTS_BY_MEMORY]: top25Queries[OverviewQuery.PROJECTS_BY_MEMORY],\n  [OverviewQuery.PROJECTS_BY_STORAGE]: top25Queries[OverviewQuery.PROJECTS_BY_STORAGE],\n  [OverviewQuery.PROJECTS_BY_PODS]: top25Queries[OverviewQuery.PROJECTS_BY_PODS],\n  [OverviewQuery.PROJECTS_BY_NETWORK_IN]: top25Queries[OverviewQuery.PROJECTS_BY_NETWORK_IN],\n  [OverviewQuery.PROJECTS_BY_NETWORK_OUT]: top25Queries[OverviewQuery.PROJECTS_BY_NETWORK_OUT],\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport UtilizationItem, { TopConsumerPopoverProp, MultilineUtilizationItem, QueryWithDescription, LimitRequested } from '@console/shared/src/components/dashboard/utilization-card/UtilizationItem';\nimport UtilizationBody from '@console/shared/src/components/dashboard/utilization-card/UtilizationBody';\nimport ConsumerPopover from '@console/shared/src/components/dashboard/utilization-card/TopConsumerPopover';\nimport { ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\nimport { useExtensions, DashboardsOverviewUtilizationItem, isDashboardsOverviewUtilizationItem } from '@console/plugin-sdk';\nimport { PopoverPosition } from '@patternfly/react-core';\nimport { DashboardItemProps, withDashboardResources } from '../../with-dashboard-resources';\nimport { humanizeBinaryBytes, humanizeCpuCores, humanizeNumber, humanizeDecimalBytesPerSec } from '../../../utils/units';\nimport { getRangeVectorStats, getInstantVectorStats } from '../../../graphs/utils';\nimport { Dropdown } from '../../../utils/dropdown';\nimport { OverviewQuery, utilizationQueries, top25ConsumerQueries, multilineQueries } from './queries';\nimport { NodeModel, PodModel, ProjectModel } from '../../../../models';\nimport { getPrometheusQueryResponse } from '../../../../actions/dashboards';\nimport { Humanize } from '../../../utils/types';\nimport { useMetricDuration, UTILIZATION_QUERY_HOUR_MAP } from '@console/shared/src/components/dashboard/duration-hook';\nimport { DataPoint, PrometheusResponse } from '../../../graphs';\nimport { useTranslation } from 'react-i18next';\n\nconst cpuQueriesPopup = [\n  {\n    query: top25ConsumerQueries[OverviewQuery.PROJECTS_BY_CPU],\n    model: ProjectModel,\n    metric: 'namespace',\n  },\n  {\n    query: top25ConsumerQueries[OverviewQuery.PODS_BY_CPU],\n    model: PodModel,\n    metric: 'pod',\n  },\n  {\n    query: top25ConsumerQueries[OverviewQuery.NODES_BY_CPU],\n    model: NodeModel,\n    metric: 'instance',\n  },\n];\n\nconst memQueriesPopup = [\n  {\n    query: top25ConsumerQueries[OverviewQuery.PROJECTS_BY_MEMORY],\n    model: ProjectModel,\n    metric: 'namespace',\n  },\n  {\n    query: top25ConsumerQueries[OverviewQuery.PODS_BY_MEMORY],\n    model: PodModel,\n    metric: 'pod',\n  },\n  {\n    query: top25ConsumerQueries[OverviewQuery.NODES_BY_MEMORY],\n    model: NodeModel,\n    metric: 'instance',\n  },\n];\n\nconst storageQueriesPopup = [\n  {\n    query: top25ConsumerQueries[OverviewQuery.PROJECTS_BY_STORAGE],\n    model: ProjectModel,\n    metric: 'namespace',\n  },\n  {\n    query: top25ConsumerQueries[OverviewQuery.PODS_BY_STORAGE],\n    model: PodModel,\n    metric: 'pod',\n  },\n  {\n    query: top25ConsumerQueries[OverviewQuery.NODES_BY_STORAGE],\n    model: NodeModel,\n    metric: 'instance',\n  },\n];\n\nconst podQueriesPopup = [\n  {\n    query: top25ConsumerQueries[OverviewQuery.PROJECTS_BY_PODS],\n    model: ProjectModel,\n    metric: 'namespace',\n  },\n  {\n    query: top25ConsumerQueries[OverviewQuery.NODES_BY_PODS],\n    model: NodeModel,\n    metric: 'node',\n  },\n];\n\nconst networkInQueriesPopup = [\n  {\n    query: top25ConsumerQueries[OverviewQuery.PROJECTS_BY_NETWORK_IN],\n    model: ProjectModel,\n    metric: 'namespace',\n  },\n  {\n    query: top25ConsumerQueries[OverviewQuery.PODS_BY_NETWORK_IN],\n    model: PodModel,\n    metric: 'pod',\n  },\n  {\n    query: top25ConsumerQueries[OverviewQuery.NODES_BY_NETWORK_IN],\n    model: NodeModel,\n    metric: 'node',\n  },\n];\n\nconst networkOutQueriesPopup = [\n  {\n    query: top25ConsumerQueries[OverviewQuery.PROJECTS_BY_NETWORK_OUT],\n    model: ProjectModel,\n    metric: 'namespace',\n  },\n  {\n    query: top25ConsumerQueries[OverviewQuery.PODS_BY_NETWORK_OUT],\n    model: PodModel,\n    metric: 'pod',\n  },\n  {\n    query: top25ConsumerQueries[OverviewQuery.NODES_BY_NETWORK_OUT],\n    model: NodeModel,\n    metric: 'node',\n  },\n];\n\nconst mapStatsWithDesc = (stats: PrometheusResponse, description: DataPoint['description']): DataPoint[] =>\n  getRangeVectorStats(stats).map(dp => {\n    dp.x.setSeconds(0, 0);\n    return {\n      ...dp,\n      description,\n    };\n  });\n\nexport const PrometheusUtilizationItem = withDashboardResources<PrometheusUtilizationItemProps>(({ watchPrometheus, stopWatchPrometheusQuery, prometheusResults, utilizationQuery, totalQuery, duration, adjustDuration, title, TopConsumerPopover, humanizeValue, byteDataType, setTimestamps, namespace, isDisabled = false, limitQuery, requestQuery, setLimitReqState }) => {\n  let stats: DataPoint[] = [];\n  let limitStats: DataPoint[];\n  let requestStats: DataPoint[];\n  let utilization: PrometheusResponse, utilizationError: any;\n  let total: PrometheusResponse, totalError: any;\n  let max: DataPoint<number>[];\n  let limit: PrometheusResponse, limitError: any;\n  let request: PrometheusResponse, requestError: any;\n  let isLoading = false;\n\n  const effectiveDuration = React.useMemo(() => (adjustDuration ? adjustDuration(UTILIZATION_QUERY_HOUR_MAP[duration]) : UTILIZATION_QUERY_HOUR_MAP[duration]), [adjustDuration, duration]);\n  React.useEffect(() => {\n    if (!isDisabled) {\n      watchPrometheus(utilizationQuery, namespace, effectiveDuration);\n      totalQuery && watchPrometheus(totalQuery, namespace);\n      limitQuery && watchPrometheus(limitQuery, namespace, effectiveDuration);\n      requestQuery && watchPrometheus(requestQuery, namespace, effectiveDuration);\n      return () => {\n        stopWatchPrometheusQuery(utilizationQuery, effectiveDuration);\n        totalQuery && stopWatchPrometheusQuery(totalQuery);\n        limitQuery && stopWatchPrometheusQuery(limitQuery, effectiveDuration);\n        requestQuery && stopWatchPrometheusQuery(requestQuery, effectiveDuration);\n      };\n    }\n  }, [watchPrometheus, stopWatchPrometheusQuery, effectiveDuration, utilizationQuery, totalQuery, namespace, isDisabled, limitQuery, requestQuery]);\n\n  if (!isDisabled) {\n    [utilization, utilizationError] = getPrometheusQueryResponse(prometheusResults, utilizationQuery, effectiveDuration);\n    [total, totalError] = getPrometheusQueryResponse(prometheusResults, totalQuery);\n    [limit, limitError] = getPrometheusQueryResponse(prometheusResults, limitQuery, effectiveDuration);\n    [request, requestError] = getPrometheusQueryResponse(prometheusResults, requestQuery, effectiveDuration);\n\n    stats = mapStatsWithDesc(utilization, (date, value) => `${value} at ${date}`);\n    max = getInstantVectorStats(total);\n    if (limit) {\n      limitStats = mapStatsWithDesc(limit, (date, value) => `${value} total limit`);\n    }\n    if (request) {\n      requestStats = mapStatsWithDesc(request, (date, value) => `${value} total requested`);\n    }\n\n    setTimestamps && setTimestamps(stats.map(stat => stat.x as Date));\n    isLoading = !utilization || (totalQuery && !total) || (limitQuery && !limit);\n  }\n\n  return <UtilizationItem title={title} data={stats} limit={limitStats} requested={requestStats} error={utilizationError || totalError || limitError || requestError} isLoading={isLoading} humanizeValue={humanizeValue} byteDataType={byteDataType} query={utilizationQuery} max={max && max.length ? max[0].y : null} TopConsumerPopover={TopConsumerPopover} setLimitReqState={setLimitReqState} />;\n});\n\nexport const PrometheusMultilineUtilizationItem = withDashboardResources<PrometheusMultilineUtilizationItemProps>(({ watchPrometheus, stopWatchPrometheusQuery, prometheusResults, queries, duration, adjustDuration, title, TopConsumerPopovers, humanizeValue, byteDataType, namespace, isDisabled = false }) => {\n  const effectiveDuration = React.useMemo(() => (adjustDuration ? adjustDuration(UTILIZATION_QUERY_HOUR_MAP[duration]) : UTILIZATION_QUERY_HOUR_MAP[duration]), [adjustDuration, duration]);\n  React.useEffect(() => {\n    if (!isDisabled) {\n      queries.forEach(q => watchPrometheus(q.query, namespace, effectiveDuration));\n      return () => {\n        queries.forEach(q => stopWatchPrometheusQuery(q.query, effectiveDuration));\n      };\n    }\n  }, [watchPrometheus, stopWatchPrometheusQuery, duration, queries, namespace, isDisabled, effectiveDuration]);\n\n  const stats = [];\n  let hasError = false;\n  let isLoading = false;\n  if (!isDisabled) {\n    _.forEach(queries, (query, index) => {\n      const [response, responseError] = getPrometheusQueryResponse(prometheusResults, query.query, effectiveDuration);\n      if (responseError) {\n        hasError = true;\n        return false;\n      }\n      if (!response) {\n        isLoading = true;\n        return false;\n      }\n      stats.push(\n        mapStatsWithDesc(response, (date, value) => {\n          const text = `${query.desc.toUpperCase()}: ${value}`;\n          return index ? text : `${date}\\n${text}`;\n        }),\n      );\n    });\n  }\n\n  return <MultilineUtilizationItem title={title} data={stats} error={hasError} isLoading={isLoading} humanizeValue={humanizeValue} byteDataType={byteDataType} queries={queries} TopConsumerPopovers={TopConsumerPopovers} />;\n});\n\nconst getQueries = (itemExtensions: DashboardsOverviewUtilizationItem[]) => {\n  const pluginQueries = {};\n  itemExtensions.forEach(e => {\n    if (!pluginQueries[e.properties.id]) {\n      pluginQueries[e.properties.id] = {\n        utilization: e.properties.query,\n        total: e.properties.totalQuery,\n      };\n    }\n  });\n  return _.defaults(pluginQueries, utilizationQueries);\n};\n\nexport const UtilizationCard = () => {\n  const { t } = useTranslation();\n  const itemExtensions = useExtensions<DashboardsOverviewUtilizationItem>(isDashboardsOverviewUtilizationItem);\n\n  const queries = React.useMemo(() => getQueries(itemExtensions), [itemExtensions]);\n\n  const [timestamps, setTimestamps] = React.useState<Date[]>();\n  const [duration, setDuration] = useMetricDuration();\n\n  const cpuPopover = React.useCallback(\n    React.memo<TopConsumerPopoverProp>(({ current }) => <ConsumerPopover title=\"CPU\" current={current} consumers={cpuQueriesPopup} humanize={humanizeCpuCores} position={PopoverPosition.top} />),\n    [],\n  );\n\n  const memPopover = React.useCallback(\n    React.memo<TopConsumerPopoverProp>(({ current }) => <ConsumerPopover title=\"Memory\" current={current} consumers={memQueriesPopup} humanize={humanizeBinaryBytes} position={PopoverPosition.top} />),\n    [],\n  );\n\n  const storagePopover = React.useCallback(\n    React.memo<TopConsumerPopoverProp>(({ current }) => <ConsumerPopover title=\"Filesystem\" current={current} consumers={storageQueriesPopup} humanize={humanizeBinaryBytes} position={PopoverPosition.top} />),\n    [],\n  );\n\n  const podPopover = React.useCallback(\n    React.memo<TopConsumerPopoverProp>(({ current }) => <ConsumerPopover title=\"Pod count\" current={current} consumers={podQueriesPopup} humanize={humanizeNumber} position={PopoverPosition.top} />),\n    [],\n  );\n\n  const networkInPopover = React.useCallback(\n    React.memo<TopConsumerPopoverProp>(({ current }) => <ConsumerPopover title=\"Network in\" current={current} consumers={networkInQueriesPopup} humanize={humanizeDecimalBytesPerSec} position={PopoverPosition.top} />),\n    [],\n  );\n\n  const networkOutPopover = React.useCallback(\n    React.memo<TopConsumerPopoverProp>(({ current }) => <ConsumerPopover title=\"Network out\" current={current} consumers={networkOutQueriesPopup} humanize={humanizeDecimalBytesPerSec} position={PopoverPosition.top} />),\n    [],\n  );\n\n  let durationItems = {\n    ['ONE_HR']: t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_1_1'),\n    ['SIX_HR']: t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_6_1'),\n    ['TWENTY_FOUR_HR']: t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_24_1'),\n  };\n\n  let durationValues = {\n    [t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_1_1')]: '1 Hour',\n    [t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_6_1')]: '6 Hours',\n    [t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_24_1')]: '24 Hours',\n  };\n\n  React.useEffect(() => {\n    durationItems = {\n      ['ONE_HR']: t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_1_1'),\n      ['SIX_HR']: t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_6_1'),\n      ['TWENTY_FOUR_HR']: t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_24_1'),\n    };\n    durationValues = {\n      [t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_1_1')]: '1 Hour',\n      [t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_6_1')]: '6 Hours',\n      [t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_24_1')]: '24 Hours',\n    };\n  }, [duration]);\n\n  return (\n    <DashboardCard data-test-id=\"utilization-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>{t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_CLUSTERUTILIZATION_1')}</DashboardCardTitle>\n        <Dropdown items={durationItems} onChange={setDuration} selectedKey={durationValues[duration]} title={duration} />\n      </DashboardCardHeader>\n      <UtilizationBody timestamps={timestamps}>\n        <PrometheusUtilizationItem title={t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_CPU_1')} utilizationQuery={queries[OverviewQuery.CPU_UTILIZATION].utilization} totalQuery={queries[OverviewQuery.CPU_UTILIZATION].total} TopConsumerPopover={cpuPopover} duration={durationValues[duration]} humanizeValue={humanizeCpuCores} setTimestamps={setTimestamps} />\n        <PrometheusUtilizationItem title={t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_MEMORY_1')} utilizationQuery={queries[OverviewQuery.MEMORY_UTILIZATION].utilization} totalQuery={queries[OverviewQuery.MEMORY_UTILIZATION].total} TopConsumerPopover={memPopover} duration={durationValues[duration]} humanizeValue={humanizeBinaryBytes} byteDataType={ByteDataTypes.BinaryBytes} />\n        <PrometheusUtilizationItem title={'Filesystem'} utilizationQuery={queries[OverviewQuery.STORAGE_UTILIZATION].utilization} totalQuery={queries[OverviewQuery.STORAGE_UTILIZATION].total} TopConsumerPopover={storagePopover} duration={durationValues[duration]} humanizeValue={humanizeBinaryBytes} byteDataType={ByteDataTypes.BinaryBytes} />\n        <PrometheusMultilineUtilizationItem title={t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_NETWORK_1')} queries={multilineQueries[OverviewQuery.NETWORK_UTILIZATION]} duration={durationValues[duration]} humanizeValue={humanizeDecimalBytesPerSec} TopConsumerPopovers={[networkInPopover, networkOutPopover]} />\n        <PrometheusUtilizationItem title=\"Pod count\" utilizationQuery={queries[OverviewQuery.POD_UTILIZATION].utilization} TopConsumerPopover={podPopover} duration={durationValues[duration]} humanizeValue={humanizeNumber} />\n      </UtilizationBody>\n    </DashboardCard>\n  );\n};\n\ntype PrometheusCommonProps = {\n  duration: string;\n  adjustDuration?: (start: number) => number;\n  title: string;\n  humanizeValue: Humanize;\n  byteDataType?: ByteDataTypes;\n  namespace?: string;\n  isDisabled?: boolean;\n};\n\ntype PrometheusUtilizationItemProps = DashboardItemProps &\n  PrometheusCommonProps & {\n    utilizationQuery: string;\n    totalQuery?: string;\n    limitQuery?: string;\n    requestQuery?: string;\n    TopConsumerPopover?: React.ComponentType<TopConsumerPopoverProp>;\n    setTimestamps?: (timestamps: Date[]) => void;\n    setLimitReqState?: (state: LimitRequested) => void;\n  };\n\ntype PrometheusMultilineUtilizationItemProps = DashboardItemProps &\n  PrometheusCommonProps & {\n    queries: QueryWithDescription[];\n    TopConsumerPopovers?: React.ComponentType<TopConsumerPopoverProp>[];\n  };\n","import { FirehoseResource } from '../../../utils';\n\nexport const uniqueResource = (\n  resource: FirehoseResource,\n  prefix: string | number,\n): FirehoseResource => ({\n  ...resource,\n  prop: `${prefix}-${resource.prop}`,\n});\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Map as ImmutableMap } from 'immutable';\nimport { connect } from 'react-redux';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardLink from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardLink';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport ActivityBody, {\n  RecentEventsBody,\n  OngoingActivityBody,\n} from '@console/shared/src/components/dashboard/activity-card/ActivityBody';\nimport { DashboardItemProps, withDashboardResources } from '../with-dashboard-resources';\nimport { FirehoseResource, FirehoseResult } from '../../utils';\nimport { EventModel } from '../../../models';\nimport { EventKind, K8sKind } from '../../../module/k8s';\nimport {\n  useExtensions,\n  DashboardsOverviewResourceActivity,\n  isDashboardsOverviewResourceActivity,\n} from '@console/plugin-sdk';\nimport { uniqueResource } from '../dashboards-page/cluster-dashboard/utils';\nimport { RootState } from '../../../redux';\nimport { ProjectDashboardContext } from './project-dashboard-context';\nimport { getName } from '@console/shared';\n\nconst getEventsResource = (projectName: string): FirehoseResource => ({\n  isList: true,\n  kind: EventModel.kind,\n  prop: 'events',\n  namespace: projectName,\n});\n\nconst RecentEvent = withDashboardResources<RecentEventProps>(\n  ({ watchK8sResource, stopWatchK8sResource, resources, projectName, viewEvents }) => {\n    React.useEffect(() => {\n      if (projectName) {\n        const eventsResource = getEventsResource(projectName);\n        watchK8sResource(eventsResource);\n        return () => {\n          stopWatchK8sResource(eventsResource);\n        };\n      }\n    }, [watchK8sResource, stopWatchK8sResource, projectName]);\n    return (\n      <RecentEventsBody\n        events={resources.events as FirehoseResult<EventKind[]>}\n        moreLink={viewEvents}\n      />\n    );\n  },\n);\n\nconst mapStateToProps = (state: RootState): OngoingActivityReduxProps => ({\n  models: state.k8s.getIn(['RESOURCES', 'models']) as ImmutableMap<string, K8sKind>,\n});\n\nconst OngoingActivity = connect(mapStateToProps)(\n  withDashboardResources(\n    ({\n      watchK8sResource,\n      stopWatchK8sResource,\n      resources,\n      projectName,\n      models,\n    }: DashboardItemProps & OngoingActivityProps) => {\n      const resourceActivityExtensions = useExtensions<DashboardsOverviewResourceActivity>(\n        isDashboardsOverviewResourceActivity,\n      );\n\n      const resourceActivities = React.useMemo(\n        () =>\n          resourceActivityExtensions.filter((e) => {\n            const model = models.get(e.properties.k8sResource.kind);\n            return model && model.namespaced;\n          }),\n        [resourceActivityExtensions, models],\n      );\n\n      React.useEffect(() => {\n        if (projectName) {\n          resourceActivities.forEach((a, index) => {\n            watchK8sResource(\n              uniqueResource({ ...a.properties.k8sResource, namespace: projectName }, index),\n            );\n          });\n          return () => {\n            resourceActivities.forEach((a, index) => {\n              stopWatchK8sResource(uniqueResource(a.properties.k8sResource, index));\n            });\n          };\n        }\n      }, [watchK8sResource, stopWatchK8sResource, projectName, resourceActivities]);\n\n      const allResourceActivities = React.useMemo(\n        () =>\n          _.flatten(\n            resourceActivities.map((a, index) => {\n              const k8sResources = _.get(\n                resources,\n                [uniqueResource(a.properties.k8sResource, index).prop, 'data'],\n                [],\n              ) as FirehoseResult['data'];\n              return k8sResources\n                .filter((r) => (a.properties.isActivity ? a.properties.isActivity(r) : true))\n                .map((r) => ({\n                  resource: r,\n                  timestamp: a.properties.getTimestamp ? a.properties.getTimestamp(r) : null,\n                  loader: a.properties.loader,\n                }));\n            }),\n          ),\n        [resourceActivities, resources],\n      );\n\n      const resourcesLoaded = React.useMemo(\n        () =>\n          resourceActivities.every((a, index) =>\n            _.get(resources, [uniqueResource(a.properties.k8sResource, index).prop, 'loaded']),\n          ),\n        [resourceActivities, resources],\n      );\n\n      return (\n        <OngoingActivityBody\n          loaded={projectName && resourcesLoaded && models.size !== 0}\n          resourceActivities={allResourceActivities}\n        />\n      );\n    },\n  ),\n);\n\nexport const ActivityCard: React.FC = () => {\n  const { obj } = React.useContext(ProjectDashboardContext);\n  const projectName = getName(obj);\n  const viewEvents = `/k8s/ns/${projectName}/events`;\n  return (\n    <DashboardCard gradient data-test-id=\"activity-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>Activity</DashboardCardTitle>\n        <DashboardCardLink to={viewEvents}>View events</DashboardCardLink>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <ActivityBody className=\"co-project-dashboard__activity-body\">\n          <OngoingActivity projectName={projectName} />\n          <RecentEvent projectName={projectName} viewEvents={viewEvents} />\n        </ActivityBody>\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\ntype RecentEventProps = DashboardItemProps & {\n  projectName: string;\n  viewEvents: string;\n};\n\ntype OngoingActivityReduxProps = {\n  models: ImmutableMap<string, K8sKind>;\n};\n\ntype OngoingActivityProps = OngoingActivityReduxProps & {\n  projectName: string;\n};\n","import * as _ from 'lodash';\nimport * as React from 'react';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardLink from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardLink';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport DetailsBody from '@console/shared/src/components/dashboard/details-card/DetailsBody';\nimport DetailItem from '@console/shared/src/components/dashboard/details-card/DetailItem';\nimport { getName, getRequester } from '@console/shared';\nimport { LabelList, resourcePathFromModel } from '../../utils';\nimport { ProjectModel } from '../../../models';\nimport { ProjectDashboardContext } from './project-dashboard-context';\n\nexport const DetailsCard: React.FC = () => {\n  const { obj } = React.useContext(ProjectDashboardContext);\n  const keys = _.keys(obj.metadata.labels).sort();\n  const labelsSubset = _.take(keys, 3);\n  const firstThreelabels = _.pick(obj.metadata.labels, labelsSubset);\n  const detailsLink = `${resourcePathFromModel(ProjectModel, obj.metadata.name)}/details`;\n  return (\n    <DashboardCard data-test-id=\"details-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>Details</DashboardCardTitle>\n        <DashboardCardLink to={detailsLink}>View all</DashboardCardLink>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <DetailsBody>\n          <DetailItem isLoading={!obj} title=\"Name\">\n            {getName(obj)}\n          </DetailItem>\n          <DetailItem isLoading={!obj} title=\"Requester\">\n            {getRequester(obj) || <span className=\"text-muted\">No requester</span>}\n          </DetailItem>\n          <DetailItem isLoading={!obj} title=\"Labels\">\n            <div className=\"co-project-dashboard__details-labels\">\n              <LabelList kind={ProjectModel.kind} labels={firstThreelabels} />\n              {keys.length > 3 && <DashboardCardLink to={detailsLink}>View all</DashboardCardLink>}\n            </div>\n          </DetailItem>\n        </DetailsBody>\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { DashboardItemProps, withDashboardResources } from '../with-dashboard-resources';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport {\n  PodModel,\n  DeploymentModel,\n  DeploymentConfigModel,\n  PersistentVolumeClaimModel,\n  ServiceModel,\n  StatefulSetModel,\n  RouteModel,\n  ConfigMapModel,\n  SecretModel,\n} from '../../../models';\nimport {\n  ResourceInventoryItem,\n  StatusGroupMapper,\n} from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport {\n  getPodStatusGroups,\n  getPVCStatusGroups,\n} from '@console/shared/src/components/dashboard/inventory-card/utils';\nimport { FirehoseResult, FirehoseResource, useAccessReview } from '../../utils';\nimport { K8sKind, referenceForModel } from '../../../module/k8s';\nimport { getName } from '@console/shared';\nimport { ProjectDashboardContext } from './project-dashboard-context';\nimport {\n  useExtensions,\n  ProjectDashboardInventoryItem,\n  isProjectDashboardInventoryItem,\n} from '@console/plugin-sdk';\n\nconst createFirehoseResource = (model: K8sKind, projectName: string): FirehoseResource => ({\n  kind: model.crd ? referenceForModel(model) : model.kind,\n  isList: true,\n  prop: 'resource',\n  namespace: projectName,\n});\n\nconst ProjectInventoryItem = withDashboardResources(\n  ({\n    projectName,\n    watchK8sResource,\n    stopWatchK8sResource,\n    resources,\n    model,\n    mapper,\n    useAbbr,\n    additionalResources,\n  }: ProjectInventoryItemProps) => {\n    React.useEffect(() => {\n      if (projectName) {\n        const resource = createFirehoseResource(model, projectName);\n        watchK8sResource(resource);\n        if (additionalResources) {\n          additionalResources.forEach((r) => watchK8sResource({ ...r, namespace: projectName }));\n        }\n        return () => {\n          stopWatchK8sResource(resource);\n          if (additionalResources) {\n            additionalResources.forEach(stopWatchK8sResource);\n          }\n        };\n      }\n    }, [watchK8sResource, stopWatchK8sResource, projectName, model, additionalResources]);\n\n    const resourceData = _.get(resources.resource, 'data', []) as FirehoseResult['data'];\n    const resourceLoaded = _.get(resources.resource, 'loaded');\n    const resourceLoadError = _.get(resources.resource, 'loadError');\n\n    const additionalResourcesData = additionalResources\n      ? additionalResources.reduce((acc, r) => {\n          acc[r.prop] = _.get(resources[r.prop], 'data');\n          return acc;\n        }, {})\n      : {};\n    const additionalResourcesLoaded = additionalResources\n      ? additionalResources\n          .filter((r) => !r.optional)\n          .every((r) => _.get(resources[r.prop], 'loaded'))\n      : true;\n    const additionalResourcesLoadError = additionalResources\n      ? additionalResources\n          .filter((r) => !r.optional)\n          .some((r) => !!_.get(resources[r.prop], 'loadError'))\n      : false;\n\n    return (\n      <ResourceInventoryItem\n        kind={model}\n        isLoading={!projectName || !resourceLoaded || !additionalResourcesLoaded}\n        namespace={projectName}\n        error={!!resourceLoadError || additionalResourcesLoadError}\n        resources={resourceData}\n        additionalResources={additionalResourcesData}\n        mapper={mapper}\n        useAbbr={useAbbr}\n      />\n    );\n  },\n);\n\nexport const InventoryCard = () => {\n  const itemExtensions = useExtensions<ProjectDashboardInventoryItem>(\n    isProjectDashboardInventoryItem,\n  );\n  const { obj } = React.useContext(ProjectDashboardContext);\n  const projectName = getName(obj);\n  const canListSecrets = useAccessReview({\n    group: SecretModel.apiGroup,\n    resource: SecretModel.plural,\n    namespace: projectName,\n    verb: 'list',\n  });\n\n  return (\n    <DashboardCard data-test-id=\"inventory-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>Inventory</DashboardCardTitle>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <ProjectInventoryItem projectName={projectName} model={DeploymentModel} />\n        <ProjectInventoryItem projectName={projectName} model={DeploymentConfigModel} />\n        <ProjectInventoryItem projectName={projectName} model={StatefulSetModel} />\n        <ProjectInventoryItem\n          projectName={projectName}\n          model={PodModel}\n          mapper={getPodStatusGroups}\n        />\n        <ProjectInventoryItem\n          projectName={projectName}\n          model={PersistentVolumeClaimModel}\n          mapper={getPVCStatusGroups}\n          useAbbr\n        />\n        <ProjectInventoryItem projectName={projectName} model={ServiceModel} />\n        <ProjectInventoryItem projectName={projectName} model={RouteModel} />\n        <ProjectInventoryItem projectName={projectName} model={ConfigMapModel} />\n        {canListSecrets && <ProjectInventoryItem projectName={projectName} model={SecretModel} />}\n        {itemExtensions.map((item) => (\n          <ProjectInventoryItem\n            key={item.properties.model.kind}\n            projectName={projectName}\n            model={item.properties.model}\n            mapper={item.properties.mapper}\n            additionalResources={item.properties.additionalResources}\n            useAbbr={item.properties.useAbbr}\n          />\n        ))}\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\ntype ProjectInventoryItemProps = DashboardItemProps & {\n  projectName: string;\n  model: K8sKind;\n  mapper?: StatusGroupMapper;\n  useAbbr?: boolean;\n  additionalResources?: FirehoseResource[];\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport LauncherBody from '@console/shared/src/components/dashboard/launcher-card/LauncherBody';\nimport LauncherItem from '@console/shared/src/components/dashboard/launcher-card/LauncherItem';\nimport { ProjectDashboardContext } from './project-dashboard-context';\n\nexport const LauncherCard: React.FC = () => {\n  const { namespaceLinks } = React.useContext(ProjectDashboardContext);\n  return (\n    <DashboardCard data-test-id=\"launcher-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>Launcher</DashboardCardTitle>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <LauncherBody>\n          {_.sortBy(namespaceLinks, 'spec.text').map((nl) => (\n            <LauncherItem key={nl.metadata.uid} consoleLink={nl} />\n          ))}\n        </LauncherBody>\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n","import * as React from 'react';\nimport { K8sResourceKind } from '../../../module/k8s';\n\nexport const ProjectDashboardContext = React.createContext<ProjectDashboardContext>({});\n\ntype ProjectDashboardContext = {\n  obj?: K8sResourceKind;\n  namespaceLinks?: K8sResourceKind[];\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\n\nimport Dashboard from '@console/shared/src/components/dashboard/Dashboard';\nimport DashboardGrid from '@console/shared/src/components/dashboard/DashboardGrid';\nimport { K8sResourceKind, LabelSelector, Selector } from '../../../module/k8s';\nimport { DetailsCard } from './details-card';\nimport { StatusCard } from './status-card';\nimport { UtilizationCard } from './utilization-card';\nimport { InventoryCard } from './inventory-card';\nimport { ActivityCard } from './activity-card';\nimport { ProjectDashboardContext } from './project-dashboard-context';\nimport { LauncherCard } from './launcher-card';\nimport { connect } from 'react-redux';\nimport { RootState } from '../../../redux';\nimport { ResourceQuotaCard } from './resource-quota-card';\n\nconst mainCards = [{ Card: StatusCard }, { Card: UtilizationCard }, { Card: ResourceQuotaCard }];\nconst leftCards = [{ Card: DetailsCard }, { Card: InventoryCard }];\nconst rightCards = [{ Card: ActivityCard }];\n\nconst mapStateToProps = ({ UI }: RootState): ProjectDashboardReduxProps => ({\n  consoleLinks: UI.get('consoleLinks'),\n});\n\nexport const getNamespaceDashboardConsoleLinks = (\n  ns: K8sResourceKind,\n  consoleLinks: K8sResourceKind[],\n): K8sResourceKind[] => {\n  return _.filter(consoleLinks, (link: K8sResourceKind): boolean => {\n    if (link.spec.location !== 'NamespaceDashboard') {\n      return false;\n    }\n\n    const namespaces: string[] = _.get(link, 'spec.namespaceDashboard.namespaces');\n    const selector: Selector = _.get(link, 'spec.namespaceDashboard.namespaceSelector');\n\n    // If neither namespaces or selector was provided, show the link for all namespaces.\n    if (_.isEmpty(namespaces) && _.isEmpty(selector)) {\n      return true;\n    }\n\n    // Show the link if either namespaces or the selector matches this namespace.\n    if (_.includes(namespaces, ns.metadata.name)) {\n      return true;\n    }\n\n    return !_.isEmpty(selector) && new LabelSelector(selector).matches(ns);\n  });\n};\n\nconst ProjectDashboard_: React.FC<ProjectDashboardReduxProps & ProjectDashboardProps> = ({\n  obj,\n  consoleLinks,\n}) => {\n  const namespaceLinks = getNamespaceDashboardConsoleLinks(obj, consoleLinks);\n  const context = {\n    obj,\n    namespaceLinks,\n  };\n\n  const hasNamespaceLinks = !!namespaceLinks.length;\n\n  const rc = React.useMemo(\n    () => (hasNamespaceLinks ? [{ Card: LauncherCard }, ...rightCards] : rightCards),\n    [hasNamespaceLinks],\n  );\n\n  return (\n    <ProjectDashboardContext.Provider value={context}>\n      <Dashboard>\n        <DashboardGrid mainCards={mainCards} leftCards={leftCards} rightCards={rc} />\n      </Dashboard>\n    </ProjectDashboardContext.Provider>\n  );\n};\n\nexport const ProjectDashboard = connect<ProjectDashboardReduxProps, {}, ProjectDashboardProps>(\n  mapStateToProps,\n)(ProjectDashboard_);\n\ntype ProjectDashboardReduxProps = {\n  consoleLinks: K8sResourceKind[];\n};\n\ntype ProjectDashboardProps = {\n  obj: K8sResourceKind;\n};\n","import * as _ from 'lodash-es';\nimport { QueryWithDescription } from '@console/shared/src/components/dashboard/utilization-card/UtilizationItem';\n\nexport enum ProjectQueries {\n  CPU_USAGE = 'CPU_USAGE',\n  MEMORY_USAGE = 'MEMORY_USAGE',\n  POD_COUNT = 'POD_COUNT',\n  PODS_BY_CPU = 'PODS_BY_CPU',\n  PODS_BY_MEMORY = 'PODS_BY_MEMORY',\n  PODS_BY_FILESYSTEM = 'PODS_BY_FILESYSTEM',\n  PODS_BY_NETWORK_IN = 'PODS_BY_NETWORK_IN',\n  PODS_BY_NETWORK_OUT = 'PODS_BY_NETWORK_OUT',\n  FILESYSTEM_USAGE = 'FILESYSTEM_USAGE',\n  NETWORK_IN_UTILIZATION = 'NETWORK_IN_UTILIZATION',\n  NETWORK_OUT_UTILIZATION = 'NETWORK_OUT_UTILIZATION',\n  NETWORK_UTILIZATION = 'NETWORK_UTILIZATION',\n}\n\nconst queries = {\n  [ProjectQueries.CPU_USAGE]: _.template(\n    `namespace:container_cpu_usage:sum{namespace='<%= project %>'}`,\n  ),\n  [ProjectQueries.MEMORY_USAGE]: _.template(\n    `sum(container_memory_working_set_bytes{namespace='<%= project %>',container=\"\",pod!=\"\"}) BY (namespace)`,\n  ),\n  [ProjectQueries.POD_COUNT]: _.template(\n    `count(kube_pod_info{namespace='<%= project %>'}) BY (namespace)`,\n  ),\n  [ProjectQueries.FILESYSTEM_USAGE]: _.template(\n    `sum(pod:container_fs_usage_bytes:sum{container=\"\",pod!=\"\",namespace='<%= project %>'}) BY (namespace)`,\n  ),\n  [ProjectQueries.NETWORK_IN_UTILIZATION]: _.template(\n    `sum(rate(container_network_receive_bytes_total{container=\"POD\",pod!=\"\",namespace='<%= project %>'}[5m])) BY (namespace)`,\n  ),\n  [ProjectQueries.NETWORK_OUT_UTILIZATION]: _.template(\n    `sum(rate(container_network_transmit_bytes_total{container=\"POD\",pod!=\"\",namespace='<%= project %>'}[5m])) BY (namespace)`,\n  ),\n};\n\nconst top25Queries = {\n  [ProjectQueries.PODS_BY_CPU]: _.template(\n    `topk(25, sort_desc(sum(avg_over_time(pod:container_cpu_usage:sum{container=\"\",pod!=\"\",namespace='<%= project %>'}[5m])) BY (pod, namespace)))`,\n  ),\n  [ProjectQueries.PODS_BY_MEMORY]: _.template(\n    `topk(25, sort_desc(sum(avg_over_time(container_memory_working_set_bytes{container=\"\",pod!=\"\",namespace='<%= project %>'}[5m])) BY (pod, namespace)))`,\n  ),\n  [ProjectQueries.PODS_BY_FILESYSTEM]: _.template(\n    `topk(25, sort_desc(sum(pod:container_fs_usage_bytes:sum{container=\"\",pod!=\"\",namespace='<%= project %>'}) BY (pod, namespace)))`,\n  ),\n  [ProjectQueries.PODS_BY_NETWORK_IN]: _.template(\n    `topk(25, sort_desc(sum(rate(container_network_receive_bytes_total{ container=\"POD\", pod!= \"\", namespace = '<%= project %>'}[5m])) BY (namespace, pod)))`,\n  ),\n  [ProjectQueries.PODS_BY_NETWORK_OUT]: _.template(\n    `topk(25, sort_desc(sum(rate(container_network_transmit_bytes_total{ container=\"POD\", pod!= \"\", namespace = '<%= project %>'}[5m])) BY (namespace, pod)))`,\n  ),\n};\n\nexport const getMultilineQueries = (\n  project: string,\n): { [key: string]: QueryWithDescription[] } => ({\n  [ProjectQueries.NETWORK_UTILIZATION]: [\n    {\n      query: queries[ProjectQueries.NETWORK_IN_UTILIZATION]({ project }),\n      desc: 'In',\n    },\n    {\n      query: queries[ProjectQueries.NETWORK_OUT_UTILIZATION]({ project }),\n      desc: 'Out',\n    },\n  ],\n});\n\nexport const getUtilizationQueries = (project: string) => ({\n  [ProjectQueries.CPU_USAGE]: queries[ProjectQueries.CPU_USAGE]({ project }),\n  [ProjectQueries.MEMORY_USAGE]: queries[ProjectQueries.MEMORY_USAGE]({ project }),\n  [ProjectQueries.POD_COUNT]: queries[ProjectQueries.POD_COUNT]({ project }),\n  [ProjectQueries.FILESYSTEM_USAGE]: queries[ProjectQueries.FILESYSTEM_USAGE]({\n    project,\n  }),\n});\n\nexport const getTopConsumerQueries = (project: string) => ({\n  [ProjectQueries.PODS_BY_CPU]: top25Queries[ProjectQueries.PODS_BY_CPU]({ project }),\n  [ProjectQueries.PODS_BY_MEMORY]: top25Queries[ProjectQueries.PODS_BY_MEMORY]({ project }),\n  [ProjectQueries.PODS_BY_FILESYSTEM]: top25Queries[ProjectQueries.PODS_BY_FILESYSTEM]({ project }),\n  [ProjectQueries.PODS_BY_NETWORK_IN]: top25Queries[ProjectQueries.PODS_BY_NETWORK_IN]({ project }),\n  [ProjectQueries.PODS_BY_NETWORK_OUT]: top25Queries[ProjectQueries.PODS_BY_NETWORK_OUT]({\n    project,\n  }),\n});\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\n\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport ResourceQuotaBody from '@console/shared/src/components/dashboard/resource-quota-card/ResourceQuotaBody';\nimport ResourceQuotaItem from '@console/shared/src/components/dashboard/resource-quota-card/ResourceQuotaItem';\nimport { getQuotaResourceTypes, hasComputeResources } from '../../resource-quota';\nimport { FirehoseResult } from '../../utils';\nimport { ResourceQuotaModel } from '../../../models';\nimport { withDashboardResources, DashboardItemProps } from '../with-dashboard-resources';\nimport { ProjectDashboardContext } from './project-dashboard-context';\n\nconst getResourceQuota = (namespace: string) => ({\n  kind: ResourceQuotaModel.kind,\n  namespace,\n  isList: true,\n  prop: 'resourceQuotas',\n});\n\nexport const ResourceQuotaCard = withDashboardResources(\n  ({ watchK8sResource, stopWatchK8sResource, resources }: DashboardItemProps) => {\n    const { obj } = React.useContext(ProjectDashboardContext);\n    React.useEffect(() => {\n      const resourceQuota = getResourceQuota(obj.metadata.name);\n      watchK8sResource(resourceQuota);\n      return () => stopWatchK8sResource(resourceQuota);\n    }, [obj.metadata.name, watchK8sResource, stopWatchK8sResource]);\n\n    const quotas = _.get(resources.resourceQuotas, 'data', []) as FirehoseResult['data'];\n    const loaded = _.get(resources.resourceQuotas, 'loaded');\n    const error = _.get(resources.resourceQuotas, 'loadError');\n\n    return (\n      <DashboardCard data-test-id=\"resource-quotas-card\">\n        <DashboardCardHeader>\n          <DashboardCardTitle>Resource Quotas</DashboardCardTitle>\n        </DashboardCardHeader>\n        <DashboardCardBody>\n          <ResourceQuotaBody error={!!error} isLoading={!loaded}>\n            {quotas\n              .filter((rq) => hasComputeResources(getQuotaResourceTypes(rq)))\n              .map((rq) => (\n                <ResourceQuotaItem key={rq.metadata.uid} resourceQuota={rq} />\n              ))}\n          </ResourceQuotaBody>\n        </DashboardCardBody>\n      </DashboardCard>\n    );\n  },\n);\n","import * as React from 'react';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport HealthBody from '@console/shared/src/components/dashboard/status-card/HealthBody';\nimport { Status } from '@console/shared';\nimport { ProjectDashboardContext } from './project-dashboard-context';\n\nexport const StatusCard: React.FC = () => {\n  const { obj } = React.useContext(ProjectDashboardContext);\n  return (\n    <DashboardCard gradient data-test-id=\"status-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>Status</DashboardCardTitle>\n      </DashboardCardHeader>\n      <DashboardCardBody isLoading={!obj}>\n        <HealthBody>\n          <Status status={obj.status.phase} />\n        </HealthBody>\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n","import * as React from 'react';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport UtilizationBody from '@console/shared/src/components/dashboard/utilization-card/UtilizationBody';\nimport { TopConsumerPopoverProp } from '@console/shared/src/components/dashboard/utilization-card/UtilizationItem';\nimport { getName } from '@console/shared';\nimport ConsumerPopover from '@console/shared/src/components/dashboard/utilization-card/TopConsumerPopover';\nimport { PopoverPosition } from '@patternfly/react-core';\nimport { ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\nimport { Dropdown } from '../../utils/dropdown';\nimport {\n  humanizeBinaryBytes,\n  humanizeCpuCores,\n  humanizeDecimalBytesPerSec,\n  humanizeNumber,\n} from '../../utils';\nimport { ProjectDashboardContext } from './project-dashboard-context';\nimport { PodModel } from '../../../models';\nimport {\n  useMetricDuration,\n  Duration,\n} from '@console/shared/src/components/dashboard/duration-hook';\nimport {\n  getUtilizationQueries,\n  ProjectQueries,\n  getTopConsumerQueries,\n  getMultilineQueries,\n} from './queries';\nimport {\n  PrometheusUtilizationItem,\n  PrometheusMultilineUtilizationItem,\n} from '../dashboards-page/cluster-dashboard/utilization-card';\n\nexport const UtilizationCard: React.FC = () => {\n  const [timestamps, setTimestamps] = React.useState<Date[]>();\n  const [duration, setDuration] = useMetricDuration();\n  const { obj } = React.useContext(ProjectDashboardContext);\n  const projectName = getName(obj);\n  const queries = React.useMemo(() => getUtilizationQueries(projectName), [projectName]);\n  const multilineQueries = React.useMemo(() => getMultilineQueries(projectName), [projectName]);\n\n  const cpuPopover = React.useCallback(\n    React.memo<TopConsumerPopoverProp>(({ current }) => (\n      <ConsumerPopover\n        title=\"CPU\"\n        current={current}\n        consumers={[\n          {\n            query: getTopConsumerQueries(projectName)[ProjectQueries.PODS_BY_CPU],\n            model: PodModel,\n            metric: 'pod',\n          },\n        ]}\n        humanize={humanizeCpuCores}\n        namespace={projectName}\n        position={PopoverPosition.top}\n      />\n    )),\n    [projectName],\n  );\n\n  const memPopover = React.useCallback(\n    React.memo<TopConsumerPopoverProp>(({ current }) => (\n      <ConsumerPopover\n        title=\"Memory\"\n        current={current}\n        consumers={[\n          {\n            query: getTopConsumerQueries(projectName)[ProjectQueries.PODS_BY_MEMORY],\n            model: PodModel,\n            metric: 'pod',\n          },\n        ]}\n        humanize={humanizeBinaryBytes}\n        namespace={projectName}\n        position={PopoverPosition.top}\n      />\n    )),\n    [projectName],\n  );\n\n  const filesystemPopover = React.useCallback(\n    React.memo<TopConsumerPopoverProp>(({ current }) => (\n      <ConsumerPopover\n        title=\"Filesystem\"\n        current={current}\n        consumers={[\n          {\n            query: getTopConsumerQueries(projectName)[ProjectQueries.PODS_BY_FILESYSTEM],\n            model: PodModel,\n            metric: 'pod',\n          },\n        ]}\n        humanize={humanizeBinaryBytes}\n        namespace={projectName}\n        position={PopoverPosition.top}\n      />\n    )),\n    [projectName],\n  );\n\n  const networkPopoverIn = React.useCallback(\n    React.memo<TopConsumerPopoverProp>(({ current }) => (\n      <ConsumerPopover\n        title=\"Network In\"\n        current={current}\n        consumers={[\n          {\n            query: getTopConsumerQueries(projectName)[ProjectQueries.PODS_BY_NETWORK_IN],\n            model: PodModel,\n            metric: 'pod',\n          },\n        ]}\n        humanize={humanizeDecimalBytesPerSec}\n        namespace={projectName}\n        position={PopoverPosition.top}\n      />\n    )),\n    [projectName],\n  );\n\n  const networkPopoverOut = React.useCallback(\n    React.memo<TopConsumerPopoverProp>(({ current }) => (\n      <ConsumerPopover\n        title=\"Network Out\"\n        current={current}\n        consumers={[\n          {\n            query: getTopConsumerQueries(projectName)[ProjectQueries.PODS_BY_NETWORK_OUT],\n            model: PodModel,\n            metric: 'pod',\n          },\n        ]}\n        humanize={humanizeDecimalBytesPerSec}\n        namespace={projectName}\n        position={PopoverPosition.top}\n      />\n    )),\n    [projectName],\n  );\n\n  const networkPopovers = React.useMemo(() => [networkPopoverIn, networkPopoverOut], [\n    networkPopoverIn,\n    networkPopoverOut,\n  ]);\n\n  return (\n    <DashboardCard data-test-id=\"utilization-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>Utilization</DashboardCardTitle>\n        <Dropdown items={Duration} onChange={setDuration} selectedKey={duration} title={duration} />\n      </DashboardCardHeader>\n      <UtilizationBody timestamps={timestamps}>\n        <PrometheusUtilizationItem\n          title=\"CPU\"\n          humanizeValue={humanizeCpuCores}\n          utilizationQuery={queries[ProjectQueries.CPU_USAGE]}\n          TopConsumerPopover={cpuPopover}\n          duration={duration}\n          setTimestamps={setTimestamps}\n          namespace={projectName}\n        />\n        <PrometheusUtilizationItem\n          title=\"Memory\"\n          humanizeValue={humanizeBinaryBytes}\n          utilizationQuery={queries[ProjectQueries.MEMORY_USAGE]}\n          byteDataType={ByteDataTypes.BinaryBytes}\n          TopConsumerPopover={memPopover}\n          duration={duration}\n          namespace={projectName}\n        />\n        <PrometheusUtilizationItem\n          title=\"Filesystem\"\n          humanizeValue={humanizeBinaryBytes}\n          utilizationQuery={queries[ProjectQueries.FILESYSTEM_USAGE]}\n          byteDataType={ByteDataTypes.BinaryBytes}\n          TopConsumerPopover={filesystemPopover}\n          duration={duration}\n          namespace={projectName}\n        />\n        <PrometheusMultilineUtilizationItem\n          title=\"Network Transfer\"\n          humanizeValue={humanizeDecimalBytesPerSec}\n          queries={multilineQueries[ProjectQueries.NETWORK_UTILIZATION]}\n          TopConsumerPopovers={networkPopovers}\n          duration={duration}\n          namespace={projectName}\n        />\n        <PrometheusUtilizationItem\n          title=\"Pod count\"\n          humanizeValue={humanizeNumber}\n          utilizationQuery={queries[ProjectQueries.POD_COUNT]}\n          duration={duration}\n          namespace={projectName}\n        />\n      </UtilizationBody>\n    </DashboardCard>\n  );\n};\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as _ from 'lodash-es';\n\nimport { RESULTS_TYPE, RequestMap } from '../../reducers/dashboards';\nimport { NotificationAlerts } from '../../reducers/ui';\nimport {\n  Fetch,\n  StopWatchPrometheusAction,\n  stopWatchPrometheusQuery,\n  stopWatchURL,\n  StopWatchURLAction,\n  watchPrometheusQuery,\n  WatchPrometheusQueryAction,\n  watchURL,\n  WatchURLAction,\n  getQueryKey,\n} from '../../actions/dashboards';\nimport { RootState } from '../../redux';\nimport { Firehose, FirehoseResource, FirehoseResult } from '../utils';\nimport { K8sResourceKind } from '../../module/k8s';\nimport { PrometheusResponse } from '../graphs';\n\nconst mapDispatchToProps: DispatchToProps = (dispatch) => ({\n  watchURL: (url, fetch) => dispatch(watchURL(url, fetch)),\n  stopWatchURL: (url) => dispatch(stopWatchURL(url)),\n  watchPrometheusQuery: (query, namespace, timespan) =>\n    dispatch(watchPrometheusQuery(query, namespace, timespan)),\n  stopWatchPrometheusQuery: (query, timespan) =>\n    dispatch(stopWatchPrometheusQuery(query, timespan)),\n});\n\nconst mapStateToProps = (state: RootState) => ({\n  [RESULTS_TYPE.URL]: state.dashboards.get(RESULTS_TYPE.URL),\n  [RESULTS_TYPE.PROMETHEUS]: state.dashboards.get(RESULTS_TYPE.PROMETHEUS) as RequestMap<\n    PrometheusResponse\n  >,\n  notificationAlerts: state.UI.getIn(['monitoring', 'notificationAlerts']),\n});\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = ReturnType<typeof mapDispatchToProps>;\n\nexport const withDashboardResources = <P extends DashboardItemProps>(\n  WrappedComponent: React.ComponentType<P>,\n) =>\n  connect<StateProps, DispatchProps, Diff<P, DashboardItemProps>>(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(\n    class WithDashboardResources extends React.Component<\n      WithDashboardResourcesProps,\n      WithDashboardResourcesState\n    > {\n      private urls: Array<string> = [];\n      private queries: Array<string> = [];\n      private watchingAlerts: boolean = false;\n\n      constructor(props) {\n        super(props);\n        this.state = {\n          k8sResources: [],\n        };\n      }\n\n      shouldComponentUpdate(\n        nextProps: WithDashboardResourcesProps,\n        nextState: WithDashboardResourcesState,\n      ) {\n        const urlResultChanged = this.urls.some(\n          (urlKey) =>\n            this.props[RESULTS_TYPE.URL].getIn([urlKey, 'data']) !==\n              nextProps[RESULTS_TYPE.URL].getIn([urlKey, 'data']) ||\n            this.props[RESULTS_TYPE.URL].getIn([urlKey, 'loadError']) !==\n              nextProps[RESULTS_TYPE.URL].getIn([urlKey, 'loadError']),\n        );\n        const queryResultChanged = this.queries.some(\n          (query) =>\n            this.props[RESULTS_TYPE.PROMETHEUS].getIn([query, 'data']) !==\n              nextProps[RESULTS_TYPE.PROMETHEUS].getIn([query, 'data']) ||\n            this.props[RESULTS_TYPE.PROMETHEUS].getIn([query, 'loadError']) !==\n              nextProps[RESULTS_TYPE.PROMETHEUS].getIn([query, 'loadError']),\n        );\n        const alertsResultChanged =\n          this.props?.notificationAlerts?.data !== nextProps?.notificationAlerts?.data ||\n          this.props?.notificationAlerts?.loadError !== nextProps?.notificationAlerts?.loadError;\n        const k8sResourcesChanged = this.state.k8sResources !== nextState.k8sResources;\n\n        const nextExternalProps = this.getExternalProps(nextProps);\n        const externalProps = this.getExternalProps(this.props);\n\n        return (\n          urlResultChanged ||\n          queryResultChanged ||\n          k8sResourcesChanged ||\n          (this.watchingAlerts && alertsResultChanged) ||\n          Object.keys(nextExternalProps).length !== Object.keys(externalProps).length ||\n          Object.keys(nextExternalProps).some(\n            (key) => nextExternalProps[key] !== externalProps[key],\n          )\n        );\n      }\n\n      watchURL: WatchURL = (url, fetch) => {\n        this.urls.push(url);\n        this.props.watchURL(url, fetch);\n      };\n\n      watchPrometheus: WatchPrometheus = (query, namespace, timespan) => {\n        this.queries.push(getQueryKey(query, timespan));\n        this.props.watchPrometheusQuery(query, namespace, timespan);\n      };\n\n      stopWatchPrometheusQuery: StopWatchPrometheus = (query, timespan) => {\n        const queryKey = getQueryKey(query, timespan);\n        this.queries = this.queries.filter((q) => q !== queryKey);\n        this.props.stopWatchPrometheusQuery(query, timespan);\n      };\n\n      watchAlerts: WatchAlerts = () => {\n        this.watchingAlerts = true;\n      };\n\n      stopWatchAlerts: StopWatchAlerts = () => {\n        this.watchingAlerts = false;\n      };\n\n      watchK8sResource: WatchK8sResource = (resource) => {\n        this.setState((state: WithDashboardResourcesState) => ({\n          k8sResources: [...state.k8sResources, { ...resource, optional: true }],\n        }));\n      };\n\n      stopWatchK8sResource: StopWatchK8sResource = (resource) => {\n        this.setState((state: WithDashboardResourcesState) => ({\n          k8sResources: state.k8sResources.filter((r) => r.prop !== resource.prop),\n        }));\n      };\n\n      getExternalProps = (props) => {\n        return _.omit(\n          props,\n          'watchURL',\n          'stopWatchURL',\n          'watchPrometheusQuery',\n          'stopWatchPrometheusQuery',\n          'watchAlerts',\n          'stopWatchAlerts',\n          RESULTS_TYPE.URL,\n          RESULTS_TYPE.PROMETHEUS,\n          'notificationAlerts',\n        );\n      };\n\n      render() {\n        return (\n          <Firehose resources={this.state.k8sResources}>\n            <WrappedComponent\n              watchURL={this.watchURL}\n              stopWatchURL={this.props.stopWatchURL}\n              watchPrometheus={this.watchPrometheus}\n              stopWatchPrometheusQuery={this.stopWatchPrometheusQuery}\n              watchAlerts={this.watchAlerts}\n              stopWatchAlerts={this.stopWatchAlerts}\n              urlResults={this.props[RESULTS_TYPE.URL]}\n              prometheusResults={this.props[RESULTS_TYPE.PROMETHEUS]}\n              notificationAlerts={this.props.notificationAlerts}\n              watchK8sResource={this.watchK8sResource}\n              stopWatchK8sResource={this.stopWatchK8sResource}\n              {...this.getExternalProps(this.props)}\n            />\n          </Firehose>\n        );\n      }\n    },\n  );\n\ntype DispatchToProps = (\n  dispatch: any,\n) => {\n  watchURL: WatchURL;\n  stopWatchURL: StopWatchURL;\n  watchPrometheusQuery: WatchPrometheus;\n  stopWatchPrometheusQuery: StopWatchPrometheus;\n};\n\ntype WatchURL = (url: string, fetch?: Fetch) => void;\ntype StopWatchURL = (url: string) => void;\ntype WatchPrometheus = (query: string, namespace?: string, timespan?: number) => void;\ntype StopWatchPrometheus = (query: string, timespan?: number) => void;\ntype WatchAlerts = () => void;\ntype StopWatchAlerts = () => void;\n\ntype WithDashboardResourcesState = {\n  k8sResources: FirehoseResource[];\n};\n\ntype WithDashboardResourcesProps = {\n  watchURL: WatchURLAction;\n  watchPrometheusQuery: WatchPrometheusQueryAction;\n  stopWatchURL: StopWatchURLAction;\n  stopWatchPrometheusQuery: StopWatchPrometheusAction;\n  [RESULTS_TYPE.PROMETHEUS]: RequestMap<PrometheusResponse>;\n  [RESULTS_TYPE.URL]: RequestMap<any>;\n  notificationAlerts: any;\n};\n\nexport type WatchK8sResource = (resource: FirehoseResource) => void;\nexport type StopWatchK8sResource = (resource: FirehoseResource) => void;\n\nexport type DashboardItemProps = {\n  watchURL: WatchURL;\n  stopWatchURL: StopWatchURL;\n  watchPrometheus: WatchPrometheus;\n  stopWatchPrometheusQuery: StopWatchPrometheus;\n  watchAlerts: WatchAlerts;\n  stopWatchAlerts: StopWatchAlerts;\n  urlResults: RequestMap<any>;\n  prometheusResults: RequestMap<PrometheusResponse>;\n  notificationAlerts: NotificationAlerts;\n  watchK8sResource: WatchK8sResource;\n  stopWatchK8sResource: StopWatchK8sResource;\n  resources?: {\n    [key: string]: FirehoseResult | FirehoseResult<K8sResourceKind>;\n  };\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { Conditions } from './conditions';\nimport { DetailsPage, ListPage, Table, TableRow, TableData } from './factory';\nimport { referenceFor, kindForReference } from '../module/k8s';\nimport { Kebab, kindObj, navFactory, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading, Timestamp } from './utils';\nimport { ResourceLabel } from '../models/hypercloud/resource-plural';\nimport { useTranslation } from 'react-i18next';\n\nconst { common } = Kebab.factory;\n\nconst tableColumnClasses = [classNames('col-xs-6', 'col-sm-4'), classNames('col-xs-6', 'col-sm-4'), classNames('col-sm-4', 'hidden-xs'), Kebab.columnClass];\n\nconst TableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Created',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n};\nTableHeader.displayName = 'TableHeader';\n\nconst TableRowForKind = ({ obj, index, key, style, customData }) => {\n  const kind = referenceFor(obj) || customData.kind;\n  const menuActions = [...Kebab.getExtensionsActionsForKind(kindObj(kind)), ...common];\n\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={customData.kind} name={obj.metadata.name} namespace={obj.metadata.namespace} title={obj.metadata.name} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>{obj.metadata.namespace ? <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} title={obj.metadata.namespace} /> : 'None'}</TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const DetailsForKind = kind =>\n  function DetailsForKind_({ obj }) {\n    const { t } = useTranslation();\n    const ko = kindObj(kind);\n    const label = ResourceLabel(ko, t);\n    return (\n      <>\n        <div className=\"co-m-pane__body\">\n          {/* <SectionHeading text={`${kindForReference(kind)} Details`} /> */}\n          <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: label })} />\n          <ResourceSummary resource={obj} podSelector=\"spec.podSelector\" showNodeSelector={false} />\n        </div>\n        {_.isArray(obj?.status?.conditions) && (\n          <div className=\"co-m-pane__body\">\n            <SectionHeading text=\"Conditions\" />\n            <Conditions conditions={obj.status.conditions} />\n          </div>\n        )}\n      </>\n    );\n  };\n\nexport const DefaultList = props => {\n  const { kinds } = props;\n\n  return <Table {...props} aria-label=\"Default Resource\" kinds={[kinds[0]]} customData={{ kind: kinds[0] }} Header={TableHeader} Row={TableRowForKind} virtualize />;\n};\nDefaultList.displayName = 'DefaultList';\n\nexport const DefaultPage = props => <ListPage {...props} ListComponent={DefaultList} canCreate={props.canCreate || _.get(kindObj(props.kind), 'crd')} />;\nDefaultPage.displayName = 'DefaultPage';\n\nexport const DefaultDetailsPage = props => {\n  const pages = [navFactory.details(DetailsForKind(props.kind)), navFactory.editYaml()];\n  const menuActions = [...Kebab.getExtensionsActionsForKind(kindObj(props.kind)), ...common];\n\n  return <DetailsPage {...props} menuActions={menuActions} pages={pages} />;\n};\nDefaultDetailsPage.displayName = 'DefaultDetailsPage';\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport { ErrorBoundaryFallbackProps } from '@console/shared/src/components/error/error-boundary';\nimport { CopyToClipboard, getQueryArgument, PageHeading, ExpandCollapse } from './utils';\n\n// User messages for error_types returned in auth.go\nconst messages = {\n  auth: {\n    /* eslint-disable camelcase */\n    oauth_error: 'There was an error generating OAuth client from OIDC client.',\n    login_state_error: 'There was an error generating login state.',\n    cookie_error: 'There was an error setting login state cookie',\n    missing_code: 'Auth code is missing in query param.',\n    missing_state: 'There was an error parsing your state cookie',\n    invalid_code: 'There was an error logging you in. Please log out and try again.',\n    invalid_state: 'There was an error verifying your session. Please log out and try again.',\n    logout_error: 'There was an error logging you out. Please try again.',\n    /* eslint-enable camelcase */\n    default:\n      'There was an authentication error with the system. Please try again or contact support.',\n  },\n};\n\nconst getMessage = (type, id) =>\n  _.get(messages, `${type}.${id}`) || _.get(messages, `${type}.default`) || '';\nconst urlMessage = () => {\n  const type = getQueryArgument('error_type');\n  const error = getQueryArgument('error');\n  return type && error ? getMessage(type, error) : '';\n};\nconst getErrMessage = () => {\n  const msg = getQueryArgument('error_msg');\n  if (msg) {\n    try {\n      return decodeURIComponent(msg);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log(e);\n    }\n  }\n  return '';\n};\n\nconst ErrorComponent: React.SFC<ErrorComponentProps> = ({ title, message, errMessage }) => (\n  <>\n    <PageHeading detail={true} title=\"Error\" />\n    <div className=\"co-m-pane__body\" data-test-id=\"error-page\">\n      <h1 className=\"co-m-pane__heading co-m-pane__heading--center\">{title}</h1>\n      {message && <div className=\"text-center\">{message}</div>}\n      {errMessage && <div className=\"text-center text-muted\">{errMessage}</div>}\n    </div>\n  </>\n);\n\nexport const ErrorPage: React.SFC<ErrorPageProps> = () => (\n  <div>\n    <Helmet>\n      <title>Error</title>\n    </Helmet>\n    <ErrorComponent\n      title=\"Oh no! Something went wrong.\"\n      message={urlMessage()}\n      errMessage={getErrMessage()}\n    />\n  </div>\n);\n\nexport const ErrorPage404: React.SFC<ErrorPage404Props> = (props) => (\n  <div>\n    <Helmet>\n      <title>Page Not Found (404)</title>\n    </Helmet>\n    <ErrorComponent\n      title=\"404: Page Not Found\"\n      message={props.message}\n      errMessage={props.errMessage}\n    />\n  </div>\n);\n\nexport const ErrorBoundaryFallback: React.SFC<ErrorBoundaryFallbackProps> = (props) => (\n  <div className=\"co-m-pane__body\">\n    <h1 className=\"co-m-pane__heading co-m-pane__heading--center\">Oh no! Something went wrong.</h1>\n    <ExpandCollapse textCollapsed=\"Show Details\" textExpanded=\"Hide Details\">\n      <h3 className=\"co-section-heading-tertiary\">{props.title}</h3>\n      <div className=\"form-group\">\n        <label htmlFor=\"description\">Description: </label>\n        <p>{props.errorMessage}</p>\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"componentTrace\">Component Trace: </label>\n        <div className=\"co-copy-to-clipboard__stacktrace-width-height\">\n          <CopyToClipboard value={props.componentStack.trim()} />\n        </div>\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"stackTrace\">Stack Trace: </label>\n        <div className=\"co-copy-to-clipboard__stacktrace-width-height\">\n          <CopyToClipboard value={props.stack.trim()} />\n        </div>\n      </div>\n    </ExpandCollapse>\n  </div>\n);\n\nexport type ErrorComponentProps = {\n  title: string;\n  message?: string;\n  errMessage?: string;\n};\n\nexport type ErrorPageProps = {};\nexport type ErrorPage404Props = Omit<ErrorComponentProps, 'title'>;\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { Button, Chip, ChipGroup, ChipGroupToolbarItem } from '@patternfly/react-core';\nimport { CloseIcon } from '@patternfly/react-icons';\n\nimport { namespaceProptype } from '../propTypes';\nimport { ResourceListDropdown } from './resource-dropdown';\nimport { TextFilter } from './factory';\nimport { apiGroupForReference, isGroupVersionKind, kindForReference, referenceFor, watchURL } from '../module/k8s';\nimport { withStartGuide } from './start-guide';\nimport { WSFactory } from '../module/ws-factory';\nimport { EventModel, NodeModel } from '../models';\nimport { connectToFlags } from '../reducers/features';\nimport { FLAGS } from '@console/shared/src/constants';\nimport { Box, Dropdown, Loading, PageHeading, pluralize, ResourceIcon, ResourceLink, resourcePathFromModel, Timestamp, TogglePlay } from './utils';\nimport { EventStreamList } from './utils/event-stream';\nimport { useTranslation, withTranslation } from 'react-i18next';\n\nconst maxMessages = 500;\nconst flushInterval = 500;\n\n// We have to check different properties depending on whether events were\n// created with the core/v1 events API or the new events.k8s.io API.\nconst getFirstTime = event => event.firstTimestamp || event.eventTime;\nexport const getLastTime = event => {\n  const lastObservedTime = event.series ? event.series.lastObservedTime : null;\n  return event.lastTimestamp || lastObservedTime || event.eventTime;\n};\nexport const sortEvents = events => {\n  return _.orderBy(events, [getLastTime, getFirstTime, 'name'], ['desc', 'desc', 'asc']);\n};\n\n// Predicate function to filter by event \"type\" (normal, warning, or all)\nexport const typeFilter = (eventType, event) => {\n  if (eventType === 'all') {\n    return true;\n  }\n  const { type = 'normal' } = event;\n  return type.toLowerCase() === eventType;\n};\n\nconst kindFilter = (reference, { involvedObject }) => {\n  if (reference === 'all') {\n    return true;\n  }\n  const kinds = reference.split(',');\n  return kinds.some(ref => {\n    if (!isGroupVersionKind(ref)) {\n      return involvedObject.kind === ref;\n    }\n    // Use `referenceFor` to resolve `apiVersion` when missing from `involvedObject`.\n    // We need `apiVersion` to get the group.\n    const involvedObjectRef = referenceFor(involvedObject);\n    if (!involvedObjectRef) {\n      return false;\n    }\n    // Only check the group and kind, not the API version, so that we catch\n    // events for the same resource under a different API version.\n    return involvedObject.kind === kindForReference(ref) && apiGroupForReference(involvedObjectRef) === apiGroupForReference(ref);\n  });\n};\n\nconst Inner = connectToFlags(FLAGS.CAN_LIST_NODE)(\n  withTranslation()(\n    class Inner extends React.PureComponent {\n      render() {\n        const { event, flags, t } = this.props;\n        const { involvedObject: obj, source, message, reason, series } = event;\n        const tooltipMsg = `${reason} (${obj.kind})`;\n        const isWarning = typeFilter('warning', event);\n        const firstTime = getFirstTime(event);\n        const lastTime = getLastTime(event);\n        const count = series ? series.count : event.count;\n        return (\n          <div className={classNames('co-sysevent', { 'co-sysevent--warning': isWarning })}>\n            <div className=\"co-sysevent__icon-box\">\n              <i className=\"co-sysevent-icon\" title={tooltipMsg} />\n              <div className=\"co-sysevent__icon-line\" />\n            </div>\n            <div className=\"co-sysevent__box\" role=\"gridcell\">\n              <div className=\"co-sysevent__header\">\n                <div className=\"co-sysevent__subheader\">\n                  <ResourceLink className=\"co-sysevent__resourcelink\" kind={referenceFor(obj)} namespace={obj.namespace} name={obj.name} />\n                  {obj.namespace && <ResourceLink className=\"co-sysevent__resourcelink hidden-xs\" kind=\"Namespace\" name={obj.namespace} />}\n                  {lastTime && <Timestamp className=\"co-sysevent__timestamp\" timestamp={lastTime} />}\n                </div>\n                <div className=\"co-sysevent__details\">\n                  <small className=\"co-sysevent__source\">\n                    {t('SINGLE:MSG_EVENTS_MAIN_1', { something: source.component })}\n                    {source.component === 'kubelet' && <span> on {flags[FLAGS.CAN_LIST_NODE] ? <Link to={resourcePathFromModel(NodeModel, source.host)}>{source.host}</Link> : <>{source.host}</>}</span>}\n                  </small>\n                  {count > 1 && (\n                    <small className=\"co-sysevent__count text-secondary\">\n                      {count} times\n                      {firstTime && (\n                        <>\n                          {' '}\n                          in the last <Timestamp timestamp={firstTime} simple={true} omitSuffix={true} />\n                        </>\n                      )}\n                    </small>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"co-sysevent__message\">{message}</div>\n            </div>\n          </div>\n        );\n      }\n    },\n  ),\n);\n\nclass _EventsList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      type: 'all',\n      textFilter: '',\n      selected: new Set(['All']),\n    };\n  }\n\n  toggleSelected = selection => {\n    if (this.state.selected.has('All') || selection === 'All') {\n      this.setState({ selected: new Set([selection]) });\n    } else {\n      const updateItems = new Set(this.state.selected);\n      updateItems.has(selection) ? updateItems.delete(selection) : updateItems.add(selection);\n      this.setState({ selected: updateItems });\n    }\n  };\n\n  clearSelection = () => {\n    this.setState({ selected: new Set(['All']) });\n  };\n\n  render() {\n    const { type, selected, textFilter } = this.state;\n    const { autoFocus = true, t } = this.props;\n\n    const eventTypes = { all: t('SINGLE:MSG_EVENTS_MAIN_TYPES_1'), normal: t('SINGLE:MSG_EVENTS_MAIN_TYPES_2'), warning: t('SINGLE:MSG_EVENTS_MAIN_TYPES_3') };\n    const selectedType = eventTypes[type];\n    return (\n      <>\n        <PageHeading detail={true} title={this.props.title}>\n          <div className=\"co-search-group\">\n            <ResourceListDropdown onChange={this.toggleSelected} selected={Array.from(selected)} showAll clearSelection={this.clearSelection} className=\"co-search-group__resource\" />\n            <Dropdown className=\"btn-group co-search-group__resource\" items={eventTypes} onChange={v => this.setState({ type: v })} selectedKey={type} title={selectedType} />\n            <TextFilter autoFocus={autoFocus} label={t('SINGLE:MSG_EVENTS_MAIN_PLACEHOLDER_1')} onChange={val => this.setState({ textFilter: val || '' })} />\n          </div>\n          <div className=\"form-group\">\n            <ChipGroup withToolbar defaultIsOpen={false}>\n              <ChipGroupToolbarItem key=\"resources-category\" categoryName={t('COMMON:MSG_COMMON_FILTER_1')}>\n                {[...selected].map(chip => (\n                  <Chip key={chip} onClick={() => this.toggleSelected(chip)}>\n                    <ResourceIcon kind={chip} />\n                    {kindForReference(chip)}\n                  </Chip>\n                ))}\n                {selected.size > 0 && (\n                  <>\n                    <Button variant=\"plain\" aria-label=\"Close\" onClick={this.clearSelection}>\n                      <CloseIcon />\n                    </Button>\n                  </>\n                )}\n              </ChipGroupToolbarItem>\n            </ChipGroup>\n          </div>\n        </PageHeading>\n        <_EventStream {...this.props} key={[...selected].join(',')} type={type} kind={selected.has('All') || selected.size === 0 ? 'all' : [...selected].join(',')} mock={this.props.mock} textFilter={textFilter} />\n      </>\n    );\n  }\n}\n\nexport const EventsList = withTranslation()(_EventsList);\n\nexport const NoEvents = () => (\n  <Box className=\"co-sysevent-stream__status-box-empty\">\n    <div className=\"text-center cos-status-box__detail\">No events in the past hour</div>\n  </Box>\n);\n\nexport const NoMatchingEvents = ({ allCount }) => {\n  const { t } = useTranslation();\n  return (\n    <Box className=\"co-sysevent-stream__status-box-empty\">\n      <div className=\"cos-status-box__title\">{t('SINGLE:MSG_EVENTS_MAIN_RESULT_2')}</div>\n      <div className=\"text-center cos-status-box__detail\">\n        {allCount}\n        {allCount >= maxMessages && '+'} {t('SINGLE:MSG_EVENTS_MAIN_RESULT_3', { 0: '' })}\n      </div>\n    </Box>\n  );\n};\n\nexport const ErrorLoadingEvents = () => {\n  const { t } = useTranslation();\n  return (\n    <Box>\n      <div className=\"cos-status-box__title cos-error-title\">{t('SINGLE:MSG_EVENTS_MAIN_ERROR_3')}</div>\n      <div className=\"cos-status-box__detail text-center\">{t('SINGLE:MSG_EVENTS_MAIN_ERROR_4')}</div>\n    </Box>\n  );\n};\n\nexport const EventStreamPage = withStartGuide(({ noProjectsAvailable, ...rest }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <Helmet>\n        <title>{t('COMMON:MSG_LNB_MENU_6')}</title>\n      </Helmet>\n      <EventsList {...rest} autoFocus={!noProjectsAvailable} mock={noProjectsAvailable} title={t('COMMON:MSG_LNB_MENU_6')} />\n    </>\n  );\n});\n\nclass _EventStream extends React.Component {\n  constructor(props) {\n    super(props);\n    this.messages = {};\n    this.state = {\n      active: true,\n      sortedMessages: [],\n      filteredEvents: [],\n      error: null,\n      loading: true,\n      oldestTimestamp: new Date(),\n    };\n    this.toggleStream = this.toggleStream_.bind(this);\n  }\n\n  wsInit(ns) {\n    const { fieldSelector, cluster } = this.props;\n    const params = { ns, cluster };\n    if (fieldSelector) {\n      params.queryParams = { fieldSelector: encodeURIComponent(fieldSelector) };\n    }\n\n    this.ws = new WSFactory(`${ns || 'all'}-sysevents`, {\n      host: 'auto',\n      reconnect: true,\n      path: watchURL(EventModel, params),\n      jsonParse: true,\n      bufferFlushInterval: flushInterval,\n      bufferMax: maxMessages,\n    })\n      .onbulkmessage(events => {\n        events.forEach(({ object, type }) => {\n          const uid = object.metadata.uid;\n\n          switch (type) {\n            case 'ADDED':\n            case 'MODIFIED':\n              if (this.messages[uid] && this.messages[uid].count > object.count) {\n                // We already have a more recent version of this message stored, so skip this one\n                return;\n              }\n              this.messages[uid] = object;\n              break;\n            case 'DELETED':\n              delete this.messages[uid];\n              break;\n            default:\n              // eslint-disable-next-line no-console\n              console.error(`UNHANDLED EVENT: ${type}`);\n              return;\n          }\n        });\n        this.flushMessages();\n      })\n      .onopen(() => {\n        this.setState({ error: false, loading: false });\n      })\n      .onclose(evt => {\n        if (evt && evt.wasClean === false) {\n          this.setState({ error: evt.reason || 'Connection did not close cleanly.' });\n        }\n      })\n      .onerror(() => {\n        this.setState({ error: true });\n      });\n  }\n\n  componentDidMount() {\n    if (!this.props.mock) {\n      this.wsInit(this.props.namespace);\n    }\n  }\n\n  componentWillUnmount() {\n    this.ws && this.ws.destroy();\n  }\n\n  static filterEvents(messages, { kind, type, filter, textFilter }) {\n    // Don't use `fuzzy` because it results in some surprising matches in long event messages.\n    // Instead perform an exact substring match on each word in the text filter.\n    const words = _.uniq(_.toLower(textFilter).match(/\\S+/g)).sort((a, b) => {\n      // Sort the longest words first.\n      return b.length - a.length;\n    });\n\n    const textMatches = obj => {\n      if (_.isEmpty(words)) {\n        return true;\n      }\n      const name = _.get(obj, 'involvedObject.name', '');\n      const message = _.toLower(obj.message);\n      return _.every(words, word => name.indexOf(word) !== -1 || message.indexOf(word) !== -1);\n    };\n\n    const f = obj => {\n      if (type && !typeFilter(type, obj)) {\n        return false;\n      }\n      if (kind && !kindFilter(kind, obj)) {\n        return false;\n      }\n      if (filter && !filter.some(flt => flt(obj.involvedObject))) {\n        return false;\n      }\n      if (!textMatches(obj)) {\n        return false;\n      }\n      return true;\n    };\n\n    return _.filter(messages, f);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { filter, kind, type, textFilter, loading } = prevState;\n\n    if (_.isEqual(filter, nextProps.filter) && kind === nextProps.kind && type === nextProps.type && textFilter === nextProps.textFilter) {\n      return {};\n    }\n\n    return {\n      active: !nextProps.mock,\n      loading: !nextProps.mock && loading,\n      // update the filteredEvents\n      filteredEvents: _EventStream.filterEvents(prevState.sortedMessages, nextProps),\n      // we need these for bookkeeping because getDerivedStateFromProps doesn't get prevProps\n      textFilter: nextProps.textFilter,\n      kind: nextProps.kind,\n      type: nextProps.type,\n      filter: nextProps.filter,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // If the namespace has changed, created a new WebSocket with the new namespace\n    if (prevProps.namespace !== this.props.namespace) {\n      this.ws && this.ws.destroy();\n      this.wsInit(this.props.namespace);\n    }\n  }\n\n  // Messages can come in extremely fast when the buffer flushes.\n  // Instead of calling setState() on every single message, let onmessage()\n  // update an instance variable, and throttle the actual UI update (see constructor)\n  flushMessages() {\n    const sorted = sortEvents(this.messages);\n    const oldestTimestamp = _.min([this.state.oldestTimestamp, getLastTime(new Date(_.last(sorted)))]);\n    sorted.splice(maxMessages);\n    this.setState({\n      oldestTimestamp,\n      sortedMessages: sorted,\n      filteredEvents: _EventStream.filterEvents(sorted, this.props),\n    });\n\n    // Shrink this.messages back to maxMessages messages, to stop it growing indefinitely\n    this.messages = _.keyBy(sorted, 'metadata.uid');\n  }\n\n  toggleStream_() {\n    this.setState({ active: !this.state.active }, () => {\n      if (this.state.active) {\n        this.ws && this.ws.unpause();\n      } else {\n        this.ws && this.ws.pause();\n      }\n    });\n  }\n\n  render() {\n    const { mock, resourceEventStream, t } = this.props;\n    const { active, error, loading, filteredEvents, sortedMessages } = this.state;\n    const count = filteredEvents.length;\n    const allCount = sortedMessages.length;\n    const noEvents = allCount === 0 && this.ws && this.ws.bufferSize() === 0;\n    const noMatches = allCount > 0 && count === 0;\n    let sysEventStatus, statusBtnTxt;\n\n    if (noEvents || mock || (noMatches && resourceEventStream)) {\n      sysEventStatus = <NoEvents />;\n    }\n    if (noMatches && !resourceEventStream) {\n      sysEventStatus = <NoMatchingEvents />;\n    }\n\n    if (error) {\n      statusBtnTxt = <span className=\"co-sysevent-stream__connection-error\">Error connecting to event stream{_.isString(error) && `: ${error}`}</span>;\n      sysEventStatus = <ErrorLoadingEvents />;\n    } else if (loading) {\n      statusBtnTxt = <span>{t('SINGLE:MSG_EVENTS_MAIN_STATUS_1')}</span>;\n      sysEventStatus = <Loading />;\n    } else if (active) {\n      statusBtnTxt = <span>{t('SINGLE:MSG_EVENTS_MAIN_STATUS_1')}</span>;\n    } else {\n      statusBtnTxt = <span>{t('SINGLE:MSG_EVENTS_MAIN_STATUS_2')}</span>;\n    }\n\n    const klass = classNames('co-sysevent-stream__timeline', {\n      'co-sysevent-stream__timeline--empty': !allCount || !count,\n    });\n    // const messageCount = count < maxMessages ? `Showing ${pluralize(count, 'event')}` : `Showing ${count} of ${allCount}+ events`;\n    const messageCount = count < maxMessages ? t('SINGLE:MSG_EVENTS_MAIN_COUNT_1', { something: count }) : t('SINGLE:MSG_EVENTS_MAIN_2', { something1: count, something2: allCount });\n\n    return (\n      <div className=\"co-m-pane__body\">\n        <div className=\"co-sysevent-stream\">\n          <div className=\"co-sysevent-stream__status\">\n            <div className=\"co-sysevent-stream__timeline__btn-text\">{statusBtnTxt}</div>\n            <div className=\"co-sysevent-stream__totals text-secondary\">{messageCount}</div>\n          </div>\n\n          <div className={klass}>\n            <TogglePlay active={active} onClick={this.toggleStream} className=\"co-sysevent-stream__timeline__btn\" />\n            <div className=\"co-sysevent-stream__timeline__end-message\">\n              There are no events before <Timestamp timestamp={this.state.oldestTimestamp} />\n            </div>\n          </div>\n          {count > 0 && <EventStreamList events={filteredEvents} EventComponent={Inner} />}\n          {sysEventStatus}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst EventStream = withTranslation()(_EventStream);\n\n_EventStream.defaultProps = {\n  type: 'all',\n  kind: 'all',\n  mock: false,\n};\n\n_EventStream.propTypes = {\n  type: PropTypes.string,\n  filter: PropTypes.array,\n  kind: PropTypes.string.isRequired,\n  mock: PropTypes.bool,\n  namespace: namespaceProptype,\n  showTitle: PropTypes.bool,\n  textFilter: PropTypes.string,\n};\n\nexport const ResourceEventStream = ({\n  obj: {\n    kind,\n    metadata: { name, namespace, uid },\n  },\n}) => {\n  const { t } = useTranslation();\n  return <_EventStream t={t} fieldSelector={`involvedObject.uid=${uid},involvedObject.name=${name},involvedObject.kind=${kind}`} namespace={namespace} cluster={kind === \"ClusterManager\" && name} resourceEventStream />;\n};\nexport const ResourcesEventStream = ({ filters, namespace }) => {\n  const { t } = useTranslation();\n  return <_EventStream filter={filters} resourceEventStream namespace={namespace} />;\n};\n","import * as React from 'react';\nimport { match } from 'react-router-dom';\nimport * as _ from 'lodash-es';\nimport { getBadgeFromType } from '@console/shared';\nimport { useExtensions, ResourceTabPage, isResourceTabPage } from '@console/plugin-sdk';\nimport { withFallback } from '@console/shared/src/components/error/error-boundary';\nimport {\n  Firehose,\n  HorizontalNav,\n  PageHeading,\n  FirehoseResource,\n  KebabOptionsCreator,\n  Page,\n  AsyncComponent,\n  PageComponentProps,\n} from '../utils';\nimport {\n  K8sResourceKindReference,\n  K8sResourceKind,\n  K8sKind,\n  referenceForModel,\n  referenceFor,\n} from '../../module/k8s';\nimport { ErrorBoundaryFallback } from '../error';\nimport { breadcrumbsForDetailsPage } from '../utils/breadcrumbs';\nimport { useTranslation } from 'react-i18next';\n\nexport const DetailsPage = withFallback<DetailsPageProps>(({ pages = [], ...props }) => {\n  const resourceKeys = _.map(props.resources, 'prop');\n\n  const renderAsyncComponent = (page: ResourceTabPage, cProps: PageComponentProps) => (\n    <AsyncComponent loader={page.properties.loader} {...cProps} />\n  );\n\n  const resourcePageExtensions = useExtensions<ResourceTabPage>(isResourceTabPage);\n\n  const pluginPages = React.useMemo(\n    () =>\n      resourcePageExtensions\n        .filter(\n          (p) =>\n            referenceForModel(p.properties.model) ===\n            (props.kindObj ? referenceFor(props.kindObj) : props.kind),\n        )\n        .map((p) => ({\n          href: p.properties.href,\n          name: p.properties.name,\n          component: (cProps) => renderAsyncComponent(p, cProps),\n        })),\n    [resourcePageExtensions, props],\n  );\n\n  let allPages = [...pages, ...pluginPages];\n  allPages = allPages.length ? allPages : null;\n\n  const { t } = useTranslation();\n  return (\n    <Firehose\n      resources={[\n        {\n          kind: props.kind,\n          kindObj: props.kindObj,\n          name: props.name,\n          namespace: props.namespace,\n          isList: false,\n          prop: 'obj',\n        } as FirehoseResource,\n      ].concat(props.resources || [])}\n    >\n      <PageHeading\n        detail={true}\n        title={props.title || props.name}\n        titleFunc={props.titleFunc}\n        menuActions={props.menuActions}\n        buttonActions={props.buttonActions}\n        kind={props.customKind || props.kind}\n        breadcrumbsFor={\n          props.breadcrumbsFor\n            ? props.breadcrumbsFor\n            : breadcrumbsForDetailsPage.bind(null, props.kindObj, props.match, t)()\n        }\n        resourceKeys={resourceKeys}\n        getResourceStatus={props.getResourceStatus}\n        customData={props.customData}\n        badge={props.badge || getBadgeFromType(props.kindObj && props.kindObj.badge)}\n        icon={props.icon}\n      >\n        {props.children}\n      </PageHeading>\n      <HorizontalNav\n        pages={allPages}\n        pagesFor={props.pagesFor}\n        className={`co-m-${_.get(props.kind, 'kind', props.kind)}`}\n        match={props.match}\n        label={props.label || (props.kind as any).label}\n        resourceKeys={resourceKeys}\n        customData={props.customData}\n      />\n    </Firehose>\n  );\n}, ErrorBoundaryFallback);\n\nexport type DetailsPageProps = {\n  match: match<any>;\n  title?: string | JSX.Element;\n  titleFunc?: (obj: K8sResourceKind) => string | JSX.Element;\n  menuActions?: Function[] | KebabOptionsCreator; // FIXME should be \"KebabAction[] |\" refactor pipeline-actions.tsx, etc.\n  buttonActions?: any[];\n  pages?: Page[];\n  pagesFor?: (obj: K8sResourceKind) => Page[];\n  kind: K8sResourceKindReference;\n  kindObj?: K8sKind;\n  label?: string;\n  name?: string;\n  namespace?: string;\n  resources?: FirehoseResource[];\n  breadcrumbsFor?: (obj: K8sResourceKind) => { name: string; path: string }[];\n  customData?: any;\n  badge?: React.ReactNode;\n  icon?: React.ComponentType<{ obj: K8sResourceKind }>;\n  getResourceStatus?: (resource: K8sResourceKind) => string;\n  children?: React.ReactNode;\n  customKind?: string;\n};\n\nDetailsPage.displayName = 'DetailsPage';\n","export * from './details';\nexport * from './list-page';\nexport * from './modal';\nexport * from './table';\n","import * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Tooltip, Button, TextInput } from '@patternfly/react-core';\n\nimport { withFallback } from '@console/shared/src/components/error/error-boundary';\nimport { useDocumentListener, KEYBOARD_SHORTCUTS } from '@console/shared';\nimport { filterList } from '../../actions/k8s';\nimport { storagePrefix } from '../row-filter';\nimport { ErrorPage404, ErrorBoundaryFallback } from '../error';\nimport { referenceForModel } from '../../module/k8s';\nimport { Dropdown, Firehose, history, inject, kindObj, makeQuery, makeReduxID, PageHeading, RequireCreatePermission } from '../utils';\nimport { FilterToolbar } from '../filter-toolbar';\nimport { ResourceLabel, ResourceLabelPlural } from '../../models/hypercloud/resource-plural';\nimport { useTranslation } from 'react-i18next';\nimport './list-page.scss';\n\n/** @type {React.SFC<{disabled?: boolean, label?: string, onChange: (value: string) => void;, defaultValue?: string, value?: string, placeholder?: string, autoFocus?: boolean, onFocus?:any, name?:string, id?: string, onKeyDown?: any, parentClassName?: string }}>} */\nexport const TextFilter = props => {\n  const { label, className, placeholder = `${label}...`, autoFocus = false, parentClassName } = props;\n  const { ref } = useDocumentListener();\n\n  return (\n    <div className={classNames('has-feedback', parentClassName)}>\n      <TextInput {...props} className={classNames('co-text-filter', className)} data-test-id=\"item-filter\" aria-label={placeholder} placeholder={placeholder} ref={ref} autoFocus={autoFocus} tabIndex={0} type=\"text\" />\n      <span className=\"form-control-feedback form-control-feedback--keyboard-hint\">\n        <kbd>{KEYBOARD_SHORTCUTS.focusFilterInput}</kbd>\n      </span>\n    </div>\n  );\n};\nTextFilter.displayName = 'TextFilter';\n\n// TODO (jon) make this into \"withListPageFilters\" HOC\n/** @augments {React.PureComponent<{ListComponent: React.ComponentType<any>, kinds: string[], filters?:any, flatten?: function, data?: any[], rowFilters?: any[], hideToolbar?: boolean, hideLabelFilter?: boolean }>} */\nexport class ListPageWrapper_ extends React.PureComponent {\n  render() {\n    const { flatten, ListComponent, reduxIDs, rowFilters, textFilter, hideToolbar, hideLabelFilter } = this.props;\n    const data = flatten ? flatten(this.props.resources) : [];\n    const Filter = <FilterToolbar rowFilters={rowFilters} data={data} reduxIDs={reduxIDs} textFilter={textFilter} hideToolbar={hideToolbar} hideLabelFilter={hideLabelFilter} {...this.props} />;\n\n    return (\n      <div>\n        {!_.isEmpty(data) && Filter}\n        <div className=\"row\">\n          <div className=\"col-xs-12\">\n            <ListComponent {...this.props} data={data} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nListPageWrapper_.displayName = 'ListPageWrapper_';\nListPageWrapper_.propTypes = {\n  setShowSidebar: PropTypes.any,\n  setSidebarDetails: PropTypes.any,\n  setSidebarTitle: PropTypes.any,\n  data: PropTypes.array,\n  kinds: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object])).isRequired,\n  ListComponent: PropTypes.elementType.isRequired,\n  rowFilters: PropTypes.array,\n  staticFilters: PropTypes.array,\n  customData: PropTypes.any,\n  hideToolbar: PropTypes.bool,\n  hideLabelFilter: PropTypes.bool,\n};\n\n/** @type {React.FC<<WrappedComponent>, {canCreate?: Boolean, textFilter:string, createAccessReview?: Object, createButtonText?: String, createProps?: Object, fieldSelector?: String, filterLabel?: String, resources: any, badge?: React.ReactNode unclickableMsg?: String}>*/\nexport const FireMan_ = connect(null, { filterList })(\n  class ConnectedFireMan extends React.PureComponent {\n    constructor(props) {\n      super(props);\n      this.onExpandChange = this.onExpandChange.bind(this);\n      this.applyFilter = this.applyFilter.bind(this);\n\n      const reduxIDs = props.resources.map(r => makeReduxID(kindObj(r.kind), makeQuery(r.namespace, r.selector, r.fieldSelector, r.name)));\n      this.state = { reduxIDs };\n    }\n\n    UNSAFE_componentWillReceiveProps({ resources }) {\n      const reduxIDs = resources.map(r => makeReduxID(kindObj(r.kind), makeQuery(r.namespace, r.selector, r.fieldSelector, r.name)));\n      if (_.isEqual(reduxIDs, this.state.reduxIDs)) {\n        return;\n      }\n\n      // reapply filters to the new list...\n      // TODO (kans): we probably just need to be able to create new lists with filters already applied\n      this.setState({ reduxIDs }, () => this.UNSAFE_componentWillMount());\n    }\n\n    onExpandChange(expand) {\n      this.setState({ expand });\n    }\n\n    updateURL(filterName, options) {\n      if (filterName !== this.props.textFilter) {\n        // TODO (ggreer): support complex filters (objects, not just strings)\n        return;\n      }\n      const params = new URLSearchParams(window.location.search);\n      if (options) {\n        params.set(filterName, options);\n      } else {\n        params.delete(filterName);\n      }\n      const url = new URL(window.location);\n      history.replace(`${url.pathname}?${params.toString()}${url.hash}`);\n    }\n\n    applyFilter(filterName, options) {\n      // TODO: (ggreer) lame blacklist of query args. Use a whitelist based on resource filters\n      if (['q', 'kind', 'orderBy', 'sortBy'].includes(filterName)) {\n        return;\n      }\n      if (filterName.indexOf(storagePrefix) === 0) {\n        return;\n      }\n      this.state.reduxIDs.forEach(id => this.props.filterList(id, filterName, options));\n      this.updateURL(filterName, options);\n    }\n\n    UNSAFE_componentWillMount() {\n      const params = new URLSearchParams(window.location.search);\n      this.defaultValue = params.get(this.props.textFilter);\n      params.forEach((v, k) => this.applyFilter(k, v));\n    }\n\n    runOrNavigate = itemName => {\n      const { createProps = {} } = this.props;\n      const action = _.isFunction(createProps.action) && createProps.action(itemName);\n      if (action) {\n        action();\n      } else if (_.isFunction(createProps.createLink)) {\n        history.push(createProps.createLink(itemName));\n      }\n    };\n\n    render() {\n      const { canCreate, createAccessReview, createButtonText, createProps = {}, helpText, resources, badge, title, unclickableMsg } = this.props;\n\n      let createLink;\n      if (canCreate) {\n        if (createProps.to) {\n          createLink = (\n            <Link className=\"co-m-primary-action\" {...createProps}>\n              <Button variant=\"primary\" id=\"yaml-create\">\n                {createButtonText}\n              </Button>\n            </Link>\n          );\n        } else if (createProps.items) {\n          createLink = (\n            <div className=\"co-m-primary-action\">\n              <Dropdown buttonClassName=\"pf-m-primary\" id=\"item-create\" menuClassName={classNames({ 'pf-m-align-right-on-md': title })} title={createButtonText} noSelection items={createProps.items} onChange={this.runOrNavigate} />\n            </div>\n          );\n        } else {\n          createLink = (\n            <div className=\"co-m-primary-action\">\n              <Button variant=\"primary\" id=\"yaml-create\" {...createProps}>\n                {createButtonText}\n              </Button>\n            </div>\n          );\n        }\n        // if (!_.isEmpty(createAccessReview)) {\n        //   createLink = (\n        //     <RequireCreatePermission\n        //       model={createAccessReview.model}\n        //       namespace={createAccessReview.namespace}\n        //     >\n        //       {createLink}\n        //     </RequireCreatePermission>\n        //   );\n        // }\n      }\n\n      return (\n        <>\n          {/* Badge rendered from PageHeading only when title is present */}\n          <PageHeading title={title} badge={title ? badge : null} className={classNames({ 'co-m-nav-title--row': createLink })}>\n            {createLink && (\n              <div\n                className={classNames('co-m-pane__createLink', {\n                  'co-m-pane__createLink--no-title': !title,\n                })}\n              >\n                {unclickableMsg ? (\n                  <Tooltip content={unclickableMsg}>\n                    <div className={classNames('list-page__button-nonclickable')}>{createLink}</div>\n                  </Tooltip>\n                ) : (\n                  <>{createLink}</>\n                )}\n              </div>\n            )}\n            {!title && badge && <div>{badge}</div>}\n          </PageHeading>\n          {helpText && <p className=\"co-m-pane__help-text co-help-text\">{helpText}</p>}\n          <div className=\"co-m-pane__body co-m-pane__body--no-top-margin\">\n            {inject(this.props.children, {\n              resources,\n              expand: this.state.expand,\n              reduxIDs: this.state.reduxIDs,\n              applyFilter: this.applyFilter,\n            })}\n          </div>\n        </>\n      );\n    }\n  },\n);\n\nFireMan_.displayName = 'FireMan';\n\nFireMan_.defaultProps = {\n  textFilter: 'name',\n};\n\nFireMan_.propTypes = {\n  canCreate: PropTypes.bool,\n  createAccessReview: PropTypes.object,\n  createButtonText: PropTypes.string,\n  createProps: PropTypes.object,\n  fieldSelector: PropTypes.string,\n  filterLabel: PropTypes.string,\n  helpText: PropTypes.any,\n  resources: PropTypes.arrayOf(\n    PropTypes.shape({\n      fieldSelector: PropTypes.string,\n      filters: PropTypes.object,\n      isList: PropTypes.bool,\n      kind: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n      name: PropTypes.string,\n      namespace: PropTypes.string,\n      namespaced: PropTypes.bool,\n      selector: PropTypes.shape({\n        matchLabels: PropTypes.objectOf(PropTypes.string),\n        matchExpressions: PropTypes.arrayOf(PropTypes.object),\n      }),\n    }),\n  ).isRequired,\n  selectorFilterLabel: PropTypes.string,\n  textFilter: PropTypes.string,\n  title: PropTypes.string,\n};\n\n/** @type {React.SFC<{ListComponent: React.ComponentType<any>, kind: string, helpText?: any, namespace?: string, filterLabel?: string, textFilter?: string, title?: string, showTitle?: boolean, rowFilters?: any[], selector?: any, fieldSelector?: string, canCreate?: boolean, createButtonText?: string, createProps?: any, mock?: boolean, badge?: React.ReactNode, createHandler?: any, hideToolbar?: boolean, hideLabelFilter?: boolean, customData?: any, setSidebarDetails?:any, setShowSidebar?:any, setSidebarTitle?: any} >} */\nexport const ListPage = withFallback(props => {\n  const { autoFocus, canCreate, createButtonText, createHandler, customData, fieldSelector, filterLabel, filters, helpText, kind, limit, ListComponent, mock, name, nameFilter, namespace, selector, showTitle = true, skipAccessReview, textFilter, match, badge, hideToolbar, hideLabelFilter, setSidebarDetails, setShowSidebar, setSidebarTitle } = props;\n  let { createProps } = props;\n  const { t } = useTranslation();\n  const ko = kindObj(kind);\n  const { namespaced, plural } = ko;\n  const label = ResourceLabel(ko, t);\n  const labelPlural = ResourceLabelPlural(ko, t);\n  const title = props.title || labelPlural;\n  const usedNamespace = !namespace && namespaced ? _.get(match, 'params.ns') : namespace;\n\n  const isNSSelected = !namespaced || namespace;\n\n  let href = namespaced ? `/k8s/ns/${usedNamespace || 'default'}/${plural}/~new` : `/k8s/cluster/${plural}/~new`;\n\n  if (ko.crd) {\n    try {\n      const ref = referenceForModel(ko);\n      href = namespaced ? `/k8s/ns/${usedNamespace || 'default'}/customresourcedefinitions/${ref}/~new` : `/k8s/cluster/customresourcedefinitions/${ref}/~new`;\n    } catch (unused) {\n      /**/\n    }\n  }\n\n  createProps = createProps || (createHandler ? { onClick: createHandler } : { to: href });\n\n  const unclickableMsg = !isNSSelected ? t('COMMON:MSG_COMMON_ERROR_MESSAGE_48') : undefined;\n  const createAccessReview = skipAccessReview ? null : { model: ko, namespace: usedNamespace };\n  const resources = [\n    {\n      fieldSelector,\n      filters,\n      kind,\n      limit,\n      name: name || nameFilter,\n      namespaced,\n      selector,\n    },\n  ];\n\n  // Don't show row filters if props.filters were passed. The content is already filtered and the row filters will have incorrect counts.\n  const rowFilters = _.isEmpty(filters) ? props.rowFilters : undefined;\n\n  if (!namespaced && usedNamespace) {\n    return <ErrorPage404 />;\n  }\n\n  return (\n    <MultiListPage\n      autoFocus={autoFocus}\n      canCreate={canCreate}\n      createAccessReview={createAccessReview}\n      createButtonText={createButtonText || t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: label })}\n      createProps={createProps}\n      customData={customData}\n      filterLabel={filterLabel || 'by name'}\n      flatten={_resources => _.get(_resources, name || kind, {}).data}\n      helpText={helpText}\n      label={labelPlural}\n      ListComponent={ListComponent}\n      setShowSidebar={setShowSidebar}\n      setSidebarDetails={setSidebarDetails}\n      setSidebarTitle={setSidebarTitle}\n      mock={mock}\n      namespace={usedNamespace}\n      resources={resources}\n      rowFilters={rowFilters}\n      selectorFilterLabel=\"Filter by selector (app=nginx) ...\"\n      showTitle={showTitle}\n      textFilter={textFilter}\n      title={title}\n      badge={badge}\n      hideToolbar={hideToolbar}\n      hideLabelFilter={hideLabelFilter}\n      unclickableMsg={unclickableMsg}\n    />\n  );\n}, ErrorBoundaryFallback);\n\nListPage.displayName = 'ListPage';\n\n/** @type {React.SFC<{canCreate?: boolean, createButtonText?: string, createProps?: any, createAccessReview?: Object, flatten?: Function, title?: string, label?: string, hideTextFilter?: boolean, showTitle?: boolean, helpText?: any, filterLabel?: string, textFilter?: string, rowFilters?: any[], resources: any[], ListComponent: React.ComponentType<any>, namespace?: string, customData?: any, badge?: React.ReactNode, hideToolbar?: boolean, hideLabelFilter?: boolean setSidebarDetails?:any setShowSidebar?:any setSidebarTitle?: any> unclickableMsg?: string} */\nexport const MultiListPage = props => {\n  const { autoFocus, canCreate, createAccessReview, createButtonText, createProps, filterLabel, flatten, helpText, label, ListComponent, setSidebarDetails, setShowSidebar, setSidebarTitle, mock, namespace, rowFilters, showTitle = true, staticFilters, textFilter, title, customData, badge, hideToolbar, hideLabelFilter, unclickableMsg } = props;\n\n  const resources = _.map(props.resources, r => ({\n    ...r,\n    isList: r.isList !== undefined ? r.isList : true,\n    namespace: r.namespaced ? namespace : r.namespace,\n    prop: r.prop || r.kind,\n  }));\n\n  return (\n    <FireMan_ autoFocus={autoFocus} canCreate={canCreate} createAccessReview={createAccessReview} createButtonText={createButtonText || 'Create'} createProps={createProps} filterLabel={filterLabel || 'by name'} helpText={helpText} resources={mock ? [] : resources} selectorFilterLabel=\"Filter by selector (app=nginx) ...\" textFilter={textFilter} title={showTitle ? title : undefined} badge={badge} unclickableMsg={unclickableMsg}>\n      <Firehose resources={mock ? [] : resources}>\n        <ListPageWrapper_ flatten={flatten} kinds={_.map(resources, 'kind')} label={label} ListComponent={ListComponent} setSidebarDetails={setSidebarDetails} setShowSidebar={setShowSidebar} setSidebarTitle={setSidebarTitle} textFilter={textFilter} rowFilters={rowFilters} staticFilters={staticFilters} customData={customData} hideToolbar={hideToolbar} hideLabelFilter={hideLabelFilter} />\n      </Firehose>\n    </FireMan_>\n  );\n};\n\nMultiListPage.displayName = 'MultiListPage';\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport * as Modal from 'react-modal';\nimport { Router } from 'react-router-dom';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash-es';\nimport { ActionGroup, Button } from '@patternfly/react-core';\n\nimport store from '../../redux';\nimport { ButtonBar } from '../utils/button-bar';\nimport { history } from '../utils/router';\n\nexport const createModal: CreateModal = getModalContainer => {\n  const modalContainer = document.getElementById('modal-container');\n  const result = new Promise(resolve => {\n    const closeModal = (e?: React.SyntheticEvent) => {\n      if (e && e.stopPropagation) {\n        e.stopPropagation();\n      }\n      ReactDOM.unmountComponentAtNode(modalContainer);\n      resolve();\n    };\n    Modal.setAppElement(modalContainer);\n    ReactDOM.render(getModalContainer(closeModal), modalContainer);\n  });\n  return { result };\n};\n\nexport const createModalLauncher: CreateModalLauncher = Component => props => {\n  const getModalContainer: GetModalContainer = onClose => {\n    const _handleClose = (e: React.SyntheticEvent) => {\n      onClose && onClose(e);\n      props.close && props.close();\n    };\n    const _handleCancel = (e: React.SyntheticEvent) => {\n      props.cancel && props.cancel();\n      _handleClose(e);\n    };\n\n    return (\n      <Provider store={store}>\n        <Router {...{ history, basename: window.SERVER_FLAGS.basePath }}>\n          <Modal isOpen={true} contentLabel=\"Modal\" onRequestClose={_handleClose} className={classNames('modal-dialog', props.modalClassName)} overlayClassName=\"co-overlay\" shouldCloseOnOverlayClick={!props.blocking}>\n            <Component {...(_.omit(props, 'blocking', 'modalClassName') as any)} cancel={_handleCancel} close={_handleClose} />\n          </Modal>\n        </Router>\n      </Provider>\n    );\n  };\n  return createModal(getModalContainer);\n};\n\nexport const ModalTitle: React.SFC<ModalTitleProps> = React.memo(({ children, className = 'modal-header' }) => (\n  <div className={className}>\n    <h1 className=\"pf-c-title pf-m-2xl\" data-test-id=\"modal-title\">\n      {children}\n    </h1>\n  </div>\n));\n\nexport const ModalBody: React.SFC<ModalBodyProps> = ({ children, unsetOverflow = false }) => (\n  <div className={unsetOverflow ? classNames('modal-body', 'unset-overflow') : 'modal-body'}>\n    <div className=\"modal-body-content\">\n      <div className=\"modal-body-inner-shadow-covers\">{children}</div>\n    </div>\n  </div>\n);\n\nexport const ModalFooter: React.SFC<ModalFooterProps> = ({ message, errorMessage, inProgress, children }) => {\n  return (\n    <ButtonBar className=\"modal-footer\" errorMessage={errorMessage} infoMessage={message} inProgress={inProgress}>\n      {children}\n    </ButtonBar>\n  );\n};\n\nexport const ModalSubmitFooter: React.SFC<ModalSubmitFooterProps> = ({ message, errorMessage, inProgress, cancel, submitText, cancelText, submitDisabled, submitDanger, onCancel }) => {\n  const onCancelClick = e => {\n    e.stopPropagation();\n    onCancel?.();\n    cancel(e);\n  };\n\n  return (\n    <ModalFooter inProgress={inProgress} errorMessage={errorMessage} message={message}>\n      <ActionGroup className=\"pf-c-form pf-c-form__actions--right pf-c-form__group--no-top-margin\">\n        <Button type=\"button\" variant=\"secondary\" data-test-id=\"modal-cancel-action\" onClick={onCancelClick}>\n          {cancelText || 'Cancel'}\n        </Button>\n        {submitDanger ? (\n          <Button type=\"submit\" variant=\"danger\" isDisabled={submitDisabled} id=\"confirm-action\">\n            {submitText}\n          </Button>\n        ) : (\n          <Button type=\"submit\" variant=\"primary\" isDisabled={submitDisabled} id=\"confirm-action\">\n            {submitText}\n          </Button>\n        )}\n      </ActionGroup>\n    </ModalFooter>\n  );\n};\n\nexport type GetModalContainer = (onClose: (e?: React.SyntheticEvent) => void) => React.ReactElement;\n\ntype CreateModal = (getModalContainer: GetModalContainer) => { result: Promise<any> };\n\nexport type CreateModalLauncherProps = {\n  blocking?: boolean;\n  modalClassName?: string;\n};\n\nexport type ModalComponentProps = {\n  cancel?: () => void;\n  close?: () => void;\n};\n\nexport type ModalTitleProps = {\n  className?: string;\n};\n\nexport type ModalBodyProps = {\n  className?: string;\n  unsetOverflow?: boolean;\n};\n\nexport type ModalFooterProps = {\n  message?: string;\n  errorMessage?: string;\n  inProgress: boolean;\n};\n\nexport type ModalSubmitFooterProps = {\n  message?: string;\n  errorMessage?: string;\n  inProgress: boolean;\n  cancel: (e: React.SyntheticEvent<any, Event>) => void;\n  cancelText?: React.ReactNode;\n  submitText: React.ReactNode;\n  submitDisabled?: boolean;\n  submitDanger?: boolean;\n  onCancel?: any;\n  id?: string;\n};\n\nexport type CreateModalLauncher = <P extends ModalComponentProps>(C: React.ComponentType<P>) => (props: P & CreateModalLauncherProps) => { result: Promise<{}> };\n","import * as _ from 'lodash-es';\nimport * as fuzzy from 'fuzzysearch';\nimport { nodeStatus } from '@console/app/src/status/node';\nimport { getNodeRole, getLabelsAsString } from '@console/shared';\nimport { routeStatus } from '../routes';\nimport { secretTypeFilterReducer } from '../secret';\nimport { bindingType, roleType } from '../RBAC';\nimport {\n  K8sResourceKind,\n  MachineKind,\n  podPhaseFilterReducer,\n  serviceCatalogStatus,\n  serviceClassDisplayName,\n  servicePlanDisplayName,\n  getClusterOperatorStatus,\n  // getTemplateInstanceStatus,\n} from '../../module/k8s';\n\nimport {\n  alertingRuleIsActive,\n  alertDescription,\n  alertState,\n  silenceState,\n} from '../../reducers/monitoring';\nimport { pipelineRunFilterReducer } from '../../../packages/dev-console/src/utils/pipeline-filter-reducer';\n\nexport const fuzzyCaseInsensitive = (a: string, b: string): boolean =>\n  fuzzy(_.toLower(a), _.toLower(b));\n\nconst registryStatusReducer = (registry: any): string => {\n  return registry.status.phase;\n}\n\nconst serviceBrokerStatusReducer = (serviceBroker: any): string => {\n  let phase = '';\n  if (serviceBroker.status) {\n    serviceBroker.status.conditions.forEach(cur => {\n      if (cur.type === 'Ready') {\n        if (cur.status === 'True') {\n          phase = 'Running';\n        } else {\n          phase = 'Error';\n        }\n      }\n    });\n    return phase;\n  }\n}\n\nconst serviceInstanceStatusReducer = (serviceInstance: any): string => {\n  return serviceInstance.status.lastConditionState;\n}\n\nconst pipelineApprovalStatusReducer = (pipelineApproval: any): string => {\n  return pipelineApproval.status.result;\n}\n\n// TODO: Table filters are undocumented, stringly-typed, and non-obvious. We can change that.\nexport const tableFilters: TableFilterMap = {\n  name: (filter, obj) => fuzzyCaseInsensitive(filter, obj.metadata.name),\n\n  'catalog-source-name': (filter, obj) => fuzzyCaseInsensitive(filter, obj.name),\n\n  'alert-list-text': (filter, alert) => {\n    if (fuzzyCaseInsensitive(filter, alert.labels?.alertname)) {\n      return true;\n    }\n\n    // Search in alert description. Ignore case and whitespace, but don't use fuzzy since the\n    // description can be long and will often match fuzzy searches that are not really relevant.\n    const needle = _.toLower(filter.replace(/\\s/g, ''));\n    const haystack = _.toLower(alertDescription(alert).replace(/\\s/g, ''));\n    return haystack.includes(needle);\n  },\n\n  'alert-state': (filter, alert) => filter.selected.has(alertState(alert)),\n\n  'alerting-rule-active': (filter, rule) => filter.selected.has(alertingRuleIsActive(rule)),\n\n  'alerting-rule-name': (filter, rule) => fuzzyCaseInsensitive(filter, rule.name),\n\n  'silence-name': (filter, silence) => fuzzyCaseInsensitive(filter, silence.name),\n\n  'silence-state': (filter, silence) => filter.selected.has(silenceState(silence)),\n\n  'trainingjob-kind': (filter, tj) => filter.selected.has(tj.kind === 'PyTorchJob' ? 'pytorchjob' : 'tfjob') || filter.selected.size === 0,\n\n  // Filter role by role kind\n  'role-kind': (filter, role) => filter.selected.has(roleType(role)) || filter.selected.size === 0,\n\n  // Filter role bindings by role kind\n  'role-binding-kind': (filter, binding) =>\n    filter.selected.has(bindingType(binding)) || filter.selected.size === 0,\n\n  // Filter role bindings by text match\n  'role-binding': (str, { metadata, roleRef, subject }) => {\n    const isMatch = (val) => fuzzyCaseInsensitive(str, val);\n    return [metadata.name, roleRef.name, subject.kind, subject.name].some(isMatch);\n  },\n\n  // Filter role bindings by roleRef name\n  'role-binding-roleRef-name': (name: string, binding) => binding.roleRef.name === name,\n\n  // Filter role bindings by roleRef kind\n  'role-binding-roleRef-kind': (kind: string, binding) => binding.roleRef.kind === kind,\n\n  // Filter role bindings by user name\n  'role-binding-user': (userName, binding) =>\n    _.some(binding.subjects, {\n      kind: 'User',\n      apiGroup: 'rbac.authorization.k8s.io',\n      name: userName,\n    }),\n\n  // Filter role bindings by group name\n  'role-binding-group': (groupName, binding) =>\n    _.some(binding.subjects, {\n      kind: 'Group',\n      apiGroup: 'rbac.authorization.k8s.io',\n      name: groupName,\n    }),\n\n  selector: (selector, obj) => {\n    if (!selector || !selector.values || !selector.values.size) {\n      return true;\n    }\n    return selector.values.has(_.get(obj, selector.field));\n  },\n\n  labels: (values, obj) => {\n    const labels = getLabelsAsString(obj);\n    if (!values.all) {\n      return true;\n    }\n    return !!values.all.every((v) => labels.includes(v));\n  },\n\n  'pod-status': (phases, pod) => {\n    if (!phases || !phases.selected || !phases.selected.size) {\n      return true;\n    }\n\n    const phase = podPhaseFilterReducer(pod);\n    return phases.selected.has(phase) || !_.includes(phases.all, phase);\n  },\n\n  'registry-status': (phases, registry) => {\n    if (!phases || !phases.selected || !phases.selected.size) {\n      return true;\n    }\n\n    const phase = registryStatusReducer(registry);\n    return phases.selected.has(phase) || !_.includes(phases.all, phase);\n  },\n\n  'service-broker-status': (phases, serviceBroker) => {\n    if (!phases || !phases.selected || !phases.selected.size) {\n      return true;\n    }\n\n    const phase = serviceBrokerStatusReducer(serviceBroker);\n    return phases.selected.has(phase) || !_.includes(phases.all, phase);\n  },\n\n  'service-instance-status': (phases, serviceInstance) => {\n    if (!phases || !phases.selected || !phases.selected.size) {\n      return true;\n    }\n\n    const phase = serviceInstanceStatusReducer(serviceInstance);\n    return phases.selected.has(phase) || !_.includes(phases.all, phase);\n  },\n\n  'pipeline-run-status': (results, pipelineRun) => {\n    if (!results || !results.selected || !results.selected.size) {\n      return true;\n    }\n\n    const result = pipelineRunFilterReducer(pipelineRun);\n    return results.selected.has(result) || !_.includes(results.all, result);\n  },\n\n  'pipeline-approval-status': (results, pipelineApproval) => {\n    if (!results || !results.selected || !results.selected.size) {\n      return true;\n    }\n\n    const result = pipelineApprovalStatusReducer(pipelineApproval);\n    return results.selected.has(result) || !_.includes(results.all, result);\n  },\n\n  'node-status': (statuses, node) => {\n    if (!statuses || !statuses.selected || !statuses.selected.size) {\n      return true;\n    }\n\n    const status = nodeStatus(node);\n    return statuses.selected.has(status) || !_.includes(statuses.all, status);\n  },\n\n  'node-role': (roles, node) => {\n    if (!roles || !roles.selected || !roles.selected.size) {\n      return true;\n    }\n    const role = getNodeRole(node);\n    return roles.selected.has(role);\n  },\n\n  'clusterserviceversion-resource-kind': (filters, resource) => {\n    if (!filters || !filters.selected || !filters.selected.size) {\n      return true;\n    }\n    return filters.selected.has(resource.kind);\n  },\n\n  'packagemanifest-name': (filter, pkg) =>\n    fuzzyCaseInsensitive(\n      filter,\n      (pkg.status.defaultChannel\n        ? pkg.status.channels.find((ch) => ch.name === pkg.status.defaultChannel)\n        : pkg.status.channels[0]\n      ).currentCSVDesc.displayName,\n    ),\n\n  'build-status': (phases, build) => {\n    if (!phases || !phases.selected || !phases.selected.size) {\n      return true;\n    }\n\n    const phase = build.status.phase;\n    return phases.selected.has(phase) || !_.includes(phases.all, phase);\n  },\n\n  'build-strategy': (strategies, buildConfig) => {\n    if (!strategies || !strategies.selected || !strategies.selected.size) {\n      return true;\n    }\n\n    const strategy = buildConfig.spec.strategy.type;\n    return strategies.selected.has(strategy) || !_.includes(strategies.all, strategy);\n  },\n\n  'route-status': (statuses, route) => {\n    if (!statuses || !statuses.selected || !statuses.selected.size) {\n      return true;\n    }\n\n    const status = routeStatus(route);\n    return statuses.selected.has(status) || !_.includes(statuses.all, status);\n  },\n\n  'catalog-status': (statuses, catalog) => {\n    if (!statuses || !statuses.selected || !statuses.selected.size) {\n      return true;\n    }\n\n    const status = serviceCatalogStatus(catalog);\n    return statuses.selected.has(status) || !_.includes(statuses.all, status);\n  },\n\n  'secret-type': (types, secret) => {\n    if (!types || !types.selected || !types.selected.size) {\n      return true;\n    }\n    const type = secretTypeFilterReducer(secret);\n    return types.selected.has(type) || !_.includes(types.all, type);\n  },\n\n  'project-name': (str: string, project: K8sResourceKind) => {\n    const displayName = _.get(project, ['metadata', 'annotations', 'openshift.io/display-name']);\n    return (\n      fuzzyCaseInsensitive(str, project.metadata.name) || fuzzyCaseInsensitive(str, displayName)\n    );\n  },\n\n  'pvc-status': (phases, pvc) => {\n    if (!phases || !phases.selected || !phases.selected.size) {\n      return true;\n    }\n\n    const phase = pvc.status.phase;\n    return phases.selected.has(phase) || !_.includes(phases.all, phase);\n  },\n\n  // Filter service classes by text match\n  'service-class': (str, serviceClass) => {\n    const displayName = serviceClassDisplayName(serviceClass);\n    return fuzzyCaseInsensitive(str, displayName);\n  },\n\n  'service-plan': (str, servicePlan) => {\n    const displayName = servicePlanDisplayName(servicePlan);\n    return fuzzyCaseInsensitive(str, displayName);\n  },\n\n  'cluster-operator-status': (statuses, operator) => {\n    if (!statuses || !statuses.selected || !statuses.selected.size) {\n      return true;\n    }\n\n    const status = getClusterOperatorStatus(operator);\n    return statuses.selected.has(status) || !_.includes(statuses.all, status);\n  },\n\n  'template-instance-status': (statuses, instance) => {\n    if (!statuses || !statuses.selected || !statuses.selected.size) {\n      return true;\n    }\n\n    // const status = getTemplateInstanceStatus(instance);\n\n    // NOTE: HyperCloud5.0 TemplateInstance phase filter\n    const templateInstancePhase = instance => {\n      let phase = '';\n      if (instance.status) {\n        instance.status.conditions.forEach(cur => {\n          if (cur.type === '') {\n            phase = cur.status;\n          }\n        });\n        return phase;\n      }\n    };\n    const status = templateInstancePhase(instance);\n\n    return statuses.selected.has(status) || !_.includes(statuses.all, status);\n  },\n\n  machine: (str: string, machine: MachineKind): boolean => {\n    const node: string = _.get(machine, 'status.nodeRef.name');\n    return (\n      fuzzyCaseInsensitive(str, machine.metadata.name) || (node && fuzzyCaseInsensitive(str, node))\n    );\n  },\n};\n\nexport interface TableFilterGroups {\n  selected: Set<string>;\n  all: string[];\n  values: Set<string>;\n  field: string;\n}\n\nexport type TableFilter = (groups: TableFilterGroups, obj: any) => boolean;\nexport type TextFilter = (text: string, obj: any) => boolean;\n\ntype TableFilterMap = {\n  [key: string]: TableFilter | TextFilter;\n};\n","import * as _ from 'lodash-es';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { getNodeRoles, getMachinePhase, nodeMemory, nodeCPU, nodeFS, nodePods } from '@console/shared';\nimport * as UIActions from '../../actions/ui';\nimport { alertStateOrder, silenceFiringAlertsOrder, silenceStateOrder } from '../../reducers/monitoring';\nimport { ingressValidHosts } from '../ingress';\nimport { convertToBaseValue, EmptyBox, StatusBox, WithScrollContainer } from '../utils';\nimport { getClusterOperatorStatus, getClusterOperatorVersion, getJobTypeAndCompletions, getTemplateInstanceStatus, K8sResourceKind, K8sResourceKindReference, NodeKind, planExternalName, PodKind, podPhase, podReadiness, podRestarts, serviceCatalogStatus, serviceClassDisplayName, MachineKind } from '../../module/k8s';\n\nimport {\n  IRowData, // eslint-disable-line no-unused-vars\n  IExtraData, // eslint-disable-line no-unused-vars\n  Table as PfTable,\n  TableHeader,\n  TableBody,\n  TableGridBreakpoint,\n  SortByDirection,\n  OnSelect,\n  ICell,\n} from '@patternfly/react-table';\n\nimport { CellMeasurerCache, CellMeasurer } from 'react-virtualized';\n\nimport { AutoSizer, VirtualTableBody, WindowScroller } from '@patternfly/react-virtualized-extension';\n\nimport { tableFilters } from './table-filters';\n\nconst rowFiltersToFilterFuncs = rowFilters => {\n  return (rowFilters || []).filter(f => f.type && _.isFunction(f.filter)).reduce((acc, f) => ({ ...acc, [f.type]: f.filter }), {});\n};\n\nconst getAllTableFilters = rowFilters => ({\n  ...tableFilters,\n  ...rowFiltersToFilterFuncs(rowFilters),\n});\n\nconst getFilteredRows = (_filters, rowFilters, objects) => {\n  if (_.isEmpty(_filters)) {\n    return objects;\n  }\n\n  const allTableFilters = getAllTableFilters(rowFilters);\n  let filteredObjects = objects;\n  _.each(_filters, (value, name) => {\n    const filter = allTableFilters[name];\n    if (_.isFunction(filter)) {\n      filteredObjects = _.filter(filteredObjects, o => filter(value, o));\n    }\n  });\n\n  return filteredObjects;\n};\n\nconst filterPropType = (props, propName, componentName) => {\n  if (!props) {\n    return;\n  }\n\n  const allTableFilters = getAllTableFilters(props.rowFilters);\n  for (const key of _.keys(props[propName])) {\n    if (key in allTableFilters || key === 'loadTest') {\n      continue;\n    }\n    return new Error(`Invalid prop '${propName}' in '${componentName}'. '${key}' is not a valid filter type!`);\n  }\n};\n\nconst sorts = {\n  alertStateOrder,\n  daemonsetNumScheduled: daemonset => _.toInteger(_.get(daemonset, 'status.currentNumberScheduled')),\n  dataSize: resource => _.size(_.get(resource, 'data')) + _.size(_.get(resource, 'binaryData')),\n  ingressValidHosts,\n  serviceCatalogStatus,\n  jobCompletions: job => getJobTypeAndCompletions(job).completions,\n  jobType: job => getJobTypeAndCompletions(job).type,\n  nodeReadiness: (node: NodeKind) => {\n    let readiness = _.get(node, 'status.conditions');\n    readiness = _.find(readiness, { type: 'Ready' });\n    return _.get(readiness, 'status');\n  },\n  numReplicas: resource => _.toInteger(_.get(resource, 'status.replicas')),\n  planExternalName,\n  namespaceCPU: (ns: K8sResourceKind): number => UIActions.getNamespaceMetric(ns, 'cpu'),\n  namespaceMemory: (ns: K8sResourceKind): number => UIActions.getNamespaceMetric(ns, 'memory'),\n  podCPU: (pod: PodKind): number => UIActions.getPodMetric(pod, 'cpu'),\n  podMemory: (pod: PodKind): number => UIActions.getPodMetric(pod, 'memory'),\n  podPhase,\n  podReadiness: (pod: PodKind): number => podReadiness(pod).readyCount,\n  podRestarts,\n  pvStorage: pv => _.toInteger(convertToBaseValue(pv?.spec?.capacity?.storage)),\n  pvcStorage: pvc => _.toInteger(convertToBaseValue(pvc?.status?.capacity?.storage)),\n  serviceClassDisplayName,\n  silenceFiringAlertsOrder,\n  silenceStateOrder,\n  string: val => JSON.stringify(val),\n  number: val => _.toNumber(val),\n  getClusterOperatorStatus,\n  getClusterOperatorVersion,\n  getTemplateInstanceStatus,\n  nodeRoles: (node: NodeKind): string => {\n    const roles = getNodeRoles(node);\n    return roles.sort().join(', ');\n  },\n  nodeMemory: (node: NodeKind): number => nodeMemory(node),\n  nodeCPU: (node: NodeKind): number => nodeCPU(node),\n  nodeFS: (node: NodeKind): number => nodeFS(node),\n  machinePhase: (machine: MachineKind): string => getMachinePhase(machine),\n  nodePods: (node: NodeKind): number => nodePods(node),\n};\n\nconst stateToProps = ({ UI }, { customSorts = {}, data = [], defaultSortField = 'metadata.name', defaultSortFunc = undefined, defaultSortOrder = SortByDirection.asc, filters = {}, loaded = false, reduxID = null, reduxIDs = null, staticFilters = [{}], rowFilters = [] }) => {\n  const allFilters = staticFilters ? Object.assign({}, filters, ...staticFilters) : filters;\n  const newData = getFilteredRows(allFilters, rowFilters, data);\n\n  const listId = reduxIDs ? reduxIDs.join(',') : reduxID;\n  // Only default to 'metadata.name' if no `defaultSortFunc`\n  const currentSortField = UI.getIn(['listSorts', listId, 'field'], defaultSortFunc ? undefined : defaultSortField);\n  const currentSortFunc = UI.getIn(['listSorts', listId, 'func'], defaultSortFunc);\n  const currentSortOrder = UI.getIn(['listSorts', listId, 'orderBy'], defaultSortOrder);\n\n  if (loaded) {\n    let sortBy: string | Function = 'metadata.name';\n    if (currentSortField) {\n      sortBy = resource => sorts.string(_.get(resource, currentSortField, ''));\n    } else if (currentSortFunc && customSorts[currentSortFunc]) {\n      // Sort resources by a function in the 'customSorts' prop\n      sortBy = customSorts[currentSortFunc];\n    } else if (currentSortFunc && sorts[currentSortFunc]) {\n      // Sort resources by a function in the 'sorts' object\n      sortBy = sorts[currentSortFunc];\n    }\n\n    const getSortValue = resource => {\n      const val = _.isFunction(sortBy) ? sortBy(resource) : _.get(resource, sortBy as string);\n      return val ?? '';\n    };\n    newData?.sort((a, b) => {\n      const lang = navigator.languages[0] || navigator.language;\n      // Use `localCompare` with `numeric: true` for a natural sort order (e.g., pv-1, pv-9, pv-10)\n      const compareOpts = { numeric: true, ignorePunctuation: true };\n      const aValue = getSortValue(a);\n      const bValue = getSortValue(b);\n      const result: number = Number.isFinite(aValue) && Number.isFinite(bValue) ? aValue - bValue : `${aValue}`.localeCompare(`${bValue}`, lang, compareOpts);\n      if (result !== 0) {\n        return currentSortOrder === SortByDirection.asc ? result : result * -1;\n      }\n\n      // Use name as a secondary sort for a stable sort.\n      const aName = a?.metadata?.name || '';\n      const bName = b?.metadata?.name || '';\n      return aName.localeCompare(bName, lang, compareOpts);\n    });\n  }\n\n  return {\n    currentSortField,\n    currentSortFunc,\n    currentSortOrder,\n    data: newData,\n    unfilteredData: data,\n    listId,\n  };\n};\n\n// Common table row/columns helper SFCs for implementing accessible data grid\nexport const TableRow: React.SFC<TableRowProps> = ({ id, index, trKey, style, className, ...props }) => {\n  return <tr {...props} data-id={id} data-index={index} data-test-rows=\"resource-row\" data-key={trKey} style={style} className={className} role=\"row\" />;\n};\nTableRow.displayName = 'TableRow';\nexport type TableRowProps = {\n  id: any;\n  index: number;\n  trKey: string;\n  style: object;\n  className?: string;\n};\n\nexport const TableData: React.SFC<TableDataProps> = ({ className, ...props }) => {\n  return <td {...props} className={className} role=\"gridcell\" />;\n};\nTableData.displayName = 'TableData';\nexport type TableDataProps = {\n  id?: string;\n  className?: string;\n};\n\nconst TableWrapper: React.SFC<TableWrapperProps> = ({ virtualize, ariaLabel, ariaRowCount, ...props }) => {\n  return virtualize ? <div {...props} role=\"grid\" aria-label={ariaLabel} aria-rowcount={ariaRowCount} /> : <React.Fragment {...props} />;\n};\nexport type TableWrapperProps = {\n  virtualize: boolean;\n  ariaLabel: string;\n  ariaRowCount: number | undefined;\n};\n\nconst VirtualBody: React.SFC<VirtualBodyProps> = props => {\n  const { customData, Row, height, isScrolling, onChildScroll, data, columns, scrollTop, width } = props;\n\n  const cellMeasurementCache = new CellMeasurerCache({\n    fixedWidth: true,\n    minHeight: 44,\n    keyMapper: rowIndex => _.get(props.data[rowIndex], 'metadata.uid', rowIndex),\n  });\n\n  const rowRenderer = ({ index, isScrolling: scrolling, isVisible, key, style, parent }) => {\n    const rowArgs = {\n      obj: data[index],\n      index,\n      columns,\n      isScrolling: scrolling,\n      key,\n      style,\n      customData,\n    };\n\n    const row = Row(rowArgs);\n\n    // do not render non visible elements (this excludes overscan)\n    if (!isVisible) {\n      return null;\n    }\n    return (\n      <CellMeasurer cache={cellMeasurementCache} columnIndex={0} key={key} parent={parent} rowIndex={index}>\n        {row}\n      </CellMeasurer>\n    );\n  };\n\n  return <VirtualTableBody autoHeight className=\"pf-c-table pf-m-compact pf-m-border-rows pf-c-virtualized pf-c-window-scroller\" deferredMeasurementCache={cellMeasurementCache} rowHeight={cellMeasurementCache.rowHeight} height={height || 0} isScrolling={isScrolling} onScroll={onChildScroll} overscanRowCount={10} columns={columns} rows={data} rowCount={data.length} rowRenderer={rowRenderer} scrollTop={scrollTop} width={width} />;\n};\n\nexport type RowFunctionArgs<T = any, C = any> = {\n  obj: T;\n  index: number;\n  columns: any[];\n  isScrolling: boolean;\n  key: string;\n  style: object;\n  customData?: C;\n};\n\nexport type RowFunction<T = any, C = any> = (args: RowFunctionArgs<T, C>) => React.ReactElement;\n\nexport type VirtualBodyProps = {\n  customData?: any;\n  Row: RowFunction;\n  height: number;\n  isScrolling: boolean;\n  onChildScroll: (...args) => any;\n  data: any[];\n  columns: any[];\n  scrollTop: number;\n  width: number;\n  expand: boolean;\n};\n\nexport type TableProps = {\n  customData?: any;\n  customSorts?: { [key: string]: any };\n  data?: any[];\n  defaultSortFunc?: string;\n  defaultSortField?: string;\n  defaultSortOrder?: SortByDirection;\n  filters?: { [key: string]: any };\n  Header: (...args) => any[];\n  loadError?: string | Object;\n  Row?: RowFunction;\n  Rows?: (...args) => any[];\n  'aria-label': string;\n  onSelect?: OnSelect;\n  virtualize?: boolean;\n  NoDataEmptyMsg?: React.ComponentType<{}>;\n  EmptyMsg?: React.ComponentType<{}>;\n  loaded?: boolean;\n  reduxID?: string;\n  reduxIDs?: string[];\n  label?: string;\n  expandable?: boolean;\n  expandableRows?: (...args) => any[];\n};\n\ntype TablePropsFromState = {};\n\ntype TablePropsFromDispatch = {};\n\ntype TableOptionProps = {\n  UI: any;\n};\n\ntype ComponentProps = {\n  data?: any[];\n  filters?: Object;\n  selected?: any;\n  match?: any;\n  kindObj?: K8sResourceKindReference;\n};\n\nexport const Table = connect<TablePropsFromState, TablePropsFromDispatch, TableProps, TableOptionProps>(stateToProps, { sortList: UIActions.sortList }, null, {\n  areStatesEqual: ({ UI: next }, { UI: prev }) => next.get('listSorts') === prev.get('listSorts'),\n})(\n  class TableInner extends React.Component<TableInnerProps, TableInnerState> {\n    static propTypes = {\n      customData: PropTypes.any,\n      data: PropTypes.array,\n      unfilteredData: PropTypes.array,\n      NoDataEmptyMsg: PropTypes.func,\n      EmptyMsg: PropTypes.func,\n      expand: PropTypes.bool,\n      fieldSelector: PropTypes.string,\n      filters: filterPropType,\n      Header: PropTypes.func.isRequired,\n      Row: PropTypes.func,\n      Rows: PropTypes.func,\n      loaded: PropTypes.bool,\n      loadError: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n      mock: PropTypes.bool,\n      namespace: PropTypes.string,\n      reduxID: PropTypes.string,\n      reduxIDs: PropTypes.array,\n      selector: PropTypes.object,\n      staticFilters: PropTypes.array,\n      virtualize: PropTypes.bool,\n      currentSortField: PropTypes.string,\n      currentSortFunc: PropTypes.string,\n      currentSortOrder: PropTypes.any,\n      defaultSortField: PropTypes.string,\n      defaultSortFunc: PropTypes.string,\n      label: PropTypes.string,\n      listId: PropTypes.string,\n      sortList: PropTypes.func,\n      onSelect: PropTypes.func,\n      scrollElement: PropTypes.oneOf([PropTypes.object, PropTypes.func]),\n      expandable: PropTypes.bool,\n      expandableRows: PropTypes.func,\n    };\n    _columnShift: number;\n\n    constructor(props) {\n      super(props);\n      const componentProps: ComponentProps = _.pick(props, ['data', 'filters', 'selected', 'match', 'kindObj']);\n      const columns = props.Header(componentProps);\n      const { currentSortField, currentSortFunc, currentSortOrder } = props;\n\n      this._columnShift = props.onSelect ? 1 : 0; //shift indexes by 1 if select provided\n      this._applySort = this._applySort.bind(this);\n      this._onSort = this._onSort.bind(this);\n      this._onExpand = this._onExpand.bind(this);\n      this._handleResize = _.debounce(this._handleResize.bind(this), 100);\n\n      let sortBy = {};\n      if (currentSortField && currentSortOrder) {\n        const columnIndex = _.findIndex(columns, { sortField: currentSortField });\n        if (columnIndex > -1) {\n          sortBy = { index: columnIndex + this._columnShift, direction: currentSortOrder };\n        }\n      } else if (currentSortFunc && currentSortOrder) {\n        const columnIndex = _.findIndex(columns, { sortFunc: currentSortFunc });\n        if (columnIndex > -1) {\n          sortBy = { index: columnIndex + this._columnShift, direction: currentSortOrder };\n        }\n      }\n      this.state = { sortBy, expandableData: [] };\n    }\n\n    componentDidMount() {\n      const componentProps: ComponentProps = _.pick(this.props, ['data', 'filters', 'selected', 'match', 'kindObj']);\n      const columns = this.props.Header(componentProps);\n      const sp = new URLSearchParams(window.location.search);\n      const columnIndex = _.findIndex(columns, { title: sp.get('sortBy') });\n\n      if (columnIndex > -1) {\n        const sortOrder = sp.get('orderBy') || SortByDirection.asc;\n        const column = columns[columnIndex];\n        this._applySort(column.sortField, column.sortFunc, sortOrder, column.title);\n        this.setState({\n          sortBy: {\n            index: columnIndex + this._columnShift,\n            direction: sortOrder,\n          },\n        });\n      }\n\n      // re-render after resize\n      window.addEventListener('resize', this._handleResize);\n    }\n\n    componentDidUpdate(prevProps) {\n      if (this.props.expandable && !!this.props.expandableRows) {\n        this.props.expandableRows(this.props.data).then(res => {\n          if (_.isEqual(this.props.currentSortField, prevProps.currentSortField) && _.isEqual(this.props.currentSortOrder, prevProps.currentSortOrder) && res.length === this.state.expandableData.length) {\n            // do nothing\n            console.log('do nothing');\n          } else {\n            console.log('setstate change');\n            this.setState({\n              expandableData: res,\n            });\n          }\n        });\n      }\n    }\n\n    componentWillUnmount() {\n      window.removeEventListener('resize', this._handleResize);\n    }\n\n    _handleResize() {\n      this.forceUpdate();\n    }\n\n    _applySort(sortField, sortFunc, direction, columnTitle) {\n      const { sortList, listId, currentSortFunc } = this.props;\n      const applySort = _.partial(sortList, listId);\n      applySort(sortField, sortFunc || currentSortFunc, direction, columnTitle);\n    }\n\n    _onSort(event, index, direction) {\n      event.preventDefault();\n      const componentProps: ComponentProps = _.pick(this.props, ['data', 'filters', 'selected', 'match', 'kindObj']);\n      const columns = this.props.Header(componentProps);\n      const sortColumn = columns[index - this._columnShift];\n      this._applySort(sortColumn.sortField, sortColumn.sortFunc, direction, sortColumn.title);\n      this.setState({\n        sortBy: {\n          index,\n          direction,\n        },\n      });\n    }\n\n    _onExpand = (event, rowIndex, colIndex, isOpen, rowData, extraData) => {\n      const { expandableData } = this.state;\n      let rows = _.cloneDeep(expandableData);\n      if (!isOpen) {\n        rows[rowIndex].cells.forEach((cell: ICell) => {\n          if (cell.props) cell.props.isOpen = false;\n        });\n        (rows[rowIndex].cells[colIndex] as ICell).props.isOpen = true;\n        rows[rowIndex].isOpen = true;\n      } else {\n        (rows[rowIndex].cells[colIndex] as ICell).props.isOpen = false;\n        rows[rowIndex].isOpen = rows[rowIndex].cells.some((cell: ICell) => cell.props && cell.props.isOpen);\n      }\n      this.setState({\n        expandableData: rows,\n      });\n    };\n\n    render() {\n      const { scrollElement, Rows, Row, expand, label, mock, onSelect, selectedResourcesForKind, 'aria-label': ariaLabel, virtualize = true, expandable = false, customData, gridBreakPoint = TableGridBreakpoint.none, Header } = this.props;\n      const { sortBy, expandableData } = this.state;\n      const componentProps: any = _.pick(this.props, ['data', 'filters', 'selected', 'match', 'kindObj']);\n      const columns = Header(componentProps);\n      const ariaRowCount = componentProps.data && componentProps.data.length;\n      const scrollNode = typeof scrollElement === 'function' ? scrollElement() : scrollElement;\n      const renderVirtualizedTable = scrollContainer => (\n        <WindowScroller scrollElement={scrollContainer}>\n          {({ height, isScrolling, registerChild, onChildScroll, scrollTop }) => (\n            <AutoSizer disableHeight>\n              {({ width }) => (\n                <div ref={registerChild}>\n                  <VirtualBody Row={Row} customData={customData} height={height} isScrolling={isScrolling} onChildScroll={onChildScroll} data={componentProps.data} columns={columns} scrollTop={scrollTop} width={width} expand={expand} />\n                </div>\n              )}\n            </AutoSizer>\n          )}\n        </WindowScroller>\n      );\n      const children = mock ? (\n        <EmptyBox label={label} />\n      ) : (\n        <TableWrapper virtualize={virtualize} ariaLabel={ariaLabel} ariaRowCount={ariaRowCount}>\n          <PfTable cells={columns} rows={virtualize && !expandable ? [] : !!Rows ? Rows({ componentProps, selectedResourcesForKind, customData }) : expandableData} gridBreakPoint={gridBreakPoint} onSort={this._onSort} onSelect={onSelect} onExpand={this._onExpand} sortBy={sortBy} className=\"pf-m-compact pf-m-border-rows\" role={virtualize ? 'presentation' : 'grid'} aria-label={virtualize ? null : ariaLabel}>\n            <TableHeader />\n            {!virtualize && <TableBody />}\n          </PfTable>\n          {virtualize && (scrollNode ? renderVirtualizedTable(scrollNode) : <WithScrollContainer>{renderVirtualizedTable}</WithScrollContainer>)}\n        </TableWrapper>\n      );\n      return (\n        <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n          {mock ? (\n            children\n          ) : (\n            <StatusBox skeleton={<div className=\"loading-skeleton--table\" />} {...this.props}>\n              {children}\n            </StatusBox>\n          )}\n        </div>\n      );\n    }\n  },\n);\n\nexport type TableInnerProps = {\n  'aria-label': string;\n  customData?: any;\n  currentSortField?: string;\n  currentSortFunc?: string;\n  currentSortOrder?: any;\n  data?: any[];\n  defaultSortField?: string;\n  defaultSortFunc?: string;\n  unfilteredData?: any[];\n  NoDataEmptyMsg?: React.ComponentType<{}>;\n  EmptyMsg?: React.ComponentType<{}>;\n  expand?: boolean;\n  fieldSelector?: string;\n  filters?: { [name: string]: any };\n  Header: (...args) => any[];\n  label?: string;\n  listId?: string;\n  loaded?: boolean;\n  loadError?: string | Object;\n  mock?: boolean;\n  namespace?: string;\n  reduxID?: string;\n  reduxIDs?: string[];\n  Row?: RowFunction;\n  Rows?: (...args) => any[];\n  selector?: Object;\n  sortList?: (listId: string, field: string, func: any, orderBy: string, column: string) => any;\n  selectedResourcesForKind?: string[];\n  onSelect?: (event: React.MouseEvent, isSelected: boolean, rowIndex: number, rowData: IRowData, extraData: IExtraData) => void;\n  staticFilters?: any[];\n  rowFilters?: any[];\n  virtualize?: boolean;\n  gridBreakPoint?: 'grid' | 'grid-md' | 'grid-lg' | 'grid-xl' | 'grid-2xl';\n  scrollElement?: HTMLElement | (() => HTMLElement);\n  expandable?: boolean;\n  expandableRows?: (...args) => any;\n};\n\nexport type TableInnerState = {\n  sortBy: object;\n  expandableData: any[];\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { withRouter, RouteComponentProps } from 'react-router';\nimport { connect } from 'react-redux';\nimport { Checkbox, DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarChip, DataToolbarItem, DropdownItem, Dropdown, DropdownToggle, DropdownGroup, Badge } from '@patternfly/react-core';\nimport { CaretDownIcon, FilterIcon } from '@patternfly/react-icons';\nimport { Dropdown as DropdownInternal } from '@console/internal/components/utils';\nimport { setQueryArgument, removeQueryArgument } from './utils';\nimport { filterList } from '../actions/k8s';\nimport AutocompleteInput from './autocomplete';\nimport { storagePrefix } from './row-filter';\nimport { useTranslation } from 'react-i18next';\n\n/**\n * Housing both the row filter and name/label filter in the same file.\n */\n\nenum FilterType {\n  NAME = 'Name',\n  LABEL = 'Label',\n}\n\nconst filterTypeMap = Object.freeze({\n  [FilterType.LABEL]: 'labels',\n  [FilterType.NAME]: 'name',\n});\n\ntype Filter = {\n  [key: string]: string[];\n};\n\ntype FilterKeys = {\n  [key: string]: string;\n};\n\nconst getDropdownItems = (rowFilters: RowFilter[], selectedItems, data, props) =>\n  rowFilters.map(grp => {\n    const items = grp.itemsGenerator ? grp.itemsGenerator(props, props.kind) : grp.items;\n    return (\n      <DropdownGroup key={grp.filterGroupName} label={grp.filterGroupName} className=\"co-filter-dropdown-group\">\n        {_.map(items, item => (\n          <DropdownItem data-test-row-filter={item.id} key={item.id} id={item.id} className=\"co-filter-dropdown__item\" listItemClassName=\"co-filter-dropdown__list-item\">\n            <div className=\"co-filter-dropdown-item\">\n              <span className=\"co-filter-dropdown-item__checkbox\">\n                <Checkbox isChecked={selectedItems.includes(item.id)} id={`${item.id}-checkbox`} />\n              </span>\n              <span className=\"co-filter-dropdown-item__name\">{item.title}</span>\n              <Badge key={item.id} isRead>\n                {_.countBy(data, grp.reducer)?.[item.id] ?? '0'}\n              </Badge>\n            </div>\n          </DropdownItem>\n        ))}\n      </DropdownGroup>\n    );\n  });\n\nconst FilterToolbar_: React.FC<FilterToolbarProps & RouteComponentProps> = props => {\n  const { rowFilters = [], data, hideToolbar, hideLabelFilter, location, textFilter = filterTypeMap[FilterType.NAME] } = props;\n\n  const [inputText, setInputText] = React.useState('');\n  const [filterType, setFilterType] = React.useState(FilterType.NAME);\n  const [isOpen, setOpen] = React.useState(false);\n\n  // (rowFilters) => {'rowFilterTypeA': ['staA', 'staB'], 'rowFilterTypeB': ['stbA'] }\n  const filters: Filter = rowFilters.reduce((acc, curr) => {\n    const rowItems = curr.itemsGenerator ? curr.itemsGenerator(props, props?.kinds) : curr.items;\n    const items = _.map(rowItems, 'id');\n    acc[curr.filterGroupName] = items;\n    return acc;\n  }, {});\n\n  // {id: 'a' , title: 'A'} => filterNameMap['a'] = A\n  const filtersNameMap: FilterKeys = rowFilters.reduce((acc, curr) => {\n    const rowItems = curr.itemsGenerator ? curr.itemsGenerator(props, props?.kinds) : curr.items;\n    const items = rowItems.reduce((itemAcc, itemCurr) => {\n      itemAcc[itemCurr.id] = itemCurr.title;\n      return itemAcc;\n    }, {});\n    return { ...acc, ...items };\n  }, {});\n\n  // (storagePrefix, rowFilters) => { 'rowFilterTypeA' = 'storagePrefix-filterTypeA' ...}\n  const filterKeys: FilterKeys = rowFilters.reduce((acc, curr) => {\n    const str = `${storagePrefix}${curr.type}`;\n    acc[curr.filterGroupName] = str;\n    return acc;\n  }, {});\n\n  // (url) => {nameFilter, labelFilters, rowFilters}\n  const { name: nameFilter, labels: labelFilters, rowFiltersFromURL: selectedRowFilters } = (() => {\n    const rowFiltersFromURL: string[] = [];\n    const params = new URLSearchParams(location.search);\n    const q = params.get('label');\n    const name = params.get(textFilter);\n    _.map(filterKeys, f => {\n      const vals = params.get(f);\n      if (vals) {\n        rowFiltersFromURL.push(...vals.split(','));\n      }\n    });\n    const labels = q ? q.split(',') : [];\n    return { name, labels, rowFiltersFromURL };\n  })();\n\n  /* Logic for Name and Label Filter */\n\n  const applyFilter = (input: string | string[], type: FilterType) => {\n    const filter = type === FilterType.NAME ? textFilter : filterTypeMap[FilterType.LABEL];\n    const value = type === FilterType.NAME ? input : { all: input };\n    props.reduxIDs.forEach(id => props.filterList(id, filter, value));\n  };\n\n  const updateLabelFilter = (filterValues: string[]) => {\n    if (filterValues.length > 0) {\n      setQueryArgument('label', filterValues.join(','));\n    } else {\n      removeQueryArgument('label');\n    }\n    setInputText('');\n    applyFilter(filterValues, FilterType.LABEL);\n  };\n\n  const updateNameFilter = (filterValue: string) => {\n    if (!_.isEmpty(filterValue)) {\n      setQueryArgument(textFilter, filterValue);\n    } else {\n      removeQueryArgument(textFilter);\n    }\n    setInputText(filterValue);\n    applyFilter(filterValue, FilterType.NAME);\n  };\n\n  const updateSearchFilter = (value: string) => {\n    switch (filterType) {\n      case FilterType.NAME:\n        updateNameFilter(value);\n        break;\n      case FilterType.LABEL:\n        setInputText(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  /* Logic Related to Row Filters Ex:(Status, Type) */\n\n  const applyRowFilter = (selected: string[]) => {\n    rowFilters.forEach(filter => {\n      const rowItems = filter.itemsGenerator ? filter.itemsGenerator(props, props?.kinds) : filter.items;\n      const all = _.map(rowItems, 'id');\n      const recognized = _.intersection(selected, all);\n      (props.reduxIDs || []).forEach(id => props.filterList(id, filter.type, { selected: new Set(recognized), all }));\n    });\n  };\n\n  const setQueryParameters = (selected: string[]) => {\n    if (!_.isEmpty(selectedRowFilters) || !_.isEmpty(selected)) {\n      _.forIn(filters, (value, key) => {\n        const recognized = _.filter(selected, item => value.includes(item));\n        if (recognized.length > 0) {\n          setQueryArgument(filterKeys[key], recognized.join(','));\n        } else {\n          removeQueryArgument(filterKeys[key]);\n        }\n      });\n    }\n  };\n\n  const updateRowFilterSelected = (id: string[]) => {\n    const selectedNew = _.xor(selectedRowFilters, id);\n    applyRowFilter(selectedNew);\n    setQueryParameters(selectedNew);\n    setOpen(false);\n  };\n\n  const clearAllRowFilter = (f: string) => {\n    updateRowFilterSelected(_.intersection(filters[f], selectedRowFilters));\n  };\n\n  const onRowFilterSelect = event => {\n    event.preventDefault();\n    updateRowFilterSelected([event?.target?.id]);\n  };\n\n  const clearAll = () => {\n    updateRowFilterSelected(selectedRowFilters);\n    updateNameFilter('');\n    updateLabelFilter([]);\n  };\n\n  // Initial URL parsing\n  React.useEffect(() => {\n    !_.isEmpty(labelFilters) && applyFilter(labelFilters, FilterType.LABEL);\n    !_.isEmpty(nameFilter) && applyFilter(nameFilter, FilterType.NAME);\n    !_.isEmpty(selectedRowFilters) && applyRowFilter(selectedRowFilters);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const switchFilter = type => {\n    setFilterType(type);\n    setInputText(nameFilter && type === FilterType.NAME ? nameFilter : '');\n  };\n\n  const dropdownItems = getDropdownItems(rowFilters, selectedRowFilters, data, props);\n\n  const { t } = useTranslation();\n  const searchFilterTitle = {\n    [FilterType.LABEL]: t('COMMON:MSG_COMMON_SEARCH_FILTER_2'),\n    [FilterType.NAME]: t('COMMON:MSG_COMMON_SEARCH_FILTER_1'),\n  };\n\n  return (\n    !hideToolbar && (\n      <DataToolbar id=\"filter-toolbar\" clearAllFilters={clearAll} clearFiltersButtonText={t('COMMON:MSG_COMMON_FILTER_11')}>\n        <DataToolbarContent>\n          {rowFilters.length > 0 && (\n            <DataToolbarItem>\n              {_.reduce(\n                Object.keys(filters),\n                (acc, key) => (\n                  <DataToolbarFilter\n                    key={key}\n                    chips={_.intersection(selectedRowFilters, filters[key]).map(item => {\n                      return { key: item, node: filtersNameMap[item] };\n                    })}\n                    deleteChip={(filter, chip: DataToolbarChip) => updateRowFilterSelected([chip.key])}\n                    categoryName={key}\n                    deleteChipGroup={() => clearAllRowFilter(key)}\n                  >\n                    {acc}\n                  </DataToolbarFilter>\n                ),\n                <Dropdown\n                  dropdownItems={dropdownItems}\n                  onSelect={onRowFilterSelect}\n                  isOpen={isOpen}\n                  toggle={\n                    <DropdownToggle data-test-id=\"filter-dropdown-toggle\" onToggle={() => setOpen(!isOpen)} iconComponent={CaretDownIcon}>\n                      <FilterIcon className=\"span--icon__right-margin\" />\n                      {t('COMMON:MSG_COMMON_FILTER_7')}\n                    </DropdownToggle>\n                  }\n                />,\n              )}\n            </DataToolbarItem>\n          )}\n          <DataToolbarItem className=\"co-filter-search--full-width\">\n            <DataToolbarFilter deleteChipGroup={() => updateLabelFilter([])} chips={!hideLabelFilter ? [...labelFilters] : []} deleteChip={(filter, chip: string) => updateLabelFilter(_.difference(labelFilters, [chip]))} categoryName={t('COMMON:MSG_COMMON_SEARCH_FILTER_2')}>\n              <DataToolbarFilter chips={nameFilter?.length ? [nameFilter] : []} deleteChip={() => updateNameFilter('')} categoryName={t('COMMON:MSG_COMMON_SEARCH_FILTER_1')}>\n                <div className=\"pf-c-input-group\">\n                  {!hideLabelFilter && <DropdownInternal items={searchFilterTitle} onChange={switchFilter} selectedKey={filterType} title={searchFilterTitle[filterType]} />}\n                  <AutocompleteInput\n                    className=\"co-text-node\"\n                    onSuggestionSelect={selected => {\n                      updateLabelFilter(_.uniq([...labelFilters, selected]));\n                    }}\n                    showSuggestions={FilterType.LABEL === filterType}\n                    textValue={inputText}\n                    setTextValue={updateSearchFilter}\n                    placeholder={FilterType.NAME === filterType ? t('COMMON:MSG_COMMON_SEARCH_PLACEHOLDER_1') : 'app=frontend'}\n                    data={data}\n                  />\n                </div>\n              </DataToolbarFilter>\n            </DataToolbarFilter>\n          </DataToolbarItem>\n        </DataToolbarContent>\n      </DataToolbar>\n    )\n  );\n};\n\ntype FilterToolbarProps = {\n  rowFilters?: RowFilter[];\n  data?: any;\n  reduxIDs?: string[];\n  filterList?: any;\n  textFilter?: string;\n  hideToolbar?: boolean;\n  hideLabelFilter?: boolean;\n  parseAutoComplete?: any;\n  kinds?: any;\n};\n\nexport type RowFilter = {\n  filterGroupName: string;\n  type: string;\n  items?: {\n    [key: string]: string;\n  }[];\n  itemsGenerator?: (...args) => { [key: string]: string }[];\n  reducer: (param) => React.ReactText;\n  filter?: any;\n};\n\nexport const FilterToolbar = withRouter(connect(null, { filterList })(FilterToolbar_));\nFilterToolbar.displayName = 'FilterToolbar';\n","import * as React from 'react';\n\nimport { ImpersonateNotifier } from './impersonate-notifier';\nimport { KubeAdminNotifier } from './kube-admin-notifier';\n\nexport const GlobalNotifications = () => (\n  <div className=\"co-global-notifications\">\n    <KubeAdminNotifier />\n    <ImpersonateNotifier />\n  </div>\n);\n","import * as React from 'react';\nimport {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartThemeColor,\n  ChartThemeVariant,\n  ChartVoronoiContainer,\n  getCustomTheme,\n  ChartGroup,\n  ChartTooltip,\n} from '@patternfly/react-charts';\nimport {\n  global_warning_color_100 as warningColor,\n  global_danger_color_100 as dangerColor,\n} from '@patternfly/react-tokens';\nimport { processFrame, ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\nimport { twentyFourHourTime } from '../utils/datetime';\nimport { humanizeNumber, useRefWidth, Humanize } from '../utils';\nimport { PrometheusEndpoint } from './helpers';\nimport { PrometheusGraph, PrometheusGraphLink } from './prometheus-graph';\nimport { usePrometheusPoll } from './prometheus-poll-hook';\nimport { areaTheme } from './themes';\nimport { DataPoint } from './';\nimport { getRangeVectorStats } from './utils';\nimport { GraphEmpty } from './graph-empty';\n\nconst DEFAULT_HEIGHT = 180;\nconst DEFAULT_SAMPLES = 60;\nconst DEFAULT_TICK_COUNT = 3;\nconst DEFAULT_TIMESPAN = 60 * 60 * 1000; // 1 hour\n\nexport enum AreaChartStatus {\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n}\n\nexport const chartStatusColors = {\n  [AreaChartStatus.ERROR]: dangerColor.value,\n  [AreaChartStatus.WARNING]: warningColor.value,\n};\n\nexport const AreaChart: React.FC<AreaChartProps> = ({\n  className,\n  data = [],\n  formatDate = twentyFourHourTime,\n  height = DEFAULT_HEIGHT,\n  humanize = humanizeNumber,\n  loading = true,\n  padding,\n  query,\n  theme = getCustomTheme(ChartThemeColor.blue, ChartThemeVariant.light, areaTheme),\n  tickCount = DEFAULT_TICK_COUNT,\n  title,\n  xAxis = true,\n  yAxis = true,\n  chartStyle,\n  byteDataType = '',\n}) => {\n  const [containerRef, width] = useRefWidth();\n  const [processedData, setProcessedData] = React.useState(data);\n  const [unit, setUnit] = React.useState('');\n\n  React.useEffect(() => {\n    if (byteDataType) {\n      const result = processFrame(data, byteDataType);\n      setProcessedData(result.processedData);\n      setUnit(result.unit);\n    } else {\n      setProcessedData(data);\n    }\n  }, [byteDataType, data]);\n\n  const tickFormat = React.useCallback((tick) => `${humanize(tick, unit, unit).string}`, [\n    humanize,\n    unit,\n  ]);\n\n  const getLabel = React.useCallback(\n    (prop) => {\n      const { x, y, description } = prop.datum as DataPoint<Date>;\n      const value = humanize(y, unit, unit).string;\n      const date = formatDate(x);\n      if (!description) {\n        return `${value} at ${date}`;\n      }\n      return description(date, value);\n    },\n    [humanize, unit, formatDate],\n  );\n\n  const multiLine = data && data.filter((d) => !!d).length > 1;\n\n  const container = (\n    <ChartVoronoiContainer\n      voronoiDimension=\"x\"\n      labels={getLabel}\n      activateData={false}\n      labelComponent={\n        <ChartTooltip\n          centerOffset={multiLine ? { x: 0, y: -40 } : undefined}\n          pointerLength={multiLine ? 40 : undefined}\n        />\n      }\n    />\n  );\n\n  return (\n    <PrometheusGraph className={className} ref={containerRef} title={title}>\n      {data && data[0] && data[0].length ? (\n        <PrometheusGraphLink query={query}>\n          <Chart\n            containerComponent={container}\n            domainPadding={{ y: 20 }}\n            height={height}\n            width={width}\n            theme={theme}\n            scale={{ x: 'time', y: 'linear' }}\n            padding={padding}\n          >\n            {xAxis && <ChartAxis tickCount={tickCount} tickFormat={formatDate} />}\n            {yAxis && <ChartAxis dependentAxis tickCount={tickCount} tickFormat={tickFormat} />}\n            <ChartGroup>\n              {processedData.map((datum, index) => (\n                <ChartArea key={index} data={datum} style={chartStyle && chartStyle[index]} />\n              ))}\n            </ChartGroup>\n          </Chart>\n        </PrometheusGraphLink>\n      ) : (\n        <GraphEmpty height={height} loading={loading} />\n      )}\n    </PrometheusGraph>\n  );\n};\n\nexport const Area: React.FC<AreaProps> = ({\n  namespace,\n  query,\n  samples = DEFAULT_SAMPLES,\n  timeout,\n  timespan = DEFAULT_TIMESPAN,\n  ...rest\n}) => {\n  const [response, , loading] = usePrometheusPoll({\n    endpoint: PrometheusEndpoint.QUERY_RANGE,\n    namespace,\n    query,\n    samples,\n    timeout,\n    timespan,\n  });\n  const data = getRangeVectorStats(response);\n  return <AreaChart data={[data]} loading={loading} query={query} {...rest} />;\n};\n\ntype AreaChartProps = {\n  className?: string;\n  formatDate?: (date: Date) => string;\n  humanize?: Humanize;\n  height?: number;\n  loading?: boolean;\n  query?: string;\n  theme?: any; // TODO figure out the best way to import VictoryThemeDefinition\n  tickCount?: number;\n  title?: string;\n  data?: DataPoint[][];\n  xAxis?: boolean;\n  yAxis?: boolean;\n  padding?: object;\n  chartStyle?: object[];\n  byteDataType?: ByteDataTypes; //Use this to process the whole data frame at once\n};\n\ntype AreaProps = AreaChartProps & {\n  namespace?: string;\n  query: string;\n  samples?: number;\n  timeout?: string;\n  timespan?: number;\n  byteDataType?: ByteDataTypes;\n};\n","import * as React from 'react';\nimport {\n  ChartDonutThreshold,\n  ChartDonutUtilization,\n  ChartThemeColor,\n} from '@patternfly/react-charts';\nimport classNames from 'classnames';\n\nimport { PrometheusGraph, PrometheusGraphLink } from './prometheus-graph';\nimport { usePrometheusPoll } from './prometheus-poll-hook';\nimport { PrometheusEndpoint } from './helpers';\nimport { useRefWidth, humanizePercentage, Humanize } from '../utils';\nimport { getInstantVectorStats } from './utils';\nimport { DataPoint } from '.';\n\nconst DEFAULT_THRESHOLDS = [{ value: 67 }, { value: 92 }];\n\nexport const GaugeChart: React.FC<GaugeChartProps> = ({\n  data,\n  error,\n  humanize = humanizePercentage,\n  invert = false,\n  loading,\n  query = '',\n  remainderLabel = 'available',\n  themeColor = ChartThemeColor.green,\n  thresholds = DEFAULT_THRESHOLDS,\n  title,\n  usedLabel = 'used',\n  // Don't sort, Uses previously declared props\n  label = data ? humanize(data.y).string : 'No Data',\n  secondaryTitle = usedLabel,\n  className,\n}) => {\n  const [ref, width] = useRefWidth();\n  const ready = !error && !loading;\n  const status = loading ? 'Loading' : error;\n  const labels = ({ datum: { x, y } }) => (x ? `${x} ${usedLabel}` : `${y} ${remainderLabel}`);\n  return (\n    <PrometheusGraph\n      className={classNames('graph-wrapper--title-center graph-wrapper--gauge', className)}\n      ref={ref}\n      title={title}\n    >\n      <PrometheusGraphLink query={query}>\n        <ChartDonutThreshold\n          data={thresholds}\n          height={width} // Changes the scale of the graph, not actual width and height\n          padding={0}\n          width={width}\n          y=\"value\"\n        >\n          <ChartDonutUtilization\n            labels={labels}\n            data={ready ? data : { y: 0 }}\n            invert={invert}\n            padding={0}\n            subTitle={ready ? secondaryTitle : ''}\n            themeColor={themeColor}\n            thresholds={thresholds}\n            title={status || label}\n          />\n        </ChartDonutThreshold>\n      </PrometheusGraphLink>\n    </PrometheusGraph>\n  );\n};\n\nexport const Gauge: React.FC<GaugeProps> = ({\n  humanize = humanizePercentage,\n  invert,\n  namespace,\n  percent = 0,\n  query,\n  remainderLabel,\n  secondaryTitle,\n  thresholds,\n  title,\n  usedLabel,\n}) => {\n  const [response, error, loading] = usePrometheusPoll({\n    endpoint: PrometheusEndpoint.QUERY,\n    namespace,\n    query,\n  });\n\n  const [data] = response\n    ? getInstantVectorStats(response, null, humanize).map(({ label, y }) => ({ x: label, y }))\n    : [{ x: humanize(percent).string, y: percent }];\n  return (\n    <GaugeChart\n      data={data}\n      error={!!error && 'No Data'}\n      invert={invert}\n      label={data.x}\n      loading={loading}\n      query={query}\n      remainderLabel={remainderLabel}\n      secondaryTitle={secondaryTitle}\n      thresholds={thresholds}\n      title={title}\n      usedLabel={usedLabel}\n    />\n  );\n};\n\ntype GaugeChartProps = {\n  data: DataPoint;\n  error?: string;\n  humanize?: Humanize;\n  invert?: boolean;\n  isLoaded?: boolean;\n  label: string;\n  loading?: boolean;\n  query?: string;\n  remainderLabel?: string;\n  secondaryTitle?: string;\n  themeColor?: string;\n  thresholds?: {\n    value: number;\n    color?: string;\n  }[];\n  title?: string;\n  usedLabel?: string;\n  className?: string;\n};\n\ntype GaugeProps = {\n  humanize?: Humanize;\n  invert?: boolean;\n  namespace?: string;\n  percent?: number;\n  query?: string;\n  remainderLabel?: string;\n  secondaryTitle?: string;\n  thresholds?: {\n    value: number;\n    color?: string;\n  }[];\n  title?: string;\n  usedLabel?: string;\n};\n","import * as React from 'react';\n\nexport const GraphEmpty: React.FC<GraphEmptyProps> = ({ height = 180, loading = false }) => (\n  <div\n    style={{\n      alignItems: 'center',\n      display: 'flex',\n      height,\n      justifyContent: 'center',\n      padding: '5px',\n      width: '100%',\n    }}\n  >\n    {loading ? <div className=\"skeleton-chart\" /> : <div className=\"text-secondary\">No datapoints found.</div>}\n  </div>\n);\n\ntype GraphEmptyProps = {\n  height?: number | string;\n  loading?: boolean;\n};\n","import * as _ from 'lodash-es';\n\nimport { PROMETHEUS_BASE_PATH, PROMETHEUS_TENANCY_BASE_PATH } from './index';\n\nexport enum PrometheusEndpoint {\n  LABEL = 'api/v1/label',\n  QUERY = 'api/v1/query',\n  QUERY_RANGE = 'api/v1/query_range',\n}\n\nexport const getPrometheusQueryEndTimestamp = () => Date.now();\n\n// Range vector queries require end, start, and step search params\nconst getRangeVectorSearchParams = (\n  timespan: number,\n  endTime: number = getPrometheusQueryEndTimestamp(),\n  samples: number = 60,\n): URLSearchParams => {\n  const params = new URLSearchParams();\n  if (timespan > 0) {\n    params.append('start', `${(endTime - timespan) / 1000}`);\n    params.append('end', `${endTime / 1000}`);\n    params.append('step', `${timespan / samples / 1000}`);\n  }\n  return params;\n};\n\nconst getSearchParams = ({\n  endpoint,\n  endTime,\n  timespan,\n  samples,\n  ...params\n}: PrometheusURLProps): URLSearchParams => {\n  const searchParams =\n    endpoint === PrometheusEndpoint.QUERY_RANGE\n      ? getRangeVectorSearchParams(timespan, endTime, samples)\n      : new URLSearchParams();\n  _.each(params, (value, key) => value && searchParams.append(key, value.toString()));\n  return searchParams;\n};\n\nexport const getPrometheusURL = (\n  props: PrometheusURLProps,\n  basePath: string = props.namespace ? PROMETHEUS_TENANCY_BASE_PATH : PROMETHEUS_BASE_PATH,\n): string => {\n  if (!props.query) {\n    return '';\n  }\n  const params = getSearchParams(props);\n  return `${basePath}/${props.endpoint}?${params.toString()}`;\n};\n\ntype PrometheusURLProps = {\n  endpoint: PrometheusEndpoint;\n  endTime?: number;\n  namespace?: string;\n  query: string;\n  samples?: number;\n  timeout?: string;\n  timespan?: number;\n};\n","import * as React from 'react';\nimport { AsyncComponent } from '../utils/async';\n\n// Constants\nexport const PROMETHEUS_BASE_PATH = window.SERVER_FLAGS.prometheusBaseURL;\nexport const PROMETHEUS_TENANCY_BASE_PATH = window.SERVER_FLAGS.prometheusTenancyBaseURL;\nexport const ALERT_MANAGER_BASE_PATH = window.SERVER_FLAGS.alertManagerBaseURL;\n\n// Components\nexport * from './require-prometheus';\nexport { errorStatus, Status } from './status';\nexport const Area = (props) => (\n  <AsyncComponent loader={() => import('./graph-loader').then((c) => c.Area)} {...props} />\n);\nexport const Bar = (props) => (\n  <AsyncComponent loader={() => import('./graph-loader').then((c) => c.Bar)} {...props} />\n);\nexport const Gauge = (props) => (\n  <AsyncComponent loader={() => import('./graph-loader').then((c) => c.Gauge)} {...props} />\n);\n\n// Types\nexport type DataPoint<X = Date | number | string> = {\n  x?: X;\n  y?: number;\n  label?: string;\n  metric?: { [key: string]: string };\n  description?: (date: string, value: string) => string;\n};\n\nexport type PrometheusLabels = { [key: string]: string };\nexport type PrometheusValue = [number, string];\n\n// Only covers range and instant vector responses for now.\nexport type PrometheusResult = {\n  metric: PrometheusLabels;\n  values?: PrometheusValue[];\n  value?: PrometheusValue;\n};\n\nexport type PrometheusData = {\n  resultType: 'matrix' | 'vector' | 'scalar' | 'string';\n  result: PrometheusResult[];\n};\n\nexport type PrometheusResponse = {\n  status: string;\n  data: PrometheusData;\n  errorType?: string;\n  error?: string;\n  warnings?: string[];\n};\n\nexport type DomainPadding =\n  | number\n  | {\n      x?: number | [number, number];\n      y?: number | [number, number];\n    };\n","import * as classNames from 'classnames';\nimport * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { FLAGS } from '@console/shared';\nimport { featureReducerName } from '../../reducers/features';\nimport { getActivePerspective, getActiveNamespace } from '../../reducers/ui';\nimport { RootState } from '../../redux';\n\nexport const getPrometheusExpressionBrowserURL = (url, queries): string => {\n  if (!url || _.isEmpty(queries)) {\n    return null;\n  }\n  const params = new URLSearchParams();\n  _.each(queries, (query, i) => {\n    params.set(`g${i}.range_input`, '1h');\n    params.set(`g${i}.expr`, query);\n    params.set(`g${i}.tab`, '0');\n  });\n  return `${url}/graph?${params.toString()}`;\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  canAccessMonitoring:\n    !!state[featureReducerName].get(FLAGS.CAN_GET_NS) && !!window.SERVER_FLAGS.prometheusBaseURL,\n  perspective: getActivePerspective(state),\n  namespace: getActiveNamespace(state),\n});\n\nexport const PrometheusGraphLink_: React.FC<PrometheusGraphLinkProps> = ({\n  canAccessMonitoring,\n  children,\n  perspective,\n  query,\n  namespace,\n}) => {\n  if (!query) {\n    return <>{children}</>;\n  }\n\n  const params = new URLSearchParams();\n  params.set('query0', query);\n\n  const url = `/monitoring/query-browser?${params.toString()}`;\n\n  return (\n    <Link to={url} style={{ color: 'inherit', textDecoration: 'none' }}>\n      {children}\n    </Link>\n  );\n};\nexport const PrometheusGraphLink = connect(mapStateToProps)(PrometheusGraphLink_);\n\nexport const PrometheusGraph: React.FC<PrometheusGraphProps> = React.forwardRef(\n  ({ children, className, title }, ref: React.RefObject<HTMLDivElement>) => (\n    <div ref={ref} className={classNames('graph-wrapper graph-wrapper__horizontal-bar', className)}>\n      {title && <h5 className=\"graph-title\">{title}</h5>}\n      {children}\n    </div>\n  ),\n);\n\ntype PrometheusGraphLinkProps = {\n  canAccessMonitoring: boolean;\n  perspective: string;\n  query: string;\n  namespace?: string;\n};\n\ntype PrometheusGraphProps = {\n  className?: string;\n  ref?: React.Ref<HTMLDivElement>;\n  title?: string;\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useCallback, useState } from 'react';\n\nimport { usePoll, useSafeFetch } from '../utils';\nimport { getPrometheusURL, PrometheusEndpoint } from './helpers';\nimport { PrometheusResponse } from '.';\n\nconst DEFAULT_DELAY = 15000; // 15 seconds\nconst DEFAULT_SAMPLES = 60;\nconst DEFAULT_TIMESPAN = 60 * 60 * 1000; // 1 hour\n\nexport const usePrometheusPoll = ({\n  delay = DEFAULT_DELAY,\n  endpoint,\n  endTime = undefined,\n  namespace,\n  query,\n  samples = DEFAULT_SAMPLES,\n  timeout,\n  timespan = DEFAULT_TIMESPAN,\n}: PrometheusPollProps) => {\n  const url = getPrometheusURL({ endpoint, endTime, namespace, query, samples, timeout, timespan });\n  const [error, setError] = useState();\n  const [response, setResponse] = useState();\n  const [loading, setLoading] = useState(true);\n  const safeFetch = useSafeFetch();\n  const tick = useCallback(() => {\n    if (url) {\n      safeFetch(url)\n        .then((data) => {\n          setResponse(data);\n          setError(undefined);\n          setLoading(false);\n        })\n        .catch((err) => {\n          if (err.name !== 'AbortError') {\n            setError(err);\n            setLoading(false);\n            // eslint-disable-next-line no-console\n            console.error(`Error polling Prometheus: ${err}`);\n          }\n        });\n    } else {\n      setLoading(false);\n    }\n  }, [url]);\n\n  usePoll(tick, delay, endTime, query, timespan);\n\n  return [response, error, loading] as [PrometheusResponse, Error, boolean];\n};\n\ntype PrometheusPollProps = {\n  delay?: number;\n  endpoint: PrometheusEndpoint;\n  endTime?: number;\n  namespace?: string;\n  query: string;\n  samples?: number;\n  timeout?: string;\n  timespan?: number;\n};\n","import * as React from 'react';\n\nimport { FLAGS } from '@console/shared/src/constants';\nimport { connectToFlags } from '../../reducers/features';\nimport { PROMETHEUS_BASE_PATH, PROMETHEUS_TENANCY_BASE_PATH } from '.';\n\nconst canAccessPrometheus = (prometheusFlag) =>\n  prometheusFlag && !!PROMETHEUS_BASE_PATH && !!PROMETHEUS_TENANCY_BASE_PATH;\n\n// HOC that will hide WrappedComponent when Prometheus isn't configured or the user doesn't have permission to query Prometheus.\n// TODO Figure out better typing here\nexport const requirePrometheus = (WrappedComponent) =>\n  connectToFlags<any>(FLAGS.PROMETHEUS)(({ flags, ...rest }) => {\n    const prometheusFlag = flags[FLAGS.PROMETHEUS];\n    if (!canAccessPrometheus(prometheusFlag)) {\n      return null;\n    }\n\n    return <WrappedComponent {...rest} />;\n  });\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classnames from 'classnames';\nimport { Link } from 'react-router-dom';\n\nimport { coFetchJSON } from '../../co-fetch';\nimport { PROMETHEUS_BASE_PATH, PROMETHEUS_TENANCY_BASE_PATH } from '.';\n\nexport const errorStatus = (err) => {\n  if (_.get(err.response, 'ok') === false) {\n    return {\n      short: '?',\n      status: '', // Gray\n      long: err.message,\n    };\n  }\n  // Generic network error handling.\n  return {\n    short: 'ERROR',\n    long: err.message,\n    status: 'ERROR',\n  };\n};\n\nconst fetchQuery = (q, long, namespace) => {\n  const nsParam = namespace ? `&namespace=${encodeURIComponent(namespace)}` : '';\n  const basePath = namespace ? PROMETHEUS_TENANCY_BASE_PATH : PROMETHEUS_BASE_PATH;\n  return coFetchJSON(`${basePath}/api/v1/query?query=${encodeURIComponent(q)}${nsParam}`)\n    .then((res) => {\n      const short = parseInt(_.get(res, 'data.result[0].value[1]'), 10) || 0;\n      return {\n        short,\n        long,\n        status: short === 0 ? 'OK' : 'WARN',\n      };\n    })\n    .catch(errorStatus);\n};\n\n/** @augments {React.Component<{fetch?: () => Promise<any>, query?: string, title: string, href?: string, rel?: string, target?: string}}>} */\nexport class Status extends React.Component {\n  constructor(props) {\n    super(props);\n    this.interval = null;\n    this.state = {\n      status: '...',\n    };\n    this.clock = 0;\n  }\n\n  fetch(props = this.props) {\n    const clock = this.clock;\n    const promise = props.query\n      ? fetchQuery(props.query, props.name, props.namespace)\n      : props.fetch();\n\n    const ignorePromise = (cb) => (...args) => {\n      if (clock !== this.clock) {\n        return;\n      }\n      cb(...args);\n    };\n    promise\n      .then(ignorePromise(({ short, long, status }) => this.setState({ short, long, status })))\n      .catch(ignorePromise(() => this.setState({ short: 'BAD', long: 'Error', status: 'ERROR' })))\n      .then(\n        ignorePromise(\n          () =>\n            (this.interval = setTimeout(() => {\n              if (this.isMounted_) {\n                this.fetch();\n              }\n            }, 30000)),\n        ),\n      );\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (_.isEqual(nextProps, this.props)) {\n      return;\n    }\n    this.clock += 1;\n    // Don't show stale data if we changed the query.\n    this.setState({\n      status: '...',\n      short: undefined,\n      long: undefined,\n    });\n    this.fetch(nextProps);\n  }\n\n  UNSAFE_componentWillMount() {\n    clearInterval(this.interval);\n    this.fetch();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const title = this.props.title;\n    const { short, long, status } = this.state;\n    const shortStatusClassName = classnames('graph-status__short', {\n      'graph-status__short--ok': status === 'OK',\n      'graph-status__short--warn': status === 'WARN',\n      'graph-status__short--error': status === 'ERROR',\n    });\n\n    const statusElem = (\n      <div className=\"graph-wrapper graph-wrapper--title-center graph-wrapper--status\">\n        {title && <h5 className=\"graph-title\">{title}</h5>}\n        <div className=\"graph-status\">\n          <h1 className={shortStatusClassName}>{short}</h1>\n          <div className=\"graph-status--long\">{long}</div>\n        </div>\n      </div>\n    );\n    const linkProps = _.pick(this.props, ['rel', 'target', 'to']);\n    if (_.isEmpty(linkProps)) {\n      return statusElem;\n    }\n    return (\n      <Link {...linkProps} className=\"graph-status__link\">\n        {statusElem}\n      </Link>\n    );\n  }\n}\n","export const areaTheme = {\n  area: {\n    style: {\n      data: {\n        fillOpacity: 0.15,\n      },\n    },\n  },\n  chart: {\n    padding: {\n      bottom: 30,\n      left: 60,\n      right: 10,\n      top: 0,\n    },\n  },\n  dependentAxis: {\n    style: {\n      grid: { stroke: '#EDEDED' },\n    },\n  },\n};\n\nexport const barTheme = {\n  bar: {\n    style: {\n      labels: {\n        textAnchor: 'end',\n      },\n    },\n  },\n  dependentAxis: {\n    style: {\n      axis: {\n        stroke: 'none',\n      },\n      tickLabels: {\n        fill: 'none',\n      },\n    },\n  },\n  independentAxis: {\n    style: {\n      axis: {\n        stroke: 'none',\n      },\n      tickLabels: {\n        textAnchor: 'start',\n      },\n    },\n  },\n};\n\nexport const queryBrowserTheme = {\n  chart: {\n    padding: {\n      bottom: 0,\n      left: 0,\n      right: 0,\n      top: 0,\n    },\n  },\n  dependentAxis: {\n    style: {\n      axis: {\n        stroke: 'none',\n      },\n      grid: {\n        stroke: '#EDEDED',\n      },\n      tickLabels: {\n        padding: 0,\n      },\n    },\n  },\n  independentAxis: {\n    style: {\n      tickLabels: {\n        padding: 2,\n      },\n      ticks: {\n        size: 5,\n        strokeWidth: 1,\n        stroke: '#d2d2d2',\n      },\n    },\n  },\n};\n","import * as _ from 'lodash-es';\n\nimport { PrometheusResponse, DataPoint } from '.';\nimport { Humanize } from '../utils';\n\nexport const getRangeVectorStats: GetStats<Date> = (response) => {\n  const values = _.get(response, 'data.result[0].values');\n  return _.map(values, (value) => ({\n    x: new Date(value[0] * 1000),\n    y: parseFloat(value[1]),\n  }));\n};\n\nexport const getInstantVectorStats: GetStats<number> = (response, metric, humanize) => {\n  const results = _.get(response, 'data.result', []);\n  return results.map((r) => {\n    const y = parseFloat(_.get(r, 'value[1]'));\n    return {\n      label: humanize ? humanize(y).string : null,\n      x: _.get(r, ['metric', metric], ''),\n      y,\n      metric: r.metric,\n    };\n  });\n};\n\nexport type GetStats<X = Date | number | string> = {\n  (response: PrometheusResponse, metric?: string, humanize?: Humanize): DataPoint<X>[];\n};\n","import * as React from 'react';\nimport { NoticeExpirationModal_ } from './modals/notice-expiration-modal';\nlet timerID = 0;\nlet expTime = 0;\n\nexport class ExpTimer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expText: null,\n    };\n  }\n  componentDidMount() {\n    const curTime = new Date();\n    const { keycloak } = this.props;\n    const tokenExpTime = new Date((keycloak.idTokenParsed.exp + keycloak.timeSkew) * 1000);\n    const logoutTime = (tokenExpTime.getTime() - curTime.getTime()) / 1000;\n    expTime = logoutTime;\n    timerID = window.setInterval(() => this.tick(), 1000);\n  }\n  tokRefresh() {\n    const curTime = new Date();\n    const { keycloak } = this.props;\n    const tokenExpTime = new Date((keycloak.idTokenParsed.exp + keycloak.timeSkew) * 1000);\n    const logoutTime = (tokenExpTime.getTime() - curTime.getTime()) / 1000;\n    expTime = logoutTime;\n  }\n  componentWillUnmount() {\n    // 타이머 등록 해제\n    window.clearInterval(timerID);\n  }\n\n  expFormat() {\n    let temp = Math.floor(expTime);\n    const sec = temp % 60;\n    temp = Math.floor(temp / 60);\n    const min = temp % 60;\n    temp = Math.floor(temp / 60);\n    const hour = temp % 24;\n    temp = Math.floor(temp / 24);\n    const day = temp;\n    const expText = (!!day ? day + 'day(s) ' : '') + (!!hour ? (hour < 10 ? '0' + hour : hour) + ':' : '') + (min < 10 ? '0' + min : min) + ':' + (sec < 10 ? '0' + sec : sec);\n    this.setState({ expText: expText });\n  }\n  tick() {\n    if (expTime > 0) {\n      expTime -= 1;\n    }\n    if (Math.floor(expTime) === 60) {\n      NoticeExpirationModal_({ logout: this.props.logout, tokenRefresh: this.props.tokenRefresh, time: expTime });\n    }\n    this.expFormat();\n  }\n  render() {\n    const { expText } = this.state;\n    return (\n      <div className=\"exp-timer\">\n        <span className=\"co-masthead__timer__span\">\n          <span>{expText}</span>\n        </span>\n      </div>\n    );\n  }\n}\n","var map = {\n\t\"./namespaces/create-namespace\": [\n\t\t\"./public/components/hypercloud/form/namespaces/create-namespace.tsx\",\n\t\t10,\n\t\t11,\n\t\t\"create-secret0\"\n\t],\n\t\"./namespaces/create-namespace.tsx\": [\n\t\t\"./public/components/hypercloud/form/namespaces/create-namespace.tsx\",\n\t\t10,\n\t\t11,\n\t\t\"create-secret0\"\n\t],\n\t\"./pipelineruns/create-pipelinerun\": [\n\t\t\"./public/components/hypercloud/form/pipelineruns/create-pipelinerun.tsx\",\n\t\t\"create-secret2\"\n\t],\n\t\"./pipelineruns/create-pipelinerun.tsx\": [\n\t\t\"./public/components/hypercloud/form/pipelineruns/create-pipelinerun.tsx\",\n\t\t\"create-secret2\"\n\t],\n\t\"./taskruns/create-taskrun\": [\n\t\t\"./public/components/hypercloud/form/taskruns/create-taskrun.tsx\",\n\t\t10,\n\t\t11,\n\t\t15,\n\t\t\"create-secret4\"\n\t],\n\t\"./taskruns/create-taskrun.tsx\": [\n\t\t\"./public/components/hypercloud/form/taskruns/create-taskrun.tsx\",\n\t\t10,\n\t\t11,\n\t\t15,\n\t\t\"create-secret4\"\n\t],\n\t\"./tasks/create-task\": [\n\t\t\"./public/components/hypercloud/form/tasks/create-task.tsx\",\n\t\t10,\n\t\t11,\n\t\t16,\n\t\t\"create-secret6\"\n\t],\n\t\"./tasks/create-task.tsx\": [\n\t\t\"./public/components/hypercloud/form/tasks/create-task.tsx\",\n\t\t10,\n\t\t11,\n\t\t16,\n\t\t\"create-secret6\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./public/components/hypercloud/form lazy recursive ^\\\\.\\\\/.*\\\\/create\\\\-.*$\";\nmodule.exports = webpackAsyncContext;","export const pluralToKind = new Map([\n  ['podsecuritypolicies', { kind: 'PodSecurityPolicy', type: 'VanilaObject' }],\n  ['pods', { kind: 'Pod', type: 'VanilaObject' }],\n  ['deployments', { kind: 'Deployment', type: 'VanilaObject' }],\n  ['replicasets', { kind: 'ReplicaSet', type: 'VanilaObject' }],\n  ['horizontalpodautoscalers', { kind: 'HorizontalPodAutoscaler', type: 'VanilaObject' }],\n  ['daemonsets', { kind: 'DaemonSet', type: 'VanilaObject' }],\n  ['statefulsets', { kind: 'StatefulSet', type: 'VanilaObject' }],\n  ['configmaps', { kind: 'ConfigMap', type: 'VanilaObject' }],\n  ['secrets', { kind: 'Secret', type: 'VanilaObject' }],\n  ['jobs', { kind: 'Job', type: 'VanilaObject' }],\n  ['cronjobs', { kind: 'CronJob', type: 'VanilaObject' }],\n  ['services', { kind: 'Service', type: 'VanilaObject' }],\n  ['ingresses', { kind: 'Ingress', type: 'VanilaObject' }],\n  ['networkpolicies', { kind: 'NetworkPolicy', type: 'VanilaObject' }],\n  ['storageclasses', { kind: 'StorageClass', type: 'VanilaObject' }],\n  ['persistentvolumeclaims', { kind: 'PersistentVolumeClaim', type: 'VanilaObject' }],\n  ['persistentvolumes', { kind: 'PersistentVolume', type: 'VanilaObject' }],\n  ['namespaces', { kind: 'Namespace', type: 'VanilaObject' }],\n  ['limitranges', { kind: 'LimitRange', type: 'VanilaObject' }],\n  ['resourcequotas', { kind: 'ResourceQuota', type: 'VanilaObject' }],\n  ['roles', { kind: 'Role', type: 'VanilaObject' }],\n  ['rolebindings', { kind: 'RoleBinding', type: 'VanilaObject' }],\n  ['serviceaccounts', { kind: 'ServiceAccount', type: 'VanilaObject' }],\n  ['customresourcedefinitions', { kind: 'CustomResourceDefinition', type: 'VanilaObject' }],\n  ['namespaceclaims', { kind: 'NamespaceClaim', type: 'CustomResourceDefinition' }],\n  ['servicebrokers', { kind: 'ServiceBroker', type: 'CustomResourceDefinition' }],\n  ['serviceclasses', { kind: 'ServiceClass', type: 'CustomResourceDefinition' }],\n  ['serviceplans', { kind: 'ServicePlan', type: 'CustomResourceDefinition' }],\n  ['clusterservicebrokers', { kind: 'ClusterServiceBroker', type: 'CustomResourceDefinition' }],\n  ['clusterserviceclasses', { kind: 'ClusterServiceClass', type: 'CustomResourceDefinition' }],\n  ['clusterserviceplans', { kind: 'ClusterServicePlan', type: 'CustomResourceDefinition' }],\n  ['clustertemplates', { kind: 'ClusterTemplate', type: 'CustomResourceDefinition' }],\n  ['serviceinstances', { kind: 'ServiceInstance', type: 'CustomResourceDefinition' }],\n  ['servicebindings', { kind: 'ServiceBinding', type: 'CustomResourceDefinition' }],\n  ['catalogserviceclaims', { kind: 'CatalogServiceClaim', type: 'CustomResourceDefinition' }],\n  ['templates', { kind: 'Template', type: 'CustomResourceDefinition' }],\n  ['templateinstances', { kind: 'TemplateInstance', type: 'CustomResourceDefinition' }],\n  ['rolebindingclaims', { kind: 'RoleBindingClaim', type: 'CustomResourceDefinition' }],\n  ['resourcequotaclaims', { kind: 'ResourceQuotaClaim', type: 'CustomResourceDefinition' }],\n  ['tasks', { kind: 'Task', type: 'CustomResourceDefinition', createType: 'manual' }],\n  ['clustertasks', { kind: 'ClusterTask', type: 'CustomResourceDefinition' }],\n  ['taskruns', { kind: 'TaskRun', type: 'CustomResourceDefinition', createType: 'manual' }],\n  ['pipelines', { kind: 'Pipeline', type: 'CustomResourceDefinition' }],\n  ['pipelineruns', { kind: 'PipelineRun', type: 'CustomResourceDefinition', createType: 'manual' }],\n  ['approvals', { kind: 'Approval', type: 'CustomResourceDefinition' }],\n  ['pipelineresources', { kind: 'PipelineResource', type: 'CustomResourceDefinition' }],\n  ['integrationconfigs', { kind: 'IntegrationConfig', type: 'CustomResourceDefinition' }],\n  ['hyperclusterresources', { kind: 'HyperClusterResource', type: 'CustomResourceDefinition' }],\n  ['clusterclaims', { kind: 'ClusterClaim', type: 'CustomResourceDefinition' }],\n  ['hyperclusterresources', { kind: 'HyperClusterResource', type: 'CustomResourceDefinition' }],\n  ['federatedconfigmaps', { kind: 'FederatedConfigMap', type: 'CustomResourceDefinition' }],\n  ['federateddeployments', { kind: 'FederatedDeployment', type: 'CustomResourceDefinition' }],\n  ['federatedingresses', { kind: 'FederatedIngress', type: 'CustomResourceDefinition' }],\n  ['federatedjobs', { kind: 'FederatedJob', type: 'CustomResourceDefinition' }],\n  ['federatednamespaces', { kind: 'FederatedNamespace', type: 'CustomResourceDefinition' }],\n  ['federatedreplicasets', { kind: 'FederatedReplicaSet', type: 'CustomResourceDefinition' }],\n  ['federatedsecrets', { kind: 'FederatedSecret', type: 'CustomResourceDefinition' }],\n  ['federatedservices', { kind: 'FederatedService', type: 'CustomResourceDefinition' }],\n  ['federatedpods', { kind: 'FederatedPod', type: 'CustomResourceDefinition' }],\n  ['federatedhorizontalpodautoscalers', { kind: 'FederatedHorizontalPodAutoscaler', type: 'CustomResourceDefinition' }],\n  ['federateddaemonsets', { kind: 'FederatedDaemonSet', type: 'CustomResourceDefinition' }],\n  ['federatedstatefulsets', { kind: 'FederatedStatefulSet', type: 'CustomResourceDefinition' }],\n  ['federatedcronjobs', { kind: 'FederatedCronJob', type: 'CustomResourceDefinition' }],\n  ['virtualservices', { kind: 'VirtualService', type: 'CustomResourceDefinition' }],\n  ['destinationrules', { kind: 'DestinationRule', type: 'CustomResourceDefinition' }],\n  ['envoyfilters', { kind: 'EnvoyFilter', type: 'CustomResourceDefinition' }],\n  ['gateways', { kind: 'Gateway', type: 'CustomResourceDefinition' }],\n  ['sidecars', { kind: 'Sidecar', type: 'CustomResourceDefinition' }],\n  ['serviceentries', { kind: 'ServiceEntry', type: 'CustomResourceDefinition' }],\n  ['requestauthentications', { kind: 'RequestAuthentication', type: 'CustomResourceDefinition' }],\n  ['peerauthentications', { kind: 'PeerAuthentication', type: 'CustomResourceDefinition' }],\n  ['authorizationpolicies', { kind: 'AuthorizationPolicy', type: 'CustomResourceDefinition' }],\n  ['datavolumes', { kind: 'DataVolume', type: 'CustomResourceDefinition' }],\n  ['virtualmachines', { kind: 'VirtualMachine', type: 'CustomResourceDefinition' }],\n  ['registries', { kind: 'Registry', type: 'CustomResourceDefinition' }],\n  ['externalregistries', { kind: 'ExternalRegistry', type: 'CustomResourceDefinition' }],\n  ['imagesigners', { kind: 'ImageSigner', type: 'CustomResourceDefinition' }],\n  ['imagesignrequests', { kind: 'ImageSignRequest', type: 'CustomResourceDefinition' }],\n  ['imagescanrequests', { kind: 'ImageScanRequest', type: 'CustomResourceDefinition' }],\n  ['imagereplicates', { kind: 'ImageReplicate', type: 'CustomResourceDefinition' }],\n  ['signerpolicies', { kind: 'SignerPolicy', type: 'CustomResourceDefinition' }],\n  ['notebooks', { kind: 'Notebook', type: 'CustomResourceDefinition' }],\n  ['experiments', { kind: 'Experiment', type: 'CustomResourceDefinition' }],\n  ['trainingjobs', { kind: 'TrainingJob', type: 'CustomResourceDefinition' }],\n  ['tfjobs', { kind: 'TFJob', type: 'CustomResourceDefinition' }],\n  ['pytorchjobs', { kind: 'PyTorchJob', type: 'CustomResourceDefinition' }],\n  ['inferenceservices', { kind: 'InferenceService', type: 'CustomResourceDefinition' }],\n  ['workflowtemplates', { kind: 'WorkflowTemplate', type: 'CustomResourceDefinition' }],\n  ['workflows', { kind: 'Workflow', type: 'CustomResourceDefinition' }],\n]);\n","import * as _ from 'lodash-es';\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Helmet } from 'react-helmet';\r\nimport * as PropTypes from 'prop-types';\r\nimport * as classNames from 'classnames';\r\n\r\nimport { history, SelectorInput, LoadingBox } from './../utils';\r\nimport { namespaceProptype } from '../../propTypes';\r\nimport { split, selectorFromString } from '../../module/k8s/selector';\r\nimport { requirementFromString } from '../../module/k8s/selector-requirement';\r\nimport { resourceListPages } from './../resource-pages';\r\nimport { ResourceListDropdown } from './../resource-dropdown';\r\nimport { connectToModel } from '../../kinds';\r\nimport { connectToFlags, flagPending } from '../../reducers/features';\r\nimport { FLAGS } from '@console/shared/src/constants';\r\nimport { referenceForModel, kindForReference } from '../../module/k8s';\r\nimport { AsyncComponent } from './../utils/async';\r\nimport { DefaultPage } from './../default-resource';\r\n\r\nconst ResourceList = connectToModel(({ kindObj, kindsInFlight, namespace, selector, fake }) => {\r\n  if (kindsInFlight) {\r\n    return <LoadingBox />;\r\n  }\r\n\r\n  const componentLoader = resourceListPages.get(referenceForModel(kindObj), () => Promise.resolve(DefaultPage));\r\n  const ns = kindObj.namespaced ? namespace : undefined;\r\n\r\n  return <AsyncComponent loader={componentLoader} namespace={ns} selector={selector} kind={kindObj.crd ? referenceForModel(kindObj) : kindObj.kind} showTitle={false} autoFocus={false} fake={fake} />;\r\n});\r\n\r\nconst updateUrlParams = (k, v) => {\r\n  const url = new URL(window.location);\r\n  const sp = new URLSearchParams(window.location.search);\r\n  sp.set(k, v);\r\n  history.push(`${url.pathname}?${sp.toString()}${url.hash}`);\r\n};\r\n\r\nconst updateKind = kind => updateUrlParams('kind', encodeURIComponent(kind));\r\nconst updateTags = tags => updateUrlParams('q', tags.map(encodeURIComponent).join(','));\r\n\r\nclass GrafanaPage_ extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.setRef = ref => (this.ref = ref);\r\n    this.onSelectorChange = k => {\r\n      updateKind(k);\r\n      this.ref && this.ref.focus();\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { flags, location, namespace } = this.props;\r\n    let kind, q;\r\n\r\n    // if (flagPending(flags.OPENSHIFT) || flagPending(flags.PROJECTS_AVAILABLE)) {\r\n    //   return null;\r\n    // }\r\n\r\n    if (location.search) {\r\n      const sp = new URLSearchParams(window.location.search);\r\n      kind = sp.get('kind');\r\n      q = sp.get('q');\r\n    }\r\n\r\n    // Ensure that the \"kind\" route parameter is a valid resource kind ID\r\n    kind = kind ? decodeURIComponent(kind) : 'Service';\r\n    let ns = localStorage.getItem('bridge/last-namespace-name') === '#ALL_NS#' ? 'all-namespaces' : localStorage.getItem('bridge/last-namespace-name') ?? 'all-namespaces';\r\n    // const showGettingStarted = flags.OPENSHIFT && !flags.PROJECTS_AVAILABLE;\r\n    let url = `${document.location.origin}/api/grafana/d/k8s-namespace/?var-namespace=${ns}`;\r\n    // let url = `${document.location.origin}/api/grafana`;\r\n    return (\r\n      <React.Fragment>\r\n        <div>\r\n          <Helmet>\r\n            <title>GRAFANA</title>\r\n          </Helmet>\r\n          {/* <NavTitle title=\"GRAFANA\"></NavTitle> */}\r\n          <iframe style={{ width: '100%', height: '100vh', border: 0 }} src={url} target=\"_blank\" />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport const GrafanaPage = connectToFlags(FLAGS.OPENSHIFT, FLAGS.PROJECTS_AVAILABLE)(GrafanaPage_);\r\n\r\nGrafanaPage.propTypes = {\r\n  namespace: namespaceProptype,\r\n  location: PropTypes.object.isRequired,\r\n};\r\n","import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { withRouter } from 'react-router';\n\nconst WelcomePage = ({ history }) => {\n  localStorage.setItem('flag/first-time-login', true);\n  return (\n    <>\n      <Helmet>\n        <title>Audit</title>\n      </Helmet>\n      <div className=\"welcome__wrapper\">\n        <p className=\"welcome__title\">HyperCloud에 오신 것을 환영합니다!</p>\n        <p className=\"welcome__description\">HyperCloud는 애플리케이션을 빠르게 개발, 호스팅 및 확장하는 데 도움을 줍니다.</p>\n        <p className=\"welcome__description\">시작하기 위해 애플리케이션 용 네임스페이스를 만드세요.</p>\n        <p className=\"welcome__description\">\n          자세한 내용은{' '}\n          <a href=\"https://technet.tmaxsoft.com/upload/download/online/hypercloud/pver-20200918-000001/4.1-ko/welcome/overview_sub/index.html\" target=\"_blank\">\n            HyperCloud 매뉴얼<i className=\"fas fa-external-link-alt\"></i>\n          </a>\n          을 참조하세요.\n        </p>\n        <button\n          className=\"welcome__button\"\n          onClick={() => {\n            history.push('/k8s/cluster/namespaces');\n          }}\n        >\n          HyperCloud 시작하기\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default withRouter(WelcomePage);\n","export const statusModal = (props) =>\n    import('./status-modal' /* webpackChunkName: \"status-modal\" */).then((m) => m.statusModal(props));\n\nexport const claimModal = (props) =>\n    import('./claim-modal' /* webpackChunkName: \"claim-modal\" */).then((m) => m.claimModal(props));\n\nexport const scanningModal = (props) =>\n    import('./scanning-modal' /* webpackChunkName: \"scanning-modal\" */).then((m) => m.scanningModal(props));\n\nexport const configureClusterNodesModal = (props) =>\n    import('./configure-count-modal' /* webpackChunkName: \"configure-cluster-nodes-modal\" */).then((m) =>\n        m.configureClusterNodesModal(props),\n    );","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { ModalFooter } from '../../factory';\n\nexport const CustomModalSubmitFooter: React.SFC<CustomModalSubmitFooterProps> = ({\n  message,\n  errorMessage,\n  inProgress,\n  leftBtnText,\n  rightBtnText,\n  onClickLeft,\n  onClickRight\n}) => {\n\n  return (\n    <ModalFooter inProgress={inProgress} errorMessage={errorMessage} message={message}>\n      <ActionGroup className=\"pf-c-form pf-c-form__actions--right pf-c-form__group--no-top-margin\">\n          <Button type=\"submit\" variant=\"primary\" id=\"confirm-action\" onClick={onClickLeft}>\n            {leftBtnText}\n          </Button>\n          <Button type=\"submit\" variant=\"secondary\"  id=\"confirm-action\"onClick={onClickRight}>\n            {rightBtnText}\n          </Button>\n      </ActionGroup>\n    </ModalFooter>\n  );\n};\n\nexport type CustomModalSubmitFooterProps = {\n  message?: string;\n  errorMessage?: string;\n  inProgress: boolean;\n  leftBtnText:string;\n  rightBtnText:string;  \n  onClickLeft: () => void;\n  onClickRight: () => void;\n};\n","import React, { Component } from 'react';\nimport { Translation } from 'react-i18next';\nimport { createModalLauncher, ModalBody, ModalTitle } from '../../factory';\nimport { CustomModalSubmitFooter } from './modal';\n\nlet timerID = 0;\n\nclass NoticeExpirationModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: this.props.time,\n    };\n\n    this._cancel = props.cancel.bind(this);\n    this._logout = this._logout.bind(this);\n    this._extend = this._extend.bind(this);\n  }\n\n  componentDidMount() {\n    // 타이머 등록\n    timerID = window.setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    // 타이머 등록 해제\n    window.clearInterval(timerID);\n  }\n\n  tick() {\n    this.setState({ time: Math.floor(this.state.time - 1) });\n    if (Math.floor(this.state.time) === 0) {\n      this._logout();\n    }\n  }\n  _logout(e) {\n    e.preventDefault();\n    this.props.logout();\n    this._cancel();\n  }\n\n  _extend() {\n    this.props.tokenRefresh();\n    this._cancel();\n  }\n\n  render() {\n    return (\n      <Translation>\n        {t => (\n          <>\n            <form name=\"form\" className=\"modal-content\">\n              <ModalTitle>{t('COMMON:MSG_GNB_SESSION_9')}</ModalTitle>\n              <ModalBody>\n                <div className=\"form-group\">\n                  <label className=\"control-label\">\n                    {t('COMMON:MSG_GNB_SESSION_10', {\n                      count: Math.floor(this.state.time),\n                    })}\n                  </label>\n                </div>\n              </ModalBody>\n              <CustomModalSubmitFooter inProgress={false} leftBtnText={t('COMMON:MSG_GNB_SESSION_9')} rightBtnText={t('COMMON:MSG_GNB_ACCOUNT_2')} onClickLeft={this._extend} onClickRight={this._logout} />\n            </form>\n          </>\n        )}\n      </Translation>\n    );\n  }\n}\n\nexport const NoticeExpirationModal_ = createModalLauncher(props => <Translation>{t => <NoticeExpirationModal path=\"status\" title={t('COMMON:MSG_GNB_SESSION_9')} {...props} />}</Translation>);\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Dropdown, DropdownItem, DropdownToggle, Title } from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { RootState } from '../../../redux';\nimport { featureReducerName } from '../../../reducers/features';\nimport { getActiveCluster } from '../../../reducers/ui';\nimport * as UIActions from '../../../actions/ui';\nimport { coFetchJSON } from '../../../co-fetch';\nimport { getId, getUserGroup } from '../../../hypercloud/auth';\n\ntype clusterItemProps = {\n    displayName: string;\n    name: string;\n}\n\ntype StateProps = {\n    activeCluster: string;\n    setActiveCluster?: (name: string) => void;\n};\n\nexport type ClusterDropdownProps = {\n    onClusterSelected: () => void;\n};\n\nconst ClusterDropdown_: React.FC<ClusterDropdownProps & StateProps> = ({\n    setActiveCluster,\n    onClusterSelected,\n    activeCluster,\n}) => {\n    const [isClusterDropdownOpen, setClusterDropdownOpen] = React.useState(false);\n    const [clusters, setClusters] = React.useState([]);\n\n    const toggleClusterOpen = React.useCallback(() => {\n        setClusterDropdownOpen(!isClusterDropdownOpen);\n    }, [isClusterDropdownOpen]);\n\n    const onClusterSelect = React.useCallback(\n        (event: React.MouseEvent<HTMLLinkElement>, cluster): void => {\n            event.preventDefault();\n\n            if (cluster.name !== activeCluster) {\n                setActiveCluster(cluster.name);\n                window.location.reload()\n                // TODO: rerendering 고도화...\n            }\n\n            setClusterDropdownOpen(false);\n            onClusterSelected && onClusterSelected();\n        },\n        [activeCluster, onClusterSelected, setActiveCluster],\n    );\n\n    const renderClusterToggle = React.useCallback(\n        (name: string) => name ? (\n            <DropdownToggle\n                isOpen={isClusterDropdownOpen}\n                onToggle={toggleClusterOpen}\n                iconComponent={CaretDownIcon}\n                data-test-id=\"perspective-switcher-toggle\"\n            >\n                <Title size=\"md\">\n                    {clusters.find(cl => cl.name === name)?.displayName ?? name}\n                </Title>\n            </DropdownToggle>) : <LoadingInline />\n        ,\n        [isClusterDropdownOpen, toggleClusterOpen, clusters],\n    );\n\n    const getClusterItems = React.useCallback(\n        (clusters) => {\n            let clusterItmes = [];\n            clusters.forEach((nextCluster) => (\n                clusterItmes.push(\n                    <DropdownItem\n                        key={nextCluster.name}\n                        onClick={(event: React.MouseEvent<HTMLLinkElement>) =>\n                            onClusterSelect(event, nextCluster)\n                        }\n                        isHovered={(nextCluster.name) === activeCluster}\n                        component=\"button\"\n                    >\n                        <Title size=\"md\">\n                            {nextCluster.displayName}\n                        </Title>\n                    </DropdownItem>\n                )\n            ));\n            return clusterItmes;\n        },\n        [activeCluster, onClusterSelect],\n    );\n\n    React.useEffect(() => {\n        if (clusters.length == 0 || isClusterDropdownOpen) {\n            coFetchJSON(`/api/multi-hypercloud/clustermanagers/access?userId=${getId()}${getUserGroup()}`, 'GET')\n            .then((result) => result.items)\n            .then((res) => {\n                const clusterList: clusterItemProps[] = res.reduce((list, cluster)=> {\n                    if(cluster.status.ready) {\n                        list.push({displayName: cluster.fakeMetadata.fakename, name: cluster.metadata.name});\n                    }\n                    return list;\n                }, []);\n              \n                setClusters(clusterList);\n\n                const hasCluster = activeCluster && clusterList.find(cl => cl.name === activeCluster);\n\n                if (!hasCluster) {\n                    setActiveCluster(clusterList[0]?.name);\n                }\n\n            });\n        }\n    }, [isClusterDropdownOpen]);\n\n    return (\n        <Dropdown\n            isOpen={isClusterDropdownOpen}\n            toggle={renderClusterToggle(activeCluster)}\n            dropdownItems={getClusterItems(clusters)}\n            data-test-id=\"perspective-switcher-menu\"\n        />\n    );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n    activeCluster: getActiveCluster(state),\n});\n\nexport default connect<StateProps, {}, ClusterDropdownProps, RootState>(\n    mapStateToProps,\n    { setActiveCluster: UIActions.setActiveCluster },\n    null,\n    {\n        areStatesEqual: (next, prev) =>\n            next[featureReducerName] === prev[featureReducerName] &&\n            getActiveCluster(next) === getActiveCluster(prev),\n    },\n)(ClusterDropdown_);\n","import * as React from 'react';\n\nimport { Translation } from 'react-i18next';\n// import { GroupModel, UserModel } from '../../../models';\n\n// import { referenceForModel } from '../../../module/k8s';\nimport { HrefLink, ResourceNSLink, ResourceClusterLink } from '../../nav/items';\n// import { AuthAdminLink } from './items';\nimport { NavSection } from '../../nav/section';\n\n// Wrap `NavItemSeparator` so we can use `required` without prop type errors.\n\nconst searchStartsWith = ['search'];\nconst rolesStartsWith = ['roles', 'clusterroles'];\nconst rolebindingsStartsWith = ['rolebindings', 'clusterrolebindings'];\nconst quotaStartsWith = ['resourcequotas', 'clusterresourcequotas'];\n\nconst HyperCloudNav = () => (\n  <Translation>\n    {t => (\n      <>\n        <NavSection title={t('COMMON:MSG_LNB_MENU_1')}>\n          <HrefLink href=\"/dashboards\" activePath=\"/dashboards/\" name={t('COMMON:MSG_LNB_MENU_2')} />\n          <HrefLink href=\"/search\" name={t('COMMON:MSG_LNB_MENU_4')} startsWith={searchStartsWith} />\n          <ResourceNSLink resource=\"events\" name={t('COMMON:MSG_LNB_MENU_6')} />\n        </NavSection>\n        <NavSection title={t('COMMON:MSG_LNB_MENU_22')}>\n          <ResourceNSLink resource=\"pods\" name={t('COMMON:MSG_LNB_MENU_23')} />\n          <ResourceNSLink resource=\"deployments\" name={t('COMMON:MSG_LNB_MENU_24')} />\n          <ResourceNSLink resource=\"replicasets\" name={t('COMMON:MSG_LNB_MENU_31')} />\n          <ResourceNSLink resource=\"horizontalpodautoscalers\" name={t('COMMON:MSG_LNB_MENU_32')} />\n          <ResourceNSLink resource=\"daemonsets\" name={t('COMMON:MSG_LNB_MENU_30')} />\n          <ResourceNSLink resource=\"statefulsets\" name={t('COMMON:MSG_LNB_MENU_25')} />\n          <ResourceNSLink resource=\"configmaps\" name={t('COMMON:MSG_LNB_MENU_27')} />\n          <ResourceNSLink resource=\"secrets\" name={t('COMMON:MSG_LNB_MENU_26')} />\n          <ResourceNSLink resource=\"jobs\" name={t('COMMON:MSG_LNB_MENU_29')} />\n          <ResourceNSLink resource=\"cronjobs\" name={t('COMMON:MSG_LNB_MENU_28')} />\n        </NavSection>\n        <NavSection title={t('COMMON:MSG_LNB_MENU_46')}>\n          <ResourceNSLink resource=\"services\" name={t('COMMON:MSG_LNB_MENU_47')} />\n          <ResourceNSLink resource=\"ingresses\" name={t('COMMON:MSG_LNB_MENU_48')} />\n          <ResourceNSLink resource=\"networkpolicies\" name={t('COMMON:MSG_LNB_MENU_49')} />\n        </NavSection>\n        <NavSection title={t('COMMON:MSG_LNB_MENU_50')}>\n          <ResourceClusterLink resource=\"storageclasses\" name={t('COMMON:MSG_LNB_MENU_53')} />\n          <ResourceNSLink resource=\"persistentvolumeclaims\" name={t('COMMON:MSG_LNB_MENU_52')} />\n          <ResourceClusterLink resource=\"persistentvolumes\" name={t('COMMON:MSG_LNB_MENU_51')} />\n        </NavSection>\n        <NavSection title={t('COMMON:MSG_LNB_MENU_79')}>\n          <ResourceClusterLink resource=\"namespaces\" name={t('COMMON:MSG_LNB_MENU_3')} />\n          <ResourceNSLink resource=\"limitranges\" name={t('COMMON:MSG_LNB_MENU_81')} />\n          <ResourceNSLink resource=\"resourcequotas\" name={t('COMMON:MSG_LNB_MENU_80')} startsWith={quotaStartsWith} />\n          <ResourceClusterLink resource=\"customresourcedefinitions\" name={t('COMMON:MSG_LNB_MENU_82')} />\n        </NavSection>\n        <NavSection title={t('COMMON:MSG_LNB_MENU_72')}>\n          <ResourceClusterLink resource=\"nodes\" name={t('COMMON:MSG_LNB_MENU_100')} />\n        </NavSection>\n        <NavSection title={t('COMMON:MSG_LNB_MENU_73')}>\n          <ResourceNSLink resource=\"roles\" name={t('COMMON:MSG_LNB_MENU_75')} startsWith={rolesStartsWith} />\n          <ResourceNSLink resource=\"rolebindings\" name={t('COMMON:MSG_LNB_MENU_76')} startsWith={rolebindingsStartsWith} />\n          <ResourceNSLink resource=\"serviceaccounts\" name={t('COMMON:MSG_LNB_MENU_74')} />\n          <ResourceClusterLink resource=\"podsecuritypolicies\" name={t('COMMON:MSG_LNB_MENU_78')} />\n        </NavSection>\n      </>\n    )}\n  </Translation>\n);\n\nexport default HyperCloudNav;\n","import * as React from 'react';\n\nimport { Translation } from 'react-i18next';\n// import { GroupModel, UserModel } from '../../../models';\n\n// import { referenceForModel } from '../../../module/k8s';\nimport { HrefLink, ResourceNSLink, ResourceClusterLink, NewTabLink } from '../../nav/items';\n// import { AuthAdminLink } from './items';\nimport { NavSection } from '../../nav/section';\n\n// Wrap `NavItemSeparator` so we can use `required` without prop type errors.\n\nconst searchStartsWith = ['search'];\nconst rolesStartsWith = ['roles', 'clusterroles'];\nconst rolebindingsStartsWith = ['rolebindings', 'clusterrolebindings'];\nconst quotaStartsWith = ['resourcequotas', 'clusterresourcequotas'];\n\nconst MasterNav = () => (\n  <Translation>\n    {t => (\n      <>\n        <NavSection title={t('COMMON:MSG_LNB_MENU_1')}>\n          <HrefLink href=\"/dashboards\" activePath=\"/dashboards/\" name={t('COMMON:MSG_LNB_MENU_90')} />\n          <HrefLink href=\"/search\" name={t('COMMON:MSG_LNB_MENU_4')} startsWith={searchStartsWith} />\n          <ResourceNSLink resource=\"audits\" name={t('COMMON:MSG_LNB_MENU_5')} />\n          <ResourceNSLink resource=\"events\" name={t('COMMON:MSG_LNB_MENU_6')} />\n          {/* <HrefLink href=\"/grafana\" name=\"Grafana\" />\n          <HrefLink href=\"/kibana\" name=\"Kibana\" /> */}\n          <NewTabLink name={t('COMMON:MSG_LNB_MENU_98')} type=\"grafana\" />\n          <NewTabLink name={t('COMMON:MSG_LNB_MENU_99')} type=\"kibana\" />\n          <NewTabLink name=\"Managed GitLab\" type=\"git\" />\n        </NavSection>\n        <NavSection title=\"Operators\" />\n        <NavSection title={t('COMMON:MSG_LNB_MENU_10')}>\n          <ResourceNSLink resource=\"servicebrokers\" name={t('COMMON:MSG_LNB_MENU_11')} />\n          <ResourceNSLink resource=\"serviceclasses\" name={t('COMMON:MSG_LNB_MENU_12')} />\n          {/* <ResourceNSLink resource=\"serviceplans\" name=\"Service Plan\" /> */}\n          <ResourceClusterLink resource=\"clusterservicebrokers\" name={t('COMMON:MSG_LNB_MENU_14')} />\n          <ResourceClusterLink resource=\"clusterserviceclasses\" name={t('COMMON:MSG_LNB_MENU_15')} />\n          {/* <ResourceClusterLink resource=\"clusterserviceplans\" name=\"Cluster Service Plan\" /> */}\n          <ResourceNSLink resource=\"serviceinstances\" name={t('COMMON:MSG_LNB_MENU_17')} />\n          <ResourceNSLink resource=\"servicebindings\" name={t('COMMON:MSG_LNB_MENU_18')} />\n          <ResourceNSLink resource=\"catalogserviceclaims\" name={t('COMMON:MSG_LNB_MENU_19')} />\n          <ResourceNSLink resource=\"templates\" name={t('COMMON:MSG_LNB_MENU_20')} />\n          <ResourceClusterLink resource=\"clustertemplates\" name={t('COMMON:MSG_LNB_MENU_104')} />\n          <ResourceNSLink resource=\"templateinstances\" name={t('COMMON:MSG_LNB_MENU_21')} />\n        </NavSection>\n        <NavSection title={t('COMMON:MSG_LNB_MENU_22')}>\n          <ResourceNSLink resource=\"pods\" name={t('COMMON:MSG_LNB_MENU_23')} />\n          <ResourceNSLink resource=\"deployments\" name={t('COMMON:MSG_LNB_MENU_24')} />\n          <ResourceNSLink resource=\"replicasets\" name={t('COMMON:MSG_LNB_MENU_31')} />\n          <ResourceNSLink resource=\"horizontalpodautoscalers\" name={t('COMMON:MSG_LNB_MENU_32')} />\n          <ResourceNSLink resource=\"daemonsets\" name={t('COMMON:MSG_LNB_MENU_30')} />\n          <ResourceNSLink resource=\"statefulsets\" name={t('COMMON:MSG_LNB_MENU_25')} />\n          {/* <ResourceNSLink resource=\"virtualmachines\" name={t('COMMON:MSG_LNB_MENU_33')} />\n          <ResourceNSLink resource=\"virtualmachineinstances\" name={t('COMMON:MSG_LNB_MENU_34')} /> */}\n          <ResourceNSLink resource=\"configmaps\" name={t('COMMON:MSG_LNB_MENU_27')} />\n          <ResourceNSLink resource=\"secrets\" name={t('COMMON:MSG_LNB_MENU_26')} />\n          <ResourceNSLink resource=\"jobs\" name={t('COMMON:MSG_LNB_MENU_29')} />\n          <ResourceNSLink resource=\"cronjobs\" name={t('COMMON:MSG_LNB_MENU_28')} />\n        </NavSection>\n        <NavSection title={t('COMMON:MSG_LNB_MENU_35')}>\n          <ResourceNSLink resource=\"virtualservices\" name={t('COMMON:MSG_LNB_MENU_36')} />\n          <ResourceNSLink resource=\"destinationrules\" name={t('COMMON:MSG_LNB_MENU_37')} />\n          <ResourceNSLink resource=\"envoyfilters\" name={t('COMMON:MSG_LNB_MENU_38')} />\n          <ResourceNSLink resource=\"gateways\" name={t('COMMON:MSG_LNB_MENU_39')} />\n          <ResourceNSLink resource=\"sidecars\" name={t('COMMON:MSG_LNB_MENU_40')} />\n          <ResourceNSLink resource=\"serviceentries\" name={t('COMMON:MSG_LNB_MENU_41')} />\n          <ResourceNSLink resource=\"requestauthentications\" name={t('COMMON:MSG_LNB_MENU_42')} />\n          <ResourceNSLink resource=\"peerauthentications\" name={t('COMMON:MSG_LNB_MENU_43')} />\n          <ResourceNSLink resource=\"authorizationpolicies\" name={t('COMMON:MSG_LNB_MENU_44')} />\n          {/* <HrefLink href=\"/kiali\" name={t('COMMON:MSG_LNB_MENU_45')} /> */}\n          <NewTabLink name={t('COMMON:MSG_LNB_MENU_45')} type=\"kiali\" />\n        </NavSection>\n        <NavSection title={t('COMMON:MSG_LNB_MENU_46')}>\n          <ResourceNSLink resource=\"services\" name={t('COMMON:MSG_LNB_MENU_47')} />\n          <ResourceNSLink resource=\"ingresses\" name={t('COMMON:MSG_LNB_MENU_48')} />\n          <ResourceNSLink resource=\"networkpolicies\" name={t('COMMON:MSG_LNB_MENU_49')} />\n        </NavSection>\n        <NavSection title={t('COMMON:MSG_LNB_MENU_50')}>\n          <ResourceClusterLink resource=\"storageclasses\" name={t('COMMON:MSG_LNB_MENU_53')} />\n          {/* <ResourceNSLink resource=\"datavolumes\" name={t('COMMON:MSG_LNB_MENU_54')} /> */}\n          <ResourceNSLink resource=\"persistentvolumeclaims\" name={t('COMMON:MSG_LNB_MENU_52')} />\n          <ResourceClusterLink resource=\"persistentvolumes\" name={t('COMMON:MSG_LNB_MENU_51')} />\n        </NavSection>\n        <NavSection title={t('COMMON:MSG_LNB_MENU_56')}>\n          <ResourceNSLink resource=\"tasks\" name={t('COMMON:MSG_LNB_MENU_57')} />\n          <ResourceClusterLink resource=\"clustertasks\" name={t('COMMON:MSG_LNB_MENU_94')} />\n          <ResourceNSLink resource=\"taskruns\" name={t('COMMON:MSG_LNB_MENU_58')} />\n          <ResourceNSLink resource=\"pipelines\" name={t('COMMON:MSG_LNB_MENU_59')} />\n          <ResourceNSLink resource=\"pipelineruns\" name={t('COMMON:MSG_LNB_MENU_60')} />\n          <ResourceNSLink resource=\"approvals\" name={t('COMMON:MSG_LNB_MENU_61')} />\n          <ResourceNSLink resource=\"pipelineresources\" name={t('COMMON:MSG_LNB_MENU_62')} />\n          <ResourceNSLink resource=\"integrationjobs\" name={t('COMMON:MSG_LNB_MENU_185')} />\n          <ResourceNSLink resource=\"integrationconfigs\" name={t('COMMON:MSG_LNB_MENU_183')} />\n        </NavSection>\n        <NavSection title=\"AI DevOps\">\n          <ResourceNSLink resource=\"notebooks\" name=\"Notebook\" />\n          <ResourceNSLink resource=\"experiments\" name=\"Experiment\" />\n          <ResourceNSLink resource=\"trainingjobs\" name=\"TrainingJob\" />\n          <ResourceNSLink resource=\"inferenceservices\" name=\"InferenceService\" />\n          <ResourceNSLink resource=\"workflowtemplates\" name=\"WorkflowTemplate\" />\n          <ResourceNSLink resource=\"workflows\" name=\"Workflow\" />\n        </NavSection>\n        <NavSection title={t('COMMON:MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_3')}>\n          <ResourceNSLink resource=\"registries\" name={t('COMMON:MSG_LNB_MENU_187')} />\n          <ResourceNSLink resource=\"externalregistries\" name={t('COMMON:MSG_LNB_MENU_189')} />\n          <ResourceClusterLink resource=\"imagesigners\" name={t('COMMON:MSG_LNB_MENU_91')} />\n          <ResourceNSLink resource=\"imagesignrequests\" name={t('COMMON:MSG_LNB_MENU_92')} />\n          <ResourceNSLink resource=\"imagescanrequests\" name={t('COMMON:MSG_LNB_MENU_95')} />\n          <ResourceNSLink resource=\"signerpolicies\" name={t('COMMON:MSG_LNB_MENU_96')} />\n          <ResourceNSLink resource=\"imagereplicates\" name={t('COMMON:MSG_LNB_MENU_93')} />\n        </NavSection>\n        <NavSection title={t('COMMON:MSG_LNB_MENU_79')}>\n          <ResourceClusterLink resource=\"namespaces\" name={t('COMMON:MSG_LNB_MENU_3')} />\n          <ResourceClusterLink resource=\"namespaceclaims\" name={t('COMMON:MSG_LNB_MENU_103')} />\n          <ResourceNSLink resource=\"limitranges\" name={t('COMMON:MSG_LNB_MENU_81')} />\n          <ResourceNSLink resource=\"resourcequotas\" name={t('COMMON:MSG_LNB_MENU_80')} startsWith={quotaStartsWith} />\n          <ResourceNSLink resource=\"resourcequotaclaims\" name={t('COMMON:MSG_LNB_MENU_102')} startsWith={quotaStartsWith} />\n          <ResourceClusterLink resource=\"customresourcedefinitions\" name={t('COMMON:MSG_LNB_MENU_82')} />\n        </NavSection>\n        <NavSection title={t('COMMON:MSG_LNB_MENU_72')}>\n          <ResourceClusterLink resource=\"nodes\" name={t('COMMON:MSG_LNB_MENU_100')} />\n        </NavSection>\n        <NavSection title={t('COMMON:MSG_LNB_MENU_73')}>\n          <ResourceNSLink resource=\"roles\" name={t('COMMON:MSG_LNB_MENU_75')} startsWith={rolesStartsWith} />\n          <ResourceNSLink resource=\"rolebindings\" name={t('COMMON:MSG_LNB_MENU_76')} startsWith={rolebindingsStartsWith} />\n          <ResourceNSLink resource=\"rolebindingclaims\" name={t('COMMON:MSG_LNB_MENU_101')} startsWith={rolebindingsStartsWith} />\n          <ResourceNSLink resource=\"serviceaccounts\" name={t('COMMON:MSG_LNB_MENU_74')} />\n          <ResourceClusterLink resource=\"podsecuritypolicies\" name={t('COMMON:MSG_LNB_MENU_78')} />\n          {/* <AuthAdminLink resource={referenceForModel(UserModel)} name=\"Users\" />\n          <AuthAdminLink resource={referenceForModel(GroupModel)} name=\"User Groups\" /> */}\n        </NavSection>\n      </>\n    )}\n  </Translation>\n);\n\nexport default MasterNav;\n","import * as React from 'react';\nimport { NavItemSeparator, NavGroup } from '@patternfly/react-core';\n// import { referenceForModel } from '../../module/k8s';\n// import { ExternalLink, HrefLink, ResourceNSLink, ResourceClusterLink } from './items';\nimport { ResourceNSLink, ResourceClusterLink } from '../../nav/items';\nimport { NavSection } from '../../nav/section';\nimport { Translation } from 'react-i18next';\n// import { ALL_NAMESPACES_KEY } from '../../../../packages/console-shared/src/constants/common';\n\ntype SeparatorProps = {\n  name: string;\n  required?: string;\n};\n\nconst Separator: React.FC<SeparatorProps> = ({ name }) => <NavItemSeparator name={name} />;\n\nconst MulticlusterNav = () => (\n  <Translation>\n    {t => (\n      <>\n        <NavSection title={t('COMMON:MSG_LNB_MENU_105')}>\n          <ResourceNSLink resource=\"clusterclaims\" name={t('COMMON:MSG_LNB_MENU_105')} />\n        </NavSection>\n\n        <NavSection title={t('COMMON:MSG_LNB_MENU_84')}>\n          <ResourceNSLink resource=\"clustermanagers\" name={t('COMMON:MSG_LNB_MENU_84')} />\n        </NavSection>\n\n        {/* <ResourceClusterLink resource=\"clustergroups\" name=\"Cluster Groups\" /> */}\n        <NavSection title={t('COMMON:MSG_LNB_MENU_86')}>\n          <NavGroup title=\"Workloads\">\n            <ResourceClusterLink resource=\"federatedpods\" name=\"Pods\" />\n            <ResourceClusterLink resource=\"federateddeployments\" name=\"Deployments\" />\n            <ResourceClusterLink resource=\"federatedreplicasets\" name=\"Replica Sets\" />\n            <ResourceClusterLink resource=\"federatedhorizontalpodautoscalers\" name=\"Horizontal Pod Autoscalers\" />\n            <ResourceClusterLink resource=\"federateddaemonsets\" name=\"Daemon Sets\" />\n            <ResourceClusterLink resource=\"federatedstatefulsets\" name=\"Stateful Sets\" />\n            <ResourceClusterLink resource=\"federatedconfigmaps\" name=\"Config Maps\" />\n            <ResourceClusterLink resource=\"federatedsecrets\" name=\"Secrets\" />\n            <ResourceClusterLink resource=\"federatedjobs\" name=\"Jobs\" />\n            <ResourceClusterLink resource=\"federatedcronjobs\" name=\"Cron Jobs\" />\n          </NavGroup>\n          <Separator name=\"WorkloadsSeparator\" />\n          <NavGroup title={t('COMMON:MSG_LNB_MENU_46')}>\n            <ResourceClusterLink resource=\"federatedingresses\" name={t('COMMON:MSG_LNB_MENU_48')} />\n            <ResourceClusterLink resource=\"federatedservices\" name={t('COMMON:MSG_LNB_MENU_47')} />\n          </NavGroup>\n          <Separator name=\"NetworksSeparator\" />\n          <NavGroup title={t('COMMON:MSG_LNB_MENU_79')}>\n            <ResourceClusterLink resource=\"federatednamespaces\" name={t('COMMON:MSG_LNB_MENU_3')} />\n          </NavGroup>\n        </NavSection>\n        {/* <NavSection title=\"Image\">\n      <ResourceClusterLink resource=\"federatedregistries\" name=\"Registry\" />\n      <ResourceClusterLink resource=\"federatedimagesigners\" name=\"Image Signer\" />\n      <ResourceClusterLink resource=\"federatedimagesignrequests\" name=\"Image Sign Request\" />\n      <ResourceClusterLink resource=\"federatedimagetransfers\" name=\"Image Transfer\" />\n    </NavSection> */}\n      </>\n    )}\n  </Translation>\n);\n\nexport default MulticlusterNav;\n","import { Map as ImmutableMap } from 'immutable';\nimport { referenceForModel, GroupVersionKind } from '../../module/k8s';\nimport {\n  PodSecurityPolicyModel,\n  NamespaceClaimModel,\n  ResourceQuotaClaimModel,\n  RoleBindingClaimModel,\n  ClusterManagerModel,\n  FederatedConfigMapModel,\n  FederatedDeploymentModel,\n  FederatedIngressModel,\n  FederatedNamespaceModel,\n  FederatedJobModel,\n  FederatedReplicaSetModel,\n  FederatedSecretModel,\n  FederatedServiceModel,\n  FederatedPodModel,\n  FederatedHPAModel,\n  FederatedDaemonSetModel,\n  FederatedStatefulSetModel,\n  FederatedCronJobModel,\n  VirtualMachineModel,\n  VirtualMachineInstanceModel,\n  VirtualServiceModel,\n  DestinationRuleModel,\n  EnvoyFilterModel,\n  GatewayModel,\n  SidecarModel,\n  ServiceEntryModel,\n  RequestAuthenticationModel,\n  PeerAuthenticationModel,\n  AuthorizationPolicyModel,\n  DataVolumeModel,\n  ServiceBrokerModel,\n  ServiceClassModel,\n  ServicePlanModel,\n  ClusterServiceBrokerModel,\n  ClusterServiceClassModel,\n  ClusterServicePlanModel,\n  ServiceInstanceModel,\n  ServiceBindingModel,\n  CatalogServiceClaimModel,\n  ClusterTemplateModel,\n  TemplateModel,\n  TemplateInstanceModel,\n  TaskModel,\n  ClusterTaskModel,\n  TaskRunModel,\n  PipelineModel,\n  PipelineRunModel,\n  ApprovalModel,\n  PipelineResourceModel,\n  RegistryModel,\n  ExternalRegistryModel,\n  ImageSignerModel,\n  ImageSignRequestModel,\n  ImageScanRequestModel,\n  SignerPolicyModel,\n  ImageReplicateModel,\n  IntegrationConfigModel,\n  IntegrationJobModel,\n  ClusterClaimModel,\n  RepositoryModel,\n  NotebookModel,\n  ExperimentModel,\n  TrainingJobModel,\n  TFJobModel,\n  PyTorchJobModel,\n  InferenceServiceModel,\n  WorkflowModel,\n  WorkflowTemplateModel\n} from '../../models';\n\ntype ResourceMapKey = GroupVersionKind | string;\ntype ResourceMapValue = () => Promise<React.ComponentType<any>>;\n\nexport const hyperCloudDetailsPages = ImmutableMap<ResourceMapKey, ResourceMapValue>()\n  .set(referenceForModel(PodSecurityPolicyModel), () => import('./pod-security-policy' /* webpackChunkName: \"podsecuritypolicy\" */).then(m => m.PodSecurityPoliciesDetailsPage))\n  .set(referenceForModel(ResourceQuotaClaimModel), () => import('./resource-quota-claim' /* webpackChunkName: \"resourcequotaclaim\" */).then(m => m.ResourceQuotaClaimsDetailsPage))\n  .set(referenceForModel(RoleBindingClaimModel), () => import('./role-binding-claim' /* webpackChunkName: \"rolebindingclaim\" */).then(m => m.RoleBindingClaimsDetailsPage))\n  .set(referenceForModel(NamespaceClaimModel), () => import('./namespace-claim' /* webpackChunkName: \"namespaceclaim\" */).then(m => m.NamespaceClaimsDetailsPage))\n  .set(referenceForModel(ClusterManagerModel), () => import('./cluster' /* webpackChunkName: \"cluster\" */).then(m => m.ClustersDetailsPage))\n  .set(referenceForModel(ClusterClaimModel), () => import('./cluster-claim' /* webpackChunkName: \"cluster-claim\" */).then(m => m.ClusterClaimsDetailsPage))\n  .set(referenceForModel(FederatedConfigMapModel), () => import('./federated-config-map' /* webpackChunkName: \"configmap\" */).then(m => m.FederatedConfigMapsDetailsPage))\n  .set(referenceForModel(FederatedDeploymentModel), () => import('./federated-deployment' /* webpackChunkName: \"deployment\" */).then(m => m.FederatedDeploymentsDetailsPage))\n  .set(referenceForModel(FederatedIngressModel), () => import('./federated-ingress' /* webpackChunkName: \"ingress\" */).then(m => m.FederatedIngressesDetailsPage))\n  .set(referenceForModel(FederatedNamespaceModel), () => import('./federated-namespace' /* webpackChunkName: \"namespace\" */).then(m => m.FederatedNamespacesDetailsPage))\n  .set(referenceForModel(FederatedJobModel), () => import('./federated-job' /* webpackChunkName: \"job\" */).then(m => m.FederatedJobsDetailsPage))\n  .set(referenceForModel(FederatedReplicaSetModel), () => import('./federated-replica-set' /* webpackChunkName: \"replica-set\" */).then(m => m.FederatedReplicaSetsDetailsPage))\n  .set(referenceForModel(FederatedSecretModel), () => import('./federated-secret' /* webpackChunkName: \"secret\" */).then(m => m.FederatedSecretsDetailsPage))\n  .set(referenceForModel(FederatedServiceModel), () => import('./federated-service' /* webpackChunkName: \"service\" */).then(m => m.FederatedServicesDetailsPage))\n  .set(referenceForModel(FederatedPodModel), () => import('./federated-pod' /* webpackChunkName: \"pod\" */).then(m => m.FederatedPodsDetailsPage))\n  .set(referenceForModel(FederatedHPAModel), () => import('./federated-horizontalpodautoscaler' /* webpackChunkName: \"horizontalpodautoscaler\" */).then(m => m.FederatedHPAsDetailsPage))\n  .set(referenceForModel(FederatedDaemonSetModel), () => import('./federated-daemonset' /* webpackChunkName: \"daemonset\" */).then(m => m.FederatedDaemonSetsDetailsPage))\n  .set(referenceForModel(FederatedStatefulSetModel), () => import('./federated-statefulset' /* webpackChunkName: \"statefulset\" */).then(m => m.FederatedStatefulSetsDetailsPage))\n  .set(referenceForModel(FederatedCronJobModel), () => import('./federated-cronjob' /* webpackChunkName: \"cronjob\" */).then(m => m.FederatedCronJobsDetailsPage))\n  .set(referenceForModel(TaskModel), () => import('./task' /* webpackChunkName: \"task\" */).then(m => m.TasksDetailsPage))\n  .set(referenceForModel(ClusterTaskModel), () => import('./cluster-task' /* webpackChunkName: \"cluster-task\" */).then(m => m.ClusterTasksDetailsPage))\n  .set(referenceForModel(TaskRunModel), () => import('./task-run' /* webpackChunkName: \"task-run\" */).then(m => m.TaskRunsDetailsPage))\n  .set(referenceForModel(PipelineModel), () => import('./pipeline' /* webpackChunkName: \"pipeline\" */).then(m => m.PipelinesDetailsPage))\n  .set(referenceForModel(PipelineRunModel), () => import('./pipeline-run' /* webpackChunkName: \"pipeline-run\" */).then(m => m.PipelineRunsDetailsPage))\n  .set(referenceForModel(ApprovalModel), () => import('./pipeline-approval' /* webpackChunkName: \"pipeline-approval\" */).then(m => m.PipelineApprovalsDetailsPage))\n  .set(referenceForModel(PipelineResourceModel), () => import('./pipeline-resource' /* webpackChunkName: \"pipeline-resource\" */).then(m => m.PipelineResourcesDetailsPage))\n  .set(referenceForModel(IntegrationConfigModel), () => import('./integration-config' /* webpackChunkName: \"integration-config\" */).then(m => m.IntegrationConfigsDetailsPage))\n  .set(referenceForModel(IntegrationJobModel), () => import('./integration-job' /* webpackChunkName: \"integration-job\" */).then(m => m.IntegrationJobsDetailsPage))\n  .set(referenceForModel(VirtualMachineModel), () => import('./virtual-machine' /* webpackChunkName: \"virtual-machine\" */).then(m => m.VirtualMachinesDetailsPage))\n  .set(referenceForModel(VirtualMachineInstanceModel), () => import('./virtual-machine-instance' /* webpackChunkName: \"virtual-machine-instance\" */).then(m => m.VirtualMachineInstancesDetailsPage))\n  .set(referenceForModel(VirtualServiceModel), () => import('./virtual-service' /* webpackChunkName: \"virtual-service\" */).then(m => m.VirtualServicesDetailsPage))\n  .set(referenceForModel(DestinationRuleModel), () => import('./destination-rule' /* webpackChunkName: \"destination-rule\" */).then(m => m.DestinationRulesDetailsPage))\n  .set(referenceForModel(EnvoyFilterModel), () => import('./envoy-filter' /* webpackChunkName: \"envoy-filter\" */).then(m => m.EnvoyFiltersDetailsPage))\n  .set(referenceForModel(GatewayModel), () => import('./gateway' /* webpackChunkName: \"gateway\" */).then(m => m.GatewaysDetailsPage))\n  .set(referenceForModel(SidecarModel), () => import('./sidecar' /* webpackChunkName: \"sidecar\" */).then(m => m.SidecarsDetailsPage))\n  .set(referenceForModel(ServiceEntryModel), () => import('./service-entry' /* webpackChunkName: \"service-entry\" */).then(m => m.ServiceEntriesDetailsPage))\n  .set(referenceForModel(RequestAuthenticationModel), () => import('./request-authentication' /* webpackChunkName: \"request-authentication\" */).then(m => m.RequestAuthenticationsDetailsPage))\n  .set(referenceForModel(PeerAuthenticationModel), () => import('./peer-authentication' /* webpackChunkName: \"peer-authentication\" */).then(m => m.PeerAuthenticationsDetailsPage))\n  .set(referenceForModel(AuthorizationPolicyModel), () => import('./authentication-policy' /* webpackChunkName: \"authentication-policy\" */).then(m => m.AuthorizationPoliciesDetailsPage))\n  .set(referenceForModel(DataVolumeModel), () => import('./data-volume' /* webpackChunkName: \"data-volume\" */).then(m => m.DataVolumesDetailsPage))\n  .set(referenceForModel(ServiceBrokerModel), () => import('./service-broker' /* webpackChunkName: \"servicebroker\" */).then(m => m.ServiceBrokersDetailsPage))\n  .set(referenceForModel(ServiceClassModel), () => import('./service-class' /* webpackChunkName: \"serviceclass\" */).then(m => m.ServiceClassesDetailsPage))\n  .set(referenceForModel(ServicePlanModel), () => import('./service-plan' /* webpackChunkName: \"serviceplan\" */).then(m => m.ServicePlansDetailsPage))\n  .set(referenceForModel(ClusterServiceBrokerModel), () => import('./cluster-service-broker' /* webpackChunkName: \"clusterservicebroker\" */).then(m => m.ClusterServiceBrokersDetailsPage))\n  .set(referenceForModel(ClusterServiceClassModel), () => import('./cluster-service-class' /* webpackChunkName: \"clusterserviceclass\" */).then(m => m.ClusterServiceClassesDetailsPage))\n  .set(referenceForModel(ClusterServicePlanModel), () => import('./cluster-service-plan' /* webpackChunkName: \"clusterserviceplan\" */).then(m => m.ClusterServicePlansDetailsPage))\n  .set(referenceForModel(ServiceInstanceModel), () => import('./service-instance' /* webpackChunkName: \"serviceinstance\" */).then(m => m.ServiceInstancesDetailsPage))\n  .set(referenceForModel(ServiceBindingModel), () => import('./service-binding' /* webpackChunkName: \"servicebinding\" */).then(m => m.ServiceBindingsDetailsPage))\n  .set(referenceForModel(CatalogServiceClaimModel), () => import('./catalog-service-claim' /* webpackChunkName: \"catalogserviceclaim\" */).then(m => m.CatalogServiceClaimsDetailsPage))\n  .set(referenceForModel(ClusterTemplateModel), () => import('./cluster-template' /* webpackChunkName: \"clustertemplate\" */).then(m => m.ClusterTemplatesDetailsPage))\n  .set(referenceForModel(TemplateModel), () => import('./template' /* webpackChunkName: \"template\" */).then(m => m.TemplatesDetailsPage))\n  .set(referenceForModel(TemplateInstanceModel), () => import('./template-instance' /* webpackChunkName: \"templateinstance\" */).then(m => m.TemplateInstancesDetailsPage))\n  .set(referenceForModel(RegistryModel), () => import('./registry' /* webpackChunkName: \"registry\" */).then(m => m.RegistriesDetailsPage))\n  .set(referenceForModel(ExternalRegistryModel), () => import('./external-registry' /* webpackChunkName: \"external-registry\" */).then(m => m.ExternalRegistriesDetailsPage))\n  .set(referenceForModel(RepositoryModel), () => import('./repository' /* webpackChunkName: \"repository\" */).then(m => m.RepositoriesDetailsPage))\n  .set(referenceForModel(ImageSignerModel), () => import('./image-signer' /* webpackChunkName: \"image-signer\" */).then(m => m.ImageSignersDetailsPage))\n  .set(referenceForModel(ImageSignRequestModel), () => import('./image-sign-request' /* webpackChunkName: \"image-sign-request\" */).then(m => m.ImageSignRequestsDetailsPage))\n  .set(referenceForModel(SignerPolicyModel), () => import('./signer-policy' /* webpackChunkName: \"image-sign-request\" */).then(m => m.SignerPoliciesDetailsPage))\n  .set(referenceForModel(ImageScanRequestModel), () => import('./image-scan-request' /* webpackChunkName: \"image-sign-request\" */).then(m => m.ImageScanRequestsDetailsPage))\n  .set(referenceForModel(NotebookModel), () => import('./notebook' /* webpackChunkName: \"notebook\" */).then(m => m.NotebooksDetailsPage))\n  .set(referenceForModel(ExperimentModel), () => import('./experiment' /* webpackChunkName: \"experiment\" */).then(m => m.ExperimentsDetailsPage))\n  .set(referenceForModel(TFJobModel), () => import('./training-job' /* webpackChunkName: \"training-job\" */).then(m => m.TrainingJobsDetailsPage))\n  .set(referenceForModel(PyTorchJobModel), () => import('./training-job' /* webpackChunkName: \"training-job\" */).then(m => m.TrainingJobsDetailsPage))\n  .set(referenceForModel(InferenceServiceModel), () => import('./inference-service' /* webpackChunkName: \"inference-service\" */).then(m => m.InferenceServicesDetailsPage))\n  .set(referenceForModel(WorkflowModel), () => import('./workflow' /* webpackChunkName: \"workflow\" */).then(m => m.WorkflowsDetailsPage))\n  .set(referenceForModel(WorkflowTemplateModel), () => import('./workflow-template' /* webpackChunkName: \"workflow-template\" */).then(m => m.WorkflowTemplatesDetailsPage))\n  .set(referenceForModel(ImageReplicateModel), () => import('./image-replicate' /* webpackChunkName: \"image-sign-request\" */).then(m => m.ImageReplicatesDetailsPage));\n\nexport const hyperCloudListPages = ImmutableMap<ResourceMapKey, ResourceMapValue>()\n  .set(referenceForModel(PodSecurityPolicyModel), () => import('./pod-security-policy' /* webpackChunkName: \"pod-security-policy\" */).then(m => m.PodSecurityPoliciesPage))\n  .set(referenceForModel(ClusterManagerModel), () => import('./cluster' /* webpackChunkName: \"cluster\" */).then(m => m.ClustersPage))\n  .set(referenceForModel(ClusterClaimModel), () => import('./cluster-claim' /* webpackChunkName: \"cluster-claim\" */).then(m => m.ClusterClaimsPage))\n  .set(referenceForModel(FederatedConfigMapModel), () => import('./federated-config-map' /* webpackChunkName: \"configmap\" */).then(m => m.FederatedConfigMapsPage))\n  .set(referenceForModel(FederatedDeploymentModel), () => import('./federated-deployment' /* webpackChunkName: \"deployment\" */).then(m => m.FederatedDeploymentsPage))\n  .set(referenceForModel(FederatedIngressModel), () => import('./federated-ingress' /* webpackChunkName: \"ingress\" */).then(m => m.FederatedIngressesPage))\n  .set(referenceForModel(FederatedNamespaceModel), () => import('./federated-namespace' /* webpackChunkName: \"namespace\" */).then(m => m.FederatedNamespacesPage))\n  .set(referenceForModel(FederatedJobModel), () => import('./federated-job' /* webpackChunkName: \"job\" */).then(m => m.FederatedJobsPage))\n  .set(referenceForModel(FederatedReplicaSetModel), () => import('./federated-replica-set' /* webpackChunkName: \"replica-set\" */).then(m => m.FederatedReplicaSetsPage))\n  .set(referenceForModel(FederatedSecretModel), () => import('./federated-secret' /* webpackChunkName: \"secret\" */).then(m => m.FederatedSecretsPage))\n  .set(referenceForModel(FederatedServiceModel), () => import('./federated-service' /* webpackChunkName: \"service\" */).then(m => m.FederatedServicesPage))\n  .set(referenceForModel(FederatedPodModel), () => import('./federated-pod' /* webpackChunkName: \"pod\" */).then(m => m.FederatedPodsPage))\n  .set(referenceForModel(FederatedHPAModel), () => import('./federated-horizontalpodautoscaler' /* webpackChunkName: \"horizontalpodautoscaler\" */).then(m => m.FederatedHPAsPage))\n  .set(referenceForModel(FederatedDaemonSetModel), () => import('./federated-daemonset' /* webpackChunkName: \"daemonset\" */).then(m => m.FederatedDaemonSetsPage))\n  .set(referenceForModel(FederatedStatefulSetModel), () => import('./federated-statefulset' /* webpackChunkName: \"statefulset\" */).then(m => m.FederatedStatefulSetsPage))\n  .set(referenceForModel(FederatedCronJobModel), () => import('./federated-cronjob' /* webpackChunkName: \"cronjob\" */).then(m => m.FederatedCronJobsPage))\n  .set(referenceForModel(TaskModel), () => import('./task' /* webpackChunkName: \"task\" */).then(m => m.TasksPage))\n  .set(referenceForModel(ClusterTaskModel), () => import('./cluster-task' /* webpackChunkName: \"cluster-task\" */).then(m => m.ClusterTasksPage))\n  .set(referenceForModel(TaskRunModel), () => import('./task-run' /* webpackChunkName: \"task-run\" */).then(m => m.TaskRunsPage))\n  .set(referenceForModel(PipelineModel), () => import('./pipeline' /* webpackChunkName: \"pipeline\" */).then(m => m.PipelinesPage))\n  .set(referenceForModel(PipelineRunModel), () => import('./pipeline-run' /* webpackChunkName: \"pipeline-run\" */).then(m => m.PipelineRunsPage))\n  .set(referenceForModel(ApprovalModel), () => import('./pipeline-approval' /* webpackChunkName: \"pipeline-approval\" */).then(m => m.PipelineApprovalsPage))\n  .set(referenceForModel(PipelineResourceModel), () => import('./pipeline-resource' /* webpackChunkName: \"pipeline-resource\" */).then(m => m.PipelineResourcesPage))\n  .set(referenceForModel(IntegrationConfigModel), () => import('./integration-config' /* webpackChunkName: \"integration-config\" */).then(m => m.IntegrationConfigsPage))\n  .set(referenceForModel(IntegrationJobModel), () => import('./integration-job' /* webpackChunkName: \"integration-job\" */).then(m => m.IntegrationJobsPage))\n  .set(referenceForModel(VirtualMachineModel), () => import('./virtual-machine' /* webpackChunkName: \"virtual-machine\" */).then(m => m.VirtualMachinesPage))\n  .set(referenceForModel(VirtualMachineInstanceModel), () => import('./virtual-machine-instance' /* webpackChunkName: \"virtual-machine-instance\" */).then(m => m.VirtualMachineInstancesPage))\n  .set(referenceForModel(VirtualServiceModel), () => import('./virtual-service' /* webpackChunkName: \"virtual-service\" */).then(m => m.VirtualServicesPage))\n  .set(referenceForModel(DestinationRuleModel), () => import('./destination-rule' /* webpackChunkName: \"destination-rule\" */).then(m => m.DestinationRulesPage))\n  .set(referenceForModel(EnvoyFilterModel), () => import('./envoy-filter' /* webpackChunkName: \"envoy-filter\" */).then(m => m.EnvoyFiltersPage))\n  .set(referenceForModel(GatewayModel), () => import('./gateway' /* webpackChunkName: \"gateway\" */).then(m => m.GatewaysPage))\n  .set(referenceForModel(SidecarModel), () => import('./sidecar' /* webpackChunkName: \"sidecar\" */).then(m => m.SidecarsPage))\n  .set(referenceForModel(ServiceEntryModel), () => import('./service-entry' /* webpackChunkName: \"service-entry\" */).then(m => m.ServiceEntriesPage))\n  .set(referenceForModel(RequestAuthenticationModel), () => import('./request-authentication' /* webpackChunkName: \"request-authentication\" */).then(m => m.RequestAuthenticationsPage))\n  .set(referenceForModel(PeerAuthenticationModel), () => import('./peer-authentication' /* webpackChunkName: \"peer-authentication\" */).then(m => m.PeerAuthenticationsPage))\n  .set(referenceForModel(AuthorizationPolicyModel), () => import('./authentication-policy' /* webpackChunkName: \"authentication-policy\" */).then(m => m.AuthorizationPoliciesPage))\n  .set(referenceForModel(DataVolumeModel), () => import('./data-volume' /* webpackChunkName: \"data-volume\" */).then(m => m.DataVolumesPage))\n  .set(referenceForModel(ResourceQuotaClaimModel), () => import('./resource-quota-claim' /* webpackChunkName: \"resourcequotaclaim\" */).then(m => m.ResourceQuotaClaimsPage))\n  .set(referenceForModel(RoleBindingClaimModel), () => import('./role-binding-claim' /* webpackChunkName: \"rolebindingclaim\" */).then(m => m.RoleBindingClaimsPage))\n  .set(referenceForModel(NamespaceClaimModel), () => import('./namespace-claim' /* webpackChunkName: \"namespaceclaim\" */).then(m => m.NamespaceClaimsPage))\n  .set(referenceForModel(ServiceBrokerModel), () => import('./service-broker' /* webpackChunkName: \"servicebroker\" */).then(m => m.ServiceBrokersPage))\n  .set(referenceForModel(ServiceClassModel), () => import('./service-class' /* webpackChunkName: \"serviceclass\" */).then(m => m.ServiceClassesPage))\n  .set(referenceForModel(ServicePlanModel), () => import('./service-plan' /* webpackChunkName: \"serviceplan\" */).then(m => m.ServicePlansPage))\n  .set(referenceForModel(ClusterServiceBrokerModel), () => import('./cluster-service-broker' /* webpackChunkName: \"clusterservicebroker\" */).then(m => m.ClusterServiceBrokersPage))\n  .set(referenceForModel(ClusterServiceClassModel), () => import('./cluster-service-class' /* webpackChunkName: \"clusterserviceclass\" */).then(m => m.ClusterServiceClassesPage))\n  .set(referenceForModel(ClusterServicePlanModel), () => import('./cluster-service-plan' /* webpackChunkName: \"clusterserviceplan\" */).then(m => m.ClusterServicePlansPage))\n  .set(referenceForModel(ServiceInstanceModel), () => import('./service-instance' /* webpackChunkName: \"serviceinstance\" */).then(m => m.ServiceInstancesPage))\n  .set(referenceForModel(ServiceBindingModel), () => import('./service-binding' /* webpackChunkName: \"servicebinding\" */).then(m => m.ServiceBindingsPage))\n  .set(referenceForModel(CatalogServiceClaimModel), () => import('./catalog-service-claim' /* webpackChunkName: \"catalogserviceclaim\" */).then(m => m.CatalogServiceClaimsPage))\n  .set(referenceForModel(ClusterTemplateModel), () => import('./cluster-template' /* webpackChunkName: \"clustertemplate\" */).then(m => m.ClusterTemplatesPage))\n  .set(referenceForModel(TemplateModel), () => import('./template' /* webpackChunkName: \"template\" */).then(m => m.TemplatesPage))\n  .set(referenceForModel(TemplateInstanceModel), () => import('./template-instance' /* webpackChunkName: \"templateinstance\" */).then(m => m.TemplateInstancesPage))\n  .set(referenceForModel(RegistryModel), () => import('./registry' /* webpackChunkName: \"registry\" */).then(m => m.RegistriesPage))\n  .set(referenceForModel(ExternalRegistryModel), () => import('./external-registry' /* webpackChunkName: \"external-registry\" */).then(m => m.ExternalRegistriesPage))\n  .set(referenceForModel(ImageSignerModel), () => import('./image-signer' /* webpackChunkName: \"image-signer\" */).then(m => m.ImageSignersPage))\n  .set(referenceForModel(ImageSignRequestModel), () => import('./image-sign-request' /* webpackChunkName: \"image-sign-request\" */).then(m => m.ImageSignRequestsPage))\n  .set(referenceForModel(SignerPolicyModel), () => import('./signer-policy' /* webpackChunkName: \"image-sign-request\" */).then(m => m.SignerPoliciesPage))\n  .set(referenceForModel(ImageScanRequestModel), () => import('./image-scan-request' /* webpackChunkName: \"image-scan-request\" */).then(m => m.ImageScanRequestsPage))\n  .set(referenceForModel(NotebookModel), () => import('./notebook' /* webpackChunkName: \"notebook\" */).then(m => m.NotebooksPage))\n  .set(referenceForModel(ExperimentModel), () => import('./experiment' /* webpackChunkName: \"experiment\" */).then(m => m.ExperimentsPage))\n  .set(referenceForModel(TrainingJobModel), () => import('./training-job' /* webpackChunkName: \"training-job\" */).then(m => m.TrainingJobsPage))\n  .set(referenceForModel(InferenceServiceModel), () => import('./inference-service' /* webpackChunkName: \"inference-service\" */).then(m => m.InferenceServicesPage))\n  .set(referenceForModel(WorkflowModel), () => import('./workflow' /* webpackChunkName: \"workflow\" */).then(m => m.WorkflowsPage))\n  .set(referenceForModel(WorkflowTemplateModel), () => import('./workflow-template' /* webpackChunkName: \"workflow-template\" */).then(m => m.WorkflowTemplatesPage))\n  .set(referenceForModel(ImageReplicateModel), () => import('./image-replicate' /* webpackChunkName: \"image-sign-request\" */).then(m => m.ImageReplicatesPage));\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect, Dispatch } from 'react-redux';\nimport { Accordion, AccordionContent, AccordionItem, AccordionToggle, DataToolbar, DataToolbarChip, DataToolbarContent, DataToolbarFilter, DataToolbarItem } from '@patternfly/react-core';\nimport { getBadgeFromType } from '@console/shared';\nimport { RootState } from '../../redux';\nimport { getActivePerspective, getPinnedResources } from '../../reducers/ui';\nimport { setPinnedResources } from '../../actions/ui';\nimport { connectToModel } from '../../kinds';\nimport { DefaultPage } from '../default-resource';\nimport { requirementFromString } from '../../module/k8s/selector-requirement';\nimport { ResourceListDropdown } from '../resource-dropdown';\nimport { resourceListPages } from '../resource-pages';\nimport { withStartGuide } from '../start-guide';\nimport { split, selectorFromString } from '../../module/k8s/selector';\nimport { kindForReference, modelFor, referenceForModel } from '../../module/k8s';\nimport { LoadingBox, MsgBox, PageHeading, ResourceIcon, setQueryArgument, AsyncComponent } from '../utils';\nimport { SearchFilterDropdown } from '../search-filter-dropdown';\nimport { useTranslation } from 'react-i18next';\n\nconst ResourceList = connectToModel(({ kindObj, mock, namespace, selector, nameFilter }) => {\n  if (!kindObj) {\n    return <LoadingBox />;\n  }\n\n  const componentLoader = resourceListPages.get(referenceForModel(kindObj), () => Promise.resolve(DefaultPage));\n  const ns = kindObj.namespaced ? namespace : undefined;\n\n  return <AsyncComponent loader={componentLoader} namespace={ns} selector={selector} nameFilter={nameFilter} kind={kindObj.crd ? referenceForModel(kindObj) : kindObj.kind} showTitle={false} hideTextFilter autoFocus={false} mock={mock} badge={getBadgeFromType(kindObj.badge)} hideToolbar />;\n});\n\ninterface StateProps {\n  perspective: string;\n  pinnedResources: string[];\n}\n\ninterface DispatchProps {\n  onPinnedResourcesChange: (searches: string[]) => void;\n}\n\nconst SearchPage_: React.FC<SearchProps & StateProps & DispatchProps> = props => {\n  const { t } = useTranslation();\n  const [selectedItems, setSelectedItems] = React.useState(new Set<string>([]));\n  const [collapsedKinds, setCollapsedKinds] = React.useState(new Set<string>([]));\n  const [labelFilter, setLabelFilter] = React.useState([]);\n  const [labelFilterInput, setLabelFilterInput] = React.useState('');\n  const [typeaheadNameFilter, setTypeaheadNameFilter] = React.useState('');\n  const { namespace, noProjectsAvailable } = props;\n\n  // Set state variables from the URL\n  React.useEffect(() => {\n    let kind: string, q: string, name: string;\n\n    if (window.location.search) {\n      const sp = new URLSearchParams(window.location.search);\n      kind = sp.get('kind');\n      q = sp.get('q');\n      name = sp.get('name');\n    }\n    // Ensure that the \"kind\" route parameter is a valid resource kind ID\n    kind = kind || '';\n    if (kind !== '') {\n      setSelectedItems(new Set(kind.split(',')));\n    }\n    const tags = split(q || '');\n    const validTags = _.reject(tags, tag => requirementFromString(tag) === undefined);\n    setLabelFilter(validTags);\n    setTypeaheadNameFilter(name || '');\n  }, []);\n\n  const updateSelectedItems = (selection: string) => {\n    const updateItems = selectedItems;\n    updateItems.has(selection) ? updateItems.delete(selection) : updateItems.add(selection);\n    setSelectedItems(updateItems);\n    setQueryArgument('kind', [...updateItems].join(','));\n  };\n\n  const updateNewItems = (filter: string, { key }: DataToolbarChip) => {\n    const updateItems = selectedItems;\n    updateItems.has(key) ? updateItems.delete(key) : updateItems.add(key);\n    setSelectedItems(updateItems);\n    setQueryArgument('kind', [...updateItems].join(','));\n  };\n\n  const clearSelectedItems = () => {\n    setSelectedItems(new Set([]));\n    setQueryArgument('kind', '');\n  };\n\n  const clearNameFilter = () => {\n    setTypeaheadNameFilter('');\n    setQueryArgument('name', '');\n  };\n\n  const clearLabelFilter = () => {\n    setLabelFilter([]);\n    setQueryArgument('q', '');\n  };\n\n  const clearAll = () => {\n    clearSelectedItems();\n    clearNameFilter();\n    clearLabelFilter();\n  };\n\n  const toggleKindExpanded = (kindView: string) => {\n    const newCollasped = new Set(collapsedKinds);\n    newCollasped.has(kindView) ? newCollasped.delete(kindView) : newCollasped.add(kindView);\n    setCollapsedKinds(newCollasped);\n  };\n\n  const updateNameFilter = (value: string) => {\n    setTypeaheadNameFilter(value);\n    setQueryArgument('name', value);\n  };\n\n  const updateLabelFilter = (value: string, endOfString: boolean) => {\n    setLabelFilterInput(value);\n    if (requirementFromString(value) !== undefined && endOfString) {\n      const updatedLabels = _.uniq([...labelFilter, value]);\n      setLabelFilter(updatedLabels);\n      setQueryArgument('q', updatedLabels.join(','));\n      setLabelFilterInput('');\n    }\n  };\n\n  const updateSearchFilter = (type: string, value: string, endOfString: boolean) => {\n    type === t('COMMON:MSG_COMMON_SEARCH_FILTER_2') ? updateLabelFilter(value, endOfString) : updateNameFilter(value);\n  };\n\n  const removeLabelFilter = (filter: string, value: string) => {\n    const newLabels = labelFilter.filter((keepItem: string) => keepItem !== value);\n    setLabelFilter(newLabels);\n    setQueryArgument('q', newLabels.join(','));\n  };\n\n  const getToggleText = (item: string) => {\n    const model = modelFor(item);\n    // API discovery happens asynchronously. Avoid runtime errors if the model hasn't loaded.\n    if (!model) {\n      return '';\n    }\n    const { labelPlural, apiVersion, apiGroup } = model;\n    return (\n      <span className=\"co-search-group__accordion-label\">\n        {labelPlural}{' '}\n        <span className=\"text-muted show small\">\n          {apiGroup || 'core'}/{apiVersion}\n        </span>\n      </span>\n    );\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>{t('COMMON:MSG_LNB_MENU_4')}</title>\n      </Helmet>\n      <PageHeading detail={true} title={t('COMMON:MSG_LNB_MENU_4')}>\n        <DataToolbar id=\"search-toolbar\" clearAllFilters={clearAll} clearFiltersButtonText={t('COMMON:MSG_COMMON_FILTER_11')}>\n          <DataToolbarContent>\n            <DataToolbarItem>\n              <DataToolbarFilter\n                deleteChipGroup={clearSelectedItems}\n                chips={[...selectedItems].map(resourceKind => ({\n                  key: resourceKind,\n                  node: (\n                    <>\n                      <ResourceIcon kind={resourceKind} />\n                      {kindForReference(resourceKind)}\n                    </>\n                  ),\n                }))}\n                deleteChip={updateNewItems}\n                categoryName={t('COMMON:MSG_COMMON_FILTER_1')}\n              >\n                <ResourceListDropdown selected={[...selectedItems]} onChange={updateSelectedItems} type=\"multiple\" />\n              </DataToolbarFilter>\n            </DataToolbarItem>\n            <DataToolbarItem className=\"co-search-group__filter\">\n              <DataToolbarFilter deleteChipGroup={clearLabelFilter} chips={[...labelFilter]} deleteChip={removeLabelFilter} categoryName={t('COMMON:MSG_COMMON_SEARCH_FILTER_2')}>\n                <DataToolbarFilter chips={typeaheadNameFilter.length > 0 ? [typeaheadNameFilter] : []} deleteChip={clearNameFilter} categoryName={t('COMMON:MSG_COMMON_SEARCH_FILTER_1')}>\n                  <SearchFilterDropdown onChange={updateSearchFilter} nameFilterInput={typeaheadNameFilter} labelFilterInput={labelFilterInput} />\n                </DataToolbarFilter>\n              </DataToolbarFilter>\n            </DataToolbarItem>\n          </DataToolbarContent>\n        </DataToolbar>\n      </PageHeading>\n      <div className=\"co-search\">\n        <Accordion className=\"co-search__accordion\" asDefinitionList={false} noBoxShadow>\n          {[...selectedItems].map(resource => {\n            const isCollapsed = collapsedKinds.has(resource);\n            return (\n              <AccordionItem key={resource}>\n                <AccordionToggle className=\"co-search-group__accordion-toggle\" onClick={() => toggleKindExpanded(resource)} isExpanded={!isCollapsed} id={`${resource}-toggle`}>\n                  {getToggleText(resource)}\n                </AccordionToggle>\n                <AccordionContent isHidden={isCollapsed}>{!isCollapsed && <ResourceList kind={resource} selector={selectorFromString(labelFilter.join(','))} nameFilter={typeaheadNameFilter} namespace={namespace} mock={noProjectsAvailable} key={resource} />}</AccordionContent>\n              </AccordionItem>\n            );\n          })}\n        </Accordion>\n        {selectedItems.size === 0 && <MsgBox title={t('SINGLE:MSG_SEARCH_MAIN_NORESOURCES_1')} detail={<p>{t('SINGLE:MSG_SEARCH_MAIN_NORESOURCES_2')}</p>} />}\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  perspective: getActivePerspective(state),\n  pinnedResources: getPinnedResources(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({\n  onPinnedResourcesChange: (searches: string[]) => {\n    dispatch(setPinnedResources(searches));\n  },\n});\n\nexport const SearchPage = connect(mapStateToProps, mapDispatchToProps)(withStartGuide(SearchPage_));\n\nexport type SearchProps = {\n  location: any;\n  namespace: string;\n  noProjectsAvailable: boolean;\n};\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport en from './en.json';\nimport ko from './ko.json';\n\nconst options = {\n  lookupLocalStorage: 'i18nextLng',\n  caches: ['localStorage'],\n  cookieMinutes: 7 * 24 * 60 * 60 * 1000,\n};\n\nconst resource = {\n  en: {\n    COMMON: en.COMMON,\n    SINGLE: en.SINGLE,\n    MULTI: en.MULTI,\n  },\n  ko: {\n    COMMON: ko.COMMON,\n    SINGLE: ko.SINGLE,\n    MULTI: ko.MULTI,\n  },\n};\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    lng: 'ko',\n    //lng: window.localStorage.getItem('i18nextLng') || navigator.language || 'ko',\n    debug: true,\n    detection: options,\n    resources: resource,\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n  });\n\nexport default i18n;\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\n\nimport * as UIActions from '../actions/ui';\n\nexport const ImpersonateNotifier = connect(({ UI }) => ({ impersonate: UI.get('impersonate') }), {\n  stopImpersonate: UIActions.stopImpersonate,\n})(({ stopImpersonate, impersonate }) => {\n  if (!impersonate) {\n    return null;\n  }\n  return (\n    <div className=\"co-global-notification\">\n      <div className=\"co-global-notification__content\">\n        <p className=\"co-global-notification__text\">\n          <span className=\"text-uppercase co-global-notification__impersonate-kind\">{`Impersonating ${impersonate.kind}`}</span>{' '}\n          You are impersonating{' '}\n          <span className=\"co-global-notification__impersonate-name\">{impersonate.name}</span>. You\n          are viewing all resources and roles this {_.toLower(impersonate.kind)} can access.{' '}\n          <a onClick={stopImpersonate}>Stop Impersonation</a>\n        </p>\n      </div>\n    </div>\n  );\n});\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { DetailsPage, ListPage, Table, TableRow, TableData } from './factory';\nimport { Kebab, SectionHeading, LabelList, ResourceKebab, ResourceIcon, detailsPage, EmptyBox, navFactory, ResourceLink, ResourceSummary } from './utils';\nimport { useTranslation } from 'react-i18next';\nconst menuActions = Kebab.factory.common;\n\nexport const ingressValidHosts = ingress => _.map(_.get(ingress, 'spec.rules', []), 'host').filter(_.isString);\n\nconst getHosts = ingress => {\n  const hosts = ingressValidHosts(ingress);\n\n  if (hosts.length) {\n    const hostsStr = hosts.join(', ');\n    return (\n      <div className=\"co-truncate co-select-to-copy\" title={hostsStr}>\n        {hostsStr}\n      </div>\n    );\n  }\n\n  return <div className=\"text-muted\">No hosts</div>;\n};\n\nconst getTLSCert = ingress => {\n  if (!_.has(ingress.spec, 'tls')) {\n    return (\n      <div>\n        <span>Not configured</span>\n      </div>\n    );\n  }\n\n  const certs = _.map(ingress.spec.tls, 'secretName');\n\n  return (\n    <div>\n      <ResourceIcon kind=\"Secret\" />\n      <span>{certs.join(', ')}</span>\n    </div>\n  );\n};\n\nconst tableColumnClasses = [classNames('col-md-3', 'col-sm-4', 'col-xs-6'), classNames('col-md-3', 'col-sm-4', 'col-xs-6'), classNames('col-md-3', 'col-sm-4', 'hidden-xs'), classNames('col-md-3', 'hidden-sm', 'hidden-xs'), Kebab.columnClass];\n\nconst kind = 'Ingress';\n\nconst IngressTableHeader = t => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_15'),\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_28'),\n      sortFunc: 'ingressValidHosts',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[4] },\n    },\n  ];\n};\nIngressTableHeader.displayName = 'IngressTableHeader';\n\nconst IngressTableRow = ({ obj: ingress, index, key, style }) => {\n  return (\n    <TableRow id={ingress.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={ingress.metadata.name} namespace={ingress.metadata.namespace} title={ingress.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={ingress.metadata.namespace} title={ingress.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <LabelList kind={kind} labels={ingress.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>{getHosts(ingress)}</TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={ingress} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst RulesHeader = () => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"row co-m-table-grid__head\">\n      <div className=\"col-xs-3\">{t('COMMON:MSG_DETAILS_TABDETAILS_INGRESSRULES_TABLEHEADER_1')}</div>\n      <div className=\"col-xs-3\">{t('COMMON:MSG_DETAILS_TABDETAILS_INGRESSRULES_TABLEHEADER_2')}</div>\n      <div className=\"col-xs-3\">{t('COMMON:MSG_DETAILS_TABDETAILS_INGRESSRULES_TABLEHEADER_3')}</div>\n      <div className=\"col-xs-2\">{t('COMMON:MSG_DETAILS_TABDETAILS_INGRESSRULES_TABLEHEADER_4')}</div>\n    </div>\n  );\n};\n\nconst RulesRow = ({ rule, namespace }) => {\n  return (\n    <div className=\"row co-resource-list__item\">\n      <div className=\"col-xs-3 co-break-word\">\n        <div>{rule.host}</div>\n      </div>\n      <div className=\"col-xs-3 co-break-word\">\n        <div>{rule.path}</div>\n      </div>\n      <div className=\"col-xs-3\">{rule.serviceName ? <ResourceLink kind=\"Service\" name={rule.serviceName} namespace={namespace} /> : '-'}</div>\n      <div className=\"col-xs-2\">\n        <div>{rule.servicePort || '-'}</div>\n      </div>\n    </div>\n  );\n};\n\nconst RulesRows = props => {\n  const rules = [];\n\n  if (_.has(props.spec, 'rules')) {\n    _.forEach(props.spec.rules, rule => {\n      const paths = _.get(rule, 'http.paths');\n      if (_.isEmpty(paths)) {\n        rules.push({\n          host: rule.host || '*',\n          path: '*',\n          serviceName: _.get(props.spec, 'backend.serviceName'),\n          servicePort: _.get(props.spec, 'backend.servicePort'),\n        });\n      } else {\n        _.forEach(paths, path => {\n          rules.push({\n            host: rule.host || '*',\n            path: path.path || '*',\n            serviceName: path.backend.serviceName,\n            servicePort: path.backend.servicePort,\n          });\n        });\n      }\n    });\n\n    const rows = _.map(rules, rule => {\n      return <RulesRow rule={rule} key={rule.serviceName} namespace={props.namespace} />;\n    });\n\n    return <div className=\"co-m-table-grid__body\"> {rows} </div>;\n  }\n\n  return <EmptyBox label=\"Rules\" />;\n};\n\nconst Details = ({ obj: ingress }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: t('COMMON:MSG_LNB_MENU_48') })} />\n        <ResourceSummary resource={ingress}>\n          <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_42')}</dt>\n          <dd>{getTLSCert(ingress)}</dd>\n        </ResourceSummary>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_INGRESSRULES_1')} />\n        <p className=\"co-m-pane__explanation\">{t('COMMON:MSG_DETAILS_TABDETAILS_INGRESSRULES_2')}</p>\n        <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n          <RulesHeader />\n          <RulesRows spec={ingress.spec} namespace={ingress.metadata.namespace} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst IngressesDetailsPage = props => <DetailsPage {...props} menuActions={menuActions} pages={[navFactory.details(detailsPage(Details)), navFactory.editYaml()]} />;\nconst IngressesList = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Ingresses\" Header={IngressTableHeader.bind(null, t)} Row={IngressTableRow} virtualize />;\n};\n\nconst IngressesPage = props => {\n  const { t } = useTranslation();\n  return <ListPage title={t('COMMON:MSG_LNB_MENU_48')} ListComponent={IngressesList} canCreate={true} {...props} />;\n};\n\nexport { IngressesList, IngressesPage, IngressesDetailsPage };\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as _ from 'lodash-es';\n\nimport { KUBE_ADMIN_USERNAME } from '@console/shared';\nimport { OAuthModel } from '../models';\nimport { userStateToProps } from '../reducers/ui';\nimport { resourcePathFromModel } from './utils/resource-link';\n\nconst oAuthResourcePath = resourcePathFromModel(OAuthModel, 'cluster');\n\nexport const KubeAdminNotifier = connect(userStateToProps)(({ user }) => {\n  const username = _.get(user, 'metadata.name');\n  return username === KUBE_ADMIN_USERNAME ? (\n    <div className=\"co-global-notification\">\n      <div className=\"co-global-notification__content\">\n        <p className=\"co-global-notification__text\">\n          You are logged in as a temporary administrative user. Update the{' '}\n          <Link to={oAuthResourcePath}>cluster OAuth configuration</Link> to allow others to\n          log&nbsp;in.\n        </p>\n      </div>\n    </div>\n  ) : null;\n});\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { connect } from 'react-redux';\nimport { BellIcon, EllipsisVIcon, PlusCircleIcon, QuestionCircleIcon, ClockIcon, GlobeAmericasIcon, AngleDownIcon } from '@patternfly/react-icons';\nimport { ApplicationLauncher, ApplicationLauncherGroup, ApplicationLauncherItem, ApplicationLauncherSeparator, NotificationBadge, Toolbar, ToolbarGroup, ToolbarItem, TooltipPosition, Tooltip, Button, Badge } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { FLAGS, YellowExclamationTriangleIcon } from '@console/shared';\nimport { formatNamespacedRouteForResource } from '@console/shared/src/utils';\nimport CloudShellMastheadButton from '@console/app/src/components/cloud-shell/CloudShellMastheadButton';\nimport * as UIActions from '../actions/ui';\nimport { connectToFlags, flagPending, featureReducerName } from '../reducers/features';\nimport { authSvc } from '../module/auth';\nimport { getOCMLink } from '../module/k8s';\nimport { Firehose } from './utils';\nimport { openshiftHelpBase } from './utils/documentation';\nimport { AboutModal } from './about-modal';\nimport { clusterVersionReference, getReportBugLink } from '../module/k8s/cluster-settings';\nimport * as redhatLogoImg from '../imgs/logos/redhat.svg';\nimport { ExpTimer } from './hypercloud/exp-timer';\nimport { setAccessToken } from '../hypercloud/auth';\nimport { withTranslation } from 'react-i18next';\nimport i18n from 'i18next';\n\nconst SystemStatusButton = ({ statuspageData, className }) =>\n  !_.isEmpty(_.get(statuspageData, 'incidents')) ? (\n    <ToolbarItem className={className}>\n      <a className=\"pf-c-button pf-m-plain\" aria-label=\"System Status\" href={statuspageData.page.url} target=\"_blank\" rel=\"noopener noreferrer\">\n        <YellowExclamationTriangleIcon className=\"co-masthead-icon\" />\n      </a>\n    </ToolbarItem>\n  ) : null;\n\nclass MastheadToolbarContents_ extends React.Component {\n  constructor(props) {\n    super(props);\n    this.timerRef = null;\n    this.state = {\n      isApplicationLauncherDropdownOpen: false,\n      isUserDropdownOpen: false,\n      isLanguageDropdownOpen: false,\n      isKebabDropdownOpen: false,\n      statuspageData: null,\n      isKubeAdmin: false,\n      showAboutModal: false,\n    };\n\n    this._getStatuspageData = this._getStatuspageData.bind(this);\n    this._getImportYAMLPath = this._getImportYAMLPath.bind(this);\n    this._updateUser = this._updateUser.bind(this);\n    this._onUserDropdownToggle = this._onUserDropdownToggle.bind(this);\n    this._onUserDropdownSelect = this._onUserDropdownSelect.bind(this);\n    this._onLanguageDropdownToggle = this._onLanguageDropdownToggle.bind(this);\n    this._onLanguageDropdownSelect = this._onLanguageDropdownSelect.bind(this);\n    this._onKebabDropdownToggle = this._onKebabDropdownToggle.bind(this);\n    this._onKebabDropdownSelect = this._onKebabDropdownSelect.bind(this);\n    this._renderMenu = this._renderMenu.bind(this);\n    this._renderLanguageMenu = this._renderLanguageMenu.bind(this);\n    this._onApplicationLauncherDropdownSelect = this._onApplicationLauncherDropdownSelect.bind(this);\n    this._onApplicationLauncherDropdownToggle = this._onApplicationLauncherDropdownToggle.bind(this);\n    this._onHelpDropdownSelect = this._onHelpDropdownSelect.bind(this);\n    this._onHelpDropdownToggle = this._onHelpDropdownToggle.bind(this);\n    this._onAboutModal = this._onAboutModal.bind(this);\n    this._closeAboutModal = this._closeAboutModal.bind(this);\n    this._tokenRefresh = this._tokenRefresh.bind(this);\n  }\n\n  _getStatuspageData(statuspageID) {\n    fetch(`https://${statuspageID}.statuspage.io/api/v2/summary.json`, {\n      headers: { Accept: 'application/json' },\n    })\n      .then(response => response.json())\n      .then(statuspageData => this.setState({ statuspageData }));\n  }\n\n  _getImportYAMLPath() {\n    return formatNamespacedRouteForResource('import', this.props.activeNamespace);\n  }\n\n  _updateUser() {\n    const { flags, user } = this.props;\n    if (!flags[FLAGS.OPENSHIFT]) {\n      this.setState({ username: authSvc.name() });\n    }\n    this.setState({\n      username: _.get(user, 'fullName') || _.get(user, 'metadata.name', ''),\n      isKubeAdmin: _.get(user, 'metadata.name') === 'kube:admin',\n    });\n  }\n\n  _onUserDropdownToggle(isUserDropdownOpen) {\n    this.setState({\n      isUserDropdownOpen,\n    });\n  }\n\n  _onUserDropdownSelect() {\n    this.setState({\n      isUserDropdownOpen: !this.state.isUserDropdownOpen,\n    });\n  }\n\n  _onLanguageDropdownToggle(isLanguageDropdownOpen) {\n    this.setState({\n      isLanguageDropdownOpen,\n    });\n  }\n\n  _onLanguageDropdownSelect() {\n    this.setState({\n      isLanguageDropdownOpen: !this.state.isLanguageDropdownOpen,\n    });\n  }\n\n  _onKebabDropdownToggle(isKebabDropdownOpen) {\n    this.setState({\n      isKebabDropdownOpen,\n    });\n  }\n\n  _onKebabDropdownSelect() {\n    this.setState({\n      isKebabDropdownOpen: !this.state.isKebabDropdownOpen,\n    });\n  }\n\n  _onApplicationLauncherDropdownSelect() {\n    this.setState({\n      isApplicationLauncherDropdownOpen: !this.state.isApplicationLauncherDropdownOpen,\n    });\n  }\n\n  _onApplicationLauncherDropdownToggle(isApplicationLauncherDropdownOpen) {\n    this.setState({\n      isApplicationLauncherDropdownOpen,\n    });\n  }\n\n  _onHelpDropdownSelect() {\n    this.setState({\n      isHelpDropdownOpen: !this.state.isHelpDropdownOpen,\n    });\n  }\n\n  _onHelpDropdownToggle(isHelpDropdownOpen) {\n    this.setState({\n      isHelpDropdownOpen,\n    });\n  }\n\n  _onAboutModal(e) {\n    e.preventDefault();\n    this.setState({ showAboutModal: true });\n  }\n\n  _closeAboutModal() {\n    this.setState({ showAboutModal: false });\n  }\n\n  _getAdditionalLinks(links, type) {\n    return _.sortBy(\n      _.filter(links, link => link.spec.location === type),\n      'spec.text',\n    );\n  }\n\n  _getSectionLauncherItems(launcherItems, sectionName) {\n    return _.sortBy(\n      _.filter(launcherItems, link => _.get(link, 'spec.applicationMenu.section', '') === sectionName),\n      'spec.text',\n    );\n  }\n\n  _sectionSort(section) {\n    switch (section.name) {\n      case 'Red Hat Applications':\n        return 0;\n      case 'Third Party Applications':\n        return 1;\n      case 'Customer Applications':\n        return 2;\n      case '':\n        return 9; // Items w/o sections go last\n      default:\n        return 3; // Custom groups come after well-known groups\n    }\n  }\n\n  _helpActions(additionalHelpActions) {\n    const { flags, cv } = this.props;\n    const helpActions = [];\n    const reportBugLink = cv && cv.data ? getReportBugLink(cv.data) : null;\n\n    helpActions.push({\n      name: '',\n      isSection: true,\n      actions: [\n        {\n          label: 'Documentation',\n          externalLink: true,\n          href: openshiftHelpBase,\n        },\n        ...(flags[FLAGS.CONSOLE_CLI_DOWNLOAD]\n          ? [\n              {\n                component: <Link to=\"/command-line-tools\">Command Line Tools</Link>,\n              },\n            ]\n          : []),\n        ...(reportBugLink\n          ? [\n              {\n                label: reportBugLink.label,\n                externalLink: true,\n                href: reportBugLink.href,\n              },\n            ]\n          : []),\n        {\n          label: 'About',\n          callback: this._onAboutModal,\n          component: 'button',\n        },\n      ],\n    });\n\n    if (!_.isEmpty(additionalHelpActions.actions)) {\n      helpActions.push(additionalHelpActions);\n    }\n\n    return helpActions;\n  }\n\n  _getAdditionalActions(links) {\n    const actions = _.map(links, link => {\n      return {\n        label: link.spec.text,\n        externalLink: true,\n        href: link.spec.href,\n      };\n    });\n\n    return {\n      name: '',\n      isSection: true,\n      actions,\n    };\n  }\n\n  _externalProps = action => (action.externalLink ? { isExternal: true, target: '_blank', rel: 'noopener noreferrer' } : {});\n\n  _renderApplicationItems(actions) {\n    return _.map(actions, (action, groupIndex) => {\n      if (action.isSection) {\n        return (\n          <ApplicationLauncherGroup key={groupIndex} label={action.name}>\n            <>\n              {_.map(action.actions, (sectionAction, itemIndex) => {\n                return (\n                  <ApplicationLauncherItem key={itemIndex} icon={sectionAction.image} href={sectionAction.href || '#'} onClick={sectionAction.callback} component={sectionAction.component} {...this._externalProps(sectionAction)}>\n                    {sectionAction.label}\n                  </ApplicationLauncherItem>\n                );\n              })}\n              {groupIndex < actions.length - 1 && <ApplicationLauncherSeparator key={`separator-${groupIndex}`} />}\n            </>\n          </ApplicationLauncherGroup>\n        );\n      }\n\n      return (\n        <ApplicationLauncherGroup key={groupIndex}>\n          <>\n            <ApplicationLauncherItem key={action.label} icon={action.image} href={action.href || '#'} onClick={action.callback} component={action.component} {...this._externalProps(action)}>\n              {action.label}\n            </ApplicationLauncherItem>\n            {groupIndex < actions.length - 1 && <ApplicationLauncherSeparator key={`separator-${groupIndex}`} />}\n          </>\n        </ApplicationLauncherGroup>\n      );\n    });\n  }\n\n  _renderMenu(mobile) {\n    const { flags, consoleLinks, keycloak, t } = this.props;\n    const username = !!keycloak.idTokenParsed.preferred_username ? keycloak.idTokenParsed.preferred_username : keycloak.idTokenParsed.email;\n    const { isUserDropdownOpen, isKebabDropdownOpen } = this.state;\n    const additionalUserActions = this._getAdditionalActions(this._getAdditionalLinks(consoleLinks, 'UserMenu'));\n    const helpActions = this._helpActions(this._getAdditionalActions(this._getAdditionalLinks(consoleLinks, 'HelpMenu')));\n\n    const actions = [];\n    const userActions = [];\n\n    const openAccountConsole = e => {\n      e.preventDefault();\n      window.open(keycloak.createAccountUrl());\n    };\n\n    const logout = e => {\n      e.preventDefault();\n\n      keycloak.logout();\n    };\n\n    userActions.push({\n      label: t('COMMON:MSG_GNB_ACCOUNT_1'),\n      callback: openAccountConsole,\n      component: 'button',\n    });\n\n    userActions.push({\n      label: t('COMMON:MSG_GNB_ACCOUNT_2'),\n      callback: logout,\n      component: 'button',\n    });\n\n    actions.push({\n      name: '',\n      isSection: true,\n      actions: userActions,\n    });\n\n    if (!_.isEmpty(additionalUserActions.actions)) {\n      actions.unshift(additionalUserActions);\n    }\n\n    if (mobile) {\n      actions.unshift(...helpActions);\n\n      // actions.unshift({\n      //   name: '',\n      //   isSection: true,\n      //   actions: [\n      //     {\n      //       component: <Link to={this._getImportYAMLPath()}>Import YAML</Link>,\n      //     },\n      //   ],\n      // });\n\n      return <ApplicationLauncher aria-label=\"Utility menu\" className=\"co-app-launcher\" onSelect={this._onKebabDropdownSelect} onToggle={this._onKebabDropdownToggle} isOpen={isKebabDropdownOpen} items={this._renderApplicationItems(actions)} position=\"right\" toggleIcon={<EllipsisVIcon />} isGrouped />;\n    }\n\n    if (_.isEmpty(actions)) {\n      return <div className=\"co-username\">{username}</div>;\n    }\n\n    const userToggle = (\n      <span className=\"pf-c-dropdown__toggle\">\n        <span className=\"co-username\">{username}</span>\n        <AngleDownIcon className=\"pf-c-dropdown__toggle-icon\" />\n      </span>\n    );\n\n    return <ApplicationLauncher aria-label=\"User menu\" data-test=\"user-dropdown\" className=\"co-app-launcher co-user-menu\" onSelect={this._onUserDropdownSelect} onToggle={this._onUserDropdownToggle} isOpen={isUserDropdownOpen} items={this._renderApplicationItems(actions)} position=\"right\" toggleIcon={userToggle} isGrouped />;\n  }\n  _renderLanguageMenu(mobile) {\n    const { flags, consoleLinks, keycloak, t } = this.props;\n    const { isLanguageDropdownOpen } = this.state;\n\n    const actions = [];\n    const i18nActions = [];\n\n    const enChange = e => {\n      e.preventDefault();\n      i18n.changeLanguage('en');\n      window.localStorage.setItem('i18nextLng', 'en');\n    };\n    const koChange = e => {\n      e.preventDefault();\n      i18n.changeLanguage('ko');\n      window.localStorage.setItem('i18nextLng', 'ko');\n    };\n\n    i18nActions.push({\n      label: t('COMMON:MSG_GNB_LANGUAGE_2'),\n      callback: enChange,\n      component: 'button',\n    });\n\n    i18nActions.push({\n      label: t('COMMON:MSG_GNB_LANGUAGE_1'),\n      callback: koChange,\n      component: 'button',\n    });\n\n    actions.push({\n      name: '',\n      isSection: true,\n      actions: i18nActions,\n    });\n\n    if (mobile) {\n      actions.unshift({\n        name: '',\n        isSection: true,\n        actions: [],\n      });\n\n      return <ApplicationLauncher aria-label=\"Utility menu\" className=\"co-app-launcher\" onSelect={this._onKebabDropdownSelect} onToggle={this._onKebabDropdownToggle} isOpen={isKebabDropdownOpen} items={this._renderApplicationItems(actions)} position=\"right\" toggleIcon={<EllipsisVIcon />} isGrouped />;\n    }\n\n    if (_.isEmpty(actions)) {\n      return <div className=\"co-username\"></div>;\n    }\n\n    const languageToggle = (\n      <span className=\"pf-c-dropdown__toggle\">\n        {/* i18n 키값 요청 후 적용하기 - 현재 선택된 언어를 표현하는 키값 - 한국어, 영어 */}\n        <GlobeAmericasIcon />\n        <span className=\"co-username\">Language</span>\n        <AngleDownIcon className=\"pf-c-dropdown__toggle-icon\" />\n      </span>\n    );\n\n    return <ApplicationLauncher aria-label=\"Language menu\" data-test=\"language-dropdown\" className=\"co-app-launcher co-user-menu\" onSelect={this._onLanguageDropdownSelect} onToggle={this._onLanguageDropdownToggle} isOpen={isLanguageDropdownOpen} items={this._renderApplicationItems(actions)} position=\"right\" toggleIcon={languageToggle} isGrouped />;\n  }\n\n  _tokenRefresh = () => {\n    const { keycloak } = this.props;\n    const curTime = new Date();\n    const tokenExpTime = new Date((keycloak.idTokenParsed.exp + keycloak.timeSkew) * 1000);\n    const logoutTime = (tokenExpTime.getTime() - curTime.getTime()) / 1000;\n    keycloak\n      .updateToken(Math.ceil(logoutTime))\n      .then(refreshed => {\n        console.log('refreshed', refreshed);\n        if (refreshed) {\n          // TODO: 토큰 설정\n          setAccessToken(keycloak.idToken);\n          this.timerRef.tokRefresh();\n        } else {\n          // expired time > 60\n          console.log('Token is still valid');\n        }\n      })\n      .catch(() => {\n        // refresh token 없음\n        console.log('Failed to refresh the token, or the session has expired');\n      });\n  };\n\n  render() {\n    const { isApplicationLauncherDropdownOpen, isHelpDropdownOpen, showAboutModal, statuspageData } = this.state;\n    const { consoleLinks, drawerToggle, notificationsRead, canAccessNS, keycloak, t } = this.props;\n    // TODO: notificatoin 기능 완료 되면 추가하기.\n    const alertAccess = false; //canAccessNS && !!window.SERVER_FLAGS.prometheusBaseURL;\n    return (\n      <>\n        <Toolbar>\n          <ToolbarGroup className=\"hidden-xs\">\n             <ToolbarItem>\n              <Tooltip content=\"Add\" position={TooltipPosition.bottom}>\n                <Link to=\"/add\" className=\"pf-c-button pf-m-plain\" aria-label=\"Add\">\n                  <PlusCircleIcon />\n                </Link>\n              </Tooltip>\n            </ToolbarItem>\n            <ToolbarItem>\n              <ClockIcon />\n            </ToolbarItem>\n            <ToolbarItem>\n              <ExpTimer\n                ref={input => {\n                  this.timerRef = input;\n                }}\n                logout={keycloak.logout}\n                tokenRefresh={this._tokenRefresh}\n                keycloak={keycloak}\n              />\n            </ToolbarItem>\n            <ToolbarItem>\n              <Badge\n                key={1}\n                onClick={() => {\n                  this._tokenRefresh();\n                }}\n              >\n                {t('COMMON:MSG_GNB_SESSION_1')}\n              </Badge>\n            </ToolbarItem>\n            {/* desktop -- (system status button) */}\n            <SystemStatusButton statuspageData={statuspageData} />\n            {/* desktop -- (application launcher dropdown), import yaml, help dropdown [documentation, about] */}\n            <ToolbarItem>\n              <div className=\"co-masthead__line\"></div>\n            </ToolbarItem>\n            {/* desktop -- (user dropdown [logout]) */}\n            <ToolbarItem className=\"hidden-xs\">{this._renderLanguageMenu(false)}</ToolbarItem>\n            <ToolbarItem>\n              <div className=\"co-masthead__line\"></div>\n            </ToolbarItem>{' '}\n            {/* desktop -- (notification drawer button) */\n            alertAccess && (\n              <ToolbarItem>\n                <NotificationBadge aria-label=\"Notification Drawer\" onClick={drawerToggle} isRead={notificationsRead}>\n                  <BellIcon />\n                </NotificationBadge>\n              </ToolbarItem>\n            )}\n            {/* <ToolbarItem>\n              <Tooltip content=\"Import YAML\" position={TooltipPosition.bottom}>\n                <Link to={this._getImportYAMLPath()} className=\"pf-c-button pf-m-plain\" aria-label=\"Import YAML\">\n                  <PlusCircleIcon className=\"co-masthead-icon\" />\n                </Link>\n              </Tooltip>\n            </ToolbarItem> */}\n            <CloudShellMastheadButton />\n            {/* TODO: 매뉴얼 완료 후 매뉴얼로 이동하는 링크 추가하기 */}\n            {/* <ToolbarItem className=\"co-masthead-icon__button\">\n              <QuestionCircleIcon />\n            </ToolbarItem> */}\n          </ToolbarGroup>\n          <ToolbarGroup>\n            {/* mobile -- (notification drawer button) */\n            // 기능 추가되면 완성하기\n            alertAccess && !notificationsRead && (\n              <ToolbarItem className=\"visible-xs-block\">\n                <NotificationBadge aria-label=\"Notification Drawer\" onClick={drawerToggle} isRead={notificationsRead}>\n                  <BellIcon />\n                </NotificationBadge>\n              </ToolbarItem>\n            )}\n            {/* mobile -- (system status button) */}\n            <SystemStatusButton statuspageData={statuspageData} className=\"visible-xs-block\" />\n            {/* mobile -- kebab dropdown [(application launcher |) import yaml | documentation, about (| logout)] */}\n            <ToolbarItem className=\"visible-xs-block\">{this._renderMenu(true)}</ToolbarItem>\n            <ToolbarItem className=\"hidden-xs\">{this._renderMenu(false)}</ToolbarItem>\n          </ToolbarGroup>\n        </Toolbar>\n        <AboutModal isOpen={showAboutModal} closeAboutModal={this._closeAboutModal} />\n      </>\n    );\n  }\n}\n\nconst mastheadToolbarStateToProps = state => ({\n  activeNamespace: state.UI.get('activeNamespace'),\n  clusterID: state.UI.get('clusterID'),\n  user: state.UI.get('user'),\n  consoleLinks: state.UI.get('consoleLinks'),\n  notificationsRead: !!state.UI.getIn(['notifications', 'isRead']),\n  canAccessNS: !!state[featureReducerName].get(FLAGS.CAN_GET_NS),\n});\n\nconst MastheadToolbarContents = connect(mastheadToolbarStateToProps, {\n  drawerToggle: UIActions.notificationDrawerToggleExpanded,\n})(connectToFlags(FLAGS.AUTH_ENABLED, FLAGS.CONSOLE_CLI_DOWNLOAD, FLAGS.OPENSHIFT)(withTranslation()(MastheadToolbarContents_)));\n\nexport const MastheadToolbar = connectToFlags(FLAGS.CLUSTER_VERSION)(({ flags, keycloak }) => {\n  const resources = flags[FLAGS.CLUSTER_VERSION]\n    ? [\n        {\n          kind: clusterVersionReference,\n          name: 'version',\n          isList: false,\n          prop: 'cv',\n        },\n      ]\n    : [];\n  return (\n    <Firehose resources={resources}>\n      <MastheadToolbarContents keycloak={keycloak} />\n    </Firehose>\n  );\n});\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Brand, PageHeader } from '@patternfly/react-core';\n\nimport { MastheadToolbar } from './masthead-toolbar';\nimport { history } from './utils';\nimport hcLogoImg from '../imgs/logo_symbol_text.svg';\nimport okdLogoImg from '../imgs/okd-logo.svg';\nimport openshiftLogoImg from '../imgs/openshift-logo.svg';\nimport ocpLogoImg from '../imgs/openshift-platform-logo.svg';\nimport onlineLogoImg from '../imgs/openshift-online-logo.svg';\nimport dedicatedLogoImg from '../imgs/openshift-dedicated-logo.svg';\n\nexport const getBrandingDetails = () => {\n  let logoImg, productName;\n  // Webpack won't bundle these images if we don't directly reference them, hence the switch\n  logoImg = hcLogoImg;\n  productName = 'HyperCloud';\n  if (window.SERVER_FLAGS.customLogoURL) {\n    logoImg = window.SERVER_FLAGS.customLogoURL;\n  }\n  if (window.SERVER_FLAGS.customProductName) {\n    productName = window.SERVER_FLAGS.customProductName;\n  }\n  return { logoImg, productName };\n};\n\nexport const Masthead = React.memo(({ onNavToggle, keycloak }) => {\n  const details = getBrandingDetails();\n  const defaultRoute = '/';\n  const logoProps = {\n    href: defaultRoute,\n    // use onClick to prevent browser reload\n    onClick: e => {\n      e.preventDefault();\n      history.push(defaultRoute);\n    },\n  };\n\n  return <PageHeader id=\"page-main-header\" logo={<Brand src={details.logoImg} alt={details.productName} />} logoProps={logoProps} toolbar={<MastheadToolbar keycloak={keycloak}/>} showNavToggle onNavToggle={onNavToggle} />;\n});\n\nMasthead.propTypes = {\n  onNavToggle: PropTypes.func,\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as fuzzy from 'fuzzysearch';\n\nimport { K8sKind, k8sList, k8sPatch, K8sResourceKind } from '../../module/k8s';\nimport { DeploymentModel, DeploymentConfigModel, StatefulSetModel } from '../../models';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport { Dropdown, history, ResourceIcon, ResourceName, resourcePathFromModel } from '../utils';\nimport { RadioInput } from '../radio';\n\nconst workloadResourceModels = [DeploymentModel, DeploymentConfigModel, StatefulSetModel];\nconst getContainers = (workload: K8sResourceKind) =>\n  _.get(workload, 'spec.template.spec.containers') || [];\n\nexport class AddSecretToWorkloadModal extends React.Component<\n  AddSecretToWorkloadModalProps,\n  AddSecretToWorkloadModalState\n> {\n  state = {\n    inProgress: false,\n    errorMessage: '',\n    workloadOptions: {},\n    workloadsByUID: {},\n    selectedWorkloadUID: '',\n    addAs: 'environment',\n    prefix: '',\n    mountPath: '',\n  };\n\n  componentDidMount() {\n    const { namespace } = this.props;\n    const opts = { ns: namespace };\n    Promise.all(\n      workloadResourceModels.map((model) => {\n        return k8sList(model, opts)\n          .catch((err) => {\n            const errorMessage = err.message;\n            this.setState({ errorMessage });\n            return [];\n          })\n          .then((res: K8sResourceKind[]): WorkloadItem[] => res.map((obj) => ({ model, obj })));\n      }),\n    ).then((responses) => {\n      // TODO: Group by kind.\n      const allItems: WorkloadItem[] = _.flatten(responses);\n      const workloadsByUID = _.keyBy(allItems, 'obj.metadata.uid');\n      const sortedItems = _.orderBy(allItems, ['obj.metadata.name', 'model.kind'], ['asc', 'asc']);\n      const workloadOptions = _.reduce(\n        sortedItems,\n        (options, item) => {\n          const { name, uid } = item.obj.metadata;\n          options[uid] = <ResourceName kind={item.model.kind} name={name} />;\n          return options;\n        },\n        {},\n      );\n      this.setState({ workloadOptions, workloadsByUID });\n    });\n  }\n\n  autocompleteFilter(text, item) {\n    return fuzzy(text, item.props.name);\n  }\n\n  onWorkloadChange = (selectedWorkloadUID: string) => {\n    this.setState({ selectedWorkloadUID });\n  };\n\n  handleChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState({\n      [name]: value,\n    } as any);\n  };\n\n  onAddAsChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({\n      addAs: event.currentTarget.value,\n    });\n  };\n\n  getEnvPatches(obj) {\n    const { secretName } = this.props;\n    const { prefix } = this.state;\n    const envFrom = {\n      secretRef: {\n        name: secretName,\n      },\n      prefix,\n    };\n\n    // Add `envFrom` to all containers.\n    // TODO: Let use the user pick the container.\n    const containers = getContainers(obj);\n    const patches = containers.map((container, i) => {\n      // Create the array if it doesn't exist. Append to the array otherwise.\n      const containerPatch = _.isEmpty(container.envFrom)\n        ? { op: 'add', path: `/spec/template/spec/containers/${i}/envFrom`, value: [envFrom] }\n        : { op: 'add', path: `/spec/template/spec/containers/${i}/envFrom/-`, value: envFrom };\n      return containerPatch;\n    });\n\n    return patches;\n  }\n\n  getVolumePatches(obj) {\n    const { secretName } = this.props;\n    const { mountPath } = this.state;\n    const mount = {\n      name: secretName,\n      readOnly: true,\n      mountPath,\n    };\n\n    // Add a volume mount to all containers.\n    // TODO: Let use the user pick the container.\n    const containers = getContainers(obj);\n    const patches = containers.map((container, i) => {\n      // Create the array if it doesn't exist. Append to the array otherwise.\n      const containerPatch = _.isEmpty(container.volumeMounts)\n        ? { op: 'add', path: `/spec/template/spec/containers/${i}/volumeMounts`, value: [mount] }\n        : { op: 'add', path: `/spec/template/spec/containers/${i}/volumeMounts/-`, value: mount };\n      return containerPatch;\n    });\n\n    const volume = {\n      name: secretName,\n      secret: { secretName },\n    };\n    const existingVolumes = _.get(obj, 'spec.template.spec.volumes');\n\n    // Create the array if it doesn't exist. Append to the array otherwise.\n    const volumePatch = _.isEmpty(existingVolumes)\n      ? { op: 'add', path: '/spec/template/spec/volumes', value: [volume] }\n      : { op: 'add', path: '/spec/template/spec/volumes/-', value: volume };\n    return [...patches, volumePatch];\n  }\n\n  getPatches(obj) {\n    return this.state.addAs === 'environment'\n      ? this.getEnvPatches(obj)\n      : this.getVolumePatches(obj);\n  }\n\n  submit = (event: React.FormEvent<EventTarget>) => {\n    event.preventDefault();\n\n    const { workloadsByUID, selectedWorkloadUID } = this.state;\n    if (!selectedWorkloadUID) {\n      this.setState({ errorMessage: 'You must select a workload.' });\n      return;\n    }\n\n    this.setState({ inProgress: true, errorMessage: '' });\n\n    const workload = workloadsByUID[selectedWorkloadUID];\n    const { model, obj } = workload;\n    const patches = this.getPatches(obj);\n    k8sPatch(model, obj, patches)\n      .then(() => {\n        this.setState({ inProgress: false });\n        this.props.close();\n        const { name, namespace } = obj.metadata;\n        history.push(resourcePathFromModel(model, name, namespace));\n      })\n      .catch(({ message: errorMessage }) => this.setState({ inProgress: false, errorMessage }));\n  };\n\n  render() {\n    const { secretName } = this.props;\n    const { addAs, workloadOptions, selectedWorkloadUID } = this.state;\n    const addAsEnvironment = addAs === 'environment';\n    const addAsVolume = addAs === 'volume';\n    const selectWorkloadPlaceholder = 'Select a workload';\n\n    return (\n      <form\n        onSubmit={this.submit}\n        name=\"co-add-secret-to-workload\"\n        className=\"co-add-secret-to-workload modal-content\"\n      >\n        <ModalTitle>Add Secret to Workload</ModalTitle>\n        <ModalBody>\n          <p>\n            Add all values from <ResourceIcon kind=\"Secret\" />\n            {secretName} to a workload as environment variables or a volume.\n          </p>\n          <div className=\"form-group\">\n            <label\n              className=\"control-label co-required\"\n              htmlFor=\"co-add-secret-to-workload__workload\"\n            >\n              Add this secret to workload\n            </label>\n            <Dropdown\n              items={workloadOptions}\n              selectedKey={selectedWorkloadUID}\n              title={selectWorkloadPlaceholder}\n              onChange={this.onWorkloadChange}\n              autocompleteFilter={this.autocompleteFilter}\n              autocompletePlaceholder={selectWorkloadPlaceholder}\n              id=\"co-add-secret-to-workload__workload\"\n            />\n          </div>\n          <fieldset>\n            <legend className=\"co-legend co-required\">Add secret as</legend>\n            <RadioInput\n              title=\"Environment Variables\"\n              name=\"co-add-secret-to-workload__add-as\"\n              id=\"co-add-secret-to-workload__envvars\"\n              value=\"environment\"\n              onChange={this.onAddAsChange}\n              checked={addAsEnvironment}\n            />\n            {addAsEnvironment && (\n              <div className=\"co-m-radio-desc\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"co-add-secret-to-workload__prefix\">Prefix</label>\n                  <input\n                    className=\"pf-c-form-control\"\n                    name=\"prefix\"\n                    id=\"co-add-secret-to-workload__prefix\"\n                    placeholder=\"(optional)\"\n                    type=\"text\"\n                    onChange={this.handleChange}\n                  />\n                </div>\n              </div>\n            )}\n            <RadioInput\n              title=\"Volume\"\n              name=\"co-add-secret-to-workload__add-as\"\n              id=\"co-add-secret-to-workload__volume\"\n              value=\"volume\"\n              onChange={this.onAddAsChange}\n              checked={addAsVolume}\n            />\n            {addAsVolume && (\n              <div className=\"co-m-radio-desc\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"co-add-secret-to-workload__mountpath\" className=\"co-required\">\n                    Mount Path\n                  </label>\n                  <input\n                    className=\"pf-c-form-control\"\n                    name=\"mountPath\"\n                    id=\"co-add-secret-to-workload__mountpath\"\n                    type=\"text\"\n                    onChange={this.handleChange}\n                    required\n                  />\n                </div>\n              </div>\n            )}\n          </fieldset>\n        </ModalBody>\n        <ModalSubmitFooter\n          errorMessage={this.state.errorMessage}\n          inProgress={this.state.inProgress}\n          submitText=\"Save\"\n          cancel={this.props.cancel}\n        />\n      </form>\n    );\n  }\n}\n\nexport const configureAddSecretToWorkloadModal = createModalLauncher<AddSecretToWorkloadModalProps>(\n  AddSecretToWorkloadModal,\n);\n\ntype WorkloadItem = {\n  model: K8sKind;\n  obj: K8sResourceKind;\n};\n\nexport type AddSecretToWorkloadModalProps = {\n  cancel: () => void;\n  close: () => void;\n  secretName: string;\n  namespace: string;\n  blocking?: boolean;\n};\n\nexport type AddSecretToWorkloadModalState = {\n  inProgress: boolean;\n  errorMessage: string;\n  workloadOptions: {\n    [uid: string]: React.ReactNode;\n  };\n  workloadsByUID: {\n    [uid: string]: WorkloadItem;\n  };\n  selectedWorkloadUID: string;\n  addAs: string;\n  prefix: string;\n  mountPath: string;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as semver from 'semver';\n\nimport { ClusterVersionModel } from '../../models';\nimport { Dropdown, PromiseComponent } from '../utils';\nimport {\n  ClusterUpdate,\n  ClusterVersionKind,\n  getAvailableClusterUpdates,\n  getDesiredClusterVersion,\n  k8sPatch,\n} from '../../module/k8s';\nimport {\n  createModalLauncher,\n  ModalBody,\n  ModalComponentProps,\n  ModalSubmitFooter,\n  ModalTitle,\n} from '../factory/modal';\n\nexport const getSortedUpdates = (cv: ClusterVersionKind): ClusterUpdate[] => {\n  const available = getAvailableClusterUpdates(cv) || [];\n  try {\n    return available.sort(({ version: left }, { version: right }) => semver.rcompare(left, right));\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('error sorting cluster updates', e);\n    return available;\n  }\n};\n\nclass ClusterUpdateModal extends PromiseComponent<\n  ClusterUpdateModalProps,\n  ClusterUpdateModalState\n> {\n  readonly state: ClusterUpdateModalState;\n\n  constructor(public props: ClusterUpdateModalProps) {\n    super(props);\n    const available = getSortedUpdates(props.cv);\n    this.state.selectedVersion = _.get(available, '[0].version', '');\n  }\n\n  _submit = (e: React.FormEvent<EventTarget>) => {\n    e.preventDefault();\n    const { selectedVersion } = this.state;\n    if (!selectedVersion) {\n      return;\n    }\n    const { cv } = this.props;\n    const available = getAvailableClusterUpdates(cv);\n    const desired = _.find(available, { version: selectedVersion });\n    if (!desired) {\n      this.setState({\n        errorMessage: `Version ${selectedVersion} not found among the available updates. Select another version.`,\n      });\n      return;\n    }\n\n    // Clear any previous error message.\n    this.setState({ errorMessage: '' });\n    const patch = [{ op: 'add', path: '/spec/desiredUpdate', value: desired }];\n    this.handlePromise(k8sPatch(ClusterVersionModel, cv, patch)).then(this.props.close);\n  };\n\n  _cancel = () => {\n    this.props.close();\n  };\n\n  _change = (selectedVersion: string) => {\n    this.setState({ selectedVersion });\n  };\n\n  render() {\n    const { cv } = this.props;\n    const { selectedVersion } = this.state;\n    const availableUpdates = getSortedUpdates(cv);\n    const currentVersion = getDesiredClusterVersion(cv);\n    const dropdownItems = _.reduce(\n      availableUpdates,\n      (acc, { version }) => {\n        acc[version] = version;\n        return acc;\n      },\n      {},\n    );\n    return (\n      <form\n        onSubmit={this._submit}\n        name=\"form\"\n        className=\"modal-content modal-content--no-inner-scroll\"\n      >\n        <ModalTitle>Update Cluster</ModalTitle>\n        <ModalBody>\n          {/* <p>\n          // TODO: Determine what content goes here.\n        </p> */}\n          <div className=\"form-group\">\n            <label>Current Version</label>\n            <p>{currentVersion}</p>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"version_dropdown\">Select New Version</label>\n            <Dropdown\n              className=\"cluster-update-modal__dropdown\"\n              id=\"version_dropdown\"\n              items={dropdownItems}\n              onChange={this._change}\n              selectedKey={selectedVersion}\n              title=\"Select Version\"\n            />\n          </div>\n        </ModalBody>\n        <ModalSubmitFooter\n          errorMessage={this.state.errorMessage}\n          inProgress={this.state.inProgress}\n          submitText=\"Update\"\n          cancel={this._cancel}\n        />\n      </form>\n    );\n  }\n}\n\nexport const clusterUpdateModal = createModalLauncher(ClusterUpdateModal);\n\ntype ClusterUpdateModalProps = {\n  cv: ClusterVersionKind;\n} & ModalComponentProps;\n\ntype ClusterUpdateModalState = {\n  selectedVersion: string;\n  inProgress: boolean;\n  errorMessage: string;\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport { PromiseComponent } from '../utils';\n\nclass ConfirmModal extends PromiseComponent {\n  constructor(props) {\n    super(props);\n    this._submit = this._submit.bind(this);\n    this._cancel = this.props.cancel.bind(this);\n  }\n\n  _submit(event) {\n    event.preventDefault();\n\n    this.handlePromise(\n      this.props.executeFn(null, {\n        supressNotifications: true,\n      }),\n    ).then(this.props.close);\n  }\n\n  render() {\n    return (\n      <form onSubmit={this._submit} name=\"form\" className=\"modal-content\">\n        <ModalTitle>{this.props.title}</ModalTitle>\n        <ModalBody>{this.props.message}</ModalBody>\n        <ModalSubmitFooter\n          errorMessage={this.state.errorMessage}\n          inProgress={this.state.inProgress}\n          submitText={this.props.btnText || 'Confirm'}\n          cancel={this._cancel}\n          cancelText={this.props.cancelText || 'Cancel'}\n          submitDanger={this.props.submitDanger}\n        />\n      </form>\n    );\n  }\n}\nConfirmModal.propTypes = {\n  btnText: PropTypes.node,\n  cancel: PropTypes.func.isRequired,\n  cancelText: PropTypes.node,\n  close: PropTypes.func.isRequired,\n  executeFn: PropTypes.func.isRequired,\n  message: PropTypes.node,\n  title: PropTypes.node.isRequired,\n  submitDanger: PropTypes.bool,\n};\n\nexport const confirmModal = createModalLauncher(ConfirmModal);\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\n\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport { PromiseComponent, history, resourceListPathFromModel } from '../utils';\nimport { k8sKill } from '../../module/k8s/';\nimport { YellowExclamationTriangleIcon } from '@console/shared';\nimport { withTranslation } from 'react-i18next';\n//Modal for resource deletion and allows cascading deletes if propagationPolicy is provided for the enum\nclass DeleteModal extends PromiseComponent {\n  constructor(props) {\n    super(props);\n    this._submit = this._submit.bind(this);\n    this._cancel = this.props.cancel.bind(this);\n    this.state = Object.assign(this.state, {\n      isChecked: true,\n    });\n  }\n\n  _submit(event) {\n    event.preventDefault();\n    const { kind, resource } = this.props;\n\n    //https://kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/\n    const propagationPolicy = this.state.isChecked ? kind.propagationPolicy : 'Orphan';\n    const json = propagationPolicy ? { kind: 'DeleteOptions', apiVersion: 'v1', propagationPolicy } : null;\n\n    this.handlePromise(k8sKill(kind, resource, {}, json)).then(() => {\n      this.props.close();\n\n      // If we are currently on the deleted resource's page, redirect to the resource list page\n      const re = new RegExp(`/${resource.metadata.name}(/|$)`);\n      if (re.test(window.location.pathname)) {\n        const listPath = this.props.redirectTo ? this.props.redirectTo : resourceListPathFromModel(kind, _.get(resource, 'metadata.namespace'));\n        history.push(listPath);\n      }\n    });\n  }\n\n  _onChecked() {\n    this.checked = !this.checked;\n  }\n\n  render() {\n    const { kind, resource, message, t } = this.props;\n    const resourceUpperCase = kind.label.toUpperCase();\n    return (\n      <form onSubmit={this._submit} name=\"form\" className=\"modal-content \">\n        <ModalTitle>\n          <YellowExclamationTriangleIcon className=\"co-icon-space-r\" />\n          {t('COMMON:MSG_MAIN_ACTIONBUTTON_16', { 0: t(resourceUpperCase) })}?\n        </ModalTitle>\n        <ModalBody className=\"modal-body\">\n          {message}\n          <div>\n            Are you sure you want to delete <strong className=\"co-break-word\">{resource.metadata.name}</strong>\n            {_.has(resource.metadata, 'namespace') && (\n              <span>\n                {' '}\n                in namespace <strong>{resource.metadata.namespace}</strong>\n              </span>\n            )}\n            ?\n            {_.has(kind, 'propagationPolicy') && (\n              <div className=\"checkbox\">\n                <label className=\"control-label\">\n                  <input type=\"checkbox\" onChange={() => this.setState({ isChecked: !this.state.isChecked })} checked={!!this.state.isChecked} />\n                  Delete dependent objects of this resource\n                </label>\n              </div>\n            )}\n          </div>\n        </ModalBody>\n        <ModalSubmitFooter errorMessage={this.state.errorMessage} inProgress={this.state.inProgress} submitDanger submitText={this.props.btnText || `${t('DELETE')}`} cancel={this._cancel} />\n      </form>\n    );\n  }\n}\n\nexport const deleteModal = createModalLauncher(withTranslation()(DeleteModal));\n","import * as React from 'react';\nimport { ActionGroup, Button } from '@patternfly/react-core';\n\nimport { createModalLauncher, ModalTitle, ModalBody, ModalFooter } from '../factory/modal';\n\nexport const ModalErrorContent = ({ error, title = 'Error', cancel = undefined }) => (\n  <div className=\"modal-content\">\n    <ModalTitle>{title}</ModalTitle>\n    <ModalBody>{error}</ModalBody>\n    <ModalFooter inProgress={false} errorMessage=\"\">\n      <ActionGroup className=\"pf-c-form pf-c-form__actions--right pf-c-form__group--no-top-margin\">\n        <Button type=\"button\" variant=\"secondary\" onClick={cancel}>\n          OK\n        </Button>\n      </ActionGroup>\n    </ModalFooter>\n  </div>\n);\n\nexport const errorModal = createModalLauncher(ModalErrorContent);\n","// This module utilizes dynamic `import()` to enable lazy-loading for each modal instead of including them in the main bundle.\n\n// Helper to detect if a modal is open. This is used to disable autofocus in elements under a modal.\n// TODO: Improve focus and keybinding handling, see https://issues.redhat.com/browse/ODC-3554\nexport const isModalOpen = () => document.body.classList.contains('ReactModal__Body--open');\n\nexport const configureCountModal = (props) =>\n  import('./configure-count-modal' /* webpackChunkName: \"configure-count-modal\" */).then((m) =>\n    m.configureCountModal(props),\n  );\n\nexport const configureReplicaCountModal = (props) =>\n  import('./configure-count-modal' /* webpackChunkName: \"configure-count-modal\" */).then((m) =>\n    m.configureReplicaCountModal(props),\n  );\n\nexport const configureJobParallelismModal = (props) =>\n  import('./configure-count-modal' /* webpackChunkName: \"configure-count-modal\" */).then((m) =>\n    m.configureJobParallelismModal(props),\n  );\n\nexport const confirmModal = (props) =>\n  import('./confirm-modal' /* webpackChunkName: \"confirm-modal\" */).then((m) =>\n    m.confirmModal(props),\n  );\n\nexport const createNamespaceModal = (props) =>\n  import('./create-namespace-modal' /* webpackChunkName: \"create-namespace-modal\" */).then((m) =>\n    m.createNamespaceModal(props),\n  );\n\nexport const createProjectModal = (props) =>\n  import('./create-namespace-modal' /* webpackChunkName: \"create-namespace-modal\" */).then((m) =>\n    m.createProjectModal(props),\n  );\n\nexport const deleteNamespaceModal = (props) =>\n  import('./delete-namespace-modal' /* webpackChunkName: \"delete-namespace-modal\" */).then((m) =>\n    m.deleteNamespaceModal(props),\n  );\n\nexport const errorModal = (props) =>\n  import('./error-modal' /* webpackChunkName: \"error-modal\" */).then((m) => m.errorModal(props));\n\nexport const configureNamespacePullSecretModal = (props) =>\n  import(\n    './configure-ns-pull-secret-modal' /* webpackChunkName: \"configure-ns-pull-secret-modal\" */\n  ).then((m) => m.configureNamespacePullSecretModal(props));\n\nexport const labelsModal = (props) =>\n  import('./labels-modal' /* webpackChunkName: \"labels-modal\" */).then((m) => m.labelsModal(props));\n\nexport const podSelectorModal = (props) =>\n  import('./labels-modal' /* webpackChunkName: \"labels-modal\" */).then((m) =>\n    m.podSelectorModal(props),\n  );\n\nexport const configureUpdateStrategyModal = (props) =>\n  import(\n    './configure-update-strategy-modal' /* webpackChunkName: \"configure-update-strategy-modal\" */\n  ).then((m) => m.configureUpdateStrategyModal(props));\n\nexport const annotationsModal = (props) =>\n  import('./tags' /* webpackChunkName: \"tags\" */).then((m) => m.annotationsModal(props));\n\nexport const deleteModal = (props) =>\n  import('./delete-modal' /* webpackChunkName: \"delete-modal\" */).then((m) => m.deleteModal(props));\n\nexport const clusterChannelModal = (props) =>\n  import('./cluster-channel-modal' /* webpackChunkName: \"cluster-channel-modal\" */).then((m) =>\n    m.clusterChannelModal(props),\n  );\n\nexport const clusterUpdateModal = (props) =>\n  import('./cluster-update-modal' /* webpackChunkName: \"cluster-update-modal\" */).then((m) =>\n    m.clusterUpdateModal(props),\n  );\n\nexport const taintsModal = (props) =>\n  import('./taints-modal' /* webpackChunkName: \"taints-modal\" */).then((m) => m.taintsModal(props));\n\nexport const tolerationsModal = (props) =>\n  import('./tolerations-modal' /* webpackChunkName: \"tolerations-modal\" */).then((m) =>\n    m.tolerationsModal(props),\n  );\n\nexport const expandPVCModal = (props) =>\n  import('./expand-pvc-modal' /* webpackChunkName: \"expand-pvc-modal\" */).then((m) =>\n    m.expandPVCModal(props),\n  );\n\nexport const removeVolumeModal = (props) =>\n  import('./remove-volume-modal' /* webpackChunkName: \"remove-volume-modal\" */).then((m) =>\n    m.removeVolumeModal(props),\n  );\n\nexport const configureMachineAutoscalerModal = (props) =>\n  import(\n    './configure-machine-autoscaler-modal' /* webpackChunkName: \"configure-machine-autoscaler-modal\" */\n  ).then((m) => m.configureMachineAutoscalerModal(props));\n\nexport const createAlertRoutingModal = (props) =>\n  import('./alert-routing-modal' /* webpackChunkName: \"alert-routing-modal\" */).then((m) =>\n    m.createAlertRoutingModal(props),\n  );\n\nexport const addUsersModal = (props) =>\n  import('./add-users-modal' /* webpackChunkName: \"add-users-modal\" */).then((m) =>\n    m.addUsersModal(props),\n  );\n\nexport const removeUserModal = (props) =>\n  import('./remove-user-modal' /* webpackChunkName: \"remove-user-modal\" */).then((m) =>\n    m.removeUserModal(props),\n  );\n","import * as classNames from 'classnames';\nimport * as _ from 'lodash-es';\nimport { murmur3 } from 'murmurhash-js';\nimport {\n  Alert,\n  ActionGroup,\n  Badge,\n  Button,\n  TextArea,\n  TextInput,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { Link, Redirect, Route, Switch } from 'react-router-dom';\nimport {\n  BanIcon,\n  BellIcon,\n  BellSlashIcon,\n  HourglassHalfIcon,\n  MinusCircleIcon,\n  OutlinedBellIcon,\n  PlusCircleIcon,\n} from '@patternfly/react-icons';\n\nimport { withFallback } from '@console/shared/src/components/error/error-boundary';\nimport * as k8sActions from '../actions/k8s';\nimport * as UIActions from '../actions/ui';\nimport { coFetchJSON } from '../co-fetch';\nimport {\n  ContainerModel,\n  DaemonSetModel,\n  DeploymentModel,\n  JobModel,\n  NamespaceModel,\n  NodeModel,\n  PodModel,\n  StatefulSetModel,\n} from '../models';\nimport { K8sKind } from '../module/k8s';\nimport {\n  alertDescription,\n  alertingRuleIsActive,\n  AlertSeverity,\n  alertState,\n  AlertStates,\n  silenceState,\n  SilenceStates,\n} from '../reducers/monitoring';\nimport store, { RootState } from '../redux';\nimport { RowFunction, Table, TableData, TableRow, TextFilter } from './factory';\nimport { confirmModal } from './modals';\nimport MonitoringDashboardsPage from './monitoring/dashboards';\nimport { graphStateToProps, QueryBrowserPage, ToggleGraph } from './monitoring/metrics';\nimport { PrometheusLabels } from './graphs';\nimport { QueryBrowser, QueryObj } from './monitoring/query-browser';\nimport { CheckBoxes } from './row-filter';\nimport { AlertmanagerYAMLEditorWrapper } from './monitoring/alert-manager-yaml-editor';\nimport { AlertmanagerConfigWrapper } from './monitoring/alert-manager-config';\nimport { refreshNotificationPollers } from './notification-drawer';\nimport { ActionsMenu, Dropdown } from './utils/dropdown';\nimport { ButtonBar } from './utils/button-bar';\nimport { ExternalLink, getURLSearchParams } from './utils/link';\nimport { Firehose } from './utils/firehose';\nimport { history } from './utils/router';\nimport { Kebab } from './utils/kebab';\nimport { ResourceLink } from './utils/resource-link';\nimport { LoadingInline, StatusBox } from './utils/status-box';\nimport { SectionHeading, ActionButtons } from './utils/headings';\nimport { Timestamp } from './utils/timestamp';\nimport { formatPrometheusDuration, parsePrometheusDuration } from './utils/datetime';\nimport {\n  BlueInfoCircleIcon,\n  GreenCheckCircleIcon,\n  RedExclamationCircleIcon,\n  YellowExclamationTriangleIcon,\n} from '@console/shared';\n\nconst AlertResource = {\n  kind: 'Alert',\n  label: 'Alert',\n  plural: '/monitoring/alerts',\n  abbr: 'AL',\n};\n\nconst RuleResource = {\n  kind: 'AlertRule',\n  label: 'Alerting Rule',\n  plural: '/monitoring/alertrules',\n  abbr: 'AR',\n};\n\nconst SilenceResource = {\n  kind: 'Silence',\n  label: 'Silence',\n  plural: '/monitoring/silences',\n  abbr: 'SL',\n};\n\nconst labelsToParams = (labels) =>\n  _.map(labels, (v, k) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`).join('&');\n\nexport const alertURL = (alert, ruleID) =>\n  `${AlertResource.plural}/${ruleID}?${labelsToParams(alert.labels)}`;\nconst ruleURL = (rule) => `${RuleResource.plural}/${_.get(rule, 'id')}`;\n\nconst alertsToProps = ({ UI }) => UI.getIn(['monitoring', 'alerts']) || {};\n\nconst rulesToProps = (state: RootState) => {\n  const data = state.UI.getIn(['monitoring', 'rules']);\n  const { loaded, loadError }: Alerts = alertsToProps(state);\n  return { data, loaded, loadError };\n};\n\nconst silencesToProps = ({ UI }) => UI.getIn(['monitoring', 'silences']) || {};\n\nconst pollers = {};\nconst pollerTimeouts = {};\n\nconst silenceAlert = (alert: Alert) => ({\n  callback: () => history.replace(`${SilenceResource.plural}/~new?${labelsToParams(alert.labels)}`),\n  label: 'Silence Alert',\n});\n\nconst viewAlertRule = (alert: Alert) => ({\n  label: 'View Alerting Rule',\n  href: ruleURL(alert.rule),\n});\n\nconst editSilence = (silence: Silence) => ({\n  label: silenceState(silence) === SilenceStates.Expired ? 'Recreate Silence' : 'Edit Silence',\n  href: `${SilenceResource.plural}/${silence.id}/edit`,\n});\n\nconst cancelSilence = (silence: Silence) => ({\n  label: 'Expire Silence',\n  callback: () =>\n    confirmModal({\n      title: 'Expire Silence',\n      message: 'Are you sure you want to expire this silence?',\n      btnText: 'Expire Silence',\n      executeFn: () =>\n        coFetchJSON\n          .delete(`${window.SERVER_FLAGS.alertManagerBaseURL}/api/v1/silence/${silence.id}`)\n          .then(() => refreshNotificationPollers()),\n    }),\n});\n\nconst silenceMenuActions = (silence: Silence) =>\n  silenceState(silence) === SilenceStates.Expired\n    ? [editSilence(silence)]\n    : [editSilence(silence), cancelSilence(silence)];\n\nconst SilenceKebab = ({ silence }) => <Kebab options={silenceMenuActions(silence)} />;\n\nconst SilenceActionsMenu = ({ silence }) => (\n  <div className=\"co-actions\" data-test-id=\"details-actions\">\n    <ActionsMenu actions={silenceMenuActions(silence)} />\n  </div>\n);\n\nconst MonitoringResourceIcon = (props) => {\n  const { className, resource } = props;\n  return (\n    <span\n      className={classNames(\n        `co-m-resource-icon co-m-resource-${resource.kind.toLowerCase()}`,\n        className,\n      )}\n      title={resource.label}\n    >\n      {resource.abbr}\n    </span>\n  );\n};\n\nconst stateIcons = {\n  [AlertStates.Firing]: <BellIcon />,\n  [AlertStates.Silenced]: <BellSlashIcon className=\"text-muted\" />,\n  [AlertStates.Pending]: <OutlinedBellIcon />,\n};\n\nconst AlertState: React.SFC<AlertStateProps> = ({ state }) => {\n  const icon = stateIcons[state];\n  return icon ? (\n    <>\n      {icon} {_.startCase(state)}\n    </>\n  ) : null;\n};\n\nconst SilenceState = ({ silence }) => {\n  const state = silenceState(silence);\n  const icon = {\n    [SilenceStates.Active]: <GreenCheckCircleIcon />,\n    [SilenceStates.Pending]: <HourglassHalfIcon className=\"monitoring-state-icon--pending\" />,\n    [SilenceStates.Expired]: <BanIcon className=\"text-muted\" data-test-id=\"ban-icon\" />,\n  }[state];\n  return icon ? (\n    <>\n      {icon} {_.startCase(state)}\n    </>\n  ) : null;\n};\n\nconst StateTimestamp = ({ text, timestamp }) => (\n  <div className=\"text-muted monitoring-timestamp\">\n    {text}&nbsp;\n    <Timestamp timestamp={timestamp} />\n  </div>\n);\n\nconst AlertStateDescription = ({ alert }) => {\n  if (alert && !_.isEmpty(alert.silencedBy)) {\n    return <StateTimestamp text=\"Ends\" timestamp={_.max(_.map(alert.silencedBy, 'endsAt'))} />;\n  }\n  if (alert && alert.activeAt) {\n    return <StateTimestamp text=\"Since\" timestamp={alert.activeAt} />;\n  }\n  return null;\n};\n\nconst severityIcons = {\n  [AlertSeverity.Critical]: RedExclamationCircleIcon,\n  [AlertSeverity.Info]: BlueInfoCircleIcon,\n  [AlertSeverity.None]: BlueInfoCircleIcon,\n  [AlertSeverity.Warning]: YellowExclamationTriangleIcon,\n};\n\nconst SeverityIcon: React.FC<{ severity: string }> = ({ severity }) => {\n  const Icon = severityIcons[severity] || YellowExclamationTriangleIcon;\n  return <Icon />;\n};\n\nconst Severity: React.FC<{ severity: string }> = ({ severity }) =>\n  _.isNil(severity) ? (\n    <>-</>\n  ) : (\n    <>\n      <SeverityIcon severity={severity} /> {_.startCase(severity)}\n    </>\n  );\n\nconst SeverityBadge: React.FC<{ severity: string }> = ({ severity }) =>\n  _.isNil(severity) || severity === 'none' ? null : (\n    <span className=\"co-resource-item__resource-status\">\n      <Badge className=\"co-resource-item__resource-status-badge\" isRead>\n        <Severity severity={severity} />\n      </Badge>\n    </span>\n  );\n\nconst SeverityCounts: React.FC<{ alerts: Alert[] }> = ({ alerts }) => {\n  if (_.isEmpty(alerts)) {\n    return <>-</>;\n  }\n\n  const counts = _.countBy(alerts, (a) => {\n    const { severity } = a.labels;\n    return severity === AlertSeverity.Critical || severity === AlertSeverity.Warning\n      ? severity\n      : AlertSeverity.Info;\n  });\n\n  const severities = [AlertSeverity.Critical, AlertSeverity.Warning, AlertSeverity.Info].filter(\n    (s) => counts[s] > 0,\n  );\n\n  return (\n    <>\n      {severities.map((s) => (\n        <span className=\"monitoring-icon-wrap\" key={s}>\n          <SeverityIcon severity={s} /> {counts[s]}\n        </span>\n      ))}\n    </>\n  );\n};\n\nconst StateCounts: React.FC<{ alerts: PrometheusAlert[] }> = ({ alerts }) => {\n  const counts = _.countBy(alerts, 'state');\n  const states = [AlertStates.Firing, AlertStates.Pending, AlertStates.Silenced].filter(\n    (s) => counts[s] > 0,\n  );\n\n  return (\n    <>\n      {states.map((s) => (\n        <span className=\"monitoring-icon-wrap\" key={s}>\n          {stateIcons[s]} {counts[s]} {_.startCase(s)}\n        </span>\n      ))}\n    </>\n  );\n};\n\nconst Annotation = ({ children, title }) =>\n  _.isNil(children) ? null : (\n    <>\n      <dt>{title}</dt>\n      <dd>{children}</dd>\n    </>\n  );\n\nconst Label = ({ k, v }) => (\n  <div className=\"co-m-label co-m-label--expand\" key={k}>\n    <span className=\"co-m-label__key\">{k}</span>\n    <span className=\"co-m-label__eq\">=</span>\n    <span className=\"co-m-label__value\">{v}</span>\n  </div>\n);\n\nconst queryBrowserURL = (query) => `/monitoring/query-browser?query0=${encodeURIComponent(query)}`;\n\nconst Graph_: React.FC<GraphProps> = ({\n  deleteAll,\n  filterLabels = undefined,\n  hideGraphs,\n  patchQuery,\n  rule,\n}) => {\n  const { duration = 0, query = '' } = rule || {};\n\n  // Set the query in Redux so that other components like the graph tooltip can access it\n  React.useEffect(() => {\n    patchQuery(0, { query });\n  }, [patchQuery, query]);\n\n  // Clear queries on unmount\n  React.useEffect(() => deleteAll, [deleteAll]);\n\n  const queries = React.useMemo(() => [query], [query]);\n\n  if (hideGraphs) {\n    return null;\n  }\n\n  // 3 times the rule's duration, but not less than 30 minutes\n  const timespan = Math.max(3 * duration, 30 * 60) * 1000;\n\n  const GraphLink = () => (query ? <Link to={queryBrowserURL(query)}>View in Metrics</Link> : null);\n\n  return (\n    <QueryBrowser\n      defaultTimespan={timespan}\n      filterLabels={filterLabels}\n      GraphLink={GraphLink}\n      queries={queries}\n    />\n  );\n};\nconst Graph = connect(graphStateToProps, {\n  deleteAll: UIActions.queryBrowserDeleteAllQueries,\n  patchQuery: UIActions.queryBrowserPatchQuery,\n})(Graph_);\n\nconst tableSilenceClasses = [\n  classNames('col-sm-5', 'col-xs-8'),\n  classNames('col-md-2', 'col-sm-3', 'hidden-xs'),\n  classNames('col-md-3', 'col-sm-4'),\n  classNames('col-md-2', 'hidden-sm'),\n  Kebab.columnClass,\n];\n\nconst silenceTableHeader = () => [\n  {\n    title: 'Name',\n    sortField: 'name',\n    transforms: [sortable],\n    props: { className: tableSilenceClasses[0] },\n  },\n  {\n    title: 'Firing Alerts',\n    sortFunc: 'silenceFiringAlertsOrder',\n    transforms: [sortable],\n    props: { className: tableSilenceClasses[1] },\n  },\n  {\n    title: 'State',\n    sortFunc: 'silenceStateOrder',\n    transforms: [sortable],\n    props: { className: tableSilenceClasses[2] },\n  },\n  {\n    title: 'Creator',\n    sortField: 'createdBy',\n    transforms: [sortable],\n    props: { className: tableSilenceClasses[3] },\n  },\n  {\n    title: '',\n    props: { className: tableSilenceClasses[4] },\n  },\n];\n\nconst silenceTableHeaderNoSort = () =>\n  silenceTableHeader().map((h) => _.pick(h, ['title', 'props']));\n\nconst SilenceMatchersList = ({ silence }) => (\n  <div className={`co-text-${SilenceResource.kind.toLowerCase()}`}>\n    {_.map(silence.matchers, ({ name, isRegex, value }, i) => (\n      <Label key={i} k={name} v={isRegex ? `~${value}` : value} />\n    ))}\n  </div>\n);\n\nconst SilenceTableRow: RowFunction<Silence> = ({ index, key, obj, style }) => {\n  const { createdBy, endsAt, firingAlerts, id, name, startsAt } = obj;\n  const state = silenceState(obj);\n\n  return (\n    <TableRow id={id} index={index} trKey={key} style={style}>\n      <TableData className={tableSilenceClasses[0]}>\n        <div className=\"co-resource-item\">\n          <MonitoringResourceIcon resource={SilenceResource} />\n          <Link\n            className=\"co-resource-item__resource-name\"\n            data-test-id=\"silence-resource-link\"\n            title={id}\n            to={`${SilenceResource.plural}/${id}`}\n          >\n            {name}\n          </Link>\n        </div>\n        <div className=\"monitoring-label-list\">\n          <SilenceMatchersList silence={obj} />\n        </div>\n      </TableData>\n      <TableData className={tableSilenceClasses[1]}>\n        <SeverityCounts alerts={firingAlerts} />\n      </TableData>\n      <TableData className={classNames(tableSilenceClasses[2], 'co-break-word')}>\n        <SilenceState silence={obj} />\n        {state === SilenceStates.Pending && <StateTimestamp text=\"Starts\" timestamp={startsAt} />}\n        {state === SilenceStates.Active && <StateTimestamp text=\"Ends\" timestamp={endsAt} />}\n        {state === SilenceStates.Expired && <StateTimestamp text=\"Expired\" timestamp={endsAt} />}\n      </TableData>\n      <TableData className={tableSilenceClasses[3]}>{createdBy || '-'}</TableData>\n      <TableData className={tableSilenceClasses[4]}>\n        <SilenceKebab silence={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst alertMessageResources: { [labelName: string]: K8sKind } = {\n  container: ContainerModel,\n  daemonset: DaemonSetModel,\n  deployment: DeploymentModel,\n  job: JobModel,\n  namespace: NamespaceModel,\n  node: NodeModel,\n  pod: PodModel,\n  statefulset: StatefulSetModel,\n};\n\nconst matchCount = (haystack: string, regExpString: string) =>\n  _.size(haystack.match(new RegExp(regExpString, 'g')));\n\nconst AlertMessage: React.FC<AlertMessageProps> = ({ alertText, labels, template }) => {\n  if (_.isEmpty(alertText)) {\n    return null;\n  }\n\n  let messageParts: React.ReactNode[] = [alertText];\n\n  // Go through each recognized resource type and replace any resource names that exist in alertText\n  // with a link to the resource's details page\n  _.each(alertMessageResources, (model, label) => {\n    const labelValue = labels[label];\n\n    if (labelValue && !(model.namespaced && _.isEmpty(labels.namespace))) {\n      const tagCount = matchCount(template, `\\\\{\\\\{ *\\\\$labels\\\\.${label} *\\\\}\\\\}`);\n      const resourceNameCount = matchCount(alertText, _.escapeRegExp(labelValue));\n\n      // Don't do the replacement unless the counts match. This avoids overwriting the wrong string\n      // if labelValue happens to appear elsewhere in alertText\n      if (tagCount > 0 && tagCount === resourceNameCount) {\n        const link = (\n          <ResourceLink\n            className=\"co-resource-item--monitoring-alert\"\n            inline\n            key={model.kind}\n            kind={model.kind}\n            name={labelValue}\n            namespace={model.namespaced ? labels.namespace : undefined}\n          />\n        );\n        messageParts = _.flatMap(messageParts, (part) => {\n          if (_.isString(part) && part.indexOf(labelValue) !== -1) {\n            const [before, after] = part.split(labelValue);\n            return [before, link, after];\n          }\n          return [part];\n        });\n      }\n    }\n  });\n\n  return <p>{messageParts}</p>;\n};\n\nconst HeaderAlertMessage: React.FC<{ alert: Alert; rule: Rule }> = ({ alert, rule }) => {\n  const annotation = alert.annotations.description ? 'description' : 'message';\n  return (\n    <AlertMessage\n      alertText={alert.annotations[annotation]}\n      labels={alert.labels}\n      template={rule.annotations[annotation]}\n    />\n  );\n};\n\nconst alertStateToProps = (state: RootState, { match }): AlertsDetailsPageProps => {\n  const { data, loaded, loadError }: Alerts = alertsToProps(state);\n  const { loaded: silencesLoaded }: Silences = silencesToProps(state);\n  const ruleID = _.get(match, 'params.ruleID');\n  const labels = getURLSearchParams();\n  const alerts = _.filter(data, (a) => a.rule.id === ruleID);\n  const rule = _.get(alerts, '[0].rule');\n  const alert = _.find(alerts, (a) => _.isEqual(a.labels, labels));\n  return { alert, loaded, loadError, rule, silencesLoaded };\n};\n\nconst AlertsDetailsPage = withFallback(\n  connect(alertStateToProps)((props: AlertsDetailsPageProps) => {\n    const { alert, loaded, loadError, rule, silencesLoaded } = props;\n    const { annotations = {}, labels = {}, silencedBy = [] } = alert || {};\n    const { alertname, severity } = labels as any;\n    const state = alertState(alert);\n\n    return (\n      <>\n        <Helmet>\n          <title>{`${alertname} · Details`}</title>\n        </Helmet>\n        <StatusBox data={alert} label={AlertResource.label} loaded={loaded} loadError={loadError}>\n          <div className=\"co-m-nav-title co-m-nav-title--detail\">\n            <h1 className=\"co-m-pane__heading\">\n              <div className=\"co-resource-item\">\n                <MonitoringResourceIcon\n                  className=\"co-m-resource-icon--lg\"\n                  resource={AlertResource}\n                />\n                {alertname}\n                <SeverityBadge severity={severity} />\n              </div>\n              {state !== AlertStates.Silenced && (\n                <div className=\"co-actions\" data-test-id=\"details-actions\">\n                  <ActionButtons actionButtons={[silenceAlert(alert)]} />\n                </div>\n              )}\n            </h1>\n            <HeaderAlertMessage alert={alert} rule={rule} />\n          </div>\n          <div className=\"co-m-pane__body\">\n            <ToggleGraph />\n            <SectionHeading text=\"Alert Details\" />\n            <div className=\"co-m-pane__body-group\">\n              <div className=\"row\">\n                <div className=\"col-sm-12\">\n                  <Graph filterLabels={labels} rule={rule} />\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-sm-6\">\n                  <dl className=\"co-m-pane__details\">\n                    <dt>Name</dt>\n                    <dd>{alertname}</dd>\n                  </dl>\n                </div>\n                <div className=\"col-sm-6\">\n                  <dl className=\"co-m-pane__details\">\n                    {annotations.description && (\n                      <Annotation title=\"Description\">\n                        <AlertMessage\n                          alertText={annotations.description}\n                          labels={labels}\n                          template={rule?.annotations.description}\n                        />\n                      </Annotation>\n                    )}\n                    <Annotation title=\"Summary\">{annotations.summary}</Annotation>\n                    {annotations.message && (\n                      <Annotation title=\"Message\">\n                        <AlertMessage\n                          alertText={annotations.message}\n                          labels={labels}\n                          template={rule?.annotations.message}\n                        />\n                      </Annotation>\n                    )}\n                  </dl>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-sm-6\">\n                  <dl className=\"co-m-pane__details\">\n                    <dt>Severity</dt>\n                    <dd>\n                      <Severity severity={severity} />\n                    </dd>\n                  </dl>\n                </div>\n                <div className=\"col-sm-6\">\n                  <dl className=\"co-m-pane__details\">\n                    <dt>State</dt>\n                    <dd>\n                      <AlertState state={state} />\n                      <AlertStateDescription alert={alert} />\n                    </dd>\n                  </dl>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-xs-12\">\n                  <dl className=\"co-m-pane__details\">\n                    <dt>Labels</dt>\n                    <dd>\n                      {_.isEmpty(labels) ? (\n                        <div className=\"text-muted\">No labels</div>\n                      ) : (\n                        <div className={`co-text-${AlertResource.kind.toLowerCase()}`}>\n                          {_.map(labels, (v, k) => (\n                            <Label key={k} k={k} v={v} />\n                          ))}\n                        </div>\n                      )}\n                    </dd>\n                  </dl>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-xs-12\">\n                  <dl className=\"co-m-pane__details\">\n                    <dt>Alerting Rule</dt>\n                    <dd>\n                      <div className=\"co-resource-item\">\n                        <MonitoringResourceIcon resource={RuleResource} />\n                        <Link\n                          to={ruleURL(rule)}\n                          data-test-id=\"alert-detail-resource-link\"\n                          className=\"co-resource-item__resource-name\"\n                        >\n                          {_.get(rule, 'name')}\n                        </Link>\n                      </div>\n                    </dd>\n                  </dl>\n                </div>\n              </div>\n            </div>\n          </div>\n          {silencesLoaded && !_.isEmpty(silencedBy) && (\n            <div className=\"co-m-pane__body\">\n              <div className=\"co-m-pane__body-group\">\n                <SectionHeading text=\"Silenced By\" />\n                <div className=\"row\">\n                  <div className=\"col-xs-12\">\n                    <Table\n                      aria-label=\"Silenced By\"\n                      data={silencedBy}\n                      Header={silenceTableHeaderNoSort}\n                      loaded={true}\n                      Row={SilenceTableRow}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </StatusBox>\n      </>\n    );\n  }),\n);\n\nconst ActiveAlerts = ({ alerts, ruleID }) => (\n  <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n    <div className=\"row co-m-table-grid__head\">\n      <div className=\"col-xs-6\">Description</div>\n      <div className=\"col-sm-2 hidden-xs\">Active Since</div>\n      <div className=\"col-sm-2 col-xs-3\">State</div>\n      <div className=\"col-sm-2 col-xs-3\">Value</div>\n    </div>\n    <div className=\"co-m-table-grid__body\">\n      {_.sortBy(alerts, alertDescription).map((a, i) => (\n        <div className=\"row co-resource-list__item\" key={i}>\n          <div className=\"col-xs-6\">\n            <Link className=\"co-resource-item\" to={alertURL(a, ruleID)}>\n              {alertDescription(a)}\n            </Link>\n          </div>\n          <div className=\"col-sm-2 hidden-xs\">\n            <Timestamp timestamp={a.activeAt} />\n          </div>\n          <div className=\"col-sm-2 col-xs-3\">\n            <AlertState state={a.state} />\n          </div>\n          <div className=\"col-sm-2 col-xs-3 co-truncate\">{a.value}</div>\n          {a.state !== AlertStates.Silenced && (\n            <div className=\"dropdown-kebab-pf\">\n              <Kebab options={[silenceAlert(a)]} />\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\nconst ruleStateToProps = (state: RootState, { match }): AlertRulesDetailsPageProps => {\n  const { data, loaded, loadError }: Rules = rulesToProps(state);\n  const id = _.get(match, 'params.id');\n  const rule = _.find(data, { id });\n  return { loaded, loadError, rule };\n};\n\nconst AlertRulesDetailsPage = withFallback(\n  connect(ruleStateToProps)((props: AlertRulesDetailsPageProps) => {\n    const { loaded, loadError, rule } = props;\n    const { alerts = [], annotations = {}, duration = null, name = '', query = '' } = rule || {};\n    const severity = rule?.labels?.severity;\n\n    return (\n      <>\n        <Helmet>\n          <title>{`${name || RuleResource.label} · Details`}</title>\n        </Helmet>\n        <StatusBox data={rule} label={RuleResource.label} loaded={loaded} loadError={loadError}>\n          <div className=\"co-m-nav-title co-m-nav-title--detail\">\n            <h1 className=\"co-m-pane__heading\">\n              <div className=\"co-resource-item\">\n                <MonitoringResourceIcon\n                  className=\"co-m-resource-icon--lg\"\n                  resource={RuleResource}\n                />\n                {name}\n                <SeverityBadge severity={severity} />\n              </div>\n            </h1>\n          </div>\n          <div className=\"co-m-pane__body\">\n            <div className=\"monitoring-heading\">\n              <SectionHeading text=\"Alerting Rule Details\" />\n            </div>\n            <div className=\"co-m-pane__body-group\">\n              <div className=\"row\">\n                <div className=\"col-sm-6\">\n                  <dl className=\"co-m-pane__details\">\n                    <dt>Name</dt>\n                    <dd>{name}</dd>\n                    <dt>Severity</dt>\n                    <dd>\n                      <Severity severity={severity} />\n                    </dd>\n                    <Annotation title=\"Description\">{annotations.description}</Annotation>\n                    <Annotation title=\"Summary\">{annotations.summary}</Annotation>\n                    <Annotation title=\"Message\">{annotations.message}</Annotation>\n                  </dl>\n                </div>\n                <div className=\"col-sm-6\">\n                  <dl className=\"co-m-pane__details\">\n                    {_.isInteger(duration) && (\n                      <>\n                        <dt>For</dt>\n                        <dd>{duration === 0 ? '-' : formatPrometheusDuration(duration * 1000)}</dd>\n                      </>\n                    )}\n                    <dt>Expression</dt>\n                    <dd>\n                      <Link to={queryBrowserURL(query)}>\n                        <pre className=\"co-pre-wrap monitoring-query\">{query}</pre>\n                      </Link>\n                    </dd>\n                  </dl>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"co-m-pane__body\">\n            <div className=\"co-m-pane__body-group\">\n              <ToggleGraph />\n              <SectionHeading text=\"Active Alerts\" />\n              <div className=\"row\">\n                <div className=\"col-sm-12\">\n                  <Graph rule={rule} />\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-xs-12\">\n                  {_.isEmpty(alerts) ? (\n                    <div className=\"text-center\">None Found</div>\n                  ) : (\n                    <ActiveAlerts alerts={alerts} ruleID={rule.id} />\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </StatusBox>\n      </>\n    );\n  }),\n);\n\nconst SilencedAlertsList = ({ alerts }) =>\n  _.isEmpty(alerts) ? (\n    <div className=\"text-center\">None Found</div>\n  ) : (\n    <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n      <div className=\"row co-m-table-grid__head\">\n        <div className=\"col-xs-9\">Name</div>\n        <div className=\"col-xs-3\">Severity</div>\n      </div>\n      <div className=\"co-m-table-grid__body\">\n        {_.sortBy(alerts, alertDescription).map((a, i) => (\n          <div className=\"row co-resource-list__item\" key={i}>\n            <div className=\"col-xs-9\">\n              <Link className=\"co-resource-item\" to={alertURL(a, a.rule.id)}>\n                {a.labels.alertname}\n              </Link>\n              <div className=\"monitoring-description\">{alertDescription(a)}</div>\n            </div>\n            <div className=\"col-xs-3\">\n              <Severity severity={a.labels.severity} />\n            </div>\n            <div className=\"dropdown-kebab-pf\">\n              <Kebab options={[viewAlertRule(a)]} />\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\nconst silenceParamToProps = (state: RootState, { match }) => {\n  const { data: silences, loaded, loadError }: Silences = silencesToProps(state);\n  const { loaded: alertsLoaded }: Alerts = alertsToProps(state);\n  const silence = _.find(silences, { id: _.get(match, 'params.id') });\n  return { alertsLoaded, loaded, loadError, silence, silences };\n};\n\nconst SilencesDetailsPage = withFallback(\n  connect(silenceParamToProps)((props: SilencesDetailsPageProps) => {\n    const { alertsLoaded, loaded, loadError, silence } = props;\n    const {\n      comment = '',\n      createdBy = '',\n      endsAt = '',\n      firingAlerts = [],\n      matchers = {},\n      name = '',\n      startsAt = '',\n      updatedAt = '',\n    } = silence || {};\n\n    return (\n      <>\n        <Helmet>\n          <title>{`${name || SilenceResource.label} · Details`}</title>\n        </Helmet>\n        <StatusBox\n          data={silence}\n          label={SilenceResource.label}\n          loaded={loaded}\n          loadError={loadError}\n        >\n          <div className=\"co-m-nav-title co-m-nav-title--detail\">\n            <h1 className=\"co-m-pane__heading\">\n              <div className=\"co-resource-item\">\n                <MonitoringResourceIcon\n                  className=\"co-m-resource-icon--lg\"\n                  resource={SilenceResource}\n                />\n                {name}\n              </div>\n              <SilenceActionsMenu silence={silence} />\n            </h1>\n          </div>\n          <div className=\"co-m-pane__body\">\n            <SectionHeading text=\"Silence Details\" />\n            <div className=\"co-m-pane__body-group\">\n              <div className=\"row\">\n                <div className=\"col-sm-6\">\n                  <dl className=\"co-m-pane__details\">\n                    {name && (\n                      <>\n                        <dt>Name</dt>\n                        <dd>{name}</dd>\n                      </>\n                    )}\n                    <dt>Matchers</dt>\n                    <dd>\n                      {_.isEmpty(matchers) ? (\n                        <div className=\"text-muted\">No matchers</div>\n                      ) : (\n                        <SilenceMatchersList silence={silence} />\n                      )}\n                    </dd>\n                    <dt>State</dt>\n                    <dd>\n                      <SilenceState silence={silence} />\n                    </dd>\n                    <dt>Last Updated At</dt>\n                    <dd>\n                      <Timestamp timestamp={updatedAt} />\n                    </dd>\n                  </dl>\n                </div>\n                <div className=\"col-sm-6\">\n                  <dl className=\"co-m-pane__details\">\n                    <dt>Starts At</dt>\n                    <dd>\n                      <Timestamp timestamp={startsAt} />\n                    </dd>\n                    <dt>Ends At</dt>\n                    <dd>\n                      <Timestamp timestamp={endsAt} />\n                    </dd>\n                    <dt>Created By</dt>\n                    <dd>{createdBy || '-'}</dd>\n                    <dt>Comments</dt>\n                    <dd>{comment || '-'}</dd>\n                    <dt>Firing Alerts</dt>\n                    <dd>\n                      {alertsLoaded ? <SeverityCounts alerts={firingAlerts} /> : <LoadingInline />}\n                    </dd>\n                  </dl>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"co-m-pane__body\">\n            <div className=\"co-m-pane__body-group\">\n              <SectionHeading text=\"Firing Alerts\" />\n              <div className=\"row\">\n                <div className=\"col-xs-12\">\n                  {alertsLoaded ? <SilencedAlertsList alerts={firingAlerts} /> : <LoadingInline />}\n                </div>\n              </div>\n            </div>\n          </div>\n        </StatusBox>\n      </>\n    );\n  }),\n);\n\nconst tableAlertClasses = [\n  classNames('col-sm-7', 'col-xs-8'),\n  classNames('col-sm-2', 'hidden-xs'),\n  classNames('col-sm-3', 'col-xs-4'),\n  Kebab.columnClass,\n];\n\nconst AlertTableRow: RowFunction<Alert> = ({ index, key, obj, style }) => {\n  const { annotations = {}, labels } = obj;\n  const state = alertState(obj);\n\n  return (\n    <TableRow id={obj.rule.id} index={index} trKey={key} style={style}>\n      <TableData className={tableAlertClasses[0]}>\n        <div className=\"co-resource-item\">\n          <MonitoringResourceIcon resource={AlertResource} />\n          <Link\n            to={alertURL(obj, obj.rule.id)}\n            data-test-id=\"alert-resource-link\"\n            className=\"co-resource-item__resource-name\"\n          >\n            {labels?.alertname}\n          </Link>\n        </div>\n        <div className=\"monitoring-description\">\n          {annotations.description || annotations.message}\n        </div>\n      </TableData>\n      <TableData className={tableAlertClasses[1]}>\n        <Severity severity={labels?.severity} />\n      </TableData>\n      <TableData className={tableAlertClasses[2]}>\n        <AlertState state={state} />\n        <AlertStateDescription alert={obj} />\n      </TableData>\n      <TableData className={tableAlertClasses[3]}>\n        <Kebab\n          options={\n            state === AlertStates.Silenced\n              ? [viewAlertRule(obj)]\n              : [silenceAlert(obj), viewAlertRule(obj)]\n          }\n        />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst alertTableHeader = () => [\n  {\n    title: 'Name',\n    sortField: 'labels.alertname',\n    transforms: [sortable],\n    props: { className: tableAlertClasses[0] },\n  },\n  {\n    title: 'Severity',\n    sortField: 'labels.severity',\n    transforms: [sortable],\n    props: { className: tableAlertClasses[1] },\n  },\n  {\n    title: 'State',\n    sortFunc: 'alertStateOrder',\n    transforms: [sortable],\n    props: { className: tableAlertClasses[2] },\n  },\n  {\n    title: '',\n    props: { className: tableAlertClasses[3] },\n  },\n];\n\nconst HeaderAlertmanagerLink = ({ path }) =>\n  _.isEmpty(window.SERVER_FLAGS.alertManagerPublicURL) ? null : (\n    <span className=\"monitoring-header-link\">\n      <ExternalLink\n        href={`${window.SERVER_FLAGS.alertManagerPublicURL}${path || ''}`}\n        text=\"Alertmanager UI\"\n      />\n    </span>\n  );\n\nconst alertsRowFilter = {\n  type: 'alert-state',\n  selected: [AlertStates.Firing, AlertStates.Silenced, AlertStates.Pending],\n  reducer: alertState,\n  items: [\n    { id: AlertStates.Firing, title: 'Firing' },\n    { id: AlertStates.Silenced, title: 'Silenced' },\n    { id: AlertStates.Pending, title: 'Pending' },\n  ],\n};\n\n// Row filter settings are stored in \"k8s\"\nconst filtersToProps = ({ k8s }, { reduxID }) => {\n  const filtersMap = k8s.getIn([reduxID, 'filters']);\n  return { filters: filtersMap ? filtersMap.toJS() : null };\n};\n\nconst MonitoringListPage = connect(filtersToProps)(\n  class InnerMonitoringListPage extends React.Component<ListPageProps> {\n    props: ListPageProps;\n    defaultNameFilter: string;\n\n    constructor(props) {\n      super(props);\n      this.applyTextFilter = this.applyTextFilter.bind(this);\n    }\n\n    applyTextFilter(val) {\n      const { nameFilterID, reduxID } = this.props;\n      store.dispatch(k8sActions.filterList(reduxID, nameFilterID, val));\n\n      const params = new URLSearchParams(window.location.search);\n      if (val) {\n        params.set(nameFilterID, val);\n      } else {\n        params.delete(nameFilterID);\n      }\n      const url = new URL(window.location.href);\n      history.replace(`${url.pathname}?${params.toString()}${url.hash}`);\n    }\n\n    UNSAFE_componentWillMount() {\n      const { nameFilterID, reduxID } = this.props;\n      const params = new URLSearchParams(window.location.search);\n\n      // Ensure the current name filter value matches the name filter GET param\n      this.defaultNameFilter = params.get(nameFilterID);\n      store.dispatch(k8sActions.filterList(reduxID, nameFilterID, this.defaultNameFilter));\n\n      if (!params.get('sortBy')) {\n        // Sort by rule name by default\n        store.dispatch(UIActions.sortList(reduxID, 'name', undefined, 'asc', 'Name'));\n      }\n    }\n\n    render() {\n      const {\n        CreateButton,\n        data,\n        filters,\n        Header,\n        kindPlural,\n        loaded,\n        loadError,\n        reduxID,\n        Row,\n        rowFilter,\n      } = this.props;\n\n      return (\n        <>\n          <Helmet>\n            <title>Alerting</title>\n          </Helmet>\n          <div className=\"co-m-pane__filter-bar\">\n            {CreateButton && (\n              <div className=\"co-m-pane__filter-bar-group\">\n                <CreateButton />\n              </div>\n            )}\n            <div className=\"co-m-pane__filter-bar-group co-m-pane__filter-bar-group--filter\">\n              <TextFilter\n                defaultValue={this.defaultNameFilter}\n                label={`${kindPlural} by name`}\n                onChange={this.applyTextFilter}\n              />\n            </div>\n          </div>\n          <div className=\"co-m-pane__body\">\n            <CheckBoxes\n              items={rowFilter.items}\n              itemCount={_.size(data)}\n              numbers={_.countBy(data, rowFilter.reducer)}\n              reduxIDs={[reduxID]}\n              selected={rowFilter.selected}\n              type={rowFilter.type}\n            />\n            <div className=\"row\">\n              <div className=\"col-xs-12\">\n                <Table\n                  aria-label={kindPlural}\n                  data={data}\n                  filters={filters}\n                  Header={Header}\n                  loaded={loaded}\n                  loadError={loadError}\n                  reduxID={reduxID}\n                  Row={Row}\n                  virtualize\n                />\n              </div>\n            </div>\n          </div>\n        </>\n      );\n    }\n  },\n);\n\nconst AlertsPage_ = (props) => (\n  <MonitoringListPage\n    {...props}\n    Header={alertTableHeader}\n    kindPlural=\"Alerts\"\n    nameFilterID=\"alert-list-text\"\n    reduxID=\"monitoringAlerts\"\n    Row={AlertTableRow}\n    rowFilter={alertsRowFilter}\n  />\n);\nconst AlertsPage = withFallback(connect(alertsToProps)(AlertsPage_));\n\nconst rulesRowFilter = {\n  type: 'alerting-rule-active',\n  selected: ['true', 'false'],\n  reducer: alertingRuleIsActive,\n  items: [\n    { id: 'true', title: 'Active' },\n    { id: 'false', title: 'Inactive' },\n  ],\n};\n\nconst tableRuleClasses = [\n  classNames('col-sm-6', 'col-xs-7'),\n  classNames('col-sm-2', 'hidden-xs'),\n  classNames('col-sm-4', 'col-xs-5'),\n];\n\nconst ruleTableHeader = () => [\n  {\n    title: 'Name',\n    sortField: 'name',\n    transforms: [sortable],\n    props: { className: tableRuleClasses[0] },\n  },\n  {\n    title: 'Severity',\n    sortField: 'labels.severity',\n    transforms: [sortable],\n    props: { className: tableRuleClasses[1] },\n  },\n  {\n    title: 'Alert State',\n    sortFunc: 'alertStateOrder',\n    transforms: [sortable],\n    props: { className: tableRuleClasses[2] },\n  },\n];\n\nconst RuleTableRow: RowFunction<Rule> = ({ index, key, obj, style }) => (\n  <TableRow id={obj.id} index={index} trKey={key} style={style}>\n    <TableData className={tableRuleClasses[0]}>\n      <div className=\"co-resource-item\">\n        <MonitoringResourceIcon resource={RuleResource} />\n        <Link to={ruleURL(obj)} className=\"co-resource-item__resource-name\">\n          {obj.name}\n        </Link>\n      </div>\n    </TableData>\n    <TableData className={tableRuleClasses[1]}>\n      <Severity severity={obj.labels?.severity} />\n    </TableData>\n    <TableData className={tableRuleClasses[2]}>\n      {_.isEmpty(obj.alerts) ? 'Inactive' : <StateCounts alerts={obj.alerts} />}\n    </TableData>\n  </TableRow>\n);\n\nconst RulesPage_ = (props) => (\n  <MonitoringListPage\n    {...props}\n    Header={ruleTableHeader}\n    kindPlural=\"Alerting Rules\"\n    nameFilterID=\"alerting-rule-name\"\n    reduxID=\"monitoringRules\"\n    Row={RuleTableRow}\n    rowFilter={rulesRowFilter}\n  />\n);\nconst RulesPage = withFallback(connect(rulesToProps)(RulesPage_));\n\nconst silencesRowFilter = {\n  type: 'silence-state',\n  selected: [SilenceStates.Active, SilenceStates.Pending],\n  reducer: silenceState,\n  items: [\n    { id: SilenceStates.Active, title: 'Active' },\n    { id: SilenceStates.Pending, title: 'Pending' },\n    { id: SilenceStates.Expired, title: 'Expired' },\n  ],\n};\n\nconst CreateButton = () => (\n  <Link className=\"co-m-primary-action\" to=\"/monitoring/silences/~new\">\n    <Button variant=\"primary\">Create Silence</Button>\n  </Link>\n);\n\nconst SilencesPage_ = (props) => (\n  <MonitoringListPage\n    {...props}\n    CreateButton={CreateButton}\n    Header={silenceTableHeader}\n    kindPlural=\"Silences\"\n    nameFilterID=\"silence-name\"\n    reduxID=\"monitoringSilences\"\n    Row={SilenceTableRow}\n    rowFilter={silencesRowFilter}\n  />\n);\nconst SilencesPage = withFallback(connect(silencesToProps)(SilencesPage_));\n\nconst pad = (i: number): string => (i < 10 ? `0${i}` : String(i));\n\nconst formatDate = (d: Date): string =>\n  `${d.getFullYear()}/${pad(d.getMonth() + 1)}/${pad(d.getDate())} ${pad(d.getHours())}:${pad(\n    d.getMinutes(),\n  )}:${pad(d.getSeconds())}`;\n\nconst DatetimeTextInput = (props) => {\n  const pattern =\n    '\\\\d{4}/(0?[1-9]|1[012])/(0?[1-9]|[12]\\\\d|3[01]) (0?\\\\d|1\\\\d|2[0-3]):[0-5]\\\\d(:[0-5]\\\\d)?';\n  const isValid = new RegExp(`^${pattern}$`).test(props.value);\n\n  return (\n    <div>\n      <Tooltip\n        content={[\n          <span className=\"co-nowrap\" key=\"co-timestamp\">\n            {isValid ? new Date(props.value).toISOString() : 'Invalid date / time'}\n          </span>,\n        ]}\n      >\n        <TextInput\n          {...props}\n          aria-label=\"Datetime\"\n          data-test-id=\"datetime\"\n          isValid={isValid || !!props.isDisabled}\n          pattern={pattern}\n          placeholder=\"YYYY/MM/DD hh:mm:ss\"\n        />\n      </Tooltip>\n    </div>\n  );\n};\n\nconst durationOff = '-';\nconst durations = [durationOff, '30m', '1h', '2h', '6h', '12h', '1d', '2d', '1w'];\nconst durationItems = _.zipObject(durations, durations);\n\nconst SilenceForm_: React.FC<SilenceFormProps> = ({ defaults, Info, title }) => {\n  const now = new Date();\n\n  // Default to starting now if we have no default start time or if the default start time is in the\n  // past (because Alertmanager will change a time in the past to the current time on save anyway)\n  const defaultIsStartNow = _.isEmpty(defaults.startsAt) || new Date(defaults.startsAt) < now;\n\n  let defaultDuration = _.isEmpty(defaults.endsAt) ? '2h' : durationOff;\n\n  // If we have both a default start and end time and the difference between them exactly matches\n  // one of the duration options, automatically select that option in the duration menu\n  if (!defaultIsStartNow && defaults.startsAt && defaults.endsAt) {\n    const durationFromDefaults = formatPrometheusDuration(\n      Date.parse(defaults.endsAt) - Date.parse(defaults.startsAt),\n    );\n    if (durations.includes(durationFromDefaults)) {\n      defaultDuration = durationFromDefaults;\n    }\n  }\n\n  const [comment, setComment] = React.useState(defaults.comment ?? '');\n  const [createdBy, setCreatedBy] = React.useState(defaults.createdBy ?? '');\n  const [duration, setDuration] = React.useState(defaultDuration);\n  const [endsAt, setEndsAt] = React.useState(\n    defaults.endsAt ?? formatDate(new Date(new Date(now).setHours(now.getHours() + 2))),\n  );\n  const [error, setError] = React.useState<string>();\n  const [inProgress, setInProgress] = React.useState(false);\n  const [isStartNow, setIsStartNow] = React.useState(defaultIsStartNow);\n  const [matchers, setMatchers] = React.useState(\n    defaults.matchers ?? [{ isRegex: false, name: '', value: '' }],\n  );\n  const [startsAt, setStartsAt] = React.useState(defaults.startsAt ?? formatDate(now));\n\n  const getEndsAtValue = (): string => {\n    const startsAtDate = Date.parse(startsAt);\n    return startsAtDate\n      ? formatDate(new Date(startsAtDate + parsePrometheusDuration(duration)))\n      : '-';\n  };\n\n  const setMatcherField = (i: number, field: string, v: any): void => {\n    const newMatchers = _.clone(matchers);\n    _.set(newMatchers, [i, field], v);\n    setMatchers(newMatchers);\n  };\n\n  const addMatcher = (): void => {\n    setMatchers([...matchers, { isRegex: false, name: '', value: '' }]);\n  };\n\n  const removeMatcher = (i: number): void => {\n    const newMatchers = _.clone(matchers);\n    newMatchers.splice(i, 1);\n\n    // If all matchers have been removed, add back a single blank matcher\n    setMatchers(_.isEmpty(newMatchers) ? [{ isRegex: false, name: '', value: '' }] : newMatchers);\n  };\n\n  const onSubmit: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n\n    // Don't allow comments to only contain whitespace\n    if (_.trim(comment) === '') {\n      setError('Comment is required.');\n      return;\n    }\n\n    const { alertManagerBaseURL } = window.SERVER_FLAGS;\n    if (!alertManagerBaseURL) {\n      setError('Alertmanager URL not set');\n      return;\n    }\n\n    setInProgress(true);\n\n    const saveStartsAt: Date = isStartNow ? new Date() : new Date(startsAt);\n    const saveEndsAt: Date =\n      duration === durationOff\n        ? new Date(endsAt)\n        : new Date(saveStartsAt.getTime() + parsePrometheusDuration(duration));\n\n    const body = {\n      comment,\n      createdBy,\n      endsAt: saveEndsAt.toISOString(),\n      id: defaults.id,\n      matchers,\n      startsAt: saveStartsAt.toISOString(),\n    };\n\n    coFetchJSON\n      .post(`${alertManagerBaseURL}/api/v1/silences`, body)\n      .then(({ data }) => {\n        setError(undefined);\n        refreshNotificationPollers();\n        history.push(`${SilenceResource.plural}/${encodeURIComponent(_.get(data, 'silenceId'))}`);\n      })\n      .catch((err) => {\n        setError(_.get(err, 'json.error') || err.message || 'Error saving Silence');\n        setInProgress(false);\n      });\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <div className=\"co-m-nav-title co-m-nav-title--detail\">\n        <h1 className=\"co-m-pane__heading\">{title}</h1>\n        <p className=\"co-m-pane__explanation\">\n          Silences temporarily mute alerts based on a set of label selectors that you define.\n          Notifications will not be sent for alerts that match all the listed values or regular\n          expressions.\n        </p>\n      </div>\n\n      {Info && <Info />}\n\n      <div className=\"co-m-pane__body\">\n        <form onSubmit={onSubmit} className=\"monitoring-silence-alert\">\n          <div className=\"co-m-pane__body-group\">\n            <SectionHeading text=\"Duration\" />\n            <div className=\"row\">\n              <div className=\"form-group col-sm-4 col-md-5\">\n                <label>Silence alert from...</label>\n                {isStartNow ? (\n                  <DatetimeTextInput isDisabled value=\"Now\" />\n                ) : (\n                  <DatetimeTextInput\n                    isRequired\n                    onChange={(v: string) => setStartsAt(v)}\n                    value={startsAt}\n                  />\n                )}\n              </div>\n              <div className=\"form-group col-sm-4 col-md-2\">\n                <label>For...</label>\n                <Dropdown\n                  dropDownClassName=\"dropdown--full-width\"\n                  items={durationItems}\n                  onChange={(v: string) => setDuration(v)}\n                  selectedKey={duration}\n                />\n              </div>\n              <div className=\"form-group col-sm-4 col-md-5\">\n                <label>Until...</label>\n                {duration === durationOff ? (\n                  <DatetimeTextInput\n                    isRequired\n                    onChange={(v: string) => setEndsAt(v)}\n                    value={endsAt}\n                  />\n                ) : (\n                  <DatetimeTextInput\n                    isDisabled\n                    value={isStartNow ? `${duration} from now` : getEndsAtValue()}\n                  />\n                )}\n              </div>\n            </div>\n            <div className=\"form-group\">\n              <label>\n                <input\n                  checked={isStartNow}\n                  onChange={(e) => setIsStartNow(e.currentTarget.checked)}\n                  type=\"checkbox\"\n                />\n                &nbsp; Start Immediately\n              </label>\n            </div>\n          </div>\n\n          <div className=\"co-m-pane__body-group\">\n            <SectionHeading text=\"Alert Labels\" />\n            <p className=\"co-help-text\">\n              Alerts with labels that match these selectors will be silenced instead of firing.\n              Label values can be matched exactly or with a{' '}\n              <ExternalLink\n                href=\"https://github.com/google/re2/wiki/Syntax\"\n                text=\"regular expression\"\n              />\n            </p>\n\n            {_.map(matchers, (matcher, i: number) => (\n              <div className=\"row\" key={i}>\n                <div className=\"form-group col-sm-4\">\n                  <label>Label name</label>\n                  <TextInput\n                    aria-label=\"Label name\"\n                    isRequired\n                    onChange={(v: string) => setMatcherField(i, 'name', v)}\n                    placeholder=\"Name\"\n                    value={matcher.name}\n                  />\n                </div>\n                <div className=\"form-group col-sm-4\">\n                  <label>Label value</label>\n                  <TextInput\n                    aria-label=\"Label value\"\n                    isRequired\n                    onChange={(v: string) => setMatcherField(i, 'value', v)}\n                    placeholder=\"Value\"\n                    value={matcher.value}\n                  />\n                </div>\n                <div className=\"form-group col-sm-4\">\n                  <div className=\"monitoring-silence-alert__label-options\">\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        onChange={(e) => setMatcherField(i, 'isRegex', e.currentTarget.checked)}\n                        checked={matcher.isRegex}\n                      />\n                      &nbsp; Use RegEx\n                    </label>\n                    <Button\n                      type=\"button\"\n                      onClick={() => removeMatcher(i)}\n                      aria-label=\"Remove matcher\"\n                      variant=\"plain\"\n                    >\n                      <MinusCircleIcon />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n\n            <div className=\"form-group\">\n              <Button\n                className=\"pf-m-link--align-left\"\n                onClick={addMatcher}\n                type=\"button\"\n                variant=\"link\"\n              >\n                <PlusCircleIcon className=\"co-icon-space-r\" />\n                Add Label\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"co-m-pane__body-group\">\n            <SectionHeading text=\"Info\" />\n            <div className=\"form-group\">\n              <label>Creator</label>\n              <TextInput\n                aria-label=\"Creator\"\n                onChange={(v: string) => setCreatedBy(v)}\n                value={createdBy}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label className=\"co-required\">Comment</label>\n              <TextArea\n                aria-label=\"Comment\"\n                isRequired\n                onChange={(v: string) => setComment(v)}\n                value={comment}\n              />\n            </div>\n            <ButtonBar errorMessage={error} inProgress={inProgress}>\n              <ActionGroup className=\"pf-c-form\">\n                <Button type=\"submit\" variant=\"primary\">\n                  Silence\n                </Button>\n                <Button onClick={history.goBack} variant=\"secondary\">\n                  Cancel\n                </Button>\n              </ActionGroup>\n            </ButtonBar>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\nconst SilenceForm = withFallback(SilenceForm_);\n\nconst EditInfo = () => (\n  <Alert isInline className=\"co-alert\" variant=\"info\" title=\"Overwriting current silence\">\n    When changes are saved, the currently existing silence will be expired and a new silence with\n    the new configuration will take its place.\n  </Alert>\n);\n\nconst EditSilence = connect(silenceParamToProps)(({ loaded, loadError, silence }) => {\n  const isExpired = silenceState(silence) === SilenceStates.Expired;\n  const defaults = _.pick(silence, [\n    'comment',\n    'createdBy',\n    'endsAt',\n    'id',\n    'matchers',\n    'startsAt',\n  ]);\n  defaults.startsAt = isExpired ? undefined : formatDate(new Date(defaults.startsAt));\n  defaults.endsAt = isExpired ? undefined : formatDate(new Date(defaults.endsAt));\n  return (\n    <StatusBox data={silence} label={SilenceResource.label} loaded={loaded} loadError={loadError}>\n      <SilenceForm\n        defaults={defaults}\n        Info={isExpired ? undefined : EditInfo}\n        title={isExpired ? 'Recreate Silence' : 'Edit Silence'}\n      />\n    </StatusBox>\n  );\n});\n\nconst CreateSilence_ = ({ createdBy }) => {\n  const matchers = _.map(getURLSearchParams(), (value, name) => ({ name, value, isRegex: false }));\n  return _.isEmpty(matchers) ? (\n    <SilenceForm defaults={{ createdBy }} title=\"Create Silence\" />\n  ) : (\n    <SilenceForm defaults={{ createdBy, matchers }} title=\"Silence Alert\" />\n  );\n};\nconst createSilenceStateToProps = ({ UI }: RootState) => ({\n  createdBy: UI.get('user')?.metadata?.name,\n});\nconst CreateSilence = connect(createSilenceStateToProps)(CreateSilence_);\n\nconst AlertmanagerYAML = () => {\n  return (\n    <Firehose\n      resources={[\n        {\n          kind: 'Secret',\n          name: 'alertmanager-main',\n          namespace: 'openshift-monitoring',\n          isList: false,\n          prop: 'obj',\n        },\n      ]}\n    >\n      <AlertmanagerYAMLEditorWrapper />\n    </Firehose>\n  );\n};\n\nconst AlertmanagerConfig = () => {\n  return (\n    <Firehose\n      resources={[\n        {\n          kind: 'Secret',\n          name: 'alertmanager-main',\n          namespace: 'openshift-monitoring',\n          isList: false,\n          prop: 'obj',\n        },\n      ]}\n    >\n      <AlertmanagerConfigWrapper />\n    </Firehose>\n  );\n};\n\nconst Tab: React.FC<{ active: boolean; children: React.ReactNode }> = ({ active, children }) => (\n  <li\n    className={classNames('co-m-horizontal-nav__menu-item', {\n      'co-m-horizontal-nav-item--active': active,\n    })}\n  >\n    {children}\n  </li>\n);\n\nconst AlertingPage: React.SFC<AlertingPageProps> = ({ match }) => {\n  const alertsPath = '/monitoring/alerts';\n  const rulesPath = '/monitoring/alertrules';\n  const silencesPath = '/monitoring/silences';\n  const configPath = '/monitoring/alertmanagerconfig';\n  const YAMLPath = '/monitoring/alertmanageryaml';\n\n  const { url } = match;\n  const isAlertmanager = url === configPath || url === YAMLPath;\n\n  return (\n    <>\n      <div className=\"co-m-nav-title co-m-nav-title--detail\">\n        <h1 className=\"co-m-pane__heading\">\n          <div className=\"co-m-pane__name co-resource-item\">\n            <span className=\"co-resource-item__resource-name\" data-test-id=\"resource-title\">\n              {isAlertmanager ? 'Alertmanager' : 'Alerting'}\n            </span>\n            <HeaderAlertmanagerLink path=\"/#/alerts\" />\n          </div>\n        </h1>\n      </div>\n      <ul className=\"co-m-horizontal-nav__menu\">\n        {(url === alertsPath || url === rulesPath || url === silencesPath) && (\n          <>\n            <Tab active={url === alertsPath}>\n              <Link to={alertsPath}>Alerts</Link>\n            </Tab>\n            <Tab active={url === silencesPath}>\n              <Link to={silencesPath}>Silences</Link>\n            </Tab>\n            <Tab active={url === rulesPath}>\n              <Link to={rulesPath}>Alerting Rules</Link>\n            </Tab>\n          </>\n        )}\n        {isAlertmanager && (\n          <>\n            <Tab active={url === configPath}>\n              <Link to={configPath}>Details</Link>\n            </Tab>\n            <Tab active={url === YAMLPath}>\n              <Link to={YAMLPath}>YAML</Link>\n            </Tab>\n          </>\n        )}\n      </ul>\n      <Switch>\n        <Route path={alertsPath} exact component={AlertsPage} />\n        <Route path={rulesPath} exact component={RulesPage} />\n        <Route path={silencesPath} exact component={SilencesPage} />\n        <Route path={configPath} exact component={AlertmanagerConfig} />\n        <Route path={YAMLPath} exact component={AlertmanagerYAML} />\n      </Switch>\n    </>\n  );\n};\n\nconst getAlertsAndRules = (\n  data: PrometheusRulesResponse['data'],\n): { alerts: Alert[]; rules: Rule[] } => {\n  // Flatten the rules data to make it easier to work with, discard non-alerting rules since those are the only\n  // ones we will be using and add a unique ID to each rule.\n  const groups = _.get(data, 'groups') as PrometheusRulesResponse['data']['groups'];\n  const rules = _.flatMap(groups, (g) => {\n    const addID = (r: PrometheusRule): Rule => {\n      const key = [\n        g.file,\n        g.name,\n        r.name,\n        r.duration,\n        r.query,\n        ..._.map(r.labels, (k, v) => `${k}=${v}`),\n      ].join(',');\n      return { ...r, id: String(murmur3(key, 'monitoring-salt')) };\n    };\n\n    return _.filter(g.rules, { type: 'alerting' }).map(addID);\n  });\n\n  // Add `rule` object to each alert\n  const alerts = _.flatMap(rules, (rule) => rule.alerts.map((a) => ({ rule, ...a })));\n\n  return { alerts, rules };\n};\n\nexport const getAlerts = (data: PrometheusRulesResponse['data']) => getAlertsAndRules(data).alerts;\n\nconst PollerPages = () => {\n  React.useEffect(() => {\n    const { prometheusBaseURL } = window.SERVER_FLAGS;\n\n    if (prometheusBaseURL) {\n      const key = 'alerts';\n      store.dispatch(UIActions.monitoringLoading(key));\n      const poller = (): void => {\n        coFetchJSON(`${prometheusBaseURL}/api/v1/rules`)\n          .then(({ data }) => {\n            const { alerts, rules } = getAlertsAndRules(data);\n            store.dispatch(UIActions.monitoringLoaded(key, alerts));\n            store.dispatch(UIActions.monitoringSetRules(rules));\n          })\n          .catch((e) => store.dispatch(UIActions.monitoringErrored(key, e)))\n          .then(() => (pollerTimeouts[key] = setTimeout(poller, 15 * 1000)));\n      };\n      pollers[key] = poller;\n      poller();\n    } else {\n      store.dispatch(UIActions.monitoringErrored('alerts', new Error('prometheusBaseURL not set')));\n    }\n    return () => _.each(pollerTimeouts, clearTimeout);\n  }, []);\n\n  return (\n    <Switch>\n      <Route\n        path=\"/monitoring/(alertmanageryaml|alerts|alertrules|silences|alertmanagerconfig)\"\n        exact\n        component={AlertingPage}\n      />\n      <Route path=\"/monitoring/alertrules/:id\" exact component={AlertRulesDetailsPage} />\n      <Route path=\"/monitoring/alerts/:ruleID\" exact component={AlertsDetailsPage} />\n      <Route path=\"/monitoring/silences/:id\" exact component={SilencesDetailsPage} />\n      <Route path=\"/monitoring/silences/:id/edit\" exact component={EditSilence} />\n    </Switch>\n  );\n};\n\nexport const MonitoringUI = () => (\n  <Switch>\n    <Redirect from=\"/monitoring\" exact to=\"/monitoring/alerts\" />\n    <Route path=\"/monitoring/dashboards/:board?\" exact component={MonitoringDashboardsPage} />\n    <Route path=\"/monitoring/query-browser\" exact component={QueryBrowserPage} />\n    <Route path=\"/monitoring/silences/~new\" exact component={CreateSilence} />\n    <Route component={PollerPages} />\n  </Switch>\n);\n\ntype Silence = {\n  comment: string;\n  createdBy: string;\n  endsAt: string;\n  // eslint-disable-next-line no-use-before-define\n  firingAlerts: Alert[];\n  id?: string;\n  matchers: { name: string; value: string; isRegex: boolean }[];\n  name?: string;\n  startsAt: string;\n  status?: { state: SilenceStates };\n  updatedAt?: string;\n};\n\ntype Silences = {\n  data: Silence[];\n  loaded: boolean;\n  loadError?: string;\n};\n\ntype PrometheusAlert = {\n  activeAt?: string;\n  annotations: PrometheusLabels;\n  labels: PrometheusLabels & {\n    alertname: string;\n  };\n  state: AlertStates;\n  value?: number;\n};\n\nexport type Alert = PrometheusAlert & {\n  rule: Rule;\n  silencedBy?: Silence[];\n};\n\ntype PrometheusRule = {\n  alerts: PrometheusAlert[];\n  annotations: PrometheusLabels;\n  duration: number;\n  labels: PrometheusLabels;\n  name: string;\n  query: string;\n};\n\ntype Rule = PrometheusRule & {\n  id: string;\n};\n\ntype Rules = {\n  data: Rule[];\n  loaded: boolean;\n  loadError?: string;\n};\n\ntype Alerts = {\n  data: Alert[];\n  loaded: boolean;\n  loadError?: string;\n};\n\ntype AlertStateProps = {\n  state: AlertStates;\n};\n\ntype AlertsDetailsPageProps = {\n  alert: Alert;\n  loaded: boolean;\n  loadError?: string;\n  rule: Rule;\n  silencesLoaded: boolean;\n};\n\ntype AlertMessageProps = {\n  alertText: string;\n  labels: PrometheusLabels;\n  template: string;\n};\n\ntype AlertRulesDetailsPageProps = {\n  loaded: boolean;\n  loadError?: string;\n  rule: Rule;\n};\n\ntype SilencesDetailsPageProps = {\n  alertsLoaded: boolean;\n  loaded: boolean;\n  loadError?: string;\n  silence: Silence;\n};\n\ntype SilenceFormProps = {\n  defaults: any;\n  Info?: React.ComponentType<{}>;\n  title: string;\n};\n\nexport type ListPageProps = {\n  alertmanagerLinkPath: string;\n  CreateButton: React.ComponentType<{}>;\n  data: Rule[] | Silence[];\n  filters: { [key: string]: any };\n  Header: (...args) => any[];\n  itemCount: number;\n  kindPlural: string;\n  loaded: boolean;\n  loadError?: string;\n  match: { path: string };\n  nameFilterID: string;\n  reduxID: string;\n  Row: RowFunction;\n  rowFilter: {\n    type: string;\n    selected: string[];\n    reducer: (any) => string;\n    items: { id: string; title: string }[];\n  };\n  showTitle?: boolean;\n};\n\ntype AlertingPageProps = {\n  match: any;\n};\n\ntype GraphProps = {\n  deleteAll: () => never;\n  filterLabels?: PrometheusLabels;\n  hideGraphs: boolean;\n  patchQuery: (index: number, patch: QueryObj) => any;\n  rule: Rule;\n};\n\ntype Group = {\n  rules: PrometheusRule[];\n  file: string;\n  inverval: number;\n  name: string;\n};\n\nexport type PrometheusRulesResponse = {\n  data: {\n    groups: Group[];\n  };\n  status: string;\n};\n","/* eslint-disable camelcase */\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as fuzzy from 'fuzzysearch';\nimport { Link } from 'react-router-dom';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport {\n  Alert,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateVariant,\n  Title,\n} from '@patternfly/react-core';\n\nimport { K8sResourceKind } from '../../module/k8s';\nimport { history, Kebab, MsgBox, SectionHeading, StatusBox } from '../utils';\nimport { confirmModal, createAlertRoutingModal } from '../modals';\nimport { Table, TableData, TableRow, TextFilter, RowFunction } from '../factory';\nimport {\n  getAlertmanagerConfig,\n  patchAlertmanagerConfig,\n  receiverTypes,\n} from './alert-manager-utils';\nimport { Helmet } from 'react-helmet';\nimport { PencilAltIcon } from '@patternfly/react-icons';\n\nlet secret: K8sResourceKind = null; // alertmanager-main Secret which holds alertmanager configuration yaml\nlet config: AlertmanagerConfig = null; // alertmanager configuration yaml as object\n\nexport enum InitialReceivers {\n  Critical = 'Critical',\n  Default = 'Default',\n  Watchdog = 'Watchdog',\n}\n\nconst AlertRouting = () => {\n  const groupBy = _.get(config, ['route', 'group_by'], []);\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text=\"Alert Routing\">\n        <Button\n          className=\"co-alert-manager-config__edit-alert-routing-btn\"\n          onClick={() => createAlertRoutingModal({ config, secret })}\n          variant=\"secondary\"\n        >\n          Edit\n        </Button>\n      </SectionHeading>\n      <div className=\"row\">\n        <div className=\"col-sm-6\">\n          <dl className=\"co-m-pane__details\">\n            <dt>Group By</dt>\n            <dd data-test-id=\"group_by_value\">\n              {_.isEmpty(groupBy) ? '-' : _.join(groupBy, ', ')}\n            </dd>\n            <dt>Group Wait</dt>\n            <dd data-test-id=\"group_wait_value\">{_.get(config, ['route', 'group_wait'], '-')}</dd>\n          </dl>\n        </div>\n        <div className=\"col-sm-6\">\n          <dl className=\"co-m-pane__details\">\n            <dt>Group Interval</dt>\n            <dd data-test-id=\"group_interval_value\">\n              {_.get(config, ['route', 'group_interval'], '-')}\n            </dd>\n            <dt>Repeat Interval</dt>\n            <dd data-test-id=\"repeat_interval_value\">\n              {_.get(config, ['route', 'repeat_interval'], '-')}\n            </dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst tableColumnClasses = [\n  classNames('col-lg-3', 'col-md-3', 'col-sm-6', 'col-xs-6'),\n  classNames('col-lg-3', 'col-md-3', 'hidden-sm', 'hidden-xs', 'text-center', ''),\n  classNames('col-lg-6', 'col-md-6', 'col-sm-6', 'col-xs-6'),\n  Kebab.columnClass,\n];\n\nconst ReceiverTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Integration Type',\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Routing Labels',\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n};\nReceiverTableHeader.displayName = 'ReceiverTableHeader';\n\nconst getIntegrationTypes = (receiver: AlertmanagerReceiver): string[] => {\n  /* Given receiver = {\n       \"name\": \"team-X-pager\",\n       \"email_configs\": [...],\n       \"pagerduty_configs\": [...]\n     };\n     returns ['email_configs', 'pagerduty_configs']\n  */\n  return _.filter(_.keys(receiver), (v) => _.endsWith(v, '_configs'));\n};\n\n/**\n * Recursive function which transverses routes and sub-routes to get labels for each receiver.\n * Each entry is a set of labels used to route alerts to a receiver\n *\n * Ex: returns\n * [{\n *   \"receiver\": \"team-Y-pager\",\n *   \"labels\": {\n *     \"service\": \"database\",\n *     \"owner\": \"team-Y\"\n *   }\n * },\n * {\n *   \"receiver\": \"team-Y-pager\",\n *   \"labels\": {\n *     \"service\": \"files\",\n *     \"severity\": \"critical\"\n *   }\n * }]\n}*/\nconst getRoutingLabelsByReceivers = (routes, parentLabels): RoutingLabelsByReceivers[] => {\n  let results: RoutingLabelsByReceivers[] = [];\n  let labels = {};\n  for (const obj of routes) {\n    labels = _.merge({}, parentLabels, obj.match, obj.match_re);\n    results.push({ receiver: obj.receiver, labels });\n    if (obj.routes) {\n      results = results.concat(getRoutingLabelsByReceivers(obj.routes, labels));\n    }\n  }\n  return results;\n};\n\n/**\n * Is receiver used in a top-level route that has no sub routes, or\n * is receiver not in any route (no routing labels)?\n */\nconst hasSimpleRoute = (\n  receiver: AlertmanagerReceiver,\n  receiverRoutingLabels: RoutingLabelsByReceivers[],\n): boolean => {\n  const routes = _.get(config, ['route', 'routes']);\n  return (\n    _.filter(routes, (route) => {\n      return route.receiver === receiver.name && _.isUndefined(route.routes);\n    }).length > 0 || _.isEmpty(receiverRoutingLabels)\n  );\n};\n\n/**\n * Does receiver contains a single known receiver type (ex: pagerduty_config), which has a single config.\n * No receiver type specified is valid, as well as a single receiver type with no config\n */\nconst hasSimpleReceiver = (\n  receiver: AlertmanagerReceiver,\n  receiverIntegrationTypes: string[],\n): boolean => {\n  if (receiverIntegrationTypes.length === 0) {\n    return true;\n  } else if (receiverIntegrationTypes.length === 1) {\n    const receiverConfig = receiverIntegrationTypes[0]; // ex: 'pagerduty_configs'\n    const numConfigs = _.get(receiver, receiverConfig).length; // 'pagerduty_configs' is array and may have multiple sets of properties\n    return _.hasIn(receiverTypes, receiverConfig) && numConfigs <= 1; // known receiver type and a single set of props\n  }\n  return false;\n};\n\nconst numberOfIncompleteReceivers = (): number => {\n  const { route, receivers } = config;\n  const { receiver: defaultReceiverName } = route;\n\n  // if no receivers or default receiver, then no longer initial setup, hide info alerts\n  if (!receivers || !defaultReceiverName) {\n    return 0;\n  }\n  const defaultReceiver = receivers.filter((receiver) => receiver.name === defaultReceiverName);\n  const criticalReceiver = receivers.filter(\n    (receiver) => receiver.name === InitialReceivers.Critical,\n  );\n\n  const numIncompleteReceivers =\n    !_.isEmpty(defaultReceiver) && _.isEmpty(getIntegrationTypes(defaultReceiver[0])) ? 1 : 0;\n\n  return !_.isEmpty(criticalReceiver) && _.isEmpty(getIntegrationTypes(criticalReceiver[0]))\n    ? numIncompleteReceivers + 1\n    : numIncompleteReceivers;\n};\n\n// Puts sets of key=value pairs into single comma delimited label\nconst RoutingLabel: React.FC<RoutingLabelProps> = ({ labels }) => {\n  let count = 0;\n  const list = _.map(labels, (value, key) => {\n    count++;\n    return key === 'default' ? (\n      <span key=\"default\" className=\"co-m-label__value\">\n        All (default receiver)\n      </span>\n    ) : (\n      <React.Fragment key={`label-${key}-${value}`}>\n        <span className=\"co-m-label__key\">{key}</span>\n        <span className=\"co-m-label__eq\">=</span>\n        <span className=\"co-m-label__value\">{value}</span>\n        {count < _.size(labels) && <>,&nbsp;</>}\n      </React.Fragment>\n    );\n  });\n  return (\n    <div>\n      <div className=\"co-m-label co-m-label--expand\">{list}</div>\n    </div>\n  );\n};\n\nconst deleteReceiver = (receiverName: string) => {\n  // remove any routes which use receiverToDelete\n  _.update(config, 'route.routes', (routes) => {\n    _.remove(routes, (route: AlertmanagerRoute) => route.receiver === receiverName);\n    return routes;\n  });\n  // delete receiver\n  _.update(config, 'receivers', (receivers) => {\n    _.remove(receivers, (receiver: AlertmanagerReceiver) => receiver.name === receiverName);\n    return receivers;\n  });\n  return patchAlertmanagerConfig(secret, config).then(() => {\n    history.push('/monitoring/alertmanagerconfig');\n  });\n};\n\nconst receiverMenuItems = (receiverName: string, canDelete: boolean, canUseEditForm: boolean) => [\n  {\n    label: `Edit ${canUseEditForm ? 'Receiver' : 'YAML'}`,\n    callback: () => {\n      const targetUrl = canUseEditForm\n        ? `/monitoring/alertmanagerconfig/receivers/${receiverName}/edit`\n        : `/monitoring/alertmanageryaml`;\n      return history.push(targetUrl);\n    },\n  },\n  {\n    label: 'Delete Receiver',\n    isDisabled: !canDelete,\n    tooltip: !canDelete\n      ? 'Cannot delete the default receiver, or a receiver which has a sub-route'\n      : '',\n    callback: () =>\n      confirmModal({\n        title: 'Delete Receiver',\n        message: `Are you sure you want to delete receiver '${receiverName}' ?`,\n        btnText: 'Delete Receiver',\n        executeFn: () => deleteReceiver(receiverName),\n      }),\n  },\n];\n\nconst ReceiverTableRow: RowFunction<\n  AlertmanagerReceiver,\n  {\n    routingLabelsByReceivers: RoutingLabelsByReceivers[];\n    defaultReceiverName: string;\n  }\n> = ({ obj: receiver, index, key, style, customData }) => {\n  const { routingLabelsByReceivers, defaultReceiverName } = customData;\n  // filter to routing labels belonging to current Receiver\n  const receiverRoutingLabels = _.filter(routingLabelsByReceivers, { receiver: receiver.name });\n  const receiverIntegrationTypes = getIntegrationTypes(receiver);\n  const integrationTypesLabel = _.join(\n    _.map(receiverIntegrationTypes, (type) => type.substr(0, type.indexOf('_configs'))),\n    ', ',\n  );\n  const isDefaultReceiver = receiver.name === defaultReceiverName;\n  const receiverHasSimpleRoute = hasSimpleRoute(receiver, receiverRoutingLabels);\n\n  // Receiver form can only handle simple configurations. Can edit via form if receiver\n  // has a simple route and receiver\n  const canUseEditForm =\n    receiverHasSimpleRoute && hasSimpleReceiver(receiver, receiverIntegrationTypes);\n\n  // Receivers can be deleted if it has a simple route and not the default receiver\n  const canDelete = !isDefaultReceiver && receiverHasSimpleRoute;\n\n  return (\n    <TableRow id={index} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>{receiver.name}</TableData>\n      <TableData className={tableColumnClasses[1]}>\n        {(receiver.name === InitialReceivers.Critical ||\n          receiver.name === InitialReceivers.Default) &&\n        !integrationTypesLabel ? (\n          <Link to={`/monitoring/alertmanagerconfig/receivers/${receiver.name}/edit`}>\n            <PencilAltIcon className=\"co-icon-space-r pf-c-button-icon--plain\" />\n            Configure\n          </Link>\n        ) : (\n          integrationTypesLabel\n        )}\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        {isDefaultReceiver && <RoutingLabel labels={{ default: 'all' }} />}\n        {_.map(receiverRoutingLabels, (route, i) => {\n          return !_.isEmpty(route.labels) ? <RoutingLabel key={i} labels={route.labels} /> : null;\n        })}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Kebab options={receiverMenuItems(receiver.name, canDelete, canUseEditForm)} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst ReceiversTable: React.FC<ReceiverTableProps> = (props) => {\n  const { filterValue } = props;\n  const { route } = config;\n  const { receiver: defaultReceiverName, routes } = route;\n\n  const routingLabelsByReceivers = _.isEmpty(routes) ? [] : getRoutingLabelsByReceivers(routes, {});\n  const EmptyMsg = () => <MsgBox title={`No Receivers match filter '${filterValue}'`} />;\n  return (\n    <Table\n      {...props}\n      aria-label=\"Receivers\"\n      customData={{ routingLabelsByReceivers, defaultReceiverName }}\n      EmptyMsg={EmptyMsg}\n      Header={ReceiverTableHeader}\n      Row={ReceiverTableRow}\n      loaded={true}\n      defaultSortField=\"name\"\n      virtualize\n    />\n  );\n};\nReceiversTable.displayName = 'ReceiversTable';\n\nconst ReceiversEmptyState: React.FC = () => (\n  <EmptyState variant={EmptyStateVariant.full}>\n    <Title size=\"lg\">No Receivers Found</Title>\n    <EmptyStateBody>\n      Create a receiver to get OpenShift alerts through other services such as email or a chat\n      platform. The first receiver you create will become the default receiver and will\n      automatically receive all alerts from this cluster. Subsequent receivers can have specific\n      sets of alerts routed to them.\n    </EmptyStateBody>\n  </EmptyState>\n);\n\nconst Receivers = () => {\n  const [receiverFilter, setReceiverFilter] = React.useState('');\n  let receivers = _.get(config, 'receivers', []);\n  if (receiverFilter) {\n    const filterStr = _.toLower(receiverFilter);\n    receivers = receivers.filter((receiver) => fuzzy(filterStr, _.toLower(receiver.name)));\n  }\n\n  const numOfIncompleteReceivers = numberOfIncompleteReceivers();\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text=\"Receivers\" />\n      <div className=\"co-m-pane__filter-bar co-m-pane__filter-bar--alt\">\n        <div className=\"co-m-pane__filter-bar-group\">\n          <Link className=\"co-m-primary-action\" to=\"/monitoring/alertmanagerconfig/receivers/~new\">\n            <Button variant=\"primary\" data-test-id=\"create-receiver\">\n              Create Receiver\n            </Button>\n          </Link>\n        </div>\n        <div className=\"co-m-pane__filter-bar-group co-m-pane__filter-bar-group--filter\">\n          <TextFilter\n            defaultValue=\"\"\n            label=\"Receivers by Name\"\n            onChange={(val) => setReceiverFilter(val)}\n          />\n        </div>\n      </div>\n      {numOfIncompleteReceivers > 0 && (\n        <Alert\n          isInline\n          className=\"co-alert co-alert--scrollable\"\n          variant=\"info\"\n          title={`Incomplete Alert Receiver${numOfIncompleteReceivers > 1 ? 's' : ''}`}\n        >\n          <div className=\"co-pre-line\">\n            Configure {numOfIncompleteReceivers === 1 ? 'this receiver' : 'these receivers'} to\n            ensure that you learn about important issues with your cluster.\n          </div>\n        </Alert>\n      )}\n      {_.isEmpty(receivers) && !receiverFilter ? (\n        <ReceiversEmptyState />\n      ) : (\n        <ReceiversTable filterValue={receiverFilter} data={receivers} />\n      )}\n    </div>\n  );\n};\n\nconst AlertmanagerConfiguration: React.FC<AlertmanagerConfigurationProps> = ({ obj }) => {\n  const [errorMsg, setErrorMsg] = React.useState('');\n  secret = obj; // alertmanager-main Secret which holds encoded alertmanager configuration yaml\n  if (!errorMsg) {\n    config = getAlertmanagerConfig(secret, setErrorMsg);\n  }\n\n  if (errorMsg) {\n    return (\n      <Alert\n        isInline\n        className=\"co-alert co-alert--scrollable\"\n        variant=\"danger\"\n        title=\"An error occurred\"\n      >\n        <div className=\"co-pre-line\">{errorMsg}</div>\n      </Alert>\n    );\n  }\n\n  return (\n    <>\n      <AlertRouting />\n      <Receivers />\n    </>\n  );\n};\n\nexport const AlertmanagerConfigWrapper: React.FC<AlertmanagerConfigWrapperProps> = React.memo(\n  ({ obj, ...props }) => {\n    return (\n      <>\n        <Helmet>\n          <title>Alerting</title>\n        </Helmet>\n        <StatusBox {...obj}>\n          <AlertmanagerConfiguration {...props} obj={obj.data} />\n        </StatusBox>\n      </>\n    );\n  },\n);\n\ntype AlertmanagerConfigWrapperProps = {\n  obj?: {\n    data?: K8sResourceKind;\n    [key: string]: any;\n  };\n};\n\ntype AlertmanagerConfigurationProps = {\n  obj?: K8sResourceKind;\n  onCancel?: () => void;\n};\ntype labels = {\n  [key: string]: string;\n};\n\nexport type AlertmanagerRoute = {\n  receiver?: string;\n  groupBy?: { [key: string]: string };\n  groupWait?: string;\n  groupInterval?: string;\n  repeatInterval?: string;\n  match?: labels[];\n  match_re?: labels[];\n  routes?: AlertmanagerRoute[];\n};\n\ntype RoutingLabelsByReceivers = {\n  receiver: string;\n  labels: { [key: string]: string };\n};\n\ntype WebhookConfig = {\n  url: string;\n};\n\ntype PagerDutyConfig = {\n  routingKey?: string;\n  serviceKey?: string;\n};\n\nexport type AlertmanagerReceiver = {\n  name: string;\n  webhookConfigs?: WebhookConfig[];\n  pagerdutyConfigs?: PagerDutyConfig[];\n};\n\nexport type AlertmanagerConfig = {\n  global: { [key: string]: string };\n  route: AlertmanagerRoute;\n  receivers: AlertmanagerReceiver[];\n};\n\ntype ReceiverTableProps = {\n  data: AlertmanagerReceiver[];\n  filterValue?: string;\n};\n\ntype RoutingLabelProps = {\n  labels: { [key: string]: string };\n};\n","/* eslint-disable camelcase */\nimport * as _ from 'lodash-es';\nimport { Base64 } from 'js-base64';\nimport { safeLoad, safeDump } from 'js-yaml';\n\nimport { k8sPatch, K8sResourceKind } from '../../module/k8s';\nimport { AlertmanagerConfig } from './alert-manager-config';\nimport { SecretModel } from '../../models';\n\nexport const receiverTypes = Object.freeze({\n  pagerduty_configs: 'PagerDuty',\n  webhook_configs: 'Webhook',\n  email_configs: 'Email',\n  slack_configs: 'Slack',\n});\n\nexport const getAlertmanagerYAML = (secret: K8sResourceKind, setErrorMsg): string => {\n  const alertManagerYaml = _.get(secret, ['data', 'alertmanager.yaml']);\n  let yaml = '';\n\n  if (_.isEmpty(alertManagerYaml)) {\n    setErrorMsg(\n      'Error: alertmanager.yaml not found in Secret \"alertmanager-main\", in namespace \"openshift-monitoring\"',\n    );\n    return yaml;\n  }\n\n  try {\n    yaml = Base64.decode(alertManagerYaml);\n  } catch (e) {\n    setErrorMsg(`Error decoding alertmanager.yaml: ${e}`);\n  }\n\n  return yaml;\n};\n\nexport const getAlertmanagerConfig = (secret: K8sResourceKind, setErrorMsg): AlertmanagerConfig => {\n  const alertManagerYAML: string = getAlertmanagerYAML(secret, setErrorMsg);\n  try {\n    return safeLoad(alertManagerYAML);\n  } catch (e) {\n    setErrorMsg(`Error loading alertmanager.yaml: ${e}`);\n    return null;\n  }\n};\n\nexport const patchAlertmanagerConfig = (\n  secret: K8sResourceKind,\n  yaml: object | string,\n): Promise<any> => {\n  const yamlString = _.isObject(yaml) ? safeDump(yaml) : yaml;\n  const yamlEncodedString = Base64.encode(yamlString);\n  const patch = [{ op: 'replace', path: '/data/alertmanager.yaml', value: yamlEncodedString }];\n  return k8sPatch(SecretModel, secret, patch);\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport { Alert } from '@patternfly/react-core';\nimport { safeLoad } from 'js-yaml';\n\nimport { K8sResourceKind } from '../../module/k8s';\nimport { AsyncComponent, StatusBox } from '../utils';\nimport { patchAlertmanagerConfig, getAlertmanagerYAML } from './alert-manager-utils';\n\nconst EditAlertmanagerYAML = (props) => (\n  <AsyncComponent\n    {...props}\n    loader={() => import('../edit-yaml').then((c) => c.EditYAML)}\n    create={false}\n    genericYAML\n  />\n);\n\nconst AlertmanagerYAMLEditor: React.FC<AlertmanagerYAMLEditorProps> = ({ obj }) => {\n  const secret: K8sResourceKind = obj;\n  const [errorMsg, setErrorMsg] = React.useState<string>();\n  const [loadErrorMsg, setloadErrorMsg] = React.useState<string>();\n  const [successMsg, setSuccessMsg] = React.useState<string>();\n\n  const save = (yaml: string) => {\n    if (_.isEmpty(yaml)) {\n      setErrorMsg('Alertmanager configuration cannot be empty.');\n      setSuccessMsg('');\n      return;\n    }\n    try {\n      safeLoad(yaml);\n    } catch (e) {\n      setErrorMsg(`Error parsing Alertmanager YAML: ${e}`);\n      setSuccessMsg('');\n      return;\n    }\n    patchAlertmanagerConfig(secret, yaml).then(\n      (newSecret) => {\n        setSuccessMsg(\n          `${newSecret.metadata.name} has been updated to version ${newSecret.metadata.resourceVersion}`,\n        );\n        setErrorMsg('');\n      },\n      (err) => {\n        setErrorMsg(err.message);\n        setSuccessMsg('');\n      },\n    );\n  };\n\n  if (loadErrorMsg) {\n    return (\n      <Alert\n        isInline\n        className=\"co-alert co-alert--scrollable\"\n        variant=\"danger\"\n        title=\"An error occurred\"\n      >\n        <div className=\"co-pre-line\">{loadErrorMsg}</div>\n      </Alert>\n    );\n  }\n\n  const alertmanagerYAML = getAlertmanagerYAML(secret, setloadErrorMsg);\n\n  return (\n    <>\n      <div className=\"co-m-nav-title\">\n        <p className=\"help-block\">\n          Update this YAML to configure Routes, Receivers, Groupings and other Alertmanager\n          settings.\n        </p>\n      </div>\n      <EditAlertmanagerYAML onSave={save} obj={alertmanagerYAML}>\n        {errorMsg && (\n          <Alert\n            isInline\n            className=\"co-alert co-alert--scrollable\"\n            variant=\"danger\"\n            title=\"An error occurred\"\n          >\n            <div className=\"co-pre-line\">{errorMsg}</div>\n          </Alert>\n        )}\n        {successMsg && <Alert isInline className=\"co-alert\" variant=\"success\" title={successMsg} />}\n      </EditAlertmanagerYAML>\n    </>\n  );\n};\n\nexport const AlertmanagerYAMLEditorWrapper: React.FC<AlertmanagerYAMLEditorWrapperProps> = React.memo(\n  ({ obj, ...props }) => {\n    return (\n      <>\n        <Helmet>\n          <title>Alerting</title>\n        </Helmet>\n        <StatusBox {...obj}>\n          <AlertmanagerYAMLEditor {...props} obj={obj.data} />\n        </StatusBox>\n      </>\n    );\n  },\n);\n\ntype AlertmanagerYAMLEditorWrapperProps = {\n  obj?: {\n    data?: K8sResourceKind;\n    [key: string]: any;\n  };\n};\n\ntype AlertmanagerYAMLEditorProps = {\n  obj?: K8sResourceKind;\n  onCancel?: () => void;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\n\nimport { Bar } from '../../graphs';\n\nconst Label = ({ metric }) => <>{_.values(metric).join()}</>;\n\nconst BarChart: React.FC<BarChartProps> = ({ pollInterval, query }) => (\n  <Bar\n    barSpacing={5}\n    barWidth={8}\n    delay={pollInterval}\n    LabelComponent={Label}\n    noLink={true}\n    query={query}\n  />\n);\n\ntype BarChartProps = {\n  pollInterval: number;\n  query: string;\n};\nexport default BarChart;\n","import * as _ from 'lodash-es';\n\nimport {\n  humanizeBinaryBytes,\n  humanizeDecimalBytesPerSec,\n  humanizeNumber,\n  humanizePacketsPerSec,\n} from '../../utils';\n\nexport const formatNumber = (s: string, decimals = 2, format = 'short'): string => {\n  const value = Number(s);\n  if (_.isNil(s) || isNaN(value)) {\n    return s || '-';\n  }\n\n  switch (format) {\n    case 'percentunit':\n      return Intl.NumberFormat(undefined, {\n        style: 'percent',\n        maximumFractionDigits: decimals,\n        minimumFractionDigits: decimals,\n      }).format(value);\n    case 'bytes':\n      return humanizeBinaryBytes(value).string;\n    case 'Bps':\n      return humanizeDecimalBytesPerSec(value).string;\n    case 'pps':\n      return humanizePacketsPerSec(value).string;\n    case 'short':\n    // fall through\n    default:\n      return humanizeNumber(value).string;\n  }\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\n\nimport * as UIActions from '../../../actions/ui';\nimport { RootState } from '../../../redux';\nimport { FormatLegendLabel, PatchQuery, QueryBrowser } from '../query-browser';\n\n// Set the queries in Redux so that other components like the graph tooltip can access them\nconst patchAllQueries = (queries: string[], patchQuery: PatchQuery): void => {\n  _.each(queries, (query, i) => patchQuery(i, { query }));\n};\n\nconst Graph_: React.FC<Props> = ({\n  formatLegendLabel,\n  isStack,\n  patchQuery,\n  pollInterval,\n  queries,\n  timespan,\n}) => (\n  <div onMouseEnter={() => patchAllQueries(queries, patchQuery)}>\n    <QueryBrowser\n      defaultSamples={30}\n      formatLegendLabel={formatLegendLabel}\n      hideControls\n      isStack={isStack}\n      pollInterval={pollInterval}\n      queries={queries}\n      timespan={timespan}\n    />\n  </div>\n);\nconst Graph = connect(({ UI }: RootState) => ({\n  timespan: UI.getIn(['monitoringDashboards', 'timespan']),\n}))(Graph_);\n\ntype Props = {\n  formatLegendLabel?: FormatLegendLabel;\n  isStack: boolean;\n  patchQuery: PatchQuery;\n  pollInterval: number;\n  queries: string[];\n  timespan: number;\n};\n\nexport default connect(null, { patchQuery: UIActions.queryBrowserPatchQuery })(Graph);\n","import * as _ from 'lodash-es';\nimport { Dropdown, DropdownToggle, DropdownItem } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { Map as ImmutableMap } from 'immutable';\n\nimport { RedExclamationCircleIcon } from '@console/shared';\nimport ErrorAlert from '@console/shared/src/components/alerts/error';\nimport Dashboard from '@console/shared/src/components/dashboard/Dashboard';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport { withFallback } from '@console/shared/src/components/error/error-boundary';\n\nimport * as UIActions from '../../../actions/ui';\nimport { ErrorBoundaryFallback } from '../../error';\nimport { RootState } from '../../../redux';\nimport { getPrometheusURL, PrometheusEndpoint } from '../../graphs/helpers';\nimport { ExternalLink, history, LoadingInline, useSafeFetch } from '../../utils';\nimport { formatPrometheusDuration, parsePrometheusDuration } from '../../utils/datetime';\nimport BarChart from './bar-chart';\nimport Graph from './graph';\nimport SingleStat from './single-stat';\nimport Table from './table';\nimport { Panel } from './types';\n\nconst NUM_SAMPLES = 30;\n\nconst evaluateTemplate = (s: string, variables: VariablesMap, timespan: number): string => {\n  if (_.isEmpty(s)) {\n    return undefined;\n  }\n  let result = s;\n  // Handle the special `$__interval` variable.\n  // https://grafana.com/docs/grafana/latest/reference/templating/#the-interval-variable\n  const intervalMS = timespan / NUM_SAMPLES;\n  const intervalMinutes = Math.floor(intervalMS / 1000 / 60);\n  // Use a minimum of 5m to make sure we have enough data to perform `irate`\n  // calculations, which require 2 data points each. Otherwise, there could be\n  // gaps in the graph.\n  const __interval: Variable = { value: `${Math.max(intervalMinutes, 5)}m` };\n  _.each({ ...variables, __interval }, (v, k) => {\n    const re = new RegExp(`\\\\$${k}`, 'g');\n    if (result.match(re)) {\n      if (v.isLoading) {\n        result = undefined;\n        return false;\n      }\n      result = result.replace(re, v.value || '');\n    }\n  });\n  return result;\n};\n\nconst useBoolean = (initialValue: boolean): [boolean, () => void, () => void, () => void] => {\n  const [value, setValue] = React.useState(initialValue);\n  const toggle = React.useCallback(() => setValue((v) => !v), []);\n  const setTrue = React.useCallback(() => setValue(true), []);\n  const setFalse = React.useCallback(() => setValue(false), []);\n  return [value, toggle, setTrue, setFalse];\n};\n\nconst VariableDropdown: React.FC<VariableDropdownProps> = ({\n  isError = false,\n  items,\n  label,\n  onChange,\n  selectedKey,\n}) => {\n  const [isOpen, toggleIsOpen, , setClosed] = useBoolean(false);\n\n  return (\n    <div className=\"form-group monitoring-dashboards__dropdown-wrap\">\n      <label className=\"monitoring-dashboards__dropdown-title\">{label}</label>\n      {isError ? (\n        <Dropdown\n          toggle={\n            <DropdownToggle className=\"monitoring-dashboards__dropdown-button\" isDisabled={true}>\n              <RedExclamationCircleIcon /> Error loading options\n            </DropdownToggle>\n          }\n        />\n      ) : (\n        <Dropdown\n          dropdownItems={_.map(items, (name, key) => (\n            <DropdownItem component=\"button\" key={key} onClick={() => onChange(key)}>\n              {name}\n            </DropdownItem>\n          ))}\n          isOpen={isOpen}\n          onSelect={setClosed}\n          toggle={\n            <DropdownToggle\n              className=\"monitoring-dashboards__dropdown-button\"\n              onToggle={toggleIsOpen}\n            >\n              {items[selectedKey]}\n            </DropdownToggle>\n          }\n        />\n      )}\n    </div>\n  );\n};\n\nconst SingleVariableDropdown_: React.FC<SingleVariableDropdownProps> = ({\n  isHidden,\n  name,\n  options,\n  optionsLoaded,\n  patchVariable,\n  query,\n  timespan,\n  value,\n}) => {\n  const safeFetch = React.useCallback(useSafeFetch(), []);\n\n  const [isError, setIsError] = React.useState(false);\n\n  React.useEffect(() => {\n    if (query) {\n      // Convert label_values queries to something Prometheus can handle\n      // TODO: Once the Prometheus /series endpoint is available through the API proxy, this should\n      // be converted to use that instead\n      const prometheusQuery = query.replace(/label_values\\((.*), (.*)\\)/, 'count($1) by ($2)');\n\n      const url = getPrometheusURL({\n        endpoint: PrometheusEndpoint.QUERY_RANGE,\n        query: prometheusQuery,\n        samples: NUM_SAMPLES,\n        timeout: '5s',\n        timespan,\n      });\n\n      patchVariable(name, { isLoading: true });\n\n      safeFetch(url)\n        .then(({ data }) => {\n          setIsError(false);\n          const newOptions = _.flatMap(data?.result, ({ metric }) => _.values(metric)).sort();\n          optionsLoaded(name, newOptions);\n        })\n        .catch((err) => {\n          patchVariable(name, { isLoading: false });\n          if (err.name !== 'AbortError') {\n            setIsError(true);\n          }\n        });\n    }\n  }, [name, patchVariable, query, safeFetch, optionsLoaded, timespan]);\n\n  const onChange = React.useCallback((v: string) => patchVariable(name, { value: v }), [\n    name,\n    patchVariable,\n  ]);\n\n  if (isHidden || (!isError && _.isEmpty(options))) {\n    return null;\n  }\n\n  return (\n    <VariableDropdown\n      isError={isError}\n      items={_.zipObject(options, options)}\n      label={name}\n      onChange={onChange}\n      selectedKey={value}\n    />\n  );\n};\nconst SingleVariableDropdown = connect(\n  ({ UI }: RootState, { name }: { name: string }) => {\n    const variables = UI.getIn(['monitoringDashboards', 'variables']).toJS();\n    const timespan = UI.getIn(['monitoringDashboards', 'timespan']);\n    const { isHidden, options, query, value } = variables[name] ?? {};\n    return {\n      isHidden,\n      options,\n      query: evaluateTemplate(query, variables, timespan),\n      timespan,\n      value,\n    };\n  },\n  {\n    optionsLoaded: UIActions.monitoringDashboardsVariableOptionsLoaded,\n    patchVariable: UIActions.monitoringDashboardsPatchVariable,\n  },\n)(SingleVariableDropdown_);\n\nconst AllVariableDropdowns_: React.FC<AllVariableDropdownsProps> = ({ variables }) => (\n  <>\n    {variables.keySeq().map((name) => (\n      <SingleVariableDropdown key={name} name={name} />\n    ))}\n  </>\n);\nconst AllVariableDropdowns = connect(({ UI }: RootState) => ({\n  variables: UI.getIn(['monitoringDashboards', 'variables']),\n}))(AllVariableDropdowns_);\n\nconst timespanOptions = {\n  '5m': '5 minutes',\n  '15m': '15 minutes',\n  '30m': '30 minutes',\n  '1h': '1 hour',\n  '2h': '2 hours',\n  '6h': '6 hours',\n  '12h': '12 hours',\n  '1d': '1 day',\n  '2d': '2 days',\n  '1w': '1 week',\n  '2w': '2 weeks',\n};\n\nconst TimespanDropdown_: React.FC<TimespanDropdownProps> = ({ timespan, setTimespan }) => {\n  const onChange = React.useCallback((v: string) => setTimespan(parsePrometheusDuration(v)), [\n    setTimespan,\n  ]);\n\n  return (\n    <VariableDropdown\n      items={timespanOptions}\n      label=\"Time Range\"\n      onChange={onChange}\n      selectedKey={formatPrometheusDuration(timespan)}\n    />\n  );\n};\n\nexport const TimespanDropdown = connect(\n  ({ UI }: RootState) => ({\n    timespan: UI.getIn(['monitoringDashboards', 'timespan']),\n  }),\n  {\n    setTimespan: UIActions.monitoringDashboardsSetTimespan,\n  },\n)(TimespanDropdown_);\n\nconst pollOffText = 'Off';\nconst pollIntervalOptions = {\n  [pollOffText]: pollOffText,\n  '15s': '15 seconds',\n  '30s': '30 seconds',\n  '1m': '1 minute',\n  '5m': '5 minutes',\n  '15m': '15 minutes',\n  '30m': '30 minutes',\n  '1h': '1 hour',\n  '2h': '2 hours',\n  '1d': '1 day',\n};\n\nconst PollIntervalDropdown_: React.FC<PollIntervalDropdownProps> = ({\n  pollInterval,\n  setPollInterval,\n}) => {\n  const onChange = React.useCallback(\n    (v: string) => setPollInterval(v === pollOffText ? null : parsePrometheusDuration(v)),\n    [setPollInterval],\n  );\n\n  return (\n    <VariableDropdown\n      items={pollIntervalOptions}\n      label=\"Refresh Interval\"\n      onChange={onChange}\n      selectedKey={pollInterval === null ? pollOffText : formatPrometheusDuration(pollInterval)}\n    />\n  );\n};\n\nexport const PollIntervalDropdown = connect(\n  ({ UI }: RootState) => ({\n    pollInterval: UI.getIn(['monitoringDashboards', 'pollInterval']),\n  }),\n  {\n    setPollInterval: UIActions.monitoringDashboardsSetPollInterval,\n  },\n)(PollIntervalDropdown_);\n\n// Matches Prometheus labels surrounded by {{ }} in the graph legend label templates\nconst legendTemplateOptions = { interpolate: /{{([a-zA-Z_][a-zA-Z0-9_]*)}}/g };\n\nconst CardBody_: React.FC<CardBodyProps> = ({ panel, pollInterval, timespan, variables }) => {\n  const formatLegendLabel = React.useCallback(\n    (labels, i) => {\n      const legendFormat = panel.targets?.[i]?.legendFormat;\n      const compiled = _.template(legendFormat, legendTemplateOptions);\n      try {\n        return compiled(labels);\n      } catch (e) {\n        // If we can't format the label (e.g. if one of it's variables is missing from `labels`),\n        // show the template string instead\n        return legendFormat;\n      }\n    },\n    [panel],\n  );\n\n  const variablesJS: VariablesMap = variables.toJS();\n\n  const rawQueries = _.map(panel.targets, 'expr');\n  if (!rawQueries.length) {\n    return null;\n  }\n  const queries = rawQueries.map((expr) => evaluateTemplate(expr, variablesJS, timespan));\n\n  if (_.some(queries, _.isUndefined)) {\n    return <LoadingInline />;\n  }\n\n  return (\n    <>\n      {panel.type === 'grafana-piechart-panel' && (\n        <BarChart pollInterval={pollInterval} query={queries[0]} />\n      )}\n      {panel.type === 'graph' && (\n        <Graph\n          formatLegendLabel={panel.legend?.show ? formatLegendLabel : undefined}\n          isStack={panel.stack}\n          pollInterval={pollInterval}\n          queries={queries}\n        />\n      )}\n      {panel.type === 'singlestat' && (\n        <SingleStat panel={panel} pollInterval={pollInterval} query={queries[0]} />\n      )}\n      {panel.type === 'table' && (\n        <Table panel={panel} pollInterval={pollInterval} queries={queries} />\n      )}\n    </>\n  );\n};\nconst CardBody = connect(({ UI }: RootState) => ({\n  pollInterval: UI.getIn(['monitoringDashboards', 'pollInterval']),\n  timespan: UI.getIn(['monitoringDashboards', 'timespan']),\n  variables: UI.getIn(['monitoringDashboards', 'variables']),\n}))(CardBody_);\n\n// Determine how many columns a panel should span. If panel specifies a `span`, use that. Otherwise\n// look for a `breakpoint` percentage. If neither are specified, default to 12 (full width).\nconst getPanelSpan = (panel: Panel): number => {\n  if (panel.span) {\n    return panel.span;\n  }\n  const breakpoint = _.toInteger(_.trimEnd(panel.breakpoint, '%'));\n  if (breakpoint > 0) {\n    return Math.round(12 * (breakpoint / 100));\n  }\n  return 12;\n};\n\nconst getPanelClassModifier = (panel: Panel): string => {\n  const span: number = getPanelSpan(panel);\n  switch (span) {\n    case 6:\n      return 'max-2';\n    case 2:\n    // fallthrough\n    case 4:\n    // fallthrough\n    case 5:\n      return 'max-3';\n    case 3:\n      return 'max-4';\n    default:\n      return 'max-1';\n  }\n};\n\nconst Card: React.FC<CardProps> = ({ panel }) => {\n  if (panel.type === 'row') {\n    return (\n      <>\n        {_.map(panel.panels, (p) => (\n          <Card key={p.id} panel={p} />\n        ))}\n      </>\n    );\n  }\n\n  const panelClassModifier = getPanelClassModifier(panel);\n  return (\n    <div\n      className={`monitoring-dashboards__panel monitoring-dashboards__panel--${panelClassModifier}`}\n    >\n      <DashboardCard\n        className=\"monitoring-dashboards__card\"\n        gradient={panel.type === 'grafana-piechart-panel'}\n      >\n        <DashboardCardHeader className=\"monitoring-dashboards__card-header\">\n          <DashboardCardTitle>{panel.title}</DashboardCardTitle>\n        </DashboardCardHeader>\n        <DashboardCardBody className=\"co-dashboard-card__body--dashboard-graph\">\n          <CardBody panel={panel} />\n        </DashboardCardBody>\n      </DashboardCard>\n    </div>\n  );\n};\n\nconst Board: React.FC<BoardProps> = ({ rows }) => (\n  <>\n    {_.map(rows, (row, i) => (\n      <div className=\"monitoring-dashboards__row\" key={i}>\n        {_.map(row.panels, (panel) => (\n          <Card key={panel.id} panel={panel} />\n        ))}\n      </div>\n    ))}\n  </>\n);\n\nconst GrafanaLink = () =>\n  _.isEmpty(window.SERVER_FLAGS.grafanaPublicURL) ? null : (\n    <span className=\"monitoring-header-link\">\n      <ExternalLink href={window.SERVER_FLAGS.grafanaPublicURL} text=\"Grafana UI\" />\n    </span>\n  );\n\nconst MonitoringDashboardsPage_: React.FC<MonitoringDashboardsPageProps> = ({\n  deleteAll,\n  match,\n  patchAllVariables,\n}) => {\n  const [board, setBoard] = React.useState<string>();\n  const [boards, setBoards] = React.useState<Board[]>([]);\n  const [error, setError] = React.useState<string>();\n  const [isLoading, , , setLoaded] = useBoolean(true);\n\n  const safeFetch = React.useCallback(useSafeFetch(), []);\n\n  // Clear queries on unmount\n  React.useEffect(() => deleteAll, [deleteAll]);\n\n  React.useEffect(() => {\n    safeFetch('/api/console/monitoring-dashboard-config')\n      .then((response) => {\n        setLoaded();\n        setError(undefined);\n\n        const getBoardData = (item): Board => ({\n          data: JSON.parse(_.values(item?.data)[0]),\n          name: item.metadata.name,\n        });\n        const newBoards = _.sortBy(_.map(response.items, getBoardData), (v) =>\n          _.toLower(v?.data?.title),\n        );\n        setBoards(newBoards);\n      })\n      .catch((err) => {\n        setLoaded();\n        if (err.name !== 'AbortError') {\n          setError(_.get(err, 'json.error', err.message));\n        }\n      });\n  }, [safeFetch, setLoaded]);\n\n  const boardItems = React.useMemo(() => _.mapValues(_.mapKeys(boards, 'name'), 'data.title'), [\n    boards,\n  ]);\n\n  const changeBoard = React.useCallback(\n    (newBoard: string) => {\n      if (newBoard !== board) {\n        const data = _.find(boards, { name: newBoard })?.data;\n\n        const allVariables = {};\n        _.each(data?.templating?.list, (v) => {\n          if (v.type === 'query' || v.type === 'interval') {\n            allVariables[v.name] = ImmutableMap({\n              isHidden: v.hide !== 0,\n              isLoading: v.type === 'query',\n              options: _.map(v.options, 'value'),\n              query: v.type === 'query' ? v.query : undefined,\n              value: _.find(v.options, { selected: true })?.value || v.options?.[0]?.value,\n            });\n          }\n        });\n        patchAllVariables(allVariables);\n\n        setBoard(newBoard);\n        history.replace(`/monitoring/dashboards/${newBoard}`);\n      }\n    },\n    [board, boards, patchAllVariables],\n  );\n\n  // Default to displaying the first board\n  React.useEffect(() => {\n    if (!board && !_.isEmpty(boards)) {\n      changeBoard(match.params.board || boards?.[0]?.name);\n    }\n  }, [board, boards, changeBoard, match.params.board]);\n\n  if (error) {\n    return <ErrorAlert message={error} />;\n  }\n\n  const data = _.find(boards, { name: board })?.data;\n  const rows = _.isEmpty(data?.rows) ? [{ panels: data?.panels }] : data?.rows;\n\n  return (\n    <>\n      <Helmet>\n        <title>Metrics Dashboards</title>\n      </Helmet>\n      <div className=\"co-m-nav-title co-m-nav-title--detail\">\n        <div className=\"monitoring-dashboards__header\">\n          <h1 className=\"co-m-pane__heading\">\n            <span>\n              Dashboards <GrafanaLink />\n            </span>\n          </h1>\n          <div className=\"monitoring-dashboards__options\">\n            <TimespanDropdown />\n            <PollIntervalDropdown />\n          </div>\n        </div>\n        <div className=\"monitoring-dashboards__variables\">\n          {!_.isEmpty(boardItems) && (\n            <VariableDropdown\n              items={boardItems}\n              label=\"Dashboard\"\n              onChange={changeBoard}\n              selectedKey={board}\n            />\n          )}\n          <AllVariableDropdowns key={board} />\n        </div>\n      </div>\n      <Dashboard>{isLoading ? <LoadingInline /> : <Board key={board} rows={rows} />}</Dashboard>\n    </>\n  );\n};\nconst MonitoringDashboardsPage = connect(null, {\n  deleteAll: UIActions.queryBrowserDeleteAllQueries,\n  patchAllVariables: UIActions.monitoringDashboardsPatchAllVariables,\n})(MonitoringDashboardsPage_);\n\ntype TemplateVariable = {\n  hide: number;\n  name: string;\n  options: { selected: boolean; value: string }[];\n  query: string;\n  type: string;\n};\n\ntype Row = {\n  panels: Panel[];\n};\n\ntype Board = {\n  data: {\n    panels: Panel[];\n    rows: Row[];\n    templating: {\n      list: TemplateVariable[];\n    };\n    title: string;\n  };\n  name: string;\n};\n\ntype Variable = {\n  isHidden?: boolean;\n  isLoading?: boolean;\n  options?: string[];\n  query?: string;\n  value?: string;\n};\n\ntype VariablesMap = { [key: string]: Variable };\n\ntype VariableDropdownProps = {\n  isError?: boolean;\n  items: { [key: string]: string };\n  label: string;\n  onChange: (v: string) => void;\n  selectedKey: string;\n};\n\ntype SingleVariableDropdownProps = {\n  isHidden: boolean;\n  name: string;\n  options?: string[];\n  patchVariable: (key: string, patch: Variable) => undefined;\n  query?: string;\n  optionsLoaded: (key: string, newOptions: string[]) => undefined;\n  timespan: number;\n  value?: string;\n};\n\ntype BoardProps = {\n  rows: Row[];\n};\n\ntype AllVariableDropdownsProps = {\n  variables: ImmutableMap<string, ImmutableMap<string, any>>;\n};\n\ntype TimespanDropdownProps = {\n  timespan: number;\n  setTimespan: (v: number) => never;\n};\n\ntype PollIntervalDropdownProps = {\n  pollInterval: number;\n  setPollInterval: (v: number) => never;\n};\n\ntype CardBodyProps = {\n  panel: Panel;\n  pollInterval: null | number;\n  timespan: number;\n  variables: ImmutableMap<string, ImmutableMap<string, any>>;\n};\n\ntype CardProps = {\n  panel: Panel;\n};\n\ntype MonitoringDashboardsPageProps = {\n  deleteAll: () => undefined;\n  match: {\n    params: { board: string };\n  };\n  patchAllVariables: (variables: VariablesMap) => undefined;\n};\n\nexport default withFallback(MonitoringDashboardsPage, ErrorBoundaryFallback);\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Bullseye } from '@patternfly/react-core';\n\nimport ErrorAlert from '@console/shared/src/components/alerts/error';\n\nimport { formatNumber } from './format';\nimport { Panel } from './types';\nimport { PrometheusResponse } from '../../graphs';\nimport { getPrometheusURL, PrometheusEndpoint } from '../../graphs/helpers';\nimport { LoadingInline, usePoll, useSafeFetch } from '../../utils';\n\nconst Body: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <Bullseye className=\"monitoring-dashboards__single-stat query-browser__wrapper\">\n    {children}\n  </Bullseye>\n);\n\nconst SingleStat: React.FC<Props> = ({ panel, pollInterval, query }) => {\n  const {\n    decimals,\n    format,\n    postfix,\n    postfixFontSize,\n    prefix,\n    prefixFontSize,\n    valueFontSize,\n  } = panel;\n\n  const [error, setError] = React.useState<string>();\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [value, setValue] = React.useState<string>();\n\n  const safeFetch = React.useCallback(useSafeFetch(), []);\n\n  const tick = () =>\n    safeFetch(getPrometheusURL({ endpoint: PrometheusEndpoint.QUERY, query }))\n      .then((response: PrometheusResponse) => {\n        setError(undefined);\n        setIsLoading(false);\n        setValue(_.get(response, 'data.result[0].value[1]'));\n      })\n      .catch((err) => {\n        if (err.name !== 'AbortError') {\n          setError(_.get(err, 'json.error', err.message));\n          setIsLoading(false);\n          setValue(undefined);\n        }\n      });\n\n  usePoll(tick, pollInterval, query);\n\n  if (isLoading) {\n    return <LoadingInline />;\n  }\n  if (error) {\n    return <ErrorAlert message={error} />;\n  }\n\n  return (\n    <Body>\n      {prefix && <span style={{ fontSize: prefixFontSize }}>{prefix}</span>}\n      <span style={{ fontSize: valueFontSize }}>{formatNumber(value, decimals, format)}</span>\n      {postfix && <span style={{ fontSize: postfixFontSize }}>{postfix}</span>}\n    </Body>\n  );\n};\n\ntype Props = {\n  panel: Panel;\n  pollInterval: number;\n  query: string;\n};\n\nexport default SingleStat;\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport {\n  ISortBy,\n  sortable,\n  Table as PFTable,\n  TableBody,\n  TableGridBreakpoint,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\n\nimport ErrorAlert from '@console/shared/src/components/alerts/error';\n\nimport { formatNumber } from './format';\nimport { ColumnStyle, Panel } from './types';\nimport { PrometheusResponse } from '../../graphs';\nimport { getPrometheusURL, PrometheusEndpoint } from '../../graphs/helpers';\nimport { EmptyBox, usePoll, useSafeFetch } from '../../utils';\nimport { TablePagination } from '../metrics';\n\ntype AugmentedColumnStyle = ColumnStyle & {\n  className?: string;\n};\n\n// Get the columns from the panel styles. Filters out hidden columns and orders\n// them so the label columns are displayed first.\nconst getColumns = (styles: ColumnStyle[]): AugmentedColumnStyle[] => {\n  const labelColumns = [];\n  const valueColumns = [];\n  styles.forEach((col: ColumnStyle) => {\n    // Remove hidden or regex columns.\n    if (col.type === 'hidden' || col.pattern.startsWith('/') || !col.alias) {\n      return;\n    }\n\n    if (col.pattern.startsWith('Value #')) {\n      valueColumns.push(col);\n    } else {\n      labelColumns.push({\n        ...col,\n        className: 'monitoring-dashboards__label-column-header',\n      });\n    }\n  });\n\n  // Show non-value columns first.\n  return [...labelColumns, ...valueColumns];\n};\n\nconst paginationOptions = [5, 10, 20, 50, 100].map((n) => ({\n  title: n.toString(),\n  value: n,\n}));\n\nconst Table: React.FC<Props> = ({ panel, pollInterval, queries }) => {\n  const [error, setError] = React.useState();\n  const [isLoading, setLoading] = React.useState(true);\n  const [data, setData] = React.useState();\n  const [page, setPage] = React.useState(1);\n  const [perPage, setPerPage] = React.useState(5);\n  const [sortBy, setSortBy] = React.useState<ISortBy>({ index: 0, direction: 'asc' });\n  const onSort = (e, index: ISortBy['index'], direction: ISortBy['direction']) =>\n    setSortBy({ index, direction });\n  const safeFetch = React.useCallback(useSafeFetch(), []);\n\n  const tick = () => {\n    Promise.all(\n      queries.map((q) =>\n        safeFetch(getPrometheusURL({ endpoint: PrometheusEndpoint.QUERY, query: q })),\n      ),\n    )\n      .then((responses: PrometheusResponse[]) => {\n        setError(undefined);\n        setLoading(false);\n        // Note: This makes the following assumptions about the data:\n        // 1. The transform is `table`\n        // 2. The value will be an instance vector (single value).\n        // 3. The time column is hidden.\n        // The Grafana implementation is much more involved. See\n        //   https://grafana.com/docs/grafana/latest/features/panels/table_panel/#merge-multiple-queries-per-table\n        setData(\n          responses.reduce((acc, response, i: number) => {\n            const id = panel.targets[i].refId;\n            response.data.result.forEach(({ metric, value }) => {\n              const label = _.first(Object.keys(metric));\n              const tag = metric[label];\n              if (!acc[tag]) {\n                acc[tag] = { ...metric };\n              }\n              acc[tag][`Value #${id}`] = value[1] || '';\n            });\n            return acc;\n          }, {} as any),\n        );\n      })\n      .catch((err) => {\n        if (err.name !== 'AbortError') {\n          setError(_.get(err, 'json.error', err.message));\n          setLoading(false);\n          setData(undefined);\n        }\n      });\n  };\n\n  usePoll(tick, pollInterval, queries);\n  if (isLoading) {\n    return <div className=\"loading-skeleton--table\" />;\n  }\n  if (error) {\n    return <ErrorAlert message={error} />;\n  }\n  if (_.isEmpty(data)) {\n    return <EmptyBox label=\"Data\" />;\n  }\n\n  const columns: AugmentedColumnStyle[] = getColumns(panel.styles);\n\n  // Sort the data.\n  const sort = (row) => {\n    const { pattern, type } = columns[sortBy.index];\n    const val = row[pattern];\n    if (type !== 'number') {\n      return val;\n    }\n    if (_.isNil(val)) {\n      return Number.MIN_VALUE;\n    }\n    const num = Number(val);\n    // Some columns styles claim to be numbers, but have string data. Still sort those as strings.\n    return _.isFinite(num) ? num : val;\n  };\n  const sortedData = _.orderBy(data, [sort], [sortBy.direction]);\n  const visibleData = sortedData.slice((page - 1) * perPage, page * perPage);\n\n  // Format the table rows.\n  const rows: string[][] = visibleData.map((values: { [key: string]: string }) => {\n    return columns.reduce((acc: string[], { type, decimals = 2, pattern, unit = '' }) => {\n      const value = values[pattern];\n      switch (type) {\n        case 'number':\n          acc.push(formatNumber(value, decimals, unit));\n          break;\n        default:\n          acc.push(value || '-');\n      }\n      return acc;\n    }, []);\n  });\n\n  const headers = columns.map(({ alias: title, className }) => ({\n    title,\n    transforms: [sortable],\n    ...(className ? { props: { className } } : {}),\n  }));\n\n  return (\n    <>\n      <div className=\"monitoring-dashboards__table-container\">\n        <PFTable\n          aria-label=\"query results table\"\n          cells={headers}\n          className=\"monitoring-dashboards__table\"\n          gridBreakPoint={TableGridBreakpoint.none}\n          onSort={onSort}\n          rows={rows}\n          sortBy={sortBy}\n          variant={TableVariant.compact}\n        >\n          <TableHeader />\n          <TableBody />\n        </PFTable>\n      </div>\n      <TablePagination\n        itemCount={sortedData.length}\n        paginationOptions={paginationOptions}\n        page={page}\n        perPage={perPage}\n        setPage={setPage}\n        setPerPage={setPerPage}\n      />\n    </>\n  );\n};\n\ntype Props = {\n  panel: Panel;\n  pollInterval: number;\n  queries: string[];\n};\n\nexport default Table;\n","import * as classNames from 'classnames';\nimport * as _ from 'lodash-es';\nimport { List as ImmutableList } from 'immutable';\nimport {\n  ActionGroup,\n  Alert,\n  AlertActionCloseButton,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Pagination,\n  PaginationVariant,\n  Switch,\n  Title,\n} from '@patternfly/react-core';\nimport {\n  AngleDownIcon,\n  AngleRightIcon,\n  ChartLineIcon,\n  CompressIcon,\n  TimesIcon,\n} from '@patternfly/react-icons';\nimport {\n  ISortBy,\n  sortable,\n  Table,\n  TableBody,\n  TableGridBreakpoint,\n  TableHeader,\n  TableVariant,\n  wrappable,\n} from '@patternfly/react-table';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\n\nimport { withFallback } from '@console/shared/src/components/error/error-boundary';\nimport {\n  RedExclamationCircleIcon,\n  TechPreviewBadge,\n  YellowExclamationTriangleIcon,\n} from '@console/shared';\nimport * as UIActions from '../../actions/ui';\nimport { RootState } from '../../redux';\nimport { fuzzyCaseInsensitive } from '../factory/table-filters';\nimport { PrometheusData, PrometheusLabels, PROMETHEUS_BASE_PATH } from '../graphs';\nimport { getPrometheusURL, PrometheusEndpoint } from '../graphs/helpers';\nimport { getPrometheusExpressionBrowserURL } from '../graphs/prometheus-graph';\nimport {\n  ActionsMenu,\n  Dropdown,\n  ExternalLink,\n  getURLSearchParams,\n  Kebab,\n  LoadingInline,\n  usePoll,\n  useSafeFetch,\n} from '../utils';\nimport { setAllQueryArguments } from '../utils/router';\nimport { colors, Error, QueryObj, QueryBrowser } from './query-browser';\n\nconst aggregationOperators = [\n  'avg()',\n  'bottomk()',\n  'count()',\n  'count_values()',\n  'max()',\n  'min()',\n  'quantile()',\n  'stddev()',\n  'stdvar()',\n  'sum()',\n  'topk()',\n];\n\nconst prometheusFunctions = [\n  'abs()',\n  'absent()',\n  'avg_over_time()',\n  'ceil()',\n  'changes()',\n  'clamp_max()',\n  'clamp_min()',\n  'count_over_time()',\n  'day_of_month()',\n  'day_of_week()',\n  'days_in_month()',\n  'delta()',\n  'deriv()',\n  'exp()',\n  'floor()',\n  'histogram_quantile()',\n  'holt_winters()',\n  'hour()',\n  'idelta()',\n  'increase()',\n  'irate()',\n  'label_join()',\n  'label_replace()',\n  'ln()',\n  'log10()',\n  'log2()',\n  'max_over_time()',\n  'min_over_time()',\n  'minute()',\n  'month()',\n  'predict_linear()',\n  'quantile_over_time()',\n  'rate()',\n  'resets()',\n  'round()',\n  'scalar()',\n  'sort()',\n  'sort_desc()',\n  'sqrt()',\n  'stddev_over_time()',\n  'stdvar_over_time()',\n  'sum_over_time()',\n  'time()',\n  'timestamp()',\n  'vector()',\n  'year()',\n];\n\n// Stores information about the currently focused query input\nlet focusedQuery;\n\nconst queryDispatchToProps = (dispatch, { index }) => ({\n  deleteQuery: () => dispatch(UIActions.queryBrowserDeleteQuery(index)),\n  patchQuery: (v: QueryObj) => dispatch(UIActions.queryBrowserPatchQuery(index, v)),\n  toggleIsEnabled: () => dispatch(UIActions.queryBrowserToggleIsEnabled(index)),\n});\n\nconst MetricsActionsMenu_: React.FC<MetricsActionsMenuProps> = ({\n  addQuery,\n  deleteAll,\n  isAllExpanded,\n  setAllExpanded,\n}) => {\n  const doDelete = () => {\n    deleteAll();\n    focusedQuery = undefined;\n  };\n\n  const actionsMenuActions = [\n    { label: 'Add query', callback: addQuery },\n    {\n      label: `${isAllExpanded ? 'Collapse' : 'Expand'} all query tables`,\n      callback: () => setAllExpanded(!isAllExpanded),\n    },\n    { label: 'Delete all queries', callback: doDelete },\n  ];\n\n  return (\n    <div className=\"co-actions\">\n      <ActionsMenu actions={actionsMenuActions} />\n    </div>\n  );\n};\nconst MetricsActionsMenu = connect(\n  ({ UI }: RootState) => ({\n    isAllExpanded: UI.getIn(['queryBrowser', 'queries']).every((q) => q.get('isExpanded')),\n  }),\n  {\n    addQuery: UIActions.queryBrowserAddQuery,\n    deleteAll: UIActions.queryBrowserDeleteAllQueries,\n    setAllExpanded: UIActions.queryBrowserSetAllExpanded,\n  },\n)(MetricsActionsMenu_);\n\nconst headerPrometheusLinkStateToProps = ({ UI }: RootState) => {\n  const liveQueries = UI.getIn(['queryBrowser', 'queries']).filter(\n    (q) => q.get('isEnabled') && q.get('query'),\n  );\n  const queryStrings = _.map(liveQueries.toJS(), 'query');\n  const url = window.SERVER_FLAGS.prometheusPublicURL;\n  return {\n    url:\n      getPrometheusExpressionBrowserURL(url, queryStrings) ||\n      window.SERVER_FLAGS.prometheusPublicURL,\n  };\n};\n\nconst HeaderPrometheusLink_ = ({ url }) => {\n  return url ? (\n    <span className=\"monitoring-header-link\">\n      <ExternalLink href={url} text=\"Prometheus UI\" />\n    </span>\n  ) : null;\n};\nconst HeaderPrometheusLink = connect(headerPrometheusLinkStateToProps)(HeaderPrometheusLink_);\n\nexport const graphStateToProps = ({ UI }: RootState) => ({\n  hideGraphs: !!UI.getIn(['monitoring', 'hideGraphs']),\n});\n\nconst ToggleGraph_ = ({ hideGraphs, toggle }) => {\n  const icon = hideGraphs ? <ChartLineIcon /> : <CompressIcon />;\n\n  return (\n    <Button\n      type=\"button\"\n      className=\"pf-m-link--align-right query-browser__toggle-graph\"\n      onClick={toggle}\n      variant=\"link\"\n    >\n      {icon} {hideGraphs ? 'Show' : 'Hide'} Graph\n    </Button>\n  );\n};\nexport const ToggleGraph = connect(graphStateToProps, { toggle: UIActions.monitoringToggleGraphs })(\n  ToggleGraph_,\n);\n\nconst MetricsDropdown_: React.FC<MetricsDropdownProps> = ({\n  insertText,\n  namespace,\n  setMetrics,\n}) => {\n  const [items, setItems] = React.useState<MetricsDropdownItems>();\n  const [isError, setIsError] = React.useState(false);\n\n  const safeFetch = React.useCallback(useSafeFetch(), []);\n\n  React.useEffect(() => {\n    const url = namespace\n      ? getPrometheusURL({\n          endpoint: PrometheusEndpoint.QUERY,\n          namespace,\n          query: `count({namespace=\"${namespace}\"}) by (__name__)`,\n        })\n      : `${PROMETHEUS_BASE_PATH}/${PrometheusEndpoint.LABEL}/__name__/values`;\n    safeFetch(url)\n      .then((response) => {\n        const metrics = namespace\n          ? _.map(_.get(response, 'data.result'), 'metric.__name__').sort()\n          : _.get(response, 'data');\n        setItems(_.zipObject(metrics, metrics));\n        setMetrics(metrics);\n      })\n      .catch(() => setIsError(true));\n  }, [namespace, safeFetch, setMetrics]);\n\n  const onChange = (metric: string) => {\n    // Replace the currently selected text with the metric\n    const { index = 0, selection = {}, target = undefined } = focusedQuery || {};\n    insertText(index, metric, selection.start, selection.end);\n\n    if (target) {\n      target.focus();\n\n      // Restore cursor position / currently selected text (use _.defer() to delay until after the input value is set)\n      _.defer(() => target.setSelectionRange(selection.start, selection.start + metric.length));\n    }\n  };\n\n  let title: React.ReactNode = 'Insert Metric at Cursor';\n  if (isError) {\n    title = (\n      <span>\n        <RedExclamationCircleIcon /> Failed to load metrics list.\n      </span>\n    );\n  } else if (items === undefined) {\n    title = <LoadingInline />;\n  } else if (_.isEmpty(items)) {\n    title = (\n      <span>\n        <YellowExclamationTriangleIcon /> No metrics found.\n      </span>\n    );\n  }\n\n  return (\n    <Dropdown\n      autocompleteFilter={fuzzyCaseInsensitive}\n      disabled={isError}\n      id=\"metrics-dropdown\"\n      items={items || {}}\n      menuClassName=\"query-browser__metrics-dropdown-menu query-browser__metrics-dropdown-menu--insert\"\n      onChange={onChange}\n      title={title}\n    />\n  );\n};\nconst MetricsDropdown: React.ComponentType<{ namespace?: string }> = connect(null, {\n  insertText: UIActions.queryBrowserInsertText,\n  setMetrics: UIActions.queryBrowserSetMetrics,\n})(MetricsDropdown_);\n\nconst ExpandButton = ({ isExpanded, onClick }) => {\n  const title = `${isExpanded ? 'Hide' : 'Show'} Table`;\n  return (\n    <Button\n      aria-label={title}\n      className=\"query-browser__expand-button\"\n      onClick={onClick}\n      title={title}\n      variant=\"plain\"\n    >\n      {isExpanded ? (\n        <AngleDownIcon className=\"query-browser__expand-icon\" />\n      ) : (\n        <AngleRightIcon className=\"query-browser__expand-icon\" />\n      )}\n    </Button>\n  );\n};\n\nconst seriesButtonStateToProps = ({ UI }: RootState, { index, labels }) => {\n  const disabledSeries = UI.getIn(['queryBrowser', 'queries', index, 'disabledSeries']);\n  const isDisabled = _.some(disabledSeries, (s) => _.isEqual(s, labels));\n  if (!isDisabled) {\n    const series = UI.getIn(['queryBrowser', 'queries', index, 'series']);\n    if (_.isEmpty(series)) {\n      return { colorIndex: null, isDisabled, isSeriesEmpty: true };\n    }\n    const colorOffset = UI.getIn(['queryBrowser', 'queries'])\n      .take(index)\n      .filter((q) => q.get('isEnabled'))\n      .reduce((sum, q) => sum + _.size(q.get('series')), 0);\n    const seriesIndex = _.findIndex(series, (s) => _.isEqual(s, labels));\n    const colorIndex = (colorOffset + seriesIndex) % colors.length;\n    return { colorIndex, isDisabled };\n  }\n  return { colorIndex: null, isDisabled };\n};\n\nconst SeriesButton_: React.FC<SeriesButtonProps> = ({\n  colorIndex,\n  isDisabled,\n  isSeriesEmpty = false,\n  toggleSeries,\n}) => {\n  if (isSeriesEmpty) {\n    return null;\n  }\n  const title = `${isDisabled ? 'Show' : 'Hide'} series`;\n\n  return (\n    <div className=\"query-browser__series-btn-wrap\">\n      <Button\n        aria-label={title}\n        className={classNames('query-browser__series-btn', {\n          'query-browser__series-btn--disabled': isDisabled,\n        })}\n        onClick={toggleSeries}\n        style={colorIndex === null ? undefined : { backgroundColor: colors[colorIndex] }}\n        title={title}\n        type=\"button\"\n        variant=\"plain\"\n      />\n    </div>\n  );\n};\nconst SeriesButton = connect(seriesButtonStateToProps, (dispatch, { index, labels }) => ({\n  toggleSeries: () => dispatch(UIActions.queryBrowserToggleSeries(index, labels)),\n}))(SeriesButton_);\n\nconst queryInputStateToProps = ({ UI }: RootState, { index }) => ({\n  metrics: UI.getIn(['queryBrowser', 'metrics']),\n  text: UI.getIn(['queryBrowser', 'queries', index, 'text']),\n});\n\nconst QueryInput_: React.FC<QueryInputProps> = ({\n  index,\n  metrics,\n  patchQuery,\n  runQueries,\n  text = '',\n}) => {\n  const [token, setToken] = React.useState('');\n\n  const inputRef = React.useRef(null);\n\n  const getTextBeforeCursor = () =>\n    inputRef.current.value.substring(0, inputRef.current.selectionEnd);\n\n  const onChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    patchQuery({ text: e.target.value });\n\n    // Metric and function names can only contain the characters a-z, A-Z, 0-9, '_' and ':'\n    const allTokens = getTextBeforeCursor().split(/[^a-zA-Z0-9_:]+/);\n\n    // We always do case insensitive autocompletion, so convert to lower case immediately\n    setToken(_.toLower(_.last(allTokens)));\n  };\n\n  const onKeyDown = (e: React.KeyboardEvent) => {\n    // Enter+Shift inserts newlines, Enter alone runs the query\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      runQueries();\n      setToken('');\n    }\n  };\n\n  const onBlur = (e: React.FocusEvent<HTMLTextAreaElement>) => {\n    focusedQuery = {\n      index,\n      selection: {\n        start: e.target.selectionStart,\n        end: e.target.selectionEnd,\n      },\n      target: e.target,\n    };\n    setToken('');\n  };\n\n  // Use onMouseDown instead of onClick so that this is run before the onBlur handler\n  const onMouseDown = (e: React.MouseEvent<HTMLButtonElement>) => {\n    // Replace the autocomplete token with the selected autocomplete option (case insensitive)\n    const re = new RegExp(`${_.escapeRegExp(token)}$`, 'i');\n    const newTextBeforeCursor = getTextBeforeCursor().replace(\n      re,\n      e.currentTarget.dataset.autocomplete,\n    );\n    patchQuery({ text: newTextBeforeCursor + text.substring(inputRef.current.selectionEnd) });\n\n    // Move cursor to just after the text we inserted (use _.defer() so this is called after the textarea value is set)\n    const cursorPosition = newTextBeforeCursor.length;\n    _.defer(() => {\n      inputRef.current.setSelectionRange(cursorPosition, cursorPosition);\n      inputRef.current.focus();\n    });\n  };\n\n  const onClear = () => {\n    patchQuery({ text: '' });\n    inputRef.current.focus();\n  };\n\n  // Order autocompletion suggestions so that exact matches (token as a substring) are first, then fuzzy matches after\n  // Exact matches are sorted first by how early the token appears and secondarily by string length (shortest first)\n  // Fuzzy matches are sorted by string length (shortest first)\n  const isMatch = (v: string) => fuzzyCaseInsensitive(token, v);\n  const matchScore = (v: string): number => {\n    const i = v.toLowerCase().indexOf(token);\n    return i === -1 ? Infinity : i;\n  };\n  const filterSuggestions = (options: string[]): string[] =>\n    _.sortBy(options.filter(isMatch), [matchScore, 'length']);\n\n  const allSuggestions =\n    token.length < 2\n      ? {}\n      : _.omitBy(\n          {\n            ['Aggregation Operators']: filterSuggestions(aggregationOperators),\n            ['Functions']: filterSuggestions(prometheusFunctions),\n            ['Metrics']: filterSuggestions(metrics),\n          },\n          _.isEmpty,\n        );\n\n  // Set the default textarea height to the number of lines in the query text\n  const rows = _.clamp((text.match(/\\n/g) || []).length + 1, 2, 10);\n\n  return (\n    <div className=\"query-browser__query pf-c-dropdown\">\n      <textarea\n        aria-label=\"Expression (press Shift+Enter for newlines)\"\n        autoFocus\n        className=\"pf-c-form-control query-browser__query-input\"\n        onBlur={onBlur}\n        onChange={onChange}\n        onKeyDown={onKeyDown}\n        placeholder=\"Expression (press Shift+Enter for newlines)\"\n        ref={inputRef}\n        rows={rows}\n        spellCheck={false}\n        value={text}\n      />\n      <Button\n        className=\"query-browser__clear-icon\"\n        aria-label=\"Clear Query\"\n        onClick={onClear}\n        type=\"button\"\n        variant=\"plain\"\n      >\n        <TimesIcon />\n      </Button>\n      {!_.isEmpty(allSuggestions) && (\n        <ul className=\"pf-c-dropdown__menu query-browser__metrics-dropdown-menu\">\n          {_.map(allSuggestions, (suggestions, title) => (\n            <React.Fragment key={title}>\n              <div className=\"text-muted query-browser__dropdown--subtitle\">{title}</div>\n              {_.map(suggestions, (s) => (\n                <li key={s}>\n                  <button\n                    className=\"pf-c-dropdown__menu-item\"\n                    data-autocomplete={s}\n                    onMouseDown={onMouseDown}\n                    type=\"button\"\n                  >\n                    {s}\n                  </button>\n                </li>\n              ))}\n            </React.Fragment>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nconst queryInputDispatchToProps = (dispatch, props) =>\n  Object.assign(\n    { runQueries: () => dispatch(UIActions.queryBrowserRunQueries()) },\n    queryDispatchToProps(dispatch, props),\n  );\n\nexport const QueryInput = connect(queryInputStateToProps, queryInputDispatchToProps)(QueryInput_);\n\nconst QueryKebab_: React.FC<QueryKebabProps> = ({\n  deleteQuery,\n  isDisabledSeriesEmpty,\n  isEnabled,\n  patchQuery,\n  series,\n  toggleIsEnabled,\n}) => {\n  const toggleAllSeries = () => patchQuery({ disabledSeries: isDisabledSeriesEmpty ? series : [] });\n\n  const doDelete = () => {\n    deleteQuery();\n    focusedQuery = undefined;\n  };\n\n  return (\n    <Kebab\n      options={[\n        { label: `${isEnabled ? 'Disable' : 'Enable'} query`, callback: toggleIsEnabled },\n        {\n          label: `${isDisabledSeriesEmpty ? 'Hide' : 'Show'} all series`,\n          callback: toggleAllSeries,\n        },\n        { label: 'Delete query', callback: doDelete },\n      ]}\n    />\n  );\n};\nconst QueryKebab = connect(\n  ({ UI }: RootState, { index }) => ({\n    isDisabledSeriesEmpty: _.isEmpty(\n      UI.getIn(['queryBrowser', 'queries', index, 'disabledSeries']),\n    ),\n    isEnabled: UI.getIn(['queryBrowser', 'queries', index, 'isEnabled']),\n    series: UI.getIn(['queryBrowser', 'queries', index, 'series']),\n  }),\n  queryDispatchToProps,\n)(QueryKebab_);\n\nconst queryTableStateToProps = ({ UI }: RootState, { index }) => ({\n  isEnabled: UI.getIn(['queryBrowser', 'queries', index, 'isEnabled']),\n  isExpanded: UI.getIn(['queryBrowser', 'queries', index, 'isExpanded']),\n  query: UI.getIn(['queryBrowser', 'queries', index, 'query']),\n  series: UI.getIn(['queryBrowser', 'queries', index, 'series']),\n});\n\nconst defaultPaginationOptions = [10, 20, 50, 100, 200, 500].map((n) => ({\n  title: n.toString(),\n  value: n,\n}));\n\nexport const TablePagination = ({\n  itemCount,\n  page,\n  perPage,\n  setPage,\n  setPerPage,\n  paginationOptions = defaultPaginationOptions,\n}) => {\n  const onPerPageSelect = (e, v) => {\n    // When changing the number of results per page, keep the start row approximately the same\n    const firstRow = (page - 1) * perPage;\n    setPage(Math.floor(firstRow / v) + 1);\n    setPerPage(v);\n  };\n\n  return (\n    <Pagination\n      className=\"query-browser__pagination\"\n      itemCount={itemCount}\n      onPerPageSelect={onPerPageSelect}\n      onSetPage={(e, v) => setPage(v)}\n      page={page}\n      perPage={perPage}\n      perPageOptions={paginationOptions}\n      variant={PaginationVariant.bottom}\n    />\n  );\n};\n\nconst QueryTable_: React.FC<QueryTableProps> = ({\n  index,\n  isEnabled,\n  isExpanded,\n  namespace,\n  query,\n  series,\n}) => {\n  const [data, setData] = React.useState<PrometheusData>();\n  const [error, setError] = React.useState();\n  const [page, setPage] = React.useState(1);\n  const [perPage, setPerPage] = React.useState(50);\n  const [sortBy, setSortBy] = React.useState<ISortBy>();\n\n  const safeFetch = React.useCallback(useSafeFetch(), []);\n\n  const tick = () => {\n    if (query) {\n      safeFetch(getPrometheusURL({ endpoint: PrometheusEndpoint.QUERY, namespace, query }))\n        .then((response) => {\n          setData(_.get(response, 'data'));\n          setError(undefined);\n        })\n        .catch((err) => {\n          if (err.name !== 'AbortError') {\n            setData(undefined);\n            setError(err);\n          }\n        });\n    }\n  };\n\n  usePoll(tick, 15 * 1000, namespace, query);\n\n  React.useEffect(() => {\n    setData(undefined);\n    setError(undefined);\n    setPage(1);\n    setSortBy(undefined);\n  }, [namespace, query]);\n\n  if (!isEnabled || !isExpanded || !query) {\n    return null;\n  }\n\n  if (error) {\n    return (\n      <div className=\"query-browser__table-message\">\n        <Error error={error} title=\"Error loading values\" />\n      </div>\n    );\n  }\n\n  if (!data) {\n    return (\n      <div className=\"query-browser__table-message\">\n        <LoadingInline />\n      </div>\n    );\n  }\n\n  const { result, resultType } = data;\n\n  // Add any data series from `series` (those displayed in the graph) that are not already in `result`. This happens\n  // for filtering PromQL queries that exclude a series currently, but did not exclude that same series at some point\n  // during that graph's range.\n  _.each(series, (labels) => {\n    if (_.every(result, (r) => !_.isEqual(labels, r.metric))) {\n      result.push({ metric: labels });\n    }\n  });\n\n  if (!result || result.length === 0) {\n    return (\n      <div className=\"query-browser__table-message\">\n        <YellowExclamationTriangleIcon /> No datapoints found.\n      </div>\n    );\n  }\n\n  const cellProps = {\n    props: { className: 'query-browser__table-cell' },\n    transforms: [sortable, wrappable],\n  };\n\n  // TableBody's shouldComponentUpdate seems to struggle with SeriesButton, so add a unique key to help TableBody\n  // determine when it should update\n  const buttonCell = (labels) => ({\n    title: <SeriesButton index={index} key={_.uniqueId()} labels={labels} />,\n  });\n\n  let columns, rows;\n  if (resultType === 'scalar') {\n    columns = ['', { title: 'Value', ...cellProps }];\n    rows = [[buttonCell({}), _.get(result, '[1]')]];\n  } else {\n    const allLabelKeys = _.uniq(_.flatMap(result, ({ metric }) => Object.keys(metric))).sort();\n\n    columns = [\n      '',\n      ...allLabelKeys.map((k) => ({ title: k === '__name__' ? 'Name' : k, ...cellProps })),\n      { title: 'Value', ...cellProps },\n    ];\n\n    let rowMapper;\n    if (resultType === 'matrix') {\n      rowMapper = ({ metric, values }) => [\n        '',\n        ..._.map(allLabelKeys, (k) => metric[k]),\n        {\n          title: (\n            <>\n              {_.map(values, ([time, v]) => (\n                <div key={time}>\n                  {v}&nbsp;@{time}\n                </div>\n              ))}\n            </>\n          ),\n        },\n      ];\n    } else {\n      rowMapper = ({ metric, value }) => [\n        buttonCell(metric),\n        ..._.map(allLabelKeys, (k) => metric[k]),\n        _.get(value, '[1]', { title: <span className=\"text-muted\">None</span> }),\n      ];\n    }\n\n    rows = _.map(result, rowMapper);\n    if (sortBy) {\n      // Sort Values column numerically and sort all the other columns alphabetically\n      const valuesColIndex = allLabelKeys.length + 1;\n      const sort =\n        sortBy.index === valuesColIndex\n          ? (cells) => {\n              const v = Number(cells[valuesColIndex]);\n              return Number.isNaN(v) ? 0 : v;\n            }\n          : `${sortBy.index}`;\n      rows = _.orderBy(rows, [sort], [sortBy.direction]);\n    }\n  }\n\n  // Set the result table's break point based on the number of columns\n  let breakPoint: keyof typeof TableGridBreakpoint = 'grid';\n  if (columns.length <= 2) {\n    breakPoint = 'none';\n  } else if (columns.length <= 5) {\n    breakPoint = 'gridMd';\n  } else if (columns.length <= 8) {\n    breakPoint = 'gridLg';\n  } else if (columns.length <= 11) {\n    breakPoint = 'gridXl';\n  } else if (columns.length <= 14) {\n    breakPoint = 'grid2xl';\n  }\n\n  const onSort = (e, i, direction) => setSortBy({ index: i, direction });\n\n  const tableRows = rows.slice((page - 1) * perPage, page * perPage).map((cells) => ({ cells }));\n\n  return (\n    <>\n      <Table\n        aria-label=\"query results table\"\n        cells={columns}\n        gridBreakPoint={TableGridBreakpoint[breakPoint]}\n        onSort={onSort}\n        rows={tableRows}\n        sortBy={sortBy}\n        variant={TableVariant.compact}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n      <TablePagination\n        itemCount={rows.length}\n        page={page}\n        perPage={perPage}\n        setPage={setPage}\n        setPerPage={setPerPage}\n      />\n    </>\n  );\n};\nexport const QueryTable = connect(queryTableStateToProps, queryDispatchToProps)(QueryTable_);\n\nconst NamespaceAlert_: React.FC<{ dismiss: () => undefined; isDismissed: boolean }> = ({\n  dismiss,\n  isDismissed,\n}) =>\n  isDismissed ? null : (\n    <Alert\n      action={<AlertActionCloseButton onClose={dismiss} />}\n      isInline\n      className=\"co-alert\"\n      title=\"Queries entered here are limited to the data available in the currently selected project.\"\n      variant=\"info\"\n    />\n  );\nconst NamespaceAlert: React.ComponentType<{}> = connect(\n  ({ UI }: RootState) => ({ isDismissed: !!UI.getIn(['queryBrowser', 'dismissNamespaceAlert']) }),\n  { dismiss: UIActions.queryBrowserDismissNamespaceAlert },\n)(NamespaceAlert_);\n\nconst Query_: React.FC<QueryProps> = ({\n  id,\n  index,\n  isExpanded,\n  isEnabled,\n  namespace,\n  patchQuery,\n  toggleIsEnabled,\n}) => {\n  const switchKey = `${id}-${isEnabled}`;\n  const switchLabel = `${isEnabled ? 'Disable' : 'Enable'} query`;\n\n  const toggleIsExpanded = () => patchQuery({ isExpanded: !isExpanded });\n\n  return (\n    <div\n      className={classNames('query-browser__table', {\n        'query-browser__table--expanded': isExpanded,\n      })}\n    >\n      <div className=\"query-browser__query-controls\">\n        <ExpandButton isExpanded={isExpanded} onClick={toggleIsExpanded} />\n        <QueryInput index={index} namespace={namespace} />\n        <div title={switchLabel}>\n          <Switch\n            aria-label={switchLabel}\n            id={switchKey}\n            isChecked={isEnabled}\n            key={switchKey}\n            onChange={toggleIsEnabled}\n          />\n        </div>\n        <div className=\"dropdown-kebab-pf\">\n          <QueryKebab index={index} />\n        </div>\n      </div>\n      <QueryTable index={index} namespace={namespace} />\n    </div>\n  );\n};\nconst Query = connect(\n  ({ UI }: RootState, { index }) => ({\n    id: UI.getIn(['queryBrowser', 'queries', index, 'id']),\n    isEnabled: UI.getIn(['queryBrowser', 'queries', index, 'isEnabled']),\n    isExpanded: UI.getIn(['queryBrowser', 'queries', index, 'isExpanded']),\n  }),\n  queryDispatchToProps,\n)(Query_);\n\nconst QueryBrowserWrapper_: React.FC<QueryBrowserWrapperProps> = ({\n  namespace,\n  patchQuery,\n  queriesList,\n}) => {\n  const queries = queriesList.toJS();\n\n  // Initialize queries from URL parameters\n  React.useEffect(() => {\n    const searchParams = getURLSearchParams();\n    for (let i = 0; _.has(searchParams, `query${i}`); ++i) {\n      const query = searchParams[`query${i}`];\n      patchQuery(i, { isEnabled: true, isExpanded: true, query, text: query });\n    }\n  }, [patchQuery]);\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  // Use React.useMemo() to prevent these two arrays being recreated on every render, which would trigger unnecessary\n  // re-renders of QueryBrowser, which can be quite slow\n  const queriesMemoKey = JSON.stringify(_.map(queries, 'query'));\n  const queryStrings = React.useMemo(() => _.map(queries, 'query'), [queriesMemoKey]);\n  const disabledSeriesMemoKey = JSON.stringify(\n    _.reject(_.map(queries, 'disabledSeries'), _.isEmpty),\n  );\n  const disabledSeries = React.useMemo(() => _.map(queries, 'disabledSeries'), [\n    disabledSeriesMemoKey,\n  ]);\n  /* eslint-enable react-hooks/exhaustive-deps */\n\n  // Update the URL parameters when the queries shown in the graph change\n  React.useEffect(() => {\n    const newParams = {};\n    _.each(queryStrings, (q, i) => (newParams[`query${i}`] = q || ''));\n    setAllQueryArguments(newParams);\n  }, [queryStrings]);\n\n  const insertExampleQuery = () => {\n    const focusedIndex = focusedQuery?.index ?? 0;\n    const index = queries[focusedIndex] ? focusedIndex : 0;\n\n    // Pick a suitable example query based on whether we are limiting results to a single namespace\n    const text = namespace\n      ? 'sum(rate(container_cpu_usage_seconds_total{image!=\"\", container!=\"POD\"}[5m])) by (pod)'\n      : 'sum(sort_desc(sum_over_time(ALERTS{alertstate=\"firing\"}[24h]))) by (alertname)';\n\n    patchQuery(index, { isEnabled: true, query: text, text });\n  };\n\n  return queryStrings.join('') === '' ? (\n    <div className=\"query-browser__wrapper graph-empty-state\">\n      <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon size=\"sm\" icon={ChartLineIcon} />\n        <Title size=\"sm\">No Query Entered</Title>\n        <EmptyStateBody>\n          Enter a query in the box below to explore metrics for this cluster.\n        </EmptyStateBody>\n        <Button onClick={insertExampleQuery} variant=\"primary\">\n          Insert Example Query\n        </Button>\n      </EmptyState>\n    </div>\n  ) : (\n    <QueryBrowser\n      defaultTimespan={30 * 60 * 1000}\n      disabledSeries={disabledSeries}\n      namespace={namespace}\n      queries={queryStrings}\n    />\n  );\n};\nconst QueryBrowserWrapper = connect(\n  ({ UI }: RootState) => ({ queriesList: UI.getIn(['queryBrowser', 'queries']) }),\n  { patchQuery: UIActions.queryBrowserPatchQuery },\n)(QueryBrowserWrapper_);\n\nconst AddQueryButton_ = ({ addQuery }) => (\n  <Button\n    className=\"query-browser__inline-control\"\n    onClick={addQuery}\n    type=\"button\"\n    variant=\"secondary\"\n  >\n    Add Query\n  </Button>\n);\nconst AddQueryButton = connect(null, { addQuery: UIActions.queryBrowserAddQuery })(AddQueryButton_);\n\nconst RunQueriesButton_ = ({ runQueries }) => (\n  <Button onClick={runQueries} type=\"submit\" variant=\"primary\">\n    Run Queries\n  </Button>\n);\nconst RunQueriesButton = connect(null, { runQueries: UIActions.queryBrowserRunQueries })(\n  RunQueriesButton_,\n);\n\nconst QueriesList_ = ({ count, namespace }) => (\n  <>\n    {_.range(count).map((i) => (\n      <Query index={i} key={i} namespace={namespace} />\n    ))}\n  </>\n);\nconst QueriesList = connect(({ UI }: RootState) => ({\n  count: UI.getIn(['queryBrowser', 'queries']).size,\n}))(QueriesList_);\n\nconst TechPreview = () => (\n  <span className=\"query-browser__tech-preview\">\n    <TechPreviewBadge />\n  </span>\n);\n\nconst QueryBrowserPage_: React.FC<QueryBrowserPageProps> = ({ deleteAll, namespace }) => {\n  // Clear queries on unmount\n  React.useEffect(() => deleteAll, [deleteAll]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Metrics</title>\n      </Helmet>\n      <div className=\"co-m-nav-title\">\n        <h1 className=\"co-m-pane__heading\">\n          <span>\n            Metrics\n            {namespace ? <TechPreview /> : <HeaderPrometheusLink />}\n          </span>\n          <div className=\"co-actions\">\n            <MetricsActionsMenu />\n          </div>\n        </h1>\n      </div>\n      <div className=\"co-m-pane__body\">\n        {namespace && <NamespaceAlert />}\n        <div className=\"row\">\n          <div className=\"col-xs-12\">\n            <ToggleGraph />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-12\">\n            <QueryBrowserWrapper namespace={namespace} />\n            <div className=\"query-browser__controls\">\n              <div className=\"query-browser__controls--left\">\n                <MetricsDropdown namespace={namespace} />\n              </div>\n              <div className=\"query-browser__controls--right\">\n                <ActionGroup className=\"pf-c-form pf-c-form__group--no-top-margin\">\n                  <AddQueryButton />\n                  <RunQueriesButton />\n                </ActionGroup>\n              </div>\n            </div>\n            <QueriesList namespace={namespace} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\nexport const QueryBrowserPage: React.ComponentType<{ namespace?: string }> = withFallback(\n  connect(null, { deleteAll: UIActions.queryBrowserDeleteAllQueries })(QueryBrowserPage_),\n);\n\ntype MetricsActionsMenuProps = {\n  addQuery: () => never;\n  deleteAll: () => never;\n  isAllExpanded: boolean;\n  setAllExpanded: (isExpanded: boolean) => never;\n};\n\ntype MetricsDropdownItems = {\n  [key: string]: string;\n};\n\ntype MetricsDropdownProps = {\n  insertText: (index: number, newText: string, replaceFrom: number, replaceTo: number) => never;\n  namespace?: string;\n  setMetrics: (metrics: string[]) => never;\n};\n\ntype QueryBrowserPageProps = {\n  deleteAll: () => never;\n  namespace?: string;\n};\n\ntype QueryBrowserWrapperProps = {\n  namespace?: string;\n  patchQuery: (index: number, patch: QueryObj) => any;\n  queriesList: ImmutableList<QueryObj>;\n};\n\ntype QueryInputProps = {\n  index: number;\n  metrics: string[];\n  patchQuery: (patch: QueryObj) => void;\n  runQueries: () => never;\n  text?: string;\n};\n\ntype QueryKebabProps = {\n  deleteQuery: () => never;\n  isDisabledSeriesEmpty: boolean;\n  isEnabled: boolean;\n  patchQuery: (patch: QueryObj) => void;\n  series: PrometheusLabels[];\n  toggleIsEnabled: () => never;\n};\n\ntype QueryProps = {\n  id: string;\n  index: number;\n  isEnabled: boolean;\n  isExpanded: boolean;\n  namespace?: string;\n  patchQuery: (patch: QueryObj) => void;\n  toggleIsEnabled: () => never;\n};\n\ntype QueryTableProps = {\n  index: number;\n  isEnabled: boolean;\n  isExpanded: boolean;\n  namespace?: string;\n  query: string;\n  series: PrometheusLabels[];\n};\n\ntype SeriesButtonProps = {\n  colorIndex: number;\n  isSeriesEmpty?: boolean;\n  isDisabled: boolean;\n  toggleSeries: () => never;\n};\n","import * as classNames from 'classnames';\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartLine,\n  ChartStack,\n  ChartThemeColor,\n  ChartThemeVariant,\n  ChartTooltip,\n  ChartVoronoiContainer,\n  getCustomTheme,\n} from '@patternfly/react-charts';\nimport {\n  Alert,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  TextInput,\n  Title,\n} from '@patternfly/react-core';\nimport { ChartLineIcon } from '@patternfly/react-icons';\nimport { connect } from 'react-redux';\nimport { APIError } from '@console/shared';\nimport { withFallback } from '@console/shared/src/components/error/error-boundary';\n\nimport * as UIActions from '../../actions/ui';\nimport { RootState } from '../../redux';\nimport { PrometheusLabels, PrometheusResponse, PrometheusResult, PrometheusValue } from '../graphs';\nimport { GraphEmpty } from '../graphs/graph-empty';\nimport { getPrometheusURL, PrometheusEndpoint } from '../graphs/helpers';\nimport { queryBrowserTheme } from '../graphs/themes';\nimport {\n  Dropdown,\n  humanizeNumberSI,\n  LoadingInline,\n  usePoll,\n  useRefWidth,\n  useSafeFetch,\n} from '../utils';\nimport {\n  formatPrometheusDuration,\n  parsePrometheusDuration,\n  twentyFourHourTime,\n  twentyFourHourTimeWithSeconds,\n} from '../utils/datetime';\n\n// Prometheus internal labels start with \"__\"\nconst isInternalLabel = (key: string): boolean => _.startsWith(key, '__');\n\n// External labels added by Prometheus (included in Thanos Querier responses)\nconst isExternalLabel = (key: string): boolean => key === 'prometheus';\n\nconst spans = ['5m', '15m', '30m', '1h', '2h', '6h', '12h', '1d', '2d', '1w', '2w'];\nconst dropdownItems = _.zipObject(spans, spans);\nconst chartTheme = getCustomTheme(\n  ChartThemeColor.multi,\n  ChartThemeVariant.light,\n  queryBrowserTheme,\n);\nexport const colors = chartTheme.line.colorScale;\n\n// Use exponential notation for small or very large numbers to avoid labels with too many characters\nconst formatPositiveValue = (v: number): string =>\n  v === 0 || (0.001 <= v && v < 1e23) ? humanizeNumberSI(v).string : v.toExponential(1);\nconst formatValue = (v: number): string => (v < 0 ? '-' : '') + formatPositiveValue(Math.abs(v));\n\nexport const Error: React.FC<ErrorProps> = ({ error, title = 'An error occurred' }) => (\n  <Alert isInline className=\"co-alert\" title={title} variant=\"danger\">\n    {_.get(error, 'json.error', error.message)}\n  </Alert>\n);\n\nconst GraphEmptyState: React.FC<GraphEmptyStateProps> = ({ children, title }) => (\n  <div className=\"query-browser__wrapper graph-empty-state\">\n    <EmptyState variant={EmptyStateVariant.full}>\n      <EmptyStateIcon size=\"sm\" icon={ChartLineIcon} />\n      <Title size=\"sm\">{title}</Title>\n      <EmptyStateBody>{children}</EmptyStateBody>\n    </EmptyState>\n  </div>\n);\n\nconst SpanControls: React.FC<SpanControlsProps> = React.memo(\n  ({ defaultSpanText, onChange, span }) => {\n    const [isValid, setIsValid] = React.useState(true);\n    const [text, setText] = React.useState(formatPrometheusDuration(span));\n\n    React.useEffect(() => {\n      setText(formatPrometheusDuration(span));\n    }, [span]);\n\n    const debouncedOnChange = React.useCallback(_.debounce(onChange, 400), [onChange]);\n\n    const setSpan = (newText: string, isDebounced = false) => {\n      const newSpan = parsePrometheusDuration(newText);\n      const newIsValid = newSpan > 0;\n      setIsValid(newIsValid);\n      setText(newText);\n      if (newIsValid && newSpan !== span) {\n        const fn = isDebounced ? debouncedOnChange : onChange;\n        fn(newSpan);\n      }\n    };\n\n    return (\n      <>\n        <TextInput\n          aria-label=\"graph timespan\"\n          className=\"query-browser__span-text\"\n          isValid={isValid}\n          onChange={(v) => setSpan(v, true)}\n          type=\"text\"\n          value={text}\n        />\n        <Dropdown\n          ariaLabel=\"graph timespan\"\n          buttonClassName=\"dropdown-button--icon-only\"\n          items={dropdownItems}\n          menuClassName=\"query-browser__span-dropdown-menu\"\n          noSelection={true}\n          onChange={(v) => setSpan(v)}\n        />\n        <Button\n          className=\"query-browser__inline-control\"\n          onClick={() => setSpan(defaultSpanText)}\n          type=\"button\"\n          variant=\"tertiary\"\n        >\n          Reset Zoom\n        </Button>\n      </>\n    );\n  },\n);\n\nconst tooltipStateToProps = ({ UI }: RootState, { seriesIndex }) => {\n  let remaining = seriesIndex;\n  let props = {};\n  UI.getIn(['queryBrowser', 'queries'])\n    .filter((q) => q.get('isEnabled') && q.get('query'))\n    .forEach((q) => {\n      const series = q.get('series') || [];\n      if (series.length > remaining) {\n        props = { labels: series[remaining], query: q.get('query') };\n        return false;\n      }\n      remaining -= series.length;\n    });\n  return props;\n};\n\nconst TooltipInner_: React.FC<TooltipInnerProps> = ({\n  datumX,\n  datumY,\n  labels,\n  query,\n  seriesIndex,\n  x,\n  y,\n}) => {\n  if (!query && !labels) {\n    return null;\n  }\n\n  const width = 240;\n\n  // This is actually the max tooltip height\n  const height = 500;\n\n  return (\n    <foreignObject\n      className=\"query-browser__tooltip-svg-wrap\"\n      height={height}\n      width={width}\n      x={x - width / 2}\n      y={y}\n    >\n      <div className=\"query-browser__tooltip-wrap\">\n        <div className=\"query-browser__tooltip-arrow\" />\n        <div className=\"query-browser__tooltip\">\n          <div className=\"query-browser__tooltip-group\">\n            <div\n              className=\"query-browser__series-btn\"\n              style={{ backgroundColor: colors[seriesIndex % colors.length] }}\n            />\n            {datumX && (\n              <div className=\"query-browser__tooltip-time\">\n                {twentyFourHourTimeWithSeconds(datumX)}\n              </div>\n            )}\n          </div>\n          <div className=\"query-browser__tooltip-group\">\n            <div className=\"co-nowrap co-truncate\">{query}</div>\n            <div className=\"query-browser__tooltip-value\">{formatValue(datumY)}</div>\n          </div>\n          {_.map(labels, (v, k) => (\n            <div className=\"co-nowrap co-truncate\" key={k}>\n              <span className=\"query-browser__tooltip-label-key\">\n                {k === '__name__' ? 'name' : k}\n              </span>{' '}\n              {v}\n            </div>\n          ))}\n        </div>\n      </div>\n    </foreignObject>\n  );\n};\nconst TooltipInner = connect(tooltipStateToProps)(TooltipInner_);\n\nconst Tooltip_: React.FC<TooltipProps> = ({ datum, x, y }) =>\n  datum && _.isFinite(datum.y) && _.isFinite(x) && _.isFinite(y) ? (\n    <TooltipInner datumX={datum.x} datumY={datum.y} seriesIndex={datum._stack - 1} x={x} y={y} />\n  ) : null;\nconst Tooltip = withFallback(Tooltip_);\n\n// The `center` prop is required by ChartTooltip, but is actually overridden by our custom tooltip\nconst graphLabelComponent = <ChartTooltip center={{ x: 0, y: 0 }} flyoutComponent={<Tooltip />} />;\n\n// Set activateData to false to work around VictoryVoronoiContainer crash (see\n// https://github.com/FormidableLabs/victory/issues/1314)\nconst graphContainer = (\n  <ChartVoronoiContainer\n    activateData={false}\n    className=\"query-browser__graph-container\"\n    labelComponent={graphLabelComponent}\n    labels={() => ''}\n  />\n);\n\nconst LegendContainer = ({ children }: { children?: React.ReactNode }) => {\n  // The first child should be a <rect> with a `width` prop giving the legend's content width\n  const width = children?.[0]?.[0]?.props?.width ?? '100%';\n  return (\n    <foreignObject height={75} width=\"100%\" y={230}>\n      <div className=\"monitoring-dashboards__legend-wrap\">\n        <svg width={width}>{children}</svg>\n      </div>\n    </foreignObject>\n  );\n};\n\nconst Graph: React.FC<GraphProps> = React.memo(\n  ({ allSeries, disabledSeries, formatLegendLabel, isStack, span, width, xDomain }) => {\n    // Remove any disabled series\n    const data = _.flatMap(allSeries, (series, i) => {\n      return _.map(series, ([metric, values]) => {\n        return _.some(disabledSeries[i], (s) => _.isEqual(s, metric)) ? [{}] : values;\n      });\n    });\n\n    const domain = { x: xDomain || [Date.now() - span, Date.now()], y: undefined };\n\n    let yTickFormat = formatValue;\n\n    if (isStack) {\n      // Specify Y axis range if all values are zero, but otherwise let Chart set it automatically\n      const isAllZero = _.every(allSeries, (series) =>\n        _.every(series, ([, values]) => _.every(values, { y: 0 })),\n      );\n      if (isAllZero) {\n        domain.y = [-1, 1];\n      }\n    } else {\n      // Set a reasonable Y-axis range based on the min and max values in the data\n      const findMin = (series: GraphDataPoint[]) => _.minBy(series, 'y');\n      const findMax = (series: GraphDataPoint[]) => _.maxBy(series, 'y');\n      let minY = _.get(findMin(_.map(data, findMin)), 'y', 0);\n      let maxY = _.get(findMax(_.map(data, findMax)), 'y', 0);\n      if (minY === 0 && maxY === 0) {\n        minY = -1;\n        maxY = 1;\n      } else if (minY > 0 && maxY > 0) {\n        minY = 0;\n      } else if (minY < 0 && maxY < 0) {\n        maxY = 0;\n      }\n\n      domain.y = [minY, maxY];\n\n      if (Math.abs(maxY - minY) < 0.005) {\n        yTickFormat = (v: number) => (v === 0 ? '0' : v.toExponential(1));\n      }\n    }\n\n    const xTickFormat = span < 5 * 60 * 1000 ? twentyFourHourTimeWithSeconds : twentyFourHourTime;\n\n    let xAxisStyle;\n    if (width < 225) {\n      xAxisStyle = {\n        tickLabels: {\n          angle: 45,\n          fontSize: 10,\n          textAnchor: 'start',\n          verticalAnchor: 'middle',\n        },\n      };\n    }\n\n    const legendData = formatLegendLabel\n      ? _.flatMap(allSeries, (series, i) =>\n          _.map(series, (s) => ({ name: formatLegendLabel(s[0], i) })),\n        )\n      : undefined;\n\n    return (\n      <Chart\n        containerComponent={graphContainer}\n        domain={domain}\n        domainPadding={{ y: 1 }}\n        height={200}\n        scale={{ x: 'time', y: 'linear' }}\n        theme={chartTheme}\n        width={width}\n      >\n        <ChartAxis style={xAxisStyle} tickCount={5} tickFormat={xTickFormat} />\n        <ChartAxis crossAxis={false} dependentAxis tickCount={6} tickFormat={yTickFormat} />\n        {isStack ? (\n          <ChartStack>\n            {_.map(data, (values, i) => (\n              <ChartArea key={i} data={values} />\n            ))}\n          </ChartStack>\n        ) : (\n          <ChartGroup>\n            {_.map(data, (values, i) => (\n              <ChartLine key={i} data={values} />\n            ))}\n          </ChartGroup>\n        )}\n        {legendData && (\n          <ChartLegend\n            data={legendData}\n            groupComponent={<LegendContainer />}\n            itemsPerRow={4}\n            orientation=\"vertical\"\n            style={{\n              labels: { fontSize: 11 },\n            }}\n            symbolSpacer={4}\n          />\n        )}\n      </Chart>\n    );\n  },\n);\n\nconst formatSeriesValues = (\n  values: PrometheusValue[],\n  samples: number,\n  span: number,\n): GraphDataPoint[] => {\n  const newValues = _.map(values, (v) => {\n    const y = Number(v[1]);\n    return {\n      x: new Date(v[0] * 1000),\n      y: Number.isNaN(y) ? null : y,\n    };\n  });\n\n  // The data may have missing values, so we fill those gaps with nulls so that the graph correctly\n  // shows the missing values as gaps in the line\n  const start = Number(_.get(newValues, '[0].x'));\n  const end = Number(_.get(_.last(newValues), 'x'));\n  const step = span / samples;\n  _.range(start, end, step).forEach((t, i) => {\n    const x = new Date(t);\n    if (_.get(newValues, [i, 'x']) > x) {\n      newValues.splice(i, 0, { x, y: null });\n    }\n  });\n\n  return newValues;\n};\n\n// Try to limit the graph to this number of data points\nconst maxDataPointsSoft = 6000;\n\n// If we have more than this number of data points, do not render the graph\nconst maxDataPointsHard = 10000;\n\n// Min and max number of data samples per data series\nconst minSamples = 10;\nconst maxSamples = 300;\n\n// Fall back to a line chart for performance if there are too many series\nconst maxStacks = 20;\n\n// We don't want to refresh all the graph data for just a small adjustment in the number of samples,\n// so don't update unless the number of samples would change by at least this proportion\nconst samplesLeeway = 0.2;\n\n// Minimum step (milliseconds between data samples) because tiny steps reduce performance for almost no benefit\nconst minStep = 5 * 1000;\n\n// Don't allow zooming to less than this number of milliseconds\nconst minSpan = 30 * 1000;\n\n// Don't poll more often than this number of milliseconds\nconst minPollInterval = 10 * 1000;\n\nconst ZoomableGraph: React.FC<ZoomableGraphProps> = ({\n  allSeries,\n  disabledSeries,\n  formatLegendLabel,\n  isStack,\n  onZoom,\n  span,\n  width,\n  xDomain,\n}) => {\n  const [isZooming, setIsZooming] = React.useState(false);\n  const [x1, setX1] = React.useState(0);\n  const [x2, setX2] = React.useState(0);\n\n  const onMouseDown = (e: React.MouseEvent) => {\n    setIsZooming(true);\n    const x = e.clientX - e.currentTarget.getBoundingClientRect().left;\n    setX1(x);\n    setX2(x);\n  };\n\n  const onMouseMove = (e: React.MouseEvent) => {\n    setX2(e.clientX - e.currentTarget.getBoundingClientRect().left);\n  };\n\n  const onMouseUp = (e: React.MouseEvent) => {\n    setIsZooming(false);\n\n    const xMin = Math.min(x1, x2);\n    const xMax = Math.max(x1, x2);\n\n    // Don't do anything if a range was not selected (don't zoom if you just click the graph)\n    if (xMax === xMin) {\n      return;\n    }\n\n    const zoomWidth = e.currentTarget.getBoundingClientRect().width;\n    const oldFrom = _.get(xDomain, '[0]', Date.now() - span);\n    let from = oldFrom + (span * xMin) / zoomWidth;\n    let to = oldFrom + (span * xMax) / zoomWidth;\n    let newSpan = to - from;\n\n    if (newSpan < minSpan) {\n      newSpan = minSpan;\n      const middle = (from + to) / 2;\n      from = middle - newSpan / 2;\n      to = middle + newSpan / 2;\n    }\n    onZoom(from, to);\n  };\n\n  const handlers = isZooming ? { onMouseMove, onMouseUp } : { onMouseDown };\n\n  return (\n    <div className=\"query-browser__zoom\" {...handlers}>\n      {isZooming && (\n        <div\n          className=\"query-browser__zoom-overlay\"\n          style={{ left: Math.min(x1, x2), width: Math.abs(x1 - x2) }}\n        />\n      )}\n      <Graph\n        allSeries={allSeries}\n        disabledSeries={disabledSeries}\n        formatLegendLabel={formatLegendLabel}\n        isStack={isStack}\n        span={span}\n        width={width}\n        xDomain={xDomain}\n      />\n    </div>\n  );\n};\n\nconst Loading = () => (\n  <div className=\"query-browser__loading\">\n    <LoadingInline />\n  </div>\n);\n\nconst QueryBrowser_: React.FC<QueryBrowserProps> = ({\n  defaultSamples,\n  defaultTimespan = parsePrometheusDuration('30m'),\n  disabledSeries = [],\n  filterLabels,\n  formatLegendLabel,\n  GraphLink,\n  hideControls,\n  hideGraphs,\n  isStack = false,\n  namespace,\n  patchQuery,\n  pollInterval,\n  queries,\n  timespan,\n}) => {\n  // For the default time span, use the first of the suggested span options that is at least as long\n  // as defaultTimespan\n  const defaultSpanText = spans.find((s) => parsePrometheusDuration(s) >= defaultTimespan);\n\n  // If we have both `timespan` and `defaultTimespan`, `timespan` takes precedence\n  const [span, setSpan] = React.useState(timespan || parsePrometheusDuration(defaultSpanText));\n\n  // Limit the number of samples so that the step size doesn't fall below minStep\n  const maxSamplesForSpan =\n    defaultSamples || _.clamp(Math.round(span / minStep), minSamples, maxSamples);\n\n  const [xDomain, setXDomain] = React.useState<AxisDomain>();\n  const [error, setError] = React.useState<QueryBrowserError>();\n  const [isDatasetTooBig, setIsDatasetTooBig] = React.useState(false);\n  const [graphData, setGraphData] = React.useState(null);\n  const [samples, setSamples] = React.useState(maxSamplesForSpan);\n  const [updating, setUpdating] = React.useState(true);\n\n  const [containerRef, width] = useRefWidth();\n\n  const endTime = _.get(xDomain, '[1]');\n\n  const safeFetch = useSafeFetch();\n\n  const stack = isStack && _.sumBy(graphData, 'length') <= maxStacks;\n\n  // If provided, `timespan` overrides any existing span setting\n  React.useEffect(() => {\n    if (timespan) {\n      setSpan(timespan);\n    }\n  }, [timespan]);\n\n  // Define this once for all queries so that they have exactly the same time range and X values\n  const now = Date.now();\n\n  const safeFetchQuery = (query: string) => {\n    if (_.isEmpty(query)) {\n      return Promise.resolve();\n    }\n    const url = getPrometheusURL({\n      endpoint: PrometheusEndpoint.QUERY_RANGE,\n      endTime: endTime || now,\n      namespace,\n      query,\n      samples,\n      timeout: '5s',\n      timespan: span,\n    });\n    return safeFetch(url);\n  };\n\n  const tick = () =>\n    hideGraphs\n      ? undefined\n      : Promise.all(_.map(queries, safeFetchQuery))\n          .then((responses: PrometheusResponse[]) => {\n            const newResults = _.map(responses, 'data.result');\n            const numDataPoints = _.sumBy(newResults, (r) => _.sumBy(r, 'values.length'));\n\n            if (numDataPoints > maxDataPointsHard && samples === minSamples) {\n              setIsDatasetTooBig(true);\n              return;\n            }\n            setIsDatasetTooBig(false);\n\n            const newSamples = _.clamp(\n              Math.floor((samples * maxDataPointsSoft) / numDataPoints),\n              minSamples,\n              maxSamplesForSpan,\n            );\n\n            // Change `samples` if either\n            //   - It will change by a proportion greater than `samplesLeeway`\n            //   - It will change to the upper or lower limit of its allowed range\n            if (\n              Math.abs(newSamples - samples) / samples > samplesLeeway ||\n              (newSamples !== samples &&\n                (newSamples === maxSamplesForSpan || newSamples === minSamples))\n            ) {\n              setSamples(newSamples);\n            } else {\n              const newGraphData = _.map(newResults, (result: PrometheusResult[]) => {\n                return _.map(result, ({ metric, values }) => {\n                  // If filterLabels is specified, ignore all series that don't match\n                  return filterLabels &&\n                    _.some(\n                      metric,\n                      (v, k) => filterLabels[k] !== v && !isInternalLabel(k) && !isExternalLabel(k),\n                    )\n                    ? []\n                    : [metric, formatSeriesValues(values, samples, span)];\n                });\n              });\n              setGraphData(newGraphData);\n\n              _.each(newResults, (r, i) =>\n                patchQuery(i, {\n                  series: r ? _.map(r, 'metric') : undefined,\n                }),\n              );\n              setUpdating(false);\n            }\n            setError(undefined);\n          })\n          .catch((err) => {\n            if (err.name !== 'AbortError') {\n              setError(err);\n              setUpdating(false);\n            }\n          });\n\n  // Don't poll if an end time was set (because the latest data is not displayed) or if the graph is\n  // hidden. Otherwise use a polling interval relative to the graph's timespan.\n  const tickInterval =\n    pollInterval === undefined ? Math.max(span / 120, minPollInterval) : pollInterval;\n  const delay = endTime || hideGraphs ? null : tickInterval;\n\n  const queriesKey = _.reject(queries, _.isEmpty).join();\n  usePoll(tick, delay, endTime, filterLabels, namespace, queriesKey, samples, span);\n\n  React.useLayoutEffect(() => setUpdating(true), [endTime, namespace, queriesKey, samples, span]);\n\n  const onSpanChange = React.useCallback((newSpan: number) => {\n    setXDomain(undefined);\n    setSpan(newSpan);\n  }, []);\n\n  const isRangeVector = _.get(error, 'json.error', '').match(\n    /invalid expression type \"range vector\"/,\n  );\n\n  if (hideGraphs) {\n    // Still render the graph containers so that `width` continues to be tracked while the graph is\n    // hidden. This ensures we can render at the correct width when the graph is shown again.\n    return (\n      <>\n        {error && !isRangeVector && <Error error={error} />}\n        <div className=\"query-browser__wrapper query-browser__wrapper--hidden\">\n          <div className=\"graph-wrapper graph-wrapper--query-browser\">\n            <div ref={containerRef} style={{ width: '100%' }}></div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  if (isRangeVector) {\n    return (\n      <GraphEmptyState title=\"Ungraphable results\">\n        Query results include range vectors, which cannot be graphed. Try adding a function to\n        transform the data.\n      </GraphEmptyState>\n    );\n  }\n\n  if (isDatasetTooBig) {\n    return (\n      <GraphEmptyState title=\"Ungraphable results\">\n        The resulting dataset is too large to graph.\n      </GraphEmptyState>\n    );\n  }\n\n  const onZoom = (from: number, to: number) => {\n    setXDomain([from, to]);\n    setSpan(to - from);\n  };\n\n  return (\n    <div\n      className={classNames('query-browser__wrapper', {\n        'graph-empty-state': _.isEmpty(graphData),\n      })}\n    >\n      {hideControls ? (\n        <>{updating && <Loading />}</>\n      ) : (\n        <div className=\"query-browser__controls\">\n          <div className=\"query-browser__controls--left\">\n            <SpanControls defaultSpanText={defaultSpanText} onChange={onSpanChange} span={span} />\n            {updating && <Loading />}\n          </div>\n          {GraphLink && (\n            <div className=\"query-browser__controls--right\">\n              <GraphLink />\n            </div>\n          )}\n        </div>\n      )}\n      {error && <Error error={error} />}\n      {_.isEmpty(graphData) && !updating && <GraphEmpty />}\n      {!_.isEmpty(graphData) && (\n        <>\n          {samples < maxSamplesForSpan && !updating && (\n            <Alert\n              isInline\n              className=\"co-alert\"\n              title=\"Displaying with reduced resolution due to large dataset.\"\n              variant=\"info\"\n            />\n          )}\n          <div className=\"graph-wrapper graph-wrapper--query-browser\">\n            <div ref={containerRef} style={{ width: '100%' }}>\n              {width > 0 && (\n                <>\n                  {hideControls ? (\n                    <Graph\n                      allSeries={graphData}\n                      disabledSeries={disabledSeries}\n                      formatLegendLabel={formatLegendLabel}\n                      isStack={stack}\n                      span={span}\n                      width={width}\n                      xDomain={xDomain}\n                    />\n                  ) : (\n                    <ZoomableGraph\n                      allSeries={graphData}\n                      disabledSeries={disabledSeries}\n                      formatLegendLabel={formatLegendLabel}\n                      isStack={stack}\n                      onZoom={onZoom}\n                      span={span}\n                      width={width}\n                      xDomain={xDomain}\n                    />\n                  )}\n                </>\n              )}\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\nexport const QueryBrowser = withFallback(\n  connect(({ UI }: RootState) => ({ hideGraphs: !!UI.getIn(['monitoring', 'hideGraphs']) }), {\n    patchQuery: UIActions.queryBrowserPatchQuery,\n  })(QueryBrowser_),\n);\n\ntype AxisDomain = [number, number];\n\ntype GraphDataPoint = {\n  x: Date;\n  y: number;\n};\n\ntype Series = [PrometheusLabels, GraphDataPoint[][]];\n\nexport type QueryObj = {\n  disabledSeries?: PrometheusLabels[];\n  isEnabled?: boolean;\n  isExpanded?: boolean;\n  query?: string;\n  series?: PrometheusLabels[];\n  text?: string;\n};\n\nexport type FormatLegendLabel = (labels: PrometheusLabels, i: number) => string;\n\nexport type PatchQuery = (index: number, patch: QueryObj) => any;\n\ntype QueryBrowserError = {\n  json?: {\n    error?: string;\n  };\n} & APIError;\n\ntype ErrorProps = {\n  error: QueryBrowserError;\n  title?: string;\n};\n\ntype GraphEmptyStateProps = {\n  children: React.ReactNode;\n  title: string;\n};\n\ntype GraphProps = {\n  allSeries: Series[][];\n  disabledSeries?: PrometheusLabels[][];\n  formatLegendLabel?: FormatLegendLabel;\n  isStack?: boolean;\n  span: number;\n  width: number;\n  xDomain?: AxisDomain;\n};\n\ntype ZoomableGraphProps = GraphProps & { onZoom: (from: number, to: number) => void };\n\nexport type QueryBrowserProps = {\n  defaultSamples?: number;\n  defaultTimespan?: number;\n  disabledSeries?: PrometheusLabels[][];\n  filterLabels?: PrometheusLabels;\n  formatLegendLabel?: FormatLegendLabel;\n  GraphLink?: React.ComponentType<{}>;\n  hideControls?: boolean;\n  hideGraphs: boolean;\n  isStack?: boolean;\n  namespace?: string;\n  patchQuery: PatchQuery;\n  pollInterval?: number;\n  queries: string[];\n  timespan?: number;\n};\n\ntype SpanControlsProps = {\n  defaultSpanText: string;\n  onChange: (span: number) => void;\n  span: number;\n};\n\ntype TooltipDatum = { _stack: number; x: Date; y: number };\n\ntype TooltipInnerProps = {\n  datumX: Date;\n  datumY: number;\n  labels?: PrometheusLabels;\n  query?: string;\n  seriesIndex: number;\n  x: number;\n  y: number;\n};\n\ntype TooltipProps = {\n  datum?: TooltipDatum;\n  x?: number;\n  y?: number;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { connect } from 'react-redux';\nimport { Tooltip, Button } from '@patternfly/react-core';\n\nimport { PencilAltIcon } from '@patternfly/react-icons';\nimport { Link } from 'react-router-dom';\nimport * as fuzzy from 'fuzzysearch';\nimport { Status, getRequester, ALL_NAMESPACES_KEY, KEYBOARD_SHORTCUTS, NAMESPACE_LOCAL_STORAGE_KEY, FLAGS } from '@console/shared';\nimport { ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\n\nimport { NamespaceModel, ProjectModel, SecretModel } from '../models';\nimport { coFetchJSON } from '../co-fetch';\nimport { k8sGet, referenceForModel } from '../module/k8s';\nimport * as k8sActions from '../actions/k8s';\nimport * as UIActions from '../actions/ui';\nimport { DetailsPage, ListPage, Table, TableRow, TableData } from './factory';\nimport { DetailsItem, Dropdown, ExternalLink, Firehose, Kebab, LabelList, LoadingInline, MsgBox, ResourceIcon, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading, Timestamp, formatBytesAsMiB, formatCores, humanizeBinaryBytes, humanizeCpuCores, navFactory, useAccessReview } from './utils';\nimport { createNamespaceModal, createProjectModal, deleteNamespaceModal, configureNamespacePullSecretModal } from './modals';\nimport { RoleBindingsPage } from './RBAC';\nimport { Bar, Area, PROMETHEUS_BASE_PATH, requirePrometheus } from './graphs';\nimport { featureReducerName, flagPending, connectToFlags } from '../reducers/features';\nimport { setFlag } from '../actions/features';\nimport { OpenShiftGettingStarted } from './start-guide';\nimport { Overview } from './overview';\nimport { getNamespaceDashboardConsoleLinks, ProjectDashboard } from './dashboard/project-dashboard/project-dashboard';\nimport { removeQueryArgument } from './utils/router';\nimport { useTranslation, withTranslation } from 'react-i18next';\n\nconst getModel = useProjects => (useProjects ? ProjectModel : NamespaceModel);\nconst getDisplayName = obj => _.get(obj, ['metadata', 'annotations', 'openshift.io/display-name']);\nconst CREATE_NEW_RESOURCE = '#CREATE_RESOURCE_ACTION#';\n\nexport const deleteModal = (kind, ns) => {\n  let { label, weight, accessReview } = Kebab.factory.Delete(kind, ns);\n  let callback = undefined;\n  let tooltip;\n\n  if (ns.metadata.name === 'default') {\n    tooltip = `${kind.label} default cannot be deleted`;\n  } else if (ns.status.phase === 'Terminating') {\n    tooltip = `${kind.label} is already terminating`;\n  } else {\n    callback = () => deleteNamespaceModal({ kind, resource: ns });\n  }\n  if (tooltip) {\n    label = (\n      <div className=\"dropdown__disabled\">\n        <Tooltip content={tooltip}>\n          <span>{label}</span>\n        </Tooltip>\n      </div>\n    );\n  }\n  return { label, weight, callback, accessReview };\n};\n\nconst nsMenuActions = [Kebab.factory.ModifyLabels, Kebab.factory.ModifyAnnotations, Kebab.factory.Edit, deleteModal];\n\nconst fetchNamespaceMetrics = () => {\n  const metrics = [\n    {\n      key: 'memory',\n      query: 'sum by(namespace) (container_memory_working_set_bytes{container=\"\",pod!=\"\"})',\n    },\n    {\n      key: 'cpu',\n      query: 'namespace:container_cpu_usage:sum',\n    },\n  ];\n  const promises = metrics.map(({ key, query }) => {\n    const url = `${PROMETHEUS_BASE_PATH}/api/v1/query?&query=${query}`;\n    return coFetchJSON(url).then(({ data: { result } }) => {\n      return result.reduce((acc, data) => {\n        const value = Number(data.value[1]);\n        return _.set(acc, [key, data.metric.namespace], value);\n      }, {});\n    });\n  });\n  return Promise.all(promises).then(data => _.assign({}, ...data));\n};\n\nconst namespacesColumnClasses = [\n  '', // name\n  '', // status\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm'), // labels\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg pf-u-w-16-on-lg'), // created\n  Kebab.columnClass,\n];\n\nconst NamespacesTableHeader = t => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: namespacesColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_3'),\n      sortField: 'status.phase',\n      transforms: [sortable],\n      props: { className: namespacesColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_15'),\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: namespacesColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_12'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: namespacesColumnClasses[3] },\n    },\n    { title: '', props: { className: namespacesColumnClasses[4] } },\n  ];\n};\nNamespacesTableHeader.displayName = 'NamespacesTableHeader';\n\nconst NamespacesTableRow = ({ obj: ns, index, key, style }) => {\n  return (\n    <TableRow id={ns.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={namespacesColumnClasses[0]}>\n        <ResourceLink kind=\"Namespace\" name={ns.metadata.name} title={ns.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(namespacesColumnClasses[1], 'co-break-word')}>\n        <Status status={ns.status.phase} />\n      </TableData>\n      <TableData className={namespacesColumnClasses[2]}>\n        <LabelList kind=\"Namespace\" labels={ns.metadata.labels} />\n      </TableData>\n      <TableData className={namespacesColumnClasses[3]}>\n        <Timestamp timestamp={ns.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={namespacesColumnClasses[4]}>\n        <ResourceKebab actions={nsMenuActions} kind=\"Namespace\" resource={ns} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const NamespacesList = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Namespaces\" Header={NamespacesTableHeader.bind(null, t)} Row={NamespacesTableRow} virtualize />;\n};\n\nexport const NamespacesPage = props => {\n  const { t } = useTranslation();\n  // const createProps = {\n  //   items: createItems,\n  //   createLink: (type) =>\n  //     // `/k8s/ns/${props.namespace || 'default'}/namespaces/~new/${type !== 'yaml' ? type : ''}`,\n  //     `/k8s/cluster/namespaces/~new/${type !== 'yaml' ? type : ''}`,\n  // };\n  return (\n    <ListPage\n      {...props}\n      title={t('COMMON:MSG_LNB_MENU_3')}\n      ListComponent={NamespacesList}\n      canCreate={true}\n      // createProps={createProps}\n      // createHandler={() => createNamespaceModal({ blocking: true })}\n    />\n  );\n};\n\nexport const projectMenuActions = [Kebab.factory.Edit, deleteModal];\n\nconst projectColumnClasses = [\n  '', // name\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm'), // display name\n  '', // status\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'), // requester\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'), // memory\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'), // cpu\n  classNames('pf-m-hidden', 'pf-m-visible-on-2xl'), // created\n  Kebab.columnClass,\n];\n\nconst projectTableHeader = ({ showMetrics, showActions }) => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: projectColumnClasses[0] },\n    },\n    {\n      title: 'Display Name',\n      sortField: 'metadata.annotations[\"openshift.io/display-name\"]',\n      transforms: [sortable],\n      props: { className: projectColumnClasses[1] },\n    },\n    {\n      title: 'Status',\n      sortField: 'status.phase',\n      transforms: [sortable],\n      props: { className: projectColumnClasses[2] },\n    },\n    {\n      title: 'Requester',\n      sortField: \"metadata.annotations.['openshift.io/requester']\",\n      transforms: [sortable],\n      props: { className: projectColumnClasses[3] },\n    },\n    ...(showMetrics\n      ? [\n          {\n            title: 'Memory',\n            sortFunc: 'namespaceMemory',\n            transforms: [sortable],\n            props: { className: projectColumnClasses[4] },\n          },\n          {\n            title: 'CPU',\n            sortFunc: 'namespaceCPU',\n            transforms: [sortable],\n            props: { className: projectColumnClasses[5] },\n          },\n        ]\n      : []),\n    {\n      title: 'Created',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: projectColumnClasses[6] },\n    },\n    ...(showActions ? [{ title: '', props: { className: projectColumnClasses[7] } }] : []),\n  ];\n};\n\nconst ProjectLink = connect(null, {\n  setActiveNamespace: UIActions.setActiveNamespace,\n  filterList: k8sActions.filterList,\n})(({ project, setActiveNamespace, filterList }) => (\n  <span className=\"co-resource-item co-resource-item--truncate\">\n    <ResourceIcon kind=\"Project\" />\n    <Button\n      isInline\n      title={project.metadata.name}\n      type=\"button\"\n      className=\"co-resource-item__resource-name\"\n      onClick={() => {\n        setActiveNamespace(project.metadata.name);\n        removeQueryArgument('project-name');\n        // clear project-name filter when active namespace is changed\n        filterList(referenceForModel(ProjectModel), 'project-name', '');\n      }}\n      variant=\"link\"\n    >\n      {project.metadata.name}\n    </Button>\n  </span>\n));\nconst projectHeaderWithoutActions = () => projectTableHeader({ showMetrics: false, showActions: false });\n\nconst projectRowStateToProps = ({ UI }) => ({\n  metrics: UI.getIn(['metrics', 'namespace']),\n});\n\nconst ProjectTableRow = connect(projectRowStateToProps)(({ obj: project, index, rowKey, style, customData = {}, metrics }) => {\n  const requester = getRequester(project);\n  const { ProjectLinkComponent, actionsEnabled = true, showMetrics } = customData;\n  const bytes = _.get(metrics, ['memory', project.metadata.name]);\n  const cores = _.get(metrics, ['cpu', project.metadata.name]);\n  return (\n    <TableRow id={project.metadata.uid} index={index} trKey={rowKey} style={style}>\n      <TableData className={projectColumnClasses[0]}>\n        {customData && ProjectLinkComponent ? (\n          <ProjectLinkComponent project={project} />\n        ) : (\n          <span className=\"co-resource-item\">\n            <ResourceLink kind=\"Project\" name={project.metadata.name} title={project.metadata.uid} />\n          </span>\n        )}\n      </TableData>\n      <TableData className={projectColumnClasses[1]}>\n        <span className=\"co-break-word co-line-clamp\">{getDisplayName(project) || <span className=\"text-muted\">No display name</span>}</span>\n      </TableData>\n      <TableData className={projectColumnClasses[2]}>\n        <Status status={project.status.phase} />\n      </TableData>\n      <TableData className={classNames(projectColumnClasses[3], 'co-break-word')}>{requester || <span className=\"text-muted\">No requester</span>}</TableData>\n      {showMetrics && (\n        <>\n          <TableData className={projectColumnClasses[4]}>{bytes ? `${formatBytesAsMiB(bytes)} MiB` : '-'}</TableData>\n          <TableData className={projectColumnClasses[5]}>{cores ? `${formatCores(cores)} cores` : '-'}</TableData>\n        </>\n      )}\n      <TableData className={projectColumnClasses[6]}>\n        <Timestamp timestamp={project.metadata.creationTimestamp} />\n      </TableData>\n      {actionsEnabled && (\n        <TableData className={projectColumnClasses[7]}>\n          <ResourceKebab actions={projectMenuActions} kind=\"Project\" resource={project} />\n        </TableData>\n      )}\n    </TableRow>\n  );\n});\nProjectTableRow.displayName = 'ProjectTableRow';\n\nconst Row = rowArgs => <ProjectTableRow obj={rowArgs.obj} index={rowArgs.index} rowKey={rowArgs.key} style={rowArgs.style} customData={rowArgs.customData} />;\n\nexport const ProjectsTable = props => <Table {...props} aria-label=\"Projects\" Header={projectHeaderWithoutActions} Row={Row} customData={{ ProjectLinkComponent: ProjectLink, actionsEnabled: false }} virtualize />;\n\nconst headerWithMetrics = () => projectTableHeader({ showMetrics: true, showActions: true });\nconst headerNoMetrics = () => projectTableHeader({ showMetrics: false, showActions: true });\nconst ProjectList_ = connectToFlags(\n  FLAGS.CAN_CREATE_PROJECT,\n  FLAGS.CAN_GET_NS,\n)(({ data, flags, setNamespaceMetrics, ...tableProps }) => {\n  const canGetNS = flags[FLAGS.CAN_GET_NS];\n  const showMetrics = PROMETHEUS_BASE_PATH && canGetNS && window.screen.width >= 1200;\n  /* eslint-disable react-hooks/exhaustive-deps */\n  React.useEffect(() => {\n    if (showMetrics) {\n      const updateMetrics = () => fetchNamespaceMetrics().then(setNamespaceMetrics);\n      updateMetrics();\n      const id = setInterval(updateMetrics, 30 * 1000);\n      return () => clearInterval(id);\n    }\n  }, [showMetrics]);\n  /* eslint-enable react-hooks/exhaustive-deps */\n\n  // Don't render the table until we know whether we can get metrics. It's\n  // not possible to change the table headers once the component is mounted.\n  if (flagPending(canGetNS)) {\n    return null;\n  }\n\n  const ProjectEmptyMessage = () => <MsgBox title=\"Welcome to OpenShift\" detail={<OpenShiftGettingStarted canCreateProject={flags[FLAGS.CAN_CREATE_PROJECT]} />} />;\n  const ProjectNotFoundMessage = () => <MsgBox title=\"No Projects Found\" />;\n  return <Table {...tableProps} aria-label=\"Projects\" data={data} Header={showMetrics ? headerWithMetrics : headerNoMetrics} Row={Row} EmptyMsg={data.length > 0 ? ProjectNotFoundMessage : ProjectEmptyMessage} customData={{ showMetrics }} virtualize />;\n});\nexport const ProjectList = connect(null, dispatch => ({\n  setNamespaceMetrics: metrics => dispatch(UIActions.setNamespaceMetrics(metrics)),\n}))(connectToFlags(FLAGS.CAN_CREATE_PROJET, FLAGS.CAN_GET_NS)(ProjectList_));\n\nexport const ProjectsPage = connectToFlags(FLAGS.CAN_CREATE_PROJECT)(({ flags, ...rest }) => (\n  // Skip self-subject access review for projects since they use a special project request API.\n  // `FLAGS.CAN_CREATE_PROJECT` determines if the user can create projects.\n  <ListPage {...rest} ListComponent={ProjectList} canCreate={flags[FLAGS.CAN_CREATE_PROJECT]} createHandler={() => createProjectModal({ blocking: true })} filterLabel=\"by name or display name\" skipAccessReview textFilter=\"project-name\" />\n));\n\n/** @type {React.SFC<{namespace: K8sResourceKind}>} */\nexport const PullSecret = props => {\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [data, setData] = React.useState(undefined);\n  const { t } = useTranslation();\n\n  React.useEffect(() => {\n    k8sGet(SecretModel, null, props.namespace.metadata.name, {\n      queryParams: { fieldSelector: 'type=kubernetes.io/dockerconfigjson' },\n    })\n      .then(pullSecrets => {\n        setIsLoading(false);\n        setData(_.get(pullSecrets, 'items[0]'));\n      })\n      .catch(error => {\n        setIsLoading(false);\n        setData(undefined);\n        // A 404 just means that no pull secrets exist\n        if (error.status !== 404) {\n          throw error;\n        }\n      });\n  }, [props.namespace.metadata.name]);\n\n  if (isLoading) {\n    return <LoadingInline />;\n  }\n  const modal = () => configureNamespacePullSecretModal({ namespace: props.namespace, pullSecret: data });\n\n  return (\n    <Button variant=\"link\" type=\"button\" isInline onClick={modal}>\n      {_.get(data, 'metadata.name') || t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_33')}\n      <PencilAltIcon className=\"co-icon-space-l pf-c-button-icon--plain\" />\n    </Button>\n  );\n};\n\nexport const NamespaceLineCharts = ({ ns }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-6 col-sm-12\">\n        <Area title={t('SINGLE:MSG_NAMESPACES_NAMESPACEDETAILS_TABDETAILS_RESOURCEUSAGE_2')} humanize={humanizeCpuCores} namespace={ns.metadata.name} query={`namespace:container_cpu_usage:sum{namespace='${ns.metadata.name}'}`} />\n      </div>\n      <div className=\"col-md-6 col-sm-12\">\n        <Area title={t('SINGLE:MSG_NAMESPACES_NAMESPACEDETAILS_TABDETAILS_RESOURCEUSAGE_3')} humanize={humanizeBinaryBytes} byteDataType={ByteDataTypes.BinaryBytes} namespace={ns.metadata.name} query={`sum by(namespace) (container_memory_working_set_bytes{namespace=\"${ns.metadata.name}\",container=\"\",pod!=\"\"})`} />\n      </div>\n    </div>\n  );\n};\n\nexport const TopPodsBarChart = ({ ns }) => {\n  const { t } = useTranslation();\n  return <Bar title={t('SINGLE:MSG_NAMESPACES_NAMESPACEDETAILS_TABDETAILS_RESOURCEUSAGE_4')} namespace={ns.metadata.name} query={`sort_desc(topk(10, sum by (pod)(container_memory_working_set_bytes{container=\"\",pod!=\"\",namespace=\"${ns.metadata.name}\"})))`} humanize={humanizeBinaryBytes} metric=\"pod\" />;\n};\n\nconst ResourceUsage = requirePrometheus(({ ns }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text={t('SINGLE:MSG_NAMESPACES_NAMESPACEDETAILS_TABDETAILS_RESOURCEUSAGE_1')} />\n      <NamespaceLineCharts ns={ns} />\n      <TopPodsBarChart ns={ns} />\n    </div>\n  );\n});\n\nexport const NamespaceSummary = ({ ns }) => {\n  const { t } = useTranslation();\n  const displayName = getDisplayName(ns);\n  const requester = getRequester(ns);\n  const canListSecrets = useAccessReview({\n    group: SecretModel.apiGroup,\n    resource: SecretModel.plural,\n    verb: 'patch',\n    namespace: ns.metadata.name,\n  });\n  return (\n    <div className=\"row\">\n      <div className=\"col-sm-6 col-xs-12\">\n        <ResourceSummary resource={ns}>\n          {displayName && <dt>Display Name</dt>}\n          {displayName && <dd>{displayName}</dd>}\n          {requester && <dt>Requester</dt>}\n          {requester && <dd>{requester}</dd>}\n        </ResourceSummary>\n      </div>\n      <div className=\"col-sm-6 col-xs-12\">\n        <dl className=\"co-m-pane__details\">\n          <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_13')} obj={ns} path=\"status.phase\">\n            <Status status={ns.status.phase} />\n          </DetailsItem>\n          {canListSecrets && (\n            <>\n              <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_95')}</dt>\n              <dd>\n                <PullSecret namespace={ns} />\n              </dd>\n            </>\n          )}\n          <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_96')}</dt>\n          <dd>\n            <Link to={`/k8s/ns/${ns.metadata.name}/networkpolicies`}>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_96')}</Link>\n          </dd>\n        </dl>\n      </div>\n    </div>\n  );\n};\n\nconst NamespaceDetails_ = ({ obj: ns, consoleLinks, customData }) => {\n  const { t } = useTranslation();\n  const links = getNamespaceDashboardConsoleLinks(ns, consoleLinks);\n  return (\n    <div>\n      <div className=\"co-m-pane__body\">\n        {!customData?.hideHeading && <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: t('COMMON:MSG_LNB_MENU_3') })} />}\n        <NamespaceSummary ns={ns} />\n      </div>\n      {ns.kind === 'Namespace' && <ResourceUsage ns={ns} />}\n      {!_.isEmpty(links) && (\n        <div className=\"co-m-pane__body\">\n          <SectionHeading text=\"Launcher\" />\n          <ul className=\"list-unstyled\">\n            {_.map(_.sortBy(links, 'spec.text'), link => {\n              return (\n                <li key={link.metadata.uid}>\n                  <ExternalLink href={link.spec.href} text={link.spec.text} />\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst DetailsStateToProps = ({ UI }) => ({\n  consoleLinks: UI.get('consoleLinks'),\n});\n\nexport const NamespaceDetails = connect(DetailsStateToProps)(NamespaceDetails_);\n\nconst RolesPage = ({ obj: { metadata } }) => <RoleBindingsPage createPath={`/k8s/ns/${metadata.name}/rolebindings/~new?rolekind=Role`} namespace={metadata.name} showTitle={false} />;\n\nconst autocompleteFilter = (text, item) => fuzzy(text, item);\n\nconst defaultBookmarks = {};\n\nconst namespaceBarDropdownStateToProps = state => {\n  const activeNamespace = state.UI.get('activeNamespace');\n  const canListNS = state[featureReducerName].get(FLAGS.CAN_LIST_NS);\n  const canCreateProject = state[featureReducerName].get(FLAGS.CAN_CREATE_PROJECT);\n\n  return { activeNamespace, canListNS, canCreateProject };\n};\nconst namespaceBarDropdownDispatchToProps = dispatch => ({\n  setActiveNamespace: ns => dispatch(UIActions.setActiveNamespace(ns)),\n  showStartGuide: show => dispatch(setFlag(FLAGS.SHOW_OPENSHIFT_START_GUIDE, show)),\n});\n\nconst clusterMenu = ['namespaces', 'namespaceclaims'];\n\nclass NamespaceBarDropdowns_ extends React.Component {\n  componentDidUpdate() {\n    const { namespace, showStartGuide } = this.props;\n    if (namespace.loaded) {\n      const noNamespace = _.isEmpty(namespace.data);\n      showStartGuide(noNamespace); // namespace 없으면 noNamespace창 보이도록\n    }\n  }\n\n  render() {\n    const { activeNamespace, onNamespaceChange, setActiveNamespace, canListNS, canCreateProject, useProjects, children, disabled, t } = this.props;\n    // if (flagPending(canListNS)) {\n    //   return null;\n    // }\n\n    const { loaded, data } = this.props.namespace;\n    const model = getModel(useProjects);\n    const allNamespacesTitle = t('COMMON:MSG_NNB__3');\n    const items = {};\n\n    if (canListNS) {\n      items[ALL_NAMESPACES_KEY] = allNamespacesTitle;\n    }\n\n    _.map(data, 'metadata.name')\n      .sort()\n      .forEach(name => (items[name] = name));\n\n    let title = activeNamespace;\n    if (activeNamespace === ALL_NAMESPACES_KEY) {\n      title = allNamespacesTitle;\n    } else if (loaded && !_.has(items, title)) {\n      // If the currently active namespace is not found in the list of all namespaces, put it in anyway\n      // items[title] = title;\n      // active한 namespace 없을 때 가장 첫번째 namespace 골라지도록 변.\n      setActiveNamespace(Object.keys(items)[0]);\n    }\n    const defaultActionItem = canCreateProject\n      ? [\n          {\n            actionTitle: `Create ${model.label}`,\n            actionKey: CREATE_NEW_RESOURCE,\n          },\n        ]\n      : [];\n\n    const onChange = newNamespace => {\n      if (newNamespace === CREATE_NEW_RESOURCE) {\n        createProjectModal({\n          blocking: true,\n          onSubmit: newProject => {\n            setActiveNamespace(newProject.metadata.name);\n            removeQueryArgument('project-name');\n          },\n        });\n      } else {\n        onNamespaceChange && onNamespaceChange(newNamespace);\n        setActiveNamespace(newNamespace);\n        removeQueryArgument('project-name');\n      }\n    };\n\n    return (\n      <div className=\"co-namespace-bar__items\" data-test-id=\"namespace-bar-dropdown\">\n        <Dropdown\n          disabled={disabled}\n          className=\"co-namespace-selector\"\n          menuClassName=\"co-namespace-selector__menu\"\n          buttonClassName=\"pf-m-plain\"\n          // canFavorite\n          items={items}\n          actionItems={defaultActionItem}\n          titlePrefix={t('COMMON:MSG_NNB__2')}\n          title={title}\n          onChange={onChange}\n          selectedKey={activeNamespace || ALL_NAMESPACES_KEY}\n          autocompleteFilter={autocompleteFilter}\n          autocompletePlaceholder={t('COMMON:MSG_NNB__1')}\n          noBookmark={true}\n          defaultBookmarks={defaultBookmarks}\n          storageKey={NAMESPACE_LOCAL_STORAGE_KEY}\n          shortCut={KEYBOARD_SHORTCUTS.focusNamespaceDropdown}\n        />\n        {children}\n      </div>\n    );\n  }\n}\n\nconst NamespaceBarDropdowns = connect(namespaceBarDropdownStateToProps, namespaceBarDropdownDispatchToProps)(withTranslation()(NamespaceBarDropdowns_));\n\nconst NamespaceBar_ = ({ useProjects, children, disabled, onNamespaceChange }) => {\n  return (\n    <div className=\"co-namespace-bar\">\n      <Firehose resources={[{ kind: getModel(useProjects).kind, prop: 'namespace', isList: true }]}>\n        <NamespaceBarDropdowns useProjects={useProjects} disabled={disabled} onNamespaceChange={onNamespaceChange}>\n          {children}\n        </NamespaceBarDropdowns>\n      </Firehose>\n    </div>\n  );\n};\n\nconst namespaceBarStateToProps = ({ k8s }) => {\n  const useProjects = k8s.hasIn(['RESOURCES', 'models', ProjectModel.kind]);\n  return {\n    useProjects,\n  };\n};\n/** @type {React.FC<{children?: ReactNode, disabled?: boolean, onNamespaceChange?: Function}>} */\nexport const NamespaceBar = connect(namespaceBarStateToProps)(NamespaceBar_);\n\nexport const NamespacesDetailsPage = props => <DetailsPage {...props} menuActions={nsMenuActions} pages={[navFactory.details(NamespaceDetails), navFactory.editYaml(), navFactory.roles(RolesPage)]} />;\n\nexport const ProjectsDetailsPage = props => (\n  <DetailsPage\n    {...props}\n    menuActions={projectMenuActions}\n    pages={[\n      {\n        href: '',\n        name: 'Overview',\n        component: ProjectDashboard,\n      },\n      {\n        href: 'details',\n        name: 'Details',\n        component: NamespaceDetails,\n      },\n      navFactory.editYaml(),\n      navFactory.workloads(Overview),\n      navFactory.roles(RolesPage),\n    ]}\n  />\n);\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { YellowExclamationTriangleIcon } from '@console/shared';\nimport { modelFor } from '../../module/k8s';\nimport { confirmModal } from '../modals/confirm-modal';\n\nconst confirmNavUnpinModal = (resource: string, pinnedResources: string[], updatePinsFn) => {\n  const executeFn = () => {\n    const updatedPinnedResources = [...pinnedResources];\n    const index = pinnedResources.indexOf(resource);\n    if (index >= 0) {\n      updatedPinnedResources.splice(index, 1);\n      updatePinsFn(updatedPinnedResources);\n    }\n    return Promise.resolve();\n  };\n\n  const label = modelFor(resource)?.labelPlural;\n  const title = (\n    <>\n      <YellowExclamationTriangleIcon className=\"co-icon-space-r\" /> Remove from navigation?\n    </>\n  );\n  const message = (\n    <span>\n      Are you sure you want to remove <strong>{label}</strong> from navigation?\n    </span>\n  );\n\n  return confirmModal({\n    title,\n    message,\n    btnText: 'Remove',\n    submitDanger: true,\n    executeFn,\n  });\n};\n\nexport default confirmNavUnpinModal;\n","import * as React from 'react';\nimport { Nav, NavProps, NavList, PageSidebar } from '@patternfly/react-core';\nimport PerspectiveNav from './perspective-nav';\nimport NavHeader from './nav-header';\n\ntype NavigationProps = {\n  onNavSelect: NavProps['onSelect'];\n  onPerspectiveSelected: () => void;\n  onClusterSelected: () => void;\n  isNavOpen: boolean;\n};\n\nexport const Navigation: React.FC<NavigationProps> = React.memo(\n  ({ isNavOpen, onNavSelect, onPerspectiveSelected, onClusterSelected }) => (\n    <PageSidebar\n      nav={\n        <Nav aria-label=\"Nav\" onSelect={onNavSelect} theme=\"dark\">\n          <NavHeader onPerspectiveSelected={onPerspectiveSelected} onClusterSelected={onClusterSelected} />\n          <NavList>\n            <PerspectiveNav />\n          </NavList>\n        </Nav>\n      }\n      isNavOpen={isNavOpen}\n      theme=\"dark\"\n    />\n  ),\n);\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { Link, LinkProps } from 'react-router-dom';\nimport * as _ from 'lodash-es';\nimport { NavItem } from '@patternfly/react-core';\nimport { connect } from 'react-redux';\nimport { formatNamespacedRouteForResource } from '@console/shared/src/utils';\nimport { referenceForModel, K8sKind } from '../../module/k8s';\nimport { stripBasePath } from '../utils';\nimport * as plugins from '../../plugins';\nimport { featureReducerName } from '../../reducers/features';\nimport { RootState } from '../../redux';\nimport { getActiveNamespace } from '../../reducers/ui';\n\nexport const matchesPath = (resourcePath, prefix) =>\n  resourcePath === prefix || _.startsWith(resourcePath, `${prefix}/`);\nexport const matchesModel = (resourcePath, model) =>\n  model && matchesPath(resourcePath, referenceForModel(model));\n\nexport const stripNS = (href) => {\n  href = stripBasePath(href);\n  return href\n    .replace(/^\\/?k8s\\//, '')\n    .replace(/^\\/?(cluster|all-namespaces|ns\\/[^/]*)/, '')\n    .replace(/^\\//, '');\n};\n\nexport const ExternalLink = ({ href, name }) => (\n  <NavItem isActive={false}>\n    <a className=\"pf-c-nav__link\" href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n      {name}\n      <span className=\"co-external-link\" />\n    </a>\n  </NavItem>\n);\n\nclass NavLink<P extends NavLinkProps> extends React.PureComponent<P> {\n  static defaultProps = {\n    required: '',\n    disallowed: '',\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n  static isActive(...args): boolean {\n    throw new Error('not implemented');\n  }\n\n  get to(): string {\n    throw new Error('not implemented');\n  }\n\n  static startsWith(resourcePath: string, someStrings: string[]) {\n    return _.some(someStrings, (s) => resourcePath.startsWith(s));\n  }\n\n  render() {\n    const { isActive, id, name, tipText, onClick, testID, children, className } = this.props;\n\n    // onClick is now handled globally by the Nav's onSelect,\n    // however onClick can still be passed if desired in certain cases\n\n    const itemClasses = classNames(className, { 'pf-m-current': isActive });\n    const linkClasses = classNames('pf-c-nav__link', { 'pf-m-current': isActive });\n    return (\n      <NavItem className={itemClasses} isActive={isActive}>\n        <Link\n          className={linkClasses}\n          id={id}\n          data-test-id={testID}\n          to={this.to}\n          onClick={onClick}\n          title={tipText}\n        >\n          {name}\n          {children}\n        </Link>\n      </NavItem>\n    );\n  }\n}\n\nexport class ResourceNSLink extends NavLink<ResourceNSLinkProps> {\n  static isActive(props, resourcePath, activeNamespace) {\n    const href = stripNS(formatNamespacedRouteForResource(props.resource, activeNamespace));\n    return matchesPath(resourcePath, href) || matchesModel(resourcePath, props.model);\n  }\n\n  get to() {\n    const { resource, activeNamespace } = this.props;\n    return formatNamespacedRouteForResource(resource, activeNamespace);\n  }\n}\n\nexport class ResourceClusterLink extends NavLink<ResourceClusterLinkProps> {\n  static isActive(props, resourcePath) {\n    return (\n      resourcePath === props.resource ||\n      _.startsWith(resourcePath, `${props.resource}/`) ||\n      matchesModel(resourcePath, props.model)\n    );\n  }\n\n  get to() {\n    return `/k8s/cluster/${this.props.resource}`;\n  }\n}\n\nexport class HrefLink extends NavLink<HrefLinkProps> {\n  static isActive(props, resourcePath) {\n    const noNSHref = stripNS(props.href);\n    return resourcePath === noNSHref || _.startsWith(resourcePath, `${noNSHref}/`);\n  }\n\n  get to() {\n    return this.props.href;\n  }\n}\n\nexport class NewTabLink<P extends NewTabLinkProps> extends React.PureComponent<P> {\n  render() {\n    const { name, type } = this.props;\n    switch (type) {\n      case 'grafana': {\n        const onClick = () => {\n          let ns = localStorage.getItem('bridge/last-namespace-name') === '#ALL_NS#' ? 'all-namespaces' : localStorage.getItem('bridge/last-namespace-name') ?? 'all-namespaces';\n          window.open(`${document.location.origin}/api/grafana/d/k8s-namespace/?var-namespace=${ns}`);\n        };\n        return (\n          <NavItem isActive={false} onClick={onClick}>\n            <Link to=\"#\" onClick={e => {e.preventDefault();}} className=\"pf-c-nav__link\">{name}</Link>\n          </NavItem>\n        );\n      }\n\n      case 'kibana': {\n        const onClick = () => {\n          window.open(`${document.location.origin}/api/kibana/`);\n        };\n        return (\n          <NavItem isActive={false} onClick={onClick}>\n            <Link to=\"#\" onClick={e => {e.preventDefault();}} className=\"pf-c-nav__link\">{name}</Link>\n          </NavItem>\n        );\n      }\n\n      case 'kiali': {\n        const onClick = () => {\n          window.open(`${document.location.origin}/api/kiali/`);\n        };\n        return (\n          <NavItem isActive={false} onClick={onClick}>\n            <Link to=\"#\" onClick={e => {e.preventDefault();}} className=\"pf-c-nav__link\">{name}</Link>\n          </NavItem>\n        );\n      }\n\n      case 'git': {\n        const onClick = () => {\n          window.open(window.SERVER_FLAGS.gitlabURL);\n        };\n        return (\n          <NavItem isActive={false} onClick={onClick}>\n            <Link to=\"#\" onClick={e => {e.preventDefault();}} className=\"pf-c-nav__link\">{name}</Link>\n          </NavItem>\n        );\n      }\n      default: {\n      }\n    }\n  }\n}\n\nexport type NavLinkProps = {\n  name: string;\n  id?: LinkProps['id'];\n  className?: string;\n  onClick?: LinkProps['onClick'];\n  isActive?: boolean;\n  required?: string | string[];\n  disallowed?: string;\n  startsWith?: string[];\n  activePath?: string;\n  tipText?: string;\n  testID?: string;\n};\n\nexport type ResourceNSLinkProps = NavLinkProps & {\n  resource: string;\n  model?: K8sKind;\n  activeNamespace?: string;\n};\n\nexport type ResourceClusterLinkProps = NavLinkProps & {\n  resource: string;\n  model?: K8sKind;\n};\n\nexport type HrefLinkProps = NavLinkProps & {\n  href: string;\n};\n\nexport type NewTabLinkProps = NavLinkProps & {\n  name: string;\n  type: string;\n};\n\nexport type NavLinkComponent<T extends NavLinkProps = NavLinkProps> = React.ComponentType<T> & {\n  isActive: (props: T, resourcePath: string, activeNamespace: string) => boolean;\n};\n\nexport const createLink = (item: plugins.NavItem, rootNavLink = false): React.ReactElement => {\n  if (plugins.isNavItem(item)) {\n    let Component: NavLinkComponent = null;\n    if (plugins.isHrefNavItem(item)) {\n      Component = HrefLink;\n    }\n    if (plugins.isResourceNSNavItem(item)) {\n      Component = ResourceNSLink;\n    }\n    if (plugins.isResourceClusterNavItem(item)) {\n      Component = ResourceClusterLink;\n    }\n    if (Component) {\n      const key = item.properties.componentProps.name;\n      const props = item.properties.componentProps;\n      if (rootNavLink) {\n        return <RootNavLink {...props} key={key} component={Component} />;\n      }\n      return <Component {...props} key={key} />;\n    }\n  }\n  return undefined;\n};\n\ntype RootNavLinkStateProps = {\n  canRender: boolean;\n  isActive: boolean;\n  activeNamespace: string;\n};\n\ntype RootNavLinkProps<T extends NavLinkProps = NavLinkProps> = NavLinkProps & {\n  component: NavLinkComponent<T>;\n};\n\nconst RootNavLink_: React.FC<RootNavLinkProps & RootNavLinkStateProps> = ({\n  canRender,\n  component: Component,\n  isActive,\n  className,\n  children,\n  ...props\n}) => {\n  if (!canRender) {\n    return null;\n  }\n  return (\n    <Component className={className} {...props} isActive={isActive}>\n      {children}\n    </Component>\n  );\n};\n\nconst rootNavLinkMapStateToProps = (\n  state: RootState,\n  { required, component: Component, ...props }: RootNavLinkProps,\n): RootNavLinkStateProps => ({\n  canRender: required ? _.castArray(required).every((r) => state[featureReducerName].get(r)) : true,\n  activeNamespace: getActiveNamespace(state),\n  isActive: Component.isActive(props, stripNS(state.UI.get('location')), getActiveNamespace(state)),\n});\n\nexport const RootNavLink = connect(rootNavLinkMapStateToProps)(RootNavLink_);\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Dropdown, DropdownItem, DropdownToggle, Title } from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport { Perspective } from '@console/plugin-sdk';\nimport { getPerspectives } from '../../hypercloud/perspectives';\nimport { RootState } from '../../redux';\nimport { featureReducerName, getFlagsObject, FlagsObject } from '../../reducers/features';\nimport { getActivePerspective } from '../../reducers/ui';\nimport * as UIActions from '../../actions/ui';\nimport { history } from '../utils';\nimport ClusterDropdown from '../hypercloud/nav/cluster-dropdown';\nimport { useTranslation } from 'react-i18next';\n\ntype StateProps = {\n  activePerspective: string;\n  setActivePerspective?: (id: string) => void;\n  flags: FlagsObject;\n};\n\nexport type NavHeaderProps = {\n  onPerspectiveSelected: () => void;\n  onClusterSelected: () => void;\n};\n\nconst NavHeader_: React.FC<NavHeaderProps & StateProps> = ({\n  setActivePerspective,\n  onPerspectiveSelected,\n  activePerspective,\n  onClusterSelected,\n  flags,\n}) => {\n  const [isPerspectiveDropdownOpen, setPerspectiveDropdownOpen] = React.useState(false);\n\n  const togglePerspectiveOpen = React.useCallback(() => {\n    setPerspectiveDropdownOpen(!isPerspectiveDropdownOpen);\n  }, [isPerspectiveDropdownOpen]);\n\n  const onPerspectiveSelect = React.useCallback(\n    (event: React.MouseEvent<HTMLLinkElement>, perspective: Perspective): void => {\n      event.preventDefault();\n      if (perspective.properties.id !== activePerspective) {\n        setActivePerspective(perspective.properties.id);\n        history.push(perspective.properties.getLandingPageURL(flags));\n      }\n\n      setPerspectiveDropdownOpen(false);\n      onPerspectiveSelected && onPerspectiveSelected();\n    },\n    [activePerspective, flags, onPerspectiveSelected, setActivePerspective],\n  );\n\n  const renderToggle = React.useCallback(\n    (icon: React.ReactNode, name: string) => (\n      <DropdownToggle\n        isOpen={isPerspectiveDropdownOpen}\n        onToggle={togglePerspectiveOpen}\n        iconComponent={CaretDownIcon}\n        data-test-id=\"perspective-switcher-toggle\"\n      >\n        <Title size=\"md\">\n          <span className=\"oc-nav-header__icon\">{icon}</span>\n          {name}\n        </Title>\n      </DropdownToggle>\n    ),\n    [isPerspectiveDropdownOpen, togglePerspectiveOpen],\n  );\n\n  const getPerspectiveItems = React.useCallback(\n    (perspectives: Perspective[]) => {\n      return perspectives.map((nextPerspective: Perspective) => (\n        <DropdownItem\n          key={nextPerspective.properties.id}\n          onClick={(event: React.MouseEvent<HTMLLinkElement>) =>\n            onPerspectiveSelect(event, nextPerspective)\n          }\n          isHovered={nextPerspective.properties.id === activePerspective}\n          component=\"button\"\n        >\n          <Title size=\"md\">\n            <span className=\"oc-nav-header__icon\">{nextPerspective.properties.icon}</span>\n            {nextPerspective.properties.name}\n          </Title>\n        </DropdownItem>\n      ));\n    },\n    [activePerspective, onPerspectiveSelect],\n  );\n\n  const { t } = useTranslation();\n  const perspectives = getPerspectives.bind(null, t)();\n  const { icon, name } = React.useMemo(\n    () => perspectives.find((p) => p.properties.id === activePerspective).properties,\n    [activePerspective, perspectives],\n  );\n\n  return (\n    <>\n      {window.SERVER_FLAGS.McMode && (\n        <div className=\"oc-nav-header\">\n          <div className=\"hc-dropdown__title\">{t('COMMON:MSG_LNB_MENU_CONSOLE_1')}</div>\n          <Dropdown\n            isOpen={isPerspectiveDropdownOpen}\n            toggle={renderToggle(icon, name)}\n            dropdownItems={getPerspectiveItems(perspectives)}\n            data-test-id=\"perspective-switcher-menu\"\n          />\n          {activePerspective == \"hc\" &&\n            <>\n              <div className=\"hc-dropdown__title\">{t('COMMON:MSG_LNB_MENU_CONSOLE_2')}</div>\n              <ClusterDropdown onClusterSelected={onClusterSelected} />\n            </>\n          }\n        </div>\n      )\n      }\n    </>\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  activePerspective: getActivePerspective(state),\n  flags: getFlagsObject(state),\n});\n\nexport default connect<StateProps, {}, NavHeaderProps, RootState>(\n  mapStateToProps,\n  { setActivePerspective: UIActions.setActivePerspective },\n  null,\n  {\n    areStatesEqual: (next, prev) =>\n      next[featureReducerName] === prev[featureReducerName] &&\n      getActivePerspective(next) === getActivePerspective(prev),\n  },\n)(NavHeader_);\n","import * as React from 'react';\nimport { connect, Dispatch } from 'react-redux';\nimport * as _ from 'lodash-es';\nimport { NavItemSeparator, Button } from '@patternfly/react-core';\nimport { MinusCircleIcon } from '@patternfly/react-icons';\nimport { useExtensions, NavItem, isNavItem, isSeparatorNavItem } from '@console/plugin-sdk';\nimport { RootState } from '../../redux';\nimport { setPinnedResources } from '../../actions/ui';\nimport { getActivePerspective, getPinnedResources } from '../../reducers/ui';\nimport { modelFor, referenceForModel } from '../../module/k8s';\nimport confirmNavUnpinModal from './confirmNavUnpinModal';\nimport { NavSection } from './section';\nimport MulticlusterNav from '../hypercloud/nav/multicluster-nav';\nimport HyperCloudNav from '../hypercloud/nav/hypercloud-nav';\nimport MasterNav from '../hypercloud/nav/master-nav';\n\nimport { createLink, NavLinkComponent, ResourceClusterLink, ResourceNSLink, RootNavLink } from './items';\n\nimport './_perspective-nav.scss';\nimport { getPerspectives } from '../../hypercloud/perspectives';\nimport { useTranslation } from 'react-i18next';\n\ntype StateProps = {\n  perspective: string;\n  pinnedResources: string[];\n};\n\ninterface DispatchProps {\n  onPinnedResourcesChange: (resources: string[]) => void;\n}\n\nconst getLabelForResource = (resource: string): string => {\n  const model = modelFor(resource);\n  return model ? model.labelPlural : '';\n};\n\nconst PerspectiveNav: React.FC<StateProps & DispatchProps> = ({ perspective, pinnedResources, onPinnedResourcesChange }) => {\n  const { t } = useTranslation();\n  const navItemExtensions = useExtensions<NavItem>(isNavItem);\n  const perspectives = React.useMemo(() => getPerspectives.bind(null, t)(), []);\n\n  const matchingNavItems = React.useMemo(() => navItemExtensions.filter(item => item.properties.perspective === perspective), [navItemExtensions, perspective]);\n\n  const unPin = (e: React.MouseEvent<HTMLButtonElement>, resource: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    confirmNavUnpinModal(resource, pinnedResources, onPinnedResourcesChange);\n  };\n\n  // Until mc perspective is contributed through extensions, simply render static `MulticlusterNav`\n  if (window.SERVER_FLAGS.McMode) {\n    if (perspective === 'mc') {\n      return <MulticlusterNav />;\n    } else if (perspective === 'hc') {\n      return <HyperCloudNav />;\n    }\n  } \n\n  return <MasterNav />;\n  \n  const activePerspective = perspectives.find(p => p.properties.id === perspective);\n  if (!pinnedResources && activePerspective.properties.defaultPins) {\n    onPinnedResourcesChange(activePerspective.properties.defaultPins);\n  }\n\n  const getPinnedItems = (rootNavLink: boolean = false): React.ReactElement[] =>\n    pinnedResources\n      .map(resource => {\n        const model = modelFor(resource);\n        if (!model) {\n          return null;\n        }\n        const { labelPlural, apiVersion, apiGroup, namespaced, crd, plural } = model;\n        const duplicates = pinnedResources.filter(res => getLabelForResource(res) === labelPlural).length > 1;\n        const props = {\n          key: `pinned-${resource}`,\n          name: labelPlural,\n          resource: crd ? referenceForModel(model) : plural,\n          tipText: duplicates ? `${labelPlural}: ${apiGroup || 'core'}/${apiVersion}` : null,\n          id: resource,\n        };\n        const Component: NavLinkComponent = namespaced ? ResourceNSLink : ResourceClusterLink;\n        const removeButton = (\n          <Button className=\"oc-nav-pinned-item__unpin-button\" variant=\"link\" aria-label=\"Unpin\" onClick={e => unPin(e, resource)}>\n            <MinusCircleIcon className=\"oc-nav-pinned-item__icon\" />\n          </Button>\n        );\n\n        return rootNavLink ? (\n          <RootNavLink key={resource} className=\"oc-nav-pinned-item\" component={Component} {...props}>\n            {removeButton}\n          </RootNavLink>\n        ) : (\n          <Component key={resource} className=\"oc-nav-pinned-item\" {...props}>\n            {removeButton}\n          </Component>\n        );\n      })\n      .filter(p => p !== null);\n\n  // track sections so that we do not create duplicates\n  const renderedSections: string[] = [];\n\n  return (\n    <>\n      {_.compact(\n        matchingNavItems.map((item, index) => {\n          const { section } = item.properties;\n          if (section) {\n            if (renderedSections.includes(section)) {\n              return;\n            }\n            renderedSections.push(section);\n            return <NavSection title={section} key={section} />;\n          }\n          if (isSeparatorNavItem(item)) {\n            return <NavItemSeparator key={`separator-${index}`} />;\n          }\n          return createLink(item, true);\n        }),\n      )}\n      {pinnedResources?.length ? (\n        <>\n          <NavItemSeparator />\n          {getPinnedItems(true)}\n        </>\n      ) : null}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => {\n  return {\n    perspective: getActivePerspective(state),\n    pinnedResources: getPinnedResources(state),\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({\n  onPinnedResourcesChange: (resources: string[]) => {\n    dispatch(setPinnedResources(resources));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PerspectiveNav);\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as _ from 'lodash-es';\nimport { NavExpandable } from '@patternfly/react-core';\n\nimport {\n  withExtensions,\n  NavItem,\n  Perspective,\n  isNavItem,\n  isPerspective,\n} from '@console/plugin-sdk';\nimport { RootState } from '../../redux';\nimport { featureReducerName, flagPending, FeatureState } from '../../reducers/features';\nimport { stripBasePath } from '../utils';\nimport { stripNS, createLink } from './items';\nimport { getActivePerspective } from '../../reducers/ui';\n\nconst navSectionStateToProps = (\n  state: RootState,\n  { required }: NavSectionProps,\n): NavSectionStateProps => {\n  const flags = state[featureReducerName];\n  const canRender = required ? flags.get(required) : true;\n\n  return {\n    flags,\n    canRender,\n    activeNamespace: state.UI.get('activeNamespace'),\n    location: state.UI.get('location'),\n    perspective: getActivePerspective(state),\n  };\n};\n\nconst mergePluginChild = (\n  Children: React.ReactElement[],\n  pluginChild: React.ReactElement,\n  mergeBefore?: string,\n) => {\n  const index = Children.findIndex((c) => c.props.name === mergeBefore);\n  if (index >= 0) {\n    Children.splice(index, 0, pluginChild);\n  } else {\n    Children.push(pluginChild);\n  }\n};\n\nexport const NavSection = connect(navSectionStateToProps)(\n  withExtensions<NavSectionExtensionProps>({\n    navItemExtensions: isNavItem,\n    perspectiveExtensions: isPerspective,\n  })(\n    class NavSection extends React.Component<Props, NavSectionState> {\n      public state: NavSectionState;\n\n      constructor(props) {\n        super(props);\n        this.state = { isOpen: false, activeChild: null };\n\n        const activeChild = this.getActiveChild();\n        if (activeChild) {\n          this.state.activeChild = activeChild;\n          this.state.isOpen = true;\n        }\n      }\n\n      shouldComponentUpdate(nextProps, nextState) {\n        const { isOpen } = this.state;\n\n        if (isOpen !== nextProps.isOpen) {\n          return true;\n        }\n\n        if (!isOpen && !nextState.isOpen) {\n          return false;\n        }\n\n        return nextProps.location !== this.props.location || nextProps.flags !== this.props.flags;\n      }\n\n      getActiveChild() {\n        const { activeNamespace, location } = this.props;\n        const children = this.getChildren();\n\n        if (!children) {\n          return stripBasePath(location).startsWith(this.props.activePath);\n        }\n\n        const resourcePath = location ? stripNS(location) : '';\n\n        //current bug? - we should be checking if children is a single item or .filter is undefined\n        return (children as any[])\n          .filter((c) => {\n            if (!c) {\n              return false;\n            }\n            if (c.props.startsWith) {\n              const active = c.type.startsWith(resourcePath, c.props.startsWith);\n              if (active || !c.props.activePath) {\n                return active;\n              }\n            }\n            return c.type.isActive && c.type.isActive(c.props, resourcePath, activeNamespace);\n          })\n          .map((c) => `${c.props.id}-${c.props.name}`)[0];\n      }\n\n      componentDidUpdate(prevProps, prevState) {\n        const activeChild = this.getActiveChild();\n\n        if (prevState.activeChild !== activeChild) {\n          const state: Partial<NavSectionState> = { activeChild };\n          if (activeChild && !prevState.activeChild) {\n            state.isOpen = true;\n          }\n          this.setState(state as NavSectionState);\n        }\n      }\n\n      toggle = (e, expandState) => {\n        this.setState({ isOpen: expandState });\n      };\n\n      getNavItemExtensions = (perspective: string, section: string) => {\n        const { navItemExtensions /*, perspectiveExtensions*/ } = this.props;\n\n        // const defaultPerspective = _.find(perspectiveExtensions, (p) => p.properties.default);\n        // const isDefaultPerspective =\n        //   defaultPerspective && perspective === defaultPerspective.properties.id;\n\n        return navItemExtensions.filter(\n          (item) =>\n            // check if the item is contributed to the current perspective,\n            // or if no perspective specified, are we in the default perspective\n            // (item.properties.perspective === perspective ||\n            //   (!item.properties.perspective && isDefaultPerspective)) &&\n            item.properties.section === section,\n        );\n      };\n\n      mapChild = (c: React.ReactElement) => {\n        if (!c) {\n          return null;\n        }\n\n        const { activeChild } = this.state;\n        const { flags, activeNamespace } = this.props;\n        const { name, required, disallowed, id } = c.props;\n\n        const requiredArray = required ? _.castArray(required) : [];\n        const requirementMissing = _.some(\n          requiredArray,\n          (flag) => flag && (flagPending(flags.get(flag)) || !flags.get(flag)),\n        );\n        if (requirementMissing) {\n          return null;\n        }\n        if (disallowed && (flagPending(flags.get(disallowed)) || flags.get(disallowed))) {\n          return null;\n        }\n\n        return React.cloneElement(c, {\n          key: name,\n          isActive: `${id}-${name}` === activeChild,\n          activeNamespace,\n          flags,\n        });\n      };\n\n      getChildren() {\n        const { title, children, perspective } = this.props;\n        const Children = React.Children.map(children, this.mapChild) || [];\n\n        this.getNavItemExtensions(perspective, title).forEach((item) => {\n          const pluginChild = this.mapChild(createLink(item));\n          if (pluginChild) {\n            mergePluginChild(Children, pluginChild, item.properties.mergeBefore);\n          }\n        });\n\n        return Children;\n      }\n\n      render() {\n        if (!this.props.canRender) {\n          return null;\n        }\n\n        const { title } = this.props;\n        const { isOpen, activeChild } = this.state;\n        const isActive = !!activeChild;\n        const children = this.getChildren();\n\n        return children.length > 0 ? (\n          <NavExpandable\n            title={title}\n            isActive={isActive}\n            isExpanded={isOpen}\n            onExpand={this.toggle}\n          >\n            {children}\n          </NavExpandable>\n        ) : null;\n      }\n    },\n  ),\n);\n\nexport type NavSectionTitle =\n  | 'Administration'\n  | 'Builds'\n  | 'Compute'\n  | 'Home'\n  | 'Monitoring'\n  | 'Networking'\n  | 'Operators'\n  | 'Service Catalog'\n  | 'Storage'\n  | 'Workloads';\n\ntype NavSectionStateProps = {\n  flags?: FeatureState;\n  canRender?: boolean;\n  activeNamespace?: string;\n  activePath?: string;\n  location?: string;\n  perspective: string;\n};\n\ntype NavSectionExtensionProps = {\n  navItemExtensions: NavItem[];\n  perspectiveExtensions: Perspective[];\n};\n\ntype NavSectionProps = {\n  title: NavSectionTitle | string;\n  required?: string;\n};\n\ntype Props = NavSectionProps & NavSectionStateProps & NavSectionExtensionProps;\n\ntype NavSectionState = {\n  isOpen: boolean;\n  activeChild: React.ReactNode;\n};\n","import * as _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { NotificationDrawer, NotificationEntry, NotificationCategory, NotificationTypes } from '@console/patternfly';\nimport * as UIActions from '@console/internal/actions/ui';\nimport store, { RootState } from '@console/internal/redux';\nimport { Alert, alertURL } from '@console/internal/components/monitoring';\nimport { NotificationAlerts } from '@console/internal/reducers/ui';\nimport { RedExclamationCircleIcon } from '@console/shared';\nimport { getAlertDescription, getAlertMessage, getAlertName, getAlertSeverity, getAlertTime, getAlerts } from '@console/shared/src/components/dashboard/status-card/alert-utils';\nimport { EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateSecondaryActions, EmptyStateVariant, Title } from '@patternfly/react-core';\n\nimport { coFetchJSON } from '../co-fetch';\nimport { ClusterUpdate, ClusterVersionKind, referenceForModel } from '../module/k8s';\nimport { ClusterVersionModel } from '../models';\nimport { getSortedUpdates } from './modals/cluster-update-modal';\nimport { usePrevious } from '@console/metal3-plugin/src/hooks';\nimport { useK8sWatchResource, WatchK8sResource } from './utils/k8s-watch-hook';\nimport { useTranslation } from 'react-i18next';\n\nconst criticalCompare = (a: Alert): boolean => getAlertSeverity(a) === 'critical';\nconst otherAlertCompare = (a: Alert): boolean => getAlertSeverity(a) !== 'critical';\n\nconst AlertErrorState: React.FC<AlertErrorProps> = ({ errorText }) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.full}>\n      <EmptyStateIcon className=\"co-status-card__alerts-icon\" icon={RedExclamationCircleIcon} />\n      <Title headingLevel=\"h5\" size=\"lg\">\n        {t('SINGLE:MSG_OVERVIEW_MAIN_CARDSTATUS_ALERT_1')}\n      </Title>\n      {errorText && <EmptyStateBody>{errorText}</EmptyStateBody>}\n    </EmptyState>\n  );\n};\n\nconst AlertEmptyState: React.FC<AlertEmptyProps> = ({ drawerToggle }) => (\n  <EmptyState variant={EmptyStateVariant.full} className=\"co-status-card__alerts-msg\">\n    <Title headingLevel=\"h5\" size=\"lg\">\n      No critical alerts\n    </Title>\n    <EmptyStateBody>There are currently no critical alerts firing. There may be firing alerts of other severities or silenced critical alerts however.</EmptyStateBody>\n    <EmptyStateSecondaryActions>\n      <Link to=\"/monitoring/alerts\" onClick={drawerToggle}>\n        View all alerts\n      </Link>\n    </EmptyStateSecondaryActions>\n  </EmptyState>\n);\n\nexport const alertActions = new Map().set('AlertmanagerReceiversNotConfigured', {\n  text: 'Configure',\n  path: '/monitoring/alertmanagerconfig',\n});\n\nconst getAlertNotificationEntries = (isLoaded: boolean, alertData: Alert[], toggleNotificationDrawer: () => void, isCritical: boolean): React.ReactNode[] =>\n  isLoaded && !_.isEmpty(alertData)\n    ? alertData\n        .filter(a => (isCritical ? criticalCompare(a) : otherAlertCompare(a)))\n        .map((alert, i) => {\n          const action = alertActions.get(alert.rule.name);\n          return <NotificationEntry key={`${i}_${alert.activeAt}`} description={getAlertDescription(alert) || getAlertMessage(alert)} timestamp={getAlertTime(alert)} type={NotificationTypes[getAlertSeverity(alert)]} title={getAlertName(alert)} toggleNotificationDrawer={toggleNotificationDrawer} targetPath={alertURL(alert, alert.rule.id)} actionText={action?.text} actionPath={action?.path} />;\n        })\n    : [];\n\nconst getUpdateNotificationEntries = (isLoaded: boolean, updateData: ClusterUpdate[], toggleNotificationDrawer: () => void): React.ReactNode[] => (isLoaded && !_.isEmpty(updateData) ? [<NotificationEntry actionPath=\"/settings/cluster\" actionText=\"Update cluster\" key=\"cluster-udpate\" description={updateData[0].version || 'Unknown'} type={NotificationTypes.update} title=\"Cluster update available\" toggleNotificationDrawer={toggleNotificationDrawer} targetPath=\"/settings/cluster\" />] : []);\n\nconst pollerTimeouts = {};\nconst pollers = {};\nconst cvResource: WatchK8sResource = {\n  kind: referenceForModel(ClusterVersionModel),\n  namespaced: false,\n  name: 'version',\n  isList: false,\n  optional: true,\n};\n\nexport const refreshNotificationPollers = () => {\n  _.each(pollerTimeouts, clearTimeout);\n  _.invoke(pollers, 'silences');\n  _.invoke(pollers, 'notificationAlerts');\n};\n\nexport const ConnectedNotificationDrawer_: React.FC<ConnectedNotificationDrawerProps> = ({ isDesktop, toggleNotificationDrawer, toggleNotificationsRead, isDrawerExpanded, onDrawerChange, notificationsRead, alerts, children }) => {\n  React.useEffect(() => {\n    const poll: NotificationPoll = (url, key: 'notificationAlerts' | 'silences', dataHandler) => {\n      store.dispatch(UIActions.monitoringLoading(key));\n      const notificationPoller = (): void => {\n        coFetchJSON(url)\n          .then(response => dataHandler(response))\n          .then(data => store.dispatch(UIActions.monitoringLoaded(key, data)))\n          .catch(e => store.dispatch(UIActions.monitoringErrored(key, e)))\n          .then(() => (pollerTimeouts[key] = setTimeout(notificationPoller, 15 * 1000)));\n      };\n      pollers[key] = notificationPoller;\n      notificationPoller();\n    };\n    const { alertManagerBaseURL, prometheusBaseURL } = window.SERVER_FLAGS;\n\n    if (prometheusBaseURL) {\n      poll(`${prometheusBaseURL}/api/v1/rules`, 'notificationAlerts', getAlerts);\n    } else {\n      store.dispatch(UIActions.monitoringErrored('notificationAlerts', new Error('prometheusBaseURL not set')));\n    }\n\n    if (alertManagerBaseURL) {\n      poll(`${alertManagerBaseURL}/api/v1/silences`, 'silences', ({ data }) => {\n        // Set a name field on the Silence to make things easier\n        _.each(data, s => {\n          s.name = _.get(_.find(s.matchers, { name: 'alertname' }), 'value');\n          if (!s.name) {\n            // No alertname, so fall back to displaying the other matchers\n            s.name = s.matchers.map(m => `${m.name}${m.isRegex ? '=~' : '='}${m.value}`).join(', ');\n          }\n        });\n        return data;\n      });\n    } else {\n      store.dispatch(UIActions.monitoringErrored('silences', new Error('alertManagerBaseURL not set')));\n    }\n\n    return () => _.each(pollerTimeouts, clearTimeout);\n  }, []);\n  const [clusterVersionData, clusterVersionLoaded] = useK8sWatchResource<ClusterVersionKind>(cvResource);\n  const updateData: ClusterUpdate[] = getSortedUpdates(clusterVersionData);\n  const { data, loaded, loadError } = alerts || {};\n\n  const updateList: React.ReactNode[] = getUpdateNotificationEntries(clusterVersionLoaded, updateData, toggleNotificationDrawer);\n  const criticalAlertList: React.ReactNode[] = getAlertNotificationEntries(true, data, toggleNotificationDrawer, true);\n  const otherAlertList: React.ReactNode[] = getAlertNotificationEntries(loaded, data, toggleNotificationDrawer, false);\n  const [isAlertExpanded, toggleAlertExpanded] = React.useState<boolean>(!_.isEmpty(criticalAlertList));\n  const [isNonCriticalAlertExpanded, toggleNonCriticalAlertExpanded] = React.useState<boolean>(true);\n  const [isClusterUpdateExpanded, toggleClusterUpdateExpanded] = React.useState<boolean>(true);\n  const prevDrawerToggleState = usePrevious(isDrawerExpanded);\n\n  const hasCriticalAlerts = criticalAlertList.length > 0;\n  const hasNonCriticalAlerts = otherAlertList.length > 0;\n  React.useEffect(() => {\n    if (hasCriticalAlerts && !prevDrawerToggleState && isDrawerExpanded) {\n      toggleAlertExpanded(true);\n    }\n    if (hasNonCriticalAlerts && !prevDrawerToggleState && isDrawerExpanded) {\n      toggleNonCriticalAlertExpanded(true);\n    }\n  }, [hasCriticalAlerts, hasNonCriticalAlerts, isAlertExpanded, isDrawerExpanded, prevDrawerToggleState]);\n  React.useEffect(() => {\n    onDrawerChange();\n  }, [isDrawerExpanded, onDrawerChange]);\n\n  const emptyState = !_.isEmpty(loadError) ? <AlertErrorState errorText={loadError.message} /> : <AlertEmptyState drawerToggle={toggleNotificationDrawer} />;\n\n  const criticalAlerts = _.isEmpty(criticalAlertList) ? emptyState : criticalAlertList;\n  const criticalAlertCategory: React.ReactElement = (\n    <NotificationCategory key=\"critical-alerts\" isExpanded={isAlertExpanded} label=\"Critical Alerts\" count={criticalAlertList.length} onExpandContents={toggleAlertExpanded}>\n      {criticalAlerts}\n    </NotificationCategory>\n  );\n  const nonCriticalAlertCategory: React.ReactElement = !_.isEmpty(otherAlertList) ? (\n    <NotificationCategory key=\"other-alerts\" isExpanded={isNonCriticalAlertExpanded} label=\"Other Alerts\" count={otherAlertList.length} onExpandContents={toggleNonCriticalAlertExpanded}>\n      {otherAlertList}\n    </NotificationCategory>\n  ) : null;\n\n  const messageCategory: React.ReactElement = !_.isEmpty(updateList) ? (\n    <NotificationCategory key=\"messages\" isExpanded={isClusterUpdateExpanded} label=\"Messages\" count={updateList.length} onExpandContents={toggleClusterUpdateExpanded}>\n      {updateList}\n    </NotificationCategory>\n  ) : null;\n\n  if (_.isEmpty(data) && _.isEmpty(updateList) && !notificationsRead) {\n    toggleNotificationsRead();\n  } else if ((!_.isEmpty(data) || !_.isEmpty(updateList)) && notificationsRead) {\n    toggleNotificationsRead();\n  }\n\n  return (\n    <NotificationDrawer className=\"co-notification-drawer\" isInline={isDesktop} isExpanded={isDrawerExpanded} notificationEntries={[criticalAlertCategory, nonCriticalAlertCategory, messageCategory]}>\n      {children}\n    </NotificationDrawer>\n  );\n};\n\ntype NotificationPoll = (url: string, key: 'notificationAlerts' | 'silences', dataHandler: (data) => any) => void;\n\nexport type WithNotificationsProps = {\n  isDrawerExpanded: boolean;\n  notificationsRead: boolean;\n  alerts?: {\n    data: Alert[];\n    loaded: boolean;\n    loadError?: {\n      message?: string;\n    };\n  };\n  silences?: any;\n};\n\nexport type ConnectedNotificationDrawerProps = {\n  isDesktop: boolean;\n  toggleNotificationsRead: () => any;\n  toggleNotificationDrawer: () => any;\n  isDrawerExpanded: boolean;\n  notificationsRead: boolean;\n  onDrawerChange: () => void;\n  alerts: NotificationAlerts;\n};\n\nconst notificationStateToProps = ({ UI }: RootState): WithNotificationsProps => ({\n  isDrawerExpanded: !!UI.getIn(['notifications', 'isExpanded']),\n  notificationsRead: !!UI.getIn(['notifications', 'isRead']),\n  alerts: UI.getIn(['monitoring', 'notificationAlerts']),\n  silences: UI.getIn(['monitoring', 'silences']),\n});\n\ntype AlertErrorProps = {\n  errorText: string;\n};\n\ntype AlertEmptyProps = {\n  drawerToggle: (event: React.MouseEvent<HTMLElement>) => void;\n};\n\nconst connectToNotifications = connect((state: RootState) => notificationStateToProps(state), {\n  toggleNotificationDrawer: UIActions.notificationDrawerToggleExpanded,\n  toggleNotificationsRead: UIActions.notificationDrawerToggleRead,\n});\nexport const ConnectedNotificationDrawer = connectToNotifications(ConnectedNotificationDrawer_);\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { SyncAltIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\nimport { Status, StatusIconAndText, BuildConfigOverviewItem } from '@console/shared';\nimport { BuildNumberLink, BuildLogLink } from '../build';\nimport { errorModal } from '../modals/error-modal';\nimport { fromNow } from '../utils/datetime';\nimport { K8sResourceKind } from '../../module/k8s';\nimport { BuildConfigModel } from '../../models';\nimport { BuildPhase, startBuild } from '../../module/k8s/builds';\nimport { ResourceLink, SidebarSectionHeading, useAccessReview } from '../utils';\n\nconst conjugateBuildPhase = (phase: BuildPhase): string => {\n  switch (phase) {\n    case BuildPhase.Cancelled:\n      return 'was cancelled';\n    case BuildPhase.Error:\n      return 'encountered an error';\n    case BuildPhase.Failed:\n      return 'failed';\n    default:\n      return `is ${_.toLower(phase)}`;\n  }\n};\n\nconst BuildStatus = ({ build }) => {\n  const {\n    status: { logSnippet, message, phase },\n  } = build;\n  const unsuccessful = [BuildPhase.Error, BuildPhase.Failed].includes(phase);\n  return unsuccessful ? (\n    <div className=\"build-overview__item-reason\">\n      <p className=\"build-overview__status-message\">{message}</p>\n      {logSnippet && <pre className=\"build-overview__log-snippet\">{logSnippet}</pre>}\n    </div>\n  ) : null;\n};\n\nconst BuildOverviewItem: React.SFC<BuildOverviewListItemProps> = ({ build }) => {\n  const {\n    metadata: { creationTimestamp },\n    status: { completionTimestamp, startTimestamp, phase },\n  } = build;\n  const lastUpdated = completionTimestamp || startTimestamp || creationTimestamp;\n\n  const statusTitle = (\n    <>\n      Build &nbsp;\n      <BuildNumberLink build={build} />\n      &nbsp;\n      {conjugateBuildPhase(phase)}\n      {lastUpdated && <span className=\"text-muted\">&nbsp;({fromNow(lastUpdated)})</span>}\n    </>\n  );\n\n  return (\n    <li className=\"list-group-item build-overview__item\">\n      <div className=\"build-overview__item-title\">\n        <div className=\"build-overview__status co-icon-and-text\">\n          <div className=\"co-icon-and-text__icon co-icon-flex-child\">\n            {phase === 'Running' ? (\n              <StatusIconAndText icon={<SyncAltIcon />} title={phase} spin iconOnly />\n            ) : (\n              <Status status={phase} iconOnly />\n            )}\n          </div>\n          {statusTitle}\n        </div>\n        <div>\n          <BuildLogLink build={build} />\n        </div>\n      </div>\n      <BuildStatus build={build} />\n    </li>\n  );\n};\n\nconst BuildOverviewList: React.SFC<BuildOverviewListProps> = ({ buildConfig }) => {\n  const {\n    metadata: { name, namespace },\n    builds,\n  } = buildConfig;\n\n  const canStartBuild = useAccessReview({\n    group: BuildConfigModel.apiGroup,\n    resource: BuildConfigModel.plural,\n    subresource: 'instantiate',\n    name,\n    namespace,\n    verb: 'create',\n  });\n\n  const onClick = () => {\n    startBuild(buildConfig).catch((err) => {\n      const error = err.message;\n      errorModal({ error });\n    });\n  };\n\n  return (\n    <ul className=\"list-group\">\n      <li className=\"list-group-item build-overview__item\">\n        <div className=\"build-overview__item-title\">\n          <div>\n            <ResourceLink inline kind=\"BuildConfig\" name={name} namespace={namespace} />\n          </div>\n          {canStartBuild && (\n            <div>\n              <Button variant=\"secondary\" onClick={onClick}>\n                Start Build\n              </Button>\n            </div>\n          )}\n        </div>\n      </li>\n      {_.isEmpty(builds) ? (\n        <li className=\"list-group-item\">\n          <span className=\"text-muted\">No Builds found for this Build Config.</span>\n        </li>\n      ) : (\n        _.map(builds, (build) => <BuildOverviewItem key={build.metadata.uid} build={build} />)\n      )}\n    </ul>\n  );\n};\n\nexport const BuildOverview: React.SFC<BuildConfigsOverviewProps> = ({ buildConfigs }) => (\n  <div className=\"build-overview\">\n    <SidebarSectionHeading text=\"Builds\" />\n    {_.isEmpty(buildConfigs) ? (\n      <span className=\"text-muted\">No Build Configs found for this resource.</span>\n    ) : (\n      _.map(buildConfigs, (buildConfig) => (\n        <BuildOverviewList key={buildConfig.metadata.uid} buildConfig={buildConfig} />\n      ))\n    )}\n  </div>\n);\n\ntype BuildOverviewListItemProps = {\n  build: K8sResourceKind;\n};\n\ntype BuildOverviewListProps = {\n  buildConfig: BuildConfigOverviewItem;\n};\n\ntype BuildConfigsOverviewProps = {\n  buildConfigs: BuildConfigOverviewItem[];\n};\n","// Keys for special 'group by' options\n// Should not be valid label keys to avoid conflicts. https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set\nexport enum OverviewSpecialGroup {\n  GROUP_BY_APPLICATION = '#GROUP_BY_APPLICATION#',\n  GROUP_BY_RESOURCE = '#GROUP_BY_RESOURCE#',\n}\n","import * as _ from 'lodash-es';\nimport * as classnames from 'classnames';\nimport * as fuzzy from 'fuzzysearch';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\nimport { Link } from 'react-router-dom';\nimport {\n  DEFAULT_GROUP_NAME,\n  METRICS_POLL_INTERVAL,\n  OverviewItem,\n  getResourceList,\n  createDaemonSetItems,\n  createDeploymentConfigItems,\n  createDeploymentItems,\n  createPodItems,\n  createStatefulSetItems,\n  formatNamespacedRouteForResource,\n} from '@console/shared';\nimport { OverviewCRD } from '@console/plugin-sdk';\nimport { ClusterServiceVersionKind } from '@console/operator-lifecycle-manager';\nimport { coFetchJSON } from '../../co-fetch';\nimport { PROMETHEUS_TENANCY_BASE_PATH } from '../graphs';\nimport { TextFilter } from '../factory';\nimport * as UIActions from '../../actions/ui';\nimport { DeploymentKind, K8sResourceKind, PodKind, RouteKind } from '../../module/k8s';\nimport { CloseButton, Dropdown, Firehose, StatusBox, FirehoseResult, MsgBox } from '../utils';\nimport { ProjectOverview } from './project-overview';\nimport { ResourceOverviewPage } from './resource-overview-page';\nimport { OverviewSpecialGroup } from './constants';\nimport * as plugins from '../../plugins';\n\nconst asOverviewGroups = (keyedItems: { [name: string]: OverviewItem[] }): OverviewGroup[] => {\n  const compareGroups = (a: OverviewGroup, b: OverviewGroup) => {\n    if (a.name === DEFAULT_GROUP_NAME) {\n      return 1;\n    }\n    if (b.name === DEFAULT_GROUP_NAME) {\n      return -1;\n    }\n    return a.name.localeCompare(b.name);\n  };\n\n  return _.map(\n    keyedItems,\n    (group: OverviewItem[], name: string): OverviewGroup => {\n      return {\n        name,\n        items: group,\n      };\n    },\n  ).sort(compareGroups);\n};\n\nconst getApplication = (item: OverviewItem): string => {\n  const labels = _.get(item, 'obj.metadata.labels') || {};\n  return (\n    labels['app.kubernetes.io/part-of'] ||\n    labels['app.kubernetes.io/name'] ||\n    labels.app ||\n    DEFAULT_GROUP_NAME\n  );\n};\n\nconst groupByApplication = (items: OverviewItem[]): OverviewGroup[] => {\n  const byApplication = _.groupBy(items, getApplication);\n  return asOverviewGroups(byApplication);\n};\n\nconst groupByResource = (items: OverviewItem[]): OverviewGroup[] => {\n  const byResource = _.groupBy(items, (item) => _.startCase(item.obj.kind));\n  return asOverviewGroups(byResource);\n};\n\nconst groupByLabel = (items: OverviewItem[], label: string): OverviewGroup[] => {\n  const byLabel = _.groupBy(\n    items,\n    (item): string => _.get(item, ['obj', 'metadata', 'labels', label]) || DEFAULT_GROUP_NAME,\n  );\n  return asOverviewGroups(byLabel);\n};\n\nconst groupItems = (items: OverviewItem[], selectedGroup: string): OverviewGroup[] => {\n  switch (selectedGroup) {\n    case OverviewSpecialGroup.GROUP_BY_APPLICATION:\n      return groupByApplication(items);\n    case OverviewSpecialGroup.GROUP_BY_RESOURCE:\n      return groupByResource(items);\n    default:\n      return groupByLabel(items, selectedGroup);\n  }\n};\n\nconst headingStateToProps = ({ UI }): OverviewHeadingPropsFromState => {\n  const { selectedGroup, labels, filterValue } = UI.get('overview').toJS();\n  return { labels, selectedGroup, filterValue };\n};\n\nconst headingDispatchToProps = (dispatch): OverviewHeadingPropsFromDispatch => ({\n  selectGroup: (group: OverviewSpecialGroup) =>\n    dispatch(UIActions.updateOverviewSelectedGroup(group)),\n  changeFilter: (value: string) => dispatch(UIActions.updateOverviewFilterValue(value)),\n});\n\nclass OverviewHeading_ extends React.Component<OverviewHeadingProps> {\n  componentWillUnmount() {\n    // Resets the filter value so that it is not retained when navigating to other pages.\n    this.props.changeFilter('');\n  }\n\n  render() {\n    const { changeFilter, filterValue, labels, selectGroup, selectedGroup } = this.props;\n    const firstLabel = _.first(labels) || '';\n    const dropdownItems = {\n      [OverviewSpecialGroup.GROUP_BY_APPLICATION]: 'Application',\n      [OverviewSpecialGroup.GROUP_BY_RESOURCE]: 'Resource',\n      ..._.zipObject(labels, labels),\n    };\n\n    return (\n      <div className=\"co-m-pane__filter-bar\">\n        <div className=\"co-m-pane__filter-bar-group\">\n          <Dropdown\n            className=\"btn-group\"\n            menuClassName=\"dropdown-menu--text-wrap\"\n            items={dropdownItems}\n            onChange={selectGroup}\n            titlePrefix=\"Group by\"\n            title={dropdownItems[selectedGroup] || 'Select Category'}\n            spacerBefore={new Set([firstLabel])}\n            headerBefore={{ [firstLabel]: 'Label' }}\n          />\n        </div>\n        <div className=\"co-m-pane__filter-bar-group co-m-pane__filter-bar-group--filter\">\n          <TextFilter defaultValue={filterValue} label=\"by name\" onChange={changeFilter} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst OverviewHeading = connect<\n  OverviewHeadingPropsFromState,\n  OverviewHeadingPropsFromDispatch,\n  OverviewHeadingOwnProps\n>(\n  headingStateToProps,\n  headingDispatchToProps,\n)(OverviewHeading_);\n\nconst mainContentStateToProps = ({ UI }): OverviewMainContentPropsFromState => {\n  const { filterValue, metrics, selectedGroup, labels } = UI.get('overview').toJS();\n  return { filterValue, labels, metrics, selectedGroup };\n};\n\nconst mainContentDispatchToProps = (dispatch): OverviewMainContentPropsFromDispatch => ({\n  updateLabels: (labels: string[]) => dispatch(UIActions.updateOverviewLabels(labels)),\n  updateMetrics: (metrics: OverviewMetrics) => dispatch(UIActions.updateOverviewMetrics(metrics)),\n  updateResources: (items: OverviewItem[]) => dispatch(UIActions.updateOverviewResources(items)),\n  updateSelectedGroup: (group: OverviewSpecialGroup) =>\n    dispatch(UIActions.updateOverviewSelectedGroup(group)),\n});\n\nclass OverviewMainContent_ extends React.Component<\n  OverviewMainContentProps,\n  OverviewMainContentState\n> {\n  private metricsInterval: any = null;\n\n  readonly state: OverviewMainContentState = {\n    items: [],\n    filteredItems: [],\n    groupedItems: [],\n    ...this.createOverviewData(),\n  };\n\n  componentDidMount(): void {\n    this.fetchMetrics();\n  }\n\n  componentWillUnmount(): void {\n    clearInterval(this.metricsInterval);\n  }\n\n  componentDidUpdate(prevProps: OverviewMainContentProps): void {\n    const {\n      builds,\n      buildConfigs,\n      daemonSets,\n      deployments,\n      deploymentConfigs,\n      filterValue,\n      loaded,\n      namespace,\n      pods,\n      replicaSets,\n      replicationControllers,\n      routes,\n      services,\n      statefulSets,\n      selectedGroup,\n    } = this.props;\n\n    if (\n      namespace !== prevProps.namespace ||\n      loaded !== prevProps.loaded ||\n      !_.isEqual(buildConfigs, prevProps.buildConfigs) ||\n      !_.isEqual(builds, prevProps.builds) ||\n      !_.isEqual(daemonSets, prevProps.daemonSets) ||\n      !_.isEqual(deploymentConfigs, prevProps.deploymentConfigs) ||\n      !_.isEqual(deployments, prevProps.deployments) ||\n      !_.isEqual(pods, prevProps.pods) ||\n      !_.isEqual(replicaSets, prevProps.replicaSets) ||\n      !_.isEqual(replicationControllers, prevProps.replicationControllers) ||\n      !_.isEqual(routes, prevProps.routes) ||\n      !_.isEqual(services, prevProps.services) ||\n      !_.isEqual(statefulSets, prevProps.statefulSets)\n    ) {\n      this.setState(this.createOverviewData());\n    } else if (filterValue !== prevProps.filterValue) {\n      const filteredItems = this.filterItems(this.state.items);\n      this.setState({\n        filteredItems,\n        groupedItems: groupItems(filteredItems, selectedGroup),\n      });\n    } else if (selectedGroup !== prevProps.selectedGroup) {\n      this.setState({\n        groupedItems: groupItems(this.state.filteredItems, selectedGroup),\n      });\n    }\n    // Fetch new metrics when the namespace changes.\n    if (namespace !== prevProps.namespace) {\n      clearInterval(this.metricsInterval);\n      this.fetchMetrics();\n    }\n  }\n\n  fetchMetrics = (): void => {\n    if (!PROMETHEUS_TENANCY_BASE_PATH) {\n      return;\n    }\n\n    const { metrics: previousMetrics, namespace } = this.props;\n    const queries = {\n      memory: `sum(container_memory_working_set_bytes{namespace='${namespace}',container='',pod!=''}) BY (pod, namespace)`,\n      cpu: `pod:container_cpu_usage:sum{namespace=\"${namespace}\"}`,\n    };\n\n    const promises = _.map(queries, (query, name) => {\n      const url = `${PROMETHEUS_TENANCY_BASE_PATH}/api/v1/query?namespace=${namespace}&query=${encodeURIComponent(\n        query,\n      )}`;\n      return coFetchJSON(url).then(({ data: { result } }) => {\n        const byPod: MetricValuesByPod = result.reduce((acc, { metric, value }) => {\n          acc[metric.pod] = Number(value[1]);\n          return acc;\n        }, {});\n        return { [name]: byPod };\n      });\n    });\n\n    Promise.all(promises)\n      .then((data) => {\n        const metrics = data.reduce(\n          (acc: OverviewMetrics, metric): OverviewMetrics => _.assign(acc, metric),\n          {},\n        );\n        this.props.updateMetrics(metrics);\n      })\n      .catch((res) => {\n        const status = _.get(res, 'response.status');\n        // eslint-disable-next-line no-console\n        console.error('Could not fetch metrics, status:', status);\n        // Don't retry on some status codes unless a previous request succeeded.\n        if (_.includes([401, 403, 502, 503], status) && _.isEmpty(previousMetrics)) {\n          throw new Error(`Could not fetch metrics, status: ${status}`);\n        }\n      })\n      .then(() => {\n        this.metricsInterval = setTimeout(this.fetchMetrics, METRICS_POLL_INTERVAL);\n      });\n  };\n\n  filterItems(items: OverviewItem[]): OverviewItem[] {\n    const { filterValue, selectedItem } = this.props;\n\n    if (!filterValue) {\n      return items;\n    }\n\n    const filterString = filterValue.toLowerCase();\n    return _.filter(items, (item) => {\n      return (\n        fuzzy(filterString, _.get(item, 'obj.metadata.name', '')) ||\n        _.get(item, 'obj.metadata.uid') === _.get(selectedItem, 'obj.metadata.uid')\n      );\n    });\n  }\n\n  getLabels(items: OverviewItem[]): string[] {\n    const labelSet = new Set<string>();\n    _.each(items, (i: OverviewItem) => {\n      const itemLabels = _.get(i, 'obj.metadata.labels') as K8sResourceKind['metadata']['labels'];\n      _.each(itemLabels, (v: string, k: string) => labelSet.add(k));\n    });\n    return [...labelSet].sort();\n  }\n\n  createOverviewData(): OverviewMainContentState {\n    const {\n      loaded,\n      mock,\n      selectedGroup,\n      updateLabels,\n      updateSelectedGroup,\n      updateResources,\n    } = this.props;\n    if (!loaded) {\n      return;\n    }\n    // keeps deleted bookmarked projects from attempting to generate data\n    if (mock) {\n      return;\n    }\n\n    const items = [\n      ...createDaemonSetItems(\n        this.props.daemonSets.data,\n        this.props,\n        this.props?.clusterServiceVersions?.data,\n        this.props.utils,\n      ),\n      ...createDeploymentItems(\n        this.props.deployments.data,\n        this.props,\n        this.props?.clusterServiceVersions?.data,\n        this.props.utils,\n      ),\n      ...createDeploymentConfigItems(\n        this.props.deploymentConfigs.data,\n        this.props,\n        this.props?.clusterServiceVersions?.data,\n        this.props.utils,\n      ),\n      ...createStatefulSetItems(\n        this.props.statefulSets.data,\n        this.props,\n        this.props?.clusterServiceVersions?.data,\n        this.props.utils,\n      ),\n      ...createPodItems(this.props),\n    ];\n\n    updateResources(items);\n\n    const filteredItems = this.filterItems(items);\n    const labels = this.getLabels(filteredItems);\n    if (\n      selectedGroup !== OverviewSpecialGroup.GROUP_BY_APPLICATION &&\n      selectedGroup !== OverviewSpecialGroup.GROUP_BY_RESOURCE &&\n      !_.includes(labels, selectedGroup)\n    ) {\n      updateSelectedGroup(OverviewSpecialGroup.GROUP_BY_APPLICATION);\n    }\n\n    updateLabels(labels);\n    const groupedItems = groupItems(filteredItems, selectedGroup);\n    return {\n      filteredItems,\n      groupedItems,\n      items,\n    };\n  }\n\n  render() {\n    const { loaded, loadError, project, namespace, EmptyMsg, emptyBodyClass } = this.props;\n    const { items, filteredItems, groupedItems } = this.state;\n    const OverviewEmptyState = () => (\n      <MsgBox\n        title=\"No Workloads Found.\"\n        detail={\n          <div>\n            <Link to={formatNamespacedRouteForResource('import', namespace)}>Import YAML</Link> or{' '}\n            <Link to={`/add/ns/${namespace}`}>add other content</Link> to your project.\n          </div>\n        }\n      />\n    );\n\n    const skeletonOverview = (\n      <div className=\"skeleton-overview\">\n        <div className=\"skeleton-overview--head\" />\n        <div className=\"skeleton-overview--tile\" />\n        <div className=\"skeleton-overview--tile\" />\n        <div className=\"skeleton-overview--tile\" />\n      </div>\n    );\n\n    const hasItems = items?.length > 0;\n    return (\n      <div className=\"co-m-pane\">\n        {hasItems && <OverviewHeading project={_.get(project, 'data')} />}\n        <div\n          className={\n            (!hasItems && emptyBodyClass) || 'co-m-pane__body co-m-pane__body--no-top-margin'\n          }\n        >\n          <StatusBox\n            skeleton={skeletonOverview}\n            data={filteredItems}\n            label=\"Resources\"\n            loaded={loaded}\n            loadError={loadError}\n            EmptyMsg={EmptyMsg || OverviewEmptyState}\n          >\n            <ProjectOverview groups={groupedItems} />\n          </StatusBox>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst OverviewMainContent = connect<\n  OverviewMainContentPropsFromState,\n  OverviewMainContentPropsFromDispatch,\n  OverviewMainContentOwnProps\n>(\n  mainContentStateToProps,\n  mainContentDispatchToProps,\n)(OverviewMainContent_);\n\nconst overviewStateToProps = ({ UI, FLAGS }): OverviewPropsFromState => {\n  const selectedUID = UI.getIn(['overview', 'selectedUID']);\n  const resources = UI.getIn(['overview', 'resources']);\n  const resourceList = plugins.registry\n    .getOverviewCRDs()\n    .filter((resource) => FLAGS.get(resource.properties.required));\n  const selectedItem = !!resources && resources.get(selectedUID);\n  return { selectedItem, resourceList };\n};\n\nconst overviewDispatchToProps = (dispatch): OverviewPropsFromDispatch => {\n  return {\n    dismissDetails: () => dispatch(UIActions.dismissOverviewDetails()),\n  };\n};\n\nconst Overview_: React.SFC<OverviewProps> = ({\n  mock,\n  match,\n  selectedItem,\n  resourceList,\n  title,\n  dismissDetails,\n  EmptyMsg,\n  emptyBodyClass,\n}) => {\n  const namespace = _.get(match, 'params.name');\n  const sidebarOpen = !_.isEmpty(selectedItem);\n  const className = classnames('overview', { 'overview--sidebar-shown': sidebarOpen });\n  const ref = React.useRef();\n  const [height, setHeight] = React.useState(500);\n  const calcHeight = (node) => {\n    setHeight(\n      document.getElementsByClassName('pf-c-page')[0].getBoundingClientRect().bottom -\n        node.current.getBoundingClientRect().top,\n    );\n  };\n  React.useLayoutEffect(() => {\n    calcHeight(ref);\n    const handleResize = () => calcHeight(ref);\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  });\n\n  const { resources, utils } = getResourceList(namespace, resourceList);\n  resources.push({\n    isList: false,\n    kind: 'Project',\n    name: namespace,\n    prop: 'project',\n  });\n  return (\n    <div className={className}>\n      <div className=\"overview__main-column\" ref={ref} style={{ height }}>\n        <div className=\"overview__main-column-section\">\n          <Firehose resources={mock ? [] : resources}>\n            <OverviewMainContent\n              mock={mock}\n              namespace={namespace}\n              selectedItem={selectedItem}\n              title={title}\n              utils={utils}\n              EmptyMsg={EmptyMsg}\n              emptyBodyClass={emptyBodyClass}\n            />\n          </Firehose>\n        </div>\n      </div>\n      {sidebarOpen && (\n        <CSSTransition appear={true} in timeout={225} classNames=\"overview__sidebar\">\n          <div className=\"overview__sidebar\">\n            <div className=\"co-sidebar-dismiss clearfix\">\n              <CloseButton onClick={dismissDetails} />\n            </div>\n            <ResourceOverviewPage item={selectedItem} kind={selectedItem.obj.kind} />\n          </div>\n        </CSSTransition>\n      )}\n    </div>\n  );\n};\n\nexport const Overview = connect<\n  OverviewPropsFromState,\n  OverviewPropsFromDispatch,\n  OverviewOwnProps\n>(\n  overviewStateToProps,\n  overviewDispatchToProps,\n)(Overview_);\n\nexport type PodOverviewItem = {\n  obj: PodKind;\n} & OverviewItem;\n\nexport type OverviewGroup = {\n  name: string;\n  items: OverviewItem[];\n};\n\ntype MetricValuesByPod = {\n  [podName: string]: number;\n};\n\nexport type OverviewMetrics = {\n  cpu?: MetricValuesByPod;\n  memory?: MetricValuesByPod;\n};\n\ntype OverviewHeadingPropsFromState = {\n  filterValue: string;\n  labels: string[];\n  selectedGroup: string;\n};\n\ntype OverviewHeadingPropsFromDispatch = {\n  selectGroup: (selectedLabel: OverviewSpecialGroup) => void;\n  changeFilter: (value: string) => void;\n};\n\ntype OverviewHeadingOwnProps = {\n  project: K8sResourceKind;\n};\n\ntype OverviewHeadingProps = OverviewHeadingPropsFromState &\n  OverviewHeadingPropsFromDispatch &\n  OverviewHeadingOwnProps;\n\ntype OverviewMainContentPropsFromState = {\n  filterValue: string;\n  labels: string[];\n  metrics: OverviewMetrics;\n  selectedGroup: string;\n};\n\ntype OverviewMainContentPropsFromDispatch = {\n  updateLabels: (labels: string[]) => void;\n  updateMetrics: (metrics: OverviewMetrics) => void;\n  updateResources: (items: OverviewItem[]) => void;\n  updateSelectedGroup: (group: OverviewSpecialGroup) => void;\n};\n\ntype OverviewMainContentOwnProps = {\n  builds?: FirehoseResult;\n  buildConfigs?: FirehoseResult;\n  daemonSets?: FirehoseResult;\n  deploymentConfigs?: FirehoseResult;\n  deployments?: FirehoseResult<DeploymentKind[]>;\n  mock: boolean;\n  loaded?: boolean;\n  loadError?: any;\n  namespace: string;\n  pods?: FirehoseResult<PodKind[]>;\n  project?: FirehoseResult<K8sResourceKind>;\n  replicationControllers?: FirehoseResult;\n  replicaSets?: FirehoseResult;\n  routes?: FirehoseResult<RouteKind[]>;\n  services?: FirehoseResult;\n  selectedItem: OverviewItem;\n  statefulSets?: FirehoseResult;\n  title?: string;\n  clusterServiceVersions?: FirehoseResult<ClusterServiceVersionKind[]>;\n  utils?: Function[];\n  EmptyMsg?: React.ComponentType;\n  emptyBodyClass?: string;\n};\n\nexport type OverviewMainContentProps = OverviewMainContentPropsFromState &\n  OverviewMainContentPropsFromDispatch &\n  OverviewMainContentOwnProps;\n\ntype OverviewMainContentState = {\n  readonly items: any[];\n  readonly filteredItems: any[];\n  readonly groupedItems: any[];\n};\n\ntype OverviewPropsFromState = {\n  selectedItem: any;\n  resourceList: OverviewCRD[];\n};\n\ntype OverviewPropsFromDispatch = {\n  dismissDetails: () => void;\n};\n\ntype OverviewOwnProps = {\n  mock: boolean;\n  match: any;\n  title: string;\n  EmptyMsg?: React.ComponentType;\n  emptyBodyClass?: string;\n};\n\ntype OverviewProps = OverviewPropsFromState & OverviewPropsFromDispatch & OverviewOwnProps;\n","export * from './list-view';\nexport * from './list-view-additional-info';\nexport * from './list-view-body';\nexport * from './list-view-description';\nexport * from './list-view-description-heading';\nexport * from './list-view-group-item';\nexport * from './list-view-item';\nexport * from './list-view-main-info';\nexport * from './list-view-row';\n","import * as React from 'react';\n\nexport const ListViewAdditionalInfo: React.FC<ListViewAdditionalInfoProps> = ({ children }) => (\n  <div className=\"list-view-pf-additional-info\">{children}</div>\n);\n\ntype ListViewAdditionalInfoProps = {\n  children: React.ReactNode;\n};\n","import * as React from 'react';\n\nexport const ListViewBody: React.FC<ListViewBodyProps> = ({ children }) => (\n  <div className=\"list-view-pf-body\">{children}</div>\n);\n\ntype ListViewBodyProps = {\n  children: React.ReactNode;\n};\n","import * as React from 'react';\n\nexport const ListViewDescriptionHeading: React.FC<ListViewDescriptionHeadingProps> = ({\n  children,\n}) => <div className=\"list-group-item-heading\">{children}</div>;\n\ntype ListViewDescriptionHeadingProps = {\n  children: React.ReactNode;\n};\n","import * as React from 'react';\n\nexport const ListViewDescription: React.FC<ListViewDescriptionProps> = ({ children }) => (\n  <div className=\"list-view-pf-description\">{children}</div>\n);\n\ntype ListViewDescriptionProps = {\n  children: React.ReactNode;\n};\n","import * as React from 'react';\nimport * as classNames from 'classnames';\n\nexport const ListViewGroupItem: React.FC<ListViewGroupItemProps> = ({\n  children,\n  className,\n  ...props\n}) => {\n  const classes = classNames('list-group-item', className);\n  return (\n    <div className={classes} {...props}>\n      {children}\n    </div>\n  );\n};\n\ntype ListViewGroupItemProps = {\n  children: React.ReactNode;\n  className?: string;\n};\n","import * as React from 'react';\n\nimport { ListViewGroupItem } from './list-view-group-item';\nimport { ListViewRow } from './list-view-row';\n\nexport const ListViewItem: React.FC<ListViewItemProps> = ({\n  additionalInfo,\n  heading,\n  ...props\n}) => (\n  <ListViewGroupItem {...props}>\n    <ListViewRow heading={heading} additionalInfo={additionalInfo} />\n  </ListViewGroupItem>\n);\n\ntype ListViewItemProps = {\n  additionalInfo?: React.ReactNode[];\n  className?: string;\n  heading?: React.ReactNode;\n  id: string;\n  onClick: React.MouseEventHandler;\n};\n","import * as React from 'react';\n\nexport const ListViewMainInfo: React.FC<ListViewMainInfoProps> = ({ children }) => (\n  <div className=\"list-view-pf-main-info\">{children}</div>\n);\n\ntype ListViewMainInfoProps = {\n  children: React.ReactNode;\n};\n","import * as React from 'react';\n\nimport { ListViewAdditionalInfo } from './list-view-additional-info';\nimport { ListViewBody } from './list-view-body';\nimport { ListViewDescription } from './list-view-description';\nimport { ListViewDescriptionHeading } from './list-view-description-heading';\nimport { ListViewMainInfo } from './list-view-main-info';\n\nexport const ListViewRow: React.FC<ListViewRowProps> = ({ additionalInfo, heading }) => (\n  <ListViewMainInfo key=\"main_info\">\n    <ListViewBody>\n      {heading && (\n        <ListViewDescription>\n          {heading && <ListViewDescriptionHeading>{heading}</ListViewDescriptionHeading>}\n        </ListViewDescription>\n      )}\n      {additionalInfo && <ListViewAdditionalInfo>{additionalInfo}</ListViewAdditionalInfo>}\n    </ListViewBody>\n  </ListViewMainInfo>\n);\n\ntype ListViewRowProps = {\n  additionalInfo?: React.ReactNode[];\n  heading?: React.ReactNode;\n};\n","import * as React from 'react';\nimport * as classNames from 'classnames';\n\nexport const ListView: React.FC<ListViewProps> = ({ children, className, ...props }) => {\n  const classes = classNames('list-group list-view-pf list-view-pf-view', className);\n  return (\n    <div className={classes} {...props}>\n      {children}\n    </div>\n  );\n};\n\ntype ListViewProps = {\n  children: React.ReactNode;\n  className?: string;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { LongArrowAltRightIcon } from '@patternfly/react-icons';\n\nimport { K8sResourceKind, RouteKind } from '../../module/k8s';\nimport { RouteLocation } from '../routes';\nimport { ResourceLink, SidebarSectionHeading } from '../utils';\n\nconst ServicePortList: React.SFC<ServicePortListProps> = ({ service }) => {\n  const ports = _.get(service, 'spec.ports', []);\n  return (\n    <ul className=\"port-list\">\n      {_.map(ports, ({ name, port, protocol, targetPort }) => (\n        <li key={name || `${protocol}/${port}`}>\n          <span className=\"text-muted\">Service port:</span> {name || `${protocol}/${port}`}\n          &nbsp;\n          <LongArrowAltRightIcon />\n          &nbsp;\n          <span className=\"text-muted\">Pod Port:</span> {targetPort}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst ServicesOverviewListItem: React.SFC<ServiceOverviewListItemProps> = ({ service }) => {\n  const { name, namespace } = service.metadata;\n  return (\n    <li className=\"list-group-item\">\n      <ResourceLink kind=\"Service\" name={name} namespace={namespace} />\n      <ServicePortList service={service} />\n    </li>\n  );\n};\n\nconst ServicesOverviewList: React.SFC<ServiceOverviewListProps> = ({ services }) => (\n  <ul className=\"list-group\">\n    {_.map(services, (service) => (\n      <ServicesOverviewListItem key={service.metadata.uid} service={service} />\n    ))}\n  </ul>\n);\n\nconst RoutesOverviewListItem: React.SFC<RoutesOverviewListItemProps> = ({ route }) => {\n  const { name, namespace } = route.metadata;\n  return (\n    <li className=\"list-group-item\">\n      <ResourceLink kind=\"Route\" name={name} namespace={namespace} />\n      <span className=\"text-muted\">{'Location: '}</span>\n      <RouteLocation obj={route} />\n    </li>\n  );\n};\n\nconst RoutesOverviewList: React.SFC<RoutesOverviewListProps> = ({ routes }) => (\n  <ul className=\"list-group\">\n    {_.map(routes, (route) => (\n      <RoutesOverviewListItem key={route.metadata.uid} route={route} />\n    ))}\n  </ul>\n);\n\nexport const NetworkingOverview: React.SFC<NetworkingOverviewProps> = ({ routes, services }) => {\n  return (\n    <>\n      <SidebarSectionHeading text=\"Services\" />\n      {_.isEmpty(services) ? (\n        <span className=\"text-muted\">No Services found for this resource.</span>\n      ) : (\n        <ServicesOverviewList services={services} />\n      )}\n\n      <SidebarSectionHeading text=\"Routes\" />\n      {_.isEmpty(routes) ? (\n        <span className=\"text-muted\">No Routes found for this resource.</span>\n      ) : (\n        <RoutesOverviewList routes={routes} />\n      )}\n    </>\n  );\n};\n\ntype RoutesOverviewListProps = {\n  routes: RouteKind[];\n};\n\ntype RoutesOverviewListItemProps = {\n  route: RouteKind;\n};\n\ntype NetworkingOverviewProps = {\n  routes: RouteKind[];\n  services: K8sResourceKind[];\n};\n\ntype ServicePortListProps = {\n  service: K8sResourceKind;\n};\n\ntype ServiceOverviewListProps = {\n  services: K8sResourceKind[];\n};\n\ntype ServiceOverviewListItemProps = {\n  service: K8sResourceKind;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { Status } from '@console/shared';\nimport { ResourceLink, resourcePath, SidebarSectionHeading } from '../utils';\nimport { podPhase, PodKind, K8sResourceKind, referenceFor } from '../../module/k8s';\n\nconst kind: string = 'Pod';\nconst MAX_PODS: number = 3;\nconst MAX_ERROR_PODS: number = 10;\n\nconst podUpdateTime = (pod: PodKind) => {\n  const allStatuses = [\n    ..._.get(pod, 'status.containerStatuses', []),\n    ..._.get(pod, 'status.initContainerStatuses', []),\n  ];\n  const updateTimes = _.reduce(\n    allStatuses,\n    (times, nextStatus) => {\n      if (nextStatus.state.running) {\n        return [...times, _.get(nextStatus, 'state.running.startedAt')];\n      }\n      if (nextStatus.state.terminated) {\n        return [...times, _.get(nextStatus, 'state.terminated.finishedAt')];\n      }\n      if (nextStatus.lastState.running) {\n        return [...times, _.get(nextStatus, 'lastState.running.startedAt')];\n      }\n      if (nextStatus.lastState.terminated) {\n        return [...times, _.get(nextStatus, 'lastState.terminated.finishedAt')];\n      }\n      return [...times, _.get(nextStatus, _.get(pod, 'startTime'))];\n    },\n    [],\n  );\n\n  return _.head(_.reverse(updateTimes.sort()));\n};\n\nconst errorPhases = [\n  'ContainerCannotRun',\n  'CrashLoopBackOff',\n  'Critical',\n  'Error',\n  'Failed',\n  'InstallCheckFailed',\n  'Cancelled',\n  'Expired',\n  'Not Ready',\n  'Terminating',\n];\n\nconst isPodError = (pod: PodKind) => _.includes(errorPhases, podPhase(pod));\n\nconst podCompare = (pod1: PodKind, pod2: PodKind): number => {\n  const error1 = isPodError(pod1);\n  const error2 = isPodError(pod2);\n\n  if (error1 !== error2) {\n    return error1 ? 1 : 0;\n  }\n\n  const runtime1 = podUpdateTime(pod1);\n  const runtime2 = podUpdateTime(pod2);\n\n  if (runtime1 < runtime2) {\n    return 1;\n  }\n  if (runtime1 > runtime2) {\n    return -1;\n  }\n\n  return pod1.metadata.name.localeCompare(pod2.metadata.name);\n};\n\nconst PodOverviewItem: React.FC<PodOverviewItemProps> = ({ pod }) => {\n  const {\n    metadata: { name, namespace },\n  } = pod;\n  const phase = podPhase(pod);\n\n  return (\n    <li className=\"list-group-item container-fluid\">\n      <div className=\"row\">\n        <span className=\"col-xs-6\">\n          <ResourceLink kind={kind} name={name} namespace={namespace} />\n        </span>\n        <span className=\"col-xs-3\">\n          <Status status={phase} />\n        </span>\n        <span className=\"col-xs-3 text-right\">\n          <Link to={`${resourcePath(kind, name, namespace)}/logs`}>View logs</Link>\n        </span>\n      </div>\n    </li>\n  );\n};\n\nPodOverviewItem.displayName = 'PodOverviewItem';\n\ntype PodOverviewItemProps = {\n  pod: PodKind;\n};\n\nconst PodsOverviewList: React.SFC<PodOverviewListProps> = ({ pods }) => (\n  <ul className=\"list-group\">\n    {_.map(pods, (pod) => (\n      <PodOverviewItem key={pod.metadata.uid} pod={pod} />\n    ))}\n  </ul>\n);\n\nPodsOverviewList.displayName = 'PodsOverviewList';\n\nexport const PodsOverview: React.SFC<PodsOverviewProps> = ({\n  pods,\n  obj,\n  allPodsLink,\n  emptyText,\n}) => {\n  const {\n    metadata: { name, namespace },\n  } = obj;\n\n  const errorPodCount = _.size(_.filter(pods, (pod) => isPodError(pod)));\n  const podsShown = Math.max(Math.min(errorPodCount, MAX_ERROR_PODS), MAX_PODS);\n  const linkTo = allPodsLink || `${resourcePath(referenceFor(obj), name, namespace)}/pods`;\n  const emptyMessage = emptyText || 'No Pods found for this resource.';\n  pods.sort(podCompare);\n\n  return (\n    <>\n      <SidebarSectionHeading text=\"Pods\">\n        {_.size(pods) > podsShown && (\n          <Link className=\"sidebar__section-view-all\" to={linkTo}>\n            {`View all (${_.size(pods)})`}\n          </Link>\n        )}\n      </SidebarSectionHeading>\n      {_.isEmpty(pods) ? (\n        <span className=\"text-muted\">{emptyMessage}</span>\n      ) : (\n        <PodsOverviewList pods={_.take(pods, podsShown)} />\n      )}\n    </>\n  );\n};\n\ntype PodOverviewListProps = {\n  pods: PodKind[];\n};\n\ntype PodsOverviewProps = {\n  pods: PodKind[];\n  obj: K8sResourceKind;\n  allPodsLink?: string;\n  emptyText?: string;\n};\n","import * as _ from 'lodash-es';\nimport * as classnames from 'classnames';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Button, Tooltip } from '@patternfly/react-core';\n\nimport { ListView, ListViewItem } from './list-view';\nimport {\n  KEYBOARD_SHORTCUTS,\n  Status as TooltipStatus,\n  YellowExclamationTriangleIcon,\n  PodControllerOverviewItem,\n  OverviewItem,\n} from '@console/shared';\nimport { K8sResourceKind } from '../../module/k8s';\nimport * as UIActions from '../../actions/ui';\nimport {\n  ResourceIcon,\n  formatBytesAsMiB,\n  formatCores,\n  pluralize,\n  resourceObjPath,\n  truncateMiddle,\n} from '../utils';\n\nimport { OverviewGroup, OverviewMetrics } from '.';\n\n// Consider this mobile if the device screen width is less than 768. (This value shouldn't change.)\nconst isMobile = window.screen.width < 768;\n\nconst ControllerLink: React.SFC<ControllerLinkProps> = ({ controller }) => {\n  const { obj, revision } = controller;\n  const { name } = obj.metadata;\n  const label = _.isFinite(revision) ? `#${revision}` : name;\n  return (\n    <Link to={resourceObjPath(obj, obj.kind)} title={name}>\n      {label}\n    </Link>\n  );\n};\n\nexport const ComponentLabel: React.SFC<ComponentLabelProps> = ({ text }) => (\n  <div className=\"co-component-label\">{text}</div>\n);\n\nconst MetricsTooltip: React.SFC<MetricsTooltipProps> = ({ metricLabel, byPod, children }) => {\n  const sortedMetrics = _.orderBy(byPod, ['value', 'name'], ['desc', 'asc']);\n  const content: any[] = _.isEmpty(sortedMetrics)\n    ? [<React.Fragment key=\"no-metrics\">No {metricLabel} metrics available.</React.Fragment>]\n    : _.concat(\n        <div className=\"project-overview__metric-tooltip-title\" key=\"#title\">\n          {metricLabel} Usage by Pod\n        </div>,\n        sortedMetrics.map(({ name, formattedValue }) => (\n          <div key={name} className=\"project-overview__metric-tooltip\">\n            <div className=\"project-overview__metric-tooltip-name\">\n              <span className=\"no-wrap\">{truncateMiddle(name)}</span>\n            </div>\n            <div className=\"project-overview__metric-tooltip-value\">{formattedValue}</div>\n          </div>\n        )),\n      );\n\n  const keepLines = 6;\n  // Don't remove a single line to show a \"1 other\" message since there's space to show the last pod in that case.\n  // Make sure we always remove at least 2 lines if we truncate.\n  if (content.length > keepLines + 1) {\n    const numRemoved = content.length - keepLines;\n    content.splice(\n      keepLines,\n      numRemoved,\n      <div key=\"#removed-pods\">and {numRemoved} other pods</div>,\n    );\n  }\n\n  // Disable the tooltip on mobile since a touch also opens the sidebar, which\n  // immediately covers the tooltip content.\n  if (isMobile) {\n    return <>{children}</>;\n  }\n  return (\n    <Tooltip content={content} distance={15}>\n      <>{children}</>\n    </Tooltip>\n  );\n};\n\nconst Metrics: React.SFC<MetricsProps> = ({ metrics, item }) => {\n  const getPods = () => {\n    if (item.obj.kind === 'Pod') {\n      return [item.obj];\n    }\n    return item.current ? item.current.pods : item.pods;\n  };\n\n  if (_.isEmpty(metrics)) {\n    return null;\n  }\n\n  let totalBytes = 0;\n  let totalCores = 0;\n  const memoryByPod = [];\n  const cpuByPod = [];\n  _.each(getPods(), ({ metadata: { name } }: K8sResourceKind) => {\n    const bytes = _.get(metrics, ['memory', name]);\n    if (_.isFinite(bytes)) {\n      totalBytes += bytes;\n      const formattedValue = `${formatBytesAsMiB(bytes)} MiB`;\n      memoryByPod.push({ name, value: bytes, formattedValue });\n    }\n\n    const cores = _.get(metrics, ['cpu', name]);\n    if (_.isFinite(cores)) {\n      totalCores += cores;\n      cpuByPod[name] = `${formatCores(cores)} cores`;\n      const formattedValue = `${formatCores(cores)} cores`;\n      cpuByPod.push({ name, value: cores, formattedValue });\n    }\n  });\n\n  if (!totalBytes && !totalCores) {\n    return null;\n  }\n\n  const formattedMiB = formatBytesAsMiB(totalBytes);\n  const formattedCores = formatCores(totalCores);\n  return (\n    <>\n      <div className=\"project-overview__detail project-overview__detail--memory\">\n        <MetricsTooltip metricLabel=\"Memory\" byPod={memoryByPod}>\n          <span>\n            <span className=\"project-overview__metric-value\">{formattedMiB}</span>\n            &nbsp;\n            <span className=\"project-overview__metric-unit\">MiB</span>\n          </span>\n        </MetricsTooltip>\n      </div>\n      <div className=\"project-overview__detail project-overview__detail--cpu\">\n        <MetricsTooltip metricLabel=\"CPU\" byPod={cpuByPod}>\n          <span>\n            <span className=\"project-overview__metric-value\">{formattedCores}</span>\n            &nbsp;\n            <span className=\"project-overview__metric-unit\">cores</span>\n          </span>\n        </MetricsTooltip>\n      </div>\n    </>\n  );\n};\n\nconst Status: React.SFC<StatusProps> = ({ item }) => {\n  const { status } = item;\n  return status ? (\n    <div className=\"project-overview__detail project-overview__detail--status\">{status}</div>\n  ) : null;\n};\n\nconst AlertTooltip = ({ alerts, severity, noSeverityLabel = false }) => {\n  const label = severity === 'Info' ? 'Message' : severity;\n  const count = _.size(alerts);\n  const message = _.uniq(_.map(alerts, 'message')).join('\\n');\n  const content = [\n    <span key=\"message\" className=\"co-pre-wrap\">\n      {message}\n    </span>,\n  ];\n\n  // Disable the tooltip on mobile since a touch also opens the sidebar, which\n  // immediately covers the tooltip content.\n  if (isMobile) {\n    return (\n      <span className=\"project-overview__status\">\n        <TooltipStatus\n          status={severity}\n          title={noSeverityLabel ? String(count) : pluralize(count, label)}\n        />\n      </span>\n    );\n  }\n  return (\n    <Tooltip content={content} distance={10}>\n      <span className=\"project-overview__status\">\n        <TooltipStatus\n          status={severity}\n          title={noSeverityLabel ? String(count) : pluralize(count, label)}\n        />\n      </span>\n    </Tooltip>\n  );\n};\n\nconst Alerts: React.SFC<AlertsProps> = ({ item }) => {\n  const currentAlerts = _.get(item, 'current.alerts', {});\n  const previousAlerts = _.get(item, 'previous.alerts', {});\n  const itemAlerts = _.get(item, 'alerts', {});\n  const alerts = {\n    ...itemAlerts,\n    ...currentAlerts,\n    ...previousAlerts,\n  };\n  if (_.isEmpty(alerts)) {\n    return null;\n  }\n\n  const {\n    error,\n    warning,\n    info,\n    buildNew,\n    buildPending,\n    buildRunning,\n    buildFailed,\n    buildError,\n  } = _.groupBy(alerts, 'severity');\n  return (\n    <div className=\"project-overview__detail project-overview__detail--alert\">\n      {error && <AlertTooltip severity=\"Error\" alerts={error} />}\n      {warning && <AlertTooltip severity=\"Warning\" alerts={warning} />}\n      {info && <AlertTooltip severity=\"Info\" alerts={info} />}\n      {(buildNew || buildPending || buildRunning || buildFailed || buildError) && (\n        <div className=\"project-overview__builds\">\n          Builds {buildNew && <AlertTooltip severity=\"New\" alerts={buildNew} noSeverityLabel />}{' '}\n          {buildPending && (\n            <AlertTooltip severity=\"Pending\" alerts={buildPending} noSeverityLabel />\n          )}{' '}\n          {buildRunning && (\n            <AlertTooltip severity=\"Running\" alerts={buildRunning} noSeverityLabel />\n          )}{' '}\n          {buildFailed && <AlertTooltip severity=\"Failed\" alerts={buildFailed} noSeverityLabel />}{' '}\n          {buildError && <AlertTooltip severity=\"Error\" alerts={buildError} noSeverityLabel />}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst projectOverviewListItemStateToProps = ({ UI }): ProjectOverviewListItemPropsFromState => ({\n  metrics: UI.getIn(['overview', 'metrics']),\n  selectedUID: UI.getIn(['overview', 'selectedUID']),\n});\n\nconst projectOverviewListItemDispatchToProps = (\n  dispatch,\n): ProjectOverviewListItemPropsFromDispatch => ({\n  selectItem: (uid) => dispatch(UIActions.selectOverviewItem(uid)),\n  dismissDetails: () => dispatch(UIActions.dismissOverviewDetails()),\n});\n\nexport const ResourceItemDeleting = () => (\n  <span className=\"co-resource-item__deleting\">\n    <YellowExclamationTriangleIcon /> Deleting\n  </span>\n);\n\nconst ProjectOverviewListItem = connect<\n  ProjectOverviewListItemPropsFromState,\n  ProjectOverviewListItemPropsFromDispatch,\n  ProjectOverviewListItemOwnProps\n>(\n  projectOverviewListItemStateToProps,\n  projectOverviewListItemDispatchToProps,\n)(({ dismissDetails, item, metrics, selectItem, selectedUID }: ProjectOverviewListItemProps) => {\n  const { current, obj } = item;\n  const { name, uid, deletionTimestamp } = obj.metadata;\n  const { kind } = obj;\n  // Hide metrics when a selection is active.\n  const hasSelection = !!selectedUID;\n  const isSelected = uid === selectedUID;\n  const className = classnames(`project-overview__item project-overview__item--${kind}`, {\n    'project-overview__item--selected': isSelected,\n  });\n\n  const onClick = (e: React.MouseEvent<any>) => {\n    // Don't toggle details if clicking on a link inside the row.\n    const target = e.target as HTMLElement;\n    if (target.tagName.toLowerCase() === 'a') {\n      return;\n    }\n\n    if (isSelected) {\n      dismissDetails();\n    } else {\n      selectItem(uid);\n    }\n  };\n\n  const heading = (\n    <h3 className=\"project-overview__item-heading\">\n      <span className=\"co-resource-item co-resource-item--truncate\">\n        <ResourceIcon kind={kind} />\n        <Button\n          type=\"button\"\n          isInline\n          onClick={onClick}\n          className=\"pf-c-button--no-default-values project-overview__item-heading--name\"\n          variant=\"link\"\n        >\n          {name}\n        </Button>\n        {current && (\n          <>\n            ,&nbsp;\n            <ControllerLink controller={current} />\n          </>\n        )}\n        {deletionTimestamp && <ResourceItemDeleting />}\n      </span>\n    </h3>\n  );\n\n  const additionalInfo = (\n    <div key={uid} className=\"project-overview__additional-info\">\n      <Alerts item={item} />\n      {!hasSelection && <Metrics item={item} metrics={metrics} />}\n      <Status item={item} />\n    </div>\n  );\n\n  return (\n    <ListViewItem\n      onClick={onClick}\n      className={className}\n      heading={heading}\n      additionalInfo={[additionalInfo]}\n      id={uid}\n    />\n  );\n});\n\nconst ProjectOverviewList: React.SFC<ProjectOverviewListProps> = ({ items }) => {\n  const listItems = _.map(items, (item) => (\n    <ProjectOverviewListItem item={item} key={item.obj.metadata.uid} />\n  ));\n  return <ListView className=\"project-overview__list\">{listItems}</ListView>;\n};\n\nconst ProjectOverviewGroup: React.SFC<ProjectOverviewGroupProps> = ({ heading, items }) => (\n  <div className=\"project-overview__group\">\n    <h2 className=\"project-overview__group-heading\">{heading}</h2>\n    <ProjectOverviewList items={items} />\n  </div>\n);\n\nconst projectOverviewStateToProps = ({ UI }) => ({\n  selectedUID: UI.getIn(['overview', 'selectedUID']),\n});\n\nconst projectOverviewDispatchToProps = (dispatch) => ({\n  selectItemUID: (uid: string) => dispatch(UIActions.selectOverviewItem(uid)),\n  dismissDetails: () => dispatch(UIActions.dismissOverviewDetails()),\n});\n\nclass ProjectOverview_ extends React.Component<ProjectOverviewProps> {\n  componentDidMount() {\n    window.addEventListener('keydown', this.onKeyDown);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.onKeyDown);\n  }\n\n  flatten(): OverviewItem[] {\n    return _.flatten(_.map(this.props.groups, 'items'));\n  }\n\n  findIndex(items: OverviewItem[], uid: string): number {\n    return _.findIndex(items, (i) => _.get(i, 'obj.metadata.uid') === uid);\n  }\n\n  selectItem(item: OverviewItem) {\n    const uid: string = _.get(item, 'obj.metadata.uid');\n    this.props.selectItemUID(uid);\n    const element = document.getElementById(uid);\n    if (element) {\n      element.scrollIntoView({ block: 'nearest' });\n    }\n  }\n\n  selectPrevious() {\n    const { selectedUID } = this.props;\n    const allItems = this.flatten();\n    if (!selectedUID) {\n      this.selectItem(_.last(allItems));\n    } else {\n      const newIndex = this.findIndex(allItems, selectedUID) - 1;\n      const item = _.get(allItems, [newIndex < 0 ? allItems.length - 1 : newIndex]);\n      this.selectItem(item);\n    }\n  }\n\n  selectNext() {\n    const { selectedUID } = this.props;\n    const allItems = this.flatten();\n    if (!selectedUID) {\n      this.selectItem(_.first(allItems));\n    } else {\n      const newIndex = this.findIndex(allItems, selectedUID) + 1;\n      const item = _.get(allItems, [newIndex >= allItems.length ? 0 : newIndex]);\n      this.selectItem(item);\n    }\n  }\n\n  stopEvent(e: KeyboardEvent) {\n    document.activeElement instanceof HTMLElement && document.activeElement.blur();\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  onKeyDown = (e: KeyboardEvent) => {\n    const { nodeName } = e.target as Element;\n    if (nodeName === 'INPUT' || nodeName === 'TEXTAREA') {\n      return;\n    }\n\n    switch (e.key) {\n      case 'Escape':\n        this.stopEvent(e);\n        this.props.dismissDetails();\n        break;\n      case 'k':\n      case 'ArrowUp':\n        this.stopEvent(e);\n        this.selectPrevious();\n        break;\n      case 'j':\n      case 'ArrowDown':\n        this.stopEvent(e);\n        this.selectNext();\n        break;\n      default:\n        break;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"project-overview\">\n        {_.map(this.props.groups, ({ name, items }, index) => (\n          <ProjectOverviewGroup key={name || `_${index}`} heading={name} items={items} />\n        ))}\n        <p className=\"small text-center hidden-xs\">\n          <kbd>&uarr;</kbd> and <kbd>&darr;</kbd> selects items, and{' '}\n          <kbd>{KEYBOARD_SHORTCUTS.focusFilterInput}</kbd> filters items.\n        </p>\n      </div>\n    );\n  }\n}\nexport const ProjectOverview = connect(\n  projectOverviewStateToProps,\n  projectOverviewDispatchToProps,\n)(ProjectOverview_);\n\ntype ControllerLinkProps = {\n  controller: PodControllerOverviewItem;\n};\n\ntype ComponentLabelProps = {\n  text: string;\n};\n\ntype MetricsTooltipProps = {\n  metricLabel: string;\n  byPod: {\n    formattedValue: string;\n    name: string;\n    value: number;\n  }[];\n};\n\ntype MetricsProps = {\n  metrics: any;\n  item: OverviewItem;\n};\n\ntype StatusProps = {\n  item: OverviewItem;\n};\n\ntype AlertsProps = {\n  item: OverviewItem;\n};\n\ntype ProjectOverviewListItemPropsFromState = {\n  metrics: OverviewMetrics;\n  selectedUID: string;\n};\n\ntype ProjectOverviewListItemPropsFromDispatch = {\n  selectItem: (uid: string) => void;\n  dismissDetails: () => void;\n};\n\ntype ProjectOverviewListItemOwnProps = {\n  item: OverviewItem;\n};\n\ntype ProjectOverviewListItemProps = ProjectOverviewListItemOwnProps &\n  ProjectOverviewListItemPropsFromDispatch &\n  ProjectOverviewListItemPropsFromState;\n\ntype ProjectOverviewListProps = {\n  items: OverviewItem[];\n};\n\ntype ProjectOverviewGroupProps = {\n  heading: string;\n  items: OverviewItem[];\n};\n\ntype ProjectOverviewProps = {\n  groups: OverviewGroup[];\n  selectedUID: string;\n  selectItemUID: (uid: string) => void;\n  dismissDetails: () => void;\n};\n","import * as React from 'react';\n\nimport { connectToModel } from '../../kinds';\nimport { referenceForModel } from '../../module/k8s';\nimport OperatorBackedOwnerReferences, {\n  AsyncComponent,\n  Kebab,\n  ResourceOverviewHeading,\n  ResourceSummary,\n} from '../utils';\n\nimport { BuildOverview } from './build-overview';\nimport { NetworkingOverview } from './networking-overview';\nimport { PodsOverview } from './pods-overview';\nimport { resourceOverviewPages } from './resource-overview-pages';\nimport { OverviewItem, usePluginsOverviewTabSection } from '@console/shared';\n\nconst { common } = Kebab.factory;\n\nexport const OverviewDetailsResourcesTab: React.SFC<OverviewDetailsResourcesTabProps> = ({\n  item,\n}) => {\n  const { buildConfigs, routes, services, pods, obj } = item;\n  const pluginComponents = usePluginsOverviewTabSection(item);\n  return (\n    <div className=\"overview__sidebar-pane-body\">\n      <OperatorBackedOwnerReferences item={item} />\n      <PodsOverview pods={pods} obj={obj} />\n      <BuildOverview buildConfigs={buildConfigs} />\n      {pluginComponents.map(({ Component, key }) => (\n        <Component key={key} item={item} />\n      ))}\n      <NetworkingOverview services={services} routes={routes} />\n    </div>\n  );\n};\n\nexport const DefaultOverviewPage = connectToModel(\n  ({ kindObj: kindObject, item, customActions }) => (\n    <div className=\"overview__sidebar-pane resource-overview\">\n      <ResourceOverviewHeading\n        actions={[\n          ...(customActions ? customActions : []),\n          ...Kebab.getExtensionsActionsForKind(kindObject),\n          ...common,\n        ]}\n        kindObj={kindObject}\n        resource={item.obj}\n      />\n      <div className=\"overview__sidebar-pane-body resource-overview__body\">\n        <div className=\"resource-overview__summary\">\n          <ResourceSummary resource={item.obj} />\n        </div>\n      </div>\n    </div>\n  ),\n);\n\nexport const ResourceOverviewPage = connectToModel(({ kindObj, item, customActions }) => {\n  const ref = referenceForModel(kindObj);\n  const loader = resourceOverviewPages.get(ref, () => Promise.resolve(DefaultOverviewPage));\n  return (\n    <AsyncComponent loader={loader} kindObj={kindObj} item={item} customActions={customActions} />\n  );\n});\n\nexport type OverviewDetailsResourcesTabProps = {\n  item: OverviewItem;\n};\n","import { Map as ImmutableMap } from 'immutable';\n\nimport { GroupVersionKind, referenceForModel } from '../../module/k8s';\nimport {\n  DaemonSetModel,\n  DeploymentModel,\n  DeploymentConfigModel,\n  StatefulSetModel,\n  PodModel,\n} from '../../models';\n\nexport const resourceOverviewPages = ImmutableMap<\n  GroupVersionKind | string,\n  () => Promise<React.ComponentType<any>>\n>()\n  .set(referenceForModel(DaemonSetModel), () =>\n    import('./daemon-set-overview' /* webpackChunkName: \"daemon-set\"*/).then(\n      (m) => m.DaemonSetOverview,\n    ),\n  )\n  .set(referenceForModel(DeploymentModel), () =>\n    import('./deployment-overview' /* webpackChunkName: \"deployment\"*/).then(\n      (m) => m.DeploymentOverviewPage,\n    ),\n  )\n  .set(referenceForModel(DeploymentConfigModel), () =>\n    import('./deployment-config-overview' /* webpackChunkName: \"deployment-config\"*/).then(\n      (m) => m.DeploymentConfigOverviewPage,\n    ),\n  )\n  .set(referenceForModel(PodModel), () =>\n    import('./pod-overview' /* webpackChunkName: \"pod\"*/).then((m) => m.PodOverviewPage),\n  )\n  .set(referenceForModel(StatefulSetModel), () =>\n    import('./stateful-set-overview' /* webpackChunkName: \"stateful-set\"*/).then(\n      (m) => m.StatefulSetOverview,\n    ),\n  );\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\n\nimport {\n  ContainerDropdown,\n  getQueryArgument,\n  LOG_SOURCE_RESTARTING,\n  LOG_SOURCE_RUNNING,\n  LOG_SOURCE_TERMINATED,\n  LOG_SOURCE_WAITING,\n  ResourceLog,\n  setQueryArgument,\n} from './utils';\n\nconst containersToStatuses = ({ status }, containers) => {\n  return _.reduce(\n    containers,\n    (accumulator, { name }, order) => {\n      const containerStatus =\n        _.find(status.containerStatuses, { name }) ||\n        _.find(status.initContainerStatuses, { name });\n      if (containerStatus) {\n        return {\n          ...accumulator,\n          [name]: { ...containerStatus, order },\n        };\n      }\n      return accumulator;\n    },\n    {},\n  );\n};\n\nconst containerToLogSourceStatus = (container) => {\n  if (!container) {\n    return LOG_SOURCE_WAITING;\n  }\n\n  const { state, lastState } = container;\n\n  if (state.waiting && !_.isEmpty(lastState)) {\n    return LOG_SOURCE_RESTARTING;\n  }\n\n  if (state.waiting) {\n    return LOG_SOURCE_WAITING;\n  }\n\n  if (state.terminated) {\n    return LOG_SOURCE_TERMINATED;\n  }\n\n  return LOG_SOURCE_RUNNING;\n};\n\nexport class PodLogs extends React.Component {\n  constructor(props) {\n    super(props);\n    this._selectContainer = this._selectContainer.bind(this);\n    this.state = {\n      containers: {},\n      currentKey: getQueryArgument('container') || '',\n      initContainers: {},\n    };\n  }\n\n  static getDerivedStateFromProps({ obj: build }, { currentKey }) {\n    const newState = {};\n    const containers = _.get(build, 'spec.containers', []);\n    const initContainers = _.get(build, 'spec.initContainers', []);\n    newState.containers = containersToStatuses(build, containers);\n    newState.initContainers = containersToStatuses(build, initContainers);\n    if (!currentKey) {\n      const firstContainer = _.find(newState.containers, { order: 0 });\n      newState.currentKey = firstContainer ? firstContainer.name : '';\n    }\n    return newState;\n  }\n\n  _selectContainer(name) {\n    this.setState({ currentKey: name }, () => {\n      setQueryArgument('container', this.state.currentKey);\n    });\n  }\n\n  render() {\n    const { containers, currentKey, initContainers } = this.state;\n    const currentContainer = _.get(containers, currentKey) || _.get(initContainers, currentKey);\n    const currentContainerStatus = containerToLogSourceStatus(currentContainer);\n    const containerDropdown = (\n      <ContainerDropdown\n        currentKey={currentKey}\n        containers={containers}\n        initContainers={initContainers}\n        onChange={this._selectContainer}\n      />\n    );\n\n    return (\n      <div className=\"co-m-pane__body\">\n        <ResourceLog\n          containerName={currentContainer ? currentContainer.name : ''}\n          dropdown={containerDropdown}\n          resource={this.props.obj}\n          resourceStatus={currentContainerStatus}\n        />\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash-es';\nimport { Status } from '@console/shared';\nimport { ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport * as UIActions from '../actions/ui';\nimport { coFetchJSON } from '../co-fetch';\nimport { ContainerSpec, K8sResourceKindReference, PodKind } from '../module/k8s';\nimport { getRestartPolicyLabel, podPhase, podPhaseFilterReducer, podReadiness, podRestarts } from '../module/k8s/pods';\nimport { getContainerState, getContainerStatus } from '../module/k8s/container';\nimport { ResourceEventStream } from './events';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunctionArgs } from './factory';\nimport { AsyncComponent, DetailsItem, Kebab, NodeLink, OwnerReferences, ResourceIcon, ResourceKebab, ResourceLink, ResourceSummary, ScrollToTopOnMount, SectionHeading, Timestamp, formatBytesAsMiB, formatCores, humanizeBinaryBytes, humanizeDecimalBytesPerSec, humanizeCpuCores, navFactory, pluralize, units } from './utils';\nimport { PodLogs } from './pod-logs';\nimport { Area, PROMETHEUS_BASE_PATH, PROMETHEUS_TENANCY_BASE_PATH, requirePrometheus } from './graphs';\nimport { VolumesTable } from './volumes-table';\nimport { PodModel } from '../models';\nimport { Conditions } from './conditions';\nimport { ResourceLabel } from '../models/hypercloud/resource-plural';\n\n// Only request metrics if the device's screen width is larger than the\n// breakpoint where metrics are visible.\nconst showMetrics = PROMETHEUS_BASE_PATH && PROMETHEUS_TENANCY_BASE_PATH && window.screen.width >= 1200;\n\nconst fetchPodMetrics = (namespace: string): Promise<UIActions.PodMetrics> => {\n  const metrics = [\n    {\n      key: 'memory',\n      query: namespace ? `sum(container_memory_working_set_bytes{namespace='${namespace}',container=''}) BY (pod, namespace)` : \"sum(container_memory_working_set_bytes{container=''}) BY (pod, namespace)\",\n    },\n    {\n      key: 'cpu',\n      query: namespace ? `pod:container_cpu_usage:sum{namespace='${namespace}'}` : 'pod:container_cpu_usage:sum',\n    },\n  ];\n  const promises = metrics.map(\n    ({ key, query }): Promise<UIActions.PodMetrics> => {\n      const url = namespace ? `${PROMETHEUS_TENANCY_BASE_PATH}/api/v1/query?namespace=${namespace}&query=${query}` : `${PROMETHEUS_BASE_PATH}/api/v1/query?query=${query}`;\n      return coFetchJSON(url).then(({ data: { result } }) => {\n        return result.reduce((acc, data) => {\n          const value = Number(data.value[1]);\n          return _.set(acc, [key, data.metric.namespace, data.metric.pod], value);\n        }, {});\n      });\n    },\n  );\n  return Promise.all(promises).then((data: any[]) => _.assign({}, ...data));\n};\n\nexport const menuActions = [...Kebab.getExtensionsActionsForKind(PodModel), ...Kebab.factory.common];\n\nconst tableColumnClasses = [\n  '',\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg', 'pf-u-w-10-on-lg', 'pf-u-w-8-on-xl'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-2xl', 'pf-u-w-8-on-2xl'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  classNames('pf-m-hidden', { 'pf-m-visible-on-xl pf-u-w-10-on-2xl': showMetrics }),\n  classNames('pf-m-hidden', { 'pf-m-visible-on-xl pf-u-w-10-on-2xl': showMetrics }),\n  classNames('pf-m-hidden', 'pf-m-visible-on-2xl pf-u-w-10-on-2xl'),\n  Kebab.columnClass,\n];\n\nconst kind = 'Pod';\n\nconst podRowStateToProps = ({ UI }) => ({\n  metrics: UI.getIn(['metrics', 'pod']),\n});\n\nconst PodTableRow = connect<PodTableRowPropsFromState, null, PodTableRowProps>(podRowStateToProps)(({ obj: pod, index, rowKey, style, metrics, showNodes }: PodTableRowProps & PodTableRowPropsFromState) => {\n  const { name, namespace, creationTimestamp } = pod.metadata;\n  const { readyCount, totalContainers } = podReadiness(pod);\n  const phase = podPhase(pod);\n  const restarts = podRestarts(pod);\n  const bytes: number = _.get(metrics, ['memory', namespace, name]);\n  const cores: number = _.get(metrics, ['cpu', namespace, name]);\n  return (\n    <TableRow id={pod.metadata.uid} index={index} trKey={rowKey} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={name} namespace={namespace} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Status status={phase} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        {readyCount}/{totalContainers}\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>{restarts}</TableData>\n      <TableData className={tableColumnClasses[5]}>{showNodes ? <ResourceLink kind=\"Node\" name={pod.spec.nodeName} namespace={namespace} /> : <OwnerReferences resource={pod} />}</TableData>\n      <TableData className={tableColumnClasses[6]}>{bytes ? `${formatBytesAsMiB(bytes)} MiB` : '-'}</TableData>\n      <TableData className={tableColumnClasses[7]}>{cores ? `${formatCores(cores)} cores` : '-'}</TableData>\n      <TableData className={tableColumnClasses[8]}>\n        <Timestamp timestamp={creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[9]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={pod} isDisabled={phase === 'Terminating'} />\n      </TableData>\n    </TableRow>\n  );\n});\nPodTableRow.displayName = 'PodTableRow';\n\nconst getHeader = showNodes => {\n  return (t?: TFunction) => {\n    return [\n      {\n        title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n        sortField: 'metadata.namespace',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n      },\n      {\n        title: t('COMMON:MSG_MAIN_TABLEHEADER_3'),\n        sortFunc: 'podPhase',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: t('COMMON:MSG_MAIN_TABLEHEADER_9'),\n        sortFunc: 'podReadiness',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[3] },\n      },\n      {\n        title: t('COMMON:MSG_MAIN_TABLEHEADER_10'),\n        sortFunc: 'podRestarts',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[4] },\n      },\n      {\n        title: showNodes ? t('COMMON:MSG_MAIN_TABLEHEADER_63') : t('COMMON:MSG_MAIN_TABLEHEADER_11'),\n        sortField: showNodes ? 'spec.nodeName' : 'metadata.ownerReferences[0].name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[5] },\n      },\n      {\n        title: t('COMMON:MSG_MAIN_TABLEHEADER_65'),\n        sortFunc: 'podMemory',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[6] },\n      },\n      {\n        title: t('COMMON:MSG_MAIN_TABLEHEADER_64'),\n        sortFunc: 'podCPU',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[7] },\n      },\n      {\n        title: t('COMMON:MSG_MAIN_TABLEHEADER_12'),\n        sortField: 'metadata.creationTimestamp',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[8] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[9] },\n      },\n    ];\n  };\n};\n\nexport const ContainerLink: React.FC<ContainerLinkProps> = ({ pod, name }) => (\n  <span className=\"co-resource-item co-resource-item--inline\">\n    <ResourceIcon kind=\"Container\" />\n    <Link to={`/k8s/ns/${pod.metadata.namespace}/pods/${pod.metadata.name}/containers/${name}`}>{name}</Link>\n  </span>\n);\nContainerLink.displayName = 'ContainerLink';\n\nexport const ContainerRow: React.FC<ContainerRowProps> = ({ pod, container }) => {\n  const cstatus = getContainerStatus(pod, container.name);\n  const cstate = getContainerState(cstatus);\n  const startedAt = _.get(cstate, 'startedAt');\n  const finishedAt = _.get(cstate, 'finishedAt');\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-lg-2 col-md-3 col-sm-4 col-xs-5\">\n        <ContainerLink pod={pod} name={container.name} />\n      </div>\n      <div className=\"col-lg-2 col-md-3 col-sm-5 col-xs-7 co-truncate co-nowrap co-select-to-copy\">{container.image || '-'}</div>\n      <div className=\"col-lg-2 col-md-2 col-sm-3 hidden-xs\">\n        <Status status={cstate.label} />\n      </div>\n      <div className=\"col-lg-1 col-md-2 hidden-sm hidden-xs\">{_.get(cstatus, 'restartCount', '0')}</div>\n      <div className=\"col-lg-2 col-md-2 hidden-sm hidden-xs\">\n        <Timestamp timestamp={startedAt} />\n      </div>\n      <div className=\"col-lg-2 hidden-md hidden-sm hidden-xs\">\n        <Timestamp timestamp={finishedAt} />\n      </div>\n      <div className=\"col-lg-1 hidden-md hidden-sm hidden-xs\">{_.get(cstate, 'exitCode', '-')}</div>\n    </div>\n  );\n};\n\nexport const PodContainerTable: React.FC<PodContainerTableProps> = ({ heading, containers, pod }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <SectionHeading text={heading} />\n      <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n        <div className=\"row co-m-table-grid__head\">\n          <div className=\"col-lg-2 col-md-3 col-sm-4 col-xs-5\">{t('COMMON:MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_2')}</div>\n          <div className=\"col-lg-2 col-md-3 col-sm-5 col-xs-7\">{t('COMMON:MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_3')}</div>\n          <div className=\"col-lg-2 col-md-2 col-sm-3 hidden-xs\">{t('COMMON:MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_4')}</div>\n          <div className=\"col-lg-1 col-md-2 hidden-sm hidden-xs\">{t('COMMON:MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_5')}</div>\n          <div className=\"col-lg-2 col-md-2 hidden-sm hidden-xs\">{t('COMMON:MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_6')}</div>\n          <div className=\"col-lg-2 hidden-md hidden-sm hidden-xs\">{t('COMMON:MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_7')}</div>\n          <div className=\"col-lg-1 hidden-md hidden-sm hidden-xs\">{t('COMMON:MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_8')}</div>\n        </div>\n        <div className=\"co-m-table-grid__body\">\n          {containers.map((c: any, i: number) => (\n            <ContainerRow key={i} pod={pod} container={c} />\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst PodGraphs = requirePrometheus(({ pod }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-md-12 col-lg-4\">\n          <Area title={t('SINGLE:MSG_NAMESPACES_NAMESPACEDETAILS_TABDETAILS_RESOURCEUSAGE_3')} humanize={humanizeBinaryBytes} byteDataType={ByteDataTypes.BinaryBytes} namespace={pod.metadata.namespace} query={`sum(container_memory_working_set_bytes{pod='${pod.metadata.name}',namespace='${pod.metadata.namespace}',container='',}) BY (pod, namespace)`} />\n        </div>\n        <div className=\"col-md-12 col-lg-4\">\n          <Area title={t('SINGLE:MSG_NAMESPACES_NAMESPACEDETAILS_TABDETAILS_RESOURCEUSAGE_2')} humanize={humanizeCpuCores} namespace={pod.metadata.namespace} query={`pod:container_cpu_usage:sum{pod='${pod.metadata.name}',namespace='${pod.metadata.namespace}'}`} />\n        </div>\n        <div className=\"col-md-12 col-lg-4\">\n          <Area title={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_81')} humanize={humanizeBinaryBytes} byteDataType={ByteDataTypes.BinaryBytes} namespace={pod.metadata.namespace} query={`pod:container_fs_usage_bytes:sum{pod='${pod.metadata.name}',namespace='${pod.metadata.namespace}'}`} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-md-12 col-lg-4\">\n          <Area title={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_79')} humanize={humanizeDecimalBytesPerSec} namespace={pod.metadata.namespace} query={`sum(irate(container_network_receive_bytes_total{pod='${pod.metadata.name}', namespace='${pod.metadata.namespace}'}[5m])) by (pod, namespace)`} />\n        </div>\n        <div className=\"col-md-12 col-lg-4\">\n          <Area title={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_80')} humanize={humanizeDecimalBytesPerSec} namespace={pod.metadata.namespace} query={`sum(irate(container_network_transmit_bytes_total{pod='${pod.metadata.name}', namespace='${pod.metadata.namespace}'}[5m])) by (pod, namespace)`} />\n        </div>\n      </div>\n\n      <br />\n    </>\n  );\n});\n\nexport const PodStatus: React.FC<PodStatusProps> = ({ pod }) => <Status status={podPhase(pod)} />;\n\nexport const PodDetailsList: React.FC<PodDetailsListProps> = ({ pod }) => {\n  const { t } = useTranslation();\n  return (\n    <dl className=\"co-m-pane__details\">\n      <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_20')}</dt>\n      <dd>\n        <PodStatus pod={pod} />\n      </dd>\n      <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_21')} obj={pod} path=\"spec.restartPolicy\">\n        {getRestartPolicyLabel(pod)}\n      </DetailsItem>\n      <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_22')} obj={pod} path=\"spec.activeDeadlineSeconds\">\n        {pod.spec.activeDeadlineSeconds ? pluralize(pod.spec.activeDeadlineSeconds, 'second') : 'Not Configured'}\n      </DetailsItem>\n      <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_23')} obj={pod} path=\"status.podIP\" />\n      <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_24')} obj={pod} path=\"spec.nodeName\" hideEmpty>\n        <NodeLink name={pod.spec.nodeName} />\n      </DetailsItem>\n    </dl>\n  );\n};\n\nexport const PodResourceSummary: React.FC<PodResourceSummaryProps> = ({ pod }) => <ResourceSummary resource={pod} showNodeSelector nodeSelector=\"spec.nodeSelector\" showTolerations />;\n\nconst Details: React.FC<PodDetailsProps> = ({ obj: pod }) => {\n  const { t } = useTranslation();\n  const limits = {\n    cpu: null,\n    memory: null,\n  };\n  limits.cpu = _.reduce(\n    pod.spec.containers,\n    (sum, container) => {\n      const value = units.dehumanize(_.get(container, 'resources.limits.cpu', 0), 'numeric').value;\n      return sum + value;\n    },\n    0,\n  );\n  limits.memory = _.reduce(\n    pod.spec.containers,\n    (sum, container) => {\n      const value = units.dehumanize(_.get(container, 'resources.limits.memory', 0), 'binaryBytesWithoutB').value;\n      return sum + value;\n    },\n    0,\n  );\n\n  return (\n    <>\n      <ScrollToTopOnMount />\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: ResourceLabel(pod, t) })} />\n        <PodGraphs pod={pod} />\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <PodResourceSummary pod={pod} />\n          </div>\n          <div className=\"col-sm-6\">\n            <PodDetailsList pod={pod} />\n          </div>\n        </div>\n      </div>\n      {pod.spec.initContainers && (\n        <div className=\"co-m-pane__body\">\n          <PodContainerTable key=\"initContainerTable\" heading=\"Init Containers\" containers={pod.spec.initContainers} pod={pod} />\n        </div>\n      )}\n      <div className=\"co-m-pane__body\">\n        <PodContainerTable key=\"containerTable\" heading={t('COMMON:MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_1')} containers={pod.spec.containers} pod={pod} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <VolumesTable resource={pod} heading={t('COMMON:MSG_DETAILS_TABDETAILS_VOLUMES_TABLEHEADER_1')} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_CONDITIONS_1')} />\n        <Conditions conditions={pod.status.conditions} />\n      </div>\n    </>\n  );\n};\n\nconst EnvironmentPage = (props: any) => <AsyncComponent loader={() => import('./environment.jsx').then(c => c.EnvironmentPage)} {...props} />;\n\nconst envPath = ['spec', 'containers'];\nconst PodEnvironmentComponent = props => <EnvironmentPage obj={props.obj} rawEnvData={props.obj.spec} envPath={envPath} readOnly={true} />;\n\nexport const PodExecLoader: React.FC<PodExecLoaderProps> = ({ obj, message }) => (\n  <div className=\"co-m-pane__body\">\n    <div className=\"row\">\n      <div className=\"col-xs-12\">\n        <div className=\"panel-body\">\n          <AsyncComponent loader={() => import('./pod-exec').then(c => c.PodExec)} obj={obj} message={message} />\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport const PodsDetailsPage: React.FC<PodDetailsPageProps> = props => {\n  return (\n    <DetailsPage\n      {...props}\n      getResourceStatus={podPhase}\n      menuActions={menuActions}\n      pages={[\n        navFactory.details(Details),\n        navFactory.editYaml(),\n        navFactory.envEditor(PodEnvironmentComponent),\n        navFactory.logs(PodLogs),\n        navFactory.events(ResourceEventStream),\n        {\n          href: 'terminal',\n          name: 'Terminal',\n          component: PodExecLoader,\n        },\n      ]}\n    />\n  );\n};\nPodsDetailsPage.displayName = 'PodsDetailsPage';\n\nconst getRow = showNodes => {\n  return (rowArgs: RowFunctionArgs<PodKind>) => <PodTableRow obj={rowArgs.obj} index={rowArgs.index} rowKey={rowArgs.key} style={rowArgs.style} showNodes={showNodes} />;\n};\n\nexport const PodList: React.FC<PodListProps> = props => {\n  const showNodes = props?.customData?.showNodes;\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Pods\" Header={getHeader(showNodes).bind(null, t)} Row={getRow(showNodes)} virtualize />;\n};\nPodList.displayName = 'PodList';\n\nconst dispatchToProps = (dispatch): PodPagePropsFromDispatch => ({\n  setPodMetrics: metrics => dispatch(UIActions.setPodMetrics(metrics)),\n});\n\nexport const PodsPage = connect<{}, PodPagePropsFromDispatch, PodPageProps>(\n  null,\n  dispatchToProps,\n)((props: PodPageProps & PodPagePropsFromDispatch) => {\n  const { t } = useTranslation();\n  const { canCreate = true, namespace, setPodMetrics, customData, ...listProps } = props;\n  /* eslint-disable react-hooks/exhaustive-deps */\n  React.useEffect(() => {\n    if (showMetrics) {\n      const updateMetrics = () =>\n        fetchPodMetrics(namespace)\n          .then(setPodMetrics)\n          .catch(e => {\n            // Just log the error here. Showing a warning alert could be more annoying\n            // than helpful. It should be obvious there are no metrics in the list, and\n            // if monitoring is broken, it'll be really apparent since none of the\n            // graphs and dashboards will load in the UI.\n            // eslint-disable-next-line no-console\n            console.error('Unable to fetch pod metrics', e);\n          });\n      updateMetrics();\n      const id = setInterval(updateMetrics, 30 * 1000);\n      return () => clearInterval(id);\n    }\n  }, [namespace]);\n  /* eslint-enable react-hooks/exhaustive-deps */\n  return (\n    <ListPage\n      {...listProps}\n      title={t('COMMON:MSG_LNB_MENU_23')}\n      createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: t('COMMON:MSG_LNB_MENU_23') })}\n      canCreate={canCreate}\n      kind=\"Pod\"\n      ListComponent={PodList}\n      rowFilters={[\n        {\n          filterGroupName: 'Status',\n          type: 'pod-status',\n          reducer: podPhaseFilterReducer,\n          items: [\n            { id: 'Running', title: t('COMMON:MSG_COMMON_STATUS_1') },\n            { id: 'Pending', title: t('COMMON:MSG_COMMON_STATUS_2') },\n            { id: 'Terminating', title: t('COMMON:MSG_COMMON_STATUS_3') },\n            { id: 'CrashLoopBackOff', title: t('COMMON:MSG_COMMON_STATUS_4') },\n            // Use title \"Completed\" to match what appears in the status column for the pod.\n            // The pod phase is \"Succeeded,\" but the container state is \"Completed.\"\n            { id: 'Succeeded', title: t('COMMON:MSG_COMMON_STATUS_5') },\n            { id: 'Failed', title: t('COMMON:MSG_COMMON_STATUS_12') },\n            { id: 'Unknown', title: t('COMMON:MSG_COMMON_STATUS_6') },\n          ],\n        },\n      ]}\n      namespace={namespace}\n      customData={customData}\n    />\n  );\n});\n\ntype ContainerLinkProps = {\n  pod: PodKind;\n  name: string;\n};\n\ntype ContainerRowProps = {\n  pod: PodKind;\n  container: ContainerSpec;\n};\n\ntype PodContainerTableProps = {\n  heading: string;\n  containers: ContainerSpec[];\n  pod: PodKind;\n};\n\ntype PodStatusProps = {\n  pod: PodKind;\n};\n\ntype PodResourceSummaryProps = {\n  pod: PodKind;\n};\n\ntype PodDetailsListProps = {\n  pod: PodKind;\n};\n\ntype PodExecLoaderProps = {\n  obj: PodKind;\n  message?: React.ReactElement;\n};\n\ntype PodDetailsProps = {\n  obj: PodKind;\n};\n\ntype PodTableRowProps = {\n  obj: PodKind;\n  index: number;\n  rowKey: string;\n  style: object;\n  showNodes?: boolean;\n};\n\ntype PodTableRowPropsFromState = {\n  metrics: UIActions.PodMetrics;\n};\n\ntype PodListProps = {\n  customData?: any;\n};\n\ntype PodPageProps = {\n  canCreate?: boolean;\n  fieldSelector?: any;\n  namespace?: string;\n  selector?: any;\n  showTitle?: boolean;\n  customData?: any;\n};\n\ntype PodPagePropsFromDispatch = {\n  setPodMetrics: (metrics) => void;\n};\n\ntype PodDetailsPageProps = {\n  kind: K8sResourceKindReference;\n  match: any;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\n\nexport const RadioInput: React.SFC<RadioInputProps> = props => {\n  const inputProps: React.InputHTMLAttributes<any> = _.omit(props, ['title', 'subTitle', 'desc', 'children', 'inline']);\n  const { inline, disabled, title, subTitle, desc, children } = props;\n  const inputElement = (\n    <>\n      <label className={classNames({ 'radio-inline': inline, 'co-disabled': disabled })}>\n        <input type=\"radio\" {...inputProps} />\n        {title} {subTitle && <span className=\"co-no-bold\">{subTitle}</span>}\n      </label>\n      {desc && <p className=\"co-m-radio-desc text-muted\">{desc}</p>}\n      {children}\n    </>\n  );\n\n  return inline ? inputElement : <div className=\"radio\">{inputElement}</div>;\n};\n\nexport const RadioGroup: React.SFC<RadioGroupProps> = ({ currentValue, inline = false, items, label, onChange, id = JSON.stringify(items) }) => {\n  const radios = items.map(({ desc, title, subTitle, value, disabled }) => <RadioInput key={value} checked={value === currentValue} desc={desc} onChange={onChange} title={title} subTitle={subTitle} value={value} disabled={disabled} inline={inline} />);\n  return (\n    <div className={classNames('co-radio-group', { 'co-radio-group--inline': inline })}>\n      {label ? (\n        <>\n          <label className=\"form-label co-radio-group__label\" htmlFor={id}>\n            {label}\n          </label>\n          <div className=\"co-radio-group__controls\" id={id}>\n            {radios}\n          </div>\n        </>\n      ) : (\n        radios\n      )}\n    </div>\n  );\n};\n\nexport type RadioInputProps = {\n  checked: boolean;\n  desc?: string | JSX.Element;\n  onChange: (v: any) => void;\n  subTitle?: string | JSX.Element;\n  value: any;\n  disabled?: boolean;\n  inline?: boolean;\n} & React.InputHTMLAttributes<any>;\n\nexport type RadioGroupProps = {\n  currentValue: any;\n  id?: string;\n  inline?: boolean;\n  items: ({\n    desc?: string | JSX.Element;\n    title: string | JSX.Element;\n    subTitle?: string | JSX.Element;\n    value: any;\n    disabled?: boolean;\n  } & React.InputHTMLAttributes<any>)[];\n  label?: string;\n  onChange: React.InputHTMLAttributes<any>['onChange'];\n};\n\nRadioInput.displayName = 'RadioInput';\nRadioGroup.displayName = 'RadioGroup';\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { connect } from 'react-redux';\nimport { Map as ImmutableMap, OrderedMap, Set as ImmutableSet } from 'immutable';\nimport * as classNames from 'classnames';\nimport * as fuzzy from 'fuzzysearch';\n\nimport { Dropdown, ResourceIcon } from './utils';\nimport { apiVersionForReference, K8sKind, K8sResourceKindReference, modelFor, referenceForModel } from '../module/k8s';\nimport { Badge, Checkbox } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\n// Blacklist known duplicate resources.\nconst blacklistGroups = ImmutableSet([\n  // Prefer rbac.authorization.k8s.io/v1, which has the same resources.\n  'authorization.openshift.io',\n]);\n\nconst blacklistResources = ImmutableSet([\n  // Prefer core/v1\n  'events.k8s.io/v1beta1.Event',\n]);\n\nconst DropdownItem: React.SFC<DropdownItemProps> = ({ model, showGroup, checked }) => (\n  <>\n    <span className={'co-resource-item'}>\n      <Checkbox tabIndex={-1} id={`${model.apiGroup}:${model.apiVersion}:${model.kind}`} checked={checked} />\n      <span className=\"co-resource-icon--fixed-width\">\n        <ResourceIcon kind={referenceForModel(model)} />\n      </span>\n      <span className=\"co-resource-item__resource-name\">\n        <span>\n          {model.kind}\n          {model.badge && <span className=\"co-resource-item__tech-dev-preview\">{model.badge}</span>}\n        </span>\n        {showGroup && (\n          <span className=\"co-resource-item__resource-api text-muted co-truncate show co-nowrap small\">\n            {model.apiGroup || 'core'}/{model.apiVersion}\n          </span>\n        )}\n      </span>\n    </span>\n  </>\n);\n\nconst DropdownResourceItem: React.SFC<DropdownResourceItemProps> = ({ name, checked, kind }) => (\n  <>\n    <span className={'co-resource-item'}>\n      <Checkbox tabIndex={-1} id={name} checked={checked} />\n      <span className=\"co-resource-icon--fixed-width\">\n        <ResourceIcon kind={kind} />\n      </span>\n      <span className=\"co-resource-item__resource-name\">\n        <span>{name}</span>\n      </span>\n    </span>\n  </>\n);\n\nconst ResourceListDropdown_: React.SFC<ResourceListDropdownProps> = props => {\n  const { selected, onChange, allModels, showAll, className, preferredVersions, type } = props;\n  const { t } = useTranslation();\n\n  const resources = allModels\n    .filter(({ apiGroup, apiVersion, kind, verbs }) => {\n      // Remove blacklisted items.\n      if (blacklistGroups.has(apiGroup) || blacklistResources.has(`${apiGroup}/${apiVersion}.${kind}`)) {\n        return false;\n      }\n\n      // Only show resources that can be listed.\n      if (!_.isEmpty(verbs) && !_.includes(verbs, 'list')) {\n        return false;\n      }\n\n      // Only show preferred version for resources in the same API group.\n      const preferred = (m: K8sKind) => preferredVersions.some(v => v.groupVersion === apiVersionForReference(referenceForModel(m)));\n      const sameGroupKind = (m: K8sKind) => m.kind === kind && m.apiGroup === apiGroup && m.apiVersion !== apiVersion;\n\n      return !allModels.find(m => sameGroupKind(m) && preferred(m));\n    })\n    .toOrderedMap()\n    .sortBy(({ kind, apiGroup }) => `${kind} ${apiGroup}`);\n\n  // Track duplicate names so we know when to show the group.\n  const kinds = resources.groupBy(m => m.kind);\n  const isDup = kind => kinds.get(kind).size > 1;\n\n  const isKindSelected = (kind: string) => {\n    return _.includes(selected, kind);\n  };\n  // Create dropdown items for each resource.\n  const items = resources.map(model => <DropdownItem key={referenceForModel(model)} model={model} showGroup={isDup(model.kind)} checked={isKindSelected(referenceForModel(model))} />) as OrderedMap<string, JSX.Element>;\n  // Add an \"All\" item to the top if `showAll`.\n  const allItems = (showAll\n    ? OrderedMap({\n        All: (\n          <>\n            <span className=\"co-resource-item\">\n              <Checkbox id=\"all-resources\" isChecked={isKindSelected('All')} />\n              <span className=\"co-resource-icon--fixed-width\">\n                <ResourceIcon kind=\"All\" />\n              </span>\n              <span className=\"co-resource-item__resource-name\">All Resources</span>\n            </span>\n          </>\n        ),\n      }).concat(items)\n    : items\n  ).toJS() as { [s: string]: JSX.Element };\n\n  const autocompleteFilter = (text, item) => {\n    const { model } = item.props;\n    if (!model) {\n      return false;\n    }\n\n    return fuzzy(_.toLower(text), _.toLower(model.kind));\n  };\n\n  const handleSelected = (value: string) => {\n    value === 'All' ? onChange('All') : onChange(referenceForModel(modelFor(value)));\n  };\n\n  return (\n    <Dropdown\n      menuClassName=\"dropdown-menu--text-wrap\"\n      className={classNames('co-type-selector', className)}\n      items={allItems}\n      title={\n        <div key=\"title-resource\">\n          {t('COMMON:MSG_COMMON_FILTER_1')} <Badge isRead>{selected.length === 1 && selected[0] === 'All' ? 'All' : selected.length}</Badge>\n        </div>\n      }\n      onChange={handleSelected}\n      autocompleteFilter={autocompleteFilter}\n      autocompletePlaceholder={t('COMMON:MSG_COMMON_FILTER_2')}\n      type={type}\n    />\n  );\n};\n\nconst resourceListDropdownStateToProps = ({ k8s }) => ({\n  allModels: k8s.getIn(['RESOURCES', 'models']),\n  preferredVersions: k8s.getIn(['RESOURCES', 'preferredVersions']),\n});\n\nexport const ResourceListDropdown = connect(resourceListDropdownStateToProps)(ResourceListDropdown_);\n\nexport const RegistryListDropdown_: React.SFC<RegistryListDropdownProps> = props => {\n  const { selected, onChange, /*setAllData, */ allData, showAll, className, type } = props;\n\n  const getName = map => {\n    return map.get('metadata').get('name');\n  };\n\n  const resources = [];\n  for (let item of Array.from(allData)) {\n    resources.push(getName(item[1]));\n  }\n\n  const isResourceSelected = (resource: string) => {\n    return _.includes(selected, resource);\n  };\n\n  const items = allData.map(resource => <DropdownResourceItem key={getName(resource)} name={getName(resource)} checked={isResourceSelected(getName(resource))} kind=\"Registry\" />) as OrderedMap<string, JSX.Element>;\n\n  const allItems = (showAll\n    ? OrderedMap({\n        All: (\n          <>\n            <span className=\"co-resource-item\">\n              <Checkbox id=\"all-resources\" isChecked={isResourceSelected('All')} />\n              <span className=\"co-resource-icon--fixed-width\">\n                <ResourceIcon kind=\"All\" />\n              </span>\n              <span className=\"co-resource-item__resource-name\">All Registries</span>\n            </span>\n          </>\n        ),\n      }).concat(items)\n    : items\n  ).toJS() as { [s: string]: JSX.Element };\n\n  const autocompleteFilter = (text, item) => {\n    const { model } = item.props;\n    if (!model) {\n      return false;\n    }\n\n    return fuzzy(_.toLower(text), _.toLower(model.kind));\n  };\n\n  const handleSelected = (value: string) => {\n    if (value === 'All') {\n      onChange('All');\n      // setAllData(resources);\n    } else {\n      onChange(value.split(')-')[1]);\n    }\n  };\n\n  return (\n    <Dropdown\n      menuClassName=\"dropdown-menu--text-wrap\"\n      className={classNames('co-type-selector', className)}\n      items={allItems}\n      title={\n        <div key=\"title-resource\">\n          Registries <Badge isRead>{selected.length === 1 && selected[0] === 'All' ? 'All' : selected.length}</Badge>\n        </div>\n      }\n      onChange={handleSelected}\n      autocompleteFilter={autocompleteFilter}\n      autocompletePlaceholder=\"Select Registry\"\n      type={type}\n    />\n  );\n};\n\nconst registryListDropdownStateToProps = ({ k8s, UI }) => {\n  let namespace = UI.getIn(['activeNamespace']);\n  let registryKey = 'tmax.io~v1~Registry';\n  if (namespace !== '#ALL_NS#') {\n    registryKey += `---{\"ns\":\"${namespace}\"}`;\n  }\n  return {\n    allData: k8s.getIn([registryKey, 'data']),\n  };\n};\n\nexport const RegistryListDropdown = connect(registryListDropdownStateToProps)(RegistryListDropdown_);\n\nexport type RegistryListDropdownProps = {\n  selected: K8sResourceKindReference[];\n  onChange: (value: string) => void;\n  setAllData: (allData: string[]) => void;\n  allData: any;\n  className?: string;\n  id?: string;\n  showAll?: boolean;\n  type?: string;\n};\n\nexport type ResourceListDropdownProps = {\n  selected: K8sResourceKindReference[];\n  onChange: (value: string) => void;\n  allModels: ImmutableMap<K8sResourceKindReference, K8sKind>;\n  preferredVersions: { groupVersion: string; version: string }[];\n  className?: string;\n  id?: string;\n  showAll?: boolean;\n  type?: string;\n};\n\ntype DropdownItemProps = {\n  model: K8sKind;\n  showGroup?: boolean;\n  checked?: boolean;\n};\n\ntype DropdownResourceItemProps = {\n  name: string;\n  checked?: boolean;\n  kind: string;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { match } from 'react-router-dom';\nimport { getBadgeFromType } from '@console/shared';\nimport { connectToPlural } from '../kinds';\nimport { ErrorPage404 } from './error';\nimport { withStartGuide } from './start-guide';\nimport { AsyncComponent, LoadingBox } from './utils';\nimport { DefaultPage, DefaultDetailsPage } from './default-resource';\nimport { resourceListPages, resourceDetailsPages } from './resource-pages';\nimport {\n  apiVersionForReference,\n  isGroupVersionKind,\n  K8sKind,\n  K8sResourceKindReference,\n  kindForReference,\n  referenceForModel,\n} from '../module/k8s';\n\n// Parameters can be in pros.params (in URL) or in props.route (attribute of Route tag)\nconst allParams = (props) => Object.assign({}, _.get(props, 'match.params'), props);\n\nexport const ResourceListPage = connectToPlural(\n  withStartGuide((props: ResourceListPageProps) => {\n    const { kindObj, kindsInFlight, modelRef, noProjectsAvailable, ns, plural } = allParams(props);\n\n    if (!kindObj) {\n      if (kindsInFlight) {\n        return <LoadingBox />;\n      }\n      const missingType = isGroupVersionKind(plural)\n        ? `\"${kindForReference(plural)}\" in \"${apiVersionForReference(plural)}\"`\n        : `\"${plural}\"`;\n      return (\n        <ErrorPage404\n          message={`The server doesn't have a resource type ${missingType}. Try refreshing the page if it was recently added.`}\n        />\n      );\n    }\n    const ref = referenceForModel(kindObj);\n    const componentLoader = resourceListPages.get(ref, () => Promise.resolve(DefaultPage));\n\n    return (\n      <div className=\"co-m-list\">\n        <Helmet>\n          <title>{kindObj.labelPlural}</title>\n        </Helmet>\n        <AsyncComponent\n          autoFocus={!noProjectsAvailable}\n          kind={modelRef}\n          loader={componentLoader}\n          match={props.match}\n          mock={noProjectsAvailable}\n          namespace={ns}\n          badge={getBadgeFromType(kindObj.badge)}\n        />\n      </div>\n    );\n  }),\n);\n\nexport const ResourceDetailsPage = connectToPlural((props: ResourceDetailsPageProps) => {\n  const { name, ns, kindObj, kindsInFlight } = allParams(props);\n\n  if (!name || !kindObj) {\n    if (kindsInFlight) {\n      return <LoadingBox />;\n    }\n    return <ErrorPage404 />;\n  }\n\n  const ref =\n    props.match.path.indexOf('customresourcedefinitions') === -1\n      ? referenceForModel(kindObj)\n      : null;\n  const componentLoader = resourceDetailsPages.get(ref, () => Promise.resolve(DefaultDetailsPage));\n\n  return (\n    <>\n      <Helmet>\n        <title>{`${name} · Details`}</title>\n      </Helmet>\n      <AsyncComponent\n        loader={componentLoader}\n        match={props.match}\n        namespace={ns}\n        kind={props.modelRef}\n        kindObj={kindObj}\n        name={decodeURIComponent(name)}\n        badge={getBadgeFromType(kindObj.badge)}\n      />\n    </>\n  );\n});\n\nexport type ResourceListPageProps = {\n  flags: any;\n  kindObj: K8sKind;\n  kindsInFlight: boolean;\n  match: match<any>;\n  modelRef: K8sResourceKindReference;\n};\n\nexport type ResourceDetailsPageProps = {\n  kindObj: K8sKind;\n  kindsInFlight: boolean;\n  match: match<any>;\n  modelRef: K8sResourceKindReference;\n};\n\nResourceListPage.displayName = 'ResourceListPage';\nResourceDetailsPage.displayName = 'ResourceDetailsPage';\n","import { Map as ImmutableMap } from 'immutable';\n\nimport { ReportReference, ReportGenerationQueryReference } from './chargeback';\nimport { referenceForModel, GroupVersionKind } from '../module/k8s';\nimport {\n  AlertmanagerModel,\n  BuildConfigModel,\n  BuildModel,\n  ClusterOperatorModel,\n  ClusterRoleModel,\n  ClusterServiceBrokerModel,\n  ClusterServiceClassModel,\n  ClusterServicePlanModel,\n  ClusterVersionModel,\n  ConfigMapModel,\n  ContainerModel,\n  CronJobModel,\n  ClusterResourceQuotaModel,\n  CustomResourceDefinitionModel,\n  DaemonSetModel,\n  DeploymentConfigModel,\n  DeploymentModel,\n  GroupModel,\n  HorizontalPodAutoscalerModel,\n  ImageStreamModel,\n  ImageStreamTagModel,\n  IngressModel,\n  JobModel,\n  LimitRangeModel,\n  MachineAutoscalerModel,\n  MachineConfigModel,\n  MachineConfigPoolModel,\n  MachineDeploymentModel,\n  MachineHealthCheckModel,\n  MachineModel,\n  MachineSetModel,\n  NamespaceModel,\n  NetworkPolicyModel,\n  NodeModel,\n  OAuthModel,\n  PersistentVolumeClaimModel,\n  PersistentVolumeModel,\n  PodModel,\n  ProjectModel,\n  PrometheusModel,\n  ReplicaSetModel,\n  ReplicationControllerModel,\n  ResourceQuotaModel,\n  RoleBindingModel,\n  RoleModel,\n  RouteModel,\n  SecretModel,\n  ServiceAccountModel,\n  ServiceBindingModel,\n  ServiceInstanceModel,\n  ServiceModel,\n  ServiceMonitorModel,\n  StatefulSetModel,\n  StorageClassModel,\n  TemplateInstanceModel,\n  UserModel,\n} from '../models';\n\nimport * as plugins from '../plugins';\nimport { hyperCloudDetailsPages, hyperCloudListPages } from './hypercloud/resource-pages';\n\nconst addResourcePage = (map: ImmutableMap<ResourceMapKey, ResourceMapValue>, page: plugins.ResourcePage) => {\n  const key = page.properties?.modelParser ? page.properties?.modelParser(page.properties.model) : referenceForModel(page.properties.model);\n  if (!map.has(key)) {\n    map.set(key, page.properties.loader);\n  }\n};\n\ntype ResourceMapKey = GroupVersionKind | string;\ntype ResourceMapValue = () => Promise<React.ComponentType<any>>;\n\nexport const baseDetailsPages = ImmutableMap<ResourceMapKey, ResourceMapValue>()\n  .set(referenceForModel(ClusterServiceClassModel), () => import('./cluster-service-class' /* webpackChunkName: \"cluster-service-class\" */).then(m => m.ClusterServiceClassDetailsPage))\n  .set(referenceForModel(ClusterServiceBrokerModel), () => import('./cluster-service-broker' /* webpackChunkName: \"cluster-service-broker\" */).then(m => m.ClusterServiceBrokerDetailsPage))\n  .set(referenceForModel(ClusterServicePlanModel), () => import('./cluster-service-plan' /* webpackChunkName: \"cluster-service-plan\" */).then(m => m.ClusterServicePlanDetailsPage))\n  .set(referenceForModel(ConfigMapModel), () => import('./configmap' /* webpackChunkName: \"configmap\" */).then(m => m.ConfigMapsDetailsPage))\n  .set(referenceForModel(ContainerModel), () => import('./container' /* webpackChunkName: \"container\" */).then(m => m.ContainersDetailsPage))\n  .set(referenceForModel(DaemonSetModel), () => import('./daemon-set' /* webpackChunkName: \"daemon-set\" */).then(m => m.DaemonSetsDetailsPage))\n  .set(referenceForModel(DeploymentConfigModel), () => import('./deployment-config' /* webpackChunkName: \"deployment-config\" */).then(m => m.DeploymentConfigsDetailsPage))\n  .set(referenceForModel(DeploymentModel), () => import('./deployment' /* webpackChunkName: \"deployment\" */).then(m => m.DeploymentsDetailsPage))\n  .set(referenceForModel(BuildConfigModel), () => import('./build-config' /* webpackChunkName: \"build-config\" */).then(m => m.BuildConfigsDetailsPage))\n  .set(referenceForModel(BuildModel), () => import('./build' /* webpackChunkName: \"build\" */).then(m => m.BuildsDetailsPage))\n  .set(referenceForModel(ImageStreamModel), () => import('./image-stream' /* webpackChunkName: \"image-stream\" */).then(m => m.ImageStreamsDetailsPage))\n  .set(referenceForModel(ImageStreamTagModel), () => import('./image-stream-tag' /* webpackChunkName: \"image-stream-tag\" */).then(m => m.ImageStreamTagsDetailsPage))\n  .set(referenceForModel(JobModel), () => import('./job' /* webpackChunkName: \"job\" */).then(m => m.JobsDetailsPage))\n  .set(referenceForModel(CronJobModel), () => import('./cron-job' /* webpackChunkName: \"cron-job\" */).then(m => m.CronJobsDetailsPage))\n  .set(referenceForModel(ProjectModel), () => import('./namespace' /* webpackChunkName: \"namespace\" */).then(m => m.ProjectsDetailsPage))\n  .set(referenceForModel(NamespaceModel), () => import('./namespace' /* webpackChunkName: \"namespace\" */).then(m => m.NamespacesDetailsPage))\n  .set(referenceForModel(NetworkPolicyModel), () => import('./network-policy' /* webpackChunkName: \"network-policy\" */).then(m => m.NetworkPoliciesDetailsPage))\n  .set(referenceForModel(NodeModel), () => import('@console/app/src/components/nodes/NodeDetailsPage' /* webpackChunkName: \"node-detail\" */).then(m => m.default))\n  .set(referenceForModel(MachineAutoscalerModel), () => import('./machine-autoscaler' /* webpackChunkName: \"machine-autoscaler\" */).then(m => m.MachineAutoscalerDetailsPage))\n  .set(referenceForModel(MachineConfigModel), () => import('./machine-config' /* webpackChunkName: \"machine-config\" */).then(m => m.MachineConfigDetailsPage))\n  .set(referenceForModel(MachineConfigPoolModel), () => import('./machine-config-pool' /* webpackChunkName: \"machine-config-pool\" */).then(m => m.MachineConfigPoolDetailsPage))\n  .set(referenceForModel(MachineModel), () => import('./machine' /* webpackChunkName: \"machine\" */).then(m => m.MachineDetailsPage))\n  .set(referenceForModel(MachineSetModel), () => import('./machine-set' /* webpackChunkName: \"machine-set\" */).then(m => m.MachineSetDetailsPage))\n  .set(referenceForModel(MachineDeploymentModel), () => import('./machine-deployment' /* webpackChunkName: \"machine-deployment\" */).then(m => m.MachineDeploymentDetailsPage))\n  .set(referenceForModel(MachineHealthCheckModel), () => import('./machine-health-check' /* webpackChunkName: \"machine-health-check\" */).then(m => m.MachineHealthCheckDetailsPage))\n  .set(referenceForModel(PodModel), () => import('./pod' /* webpackChunkName: \"pod\" */).then(m => m.PodsDetailsPage))\n  .set(referenceForModel(ReplicaSetModel), () => import('./replicaset' /* webpackChunkName: \"replicaset\" */).then(m => m.ReplicaSetsDetailsPage)) //TODO should be replica-set\n  .set(referenceForModel(ReplicationControllerModel), () => import('./replication-controller' /* webpackChunkName: \"replication-controller\" */).then(m => m.ReplicationControllersDetailsPage))\n  .set(referenceForModel(SecretModel), () => import('./secret' /* webpackChunkName: \"secret\" */).then(m => m.SecretsDetailsPage))\n  .set(referenceForModel(ServiceAccountModel), () => import('./service-account' /* webpackChunkName: \"service-account\" */).then(m => m.ServiceAccountsDetailsPage))\n  .set(referenceForModel(ServiceInstanceModel), () => import('./service-instance' /* webpackChunkName: \"service-instance\" */).then(m => m.ServiceInstanceDetailsPage))\n  .set(referenceForModel(ServiceBindingModel), () => import('./service-binding' /* webpackChunkName: \"service-binding\" */).then(m => m.ServiceBindingDetailsPage))\n  .set(referenceForModel(ServiceModel), () => import('./service' /* webpackChunkName: \"service\" */).then(m => m.ServicesDetailsPage))\n  .set(referenceForModel(IngressModel), () => import('./ingress' /* webpackChunkName: \"ingress\" */).then(m => m.IngressesDetailsPage))\n  .set(referenceForModel(RouteModel), () => import('./routes' /* webpackChunkName: \"routes\" */).then(m => m.RoutesDetailsPage))\n  .set(referenceForModel(ClusterRoleModel), () => import('./RBAC/role' /* webpackChunkName: \"role\" */).then(m => m.ClusterRolesDetailsPage))\n  .set(referenceForModel(RoleModel), () => import('./RBAC/role' /* webpackChunkName: \"role\" */).then(m => m.RolesDetailsPage))\n  .set(referenceForModel(UserModel), () => import('./user' /* webpackChunkName: \"user\" */).then(m => m.UserDetailsPage))\n  .set(referenceForModel(GroupModel), () => import('./group' /* webpackChunkName: \"group\" */).then(m => m.GroupDetailsPage))\n  .set(referenceForModel(AlertmanagerModel), () => import('./alert-manager' /* webpackChunkName: \"alert-manager\" */).then(m => m.AlertManagersDetailsPage))\n  .set(referenceForModel(StatefulSetModel), () => import('./stateful-set' /* webpackChunkName: \"stateful-set\" */).then(m => m.StatefulSetsDetailsPage))\n  .set(referenceForModel(ResourceQuotaModel), () => import('./resource-quota' /* webpackChunkName: \"resource-quota\" */).then(m => m.ResourceQuotasDetailsPage))\n  .set(referenceForModel(ClusterResourceQuotaModel), () => import('./resource-quota' /* webpackChunkName: \"resource-quota\" */).then(m => m.ResourceQuotasDetailsPage))\n  .set(referenceForModel(LimitRangeModel), () => import('./limit-range' /* webpackChunkName: \"limit-range\" */).then(m => m.LimitRangeDetailsPage))\n  .set(referenceForModel(HorizontalPodAutoscalerModel), () => import('./hpa' /* webpackChunkName: \"hpa\" */).then(m => m.HorizontalPodAutoscalersDetailsPage))\n  .set(referenceForModel(PersistentVolumeModel), () => import('./persistent-volume' /* webpackChunkName: \"persistent-volume\" */).then(m => m.PersistentVolumesDetailsPage))\n  .set(referenceForModel(PersistentVolumeClaimModel), () => import('./persistent-volume-claim' /* webpackChunkName: \"persistent-volume-claim\" */).then(m => m.PersistentVolumeClaimsDetailsPage))\n  .set(ReportReference, () => import('./chargeback' /* webpackChunkName: \"chargeback\" */).then(m => m.ReportsDetailsPage))\n  .set(ReportGenerationQueryReference, () => import('./chargeback' /* webpackChunkName: \"chargeback\" */).then(m => m.ReportGenerationQueriesDetailsPage))\n  .set(referenceForModel(StorageClassModel), () => import('./storage-class' /* webpackChunkName: \"storage-class\" */).then(m => m.StorageClassDetailsPage))\n  .set(referenceForModel(TemplateInstanceModel), () => import('./template-instance' /* webpackChunkName: \"template-instance\" */).then(m => m.TemplateInstanceDetailsPage))\n  .set(referenceForModel(CustomResourceDefinitionModel), () => import('./custom-resource-definition' /* webpackChunkName: \"custom-resource-definition\" */).then(m => m.CustomResourceDefinitionsDetailsPage))\n  .set(referenceForModel(ClusterOperatorModel), () => import('./cluster-settings/cluster-operator' /* webpackChunkName: \"cluster-operator\" */).then(m => m.ClusterOperatorDetailsPage))\n  .set(referenceForModel(ClusterVersionModel), () => import('./cluster-settings/cluster-version' /* webpackChunkName: \"cluster-version\" */).then(m => m.ClusterVersionDetailsPage))\n  .set(referenceForModel(OAuthModel), () => import('./cluster-settings/oauth' /* webpackChunkName: \"oauth\" */).then(m => m.OAuthDetailsPage));\n\nexport const resourceDetailsPages = ImmutableMap<ResourceMapKey, ResourceMapValue>()\n  .merge(baseDetailsPages, hyperCloudDetailsPages)\n  .withMutations(map => {\n    plugins.registry.getResourceDetailsPages().forEach(page => {\n      addResourcePage(map, page);\n    });\n  });\n\nexport const baseListPages = ImmutableMap<ResourceMapKey, ResourceMapValue>()\n  .set(referenceForModel(ClusterServiceClassModel), () => import('./cluster-service-class' /* webpackChunkName: \"cluster-service-class\" */).then(m => m.ClusterServiceClassPage))\n  .set(referenceForModel(ClusterServiceBrokerModel), () => import('./cluster-service-broker' /* webpackChunkName: \"cluster-service-broker\" */).then(m => m.ClusterServiceBrokerPage))\n  .set(referenceForModel(ClusterServicePlanModel), () => import('./cluster-service-plan' /* webpackChunkName: \"cluster-service-plan\" */).then(m => m.ClusterServicePlanPage))\n  .set(referenceForModel(ConfigMapModel), () => import('./configmap' /* webpackChunkName: \"configmap\" */).then(m => m.ConfigMapsPage))\n  .set(referenceForModel(DaemonSetModel), () => import('./daemon-set' /* webpackChunkName: \"daemon-set\" */).then(m => m.DaemonSetsPage))\n  .set(referenceForModel(DeploymentConfigModel), () => import('./deployment-config' /* webpackChunkName: \"deployment-config\" */).then(m => m.DeploymentConfigsPage))\n  .set(referenceForModel(DeploymentModel), () => import('./deployment' /* webpackChunkName: \"deployment\" */).then(m => m.DeploymentsPage))\n  .set(referenceForModel(BuildConfigModel), () => import('./build-config' /* webpackChunkName: \"build-config\" */).then(m => m.BuildConfigsPage))\n  .set(referenceForModel(BuildModel), () => import('./build' /* webpackChunkName: \"build\" */).then(m => m.BuildsPage))\n  .set(referenceForModel(ImageStreamModel), () => import('./image-stream' /* webpackChunkName: \"image-stream\" */).then(m => m.ImageStreamsPage))\n  .set(referenceForModel(JobModel), () => import('./job' /* webpackChunkName: \"job\" */).then(m => m.JobsPage))\n  .set(referenceForModel(CronJobModel), () => import('./cron-job' /* webpackChunkName: \"cron-job\" */).then(m => m.CronJobsPage))\n  .set(referenceForModel(ProjectModel), () => import('./namespace' /* webpackChunkName: \"namespace\" */).then(m => m.ProjectsPage))\n  .set(referenceForModel(NamespaceModel), () => import('./namespace' /* webpackChunkName: \"namespace\" */).then(m => m.NamespacesPage))\n  .set(referenceForModel(NetworkPolicyModel), () => import('./network-policy' /* webpackChunkName: \"network-policy\" */).then(m => m.NetworkPoliciesPage))\n  .set(referenceForModel(NodeModel), () => import('@console/app/src/components/nodes/NodesPage' /* webpackChunkName: \"node\" */).then(m => m.default))\n  .set(referenceForModel(MachineAutoscalerModel), () => import('./machine-autoscaler' /* webpackChunkName: \"machine-autoscaler\" */).then(m => m.MachineAutoscalerPage))\n  .set(referenceForModel(MachineConfigModel), () => import('./machine-config' /* webpackChunkName: \"machine-config\" */).then(m => m.MachineConfigPage))\n  .set(referenceForModel(MachineConfigPoolModel), () => import('./machine-config-pool' /* webpackChunkName: \"machine-config-pool\" */).then(m => m.MachineConfigPoolPage))\n  .set(referenceForModel(MachineModel), () => import('./machine' /* webpackChunkName: \"machine\" */).then(m => m.MachinePage))\n  .set(referenceForModel(MachineDeploymentModel), () => import('./machine-deployment' /* webpackChunkName: \"machine-deployment\" */).then(m => m.MachineDeploymentPage))\n  .set(referenceForModel(MachineHealthCheckModel), () => import('./machine-health-check' /* webpackChunkName: \"machine-health-check\" */).then(m => m.MachineHealthCheckPage))\n  .set(referenceForModel(MachineSetModel), () => import('./machine-set' /* webpackChunkName: \"machine-set\" */).then(m => m.MachineSetPage))\n  .set(referenceForModel(PodModel), () => import('./pod' /* webpackChunkName: \"pod\" */).then(m => m.PodsPage))\n  .set(referenceForModel(ReplicaSetModel), () => import('./replicaset' /* webpackChunkName: \"replicaset\" */).then(m => m.ReplicaSetsPage)) //TODO should be replica-set\n  .set(referenceForModel(ReplicationControllerModel), () => import('./replication-controller' /* webpackChunkName: \"replication-controller\" */).then(m => m.ReplicationControllersPage))\n  .set(referenceForModel(SecretModel), () => import('./secret' /* webpackChunkName: \"secret\" */).then(m => m.SecretsPage))\n  .set(referenceForModel(ServiceAccountModel), () => import('./service-account' /* webpackChunkName: \"service-account\" */).then(m => m.ServiceAccountsPage))\n  .set(referenceForModel(ServiceInstanceModel), () => import('./service-instance' /* webpackChunkName: \"service-instance\" */).then(m => m.ServiceInstancesPage))\n  .set(referenceForModel(ServiceBindingModel), () => import('./service-binding' /* webpackChunkName: \"service-binding\" */).then(m => m.ServiceBindingsPage))\n  .set(referenceForModel(ServiceModel), () => import('./service' /* webpackChunkName: \"service\" */).then(m => m.ServicesPage))\n  .set(referenceForModel(IngressModel), () => import('./ingress' /* webpackChunkName: \"ingress\" */).then(m => m.IngressesPage))\n  .set(referenceForModel(RouteModel), () => import('./routes' /* webpackChunkName: \"routes\" */).then(m => m.RoutesPage))\n  .set(referenceForModel(RoleModel), () => import('./RBAC/role' /* webpackChunkName: \"role\" */).then(m => m.RolesPage))\n  .set(referenceForModel(RoleBindingModel), () => import('./RBAC/bindings' /* webpackChunkName: \"bindings\" */).then(m => m.RoleBindingsPage))\n  .set(referenceForModel(UserModel), () => import('./user' /* webpackChunkName: \"user\" */).then(m => m.UserPage))\n  .set(referenceForModel(GroupModel), () => import('./group' /* webpackChunkName: \"group\" */).then(m => m.GroupPage))\n  .set(referenceForModel(PrometheusModel), () => import('./prometheus' /* webpackChunkName: \"prometheus\" */).then(m => m.PrometheusInstancesPage))\n  .set(referenceForModel(ServiceMonitorModel), () => import('./service-monitor' /* webpackChunkName: \"service-monitor\" */).then(m => m.ServiceMonitorsPage))\n  .set(referenceForModel(AlertmanagerModel), () => import('./alert-manager' /* webpackChunkName: \"alert-manager\" */).then(m => m.AlertManagersPage))\n  .set(referenceForModel(StatefulSetModel), () => import('./stateful-set' /* webpackChunkName: \"stateful-set\" */).then(m => m.StatefulSetsPage))\n  .set(referenceForModel(ResourceQuotaModel), () => import('./resource-quota' /* webpackChunkName: \"resource-quota\" */).then(m => m.ResourceQuotasPage))\n  .set(referenceForModel(LimitRangeModel), () => import('./limit-range' /* webpackChunkName: \"limit-range\" */).then(m => m.LimitRangeListPage))\n  .set(referenceForModel(HorizontalPodAutoscalerModel), () => import('./hpa' /* webpackChunkName: \"hpa\" */).then(m => m.HorizontalPodAutoscalersPage))\n  .set(referenceForModel(PersistentVolumeModel), () => import('./persistent-volume' /* webpackChunkName: \"persistent-volume\" */).then(m => m.PersistentVolumesPage))\n  .set(referenceForModel(PersistentVolumeClaimModel), () => import('./persistent-volume-claim' /* webpackChunkName: \"persistent-volume-claim\" */).then(m => m.PersistentVolumeClaimsPage))\n  .set(ReportReference, () => import('./chargeback' /* webpackChunkName: \"chargeback\" */).then(m => m.ReportsPage))\n  .set(ReportGenerationQueryReference, () => import('./chargeback' /* webpackChunkName: \"chargeback\" */).then(m => m.ReportGenerationQueriesPage))\n  .set(referenceForModel(StorageClassModel), () => import('./storage-class' /* webpackChunkName: \"storage-class\" */).then(m => m.StorageClassPage))\n  .set(referenceForModel(TemplateInstanceModel), () => import('./template-instance' /* webpackChunkName: \"template-instance\" */).then(m => m.TemplateInstancePage))\n  .set(referenceForModel(CustomResourceDefinitionModel), () => import('./custom-resource-definition' /* webpackChunkName: \"custom-resource-definition\" */).then(m => m.CustomResourceDefinitionsPage))\n  .set(referenceForModel(ClusterOperatorModel), () => import('./cluster-settings/cluster-operator' /* webpackChunkName: \"cluster-operator\" */).then(m => m.ClusterOperatorPage));\n\nexport const resourceListPages = ImmutableMap<ResourceMapKey, ResourceMapValue>()\n  .merge(baseListPages, hyperCloudListPages)\n  .withMutations(map => {\n    plugins.registry.getResourceListPages().forEach(page => {\n      addResourcePage(map, page);\n    });\n  });\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { OutlinedCircleIcon, ResourcesAlmostEmptyIcon, ResourcesAlmostFullIcon, ResourcesFullIcon, UnknownIcon } from '@patternfly/react-icons';\n\nimport { FLAGS, YellowExclamationTriangleIcon } from '@console/shared';\nimport { ListPage, DetailsPage, MultiListPage, Table, TableRow, TableData } from './factory';\nimport { Kebab, SectionHeading, navFactory, ResourceKebab, ResourceLink, ResourceSummary, convertToBaseValue, FieldLevelHelp } from './utils';\nimport { connectToFlags, flagPending } from '../reducers/features';\nimport { GaugeChart } from './graphs/gauge';\nimport { LoadingBox } from './utils/status-box';\nimport { referenceForModel } from '../module/k8s';\nimport { ResourceQuotaModel, ClusterResourceQuotaModel } from '../models';\nimport { useTranslation } from 'react-i18next';\nimport { ResourceLabel } from '../models/hypercloud/resource-plural';\n\nconst { common } = Kebab.factory;\nconst resourceQuotaMenuActions = [...Kebab.getExtensionsActionsForKind(ResourceQuotaModel), ...common];\nconst clusterResourceQuotaMenuActions = [...Kebab.getExtensionsActionsForKind(ClusterResourceQuotaModel), ...common];\n\nconst isClusterQuota = quota => !quota.metadata.namespace;\n\nconst quotaKind = quota => (isClusterQuota(quota) ? referenceForModel(ClusterResourceQuotaModel) : referenceForModel(ResourceQuotaModel));\nconst quotaActions = quota => (quota.metadata.namespace ? resourceQuotaMenuActions : clusterResourceQuotaMenuActions);\nconst gaugeChartThresholds = [{ value: 90 }, { value: 101 }];\n\nconst quotaScopes = Object.freeze({\n  Terminating: {\n    label: 'Terminating',\n    description: 'Affects pods that have an active deadline. These pods usually include builds, deployers, and jobs.',\n  },\n  NotTerminating: {\n    label: 'Not Terminating',\n    description: 'Affects pods that do not have an active deadline. These pods usually include your applications.',\n  },\n  BestEffort: {\n    label: 'Best Effort',\n    description: 'Affects pods that do not have resource limits set. These pods have a best effort quality of service.',\n  },\n  NotBestEffort: {\n    label: 'Not Best Effort',\n    description: 'Affects pods that have at least one resource limit set. These pods do not have a best effort quality of service.',\n  },\n});\n\nexport const getQuotaResourceTypes = quota => {\n  const specHard = isClusterQuota(quota) ? _.get(quota, 'spec.quota.hard') : _.get(quota, 'spec.hard');\n  return _.keys(specHard).sort();\n};\n\nconst getResourceUsage = (quota, resourceType) => {\n  const isCluster = isClusterQuota(quota);\n  const statusPath = isCluster ? ['status', 'total', 'hard'] : ['status', 'hard'];\n  const specPath = isCluster ? ['spec', 'quota', 'hard'] : ['spec', 'hard'];\n  const usedPath = isCluster ? ['status', 'total', 'used'] : ['status', 'used'];\n  const max = _.get(quota, [...statusPath, resourceType]) || _.get(quota, [...specPath, resourceType]);\n  const used = _.get(quota, [...usedPath, resourceType]);\n  const percent = !max || !used ? 0 : (convertToBaseValue(used) / convertToBaseValue(max)) * 100;\n  return {\n    used,\n    max,\n    percent,\n  };\n};\n\nconst tableColumnClasses = [classNames('col-md-5', 'col-xs-6'), classNames('col-md-7', 'col-xs-6'), Kebab.columnClass];\n\nconst ResourceQuotaTableHeader = t => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[2] },\n    },\n  ];\n};\nResourceQuotaTableHeader.displayName = 'ResourceQuotaTableHeader';\n\nexport const ResourceQuotaTableRow = ({ obj: rq, index, key, style }) => {\n  return (\n    <TableRow id={rq.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={quotaKind(rq)} name={rq.metadata.name} namespace={rq.metadata.namespace} className=\"co-resource-item__resource-name\" />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>{rq.metadata.namespace ? <ResourceLink kind=\"Namespace\" name={rq.metadata.namespace} title={rq.metadata.namespace} /> : 'None'}</TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <ResourceKebab actions={quotaActions(rq)} kind={quotaKind(rq)} resource={rq} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const UsageIcon = ({ percent }) => {\n  let usageIcon = <UnknownIcon />;\n  if (percent === 0) {\n    usageIcon = <OutlinedCircleIcon className=\"co-resource-quota-empty\" />;\n  } else if (percent > 0 && percent < 50) {\n    usageIcon = <ResourcesAlmostEmptyIcon className=\"co-resource-quota-almost-empty\" />;\n  } else if (percent >= 50 && percent < 100) {\n    usageIcon = <ResourcesAlmostFullIcon className=\"co-resource-quota-almost-full\" />;\n  } else if (percent === 100) {\n    usageIcon = <ResourcesFullIcon className=\"co-resource-quota-full\" />;\n  } else if (percent > 100) {\n    usageIcon = <YellowExclamationTriangleIcon className=\"co-resource-quota-exceeded\" />;\n  }\n  return usageIcon;\n};\n\nexport const ResourceUsageRow = ({ quota, resourceType }) => {\n  const { used, max, percent } = getResourceUsage(quota, resourceType);\n  return (\n    <div className=\"row co-m-row\">\n      <div className=\"col-sm-4 col-xs-6 co-break-word\">{resourceType}</div>\n      <div className=\"col-sm-2 hidden-xs co-resource-quota-icon\">\n        <UsageIcon percent={percent} />\n      </div>\n      <div className=\"col-sm-3 col-xs-3\">{used}</div>\n      <div className=\"col-sm-3 col-xs-3\">{max}</div>\n    </div>\n  );\n};\n\nconst NoQuotaGuage = ({ title, className }) => <GaugeChart error=\"No Quota\" thresholds={[{ value: 100 }]} title={title} className={className} />;\n\nexport const QuotaGaugeCharts = ({ quota, resourceTypes, chartClassName = null }) => {\n  const { t } = useTranslation();\n  const resourceTypesSet = new Set(resourceTypes);\n  return (\n    <div className=\"co-resource-quota-chart-row\">\n      {resourceTypesSet.has('requests.cpu') || resourceTypesSet.has('cpu') ? (\n        <div className=\"co-resource-quota-gauge-chart\">\n          <GaugeChart\n            data={{\n              y: getResourceUsage(quota, resourceTypesSet.has('requests.cpu') ? 'requests.cpu' : 'cpu').percent,\n            }}\n            thresholds={gaugeChartThresholds}\n            title={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_87')}\n            className={chartClassName}\n          />\n        </div>\n      ) : (\n        <div className=\"co-resource-quota-gauge-chart\">\n          <NoQuotaGuage title={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_87')} />\n        </div>\n      )}\n      {resourceTypesSet.has('limits.cpu') ? (\n        <div className=\"co-resource-quota-gauge-chart\">\n          <GaugeChart data={{ y: getResourceUsage(quota, 'limits.cpu').percent }} thresholds={gaugeChartThresholds} title={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_88')} className={chartClassName} />\n        </div>\n      ) : (\n        <div className=\"co-resource-quota-gauge-chart\">\n          <NoQuotaGuage title={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_88')} className={chartClassName} />\n        </div>\n      )}\n      {resourceTypesSet.has('requests.memory') || resourceTypesSet.has('memory') ? (\n        <div className=\"co-resource-quota-gauge-chart\">\n          <GaugeChart\n            data={{\n              y: getResourceUsage(quota, resourceTypesSet.has('requests.memory') ? 'requests.memory' : 'memory').percent,\n            }}\n            thresholds={gaugeChartThresholds}\n            title={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_89')}\n            className={chartClassName}\n          />\n        </div>\n      ) : (\n        <div className=\"co-resource-quota-gauge-chart\">\n          <NoQuotaGuage title={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_89')} className={chartClassName} />\n        </div>\n      )}\n      {resourceTypesSet.has('limits.memory') ? (\n        <div className=\"co-resource-quota-gauge-chart\">\n          <GaugeChart data={{ y: getResourceUsage(quota, 'limits.memory').percent }} thresholds={gaugeChartThresholds} title={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_90')} className={chartClassName} />\n        </div>\n      ) : (\n        <div className=\"co-resource-quota-gauge-chart\">\n          <NoQuotaGuage title={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_90')} className={chartClassName} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const QuotaScopesInline = ({ scopes, className }) => {\n  return (\n    <span className={classNames(className)}>\n      (\n      {scopes\n        .map(scope => {\n          const scopeObj = _.get(quotaScopes, scope);\n          return scopeObj ? scopeObj.label : scope;\n        })\n        .join(',')}\n      )\n    </span>\n  );\n};\n\nexport const QuotaScopesList = ({ scopes }) => {\n  return scopes.map(scope => {\n    const scopeObj = _.get(quotaScopes, scope);\n    return scopeObj ? (\n      <dd key={scope}>\n        <div className=\"co-resource-quota-scope__label\">{scopeObj.label}</div>\n        <div className=\"co-resource-quota-scope__description\">{scopeObj.description}</div>\n      </dd>\n    ) : (\n      <dd key={scope} className=\"co-resource-quota-scope__label\">\n        {scope}\n      </dd>\n    );\n  });\n};\n\nexport const hasComputeResources = resourceTypes => {\n  const chartResourceTypes = ['requests.cpu', 'cpu', 'limits.cpu', 'requests.memory', 'memory', 'limits.memory'];\n  return _.intersection(resourceTypes, chartResourceTypes).length > 0;\n};\n\nconst Details = ({ obj: rq }) => {\n  const { t } = useTranslation();\n  const resourceTypes = getQuotaResourceTypes(rq);\n  const showChartRow = hasComputeResources(resourceTypes);\n  const scopes = _.get(rq, ['spec', 'scopes']);\n  const label = isClusterQuota(rq) ? ClusterResourceQuotaModel.label : ResourceQuotaModel.label;\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: t('COMMON:MSG_LNB_MENU_80') })} />\n        {showChartRow && <QuotaGaugeCharts quota={rq} resourceTypes={resourceTypes} />}\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={rq} />\n          </div>\n          {scopes && (\n            <div className=\"col-sm-6\">\n              <dl className=\"co-m-pane__details\">\n                <dt>Scopes</dt>\n                <QuotaScopesList scopes={scopes} />\n              </dl>\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: t('COMMON:MSG_LNB_MENU_80') })} style={{ display: 'block', marginBottom: '20px' }}>\n          <FieldLevelHelp>\n            <p>Requests are the amount of resources you expect to use. These are used when establishing if the cluster can fulfill your Request.</p>\n            <p>Limits are a maximum amount of a resource you can consume. Applications consuming more than the Limit may be terminated.</p>\n            <p>A cluster administrator can establish limits on both the amount you can Request and your Limits with a Resource Quota.</p>\n          </FieldLevelHelp>\n        </SectionHeading>\n        <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n          <div className=\"row co-m-table-grid__head\">\n            <div className=\"col-sm-4 col-xs-6\">{t('COMMON:MSG_DETAILS_TABDETAILS_RESOURCEQUOTADETAILS_TABLEHEADER_1')}</div>\n            <div className=\"col-sm-2 hidden-xs\">{t('COMMON:MSG_DETAILS_TABDETAILS_RESOURCEQUOTADETAILS_TABLEHEADER_2')}</div>\n            <div className=\"col-sm-3 col-xs-3\">{t('COMMON:MSG_DETAILS_TABDETAILS_RESOURCEQUOTADETAILS_TABLEHEADER_3')}</div>\n            <div className=\"col-sm-3 col-xs-3\">{t('COMMON:MSG_DETAILS_TABDETAILS_RESOURCEQUOTADETAILS_TABLEHEADER_4')}</div>\n          </div>\n          <div className=\"co-m-table-grid__body\">\n            {resourceTypes.map(type => (\n              <ResourceUsageRow key={type} quota={rq} resourceType={type} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport const ResourceQuotasList = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Resource Quoates\" Header={ResourceQuotaTableHeader.bind(null, t)} Row={ResourceQuotaTableRow} virtualize />;\n};\n\nexport const quotaType = quota => {\n  if (!quota) {\n    return undefined;\n  }\n  return quota.metadata.namespace ? 'namespace' : 'cluster';\n};\n\n// Split each resource quota into one row per subject\nexport const flatten = resources => _.flatMap(resources, resource => _.compact(resource.data));\n\nexport const ResourceQuotasPage = connectToFlags(FLAGS.OPENSHIFT)(props => {\n  const { t } = useTranslation();\n  const resources = [{ kind: 'ResourceQuota', namespaced: true }];\n  let rowFilters;\n  const flags = props.flags;\n\n  if (flagPending(flags[FLAGS.OPENSHIFT])) {\n    return <LoadingBox />;\n  }\n  if (flags[FLAGS.OPENSHIFT]) {\n    resources.push({\n      kind: referenceForModel(ClusterResourceQuotaModel),\n      namespaced: false,\n      optional: true,\n    });\n    rowFilters = [\n      {\n        filterGroupName: 'Role',\n        type: 'role-kind',\n        reducer: quotaType,\n        items: [\n          { id: 'cluster', title: 'Cluster-wide Resource Quotas' },\n          { id: 'namespace', title: 'Namespace Resource Quotas' },\n        ],\n      },\n    ];\n  }\n\n  return <ListPage title={t('COMMON:MSG_LNB_MENU_80')} createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: ResourceLabel(ResourceQuotaModel, t) })} canCreate={true} ListComponent={ResourceQuotasList} kind=\"ResourceQuota\" {...props} />;\n});\n\nexport const ResourceQuotasDetailsPage = props => <DetailsPage {...props} menuActions={resourceQuotaMenuActions} pages={[navFactory.details(Details), navFactory.editYaml()]} />;\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { Button, Popover } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\nimport { EyeIcon, EyeSlashIcon, QuestionCircleIcon } from '@patternfly/react-icons';\n\nimport { Status } from '@console/shared';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport {\n  CopyToClipboard,\n  DetailsItem,\n  ExternalLink,\n  Kebab,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  detailsPage,\n  navFactory,\n} from './utils';\nimport { MaskedData } from './configmap-and-secret-data';\nimport {\n  K8sResourceKindReference,\n  RouteKind,\n  RouteIngress,\n  RouteTarget,\n  K8sResourceCondition,\n} from '../module/k8s';\nimport { RouteModel } from '../models';\nimport { Conditions } from './conditions';\nimport { RouteCharts } from './routes/route-charts';\n\nconst RoutesReference: K8sResourceKindReference = 'Route';\nconst menuActions = [...Kebab.getExtensionsActionsForKind(RouteModel), ...Kebab.factory.common];\n\nexport type IngressStatusProps = {\n  host: string;\n  routerName: string;\n  conditions: K8sResourceCondition[];\n  wildcardPolicy: string;\n  routerCanonicalHostname: string;\n};\n\nconst getRouteHost = (route: RouteKind, onlyAdmitted: boolean): string => {\n  let oldestAdmittedIngress: RouteIngress;\n  let oldestTransitionTime: string;\n  _.each(route.status.ingress, (ingress) => {\n    const admittedCondition = _.find(ingress.conditions, { type: 'Admitted', status: 'True' });\n    if (\n      admittedCondition &&\n      (!oldestTransitionTime || oldestTransitionTime > admittedCondition.lastTransitionTime)\n    ) {\n      oldestAdmittedIngress = ingress;\n      oldestTransitionTime = admittedCondition.lastTransitionTime;\n    }\n  });\n\n  if (oldestAdmittedIngress) {\n    return oldestAdmittedIngress.host;\n  }\n\n  return onlyAdmitted ? null : route.spec.host;\n};\n\nconst isWebRoute = (route: RouteKind): boolean => {\n  return !!getRouteHost(route, true) && _.get(route, 'spec.wildcardPolicy') !== 'Subdomain';\n};\n\nexport const getRouteWebURL = (route: RouteKind): string => {\n  const scheme = _.get(route, 'spec.tls.termination') ? 'https' : 'http';\n  let url = `${scheme}://${getRouteHost(route, false)}`;\n  if (route.spec.path) {\n    url += route.spec.path;\n  }\n  return url;\n};\n\nconst getSubdomain = (route: RouteKind): string => {\n  const hostname = _.get(route, 'spec.host', '');\n  return hostname.replace(/^[a-z0-9]([-a-z0-9]*[a-z0-9])\\./, '');\n};\n\nconst getRouteLabel = (route: RouteKind): string => {\n  if (isWebRoute(route)) {\n    return getRouteWebURL(route);\n  }\n\n  let label = getRouteHost(route, false);\n  if (!label) {\n    return '<unknown host>';\n  }\n\n  if (_.get(route, 'spec.wildcardPolicy') === 'Subdomain') {\n    label = `*.${getSubdomain(route)}`;\n  }\n\n  if (route.spec.path) {\n    label += route.spec.path;\n  }\n  return label;\n};\n\nexport const RouteLocation: React.FC<RouteHostnameProps> = ({ obj }) => (\n  <div>\n    {isWebRoute(obj) ? (\n      <ExternalLink\n        href={getRouteWebURL(obj)}\n        additionalClassName=\"co-external-link--block\"\n        text={getRouteLabel(obj)}\n      />\n    ) : (\n      getRouteLabel(obj)\n    )}\n  </div>\n);\nRouteLocation.displayName = 'RouteLocation';\n\nexport const routeStatus = (route: RouteKind): string => {\n  let atLeastOneAdmitted: boolean = false;\n\n  if (!route.status || !route.status.ingress) {\n    return 'Pending';\n  }\n\n  _.each(route.status.ingress, (ingress) => {\n    const isAdmitted = _.some(ingress.conditions, { type: 'Admitted', status: 'True' });\n    if (isAdmitted) {\n      atLeastOneAdmitted = true;\n    }\n  });\n\n  return atLeastOneAdmitted ? 'Accepted' : 'Rejected';\n};\n\nexport const RouteStatus: React.FC<RouteStatusProps> = ({ obj: route }) => {\n  const status: string = routeStatus(route);\n  return <Status status={status} />;\n};\nRouteStatus.displayName = 'RouteStatus';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  Kebab.columnClass,\n];\n\nconst kind = 'Route';\n\nconst RouteTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Status',\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Location',\n      sortField: 'spec.host',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Service',\n      sortField: 'spec.to.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nRouteTableHeader.displayName = 'RouteTableHeader';\n\nconst RouteTableRow: RowFunction<RouteKind> = ({ obj: route, index, key, style }) => {\n  return (\n    <TableRow id={route.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={kind}\n          name={route.metadata.name}\n          namespace={route.metadata.namespace}\n          title={route.metadata.uid}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink\n          kind=\"Namespace\"\n          name={route.metadata.namespace}\n          title={route.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <RouteStatus obj={route} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[3], 'co-break-word')}>\n        <RouteLocation obj={route} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ResourceLink\n          kind=\"Service\"\n          name={route.spec.to.name}\n          namespace={route.metadata.namespace}\n          title={route.spec.to.name}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={route} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst TLSSettings: React.FC<TLSSettingsProps> = ({ route }) => {\n  const [showKey, setShowKey] = React.useState(false);\n  const { tls } = route.spec;\n  if (!tls) {\n    return <>TLS is not enabled.</>;\n  }\n\n  const visibleKeyValue = showKey ? tls.key : <MaskedData />;\n  return (\n    <dl>\n      <DetailsItem label=\"Termination Type\" obj={route} path=\"spec.tls.termination\" />\n      <DetailsItem\n        label=\"Insecure Traffic\"\n        obj={route}\n        path=\"spec.tls.insecureEdgeTerminationPolicy\"\n      />\n      <DetailsItem label=\"Certificate\" obj={route} path=\"spec.tls.certificate\">\n        {tls.certificate ? <CopyToClipboard value={tls.certificate} /> : '-'}\n      </DetailsItem>\n      <dt className=\"co-m-route-tls-reveal__title\">\n        Key{' '}\n        {tls.key && (\n          <Button\n            className=\"pf-m-link--align-left\"\n            type=\"button\"\n            onClick={() => setShowKey(!showKey)}\n            variant=\"link\"\n          >\n            {showKey ? (\n              <>\n                <EyeSlashIcon className=\"co-icon-space-r\" />\n                Hide\n              </>\n            ) : (\n              <>\n                <EyeIcon className=\"co-icon-space-r\" />\n                Reveal\n              </>\n            )}\n          </Button>\n        )}\n      </dt>\n      <dd>{tls.key ? <CopyToClipboard value={tls.key} visibleValue={visibleKeyValue} /> : '-'}</dd>\n      <DetailsItem label=\"CA Certificate\" obj={route} path=\"spec.tls.caCertificate\">\n        {tls.certificate ? <CopyToClipboard value={tls.caCertificate} /> : '-'}\n      </DetailsItem>\n      {tls.termination === 'reencrypt' && (\n        <DetailsItem\n          label=\"Destination CA Certificate\"\n          obj={route}\n          path=\"spec.tls.destinationCACertificate\"\n        >\n          {tls.destinationCACertificate ? (\n            <CopyToClipboard value={tls.destinationCACertificate} />\n          ) : (\n            '-'\n          )}\n        </DetailsItem>\n      )}\n    </dl>\n  );\n};\n\nconst calcTrafficPercentage = (weight: number, route: any) => {\n  if (!weight) {\n    return '-';\n  }\n\n  const totalWeight = _.reduce(\n    route.spec.alternateBackends,\n    (result, alternate) => {\n      return (result += alternate.weight);\n    },\n    route.spec.to.weight,\n  );\n\n  const percentage = (weight / totalWeight) * 100;\n\n  return `${percentage.toFixed(1)}%`;\n};\n\nconst getIngressStatusForHost = (\n  hostname: string,\n  ingresses: RouteIngress[],\n): IngressStatusProps => {\n  return _.find(ingresses, { host: hostname }) as IngressStatusProps;\n};\n\nconst showCustomRouteHelp = (\n  ingress: RouteIngress,\n  annotations: RouteKind['metadata']['annotations'],\n) => {\n  if (!ingress || !_.some(ingress.conditions, { type: 'Admitted', status: 'True' })) {\n    return false;\n  }\n\n  if (_.get(annotations, 'openshift.io/host.generated') === 'true') {\n    return false;\n  }\n\n  if (!ingress.host || !ingress.routerCanonicalHostname) {\n    return false;\n  }\n\n  return true;\n};\n\nconst RouteTargetRow: React.FC<RouteTargetRowProps> = ({ route, target }) => (\n  <tr>\n    <td>\n      <ResourceLink\n        kind={target.kind}\n        name={target.name}\n        namespace={route.metadata.namespace}\n        title={target.name}\n      />\n    </td>\n    <td>{target.weight}</td>\n    <td>{calcTrafficPercentage(target.weight, route)}</td>\n  </tr>\n);\n\nconst CustomRouteHelp: React.FC<CustomRouteHelpProps> = ({ host, routerCanonicalHostname }) => (\n  <Popover\n    headerContent={<>Custom Route</>}\n    bodyContent={\n      <div>\n        <p>\n          To use a custom route, you must update your DNS provider by creating a canonical name\n          (CNAME) record. Your CNAME record should point to your custom domain{' '}\n          <strong>{host}</strong>, to the OpenShift canonical router hostname,{' '}\n          <strong>{routerCanonicalHostname}</strong>, as the alias.\n        </p>\n      </div>\n    }\n  >\n    <Button className=\"pf-m-link--align-left\" type=\"button\" variant=\"link\">\n      <QuestionCircleIcon /> Do you need to set up custom DNS?\n    </Button>\n  </Popover>\n);\n\nconst RouteIngressStatus: React.FC<RouteIngressStatusProps> = ({ route }) => (\n  <>\n    {_.map(route.status.ingress, (ingress: RouteIngress) => (\n      <div key={ingress.routerName} className=\"co-m-route-ingress-status\">\n        <SectionHeading text={`Router: ${ingress.routerName}`} />\n        <dl>\n          <DetailsItem label=\"Host\" obj={route} path=\"status.ingress.host\">\n            {ingress.host}\n          </DetailsItem>\n          <DetailsItem label=\"Wildcard Policy\" obj={route} path=\"status.ingress.wildcardPolicy\">\n            {ingress.wildcardPolicy}\n          </DetailsItem>\n          <DetailsItem\n            label=\"Router Canonical Hostname\"\n            obj={route}\n            path=\"status.ingress.routerCanonicalHostname\"\n          >\n            {ingress.routerCanonicalHostname || '-'}\n            {showCustomRouteHelp(ingress, route.metadata.annotations) && (\n              <CustomRouteHelp\n                host={ingress.host}\n                routerCanonicalHostname={ingress.routerCanonicalHostname}\n              />\n            )}\n          </DetailsItem>\n        </dl>\n        <h3 className=\"co-section-heading-secondary\">Conditions</h3>\n        <Conditions conditions={ingress.conditions} />\n      </div>\n    ))}\n  </>\n);\n\nconst RouteDetails: React.FC<RoutesDetailsProps> = ({ obj: route }) => {\n  const primaryIngressStatus: IngressStatusProps = getIngressStatusForHost(\n    route.spec.host,\n    route.status.ingress,\n  );\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Route Details\" />\n        <RouteCharts namespace={route.metadata.namespace} route={route.metadata.name} />\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={route}>\n              <DetailsItem label={route.spec.to.kind} obj={route} path=\"spec.to.name\">\n                <ResourceLink\n                  kind={route.spec.to.kind}\n                  name={route.spec.to.name}\n                  namespace={route.metadata.namespace}\n                  title={route.spec.to.name}\n                />\n              </DetailsItem>\n              <DetailsItem label=\"Target Port\" obj={route} path=\"spec.port.targetPort\" />\n            </ResourceSummary>\n          </div>\n          <div className=\"col-sm-6\">\n            <dl className=\"co-m-pane__details\">\n              <dt>Location</dt>\n              <dd>\n                <RouteLocation obj={route} />\n              </dd>\n              <dt>Status</dt>\n              <dd>\n                <RouteStatus obj={route} />\n              </dd>\n              <DetailsItem label=\"Host\" obj={route} path=\"spec.host\" />\n              <DetailsItem label=\"Path\" obj={route} path=\"spec.path\" />\n              {primaryIngressStatus && (\n                <DetailsItem\n                  label=\"Router Canonical Hostname\"\n                  obj={route}\n                  path=\"status.ingress.routerCanonicalHostname\"\n                >\n                  {primaryIngressStatus.routerCanonicalHostname || '-'}\n                </DetailsItem>\n              )}\n              {showCustomRouteHelp(primaryIngressStatus, route.metadata.annotations) && (\n                <dd>\n                  <CustomRouteHelp\n                    host={primaryIngressStatus.host}\n                    routerCanonicalHostname={primaryIngressStatus.routerCanonicalHostname}\n                  />\n                </dd>\n              )}\n            </dl>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"TLS Settings\" />\n        <TLSSettings route={route} />\n      </div>\n      {!_.isEmpty(route.spec.alternateBackends) && (\n        <div className=\"co-m-pane__body\">\n          <SectionHeading text=\"Traffic\" />\n          <p className=\"co-m-pane__explanation\">\n            This route splits traffic across multiple services.\n          </p>\n          <div className=\"co-table-container\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>Service</th>\n                  <th>Weight</th>\n                  <th>Percent</th>\n                </tr>\n              </thead>\n              <tbody>\n                <RouteTargetRow route={route} target={route.spec.to} />\n                {_.map(route.spec.alternateBackends, (alternate, i) => (\n                  <RouteTargetRow key={i} route={route} target={alternate} />\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n      {_.isEmpty(route.status.ingress) ? (\n        <div className=\"cos-status-box\">\n          <div className=\"text-center\">No Route Status</div>\n        </div>\n      ) : (\n        <div className=\"co-m-pane__body\">\n          <RouteIngressStatus route={route} />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport const RoutesDetailsPage: React.FC<RoutesDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    getResourceStatus={routeStatus}\n    kind={RoutesReference}\n    menuActions={menuActions}\n    pages={[navFactory.details(detailsPage(RouteDetails)), navFactory.editYaml()]}\n  />\n);\nexport const RoutesList: React.FC = (props) => (\n  <Table {...props} aria-label=\"Routes\" Header={RouteTableHeader} Row={RouteTableRow} virtualize />\n);\n\nconst filters = [\n  {\n    filterGroupName: 'Status',\n    type: 'route-status',\n    reducer: routeStatus,\n    items: [\n      { id: 'Accepted', title: 'Accepted' },\n      { id: 'Rejected', title: 'Rejected' },\n      { id: 'Pending', title: 'Pending' },\n    ],\n  },\n];\n\nexport const RoutesPage: React.FC<RoutesPageProps> = (props) => {\n  const createProps = {\n    to: `/k8s/ns/${props.namespace || 'default'}/routes/~new/form`,\n  };\n\n  return (\n    <ListPage\n      ListComponent={RoutesList}\n      kind={RoutesReference}\n      canCreate={true}\n      createProps={createProps}\n      rowFilters={filters}\n      {...props}\n    />\n  );\n};\n\nexport type RouteHostnameProps = {\n  obj: RouteKind;\n};\n\nexport type RouteStatusProps = {\n  obj: RouteKind;\n};\n\nexport type RouteTargetRowProps = {\n  route: RouteKind;\n  target: RouteTarget;\n};\n\nexport type TLSSettingsProps = {\n  route: RouteKind;\n};\n\nexport type RouteHeaderProps = {\n  obj: RouteKind;\n};\n\nexport type RoutesPageProps = {\n  obj: RouteKind;\n  namespace: string;\n};\n\nexport type RoutesDetailsProps = {\n  obj: RouteKind;\n};\n\nexport type RoutesDetailsPageProps = {\n  match: any;\n};\n\nexport type RouteIngressStatusProps = {\n  route: RouteKind;\n};\n\nexport type CustomRouteHelpProps = {\n  host: string;\n  routerCanonicalHostname: string;\n};\n","import * as React from 'react';\nimport { FLAGS } from '@console/shared/src/constants';\nimport { Area } from '@console/internal/components/graphs/area';\nimport { humanizeDecimalBytesPerSec } from '@console/internal/components/utils';\nimport { connectToFlags, WithFlagsProps } from '../../reducers/features';\n\n// Build the RouteCharts component that presents 3 charts side by side in full screen\nconst chartClasses = 'col-md-4 col-sm-12';\n\nconst RouteCharts_: React.FC<RouteChartsProps> = ({ namespace, route, flags }) => {\n  if (!flags[FLAGS.CAN_GET_NS]) {\n    return null;\n  }\n\n  const interval = '[5m]';\n  const namespaceRouteQuery = `{exported_namespace=\"${namespace}\",route=\"${route}\"}${interval}`;\n  return (\n    <div className=\"row\">\n      <div className={chartClasses}>\n        <Area\n          title=\"Traffic In\"\n          humanize={humanizeDecimalBytesPerSec}\n          query={`sum without (instance,exported_pod,exported_service,pod,server) (irate(haproxy_server_bytes_in_total${namespaceRouteQuery}))`}\n        />\n      </div>\n      <div className={chartClasses}>\n        <Area\n          title=\"Traffic Out\"\n          humanize={humanizeDecimalBytesPerSec}\n          query={`sum without (instance,exported_pod,exported_service,pod,server) (irate(haproxy_server_bytes_out_total${namespaceRouteQuery}))`}\n        />\n      </div>\n      <div className={chartClasses}>\n        <Area\n          title=\"Connection Rate\"\n          query={`sum without (instance,exported_pod,exported_service,pod,server) (irate(haproxy_backend_connections_total${namespaceRouteQuery}))`}\n        />\n      </div>\n    </div>\n  );\n};\nexport const RouteCharts = connectToFlags<RouteChartsProps>(FLAGS.CAN_GET_NS)(RouteCharts_);\n\nexport type RouteChartsProps = {\n  namespace: string;\n  route: string;\n} & WithFlagsProps;\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as classNames from 'classnames';\nimport { Button } from '@patternfly/react-core';\n\nimport { filterList } from '../actions/k8s';\nimport { getQueryArgument, setQueryArgument } from './utils';\n\nexport const CheckBox = ({ title, active, number, toggle }) => {\n  const klass = classNames('row-filter__box', {\n    'row-filter__box--active': active,\n    'row-filter__box--empty': !number,\n  });\n\n  return (\n    <a href=\"#\" onClick={toggle} className={klass}>\n      <span className=\"row-filter__number-bubble\">{number}</span>\n      {title}\n    </a>\n  );\n};\n\nexport const CheckBoxControls = ({\n  allSelected,\n  itemCount,\n  selectedCount,\n  onSelectAll,\n  children,\n}) => (\n  <div className=\"row\">\n    <div className=\"col-xs-12\">\n      <div className=\"row-filter\">\n        {children}\n        <div className=\"co-m-row-filter__controls\">\n          <Button\n            className=\"co-m-row-filter__selector\"\n            disabled={allSelected}\n            type=\"button\"\n            onClick={onSelectAll}\n            variant=\"link\"\n          >\n            Select all filters\n          </Button>\n          <span className=\"co-m-row-filter__items\">\n            {itemCount === selectedCount ? (\n              itemCount\n            ) : (\n              <>\n                {selectedCount} of {itemCount}\n              </>\n            )}{' '}\n            Item{itemCount !== 1 && 's'}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport const storagePrefix = 'rowFilter-';\n\nclass CheckBoxes_ extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { selected: [] };\n    this.selectAll = this.selectAll.bind(this);\n    this.toggle = this.toggle.bind(this);\n  }\n\n  get storageKey() {\n    return `${storagePrefix}${this.props.type}`;\n  }\n\n  componentDidMount() {\n    let selected;\n    try {\n      selected = getQueryArgument(this.storageKey).split(',');\n    } catch (ignored) {\n      // ignore\n    }\n\n    if (_.isEmpty(selected) || !_.isArray(selected)) {\n      selected = this.props.selected || [];\n    }\n\n    const allSelected = _.isEmpty(_.xor(selected, _.map(this.props.items, 'id')));\n\n    this.setState({ allSelected, selected }, () => this.applyFilter());\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      !_.isEqual(this.props.items, prevProps.items) ||\n      !_.isEqual(this.props.reduxIDs, prevProps.reduxIDs)\n    ) {\n      this.applyFilter();\n    }\n  }\n\n  applyFilter() {\n    const all = _.map(this.props.items, 'id');\n    const recognized = _.intersection(this.state.selected, all);\n    if (!_.isEmpty(recognized)) {\n      this.props.onFilterChange?.(recognized);\n      this.props.reduxIDs.forEach((id) =>\n        this.props.filterList(id, this.props.type, { selected: new Set(recognized), all }),\n      );\n    }\n  }\n\n  setQueryParameters(selected) {\n    // Ensure something is always active\n    if (!_.isEmpty(selected)) {\n      try {\n        const recognized = _.filter(selected, (id) => _.find(this.props.items, { id }));\n        setQueryArgument(this.storageKey, recognized.join(','));\n      } catch (ignored) {\n        // ignore\n      }\n      const allSelected = _.isEmpty(_.xor(selected, _.map(this.props.items, 'id')));\n      this.setState({ allSelected, selected }, () => this.applyFilter());\n    }\n  }\n\n  toggle(event, itemId) {\n    event.preventDefault();\n    const selected = _.xor(this.state.selected, [itemId]);\n    this.setQueryParameters(selected);\n  }\n\n  selectAll() {\n    const selected = _.map(this.props.items, 'id');\n    this.setQueryParameters(selected);\n  }\n\n  render() {\n    const { items, itemCount } = this.props;\n    const { selected } = this.state;\n    const allSelected = _.every(items, ({ id }) => _.includes(selected, id));\n    const selectedCount = _.reduce(\n      selected,\n      (count, id) => count + (this.props.numbers[id] || 0),\n      0,\n    );\n    return (\n      <CheckBoxControls\n        allSelected={allSelected}\n        itemCount={itemCount}\n        selectedCount={selectedCount}\n        onSelectAll={this.selectAll}\n      >\n        {_.map(items, ({ id, title }) => (\n          <CheckBox\n            key={id}\n            title={title}\n            number={this.props.numbers[id] || 0}\n            active={_.includes(selected, id)}\n            toggle={(event) => this.toggle(event, id)}\n          />\n        ))}\n      </CheckBoxControls>\n    );\n  }\n}\n\n/** @type {React.SFC<{items: Array, itemCount: number, numbers: any, reduxIDs: Array, selected?: Array, type: string, onFilterChange?: (filter: string[]) => void}>} */\nexport const CheckBoxes = connect(null, { filterList })(CheckBoxes_);\n","import * as React from 'react';\n\n/**\n * You should pretty much always use this if you are setting React state asynchronously and your component could be unmounted.\n * (https://github.com/facebook/react/issues/14113)\n */\nexport const useSafetyFirst = <S extends any>(\n  initialState: S | (() => S),\n): [S, React.Dispatch<React.SetStateAction<S>>] => {\n  const mounted = React.useRef(true);\n  React.useEffect(() => () => (mounted.current = false), []);\n\n  const [value, setValue] = React.useState(initialState);\n  const setValueSafe = React.useCallback((newValue: S) => {\n    if (mounted.current) {\n      setValue(newValue);\n    }\n  }, []);\n\n  return [value, setValueSafe];\n};\n","import * as React from 'react';\nimport { Dropdown, DropdownToggle, DropdownItem } from '@patternfly/react-core';\nimport { CaretDownIcon, FilterIcon } from '@patternfly/react-icons';\nimport { TextFilter } from './factory';\nimport { useTranslation } from 'react-i18next';\n\nexport enum searchFilterValues {\n  Label = 'Label',\n  Name = 'Name',\n}\n\nexport const SearchFilterDropdown: React.SFC<SearchFilterDropdownProps> = props => {\n  const [isOpen, setOpen] = React.useState(false);\n  const { t } = useTranslation();\n  const LABEL = t('COMMON:MSG_COMMON_SEARCH_FILTER_2');\n  const NAME = t('COMMON:MSG_COMMON_SEARCH_FILTER_1');\n  const [selected, setSelected] = React.useState(LABEL);\n\n  React.useEffect(() => {\n    // 언어 변경시에 dropdown title이 변경이 안되서 넣어둠.\n    if (selected === LABEL) {\n      setSelected(LABEL);\n    } else {\n      setSelected(NAME);\n    }\n  }, [LABEL, NAME]);\n\n  const { onChange, nameFilterInput, labelFilterInput } = props;\n\n  const onToggle = (open: boolean) => setOpen(open);\n  const onSelect = event => {\n    const selectedName = event.target.name;\n    setSelected(selectedName);\n    setOpen(!isOpen);\n  };\n  const dropdownItems = [\n    <DropdownItem key=\"label-action\" name={t('COMMON:MSG_COMMON_SEARCH_FILTER_2')} component=\"button\">\n      {t('COMMON:MSG_COMMON_SEARCH_FILTER_2')}\n    </DropdownItem>,\n    <DropdownItem key=\"name-action\" name={t('COMMON:MSG_COMMON_SEARCH_FILTER_1')} component=\"button\">\n      {t('COMMON:MSG_COMMON_SEARCH_FILTER_1')}\n    </DropdownItem>,\n  ];\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      const { value } = e.target as HTMLInputElement;\n      onChange(selected, value, true);\n    }\n  };\n\n  const handleInputValue = (value: string) => {\n    onChange(selected, value, false);\n  };\n\n  return (\n    <div className=\"pf-c-input-group\">\n      <Dropdown\n        onSelect={onSelect}\n        toggle={\n          <DropdownToggle id=\"toggle-id\" onToggle={onToggle} iconComponent={CaretDownIcon}>\n            <>\n              <FilterIcon className=\"span--icon__right-margin\" /> {selected}\n            </>\n          </DropdownToggle>\n        }\n        isOpen={isOpen}\n        dropdownItems={dropdownItems}\n      />\n      <TextFilter parentClassName=\"co-search__filter-input\" onChange={handleInputValue} placeholder={selected === t('COMMON:MSG_COMMON_SEARCH_FILTER_2') ? 'app=frontend' : 'my-resource'} name=\"search-filter-input\" id=\"search-filter-input\" value={selected === t('COMMON:MSG_COMMON_SEARCH_FILTER_2') ? labelFilterInput : nameFilterInput} onKeyDown={handleKeyDown} aria-labelledby=\"toggle-id\" />\n    </div>\n  );\n};\n\nexport type SearchFilterDropdownProps = {\n  onChange: (type: string, value: string, endOfString: boolean) => void;\n  nameFilterInput: string;\n  labelFilterInput: string;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { DetailsPage, ListPage, Table, TableRow, TableData } from './factory';\nimport { SecretData } from './configmap-and-secret-data';\nimport { Kebab, SectionHeading, ResourceKebab, ResourceLink, ResourceSummary, Timestamp, detailsPage, navFactory, resourceObjPath } from './utils';\nimport { SecretType } from './secrets/create-secret';\nimport { configureAddSecretToWorkloadModal } from './modals/add-secret-to-workload';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport { ResourceLabel } from '../models/hypercloud/resource-plural';\n\nexport const WebHookSecretKey = 'WebHookSecretKey';\n\nexport const addSecretToWorkload = (kindObj, secret) => {\n  const { t } = useTranslation();\n  const { name: secretName, namespace } = secret.metadata;\n\n  return {\n    callback: () => configureAddSecretToWorkloadModal({ secretName, namespace, blocking: true }),\n    label: t('SINGLE:MSG_SECRETS_SECRETDETAILS_DIV1_BUTTON_1'),\n  };\n};\n\nconst actionButtons = [addSecretToWorkload];\n\nconst menuActions = [Kebab.factory.ModifyLabels, Kebab.factory.ModifyAnnotations, Kebab.factory.EditSecret, Kebab.factory.Delete];\n\nconst kind = 'Secret';\n\nconst tableColumnClasses = [classNames('col-md-3', 'col-sm-4', 'col-xs-6'), classNames('col-md-3', 'col-sm-4', 'col-xs-6'), classNames('col-md-3', 'col-sm-4', 'hidden-xs'), classNames('col-lg-1', 'hidden-md', 'hidden-sm', 'hidden-xs'), classNames('col-md-3', 'hidden-sm', 'hidden-xs'), Kebab.columnClass];\n\nconst SecretTableHeader = t => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_17'),\n      sortField: 'type',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_18'),\n      sortFunc: 'dataSize',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_12'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nSecretTableHeader.displayName = 'SecretTableHeader';\n\nconst SecretTableRow = ({ obj: secret, index, key, style }) => {\n  const data = _.size(secret.data);\n  return (\n    <TableRow id={secret.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind=\"Secret\" name={secret.metadata.name} namespace={secret.metadata.namespace} title={secret.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={secret.metadata.namespace} title={secret.metadata.namespace} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[2], 'co-break-word')}>{secret.type}</TableData>\n      <TableData className={tableColumnClasses[3]}>{data}</TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Timestamp timestamp={secret.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={secret} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst SecretDetails = ({ obj: secret }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: ResourceLabel(secret, t) })} />\n        <ResourceSummary resource={secret} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SecretData data={secret.data} type={secret.type} />\n      </div>\n    </>\n  );\n};\n\nconst SecretsList = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Secrets\" Header={SecretTableHeader.bind(null, t)} Row={SecretTableRow} virtualize />;\n};\nSecretsList.displayName = 'SecretsList';\n\nconst IMAGE_FILTER_VALUE = 'Image';\nconst SOURCE_FILTER_VALUE = 'Source';\nconst TLS_FILTER_VALUE = 'TLS';\nconst SA_TOKEN_FILTER_VALUE = 'Service Account Token';\nconst OPAQUE_FILTER_VALUE = 'Opaque';\n\nconst secretTypeFilterValues = [IMAGE_FILTER_VALUE, SOURCE_FILTER_VALUE, TLS_FILTER_VALUE, SA_TOKEN_FILTER_VALUE, OPAQUE_FILTER_VALUE];\n\nexport const secretTypeFilterReducer = secret => {\n  switch (secret.type) {\n    case SecretType.dockercfg:\n    case SecretType.dockerconfigjson:\n      return IMAGE_FILTER_VALUE;\n\n    case SecretType.basicAuth:\n    case SecretType.sshAuth:\n      return SOURCE_FILTER_VALUE;\n\n    case SecretType.tls:\n      return TLS_FILTER_VALUE;\n\n    case SecretType.serviceAccountToken:\n      return SA_TOKEN_FILTER_VALUE;\n\n    default:\n      // This puts all unrecognized types under \"Opaque\". Since unrecognized types should be uncommon,\n      // it avoids an \"Other\" category that is usually empty.\n      return OPAQUE_FILTER_VALUE;\n  }\n};\n\nconst filters = [\n  {\n    filterGroupName: 'Type',\n    type: 'secret-type',\n    reducer: secretTypeFilterReducer,\n    items: secretTypeFilterValues.map(filterValue => ({ id: filterValue, title: filterValue })),\n  },\n];\n\nconst SecretsPage = props => {\n  const { t } = useTranslation();\n\n  const createItems = {\n    generic: t('SINGLE:MSG_SECRETS_MAIN_BUTTON_1'),\n    image: t('SINGLE:MSG_SECRETS_MAIN_BUTTON_2'),\n    source: t('SINGLE:MSG_SECRETS_MAIN_BUTTON_3'),\n    webhook: t('SINGLE:MSG_SECRETS_MAIN_BUTTON_4'),\n    yaml: t('SINGLE:MSG_SECRETS_MAIN_BUTTON_5'),\n  };\n\n  const createProps = {\n    items: createItems,\n    createLink: type => `/k8s/ns/${props.namespace || 'default'}/secrets/~new/${type !== 'yaml' ? type : ''}`,\n  };\n\n  return <ListPage title={t('COMMON:MSG_LNB_MENU_26')} createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: t('COMMON:MSG_LNB_MENU_26') })} ListComponent={SecretsList} canCreate={true} rowFilters={filters} createProps={createProps} {...props} />;\n};\n\nconst SecretsDetailsPage = props => <DetailsPage {...props} buttonActions={actionButtons} menuActions={menuActions} pages={[navFactory.details(detailsPage(SecretDetails)), navFactory.editYaml()]} />;\n\nexport { SecretsList, SecretsPage, SecretsDetailsPage };\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Base64 } from 'js-base64';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\n\nimport { k8sCreate, k8sUpdate, K8sResourceKind, referenceFor } from '../../module/k8s';\nimport {\n  ButtonBar,\n  Firehose,\n  history,\n  StatusBox,\n  LoadingBox,\n  Dropdown,\n  resourceObjPath,\n} from '../utils';\nimport { ModalBody, ModalTitle, ModalSubmitFooter } from '../factory/modal';\nimport { AsyncComponent } from '../utils/async';\nimport { SecretModel } from '../../models';\nimport { WebHookSecretKey } from '../secret';\n\nexport enum SecretTypeAbstraction {\n  generic = 'generic',\n  source = 'source',\n  image = 'image',\n  webhook = 'webhook',\n}\n\nconst secretDisplayType = (abstraction: SecretTypeAbstraction) => {\n  switch (abstraction) {\n    case 'generic':\n      return 'Key/Value';\n    case 'image':\n      return 'Image Pull';\n    default:\n      return _.upperFirst(abstraction);\n  }\n};\n\nconst AUTHS_KEY = 'auths';\n\nexport enum SecretType {\n  basicAuth = 'kubernetes.io/basic-auth',\n  dockercfg = 'kubernetes.io/dockercfg',\n  dockerconfigjson = 'kubernetes.io/dockerconfigjson',\n  opaque = 'Opaque',\n  serviceAccountToken = 'kubernetes.io/service-account-token',\n  sshAuth = 'kubernetes.io/ssh-auth',\n  tls = 'kubernetes.io/tls',\n}\n\nexport type BasicAuthSubformState = {\n  username: string;\n  password: string;\n};\n\nconst secretFormExplanation = {\n  [SecretTypeAbstraction.generic]:\n    'Key/value secrets let you inject sensitive data into your application as files or environment variables.',\n  [SecretTypeAbstraction.source]: 'Source secrets let you authenticate against a Git server.',\n  [SecretTypeAbstraction.image]:\n    'Image pull secrets let you authenticate against a private image registry.',\n  [SecretTypeAbstraction.webhook]: 'Webhook secrets let you authenticate a webhook trigger.',\n};\n\nconst toDefaultSecretType = (typeAbstraction: SecretTypeAbstraction): SecretType => {\n  switch (typeAbstraction) {\n    case SecretTypeAbstraction.source:\n      return SecretType.basicAuth;\n    case SecretTypeAbstraction.image:\n      return SecretType.dockerconfigjson;\n    default:\n      return SecretType.opaque;\n  }\n};\n\nconst toTypeAbstraction = (obj): SecretTypeAbstraction => {\n  const { data, type } = obj;\n  switch (type) {\n    case SecretType.basicAuth:\n    case SecretType.sshAuth:\n      return SecretTypeAbstraction.source;\n    case SecretType.dockerconfigjson:\n    case SecretType.dockercfg:\n      return SecretTypeAbstraction.image;\n    default:\n      if (data[WebHookSecretKey] && _.size(data) === 1) {\n        return SecretTypeAbstraction.webhook;\n      }\n      return SecretTypeAbstraction.generic;\n  }\n};\n\nconst generateSecret = () => {\n  // http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n  const s4 = () =>\n    Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  return s4() + s4() + s4() + s4();\n};\n\n// withSecretForm returns SubForm which is a Higher Order Component for all the types of secret forms.\nexport const withSecretForm = (SubForm, modal?: boolean) =>\n  class SecretFormComponent extends React.Component<BaseEditSecretProps_, BaseEditSecretState_> {\n    constructor(props) {\n      super(props);\n      const existingSecret = _.pick(props.obj, ['metadata', 'type']);\n      const defaultSecretType = toDefaultSecretType(this.props.secretTypeAbstraction);\n      const secret = _.defaultsDeep({}, props.fixed, existingSecret, {\n        apiVersion: 'v1',\n        data: {},\n        kind: 'Secret',\n        metadata: {\n          name: '',\n        },\n        type: defaultSecretType,\n      });\n\n      this.state = {\n        secretTypeAbstraction: this.props.secretTypeAbstraction,\n        secret,\n        inProgress: false,\n        type: defaultSecretType,\n        stringData: _.mapValues(_.get(props.obj, 'data'), (value) => {\n          return value ? Base64.decode(value) : '';\n        }),\n        disableForm: false,\n      };\n      this.onDataChanged = this.onDataChanged.bind(this);\n      this.onNameChanged = this.onNameChanged.bind(this);\n      this.onError = this.onError.bind(this);\n      this.onFormDisable = this.onFormDisable.bind(this);\n      this.save = this.save.bind(this);\n    }\n    onDataChanged(secretsData) {\n      this.setState({\n        stringData: { ...secretsData.stringData },\n        type: secretsData.type,\n      });\n    }\n    onError(err) {\n      this.setState({\n        error: err,\n        inProgress: false,\n      });\n    }\n    onNameChanged(event) {\n      const name = event.target.value;\n      this.setState((state: BaseEditSecretState_) => {\n        const secret = _.cloneDeep(state.secret);\n        secret.metadata.name = name;\n        return { secret };\n      });\n    }\n    onFormDisable(disable) {\n      this.setState({\n        disableForm: disable,\n      });\n    }\n    save(e) {\n      e.preventDefault();\n      const { metadata } = this.state.secret;\n      this.setState({ inProgress: true });\n      const newSecret = _.assign(\n        {},\n        this.state.secret,\n        { stringData: this.state.stringData },\n        { type: this.state.type },\n      );\n      (this.props.isCreate\n        ? k8sCreate(SecretModel, newSecret)\n        : k8sUpdate(SecretModel, newSecret, metadata.namespace, newSecret.metadata.name)\n      ).then(\n        (secret) => {\n          this.setState({ inProgress: false });\n          if (this.props.onSave) {\n            this.props.onSave(secret.metadata.name);\n          }\n          if (!modal) {\n            history.push(resourceObjPath(secret, referenceFor(secret)));\n          }\n        },\n        (err) => this.setState({ error: err.message, inProgress: false }),\n      );\n    }\n\n    renderBody = () => {\n      return (\n        <>\n          <fieldset disabled={!this.props.isCreate}>\n            <div className=\"form-group\">\n              <label className=\"control-label co-required\" htmlFor=\"secret-name\">\n                Secret Name\n              </label>\n              <div>\n                <input\n                  className=\"pf-c-form-control\"\n                  type=\"text\"\n                  onChange={this.onNameChanged}\n                  value={this.state.secret.metadata.name}\n                  aria-describedby=\"secret-name-help\"\n                  id=\"secret-name\"\n                  required\n                />\n                <p className=\"help-block\" id=\"secret-name-help\">\n                  Unique name of the new secret.\n                </p>\n              </div>\n            </div>\n          </fieldset>\n          <SubForm\n            onChange={this.onDataChanged}\n            onError={this.onError}\n            onFormDisable={this.onFormDisable}\n            stringData={this.state.stringData}\n            secretType={this.state.secret.type}\n            isCreate={this.props.isCreate}\n          />\n        </>\n      );\n    };\n\n    render() {\n      const { secretTypeAbstraction } = this.state;\n      const { onCancel = history.goBack } = this.props;\n      const title = `${this.props.titleVerb} ${secretDisplayType(secretTypeAbstraction)} Secret`;\n      return modal ? (\n        <form className=\"co-create-secret-form modal-content\" onSubmit={this.save}>\n          <ModalTitle>{title}</ModalTitle>\n          <ModalBody>{this.renderBody()}</ModalBody>\n          <ModalSubmitFooter\n            errorMessage={this.state.error || ''}\n            inProgress={this.state.inProgress}\n            submitText=\"Create\"\n            cancel={this.props.onCancel}\n          />\n        </form>\n      ) : (\n        <div className=\"co-m-pane__body\">\n          <Helmet>\n            <title>{title}</title>\n          </Helmet>\n          <form\n            className=\"co-m-pane__body-group co-create-secret-form co-m-pane__form\"\n            onSubmit={this.save}\n          >\n            <h1 className=\"co-m-pane__heading\">{title}</h1>\n            <p className=\"co-m-pane__explanation\">{this.props.explanation}</p>\n            {this.renderBody()}\n            <ButtonBar errorMessage={this.state.error} inProgress={this.state.inProgress}>\n              <ActionGroup className=\"pf-c-form\">\n                <Button\n                  type=\"submit\"\n                  isDisabled={this.state.disableForm}\n                  variant=\"primary\"\n                  id=\"save-changes\"\n                >\n                  {this.props.saveButtonText || 'Create'}\n                </Button>\n                <Button type=\"button\" variant=\"secondary\" id=\"cancel\" onClick={onCancel}>\n                  Cancel\n                </Button>\n              </ActionGroup>\n            </ButtonBar>\n          </form>\n        </div>\n      );\n    }\n  };\n\nconst getImageSecretKey = (secretType: SecretType): string => {\n  switch (secretType) {\n    case SecretType.dockercfg:\n      return '.dockercfg';\n    case SecretType.dockerconfigjson:\n      return '.dockerconfigjson';\n    default:\n      return secretType;\n  }\n};\n\nconst getImageSecretType = (secretKey: string): SecretType => {\n  switch (secretKey) {\n    case '.dockercfg':\n      return SecretType.dockercfg;\n    case '.dockerconfigjson':\n      return SecretType.dockerconfigjson;\n    default:\n      return SecretType.opaque;\n  }\n};\n\nexport class ImageSecretForm extends React.Component<ImageSecretFormProps, ImageSecretFormState> {\n  constructor(props) {\n    super(props);\n    const data = this.props.isCreate ? { '.dockerconfigjson': '{}' } : this.props.stringData;\n    let parsedData;\n    try {\n      parsedData = _.mapValues(data, JSON.parse);\n    } catch (err) {\n      this.props.onError(`Error parsing secret's data: ${err.message}`);\n      parsedData = { '.dockerconfigjson': {} };\n    }\n    this.state = {\n      type: this.props.secretType,\n      dataKey: getImageSecretKey(this.props.secretType),\n      stringData: parsedData,\n      authType: 'credentials',\n    };\n    this.onDataChanged = this.onDataChanged.bind(this);\n    this.changeFormType = this.changeFormType.bind(this);\n    this.onFormDisable = this.onFormDisable.bind(this);\n  }\n  onDataChanged(secretData) {\n    const dataKey = secretData[AUTHS_KEY] ? '.dockerconfigjson' : '.dockercfg';\n    this.setState(\n      {\n        stringData: { [dataKey]: secretData },\n      },\n      () =>\n        this.props.onChange({\n          stringData: _.mapValues(this.state.stringData, JSON.stringify),\n          type: getImageSecretType(dataKey),\n        }),\n    );\n  }\n  changeFormType(authType) {\n    this.setState({\n      authType,\n    });\n  }\n  onFormDisable(disable) {\n    this.props.onFormDisable(disable);\n  }\n  render() {\n    const authTypes = {\n      credentials: 'Image Registry Credentials',\n      'config-file': 'Upload Configuration File',\n    };\n    const data = _.get(this.state.stringData, this.state.dataKey);\n    return (\n      <>\n        {this.props.isCreate && (\n          <div className=\"form-group\">\n            <label className=\"control-label\" htmlFor=\"secret-type\">\n              Authentication Type\n            </label>\n            <div className=\"co-create-secret__dropdown\">\n              <Dropdown\n                items={authTypes}\n                dropDownClassName=\"dropdown--full-width\"\n                id=\"dropdown-selectbox\"\n                selectedKey={this.state.authType}\n                onChange={this.changeFormType}\n              />\n            </div>\n          </div>\n        )}\n        {this.state.authType === 'credentials' ? (\n          <CreateConfigSubform onChange={this.onDataChanged} stringData={data} />\n        ) : (\n          <UploadConfigSubform\n            onChange={this.onDataChanged}\n            stringData={data}\n            onDisable={this.onFormDisable}\n          />\n        )}\n      </>\n    );\n  }\n}\n\ntype ConfigEntryFormState = {\n  address: string;\n  username: string;\n  password: string;\n  email: string;\n  auth: string;\n  uid: string;\n};\n\ntype ConfigEntryFormProps = {\n  id: number;\n  entry: Object;\n  onChange: Function;\n};\n\nclass ConfigEntryForm extends React.Component<ConfigEntryFormProps, ConfigEntryFormState> {\n  constructor(props: ConfigEntryFormProps) {\n    super(props);\n    this.state = {\n      address: _.get(this.props.entry, 'address'),\n      username: _.get(this.props.entry, 'username'),\n      password: _.get(this.props.entry, 'password'),\n      email: _.get(this.props.entry, 'email'),\n      auth: _.get(this.props.entry, 'auth'),\n      uid: _.get(this.props, 'uid'),\n    };\n  }\n\n  propagateChange = () => {\n    const { onChange, id } = this.props;\n    onChange(this.state, id);\n  };\n\n  onAddressChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ address: event.currentTarget.value }, this.propagateChange);\n  };\n\n  onUsernameChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    const username = event.currentTarget.value;\n    this.setState(\n      (state: ConfigEntryFormState) => ({\n        username,\n        auth: Base64.encode(`${username}:${state.password}`),\n      }),\n      this.propagateChange,\n    );\n  };\n\n  onPasswordChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    const password = event.currentTarget.value;\n    this.setState(\n      (state: ConfigEntryFormState) => ({\n        password,\n        auth: Base64.encode(`${state.username}:${password}`),\n      }),\n      this.propagateChange,\n    );\n  };\n\n  onEmailChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ email: event.currentTarget.value }, this.propagateChange);\n  };\n\n  render() {\n    return (\n      <div className=\"co-m-pane__body-group\" data-test-id=\"create-image-secret-form\">\n        <div className=\"form-group\">\n          <label className=\"control-label co-required\" htmlFor={`${this.props.id}-address`}>\n            Registry Server Address\n          </label>\n          <div>\n            <input\n              className=\"pf-c-form-control\"\n              id={`${this.props.id}-address`}\n              type=\"text\"\n              name=\"address\"\n              onChange={this.onAddressChanged}\n              value={this.state.address}\n              required\n            />\n          </div>\n        </div>\n        <div className=\"form-group\">\n          <label className=\"control-label co-required\" htmlFor={`${this.props.id}-username`}>\n            Username\n          </label>\n          <div>\n            <input\n              className=\"pf-c-form-control\"\n              id={`${this.props.id}-username`}\n              type=\"text\"\n              name=\"username\"\n              onChange={this.onUsernameChanged}\n              value={this.state.username}\n              required\n            />\n          </div>\n        </div>\n        <div className=\"form-group\">\n          <label className=\"control-label co-required\" htmlFor={`${this.props.id}-password`}>\n            Password\n          </label>\n          <div>\n            <input\n              className=\"pf-c-form-control\"\n              id={`${this.props.id}-password`}\n              type=\"password\"\n              name=\"password\"\n              onChange={this.onPasswordChanged}\n              value={this.state.password}\n              required\n            />\n          </div>\n        </div>\n        <div className=\"form-group\">\n          <label className=\"control-label\" htmlFor={`${this.props.id}-email`}>\n            Email\n          </label>\n          <div>\n            <input\n              className=\"pf-c-form-control\"\n              id={`${this.props.id}-email`}\n              type=\"text\"\n              name=\"email\"\n              onChange={this.onEmailChanged}\n              value={this.state.email}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\ntype CreateConfigSubformState = {\n  isDockerconfigjson: boolean;\n  hasDuplicate: boolean;\n  secretEntriesArray: {\n    entry: {\n      address: string;\n      username: string;\n      password: string;\n      email: string;\n      auth: string;\n    };\n    uid: string;\n  }[];\n};\n\nexport class CreateConfigSubform extends React.Component<\n  CreateConfigSubformProps,\n  CreateConfigSubformState\n> {\n  constructor(props: CreateConfigSubformProps) {\n    super(props);\n    this.state = {\n      // If user creates a new image secret by filling out the form a 'kubernetes.io/dockerconfigjson' secret will be created.\n      isDockerconfigjson: _.isEmpty(this.props.stringData) || !!this.props.stringData[AUTHS_KEY],\n      secretEntriesArray: this.imageSecretObjectToArray(\n        this.props.stringData[AUTHS_KEY] || this.props.stringData,\n      ),\n      hasDuplicate: false,\n    };\n    this.onDataChanged = this.onDataChanged.bind(this);\n  }\n  newImageSecretEntry() {\n    return {\n      entry: {\n        address: '',\n        username: '',\n        password: '',\n        email: '',\n        auth: '',\n      },\n      uid: _.uniqueId(),\n    };\n  }\n  imageSecretObjectToArray(imageSecretObject) {\n    const imageSecretArray = [];\n    if (_.isEmpty(imageSecretObject)) {\n      return _.concat(imageSecretArray, this.newImageSecretEntry());\n    }\n    _.each(imageSecretObject, (v, k) => {\n      // Decode and parse 'auth' in case 'username' and 'password' are not part of the secret.\n      const decodedAuth = Base64.decode(_.get(v, 'auth', ''));\n      const parsedAuth = _.isEmpty(decodedAuth) ? _.fill(Array(2), '') : _.split(decodedAuth, ':');\n      imageSecretArray.push({\n        entry: {\n          address: k,\n          username: _.get(v, 'username', parsedAuth[0]),\n          password: _.get(v, 'password', parsedAuth[1]),\n          email: _.get(v, 'email', ''),\n          auth: _.get(v, 'auth', ''),\n        },\n        uid: _.get(v, 'uid', _.uniqueId()),\n      });\n    });\n    return imageSecretArray;\n  }\n  imageSecretArrayToObject(imageSecretArray) {\n    const imageSecretsObject = {};\n    _.each(imageSecretArray, (value) => {\n      imageSecretsObject[value.entry.address] = _.pick(value.entry, [\n        'username',\n        'password',\n        'auth',\n        'email',\n      ]);\n    });\n    return imageSecretsObject;\n  }\n  propagateEntryChange(secretEntriesArray) {\n    const imageSecretObject = this.imageSecretArrayToObject(secretEntriesArray);\n    this.props.onChange(\n      this.state.isDockerconfigjson ? { [AUTHS_KEY]: imageSecretObject } : imageSecretObject,\n    );\n  }\n  onDataChanged(updatedEntry, entryIndex: number) {\n    this.setState(\n      (state: CreateConfigSubformState) => {\n        const secretEntriesArray = [...state.secretEntriesArray];\n        const updatedEntryData = {\n          uid: secretEntriesArray[entryIndex].uid,\n          entry: updatedEntry,\n        };\n        secretEntriesArray[entryIndex] = updatedEntryData;\n        return {\n          secretEntriesArray,\n        };\n      },\n      () => this.propagateEntryChange(this.state.secretEntriesArray),\n    );\n  }\n  removeEntry(entryIndex: number) {\n    this.setState(\n      (state: CreateConfigSubformState) => {\n        const secretEntriesArray = [...state.secretEntriesArray];\n        secretEntriesArray.splice(entryIndex, 1);\n        return { secretEntriesArray };\n      },\n      () => this.propagateEntryChange(this.state.secretEntriesArray),\n    );\n  }\n  addEntry() {\n    this.setState(\n      {\n        secretEntriesArray: _.concat(this.state.secretEntriesArray, this.newImageSecretEntry()),\n      },\n      () => {\n        this.propagateEntryChange(this.state.secretEntriesArray);\n      },\n    );\n  }\n  render() {\n    const secretEntriesList = _.map(this.state.secretEntriesArray, (entryData, index) => {\n      return (\n        <div className=\"co-add-remove-form__entry\" key={entryData.uid}>\n          {_.size(this.state.secretEntriesArray) > 1 && (\n            <div className=\"co-add-remove-form__link--remove-entry\">\n              <Button onClick={() => this.removeEntry(index)} type=\"button\" variant=\"link\">\n                <MinusCircleIcon className=\"co-icon-space-r\" />\n                Remove Credentials\n              </Button>\n            </div>\n          )}\n          <ConfigEntryForm id={index} entry={entryData.entry} onChange={this.onDataChanged} />\n        </div>\n      );\n    });\n    return (\n      <>\n        {secretEntriesList}\n        <Button\n          className=\"co-create-secret-form__link--add-entry pf-m-link--align-left\"\n          onClick={() => this.addEntry()}\n          type=\"button\"\n          variant=\"link\"\n        >\n          <PlusCircleIcon className=\"co-icon-space-r\" />\n          Add Credentials\n        </Button>\n      </>\n    );\n  }\n}\n\nclass UploadConfigSubform extends React.Component<\n  UploadConfigSubformProps,\n  UploadConfigSubformState\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      configFile: _.isEmpty(this.props.stringData) ? '' : JSON.stringify(this.props.stringData),\n      parseError: false,\n    };\n    this.changeData = this.changeData.bind(this);\n    this.onFileChange = this.onFileChange.bind(this);\n  }\n  changeData(event) {\n    this.updateState(_.attempt(JSON.parse, event.target.value), event.target.value);\n  }\n  onFileChange(fileData) {\n    this.updateState(_.attempt(JSON.parse, fileData), fileData);\n  }\n  updateState(parsedData, stringData) {\n    this.setState(\n      {\n        configFile: stringData,\n        parseError: _.isError(parsedData),\n      },\n      () => {\n        this.props.onChange(parsedData);\n        this.props.onDisable(this.state.parseError);\n      },\n    );\n  }\n  render() {\n    return (\n      <>\n        <DroppableFileInput\n          onChange={this.onFileChange}\n          inputFileData={this.state.configFile}\n          id=\"docker-config\"\n          label=\"Configuration File\"\n          inputFieldHelpText=\"Upload a .dockercfg or .docker/config.json file.\"\n          textareaFieldHelpText=\"File with credentials and other configuration for connecting to a secured image registry.\"\n          isRequired={true}\n        />\n        {this.state.parseError && (\n          <div className=\"co-create-secret-warning\">\n            Configuration file should be in JSON format.\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nclass WebHookSecretForm extends React.Component<WebHookSecretFormProps, WebHookSecretFormState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stringData: { WebHookSecretKey: this.props.stringData.WebHookSecretKey || '' },\n    };\n    this.changeWebHookSecretkey = this.changeWebHookSecretkey.bind(this);\n    this.generateWebHookSecret = this.generateWebHookSecret.bind(this);\n  }\n  changeWebHookSecretkey(event) {\n    this.setState(\n      {\n        stringData: { WebHookSecretKey: event.target.value },\n      },\n      () => this.props.onChange(this.state),\n    );\n  }\n  generateWebHookSecret() {\n    this.setState(\n      {\n        stringData: { WebHookSecretKey: generateSecret() },\n      },\n      () => this.props.onChange(this.state),\n    );\n  }\n  render() {\n    return (\n      <div className=\"form-group\">\n        <label className=\"control-label co-required\" htmlFor=\"webhook-secret-key\">\n          Webhook Secret Key\n        </label>\n        <div className=\"pf-c-input-group\">\n          <input\n            className=\"pf-c-form-control\"\n            id=\"webhook-secret-key\"\n            type=\"text\"\n            name=\"webhookSecretKey\"\n            onChange={this.changeWebHookSecretkey}\n            value={this.state.stringData.WebHookSecretKey}\n            aria-describedby=\"webhook-secret-help\"\n            required\n          />\n          <button\n            type=\"button\"\n            onClick={this.generateWebHookSecret}\n            className=\"pf-c-button pf-m-tertiary\"\n          >\n            Generate\n          </button>\n        </div>\n        <p className=\"help-block\" id=\"webhook-secret-help\">\n          Value of the secret will be supplied when invoking the webhook.{' '}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport class SourceSecretForm extends React.Component<\n  SourceSecretFormProps,\n  SourceSecretFormState\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      type: this.props.secretType,\n      stringData: this.props.stringData || {},\n      authType: SecretType.basicAuth,\n    };\n    this.changeAuthenticationType = this.changeAuthenticationType.bind(this);\n    this.onDataChanged = this.onDataChanged.bind(this);\n  }\n  changeAuthenticationType(type: SecretType) {\n    this.setState(\n      {\n        type,\n      },\n      () => this.props.onChange(this.state),\n    );\n  }\n  onDataChanged(secretsData) {\n    this.setState(\n      {\n        stringData: { ...secretsData },\n      },\n      () => this.props.onChange(this.state),\n    );\n  }\n  render() {\n    const authTypes = {\n      [SecretType.basicAuth]: 'Basic Authentication',\n      [SecretType.sshAuth]: 'SSH Key',\n    };\n    return (\n      <>\n        {this.props.isCreate ? (\n          <div className=\"form-group\">\n            <label className=\"control-label\" htmlFor=\"secret-type\">\n              Authentication Type\n            </label>\n            <div className=\"co-create-secret__dropdown\">\n              <Dropdown\n                items={authTypes}\n                dropDownClassName=\"dropdown--full-width\"\n                id=\"dropdown-selectbox\"\n                selectedKey={this.state.authType}\n                onChange={this.changeAuthenticationType}\n              />\n            </div>\n          </div>\n        ) : null}\n        {this.state.type === SecretType.basicAuth ? (\n          <BasicAuthSubform onChange={this.onDataChanged} stringData={this.state.stringData} />\n        ) : (\n          <SSHAuthSubform onChange={this.onDataChanged} stringData={this.state.stringData} />\n        )}\n      </>\n    );\n  }\n}\n\nexport class BasicAuthSubform extends React.Component<\n  BasicAuthSubformProps,\n  BasicAuthSubformState\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: this.props.stringData.username || '',\n      password: this.props.stringData.password || '',\n    };\n    this.changeData = this.changeData.bind(this);\n  }\n  changeData(event) {\n    this.setState(\n      {\n        [event.target.name]: event.target.value,\n      } as BasicAuthSubformState,\n      () => this.props.onChange(this.state),\n    );\n  }\n  render() {\n    return (\n      <>\n        <div className=\"form-group\">\n          <label className=\"control-label\" htmlFor=\"username\">\n            Username\n          </label>\n          <div>\n            <input\n              className=\"pf-c-form-control\"\n              id=\"username\"\n              aria-describedby=\"username-help\"\n              type=\"text\"\n              name=\"username\"\n              onChange={this.changeData}\n              value={this.state.username}\n            />\n            <p className=\"help-block\" id=\"username-help\">\n              Optional username for Git authentication.\n            </p>\n          </div>\n        </div>\n        <div className=\"form-group\">\n          <label className=\"control-label co-required\" htmlFor=\"password\">\n            Password or Token\n          </label>\n          <div>\n            <input\n              className=\"pf-c-form-control\"\n              id=\"password\"\n              aria-describedby=\"password-help\"\n              type=\"password\"\n              name=\"password\"\n              onChange={this.changeData}\n              value={this.state.password}\n              required\n            />\n            <p className=\"help-block\" id=\"password-help\">\n              Password or token for Git authentication. Required if a ca.crt or .gitconfig file is\n              not specified.\n            </p>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst DroppableFileInput = (props) => (\n  <AsyncComponent\n    loader={() => import('../utils/file-input').then((c) => c.DroppableFileInput)}\n    {...props}\n  />\n);\n\nexport class SSHAuthSubform extends React.Component<SSHAuthSubformProps, SSHAuthSubformState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      'ssh-privatekey': this.props.stringData['ssh-privatekey'] || '',\n    };\n    this.changeData = this.changeData.bind(this);\n    this.onFileChange = this.onFileChange.bind(this);\n  }\n  changeData(event) {\n    this.setState(\n      {\n        'ssh-privatekey': event.target.value,\n      },\n      () => this.props.onChange(this.state),\n    );\n  }\n  onFileChange(fileData) {\n    this.setState(\n      {\n        'ssh-privatekey': fileData,\n      },\n      () => this.props.onChange(this.state),\n    );\n  }\n  render() {\n    return (\n      <DroppableFileInput\n        onChange={this.onFileChange}\n        inputFileData={this.state['ssh-privatekey']}\n        id=\"ssh-privatekey\"\n        label=\"SSH Private Key\"\n        inputFieldHelpText=\"Drag and drop file with your private SSH key here or browse to upload it.\"\n        textareaFieldHelpText=\"Private SSH key file for Git authentication.\"\n        isRequired={true}\n      />\n    );\n  }\n}\n\ntype KeyValueEntryFormState = {\n  key: string;\n  value: string;\n};\n\ntype KeyValueEntryFormProps = {\n  entry: KeyValueEntryFormState;\n  id: number;\n  onChange: Function;\n};\n\ntype GenericSecretFormProps = {\n  onChange: Function;\n  stringData: {\n    [key: string]: string;\n  };\n  secretType: SecretType;\n  isCreate: boolean;\n};\n\ntype GenericSecretFormState = {\n  secretEntriesArray: {\n    entry: KeyValueEntryFormState;\n    uid: string;\n  }[];\n};\n\nclass GenericSecretForm extends React.Component<GenericSecretFormProps, GenericSecretFormState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      secretEntriesArray: this.genericSecretObjectToArray(this.props.stringData),\n    };\n    this.onDataChanged = this.onDataChanged.bind(this);\n  }\n  newGenericSecretEntry() {\n    return {\n      entry: {\n        key: '',\n        value: '',\n      },\n      uid: _.uniqueId(),\n    };\n  }\n  genericSecretObjectToArray(genericSecretObject) {\n    if (_.isEmpty(genericSecretObject)) {\n      return [this.newGenericSecretEntry()];\n    }\n    return _.map(genericSecretObject, (value, key) => ({\n      uid: _.uniqueId(),\n      entry: {\n        key,\n        value,\n      },\n    }));\n  }\n  genericSecretArrayToObject(genericSecretArray) {\n    return _.reduce(\n      genericSecretArray,\n      (acc, k) => _.assign(acc, { [k.entry.key]: k.entry.value }),\n      {},\n    );\n  }\n  onDataChanged(updatedEntry, entryID) {\n    const updatedSecretEntriesArray = [...this.state.secretEntriesArray];\n    const updatedEntryData = {\n      uid: updatedSecretEntriesArray[entryID].uid,\n      entry: updatedEntry,\n    };\n    updatedSecretEntriesArray[entryID] = updatedEntryData;\n    this.setState(\n      {\n        secretEntriesArray: updatedSecretEntriesArray,\n      },\n      () =>\n        this.props.onChange({\n          stringData: this.genericSecretArrayToObject(this.state.secretEntriesArray),\n          type: SecretType.opaque,\n        }),\n    );\n  }\n  removeEntry(entryID) {\n    const updatedSecretEntriesArray = [...this.state.secretEntriesArray];\n    updatedSecretEntriesArray.splice(entryID, 1);\n    this.setState(\n      {\n        secretEntriesArray: updatedSecretEntriesArray,\n      },\n      () =>\n        this.props.onChange({\n          stringData: this.genericSecretArrayToObject(this.state.secretEntriesArray),\n          type: SecretType.opaque,\n        }),\n    );\n  }\n  addEntry() {\n    this.setState(\n      {\n        secretEntriesArray: _.concat(this.state.secretEntriesArray, this.newGenericSecretEntry()),\n      },\n      () =>\n        this.props.onChange({\n          stringData: this.genericSecretArrayToObject(this.state.secretEntriesArray),\n          type: SecretType.opaque,\n        }),\n    );\n  }\n  render() {\n    const secretEntriesList = _.map(this.state.secretEntriesArray, (entryData, index) => {\n      return (\n        <div className=\"co-add-remove-form__entry\" key={entryData.uid}>\n          {_.size(this.state.secretEntriesArray) > 1 && (\n            <div className=\"co-add-remove-form__link--remove-entry\">\n              <Button type=\"button\" onClick={() => this.removeEntry(index)} variant=\"link\">\n                <MinusCircleIcon className=\"co-icon-space-r\" />\n                Remove Key/Value\n              </Button>\n            </div>\n          )}\n          <KeyValueEntryForm id={index} entry={entryData.entry} onChange={this.onDataChanged} />\n        </div>\n      );\n    });\n    return (\n      <>\n        {secretEntriesList}\n        <Button\n          className=\"co-create-secret-form__link--add-entry pf-m-link--align-left\"\n          onClick={() => this.addEntry()}\n          type=\"button\"\n          variant=\"link\"\n        >\n          <PlusCircleIcon className=\"co-icon-space-r\" />\n          Add Key/Value\n        </Button>\n      </>\n    );\n  }\n}\n\nclass KeyValueEntryForm extends React.Component<KeyValueEntryFormProps, KeyValueEntryFormState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      key: props.entry.key,\n      value: props.entry.value,\n    };\n    this.onValueChange = this.onValueChange.bind(this);\n    this.onKeyChange = this.onKeyChange.bind(this);\n  }\n  onValueChange(fileData) {\n    this.setState(\n      {\n        value: fileData,\n      },\n      () => this.props.onChange(this.state, this.props.id),\n    );\n  }\n  onKeyChange(event) {\n    this.setState(\n      {\n        key: event.target.value,\n      },\n      () => this.props.onChange(this.state, this.props.id),\n    );\n  }\n  render() {\n    return (\n      <div className=\"co-create-generic-secret__form\">\n        <div className=\"form-group\">\n          <label className=\"control-label co-required\" htmlFor={`${this.props.id}-key`}>\n            Key\n          </label>\n          <div>\n            <input\n              className=\"pf-c-form-control\"\n              id={`${this.props.id}-key`}\n              type=\"text\"\n              name=\"key\"\n              onChange={this.onKeyChange}\n              value={this.state.key}\n              required\n            />\n          </div>\n        </div>\n        <div className=\"form-group\">\n          <div>\n            <DroppableFileInput\n              onChange={this.onValueChange}\n              inputFileData={this.state.value}\n              id={`${this.props.id}-value`}\n              label=\"Value\"\n              inputFieldHelpText=\"Drag and drop file with your value here or browse to upload it.\"\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst secretFormFactory = (secretType: SecretTypeAbstraction) => {\n  switch (secretType) {\n    case SecretTypeAbstraction.source:\n      return withSecretForm(SourceSecretForm);\n    case SecretTypeAbstraction.image:\n      return withSecretForm(ImageSecretForm);\n    case SecretTypeAbstraction.webhook:\n      return withSecretForm(WebHookSecretForm);\n    default:\n      return withSecretForm(GenericSecretForm);\n  }\n};\n\nclass SecretLoadingWrapper extends React.Component<\n  SecretLoadingWrapperProps,\n  SecretLoadingWrapperState\n> {\n  readonly state: SecretLoadingWrapperState = {\n    formComponent: null,\n    secretTypeAbstraction: SecretTypeAbstraction.generic,\n  };\n  componentDidUpdate() {\n    // Set the proper secret form component, once the secret is received by Firehose.\n    // 'formComponent' needs to be set only once, to avoid losing form state,\n    // caused by component mounting/unmounting.\n    if (!this.state.formComponent && !_.isEmpty(this.props.obj.data)) {\n      const secretTypeAbstraction = toTypeAbstraction(this.props.obj.data);\n      this.setState({\n        formComponent: secretFormFactory(secretTypeAbstraction),\n        secretTypeAbstraction,\n      });\n    }\n  }\n  render() {\n    const { obj, fixedKeys } = this.props;\n    const { secretTypeAbstraction } = this.state;\n    if (!this.state.formComponent) {\n      return <LoadingBox />;\n    }\n    const SecretFormComponent = this.state.formComponent;\n    const fixed = _.reduce(fixedKeys, (acc, k) => ({ ...acc, k: _.get(obj.data, k) }), {});\n    return (\n      <StatusBox {...obj}>\n        <SecretFormComponent\n          {...this.props}\n          secretTypeAbstraction={secretTypeAbstraction}\n          obj={obj.data}\n          fixed={fixed}\n          explanation={secretFormExplanation[secretTypeAbstraction]}\n        />\n      </StatusBox>\n    );\n  }\n}\n\nexport class CreateSecret extends React.Component<CreateSecretProps, CreateSecretState> {\n  readonly state: CreateSecretState = {\n    formComponent: secretFormFactory(this.props.match.params.type),\n    secretTypeAbstraction: this.props.match.params.type,\n  };\n  render() {\n    const { secretTypeAbstraction, formComponent } = this.state;\n    const { params } = this.props.match;\n    const SecretFormComponent = formComponent;\n    return (\n      <SecretFormComponent\n        fixed={{ metadata: { namespace: params.ns } }}\n        secretTypeAbstraction={secretTypeAbstraction}\n        explanation={secretFormExplanation[params.type]}\n        titleVerb=\"Create\"\n        isCreate={true}\n      />\n    );\n  }\n}\n\ntype CreateSecretProps = {\n  match: {\n    params: {\n      type: SecretTypeAbstraction;\n      ns: string;\n    };\n  };\n};\n\ntype CreateSecretState = {\n  formComponent: React.ReactType;\n  secretTypeAbstraction: SecretTypeAbstraction;\n};\n\nexport const EditSecret = ({ match: { params }, kind }) => (\n  <Firehose\n    resources={[{ kind, name: params.name, namespace: params.ns, isList: false, prop: 'obj' }]}\n  >\n    <SecretLoadingWrapper fixedKeys={['kind', 'metadata']} titleVerb=\"Edit\" saveButtonText=\"Save\" />\n  </Firehose>\n);\n\ntype SecretLoadingWrapperProps = {\n  obj?: {\n    data?: K8sResourceKind;\n    [key: string]: any;\n  };\n  fixedKeys: string[];\n  titleVerb: string;\n  saveButtonText: string;\n};\n\ntype SecretLoadingWrapperState = {\n  formComponent: React.ReactType;\n  secretTypeAbstraction: SecretTypeAbstraction;\n};\n\ntype BaseEditSecretState_ = {\n  secretTypeAbstraction?: SecretTypeAbstraction;\n  secret: K8sResourceKind;\n  inProgress: boolean;\n  type: SecretType;\n  stringData: {\n    [key: string]: string;\n  };\n  error?: any;\n  disableForm: boolean;\n};\n\ntype BaseEditSecretProps_ = {\n  obj?: K8sResourceKind;\n  fixed: any;\n  kind?: string;\n  isCreate: boolean;\n  titleVerb: string;\n  secretTypeAbstraction?: SecretTypeAbstraction;\n  saveButtonText?: string;\n  explanation?: string;\n  onCancel?: () => void;\n  onSave?: (name: string) => void;\n};\n\ntype BasicAuthSubformProps = {\n  onChange: Function;\n  stringData: {\n    [key: string]: string;\n  };\n};\n\ntype ImageSecretFormState = {\n  type: SecretType;\n  stringData: {\n    [key: string]: any;\n  };\n  authType: string;\n  dataKey: string;\n};\n\ntype ImageSecretFormProps = {\n  onChange: Function;\n  onError: Function;\n  onFormDisable: Function;\n  stringData: {\n    [key: string]: string;\n  };\n  secretType: SecretType;\n  isCreate: boolean;\n};\n\ntype CreateConfigSubformProps = {\n  onChange: Function;\n  stringData: {\n    [key: string]: any;\n  };\n};\n\ntype UploadConfigSubformState = {\n  parseError: boolean;\n  configFile: string;\n};\n\ntype UploadConfigSubformProps = {\n  onChange: Function;\n  onDisable: Function;\n  stringData: {\n    [key: string]: Object;\n  };\n};\n\ntype SSHAuthSubformState = {\n  'ssh-privatekey': string;\n};\n\ntype SSHAuthSubformProps = {\n  onChange: Function;\n  stringData: {\n    [key: string]: string;\n  };\n};\n\ntype SourceSecretFormState = {\n  type: SecretType;\n  stringData: {\n    [key: string]: string;\n  };\n  authType: SecretType.basicAuth | SecretType.sshAuth;\n};\n\ntype SourceSecretFormProps = {\n  onChange: Function;\n  stringData: {\n    [key: string]: string;\n  };\n  secretType: SecretType;\n  isCreate: boolean;\n};\n\ntype WebHookSecretFormState = {\n  stringData: {\n    [key: string]: string;\n  };\n};\n\ntype WebHookSecretFormProps = {\n  onChange: Function;\n  stringData: {\n    WebHookSecretKey: string;\n  };\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\n// import { connect } from 'react-redux';\n// import { Link } from 'react-router-dom';\n// import { Button } from '@patternfly/react-core';\n\nimport { FLAGS } from '@console/shared/src/constants';\n// import { createProjectMessageStateToProps } from '../reducers/ui';\n// import { Disabled, HintBlock, ExternalLink, openshiftHelpBase, LinkifyExternal } from './utils';\nimport { Disabled, HintBlock, HyperCloudManualLink } from './utils';\nimport { connectToFlags } from '../reducers/features';\nimport { ProjectModel, RoleModel, StorageClassModel } from '../models';\n// import { createProjectModal } from './modals/create-namespace-modal';\n\nconst WHITELIST = [RoleModel.kind, StorageClassModel.kind];\n\nexport const HypercloudGettingStarted = () => (\n  <>\n    <p>HyperCloud helps you quickly develop, host, and scale applications. To get started, you'll need a namespace. Currently, you can't create or access any namespaces. You'll need to contact a cluster administrator for help.</p>\n    <p>\n      To learn more, visit the HyperCloud <HyperCloudManualLink href={'https://technet.tmaxsoft.com/upload/download/online/hypercloud/pver-20200918-000001/4.1-ko/welcome/overview_sub/index.html'} text=\"manual\" />\n    </p>\n  </>\n);\n\n// export const OpenShiftGettingStarted = () => (\n//   <>\n//     <p>we don't have any namespace. </p>\n//     {canCreateProject ? (\n//       <p>OpenShift helps you quickly develop, host, and scale applications. To get started, create a project for your application.</p>\n//     ) : (\n//       <p>\n//         OpenShift helps you quickly develop, host, and scale applications. To get started, you'll need a project. Currently, you can't create or access any projects.\n//         {!createProjectMessage && \" You'll need to contact a cluster administrator for help.\"}\n//       </p>\n//     )}\n//     {createProjectMessage && (\n//       <p className=\"co-pre-line\">\n//         <LinkifyExternal>{createProjectMessage}</LinkifyExternal>\n//       </p>\n//     )}\n//     <p>\n//       To learn more, visit the OpenShift <ExternalLink href={openshiftHelpBase} text=\"documentation\" />.\n//     </p>\n//     <p>\n//       Download the <Link to=\"/command-line-tools\">command-line tools</Link>\n//     </p>\n//     {canCreateProject && (\n//       <Button variant=\"link\" onClick={() => createProjectModal({ blocking: true })}>\n//         Create a new project\n//       </Button>\n//     )}\n//   </>\n// );\n\nexport const withStartGuide = (WrappedComponent, disable: boolean = true) =>\n  connectToFlags(\n    FLAGS.SHOW_OPENSHIFT_START_GUIDE,\n    FLAGS.CAN_CREATE_PROJECT,\n  )(({ flags, ...rest }: any) => {\n    const { kindObj } = rest;\n    const kind = _.get(kindObj, 'kind', rest.kind);\n\n    const isClusterScope = location.pathname.indexOf('k8s/cluster') >= 0 ? true : false;\n\n    // The start guide does not need to be shown on the Projects list page.\n    if (kind === ProjectModel.kind) {\n      return <WrappedComponent {...rest} />;\n    }\n\n    if (flags[FLAGS.SHOW_OPENSHIFT_START_GUIDE]) {\n      return (\n        <>\n          {isClusterScope ? (\n            <WrappedComponent {...rest} noProjectsAvailable />\n          ) : (\n            <>\n              <div className=\"co-m-pane__body\">\n                <HintBlock title=\"Getting Started\">\n                  <HypercloudGettingStarted />\n                </HintBlock>\n              </div>\n              {// Whitelist certain resource kinds that should not be disabled when no projects are\n              // available. Disabling should also be optional\n              !disable || WHITELIST.includes(kind) ? (\n                <WrappedComponent {...rest} noProjectsAvailable />\n              ) : (\n                <Disabled>\n                  <WrappedComponent {...rest} noProjectsAvailable />\n                </Disabled>\n              )}\n            </>\n          )}\n        </>\n      );\n    }\n    return <WrappedComponent {...rest} />;\n  });\n\n// type OpenShiftGettingStartedProps = {\n//   canCreateProject: boolean;\n//   createProjectMessage: string;\n// };\n\nexport type WithStartGuideProps = {\n  noProjectsAvailable?: boolean;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Alert, AlertVariant, Button, List, ListItem } from '@patternfly/react-core';\n\nexport const ExpandableAlert: React.FC<CustomAlertProps> = ({ alerts, variant }) => {\n  const alertCount = alerts.length;\n  const [expanded, setExpanded] = React.useState(false);\n  const alertContent =\n    alertCount > 1 ? (\n      <List>\n        {_.map(alerts, (error, i) => (\n          <ListItem key={i}>{error}</ListItem>\n        ))}\n      </List>\n    ) : (\n      alerts\n    );\n\n  return (\n    <Alert\n      isInline\n      variant={variant}\n      className=\"co-alert\"\n      title={\n        <>\n          {`There are ${alertCount} ${variant} alerts.`}\n          <Button type=\"button\" onClick={() => setExpanded(!expanded)} variant=\"link\">\n            {expanded ? 'Hide' : 'Show'} Details\n          </Button>\n        </>\n      }\n    >\n      {expanded && alertContent}\n    </Alert>\n  );\n};\n\ntype CustomAlertProps = {\n  alerts: React.ReactNode[];\n  variant: AlertVariant;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\n\nimport { LoadingBox } from './status-box';\n\n/**\n * FIXME: Comparing two functions is not the *best* solution, but we can handle false negatives.\n */\nconst sameLoader = (a: () => Promise<React.ComponentType>) => (\n  b: () => Promise<React.ComponentType>,\n) => (a || 'a').toString() === (b || 'b').toString();\n\nenum AsyncComponentError {\n  ComponentNotFound = 'COMPONENT_NOT_FOUND',\n}\n\nexport class AsyncComponent extends React.Component<AsyncComponentProps, AsyncComponentState> {\n  state: AsyncComponentState = { Component: null, loader: null };\n  props: AsyncComponentProps;\n\n  private retryCount: number = 0;\n  private maxRetries: number = 25;\n\n  static getDerivedStateFromProps(props, state) {\n    if (!sameLoader(props.loader)(state.loader)) {\n      return { Component: null, loader: props.loader };\n    }\n    return null;\n  }\n\n  componentDidUpdate() {\n    if (this.state.Component === null) {\n      this.loadComponent();\n    }\n  }\n\n  componentDidMount() {\n    if (this.state.Component === null) {\n      this.loadComponent();\n    }\n  }\n\n  private loadComponent() {\n    this.state\n      .loader()\n      .then((Component) => {\n        if (!Component) {\n          return Promise.reject(AsyncComponentError.ComponentNotFound);\n        }\n        this.setState({ Component });\n      })\n      .catch((error) => {\n        if (error === AsyncComponentError.ComponentNotFound) {\n          // eslint-disable-next-line no-console\n          console.error('Component does not exist in module');\n        } else {\n          setTimeout(() => this.loadComponent(), this.retryAfter);\n        }\n      });\n  }\n\n  private get retryAfter(): number {\n    this.retryCount++;\n    const base = this.retryCount < this.maxRetries ? this.retryCount : this.maxRetries;\n    return 100 * Math.pow(base, 2);\n  }\n\n  render() {\n    const { Component } = this.state;\n    const { LoadingComponent = LoadingBox } = this.props;\n    const rest = _.omit(this.props, 'loader');\n    return Component != null ? <Component {...rest} /> : <LoadingComponent />;\n  }\n}\n\nexport type AsyncComponentProps = {\n  loader: () => Promise<React.ComponentType>;\n  LoadingComponent?: React.ReactNode;\n} & any;\nexport type AsyncComponentState = {\n  Component: React.ComponentType;\n  loader: () => Promise<React.ComponentType>;\n};\n","import { K8sKind } from '../../module/k8s';\nimport { TFunction } from 'i18next';\nimport { ResourceLabel, ResourceLabelPlural } from '../../models/hypercloud/resource-plural';\n\nexport const breadcrumbsForDetailsPage = (kindObj: K8sKind, match: any, t?: TFunction) => () => [\n  {\n    name: ResourceLabelPlural(kindObj, t),\n    path: match.params.ns\n      ? `/k8s/ns/${match.params.ns}/${match.params.plural}`\n      : `/k8s/cluster/${match.params.plural}`,\n  },\n  { name: t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', {0: ResourceLabel(kindObj, t)}), path: `${match.url}` },\n];\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\n\nimport { K8sResourceKind } from '../../module/k8s';\nimport { SectionHeading } from './headings';\n\nexport const BuildHooks: React.SFC<BuildHooksProps> = ({ resource }) => {\n  const postCommitArgs = _.get(resource, 'spec.postCommit.args');\n  const postCommitCommand = _.get(resource, 'spec.postCommit.command');\n  const postCommitScript = _.get(resource, 'spec.postCommit.script');\n\n  return !_.isEmpty(postCommitCommand) || !_.isEmpty(postCommitArgs) || postCommitScript ? (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text=\"Post-Commit Hooks\" />\n      <dl className=\"co-m-pane__details\">\n        {!_.isEmpty(postCommitCommand) && <dt>Command</dt>}\n        {!_.isEmpty(postCommitCommand) && (\n          <dd>\n            <code>{postCommitCommand.join(' ')}</code>\n          </dd>\n        )}\n        {postCommitScript && <dt>Script</dt>}\n        {postCommitScript && (\n          <dd>\n            <code>{postCommitScript}</code>\n          </dd>\n        )}\n        {!_.isEmpty(postCommitArgs) && <dt>Args</dt>}\n        {!_.isEmpty(postCommitArgs) && (\n          <dd>\n            <code>{postCommitArgs.join(' ')}</code>\n          </dd>\n        )}\n      </dl>\n    </div>\n  ) : null;\n};\n\nexport type BuildHooksProps = {\n  resource: K8sResourceKind;\n};\n\nBuildHooks.displayName = 'BuildHooks';\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\n\nimport { K8sResourceKind, K8sResourceKindReference } from '../../module/k8s';\nimport { DetailsItem } from './details-item';\nimport { ResourceLink } from './resource-link';\nimport { getStrategyType } from '../build';\n\nconst ImageStreamTagsReference: K8sResourceKindReference = 'ImageStreamTag';\n\nexport const BuildStrategy: React.SFC<BuildStrategyProps> = ({ resource, children }) => {\n  const dockerfile = _.get(resource, 'spec.source.dockerfile');\n  const jenkinsfile = _.get(resource, 'spec.strategy.jenkinsPipelineStrategy.jenkinsfile');\n  const strategyType = getStrategyType(resource.spec.strategy.type);\n  const buildFromPath = ['spec', 'strategy', strategyType, 'from'];\n  const buildFrom = _.get(resource, buildFromPath);\n  const outputTo = _.get(resource, 'spec.output.to');\n  const commitMessage = _.get(resource, 'spec.revision.git.message');\n  const commitHash = _.get(resource, 'spec.revision.git.commit');\n  const commitAuthorName = _.get(resource, 'spec.revision.git.author.name');\n  const pushSecret = _.get(resource, 'spec.output.pushSecret');\n  const resourceLimits = _.get(resource, 'spec.resources.limits');\n  const triggers = _.map(resource.spec.triggers, 'type').join(', ');\n\n  return (\n    <dl className=\"co-m-pane__details\">\n      {children}\n      <DetailsItem label=\"Type\" obj={resource} path=\"spec.strategy.type\" />\n      <DetailsItem label=\"Git Repository\" obj={resource} path=\"spec.source.git.uri\" hideEmpty />\n      <DetailsItem label=\"Git Ref\" obj={resource} path=\"spec.source.git.ref\" hideEmpty />\n      {commitMessage && (\n        <DetailsItem label=\"Git Commit\" obj={resource} path=\"spec.revision.git.message\">\n          {commitMessage}\n          <br />\n          {commitHash && <code>{commitHash.substring(0, 7)}</code>}{' '}\n          {commitAuthorName && `by ${commitAuthorName}`}\n        </DetailsItem>\n      )}\n      <DetailsItem label=\"Binary File\" obj={resource} path=\"spec.source.binary.asFile\" hideEmpty />\n      <DetailsItem label=\"Context Dir\" obj={resource} path=\"spec.source.contextDir\" hideEmpty />\n      {dockerfile && (\n        <DetailsItem label=\"Dockerfile\" obj={resource} path=\"spec.source.dockerfile\">\n          <pre>{dockerfile}</pre>\n        </DetailsItem>\n      )}\n      {jenkinsfile && (\n        <DetailsItem\n          label=\"Dockerfile\"\n          obj={resource}\n          path=\"spec.strategy.jenkinsPipelineStrategy.jenkinsfile\"\n        >\n          <pre>{jenkinsfile}</pre>\n        </DetailsItem>\n      )}\n      <DetailsItem\n        label=\"JenskinsFile Path\"\n        obj={resource}\n        path=\"spec.strategy.jenkinsPipelineStrategy.jenkinsfilePath\"\n        hideEmpty\n      />\n      {buildFrom && buildFrom.kind === 'ImageStreamTag' && (\n        <DetailsItem label=\"Build From\" obj={resource} path={buildFromPath}>\n          <ResourceLink\n            kind={ImageStreamTagsReference}\n            name={buildFrom.name}\n            namespace={buildFrom.namespace || resource.metadata.namespace}\n            title={buildFrom.name}\n          />\n        </DetailsItem>\n      )}\n      {buildFrom && buildFrom.kind === 'DockerImage' && (\n        <DetailsItem label=\"Build From\" obj={resource} path={buildFromPath}>\n          {buildFrom.name}\n        </DetailsItem>\n      )}\n      {outputTo && (\n        <DetailsItem label=\"Output To\" obj={resource} path=\"spec.output.to\">\n          <ResourceLink\n            kind={ImageStreamTagsReference}\n            name={outputTo.name}\n            namespace={outputTo.namespace || resource.metadata.namespace}\n            title={outputTo.name}\n          />\n        </DetailsItem>\n      )}\n      {pushSecret && (\n        <DetailsItem label=\"Push Secret\" obj={resource} path=\"spec.output.pushSecret\">\n          <ResourceLink\n            kind=\"Secret\"\n            name={pushSecret.name}\n            namespace={resource.metadata.namespace}\n            title={pushSecret.name}\n          />\n        </DetailsItem>\n      )}\n      <DetailsItem label=\"Run Policy\" obj={resource} path=\"spec.runPolicy\" hideEmpty />\n      {resourceLimits && (\n        <DetailsItem label=\"Resource Limits\" obj={resource} path=\"spec.resources.limits\">\n          {_.map(resourceLimits, (v, k) => `${k}: ${v}`).join(', ')}\n        </DetailsItem>\n      )}\n      {triggers && (\n        <DetailsItem label=\"Triggers\" obj={resource} path=\"spec.triggers\">\n          {triggers}\n        </DetailsItem>\n      )}\n    </dl>\n  );\n};\n\nexport type BuildStrategyProps = {\n  resource: K8sResourceKind;\n  children?: JSX.Element[];\n};\n\nBuildStrategy.displayName = 'BuildStrategy';\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport { Alert } from '@patternfly/react-core';\n\nimport { LoadingInline } from './status-box';\n\nconst injectDisabled = (children, disabled) => {\n  return React.Children.map(children, (c) => {\n    if (!_.isObject(c) || c.type !== 'button') {\n      return c;\n    }\n\n    return React.cloneElement(c, { disabled: c.props.disabled || disabled });\n  });\n};\n\nconst ErrorMessage = ({ message }) => (\n  <Alert\n    isInline\n    className=\"co-alert co-alert--scrollable\"\n    variant=\"danger\"\n    title=\"An error occurred\"\n  >\n    <div className=\"co-pre-line\">{message}</div>\n  </Alert>\n);\nconst InfoMessage = ({ message }) => (\n  <Alert isInline className=\"co-alert\" variant=\"info\" title={message} />\n);\nconst SuccessMessage = ({ message }) => (\n  <Alert isInline className=\"co-alert\" variant=\"success\" title={message} />\n);\n\n// NOTE: DO NOT use <a> elements within a ButtonBar.\n// They don't support the disabled attribute, and therefore\n// can't be disabled during a pending promise/request.\n/** @type {React.SFC<{children: any, className?: string, errorMessage?: string, infoMessage?: string, successMessage?: string, inProgress: boolean}}>} */\nexport const ButtonBar = ({\n  children,\n  className,\n  errorMessage,\n  infoMessage,\n  successMessage,\n  inProgress,\n}) => {\n  return (\n    <div className={classNames(className, 'co-m-btn-bar')}>\n      {successMessage && <SuccessMessage message={successMessage} />}\n      {errorMessage && <ErrorMessage message={errorMessage} />}\n      {injectDisabled(children, inProgress)}\n      {inProgress && <LoadingInline />}\n      {infoMessage && <InfoMessage message={infoMessage} />}\n    </div>\n  );\n};\n\nButtonBar.propTypes = {\n  children: PropTypes.node.isRequired,\n  successMessage: PropTypes.string,\n  errorMessage: PropTypes.string,\n  infoMessage: PropTypes.string,\n  inProgress: PropTypes.bool.isRequired,\n  className: PropTypes.string,\n};\n","import * as React from 'react';\n\nconst MEMO = {};\n\nexport const CamelCaseWrap: React.SFC<CamelCaseWrapProps> = ({ value }) => {\n  if (!value) {\n    return '-';\n  }\n\n  if (MEMO[value]) {\n    return MEMO[value];\n  }\n\n  // Add word break points before capital letters (but keep consecutive capital letters together).\n  const words = value.match(/[A-Z]+[^A-Z]*|[^A-Z]+/g);\n  const rendered = (\n    <span>\n      {words.map((word, i) => (\n        <React.Fragment key={i}>\n          {word}\n          {i !== words.length - 1 && <wbr />}\n        </React.Fragment>\n      ))}\n    </span>\n  );\n  MEMO[value] = rendered;\n  return rendered;\n};\n\nexport type CamelCaseWrapProps = {\n  value: string;\n};\n","import * as React from 'react';\nimport { CloseIcon } from '@patternfly/react-icons';\n\nexport const CloseButton = ({ onClick }) => (\n  <button aria-label=\"Close\" className=\"close\" onClick={onClick} type=\"button\">\n    <CloseIcon />\n  </button>\n);\n","export const cloudProviderID = (node) => {\n  return node.spec.providerID ? node.spec.providerID.split('://')[0] : '';\n};\n\nexport const cloudProviderNames = (providerNames) => {\n  if (providerNames.length) {\n    const displayNames =\n      providerNames.length === 1 ? providerNames[0] : `Hybrid (${providerNames.join(' , ')})`;\n    return displayNames.replace(/aws/i, 'Amazon Web Services');\n  }\n  return '';\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { useTranslation } from 'react-i18next';\nimport { ContainerSpec } from '../../module/k8s';\n\nconst ContainerRow: React.SFC<ContainerRowProps> = ({ container }) => {\n  const resourceLimits = _.get(container, 'resources.limits');\n  const ports = _.get(container, 'ports');\n  return (\n    <div className=\"row\">\n      <div className=\"col-xs-5 col-sm-4 col-md-3 co-break-word\">{container.name}</div>\n      <div className=\"col-xs-7 col-sm-5 co-break-all co-select-to-copy\">{container.image || '-'}</div>\n      <div className=\"col-sm-3 col-md-2 hidden-xs\">{_.map(resourceLimits, (v, k) => `${k}: ${v}`).join(', ') || '-'}</div>\n      <div className=\"col-md-2 hidden-xs hidden-sm co-break-word\">{_.map(ports, port => `${port.containerPort}/${port.protocol}`).join(', ') || '-'}</div>\n    </div>\n  );\n};\n\nexport const ContainerTable: React.SFC<ContainerTableProps> = ({ containers }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n      <div className=\"row co-m-table-grid__head\">\n        <div className=\"col-xs-5 col-sm-4 col-md-3\">{t('COMMON:MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_9')}</div>\n        <div className=\"col-xs-7 col-sm-5\">{t('COMMON:MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_10')}</div>\n        <div className=\"col-sm-3 col-md-2 hidden-xs\">{t('COMMON:MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_11')}</div>\n        <div className=\"col-md-2 hidden-xs hidden-sm\">{t('COMMON:MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_12')}</div>\n      </div>\n      <div className=\"co-m-table-grid__body\">\n        {_.map(containers, (c, i) => (\n          <ContainerRow key={i} container={c} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport type ContainerRowProps = {\n  container: ContainerSpec;\n};\n\nexport type ContainerTableProps = {\n  containers: ContainerSpec[];\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { CopyToClipboard as CTC } from 'react-copy-to-clipboard';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { CopyIcon } from '@patternfly/react-icons';\n\nexport const CopyToClipboard: React.FC<CopyToClipboardProps> = React.memo((props) => {\n  const [copied, setCopied] = React.useState(false);\n\n  const tooltipText = copied ? 'Copied' : 'Copy to Clipboard';\n  const tooltipContent = [\n    <span className=\"co-nowrap\" key=\"nowrap\">\n      {tooltipText}\n    </span>,\n  ];\n\n  // Default to value if no visible value was specified.\n  const visibleValue = _.isNil(props.visibleValue) ? props.value : props.visibleValue;\n\n  return (\n    <div className=\"co-copy-to-clipboard\">\n      <pre className=\"co-pre-wrap co-copy-to-clipboard__text\">{visibleValue}</pre>\n      <Tooltip content={tooltipContent} trigger=\"click mouseenter focus\" exitDelay={1250}>\n        <CTC text={props.value} onCopy={() => setCopied(true)}>\n          <Button\n            variant=\"plain\"\n            onMouseEnter={() => setCopied(false)}\n            className=\"co-copy-to-clipboard__btn pf-c-clipboard-copy__group-copy\"\n            type=\"button\"\n          >\n            <CopyIcon />\n            <span className=\"sr-only\">Copy to Clipboard</span>\n          </Button>\n        </CTC>\n      </Tooltip>\n    </div>\n  );\n});\n\nexport type CopyToClipboardProps = {\n  value: string;\n  visibleValue?: React.ReactNode;\n};\n\nCopyToClipboard.displayName = 'CopyToClipboard';\n","import * as _ from 'lodash-es';\n\n// Behaves like moment.js's fromNow\nexport const fromNow = (dateTime, now = undefined, options = { omitSuffix: false }) => {\n  // Check for null. If dateTime is null, it returns incorrect date and time of Wed Dec 31 1969 19:00:00 GMT-0500 (Eastern Standard Time)\n  if (!dateTime) {\n    return '-';\n  }\n  if (!now) {\n    now = new Date();\n  }\n  dateTime = new Date(dateTime);\n  const secondsAgo = (now.getTime() - dateTime.getTime()) / 1000;\n  const minutesAgo = secondsAgo / 60;\n  const hoursAgo = minutesAgo / 60;\n  const daysAgo = hoursAgo / 24;\n\n  if (daysAgo > 548) {\n    const count = Math.round(daysAgo / 365);\n    return options.omitSuffix ? `${count} years` : `${count} years ago`;\n  }\n  if (daysAgo > 320) {\n    return options.omitSuffix ? 'year' : 'a year ago';\n  }\n  if (daysAgo > 45) {\n    const count = Math.round(daysAgo / 30);\n    return options.omitSuffix ? `${count} months` : `${count} months ago`;\n  }\n  if (daysAgo > 26) {\n    return options.omitSuffix ? 'month' : 'a month ago';\n  }\n  if (hoursAgo > 36) {\n    const count = Math.round(daysAgo);\n    return options.omitSuffix ? `${count} days` : `${count} days ago`;\n  }\n  if (hoursAgo > 22) {\n    return options.omitSuffix ? 'day' : 'a day ago';\n  }\n  if (minutesAgo > 90) {\n    const count = Math.round(hoursAgo);\n    return options.omitSuffix ? `${count} hours` : `${count} hours ago`;\n  }\n  if (minutesAgo > 45) {\n    return options.omitSuffix ? 'hour' : 'an hour ago';\n  }\n  if (secondsAgo > 90) {\n    const count = Math.round(minutesAgo);\n    return options.omitSuffix ? `${count} minutes` : `${count} minutes ago`;\n  }\n  if (secondsAgo > 45) {\n    return options.omitSuffix ? 'minute' : 'a minute ago';\n  }\n  if (secondsAgo > 15) {\n    return options.omitSuffix ? 'few seconds' : 'less than a minute ago';\n  }\n\n  if (secondsAgo >= 0) {\n    return options.omitSuffix ? 'few seconds' : 'a few seconds ago';\n  }\n\n  if (secondsAgo > -45) {\n    return 'a few seconds from now';\n  }\n  if (secondsAgo > -90) {\n    return 'a minute from now';\n  }\n  if (minutesAgo > -45) {\n    return `${-Math.round(minutesAgo)} minutes from now`;\n  }\n  if (minutesAgo > -90) {\n    return 'an hour from now';\n  }\n  if (hoursAgo > -22) {\n    return `${-Math.round(hoursAgo)} hours from now`;\n  }\n  if (hoursAgo > -36) {\n    return 'a day from now';\n  }\n  if (daysAgo > -26) {\n    return `${-Math.round(daysAgo)} days from now`;\n  }\n  if (daysAgo > -45) {\n    return 'a month from now';\n  }\n  if (daysAgo > -320) {\n    return `${-Math.round(daysAgo / 30)} months from now`;\n  }\n  if (daysAgo > -580) {\n    return 'a year from now';\n  }\n  return `${-Math.round(daysAgo / 365)} years from now`;\n};\n\nexport const isValid = (dateTime: Date) => dateTime instanceof Date && !_.isNaN(dateTime.valueOf());\n\n// Formats a duration in milliseconds like '1h 10m 23s'.\nexport const formatDuration = (ms: number) => {\n  if (!_.isFinite(ms) || ms < 0) {\n    return '';\n  }\n\n  const totalSeconds = Math.round(ms / 1000);\n  const secondsInHour = 60 * 60;\n  const secondsInMinute = 60;\n\n  const hours = Math.floor(totalSeconds / secondsInHour);\n  const minutes = Math.floor((totalSeconds % secondsInHour) / secondsInMinute);\n  const seconds = totalSeconds % secondsInMinute;\n\n  let formatted = '';\n  if (hours) {\n    formatted += `${hours}h `;\n  }\n  if (hours || minutes) {\n    formatted += `${minutes}m `;\n  }\n  formatted += `${seconds}s`;\n\n  return formatted;\n};\n\n// Conversions between units and milliseconds\nconst s = 1000;\nconst m = s * 60;\nconst h = m * 60;\nconst d = h * 24;\nconst w = d * 7;\nconst units = { w, d, h, m, s };\n\n// Formats a duration in milliseconds like \"1h 10m\"\nexport const formatPrometheusDuration = (ms: number) => {\n  if (!_.isFinite(ms) || ms < 0) {\n    return '';\n  }\n  let remaining = ms;\n  let str = '';\n  _.each(units, (factor, unit) => {\n    const n = Math.floor(remaining / factor);\n    if (n > 0) {\n      str += `${n}${unit} `;\n      remaining -= n * factor;\n    }\n  });\n  return _.trim(str);\n};\n\n// Converts a duration like \"1h 10m 23s\" to milliseconds or returns 0 if the duration could not be parsed\nexport const parsePrometheusDuration = (duration: string): number => {\n  try {\n    const parts = duration\n      .trim()\n      .split(/\\s+/)\n      .map((p) => p.match(/^(\\d+)([wdhms])$/));\n    return _.sumBy(parts, (p) => parseInt(p[1], 10) * units[p[2]]);\n  } catch (ignored) {\n    // Invalid duration format\n    return 0;\n  }\n};\n\nconst zeroPad = (number: number) => (number < 10 ? `0${number}` : number);\n\nexport const twentyFourHourTime = (date: Date): string => {\n  const hours = zeroPad(date.getHours());\n  const minutes = zeroPad(date.getMinutes());\n  return `${hours}:${minutes}`;\n};\n\nexport const twentyFourHourTimeWithSeconds = (date: Date): string => {\n  const hours = zeroPad(date.getHours());\n  const minutes = zeroPad(date.getMinutes());\n  const seconds = zeroPad(date.getSeconds());\n  return `${hours}:${minutes}:${seconds}`;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Breadcrumb, BreadcrumbItem, Button, Popover } from '@patternfly/react-core';\n\nimport {\n  getPropertyDescription,\n  K8sKind,\n  K8sResourceKind,\n  K8sResourceKindReference,\n  modelFor,\n  referenceFor,\n} from '../../module/k8s';\nimport { LinkifyExternal } from './link';\n\nconst PropertyPath: React.FC<{ kind: string; path: string | string[] }> = ({ kind, path }) => {\n  const pathArray: string[] = _.toPath(path);\n  return (\n    <Breadcrumb className=\"pf-c-breadcrumb--no-padding-top\">\n      <BreadcrumbItem>{kind}</BreadcrumbItem>\n      {pathArray.map((property, i) => {\n        const isLast = i === pathArray.length - 1;\n        return (\n          <BreadcrumbItem key={i} isActive={isLast}>\n            {property}\n          </BreadcrumbItem>\n        );\n      })}\n    </Breadcrumb>\n  );\n};\n\nexport const DetailsItem: React.FC<DetailsItemProps> = ({\n  label,\n  obj,\n  path,\n  defaultValue = '-',\n  hideEmpty,\n  children,\n}) => {\n  if (hideEmpty && _.isEmpty(_.get(obj, path))) {\n    return null;\n  }\n\n  const reference: K8sResourceKindReference = referenceFor(obj);\n  const model: K8sKind = modelFor(reference);\n  const description: string = getPropertyDescription(model, path);\n  const value: React.ReactNode = children || _.get(obj, path, defaultValue);\n  return (\n    <>\n      <dt>\n        {description ? (\n          <Popover\n            headerContent={<div>{label}</div>}\n            bodyContent={\n              <LinkifyExternal>\n                <div className=\"co-pre-line\">{description}</div>\n              </LinkifyExternal>\n            }\n            footerContent={<PropertyPath kind={model.kind} path={path} />}\n            maxWidth=\"30rem\"\n          >\n            <Button variant=\"plain\" className=\"co-m-pane__details-popover-button\">\n              {label}\n            </Button>\n          </Popover>\n        ) : (\n            label\n          )}\n      </dt>\n      <dd>{value}</dd>\n    </>\n  );\n};\n\nexport type DetailsItemProps = {\n  label: string;\n  obj: K8sResourceKind;\n  path?: string | string[];\n  defaultValue?: React.ReactNode;\n  hideEmpty?: boolean;\n  children?: React.ReactNode;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Button } from '@patternfly/react-core';\nimport { PencilAltIcon } from '@patternfly/react-icons';\nimport { Translation } from 'react-i18next';\nimport { DetailsItem } from './details-item';\nimport { Kebab } from './kebab';\nimport { LabelList } from './label-list';\nimport { OwnerReferences } from './owner-references';\nimport { ResourceLink } from './resource-link';\nimport { Selector } from './selector';\nimport { Timestamp } from './timestamp';\nimport { useAccessReview } from './rbac';\nimport { K8sResourceKind, modelFor, referenceFor, Toleration } from '../../module/k8s';\n\nexport const pluralize = (i: number, singular: string, plural: string = `${singular}s`, includeCount: boolean = true) => {\n  const pluralized = `${i === 1 ? singular : plural}`;\n  return includeCount ? `${i || 0} ${pluralized}` : pluralized;\n};\n\nexport const detailsPage = <T extends {}>(Component: React.ComponentType<T>) =>\n  function DetailsPage(props: T) {\n    return <Component {...props} />;\n  };\n\nconst getTolerationsPath = (obj: K8sResourceKind): string => {\n  // FIXME: Is this correct for all types (jobs, cron jobs)? It would be better for the embedding page to pass in the path.\n  return obj.kind === 'Pod' ? 'spec.tolerations' : 'spec.template.spec.tolerations';\n};\n\nexport const ResourceSummary: React.SFC<ResourceSummaryProps> = ({ children, resource, customPathName, showName = true, showOwner = true, showID = false, showPodSelector = false, showNodeSelector = false, showAnnotations = true, showTolerations = false, podSelector = 'spec.selector', nodeSelector = 'spec.template.spec.nodeSelector' }) => {\n  const { metadata, type } = resource;\n  const reference = referenceFor(resource);\n  const model = modelFor(reference);\n  const tolerationsPath = getTolerationsPath(resource);\n  const tolerations: Toleration[] = _.get(resource, tolerationsPath);\n  const canUpdate = useAccessReview({\n    group: model.apiGroup,\n    resource: model.plural,\n    verb: 'patch',\n    name: metadata.name,\n    namespace: metadata.namespace,\n  });\n\n  return (\n    <Translation>\n      {t => (\n        <dl data-test-id=\"resource-summary\" className=\"co-m-pane__details\">\n          {showName && <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_5')} obj={resource} path={customPathName || 'metadata.name'} />}\n          {showID && <DetailsItem label=\"ID\" obj={resource} path={'metadata.uid'} />}\n          {metadata.namespace && (\n            <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_6')} obj={resource} path=\"metadata.namespace\">\n              <ResourceLink kind=\"Namespace\" name={metadata.namespace} title={metadata.uid} namespace={null} />\n            </DetailsItem>\n          )}\n          {type ? <dt>Type</dt> : null}\n          {type ? <dd>{type}</dd> : null}\n          <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_8')} obj={resource} path=\"metadata.labels\">\n            <LabelList kind={reference} labels={metadata.labels} />\n          </DetailsItem>\n          {showPodSelector && (\n            <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_9')} obj={resource} path={podSelector}>\n              <Selector selector={_.get(resource, podSelector)} namespace={_.get(resource, 'metadata.namespace')} />\n            </DetailsItem>\n          )}\n          {showNodeSelector && (\n            <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_10')} obj={resource} path={nodeSelector}>\n              <Selector kind=\"Node\" selector={_.get(resource, nodeSelector)} />\n            </DetailsItem>\n          )}\n          {showTolerations && (\n            <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_11')} obj={resource} path={tolerationsPath}>\n              {canUpdate ? (\n                <Button type=\"button\" isInline onClick={Kebab.factory.ModifyTolerations(model, resource).callback} variant=\"link\">\n                  {pluralize(_.size(tolerations), 'Toleration')}\n                  <PencilAltIcon className=\"co-icon-space-l pf-c-button-icon--plain\" />\n                </Button>\n              ) : (\n                pluralize(_.size(tolerations), 'Toleration')\n              )}\n            </DetailsItem>\n          )}\n          {showAnnotations && (\n            <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_12')} obj={resource} path=\"metadata.annotations\">\n              {canUpdate ? (\n                <Button data-test-id=\"edit-annotations\" type=\"button\" isInline onClick={Kebab.factory.ModifyAnnotations(model, resource).callback} variant=\"link\">\n                  {pluralize(_.size(metadata.annotations), 'Annotation')}\n                  <PencilAltIcon className=\"co-icon-space-l pf-c-button-icon--plain\" />\n                </Button>\n              ) : (\n                pluralize(_.size(metadata.annotations), 'Annotation')\n              )}\n            </DetailsItem>\n          )}\n          {children}\n          <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_43')} obj={resource} path=\"metadata.creationTimestamp\">\n            <Timestamp timestamp={metadata.creationTimestamp} />\n          </DetailsItem>\n          {showOwner && (\n            <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_44')} obj={resource} path=\"metadata.ownerReferences\">\n              <OwnerReferences resource={resource} />\n            </DetailsItem>\n          )}\n        </dl>\n      )}\n    </Translation>\n  );\n};\n\nexport const ResourcePodCount: React.SFC<ResourcePodCountProps> = ({ resource }) => (\n  <Translation>\n    {t => (\n      <dl>\n        <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_38')} obj={resource} path=\"status.replicas\" defaultValue=\"0\" />\n        <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_39')} obj={resource} path=\"spec.replicas\" defaultValue=\"0\" />\n      </dl>\n    )}\n  </Translation>\n);\n\nexport type ResourceSummaryProps = {\n  resource: K8sResourceKind;\n  showName?: boolean;\n  showID?: boolean;\n  showPodSelector?: boolean;\n  showNodeSelector?: boolean;\n  showAnnotations?: boolean;\n  showTolerations?: boolean;\n  showOwner?: boolean;\n  podSelector?: string;\n  nodeSelector?: string;\n  children?: React.ReactNode;\n  customPathName?: string;\n};\n\nexport type ResourcePodCountProps = {\n  resource: K8sResourceKind;\n};\n\nResourceSummary.displayName = 'ResourceSummary';\nResourcePodCount.displayName = 'ResourcePodCount';\n","import * as React from 'react';\n\nexport const Disabled = (props) => <div className=\"co-disabled\">{props.children}</div>;\n","// Prefer the documentation base URL passed as a flag, but fall back to the latest docs if none was specified.\nexport const openshiftHelpBase =\n  window.SERVER_FLAGS.documentationBaseURL || 'https://docs.okd.io/latest/';\n\nexport const getNetworkPolicyDocLink = (openshiftFlag: boolean) => {\n  return openshiftFlag\n    ? `${openshiftHelpBase}networking/configuring-networkpolicy.html`\n    : 'https://kubernetes.io/docs/concepts/services-networking/network-policies/';\n};\n","import * as React from 'react';\n\nconst isHTMLElement = (n: Node): n is HTMLElement => {\n  return n.nodeType === Node.ELEMENT_NODE;\n};\n\nexport const getParentScrollableElement = (node: HTMLElement) => {\n  let parentNode: Node = node;\n  while (parentNode) {\n    if (isHTMLElement(parentNode)) {\n      let overflow = parentNode.style.overflow;\n      if (!overflow.includes('scroll') && !overflow.includes('auto')) {\n        overflow = window.getComputedStyle(parentNode).overflow;\n      }\n      if (overflow.includes('scroll') || overflow.includes('auto')) {\n        return parentNode;\n      }\n    }\n    parentNode = parentNode.parentNode;\n  }\n  return undefined;\n};\n\ntype WithScrollContainerProps = {\n  children: (scrollContainer: HTMLElement) => React.ReactElement | null;\n};\n\nexport const WithScrollContainer: React.FC<WithScrollContainerProps> = ({ children }) => {\n  const [scrollContainer, setScrollContainer] = React.useState<HTMLElement>();\n  const ref = React.useCallback((node) => {\n    if (node) {\n      setScrollContainer(getParentScrollableElement(node));\n    }\n  }, []);\n  return scrollContainer ? children(scrollContainer) : <span ref={ref} />;\n};\n","import * as React from 'react';\nimport { saveAs } from 'file-saver';\nimport { Alert, Button } from '@patternfly/react-core';\nimport { DownloadIcon } from '@patternfly/react-icons';\n\nimport { coFetch } from '../../co-fetch';\n\nexport const DownloadButton: React.FC<DownloadButtonProps> = (props) => {\n  const [inFlight, setInFlight] = React.useState(false);\n  const [error, setError] = React.useState(null);\n\n  const download = () => {\n    setInFlight(true);\n    setError(false);\n\n    coFetch(props.url, {}, 30000)\n      .then((response) => response.blob())\n      .then((blob) => saveAs(blob, props.filename))\n      .then(\n        () => setError(null),\n        (e) => setError(e),\n      )\n      .then(() => setInFlight(false));\n  };\n\n  return (\n    <>\n      <Button\n        variant=\"primary\"\n        style={{ marginBottom: 10 }}\n        isDisabled={inFlight}\n        type=\"button\"\n        onClick={() => download()}\n      >\n        <DownloadIcon /> Download{inFlight && <>ing...</>}\n      </Button>\n      {error && (\n        <Alert\n          isInline\n          className=\"co-alert co-break-word\"\n          variant=\"danger\"\n          title={error.toString()}\n        />\n      )}\n    </>\n  );\n};\n\nexport type DownloadButtonProps = {\n  url: string;\n  filename?: string;\n  className?: string;\n};\n\nexport type DownloadButtonState = {\n  inFlight: boolean;\n  error: any;\n};\n\nDownloadButton.displayName = 'DownloadButton';\n","import * as React from 'react';\nimport { DndProvider } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\n\nconst withDragDropContext = <TProps extends {}>(Component: React.ComponentClass<TProps>) => (\n  props: TProps,\n) => (\n  <DndProvider backend={HTML5Backend}>\n    <Component {...props} />\n  </DndProvider>\n);\n\nexport default withDragDropContext;\n","export const DRAGGABLE_TYPE = {\n  ENV_ROW: 'env_row',\n  ENV_FROM_ROW: 'env_from_row',\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { CaretDownIcon, MinusCircleIcon, PlusCircleIcon, StarIcon } from '@patternfly/react-icons';\nimport { impersonateStateToProps } from '../../reducers/ui';\nimport { checkAccess } from './rbac';\nimport { history } from './router';\nimport { KebabItems } from './kebab';\nimport { ResourceName } from './resource-icon';\nimport { useSafetyFirst } from '../safety-first';\nimport { useTranslation } from 'react-i18next';\n\nexport class DropdownMixin extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.listener = this._onWindowClick.bind(this);\n    this.state = { active: !!props.active, selectedKey: props.selectedKey };\n    this.toggle = this.toggle.bind(this);\n    this.dropdownElement = React.createRef();\n    this.dropdownList = React.createRef();\n  }\n\n  _onWindowClick(event) {\n    if (!this.state.active) {\n      return;\n    }\n\n    const { current } = this.dropdownElement;\n    if (!current) {\n      return;\n    }\n\n    if (event.target === current || (current && current.contains(event.target))) {\n      return;\n    }\n\n    this.hide(event);\n  }\n\n  UNSAFE_componentWillReceiveProps({ selectedKey, items }) {\n    if (selectedKey !== this.props.selectedKey) {\n      this.setState({ selectedKey, title: items[selectedKey] });\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('click', this.listener);\n  }\n\n  onClick_(selectedKey, e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const { items, actionItems, onChange, noSelection, title, type } = this.props;\n\n    if (onChange) {\n      onChange(selectedKey, e);\n    }\n\n    const newTitle = items[selectedKey];\n\n    if (!actionItems || !_.some(actionItems, { actionKey: selectedKey })) {\n      this.setState({\n        selectedKey,\n        title: noSelection ? title : newTitle,\n      });\n    }\n\n    if (type !== 'multiple') {\n      this.hide();\n    }\n  }\n\n  toggle(e) {\n    e.preventDefault();\n\n    if (this.props.disabled) {\n      return;\n    }\n\n    if (this.state.active) {\n      this.hide(e);\n    } else {\n      this.show(e);\n    }\n  }\n\n  show() {\n    /* If you're wondering why this isn't in componentDidMount, it's because\n     * kebabs are dropdowns. A list of 200 pods would mean 200 global event\n     * listeners. This is bad for performance. - ggreer\n     */\n    window.removeEventListener('click', this.listener);\n    window.addEventListener('click', this.listener);\n    this.setState({ active: true });\n  }\n\n  hide(e) {\n    e && e.stopPropagation();\n    window.removeEventListener('click', this.listener);\n    this.setState({ active: false });\n  }\n}\n\nclass DropDownRow extends React.PureComponent {\n  render() {\n    const { itemKey, content, onclick, onBookmark, onUnBookmark, className, selected, hover, canFavorite, onFavorite, favoriteKey, autocompleteFilter } = this.props;\n    let prefix;\n\n    if (!autocompleteFilter && !onBookmark && !onUnBookmark) {\n      //use pf4 markup if not using the autocomplete dropdown\n      return (\n        <li key={itemKey}>\n          <button className=\"pf-c-dropdown__menu-item\" id={`${itemKey}-link`} data-test-id=\"dropdown-menu\" data-test-dropdown-menu={itemKey} onClick={e => onclick(itemKey, e)}>\n            {content}\n          </button>\n        </li>\n      );\n    }\n    if (onUnBookmark) {\n      prefix = (\n        <a href=\"#\" className={classNames('bookmarker', { hover, focus: selected })} onClick={e => onUnBookmark(e, itemKey)}>\n          <MinusCircleIcon />\n        </a>\n      );\n    }\n    if (onBookmark) {\n      prefix = (\n        <a href=\"#\" className={classNames('bookmarker', { hover, focus: selected })} onClick={e => onBookmark(e, itemKey, content)}>\n          <PlusCircleIcon />\n        </a>\n      );\n    }\n\n    let suffix;\n    if (onUnBookmark && canFavorite) {\n      const isFavorite = favoriteKey === itemKey;\n      suffix = (\n        <a href=\"#\" className={classNames('bookmarker', { hover, focus: selected })} onClick={e => onFavorite(e, isFavorite ? undefined : itemKey)}>\n          <StarIcon className={classNames({ favorite: isFavorite })} />\n        </a>\n      );\n    }\n\n    return (\n      <li role=\"option\" className={classNames(className)} key={itemKey}>\n        {prefix}\n        <a\n          href=\"#\"\n          ref={this.link}\n          id={`${itemKey}-link`}\n          className={classNames('pf-c-dropdown__menu-item', {\n            'next-to-bookmark': !!prefix,\n            hover,\n            focus: selected,\n          })}\n          onClick={e => onclick(itemKey, e)}\n        >\n          {content}\n        </a>\n        {suffix}\n      </li>\n    );\n  }\n}\n\n/** @augments {React.Component<any>} */\nexport class Dropdown extends DropdownMixin {\n  constructor(props) {\n    super(props);\n    this.onUnBookmark = (...args) => this.onUnBookmark_(...args);\n    this.onBookmark = (...args) => this.onBookmark_(...args);\n    this.onFavorite = (...args) => this.onFavorite_(...args);\n    this.onClick = (...args) => this.onClick_(...args);\n\n    let bookmarks = props.defaultBookmarks || {};\n    let favoriteKey;\n    if (props.storageKey) {\n      try {\n        const parsedBookmarks = JSON.parse(localStorage.getItem(this.bookmarkStorageKey));\n        if (_.isPlainObject(parsedBookmarks)) {\n          bookmarks = parsedBookmarks;\n        }\n        const parsedFavorite = localStorage.getItem(props.storageKey);\n        if (props.canFavorite && _.isString(parsedFavorite)) {\n          favoriteKey = parsedFavorite;\n        }\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.warn(`could not load bookmarks for ${props.storageKey}: ${e}`);\n      }\n    }\n    this.state.favoriteKey = favoriteKey;\n    this.state.bookmarks = bookmarks;\n\n    this.state.items = Object.assign({}, bookmarks, props.items);\n\n    this.state.title = props.noSelection ? props.title : _.get(props.items, props.selectedKey, props.title);\n\n    this.onKeyDown = e => this.onKeyDown_(e);\n    this.changeTextFilter = e => this.applyTextFilter_(e.target.value, this.props.items);\n    const { shortCut } = this.props;\n    this.globalKeyDown = e => {\n      const { nodeName } = e.target;\n\n      if (nodeName === 'INPUT' || nodeName === 'TEXTAREA') {\n        return;\n      }\n\n      if (!shortCut || e.key !== shortCut) {\n        return;\n      }\n\n      if (e.ctrlKey || e.altKey || e.metaKey || e.shiftKey) {\n        return;\n      }\n\n      e.stopPropagation();\n      e.preventDefault();\n      this.show(e);\n    };\n  }\n\n  get bookmarkStorageKey() {\n    return `${this.props.storageKey}-bookmarks`;\n  }\n\n  componentDidMount() {\n    if (this.props.shortCut) {\n      window.addEventListener('keydown', this.globalKeyDown);\n    }\n  }\n\n  componentWillUnmount() {\n    super.componentWillUnmount();\n    window.removeEventListener('keydown', this.globalKeyDown);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    super.UNSAFE_componentWillReceiveProps(nextProps);\n    const props = this.props;\n\n    if (_.isEqual(nextProps.items, props.items) && nextProps.title === props.title) {\n      return;\n    }\n    const title = nextProps.title || props.title;\n    this.setState({ title });\n\n    this.applyTextFilter_(this.state.autocompleteText, nextProps.items);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!prevState.active && this.state.active && this.input) {\n      // Clear any previous filter when reopening the dropdown.\n      this.applyTextFilter_('', this.props.items);\n    }\n  }\n\n  applyTextFilter_(autocompleteText, items) {\n    const { autocompleteFilter } = this.props;\n    items = Object.assign({}, this.state.bookmarks, items);\n    if (autocompleteFilter && !_.isEmpty(autocompleteText)) {\n      items = _.pickBy(items, (item, key) => autocompleteFilter(autocompleteText, item, key));\n    }\n    this.setState({ autocompleteText, items });\n  }\n\n  onKeyDown_(e) {\n    const { key } = e;\n    if (key === 'Escape') {\n      this.hide(e);\n      return;\n    }\n\n    if (key !== 'ArrowDown' && key !== 'ArrowUp' && key !== 'Enter') {\n      return;\n    }\n\n    const { items, keyboardHoverKey } = this.state;\n\n    if (key === 'Enter') {\n      if (this.state.active && items[keyboardHoverKey]) {\n        this.onClick(keyboardHoverKey, e);\n      }\n      return;\n    }\n\n    const keys = _.keys(items);\n\n    let index = _.indexOf(keys, keyboardHoverKey);\n\n    if (key === 'ArrowDown') {\n      index += 1;\n    } else {\n      index -= 1;\n    }\n\n    // periodic boundaries\n    if (index >= keys.length) {\n      index = 0;\n    }\n    if (index < 0) {\n      index = keys.length - 1;\n    }\n\n    const newKey = keys[index];\n    this.setState({ keyboardHoverKey: newKey });\n    e.stopPropagation();\n  }\n\n  onFavorite_(e, favoriteKey) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.setState({ favoriteKey });\n    if (favoriteKey) {\n      localStorage.setItem(this.props.storageKey, favoriteKey);\n    } else {\n      // do not set `undefined` as a value in localstorage\n      localStorage.removeItem(this.props.storageKey, favoriteKey);\n    }\n  }\n\n  onBookmark_(e, key, value) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const bookmarks = Object.assign({}, this.state.bookmarks);\n    bookmarks[key] = value;\n    this.setState({ bookmarks });\n    localStorage.setItem(this.bookmarkStorageKey, JSON.stringify(bookmarks));\n  }\n\n  onUnBookmark_(e, key) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const bookmarks = Object.assign({}, this.state.bookmarks);\n    delete bookmarks[key];\n    this.setState({ bookmarks });\n    localStorage.setItem(this.bookmarkStorageKey, JSON.stringify(bookmarks));\n  }\n\n  renderActionItem() {\n    const { actionItems } = this.props;\n    if (actionItems) {\n      const { selectedKey, keyboardHoverKey, noSelection } = this.props;\n      return (\n        <>\n          {actionItems.map(ai => (\n            <DropDownRow className={classNames({ active: ai.actionKey === selectedKey && !noSelection })} key={`${ai.actionKey}-${ai.actionTitle}`} itemKey={ai.actionKey} content={ai.actionTitle} onclick={this.onClick} selected={ai.actionKey === selectedKey && !noSelection} hover={ai.actionKey === keyboardHoverKey} />\n          ))}\n          <li className=\"co-namespace-selector__divider\">\n            <div className=\"dropdown-menu__divider\" />\n          </li>\n        </>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    const { active, autocompleteText, selectedKey, items, title, bookmarks, keyboardHoverKey, favoriteKey } = this.state;\n    const { ariaLabel, autocompleteFilter, autocompletePlaceholder, className, buttonClassName, menuClassName, storageKey, canFavorite, dropDownClassName, titlePrefix, describedBy, disabled } = this.props;\n\n    const spacerBefore = this.props.spacerBefore || new Set();\n    const headerBefore = this.props.headerBefore || {};\n    const rows = [];\n    const bookMarkRows = [];\n    const noBookmark = this.props.noBookmark || false;\n    const addItem = (key, content) => {\n      const selected = key === selectedKey && !this.props.noSelection;\n      const hover = key === keyboardHoverKey;\n      const klass = classNames({ active: selected });\n      if (storageKey && bookmarks && bookmarks[key]) {\n        bookMarkRows.push(<DropDownRow className={klass} key={key} itemKey={key} content={content} onUnBookmark={this.onUnBookmark} onclick={this.onClick} selected={selected} hover={hover} canFavorite={canFavorite} onFavorite={this.onFavorite} favoriteKey={favoriteKey} />);\n        return;\n      }\n      if (spacerBefore.has(key)) {\n        rows.push(\n          <li key={`${key}-spacer`}>\n            <div className=\"dropdown-menu__divider\" />\n          </li>,\n        );\n      }\n\n      if (_.has(headerBefore, key)) {\n        rows.push(\n          <li key={`${key}-header`}>\n            <div className=\"dropdown-menu__header\">{headerBefore[key]}</div>\n          </li>,\n        );\n      }\n      rows.push(<DropDownRow className={klass} key={key} itemKey={key} content={content} onBookmark={!noBookmark && storageKey && this.onBookmark} onclick={this.onClick} selected={selected} hover={hover} autocompleteFilter={autocompleteFilter} />);\n    };\n\n    _.each(items, (v, k) => addItem(k, v));\n\n    //render PF4 dropdown markup if this is not the autocomplete filter\n    if (autocompleteFilter) {\n      return (\n        <div className={className} ref={this.dropdownElement} style={this.props.style}>\n          <div className={classNames('dropdown pf-c-dropdown', { 'pf-m-expanded': this.state.active }, dropDownClassName)}>\n            <button aria-haspopup=\"true\" onClick={this.toggle} onKeyDown={this.onKeyDown} type=\"button\" className={classNames('pf-c-dropdown__toggle', buttonClassName)} id={this.props.id} aria-describedby={describedBy} disabled={disabled}>\n              <div className=\"btn-dropdown__content-wrap\">\n                <span className=\"pf-c-dropdown__toggle-text\">\n                  {titlePrefix && `${titlePrefix}: `}\n                  {title}\n                </span>\n                <CaretDownIcon className=\"pf-c-dropdown__toggle-icon\" />\n              </div>\n            </button>\n            {active && (\n              <ul role=\"listbox\" ref={this.dropdownList} className={classNames('dropdown-menu__autocomplete-filter', 'pf-c-dropdown__menu', menuClassName)}>\n                {autocompleteFilter && (\n                  <div className=\"dropdown-menu__filter\">\n                    <input autoFocus type=\"text\" ref={input => (this.input = input)} onChange={this.changeTextFilter} placeholder={autocompletePlaceholder} value={autocompleteText || ''} autoCapitalize=\"none\" onKeyDown={this.onKeyDown} className=\"pf-c-form-control\" onClick={e => e.stopPropagation()} data-test-id=\"dropdown-text-filter\" />\n                  </div>\n                )}\n                {this.renderActionItem()}\n                {bookMarkRows}\n                {_.size(bookMarkRows) ? (\n                  <li className=\"co-namespace-selector__divider\">\n                    <div className=\"dropdown-menu__divider\" />\n                  </li>\n                ) : null}\n                {rows}\n              </ul>\n            )}\n          </div>\n        </div>\n      );\n    }\n\n    //pf4 markup\n    return (\n      <div className={className} ref={this.dropdownElement} style={this.props.style}>\n        <div className={classNames({ 'dropdown pf-c-dropdown': true, 'pf-m-expanded': this.state.active }, dropDownClassName)}>\n          <button aria-label={ariaLabel} aria-haspopup=\"true\" aria-expanded={this.state.active} className={classNames('pf-c-dropdown__toggle', buttonClassName)} data-test-id=\"dropdown-button\" onClick={this.toggle} onKeyDown={this.onKeyDown} type=\"button\" id={this.props.id} aria-describedby={describedBy} disabled={disabled}>\n            <span className=\"pf-c-dropdown__toggle-text\">\n              {titlePrefix && `${titlePrefix}: `}\n              {title}\n            </span>\n            <CaretDownIcon className=\"pf-c-dropdown__toggle-icon\" />\n          </button>\n          {active && (\n            <ul ref={this.dropdownList} className={classNames('pf-c-dropdown__menu', menuClassName)}>\n              {rows}\n            </ul>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nDropdown.propTypes = {\n  actionItems: PropTypes.arrayOf(\n    PropTypes.shape({\n      actionKey: PropTypes.string,\n      actionTitle: PropTypes.string,\n    }),\n  ),\n  autocompleteFilter: PropTypes.func,\n  autocompletePlaceholder: PropTypes.string,\n  canFavorite: PropTypes.bool,\n  className: PropTypes.string,\n  defaultBookmarks: PropTypes.objectOf(PropTypes.string),\n  dropDownClassName: PropTypes.string,\n  enableBookmarks: PropTypes.bool,\n  headerBefore: PropTypes.objectOf(PropTypes.string),\n  items: PropTypes.object.isRequired,\n  menuClassName: PropTypes.string,\n  buttonClassName: PropTypes.string,\n  noSelection: PropTypes.bool,\n  storageKey: PropTypes.string,\n  spacerBefore: PropTypes.instanceOf(Set),\n  textFilter: PropTypes.string,\n  title: PropTypes.node,\n  disabled: PropTypes.bool,\n  type: PropTypes.string,\n};\n\nDropdown.defaultProps = {\n  type: 'single',\n};\n\nclass ActionsMenuDropdown extends DropdownMixin {\n  render() {\n    const { actions, title = undefined, t } = this.props;\n    const onClick = (event, option) => {\n      event.preventDefault();\n\n      if (option.callback) {\n        option.callback();\n      }\n\n      if (option.href) {\n        history.push(option.href);\n      }\n\n      this.hide();\n    };\n    return (\n      <div\n        ref={this.dropdownElement}\n        className={classNames({\n          'co-actions-menu pf-c-dropdown': true,\n          'pf-m-expanded': this.state.active,\n        })}\n      >\n        <button type=\"button\" aria-haspopup=\"true\" aria-label=\"Actions\" aria-expanded={this.state.active} className=\"pf-c-dropdown__toggle\" onClick={this.toggle} data-test-id=\"actions-menu-button\">\n          <span className=\"pf-c-dropdown__toggle-text\">{title || t('COMMON:MSG_MAIN_ACTIONBUTTON_1')}</span>\n          <CaretDownIcon className=\"pf-c-dropdown__toggle-icon\" />\n        </button>\n        {this.state.active && <KebabItems options={actions} onClick={onClick} />}\n      </div>\n    );\n  }\n}\n\nconst ActionsMenu_ = ({ actions, impersonate, title = undefined }) => {\n  const { t } = useTranslation();\n  const [isVisible, setVisible] = useSafetyFirst(false);\n\n  // Check if any actions are visible when actions have access reviews.\n  React.useEffect(() => {\n    if (!actions.length) {\n      setVisible(false);\n      return;\n    }\n\n    const promises = actions.reduce((acc, action) => {\n      if (action.accessReview) {\n        acc.push(checkAccess(action.accessReview));\n      }\n      return acc;\n    }, []);\n\n    // Only need to resolve if all actions require access review\n    if (promises.length !== actions.length) {\n      setVisible(true);\n      return;\n    }\n\n    Promise.all(promises)\n      .then(results => setVisible(_.some(results, 'status.allowed')))\n      .catch(() => setVisible(true));\n  }, [actions, impersonate, setVisible]);\n\n  return isVisible ? <ActionsMenuDropdown actions={actions} title={title} t={t} /> : null;\n};\nexport const ActionsMenu = connect(impersonateStateToProps)(ActionsMenu_);\n\nActionsMenu.propTypes = {\n  actions: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.node.isRequired,\n      href: PropTypes.string,\n      callback: PropTypes.func,\n      accessReview: PropTypes.object,\n    }),\n  ).isRequired,\n  title: PropTypes.node,\n};\n\nconst containerLabel = container => <ResourceName name={container ? container.name : ''} kind=\"Container\" />;\n\nexport class ContainerDropdown extends React.PureComponent {\n  getSpacer(container) {\n    const spacerBefore = new Set();\n    return container ? spacerBefore.add(container.name) : spacerBefore;\n  }\n\n  getHeaders(container, initContainer) {\n    return initContainer\n      ? {\n          [container.name]: 'Containers',\n          [initContainer.name]: 'Init Containers',\n        }\n      : {};\n  }\n\n  render() {\n    const { currentKey, containers, initContainers, onChange } = this.props;\n    if (_.isEmpty(containers) && _.isEmpty(initContainers)) {\n      return null;\n    }\n    const firstInitContainer = _.find(initContainers, { order: 0 });\n    const firstContainer = _.find(containers, { order: 0 });\n    const spacerBefore = this.getSpacer(firstInitContainer);\n    const headerBefore = this.getHeaders(firstContainer, firstInitContainer);\n    const dropdownItems = _.mapValues(_.merge(containers, initContainers), containerLabel);\n    const title = _.get(dropdownItems, currentKey) || containerLabel(firstContainer);\n    return <Dropdown className=\"btn-group\" menuClassName=\"dropdown-menu--text-wrap\" headerBefore={headerBefore} items={dropdownItems} spacerBefore={spacerBefore} title={title} onChange={onChange} selectedKey={currentKey} />;\n  }\n}\n\nContainerDropdown.propTypes = {\n  containers: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n  currentKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  initContainers: PropTypes.object,\n  onChange: PropTypes.func.isRequired,\n};\n\nContainerDropdown.defaultProps = {\n  currentKey: '',\n  initContainers: {},\n};\n","import { pluralize } from './details-page';\n\nexport const entitlementTitles = {\n  nodes: {\n    uppercase: 'Node',\n    lowercase: 'node',\n    inPairs: false,\n  },\n  vCPUs: {\n    uppercase: 'vCPU',\n    lowercase: 'vCPU',\n    inPairs: true,\n  },\n  sockets: {\n    uppercase: 'Socket',\n    lowercase: 'socket',\n    inPairs: true,\n  },\n};\n\nexport const entitlementTitle = (name, count) => {\n  const entitlement = entitlementTitles[name];\n  if (!entitlement) {\n    return 'Tectonic';\n  }\n\n  let title = entitlement.uppercase;\n  if (entitlement.inPairs) {\n    title = `${title} Pair`;\n    count = Math.floor(count / 2);\n  }\n\n  return pluralize(count, title);\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport {\n  AutoSizer,\n  List as VirtualList,\n  WindowScroller,\n  CellMeasurer,\n  CellMeasurerCache,\n} from 'react-virtualized';\nimport { CSSTransition } from 'react-transition-group';\nimport classNames from 'classnames';\n\nimport { EventKind } from '../../module/k8s';\nimport { WithScrollContainer } from './dom-utils';\n\n// Keep track of seen events so we only animate new ones.\nconst seen = new Set();\nconst timeout = { enter: 150 };\n\nconst measurementCache = new CellMeasurerCache({\n  fixedWidth: true,\n});\n\nclass SysEvent extends React.Component<SysEventProps> {\n  shouldComponentUpdate(nextProps: SysEventProps) {\n    if (this.props.event.lastTimestamp !== nextProps.event.lastTimestamp) {\n      // Timestamps can be modified because events can be combined.\n      return true;\n    }\n    if (_.isEqual(this.props.style, nextProps.style)) {\n      return false;\n    }\n    return true;\n  }\n\n  componentWillUnmount() {\n    // TODO (kans): this is not correct, but don't memory leak :-/\n    seen.delete(this.props.event.metadata.uid);\n  }\n\n  render() {\n    const { EventComponent, index, style, event, className } = this.props;\n\n    let shouldAnimate: boolean;\n    const key = event.metadata.uid;\n    // Only animate events if they're at the start of the list (first 6) and we haven't seen them before.\n    if (!seen.has(key) && index < 6) {\n      seen.add(key);\n      shouldAnimate = true;\n    }\n\n    return (\n      <div className={classNames('co-sysevent--transition', className)} style={style} role=\"row\">\n        <CSSTransition\n          mountOnEnter={true}\n          appear={shouldAnimate}\n          in\n          exit={false}\n          timeout={timeout}\n          classNames=\"slide\"\n        >\n          {(status) => (\n            <div className={`slide-${status}`}>\n              <EventComponent event={event} />\n            </div>\n          )}\n        </CSSTransition>\n      </div>\n    );\n  }\n}\n\nexport const EventStreamList: React.FC<EventStreamListProps> = ({\n  events,\n  className,\n  EventComponent,\n}) => {\n  const [list, setList] = React.useState(null);\n  const onResize = React.useCallback(() => measurementCache.clearAll(), []);\n  React.useEffect(() => {\n    onResize();\n    list?.recomputeRowHeights();\n  }, [list, events, onResize]);\n  const rowRenderer = React.useCallback(\n    ({ index, style, key, parent }) => (\n      <CellMeasurer\n        cache={measurementCache}\n        columnIndex={0}\n        key={key}\n        rowIndex={index}\n        parent={parent}\n      >\n        {({ measure }) => (\n          <SysEvent\n            className={className}\n            event={events[index]}\n            EventComponent={EventComponent}\n            onLoad={measure}\n            onEntered={print}\n            key={key}\n            style={style}\n            index={index}\n          />\n        )}\n      </CellMeasurer>\n    ),\n    [events, className, EventComponent],\n  );\n\n  const renderVirtualizedTable = (scrollContainer) => (\n    <WindowScroller scrollElement={scrollContainer}>\n      {({ height, isScrolling, registerChild, onChildScroll, scrollTop }) => (\n        <AutoSizer disableHeight onResize={onResize}>\n          {({ width }) => (\n            <div ref={registerChild}>\n              <VirtualList\n                autoHeight\n                data={events}\n                deferredMeasurementCache={measurementCache}\n                height={height || 0}\n                isScrolling={isScrolling}\n                onScroll={onChildScroll}\n                ref={setList}\n                rowCount={events.length}\n                rowHeight={measurementCache.rowHeight}\n                rowRenderer={rowRenderer}\n                scrollTop={scrollTop}\n                tabIndex={null}\n                width={width}\n              />\n            </div>\n          )}\n        </AutoSizer>\n      )}\n    </WindowScroller>\n  );\n\n  return events.length > 0 && <WithScrollContainer>{renderVirtualizedTable}</WithScrollContainer>;\n};\n\ntype EventStreamListProps = {\n  events: EventKind[];\n  EventComponent: React.ComponentType<EventComponentProps>;\n  className?: string;\n};\n\nexport type EventComponentProps = {\n  event: EventKind;\n};\n\ntype SysEventProps = {\n  EventComponent: React.ComponentType<EventComponentProps>;\n  event: EventKind;\n  onLoad: () => void;\n  onEntered: () => void;\n  style: React.CSSProperties;\n  index: number;\n  className?: string;\n};\n","import * as React from 'react';\nimport { Expandable } from '@patternfly/react-core';\n\ninterface ExpandCollapseProps {\n  textExpanded: string;\n  textCollapsed: string;\n}\n\nexport const ExpandCollapse: React.FC<ExpandCollapseProps> = ({\n  textCollapsed,\n  textExpanded,\n  children,\n}) => {\n  const [isExpanded, toggleExpandCollapse] = React.useState(false);\n  return (\n    <Expandable\n      toggleText={isExpanded ? textExpanded : textCollapsed}\n      onToggle={() => toggleExpandCollapse(!isExpanded)}\n    >\n      {children}\n    </Expandable>\n  );\n};\n","import * as React from 'react';\nimport { Button, Popover } from '@patternfly/react-core';\nimport { QuestionCircleIcon } from '@patternfly/react-icons';\n\nexport const FieldLevelHelp: React.FC<FieldLevelHelpProps> = React.memo(({ children }) => {\n  if (React.Children.count(children) === 0) {\n    return null;\n  }\n  return (\n    <Popover aria-label=\"Help\" bodyContent={children} enableFlip>\n      <Button variant=\"link\" isInline className=\"co-field-level-help\">\n        <QuestionCircleIcon className=\"co-field-level-help__icon\" />\n      </Button>\n    </Popover>\n  );\n});\n\ntype FieldLevelHelpProps = {\n  children: React.ReactNode;\n};\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { NativeTypes } from 'react-dnd-html5-backend';\nimport { DropTarget } from 'react-dnd';\nimport { ConnectDropTarget, DropTargetMonitor } from 'react-dnd/lib/interfaces';\n\nimport withDragDropContext from './drag-drop-context';\n\n// Maximal file size, in bytes, that user can upload\nconst maxFileUploadSize = 4000000;\nconst fileSizeErrorMsg = 'Maximum file size exceeded. File limit is 4MB.';\n\nexport class FileInput extends React.Component<FileInputProps, FileInputState> {\n  constructor(props) {\n    super(props);\n    this.onDataChange = this.onDataChange.bind(this);\n    this.onFileUpload = this.onFileUpload.bind(this);\n  }\n  onDataChange(event) {\n    this.props.onChange({\n      fileData: event.target.value,\n    });\n  }\n  readFile(file) {\n    if (file.size > maxFileUploadSize) {\n      this.props.onChange({\n        errorMessage: fileSizeErrorMsg,\n      });\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = () => {\n      const input = reader.result;\n      this.props.onChange({\n        fileData: input,\n        fileName: file.name,\n      });\n    };\n    reader.readAsText(file, 'UTF-8');\n  }\n  onFileUpload(event) {\n    this.readFile(event.target.files[0]);\n  }\n  render() {\n    const {\n      connectDropTarget,\n      errorMessage,\n      hideContents,\n      isOver,\n      canDrop,\n      id,\n      isRequired,\n    } = this.props;\n    const klass = classNames('co-file-dropzone-container', {\n      'co-file-dropzone--drop-over': isOver,\n    });\n    return connectDropTarget(\n      <div className=\"co-file-dropzone\">\n        {canDrop && (\n          <div className={klass}>\n            <p className=\"co-file-dropzone__drop-text\">Drop file here</p>\n          </div>\n        )}\n\n        <div className=\"form-group\">\n          <label\n            className={classNames('control-label', { 'co-required': isRequired })}\n            htmlFor={id}\n          >\n            {this.props.label}\n          </label>\n          <div className=\"modal-body__field\">\n            <div className=\"pf-c-input-group\">\n              <input\n                type=\"text\"\n                className=\"pf-c-form-control\"\n                value={this.props.inputFileName}\n                aria-describedby={`${id}-help`}\n                readOnly\n                disabled\n              />\n              <span className=\"pf-c-button pf-m-tertiary co-btn-file\">\n                <input type=\"file\" onChange={this.onFileUpload} />\n                Browse&hellip;\n              </span>\n            </div>\n            <p className=\"help-block\" id={`${id}-help`}>\n              {this.props.inputFieldHelpText}\n            </p>\n            {!hideContents && (\n              <textarea\n                data-test-id={\n                  this.props['data-test-id'] ? this.props['data-test-id'] : 'file-input-textarea'\n                }\n                className=\"pf-c-form-control co-file-dropzone__textarea\"\n                onChange={this.onDataChange}\n                value={this.props.inputFileData}\n                aria-describedby={`${id}-textarea-help`}\n                required={isRequired}\n              />\n            )}\n            <p className=\"help-block\" id={`${id}-textarea-help`}>\n              {this.props.textareaFieldHelpText}\n            </p>\n            {errorMessage && <div className=\"text-danger\">{errorMessage}</div>}\n          </div>\n        </div>\n      </div>,\n    );\n  }\n}\n\nconst boxTarget = {\n  drop(props: FileInputProps, monitor: DropTargetMonitor) {\n    if (props.onDrop && monitor.isOver()) {\n      props.onDrop(props, monitor);\n    }\n  },\n};\n\nconst FileInputComponent = DropTarget(NativeTypes.FILE, boxTarget, (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver(),\n  canDrop: monitor.canDrop(),\n}))(FileInput);\n\nexport const DroppableFileInput = withDragDropContext(\n  class DroppableFileInput extends React.Component<\n    DroppableFileInputProps,\n    DroppableFileInputState\n  > {\n    constructor(props) {\n      super(props);\n      this.state = {\n        inputFileName: '',\n        inputFileData: this.props.inputFileData || '',\n      };\n      this.handleFileDrop = this.handleFileDrop.bind(this);\n      this.onDataChange = this.onDataChange.bind(this);\n    }\n    handleFileDrop(item: any, monitor: DropTargetMonitor) {\n      if (!monitor) {\n        return;\n      }\n      const file = monitor.getItem().files[0];\n      if (file.size > maxFileUploadSize) {\n        this.setState({\n          errorMessage: fileSizeErrorMsg,\n          inputFileName: '',\n          inputFileData: '',\n        });\n        return;\n      }\n      const reader = new FileReader();\n      reader.onload = () => {\n        const input = reader.result as string; // Note(Yaacov): we use reader.readAsText\n        this.setState(\n          {\n            inputFileName: file.name,\n            inputFileData: input,\n            errorMessage: '',\n          },\n          () => this.props.onChange(input),\n        );\n      };\n      reader.readAsText(file, 'UTF-8');\n    }\n    onDataChange(data) {\n      const { fileData, fileName, errorMessage } = data;\n      this.setState(\n        {\n          inputFileData: fileData || '',\n          inputFileName: fileName || '',\n          errorMessage: errorMessage || '',\n        },\n        () => this.props.onChange(this.state.inputFileData),\n      );\n    }\n    render() {\n      return (\n        <FileInputComponent\n          {...this.props}\n          errorMessage={this.state.errorMessage}\n          onDrop={this.handleFileDrop}\n          onChange={this.onDataChange}\n          inputFileData={this.state.inputFileData}\n          inputFileName={this.state.inputFileName}\n        />\n      );\n    }\n  },\n);\n\nexport type DroppableFileInputProps = {\n  inputFileData: string;\n  onChange: Function;\n  label: string;\n  id: string;\n  inputFieldHelpText: string;\n  textareaFieldHelpText: string;\n  isRequired: boolean;\n  hideContents?: boolean;\n};\n\nexport type DroppableFileInputState = {\n  inputFileData: string;\n  inputFileName: string;\n  errorMessage?: any;\n};\n\nexport type FileInputState = {\n  inputFileData: string;\n  inputFileName: string;\n};\n\nexport type FileInputProps = {\n  errorMessage: string;\n  connectDropTarget?: ConnectDropTarget;\n  isOver?: boolean;\n  canDrop?: boolean;\n  onDrop: (props: FileInputProps, monitor: DropTargetMonitor) => void;\n  inputFileData: string;\n  inputFileName: string;\n  onChange: Function;\n  label: string;\n  id: string;\n  inputFieldHelpText: string;\n  textareaFieldHelpText: string;\n  isRequired: boolean;\n  hideContents?: boolean;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Map as ImmutableMap } from 'immutable';\n\nimport { inject } from './inject';\nimport { makeReduxID, makeQuery } from './k8s-watcher';\nimport * as k8sActions from '../../actions/k8s';\n\nconst shallowMapEquals = (a, b) => {\n  if (a === b || (a.size === 0 && b.size === 0)) {\n    return true;\n  }\n  if (a.size !== b.size) {\n    return false;\n  }\n  return a.every((v, k) => b.get(k) === v);\n};\n\nconst processReduxId = ({ k8s }, props) => {\n  const { reduxID, isList, filters } = props;\n\n  if (!reduxID) {\n    return {};\n  }\n\n  if (!isList) {\n    let stuff = k8s.get(reduxID);\n    if (stuff) {\n      stuff = stuff.toJS();\n      stuff.optional = props.optional;\n    }\n    return stuff || {};\n  }\n\n  const data = k8s.getIn([reduxID, 'data']);\n  const _filters = k8s.getIn([reduxID, 'filters']);\n  const selected = k8s.getIn([reduxID, 'selected']);\n\n  return {\n    data: data && data.toArray().map((p) => p.toJSON()),\n    // This is a hack to allow filters passed down from props to make it to\n    // the injected component. Ideally filters should all come from redux.\n    filters: _.extend({}, _filters && _filters.toJS(), filters),\n    kind: props.kind,\n    loadError: k8s.getIn([reduxID, 'loadError']),\n    loaded: k8s.getIn([reduxID, 'loaded']),\n    optional: props.optional,\n    selected,\n  };\n};\n\nconst worstError = (errors) => {\n  let worst = errors && errors[0];\n  for (const e of errors) {\n    if (e.status === 403) {\n      return e;\n    }\n    if (e.status === 401) {\n      worst = e;\n      continue;\n    }\n    if (worst.status === 401) {\n      continue;\n    }\n    if (e.status > worst.status) {\n      worst = e;\n      continue;\n    }\n  }\n  return worst;\n};\n\nconst mapStateToProps = ({ k8s }) => ({\n  k8s,\n});\n\nconst propsAreEqual = (prevProps, nextProps) => {\n  if (nextProps.children === prevProps.children && nextProps.reduxes === prevProps.reduxes) {\n    return nextProps.reduxes.every(\n      ({ reduxID }) => prevProps.k8s.get(reduxID) === nextProps.k8s.get(reduxID),\n    );\n  }\n  return false;\n};\n\n// A wrapper Component that takes data out of redux for a list or object at some reduxID ...\n// passing it to children\nconst ConnectToState = connect(mapStateToProps)(\n  React.memo(({ k8s, reduxes, children }) => {\n    const resources = {};\n\n    reduxes.forEach((redux) => {\n      resources[redux.prop] = processReduxId({ k8s }, redux);\n    });\n\n    const required = _.filter(resources, (r) => !r.optional);\n    const loaded = _.every(resources, (resource) =>\n      resource.optional ? resource.loaded || !_.isEmpty(resource.loadError) : resource.loaded,\n    );\n    const loadError = worstError(_.map(required, 'loadError').filter(Boolean));\n\n    const k8sResults = Object.assign({}, resources, {\n      filters: Object.assign({}, ..._.map(resources, 'filters')),\n      loaded,\n      loadError,\n      reduxIDs: _.map(reduxes, 'reduxID'),\n      resources,\n    });\n\n    return inject(children, k8sResults);\n  }, propsAreEqual),\n);\n\nconst stateToProps = ({ k8s }, { resources }) => {\n  const k8sModels = resources.reduce(\n    (models, { kind }) => models.set(kind, k8s.getIn(['RESOURCES', 'models', kind])),\n    ImmutableMap(),\n  );\n  const loaded = (r) =>\n    r.optional ||\n    k8s.getIn([\n      makeReduxID(\n        k8sModels.get(r.kind),\n        makeQuery(r.namespace, r.selector, r.fieldSelector, r.name),\n      ),\n      'loaded',\n    ]);\n\n  return {\n    k8sModels,\n    loaded: resources.every(loaded),\n    inFlight: k8s.getIn(['RESOURCES', 'inFlight']),\n  };\n};\n\nexport const Firehose = connect(\n  stateToProps,\n  {\n    stopK8sWatch: k8sActions.stopK8sWatch,\n    watchK8sObject: k8sActions.watchK8sObject,\n    watchK8sList: k8sActions.watchK8sList,\n  },\n  null,\n  {\n    areStatesEqual: (next, prev) => next.k8s === prev.k8s,\n    areStatePropsEqual: (next, prev) =>\n      next.loaded === prev.loaded &&\n      next.inFlight === prev.inFlight &&\n      shallowMapEquals(next.k8sModels, prev.k8sModels),\n  },\n)(\n  /** @augments {React.Component<{k8sModels?: Map<string, K8sKind>, doNotConnectToState?: boolean}>} */\n  class Firehose extends React.Component {\n    state = {\n      firehoses: [],\n    };\n\n    // TODO: Convert this to `componentDidMount`\n    // eslint-disable-next-line camelcase\n    UNSAFE_componentWillMount() {\n      this.start();\n    }\n\n    componentWillUnmount() {\n      this.clear();\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n      if (\n        Object.keys(nextProps).length === Object.keys(this.props).length &&\n        Object.keys(nextProps)\n          .filter((key) => key !== 'inFlight')\n          .every((key) => nextProps[key] === this.props[key]) &&\n        (nextState === this.state ||\n          (nextState.firehoses.length === 0 && this.state.firehoses.length === 0))\n      ) {\n        return this.props.loaded ? false : this.props.inFlight !== nextProps.inFlight;\n      }\n      return true;\n    }\n\n    componentDidUpdate(prevProps) {\n      const discoveryComplete =\n        !this.props.inFlight && !this.props.loaded && this.state.firehoses.length === 0;\n      const resourcesChanged =\n        _.intersectionWith(prevProps.resources, this.props.resources, _.isEqual).length !==\n        this.props.resources.length;\n\n      if (discoveryComplete || resourcesChanged) {\n        this.clear();\n        this.start();\n      }\n    }\n\n    start() {\n      const { watchK8sList, watchK8sObject, resources, k8sModels, inFlight } = this.props;\n\n      let firehoses = [];\n      if (!(inFlight && _.some(resources, ({ kind }) => !k8sModels.get(kind)))) {\n        firehoses = resources\n          .map((resource) => {\n            const query = makeQuery(\n              resource.namespace,\n              resource.selector,\n              resource.fieldSelector,\n              resource.name,\n              resource.limit,\n            );\n            // console.log('firehose중간');\n            // console.log(location.href);\n            // const splitUrl = location.href.split('/');\n            // console.log(splitUrl);\n            // console.log(splitUrl[splitUrl.length - 2]);\n\n            const name = resource.name;\n            const k8sKind = k8sModels.get(resource.kind);\n            const id = makeReduxID(k8sKind, query);\n            // return _.extend({}, resource, { query, id, k8sKind, listName: splitUrl[splitUrl.length - 2] });\n            return _.extend({}, resource, { query, id, k8sKind });\n          })\n          .filter((f) => {\n            if (_.isEmpty(f.k8sKind)) {\n              // eslint-disable-next-line no-console\n              console.warn(`No model registered for ${f.kind}`);\n            }\n            return !_.isEmpty(f.k8sKind);\n          });\n      }\n\n      // firehoses.forEach(({ id, query, k8sKind, isList, name, namespace, listName }) =>\n      //   isList\n      //     ? watchK8sList(id, query, k8sKind, null, listName)\n      //     : watchK8sObject(id, name, namespace, query, k8sKind),\n      // );\n      firehoses.forEach(({ id, query, k8sKind, isList, name, namespace }) =>\n        isList\n          ? watchK8sList(id, query, k8sKind)\n          : watchK8sObject(id, name, namespace, query, k8sKind),\n      );\n      this.setState({ firehoses });\n    }\n\n    clear() {\n      this.state.firehoses.forEach(({ id }) => this.props.stopK8sWatch(id));\n    }\n\n    render() {\n      if (this.props.loaded || this.state.firehoses.length > 0) {\n        const children = inject(this.props.children, _.omit(this.props, ['children', 'resources']));\n\n        if (this.props.doNotConnectToState) {\n          return children;\n        }\n\n        const reduxes = this.state.firehoses.map(\n          ({ id, prop, isList, filters, optional, kind }) => ({\n            reduxID: id,\n            prop,\n            isList,\n            filters,\n            optional,\n            kind,\n          }),\n        );\n        return <ConnectToState reduxes={reduxes}>{children}</ConnectToState>;\n      }\n      return null;\n    }\n  },\n);\nFirehose.WrappedComponent.contextTypes = {\n  router: PropTypes.object,\n};\n\nFirehose.contextTypes = {\n  store: PropTypes.object,\n};\n\nFirehose.propTypes = {\n  children: PropTypes.node,\n  expand: PropTypes.bool,\n  doNotConnectToState: PropTypes.bool,\n  resources: PropTypes.arrayOf(\n    PropTypes.shape({\n      kind: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n      name: PropTypes.string,\n      namespace: PropTypes.string,\n      selector: PropTypes.object,\n      fieldSelector: PropTypes.string,\n      isList: PropTypes.bool,\n      optional: PropTypes.bool, // do not block children-rendering while resource is still being loaded; do not fail if resource is missing (404)\n      limit: PropTypes.number,\n    }),\n  ).isRequired,\n};\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash-es';\nimport { Link } from 'react-router-dom';\nimport {\n  Badge,\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  SplitItem,\n  Split,\n} from '@patternfly/react-core';\nimport { Status, HealthChecksAlert } from '@console/shared';\nimport {\n  ActionsMenu,\n  ResourceIcon,\n  KebabAction,\n  resourcePath,\n  FirehoseResult,\n  KebabOption,\n} from './index';\nimport { connectToModel } from '../../kinds';\nimport {\n  K8sKind,\n  K8sResourceKind,\n  K8sResourceKindReference,\n  referenceForModel,\n} from '../../module/k8s';\nimport { ResourceItemDeleting } from '../overview/project-overview';\n\nexport const BreadCrumbs: React.SFC<BreadCrumbsProps> = ({ breadcrumbs }) => (\n  <Breadcrumb>\n    {breadcrumbs.map((crumb, i, { length }) => {\n      const isLast = i === length - 1;\n\n      return (\n        <BreadcrumbItem key={i} isActive={isLast}>\n          {isLast ? (\n            crumb.name\n          ) : (\n              <Link\n                className=\"pf-c-breadcrumb__link\"\n                to={crumb.path}\n                data-test-id={`breadcrumb-link-${i}`}\n              >\n                {crumb.name}\n              </Link>\n            )}\n        </BreadcrumbItem>\n      );\n    })}\n  </Breadcrumb>\n);\n\nexport const ActionButtons: React.SFC<ActionButtonsProps> = ({ actionButtons }) => (\n  <div className=\"co-action-buttons\">\n    {_.map(actionButtons, (actionButton, i) => {\n      if (!_.isEmpty(actionButton)) {\n        return (\n          <Button\n            className=\"co-action-buttons__btn\"\n            variant=\"primary\"\n            onClick={actionButton.callback}\n            key={i}\n          >\n            {actionButton.label}\n          </Button>\n        );\n      }\n    })}\n  </div>\n);\n\nexport const PageHeading = connectToModel((props: PageHeadingProps) => {\n  const {\n    kind,\n    kindObj,\n    detail,\n    title,\n    menuActions,\n    buttonActions,\n    obj,\n    breadcrumbsFor,\n    titleFunc,\n    style,\n    customData,\n    badge,\n    getResourceStatus = (resource: K8sResourceKind): string =>\n      _.get(resource, ['status', 'phase'], null),\n    className,\n  } = props;\n  const extraResources = _.reduce(\n    props.resourceKeys,\n    (extraObjs, key) => ({ ...extraObjs, [key]: _.get(props[key], 'data') }),\n    {},\n  );\n  const data = _.get(obj, 'data');\n  const resourceTitle = titleFunc && data.hasOwnProperty('metadata') ? titleFunc(data) : title;\n  const hasButtonActions = !_.isEmpty(buttonActions);\n  const hasMenuActions = _.isFunction(menuActions) || !_.isEmpty(menuActions);\n  const hasData = !_.isEmpty(data);\n  const showActions =\n    (hasButtonActions || hasMenuActions) && hasData && !_.get(data, 'metadata.deletionTimestamp');\n  const resourceStatus = hasData && getResourceStatus ? getResourceStatus(data) : null;\n  const showHeading = props.icon || kind || resourceTitle || resourceStatus || badge || showActions;\n  return (\n    <div\n      className={classNames(\n        'co-m-nav-title',\n        { 'co-m-nav-title--detail': detail },\n        { 'co-m-nav-title--logo': props.icon },\n        { 'co-m-nav-title--breadcrumbs': breadcrumbsFor && !_.isEmpty(data) },\n        className,\n      )}\n      style={style}\n    >\n      {breadcrumbsFor && !_.isEmpty(data) && (\n        <Split style={{ alignItems: 'baseline' }}>\n          <SplitItem isFilled>\n            <BreadCrumbs breadcrumbs={breadcrumbsFor(data)} />\n          </SplitItem>\n          {badge && (\n            <SplitItem>{<span className=\"co-m-pane__heading-badge\">{badge}</span>}</SplitItem>\n          )}\n        </Split>\n      )}\n      {showHeading && (\n        <h1\n          className={classNames('co-m-pane__heading', { 'co-m-pane__heading--logo': props.icon })}\n        >\n          {props.icon ? (\n            <props.icon obj={data} />\n          ) : (\n              <div className=\"co-m-pane__name co-resource-item\">\n                {kind && <ResourceIcon kind={kind} className=\"co-m-resource-icon--lg\" />}{' '}\n                <span data-test-id=\"resource-title\" className=\"co-resource-item__resource-name\">\n                  {resourceTitle}\n                </span>\n                {resourceStatus && (\n                  <span className=\"co-resource-item__resource-status hidden-xs\">\n                    <Badge className=\"co-resource-item__resource-status-badge\" isRead>\n                      <Status status={resourceStatus} />\n                    </Badge>\n                  </span>\n                )}\n              </div>\n            )}\n          {!breadcrumbsFor && badge && <span className=\"co-m-pane__heading-badge\">{badge}</span>}\n          {showActions && (\n            <div className=\"co-actions\" data-test-id=\"details-actions\">\n              {hasButtonActions && (\n                <ActionButtons actionButtons={buttonActions.map((a) => a(kindObj, data))} />\n              )}\n              {hasMenuActions && (\n                <ActionsMenu\n                  actions={\n                    _.isFunction(menuActions)\n                      ? menuActions(kindObj, data, extraResources, customData)\n                      : menuActions.map((a) => a(kindObj, data, extraResources, customData))\n                  }\n                />\n              )}\n            </div>\n          )}\n        </h1>\n      )}\n      {props.children}\n    </div>\n  );\n});\n\nexport const SectionHeading: React.SFC<SectionHeadingProps> = ({\n  text,\n  children,\n  style,\n  required,\n}) => (\n  <h2 className=\"co-section-heading\" style={style} data-test-section-heading={text}>\n    <span\n      className={classNames({\n        'co-required': required,\n      })}\n    >\n      {text}\n    </span>\n    {children}\n  </h2>\n);\n\nexport const SidebarSectionHeading: React.SFC<SidebarSectionHeadingProps> = ({\n  text,\n  children,\n  style,\n  className,\n}) => (\n  <h2 className={`sidebar__section-heading ${className}`} style={style}>\n    {text}\n    {children}\n  </h2>\n);\n\nexport const ResourceOverviewHeading: React.SFC<ResourceOverviewHeadingProps> = ({\n  kindObj,\n  actions,\n  resource,\n}) => {\n  const isDeleting = !!resource.metadata.deletionTimestamp;\n  return (\n    <div className=\"overview__sidebar-pane-head resource-overview__heading\">\n      <h1 className=\"co-m-pane__heading\">\n        <div className=\"co-m-pane__name co-resource-item\">\n          <ResourceIcon\n            className=\"co-m-resource-icon--lg\"\n            kind={kindObj.crd ? referenceForModel(kindObj) : resource.kind}\n          />\n          <Link\n            to={resourcePath(\n              kindObj.crd ? referenceForModel(kindObj) : resource.kind,\n              resource.metadata.name,\n              resource.metadata.namespace,\n            )}\n            className=\"co-resource-item__resource-name\"\n          >\n            {resource.metadata.name}\n          </Link>\n          {isDeleting && <ResourceItemDeleting />}\n        </div>\n        {!isDeleting && (\n          <div className=\"co-actions\">\n            <ActionsMenu actions={actions.map((a) => a(kindObj, resource))} />\n          </div>\n        )}\n      </h1>\n      <HealthChecksAlert resource={resource} />\n    </div>\n  );\n};\n\nexport type ActionButtonsProps = {\n  actionButtons: any[];\n};\n\nexport type BreadCrumbsProps = {\n  breadcrumbs: { name: string; path: string }[];\n};\n\nexport type KebabOptionsCreator = (\n  kindObj: K8sKind,\n  data: K8sResourceKind,\n  extraResources?: { [prop: string]: K8sResourceKind | K8sResourceKind[] },\n  customData?: any,\n) => KebabOption[];\n\nexport type PageHeadingProps = {\n  breadcrumbsFor?: (obj: K8sResourceKind) => { name: string; path: string }[];\n  buttonActions?: any[];\n  children?: React.ReactChildren;\n  detail?: boolean;\n  kind?: K8sResourceKindReference;\n  kindObj?: K8sKind;\n  menuActions?: Function[] | KebabOptionsCreator; // FIXME should be \"KebabAction[] |\" refactor pipeline-actions.tsx, etc.\n  obj?: FirehoseResult<K8sResourceKind>;\n  resourceKeys?: string[];\n  style?: object;\n  title?: string | JSX.Element;\n  titleFunc?: (obj: K8sResourceKind) => string | JSX.Element;\n  customData?: any;\n  badge?: React.ReactNode;\n  icon?: React.ComponentType<{ obj?: K8sResourceKind }>;\n  getResourceStatus?: (resource: K8sResourceKind) => string;\n  className?: string;\n};\n\nexport type ResourceOverviewHeadingProps = {\n  actions: KebabAction[];\n  kindObj: K8sKind;\n  resource: K8sResourceKind;\n};\n\nexport type SectionHeadingProps = {\n  children?: any;\n  style?: any;\n  text: string;\n  required?: boolean;\n};\n\nexport type SidebarSectionHeadingProps = {\n  children?: any;\n  style?: any;\n  className?: string;\n  text: string;\n};\n\nBreadCrumbs.displayName = 'BreadCrumbs';\nPageHeading.displayName = 'PageHeading';\nResourceOverviewHeading.displayName = 'ResourceOverviewHeading';\nSectionHeading.displayName = 'SectionHeading';\nSidebarSectionHeading.displayName = 'SidebarSectionHeading';\n","import * as React from 'react';\nimport classNames from 'classnames';\n\nexport const HintBlock: React.FC<HintBlockProps> = ({ title, children, className }) => {\n  const classes = classNames('co-hint-block', className);\n\n  return (\n    <div className={classes}>\n      <h2 className=\"co-hint-block__title h4\">{title}</h2>\n      <div className=\"co-hint-block__body\">{children}</div>\n    </div>\n  );\n};\n\nexport type HintBlockProps = {\n  title: string;\n  children: React.ReactNode;\n  className?: string;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { History, Location } from 'history';\nimport { Route, Switch, Link, withRouter, match, matchPath } from 'react-router-dom';\n\nimport { EmptyBox, StatusBox } from './status-box';\nimport { PodsPage } from '../pod';\nimport NodesPage from '@console/app/src/components/nodes/NodesPage';\nimport { AsyncComponent } from './async';\nimport { K8sResourceKind, K8sResourceCommon } from '../../module/k8s';\nimport { referenceForModel, referenceFor } from '../../module/k8s/k8s';\nimport { useExtensions, HorizontalNavTab, isHorizontalNavTab } from '@console/plugin-sdk';\nimport { useTranslation } from 'react-i18next';\n\nconst editYamlComponent = props => <AsyncComponent loader={() => import('../edit-yaml').then(c => c.EditYAML)} obj={props.obj} />;\nexport const viewYamlComponent = props => <AsyncComponent loader={() => import('../edit-yaml').then(c => c.EditYAML)} obj={props.obj} readOnly={true} />;\n\nexport class NodesComponent extends React.PureComponent<NodesComponentProps> {\n  render() {\n    return <NodesPage />;\n  }\n}\nexport class PodsComponent extends React.PureComponent<PodsComponentProps> {\n  render() {\n    const {\n      metadata: { namespace },\n      spec: { selector },\n    } = this.props.obj;\n    const { customData } = this.props;\n    if (_.isEmpty(selector)) {\n      return <EmptyBox label=\"Pods\" />;\n    }\n\n    // Hide the create button to avoid confusion when showing pods for an object.\n    // Otherwise it might seem like you click \"Create Pod\" to add replicas instead\n    // of scaling the owner.\n    return <PodsPage showTitle={false} namespace={namespace} selector={selector} canCreate={false} customData={customData} />;\n  }\n}\n\nexport type Page = {\n  href?: string;\n  path?: string;\n  name: string;\n  component?: React.ComponentType<PageComponentProps>;\n  pageData?: any;\n};\n\ntype NavFactory = { [name: string]: (c?: React.ComponentType<any>) => Page };\nexport const navFactory: NavFactory = {\n  details: component => ({\n    href: '',\n    name: 'COMMON:MSG_DETAILS_TABOVERVIEW_1',\n    component,\n  }),\n  events: component => ({\n    href: 'events',\n    name: '이벤트',\n    component,\n  }),\n  logs: component => ({\n    href: 'logs',\n    name: '로그',\n    component,\n  }),\n  editYaml: (component = editYamlComponent) => ({\n    href: 'yaml',\n    name: 'YAML',\n    component,\n  }),\n  pods: component => ({\n    href: 'pods',\n    name: '파드',\n    component: component || PodsComponent,\n  }),\n  nodes: component => ({\n    href: 'nodes',\n    name: '노드',\n    component: component || NodesComponent,\n  }),\n  roles: component => ({\n    href: 'roles',\n    name: '롤 바인딩',\n    component,\n  }),\n  builds: component => ({\n    href: 'builds',\n    name: '빌드',\n    component,\n  }),\n  envEditor: component => ({\n    href: 'environment',\n    name: '환경 변수',\n    component,\n  }),\n  clusterServiceClasses: component => ({\n    href: 'serviceclasses',\n    name: '서비스 클래스',\n    component,\n  }),\n  clusterServicePlans: component => ({\n    href: 'serviceplans',\n    name: '서비스 플랜',\n    component,\n  }),\n  serviceBindings: component => ({\n    href: 'servicebindings',\n    name: '서비스 바인딩',\n    component,\n  }),\n  clusterOperators: component => ({\n    href: 'clusteroperators',\n    name: '클러스터 오퍼레이터',\n    component,\n  }),\n  machineConfigs: component => ({\n    href: 'machineconfigs',\n    name: '머신 컨피그',\n    component,\n  }),\n  machines: component => ({\n    href: 'machines',\n    name: '머신',\n    component,\n  }),\n  workloads: component => ({\n    href: 'workloads',\n    name: '워크로드',\n    component,\n  }),\n  history: component => ({\n    href: 'history',\n    name: '히스토리',\n    component,\n  }),\n  signerKey: component => ({\n    href: 'signerkeys',\n    name: '서명자 키',\n    component,\n  }),\n};\n\nexport const NavBar = withRouter<NavBarProps>(({ pages, baseURL, basePath }) => {\n  basePath = basePath.replace(/\\/$/, '');\n\n  const { t } = useTranslation();\n  const tabs = (\n    <>\n      {pages.map(({ name, href, path }) => {\n        const matchURL = matchPath(location.pathname, {\n          path: `${basePath}/${path || href}`,\n          exact: true,\n        });\n        const klass = classNames('co-m-horizontal-nav__menu-item', {\n          'co-m-horizontal-nav-item--active': matchURL?.isExact,\n        });\n        return (\n          <li className={klass} key={name}>\n            <Link to={`${baseURL.replace(/\\/$/, '')}/${href}`} data-test-id={`horizontal-link-${name}`}>\n              {t(name)}\n            </Link>\n          </li>\n        );\n      })}\n    </>\n  );\n\n  return <ul className=\"co-m-horizontal-nav__menu\">{tabs}</ul>;\n});\nNavBar.displayName = 'NavBar';\n\nexport const HorizontalNav = React.memo((props: HorizontalNavProps) => {\n  const renderContent = (routes: JSX.Element[]) => {\n    const { noStatusBox, obj, EmptyMsg, label } = props;\n    const content = <Switch> {routes} </Switch>;\n\n    const skeletonDetails = (\n      <div className=\"skeleton-detail-view\">\n        <div className=\"skeleton-detail-view--head\" />\n        <div className=\"skeleton-detail-view--grid\">\n          <div className=\"skeleton-detail-view--column\">\n            <div className=\"skeleton-detail-view--tile skeleton-detail-view--tile-plain\" />\n            <div className=\"skeleton-detail-view--tile skeleton-detail-view--tile-resource\" />\n            <div className=\"skeleton-detail-view--tile skeleton-detail-view--tile-labels\" />\n            <div className=\"skeleton-detail-view--tile skeleton-detail-view--tile-resource\" />\n          </div>\n          <div className=\"skeleton-detail-view--column\">\n            <div className=\"skeleton-detail-view--tile skeleton-detail-view--tile-plain\" />\n            <div className=\"skeleton-detail-view--tile skeleton-detail-view--tile-plain\" />\n            <div className=\"skeleton-detail-view--tile skeleton-detail-view--tile-resource\" />\n            <div className=\"skeleton-detail-view--tile skeleton-detail-view--tile-plain\" />\n          </div>\n        </div>\n      </div>\n    );\n\n    if (noStatusBox) {\n      return content;\n    }\n\n    return (\n      <StatusBox skeleton={skeletonDetails} {...obj} EmptyMsg={EmptyMsg} label={label}>\n        {content}\n      </StatusBox>\n    );\n  };\n\n  const componentProps = {\n    ..._.pick(props, ['filters', 'selected', 'match', 'loaded']),\n    obj: _.get(props.obj, 'data'),\n  };\n  const extraResources = _.reduce(props.resourceKeys, (extraObjs, key) => ({ ...extraObjs, [key]: _.get(props[key], 'data') }), {});\n\n  const objReference = props.obj?.data ? referenceFor(props.obj.data) : '';\n  const navTabExtensions = useExtensions<HorizontalNavTab>(isHorizontalNavTab);\n\n  const pluginPages = React.useMemo(\n    () =>\n      navTabExtensions\n        .filter(tab => referenceForModel(tab.properties.model) === objReference)\n        .map(tab => ({\n          ...tab.properties.page,\n          component: (params: PageComponentProps) => <AsyncComponent {...params} loader={tab.properties.loader} />,\n        })),\n    [navTabExtensions, objReference],\n  );\n\n  const pages = (props.pages || props.pagesFor(props.obj?.data)).concat(pluginPages);\n\n  const routes = pages.map(p => {\n    const path = `${props.match.path}/${p.path || p.href}`;\n    const render = params => {\n      return <p.component {...componentProps} {...extraResources} {...p.pageData} params={params} customData={props.customData} />;\n    };\n    return <Route path={path} exact key={p.name} render={render} />;\n  });\n\n  return (\n    <div className={classNames('co-m-page__body', props.className)}>\n      <div className=\"co-m-horizontal-nav\">{!props.hideNav && <NavBar pages={pages} baseURL={props.match.url} basePath={props.match.path} />}</div>\n      {renderContent(routes)}\n    </div>\n  );\n}, _.isEqual);\n\nexport type PodsComponentProps = {\n  obj: K8sResourceKind;\n  customData?: any;\n};\n\nexport type NodesComponentProps = {\n  obj: K8sResourceKind;\n  customData?: any;\n};\n\nexport type NavBarProps = {\n  pages: Page[];\n  baseURL: string;\n  basePath: string;\n  history: History;\n  location: Location<any>;\n  match: match<any>;\n};\n\nexport type HorizontalNavProps = {\n  className?: string;\n  obj?: { loaded: boolean; data: K8sResourceKind };\n  label?: string;\n  pages: Page[];\n  pagesFor?: (obj: K8sResourceKind) => Page[];\n  match: any;\n  resourceKeys?: string[];\n  hideNav?: boolean;\n  EmptyMsg?: React.ComponentType<any>;\n  noStatusBox?: boolean;\n  customData?: any;\n};\n\nexport type PageComponentProps<R extends K8sResourceCommon = K8sResourceKind> = {\n  filters?: any;\n  selected?: any;\n  match?: any;\n  obj?: R;\n  params?: any;\n  customData?: any;\n  showTitle?: boolean;\n  fieldSelector?: string;\n};\n\nHorizontalNav.displayName = 'HorizontalNav';\n","export * from './line-buffer';\nexport * from './promise-component';\nexport * from './kebab';\nexport * from './selector';\nexport * from './selector-input';\nexport * from './label-list';\nexport * from './log-window';\nexport * from './resource-icon';\nexport * from './resource-link';\nexport * from './resource-log';\nexport * from './timestamp';\nexport * from './horizontal-nav';\nexport * from './details-page';\nexport * from './inject';\nexport * from './disabled';\nexport * from './firehose';\nexport * from './dropdown';\nexport * from './status-box';\nexport * from './headings';\nexport * from './units';\nexport * from './toggle-play';\nexport * from './button-bar';\nexport * from './number-spinner';\nexport * from './cloud-provider';\nexport * from './documentation';\nexport * from './router';\nexport * from './link';\nexport * from './alerts';\nexport * from './async';\nexport * from './download-button';\nexport * from './entitlements';\nexport * from './build-strategy';\nexport * from './copy-to-clipboard';\nexport * from './build-hooks';\nexport * from './webhooks';\nexport * from './scroll-to-top-on-mount';\nexport * from './service-catalog-status';\nexport * from './close-button';\nexport * from './container-table';\nexport * from './simple-tab-nav';\nexport * from './request-size-input';\nexport * from './k8s-watcher';\nexport * from './workload-pause';\nexport * from './list-dropdown';\nexport * from './list-input';\nexport * from './rbac';\nexport * from './poll-hook';\nexport * from './ref-width-hook';\nexport * from './safe-fetch-hook';\nexport * from './camel-case-wrap';\nexport * from './truncate-middle';\nexport * from './expand-collapse';\nexport * from './volume-type';\nexport * from './skeleton-catalog';\nexport * from './dom-utils';\nexport * from './hint-block';\nexport * from './owner-references';\nexport { default } from './operator-backed-owner-references';\nexport * from './field-level-help';\nexport * from './details-item';\nexport * from './types';\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\n\nimport { modelFor, kindForReference } from '../../module/k8s';\n\nexport const inject = (children, props) => {\n  const safeProps = _.omit(props, ['children']);\n  return React.Children.map(children, (c) => {\n    if (!_.isObject(c)) {\n      return c;\n    }\n    return React.cloneElement(c, safeProps);\n  });\n};\n\nconst lastKind = new Set();\n\n/**\n * @deprecated: Use `modelFor` or `connectToModel`.\n * Provides a synchronous way to acquire a statically-defined Kubernetes model.\n * NOTE: This will not work for CRDs defined at runtime, use `connectToModels` instead.\n */\nexport const kindObj = (kind) => {\n  if (kindForReference(kind) === kind && !lastKind.has(kind)) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `Attempting to get Kubernetes object model using string kind: ${kind}, which is not guaranteed to be unique!`,\n    );\n    lastKind.add(kind);\n  }\n  const model = modelFor(kind);\n  if (!model) {\n    // eslint-disable-next-line no-console\n    console.warn('kindObj: no model for kind', kind);\n  }\n  return model || {};\n};\n","import * as React from 'react';\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore: FIXME missing exports due to out-of-sync @types/react-redux version\nimport { useSelector, useDispatch, Dispatch } from 'react-redux';\nimport { Map as ImmutableMap } from 'immutable';\nimport { createSelectorCreator, defaultMemoize } from 'reselect';\nimport { makeQuery, makeReduxID } from './k8s-watcher';\nimport * as k8sActions from '../../actions/k8s';\nimport { K8sResourceCommon, K8sKind, K8sResourceKindReference, Selector } from '../../module/k8s';\nimport { RootState } from '../../redux';\nimport { K8sState } from '../../reducers/k8s';\n\nexport class NoModelError extends Error {\n  constructor() {\n    super('Model does not exist');\n  }\n}\n\nconst getIDAndDispatch: GetIDAndDispatch = (resource, k8sModel) => {\n  if (!k8sModel || !resource) {\n    return null;\n  }\n  const query = makeQuery(\n    resource.namespace,\n    resource.selector,\n    resource.fieldSelector,\n    resource.name,\n    resource.limit,\n  );\n  const id = makeReduxID(k8sModel, query);\n  const dispatch = resource.isList\n    ? k8sActions.watchK8sList(id, query, k8sModel)\n    : k8sActions.watchK8sObject(id, resource.name, resource.namespace, query, k8sModel);\n  return { id, dispatch };\n};\n\nconst getReduxData = (immutableData, resource: WatchK8sResource) => {\n  if (!immutableData) {\n    return null;\n  }\n  if (resource.isList) {\n    return immutableData.toArray().map((a) => a.toJSON());\n  } else if (immutableData.toJSON) {\n    return immutableData.toJSON();\n  }\n  return null;\n};\n\nconst useModelsLoaded = (): boolean => {\n  const ref = React.useRef(false);\n  const k8sModels = useSelector<RootState, K8sKind>(({ k8s }) =>\n    k8s.getIn(['RESOURCES', 'models']),\n  );\n  const inFlight = useSelector<RootState, K8sKind>(({ k8s }) =>\n    k8s.getIn(['RESOURCES', 'inFlight']),\n  );\n\n  if (!ref.current && k8sModels.size && !inFlight) {\n    ref.current = true;\n  }\n  return ref.current;\n};\n\nexport const useK8sWatchResource = <R extends K8sResourceCommon | K8sResourceCommon[]>(\n  resource: WatchK8sResource,\n): WatchK8sResult<R> => {\n  const modelsLoaded = useModelsLoaded();\n\n  const k8sModel = useSelector<RootState, K8sKind>(({ k8s }) =>\n    resource ? k8s.getIn(['RESOURCES', 'models', resource.kind]) : null,\n  );\n\n  const reduxID = React.useMemo(() => getIDAndDispatch(resource, k8sModel), [k8sModel, resource]);\n\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    if (reduxID) {\n      dispatch(reduxID.dispatch);\n    }\n    return () => {\n      if (reduxID) {\n        dispatch(k8sActions.stopK8sWatch(reduxID.id));\n      }\n    };\n  }, [dispatch, reduxID]);\n\n  const resourceK8s = useSelector<RootState, ImmutableMap<string, any>>(({ k8s }) =>\n    reduxID ? k8s.get(reduxID.id) : null,\n  );\n\n  return React.useMemo(() => {\n    if (!resourceK8s) {\n      const data = resource?.isList ? [] : {};\n      return modelsLoaded && !k8sModel\n        ? [data, true, new NoModelError()]\n        : [data, false, undefined];\n    }\n\n    const data = getReduxData(resourceK8s.get('data'), resource);\n    const loaded = resourceK8s.get('loaded');\n    const loadError = resourceK8s.get('loadError');\n    return [data, loaded, loadError];\n  }, [resourceK8s, resource, modelsLoaded, k8sModel]);\n};\n\nexport const useK8sWatchResources = <R extends ResourcesObject>(\n  resources: WatchK8sResources<R>,\n): WatchK8sResults<R> => {\n  const modelsLoaded = useModelsLoaded();\n  const k8sModelSelectorCreator = React.useMemo(\n    () =>\n      createSelectorCreator(\n        //specifying createSelectorCreator<ImmutableMap<string, any>> throws type error\n        defaultMemoize as any,\n        (oldModels: ImmutableMap<string, any>, newModels: ImmutableMap<string, any>) =>\n          Object.values(resources).every(({ kind }) => oldModels.get(kind) === newModels.get(kind)),\n      ),\n    [resources],\n  );\n\n  const k8sModelSelector = React.useMemo(\n    () =>\n      k8sModelSelectorCreator(\n        (state: RootState) => state.k8s.getIn(['RESOURCES', 'models']),\n        (models) => {\n          const requiredModels = Object.values(resources).map((r) => r.kind);\n          return models.filter((model, key) => requiredModels.includes(key));\n        },\n      ),\n    [k8sModelSelectorCreator, resources],\n  );\n\n  const k8sModels = useSelector<RootState, ImmutableMap<string, any>>(k8sModelSelector);\n  const hasAllModelsLoaded = React.useMemo(() => modelsLoaded || k8sModels.every((m) => !!m), [\n    k8sModels,\n    modelsLoaded,\n  ]);\n\n  const reduxIDs = React.useMemo(\n    () =>\n      hasAllModelsLoaded\n        ? Object.keys(resources).reduce((ids, key) => {\n            const idAndDispatch = getIDAndDispatch(\n              resources[key],\n              k8sModels.get(resources[key].kind),\n            );\n            if (idAndDispatch) {\n              ids[key] = idAndDispatch;\n            }\n            return ids;\n          }, {})\n        : {},\n    [resources, k8sModels, hasAllModelsLoaded],\n  );\n\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    Object.keys(reduxIDs)\n      .filter((k) => !!reduxIDs[k])\n      .forEach((k) => dispatch(reduxIDs[k].dispatch));\n    return () => {\n      Object.keys(reduxIDs)\n        .filter((k) => !!reduxIDs[k])\n        .forEach((k) => dispatch(k8sActions.stopK8sWatch(reduxIDs[k].id)));\n    };\n  }, [dispatch, reduxIDs]);\n\n  const resourceK8sSelectorCreator = React.useMemo(\n    () =>\n      createSelectorCreator(\n        //specifying createSelectorCreator<ImmutableMap<string, K8sKind>> throws type error\n        defaultMemoize as any,\n        (oldK8s: ImmutableMap<string, K8sKind>, newK8s: ImmutableMap<string, K8sKind>) =>\n          Object.keys(reduxIDs)\n            .filter((id) => !!id)\n            .every((k) => oldK8s.get(reduxIDs[k].id) === newK8s.get(reduxIDs[k].id)),\n      ),\n    [reduxIDs],\n  );\n\n  const resourceK8sSelector = React.useMemo(\n    () =>\n      resourceK8sSelectorCreator(\n        (state: RootState) => state.k8s,\n        (k8s) => k8s,\n      ),\n    [resourceK8sSelectorCreator],\n  );\n\n  const resourceK8s = useSelector<RootState, K8sState>(resourceK8sSelector);\n  const noModels = modelsLoaded && !Object.keys(reduxIDs).length;\n\n  const results = React.useMemo<WatchK8sResults<R>>(() => {\n    if (Object.keys(reduxIDs).length) {\n      return Object.keys(resources).reduce((acc, key) => {\n        if (reduxIDs[key] && resourceK8s.has(reduxIDs[key].id)) {\n          const data = getReduxData(resourceK8s.getIn([reduxIDs[key].id, 'data']), resources[key]);\n          const loaded = resourceK8s.getIn([reduxIDs[key].id, 'loaded']);\n          const loadError = resourceK8s.getIn([reduxIDs[key].id, 'loadError']);\n          acc[key] = { data, loaded, loadError };\n        } else {\n          acc[key] = {\n            data: resources[key].isList ? [] : {},\n            loaded: true,\n            loadError: new NoModelError(),\n          };\n        }\n        return acc;\n      }, {} as any);\n    }\n    return Object.keys(resources).reduce((acc, key) => {\n      const data = resources[key].isList ? [] : {};\n      acc[key] = noModels\n        ? { data, loaded: true, loadError: new NoModelError() }\n        : { data, loaded: false, loadError: undefined };\n      return acc;\n    }, {});\n  }, [reduxIDs, resources, resourceK8s, noModels]);\n\n  return results;\n};\n\ntype GetIDAndDispatch = (\n  resource: WatchK8sResource,\n  k8sModel: K8sKind,\n) => { id: string; dispatch: (dispatch: Dispatch, getState: () => RootState) => void };\n\nexport type ResourcesObject = { [key: string]: K8sResourceCommon | K8sResourceCommon[] };\n\nexport type WatchK8sResult<R extends K8sResourceCommon | K8sResourceCommon[]> = [R, boolean, any];\n\nexport type WatchK8sResultsObject<R extends K8sResourceCommon | K8sResourceCommon[]> = {\n  data: R;\n  loaded: boolean;\n  loadError: any;\n};\n\nexport type WatchK8sResults<R extends ResourcesObject> = {\n  [k in keyof R]: WatchK8sResultsObject<R[k]>;\n};\n\nexport type WatchK8sResources<R extends ResourcesObject> = {\n  [k in keyof R]: WatchK8sResource;\n};\n\nexport type WatchK8sResource = {\n  kind: K8sResourceKindReference;\n  name?: string;\n  namespace?: string;\n  isList?: boolean;\n  selector?: Selector;\n  namespaced?: boolean;\n  limit?: number;\n  fieldSelector?: string;\n  optional?: boolean;\n};\n","import * as _ from 'lodash-es';\n\nimport { referenceForModel } from '../../module/k8s';\n\nexport const makeReduxID = (k8sKind = {}, query) => {\n  let qs = '';\n  if (!_.isEmpty(query)) {\n    qs = `---${JSON.stringify(query)}`;\n  }\n\n  return `${referenceForModel(k8sKind)}${qs}`;\n};\n\n/** @type {(namespace: string, labelSelector?: any, fieldSelector?: any, name?: string, limit?: number) => {[key: string]: string}} */\nexport const makeQuery = (namespace, labelSelector, fieldSelector, name, limit) => {\n  const query = {};\n\n  if (!_.isEmpty(labelSelector)) {\n    query.labelSelector = labelSelector;\n  }\n\n  if (!_.isEmpty(namespace)) {\n    query.ns = namespace;\n  }\n\n  if (!_.isEmpty(name)) {\n    query.name = name;\n  }\n\n  if (fieldSelector) {\n    query.fieldSelector = fieldSelector;\n  }\n\n  if (limit) {\n    query.limit = limit;\n  }\n  return query;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as FocusTrap from 'focus-trap-react';\nimport { connect } from 'react-redux';\nimport { KEY_CODES, Tooltip } from '@patternfly/react-core';\nimport { EllipsisVIcon, AngleRightIcon } from '@patternfly/react-icons';\nimport Popper from '@console/shared/src/components/popper/Popper';\nimport { annotationsModal, configureReplicaCountModal, taintsModal, tolerationsModal, labelsModal, podSelectorModal, deleteModal, expandPVCModal } from '../modals';\nimport { statusModal, claimModal, scanningModal } from '../hypercloud/modals';\nimport { asAccessReview, checkAccess, history, resourceObjPath, useAccessReview } from './index';\nimport { AccessReviewResourceAttributes, K8sKind, K8sResourceKind, K8sResourceKindReference, referenceForModel } from '../../module/k8s';\nimport { impersonateStateToProps } from '../../reducers/ui';\nimport { connectToModel } from '../../kinds';\nimport * as plugins from '../../plugins';\nimport { useTranslation } from 'react-i18next';\nimport { ResourceStringKeyMap } from '../../models/hypercloud/resource-plural';\n\nexport const kebabOptionsToMenu = (options: KebabOption[]): KebabMenuOption[] => {\n  const subs: { [key: string]: KebabSubMenu } = {};\n  const menuOptions: KebabMenuOption[] = [];\n\n  options.forEach(o => {\n    if (!o.hidden) {\n      if (o.path) {\n        const parts = o.path.split('/');\n        parts.forEach((p, i) => {\n          let subMenu = subs[p];\n          if (!subs[p]) {\n            subMenu = {\n              label: p,\n              children: [],\n            };\n            subs[p] = subMenu;\n            if (i === 0) {\n              menuOptions.push(subMenu);\n            } else {\n              subs[parts[i - 1]].children.push(subMenu);\n            }\n          }\n        });\n        subs[parts[parts.length - 1]].children.push(o);\n      } else {\n        menuOptions.push(o);\n      }\n    }\n  });\n  return menuOptions;\n};\n\nconst KebabItem_: React.FC<KebabItemProps & { isAllowed: boolean }> = ({ option, onClick, onEscape, autoFocus, isAllowed }) => {\n  const { t } = useTranslation();\n  const handleEscape = e => {\n    if (e.keyCode === KEY_CODES.ESCAPE_KEY) {\n      onEscape();\n    }\n  };\n  const disabled = !isAllowed || option.isDisabled;\n  const classes = classNames('pf-c-dropdown__menu-item', { 'pf-m-disabled': disabled });\n  // MEMO : i18n 키 값과 변수 값을 한번에 String으로 받아올 수 밖에 없어서 불가피하게 여기서 split으로 나눠서 넣어준다..\n  const labelSplit = option?.label?.split('**');\n  return (\n    <button className={classes} onClick={e => !disabled && onClick(e, option)} autoFocus={autoFocus} onKeyDown={onEscape && handleEscape} data-test-action={option.label}>\n      {option.icon && <span className=\"oc-kebab__icon\">{option.icon}</span>}\n      {!!labelSplit[1] ? t(labelSplit[0], { 0: t(labelSplit[1]) }) : t(labelSplit[0])}\n    </button>\n  );\n};\nconst KebabItemAccessReview_ = (props: KebabItemProps & { impersonate: string }) => {\n  const { option, impersonate } = props;\n  const isAllowed = useAccessReview(option.accessReview, impersonate);\n  return <KebabItem_ {...props} isAllowed={isAllowed} />;\n};\n\nconst KebabItemAccessReview = connect(impersonateStateToProps)(KebabItemAccessReview_);\n\ntype KebabSubMenuProps = {\n  option: KebabSubMenu;\n  onClick: KebabItemProps['onClick'];\n};\n\nconst KebabSubMenu: React.FC<KebabSubMenuProps> = ({ option, onClick }) => {\n  const [open, setOpen] = React.useState(false);\n  const nodeRef = React.useRef(null);\n  const subMenuRef = React.useRef(null);\n  const referenceCb = React.useCallback(() => nodeRef.current, []);\n  // use a callback ref because FocusTrap is old and doesn't support non-function refs\n  const subMenuCbRef = React.useCallback(node => (subMenuRef.current = node), []);\n\n  return (\n    <>\n      <button\n        ref={nodeRef}\n        className=\"oc-kebab__sub pf-c-dropdown__menu-item\"\n        data-test-action={option.label}\n        // mouse enter will open the sub menu\n        onMouseEnter={() => setOpen(true)}\n        onMouseLeave={e => {\n          // if the mouse leaves this item, close the sub menu only if the mouse did not enter the sub menu itself\n          if (!subMenuRef.current || !subMenuRef.current.contains(e.relatedTarget as Node)) {\n            setOpen(false);\n          }\n        }}\n        onKeyDown={e => {\n          // open the sub menu on enter or right arrow\n          if (e.keyCode === 39 || e.keyCode === 13) {\n            setOpen(true);\n            e.stopPropagation();\n          }\n        }}\n      >\n        {option.label}\n        <AngleRightIcon className=\"oc-kebab__arrow\" />\n      </button>\n      <Popper\n        open={open}\n        placement=\"right-start\"\n        closeOnEsc\n        closeOnOutsideClick\n        onRequestClose={e => {\n          // only close the sub menu if clicking anywhere outside the menu item that owns the sub menu\n          if (!e || !nodeRef.current || !nodeRef.current.contains(e.target as Node)) {\n            setOpen(false);\n          }\n        }}\n        reference={referenceCb}\n      >\n        <FocusTrap focusTrapOptions={{ clickOutsideDeactivates: true }}>\n          <div\n            ref={subMenuCbRef}\n            role=\"presentation\"\n            className=\"pf-c-dropdown pf-m-expanded\"\n            onMouseLeave={e => {\n              // only close the sub menu if the mouse does not enter the item\n              if (!nodeRef.current || !nodeRef.current.contains(e.relatedTarget as Node)) {\n                setOpen(false);\n              }\n            }}\n            onKeyDown={e => {\n              // close the sub menu on left arrow\n              if (e.keyCode === 37) {\n                setOpen(false);\n                e.stopPropagation();\n              }\n            }}\n          >\n            <KebabMenuItems options={option.children} onClick={onClick} className=\"oc-kebab__popper-items\" focusItem={option.children[0]} />\n          </div>\n        </FocusTrap>\n      </Popper>\n    </>\n  );\n};\n\nexport const isKebabSubMenu = (option: KebabMenuOption): option is KebabSubMenu => {\n  // only a sub menu has children\n  return Array.isArray((option as KebabSubMenu).children);\n};\n\nexport const KebabItem: React.FC<KebabItemProps> = props => {\n  const { option } = props;\n  let item;\n\n  if (option.accessReview) {\n    item = <KebabItemAccessReview {...props} />;\n  } else {\n    item = <KebabItem_ {...props} isAllowed />;\n  }\n\n  return option.tooltip ? (\n    <Tooltip position=\"left\" content={option.tooltip}>\n      {item}\n    </Tooltip>\n  ) : (\n    item\n  );\n};\n\ntype KebabMenuItemsProps = {\n  options: KebabMenuOption[];\n  onClick: (event: React.MouseEvent<{}>, option: KebabOption) => void;\n  focusItem?: KebabOption;\n  className?: string;\n};\n\nexport const KebabMenuItems: React.FC<KebabMenuItemsProps> = ({ className, options, onClick, focusItem }) => (\n  <ul className={classNames('pf-c-dropdown__menu pf-m-align-right', className)} data-test-id=\"action-items\">\n    {_.map(options, o => (\n      <li key={o.label}>{isKebabSubMenu(o) ? <KebabSubMenu option={o} onClick={onClick} /> : <KebabItem option={o} onClick={onClick} autoFocus={focusItem ? o === focusItem : undefined} />}</li>\n    ))}\n  </ul>\n);\n\nexport const KebabItems: React.FC<KebabItemsProps> = ({ options, ...props }) => {\n  const menuOptions = kebabOptionsToMenu(options);\n  return <KebabMenuItems {...props} options={menuOptions} />;\n};\n\nconst kebabFactory: KebabFactory = {\n  Delete: (kind, obj) => ({\n    label: `COMMON:MSG_MAIN_ACTIONBUTTON_16**${ResourceStringKeyMap[kind.kind]?.label ?? kind.label}`,\n    callback: () =>\n      deleteModal({\n        kind,\n        resource: obj,\n      }),\n    accessReview: asAccessReview(kind, obj, 'delete'),\n  }),\n  Edit: (kind, obj) => ({\n    label: `COMMON:MSG_MAIN_ACTIONBUTTON_15**${ResourceStringKeyMap[kind.kind]?.label ?? kind.label}`,\n    href: `${resourceObjPath(obj, kind.crd ? referenceForModel(kind) : kind.kind)}/yaml`,\n    // TODO: Fallback to \"View YAML\"? We might want a similar fallback for annotations, labels, etc.\n    accessReview: asAccessReview(kind, obj, 'update'),\n  }),\n  EditSecret: (kind, obj) => ({\n    label: `COMMON:MSG_MAIN_ACTIONBUTTON_15**${ResourceStringKeyMap[kind.kind]?.label ?? kind.label}`,\n    href: `${resourceObjPath(obj, kind.kind)}/edit`,\n    accessReview: asAccessReview(kind, obj, 'update'),\n  }),\n  ModifyLabels: (kind, obj) => ({\n    label: 'COMMON:MSG_MAIN_ACTIONBUTTON_4',\n    callback: () =>\n      labelsModal({\n        kind,\n        resource: obj,\n        blocking: true,\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  ModifyStatus: (kind, obj) => ({\n    label: 'COMMON:MSG_MAIN_ACTIONBUTTON_31',\n    callback: () =>\n      statusModal({\n        kind,\n        resource: obj,\n        blocking: true,\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  ModifyClaim: (kind, obj) => ({\n    label: 'COMMON:MSG_MAIN_ACTIONBUTTON_31',\n    callback: () =>\n      claimModal({\n        kind,\n        resource: obj,\n        blocking: true,\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  ModifyScanning: (kind, obj) => {\n    let isExtRegistry = false;\n    if (obj.kind === 'ExternalRegistry' || obj.metadata?.labels?.app === 'ext-registry' || obj.isExtRegistry) {\n      isExtRegistry = true;\n    }\n    return {\n      label: 'COMMON:MSG_COMMON_ACTIONBUTTON_20',\n      callback: () =>\n        scanningModal({\n          modelKind: kind,\n          resource: obj,\n          blocking: true,\n          isExtRegistry,\n        }),\n    };\n  },\n  ModifyPodSelector: (kind, obj) => ({\n    label: 'COMMON:MSG_MAIN_ACTIONBUTTON_6',\n    callback: () =>\n      podSelectorModal({\n        kind,\n        resource: obj,\n        blocking: true,\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  ModifyAnnotations: (kind, obj) => ({\n    label: 'COMMON:MSG_MAIN_ACTIONBUTTON_5',\n    callback: () =>\n      annotationsModal({\n        kind,\n        resource: obj,\n        blocking: true,\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  ModifyCount: (kind, obj) => ({\n    label: 'COMMON:MSG_MAIN_ACTIONBUTTON_7',\n    callback: () =>\n      configureReplicaCountModal({\n        resourceKind: kind,\n        resource: obj,\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  ModifyTaints: (kind, obj) => ({\n    label: 'Edit Taints',\n    callback: () =>\n      taintsModal({\n        resourceKind: kind,\n        resource: obj,\n        modalClassName: 'modal-lg',\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  ModifyTolerations: (kind, obj) => ({\n    label: 'Edit Tolerations',\n    callback: () =>\n      tolerationsModal({\n        resourceKind: kind,\n        resource: obj,\n        modalClassName: 'modal-lg',\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  AddStorage: (kind, obj) => ({\n    label: 'COMMON:MSG_MAIN_ACTIONBUTTON_13',\n    href: `${resourceObjPath(obj, kind.crd ? referenceForModel(kind) : kind.kind)}/attach-storage`,\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  ExpandPVC: (kind, obj) => ({\n    label: 'COMMON:MSG_MAIN_ACTIONBUTTON_3',\n    callback: () =>\n      expandPVCModal({\n        kind,\n        resource: obj,\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  Connect: (kind, obj) => {\n    const { t } = useTranslation();\n    return {\n      label: t('Connect'),\n      callback: () => {\n        let url = `/api/kubeflow/${kind.id}/${obj.metadata.namespace}/${obj.metadata.name}/`;\n        window.open(url);\n      },\n      accessReview: asAccessReview(kind, obj, 'patch'),\n    };\n  }\n};\n\n// The common menu actions that most resource share\nkebabFactory.common = [kebabFactory.ModifyLabels, kebabFactory.ModifyAnnotations, kebabFactory.Edit, kebabFactory.Delete];\n\nexport const getExtensionsKebabActionsForKind = (kind: K8sKind) => {\n  const extensionActions = [];\n  _.forEach(plugins.registry.getKebabActions(), (getActions: any) => {\n    if (getActions) {\n      _.forEach(getActions.properties.getKebabActionsForKind(kind), kebabAction => {\n        extensionActions.push(kebabAction);\n      });\n    }\n  });\n  return extensionActions;\n};\n\nexport const ResourceKebab = connectToModel((props: ResourceKebabProps) => {\n  const { actions, kind, kindObj, resource, isDisabled } = props;\n\n  if (kind === 'Tag') {\n    const options = _.reject(\n      actions.map(a => a(kindObj, resource)),\n      'hidden',\n    );\n    return <Kebab options={options} key={resource.version} isDisabled={isDisabled !== undefined ? isDisabled : _.get(resource.metadata, 'deletionTimestamp')} />;\n  }\n\n  if (!kindObj) {\n    return null;\n  }\n  const options = _.reject(\n    actions.map(a => a(kindObj, resource)),\n    'hidden',\n  );\n  return <Kebab options={options} key={resource.metadata.uid} isDisabled={isDisabled !== undefined ? isDisabled : _.get(resource.metadata, 'deletionTimestamp')} />;\n});\n\nexport class Kebab extends React.Component<any, { active: boolean }> {\n  static factory: KebabFactory = kebabFactory;\n  static getExtensionsActionsForKind = getExtensionsKebabActionsForKind;\n\n  // public static columnClass: string = 'pf-c-table__action';\n  public static columnClass: string = 'dropdown-kebab-pf pf-c-table__action';\n\n  private dropdownElement = React.createRef<HTMLButtonElement>();\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      active: false,\n    };\n  }\n\n  onClick = (event, option: KebabOption) => {\n    event.preventDefault();\n\n    if (option.callback) {\n      option.callback();\n    }\n\n    this.hide();\n\n    if (option.href) {\n      history.push(option.href);\n    }\n  };\n\n  hide = () => {\n    this.dropdownElement.current && this.dropdownElement.current.focus();\n    this.setState({ active: false });\n  };\n\n  toggle = () => {\n    this.setState(state => ({ active: !state.active }));\n  };\n\n  onHover = () => {\n    // Check access when hovering over a kebab to minimize flicker when opened.\n    // This depends on `checkAccess` being memoized.\n    _.each(this.props.options, (option: KebabOption) => {\n      if (option.accessReview) {\n        checkAccess(option.accessReview);\n      }\n    });\n  };\n\n  handleRequestClose = (e?: MouseEvent) => {\n    if (!e || !this.dropdownElement.current || !this.dropdownElement.current.contains(e.target as Node)) {\n      this.hide();\n    }\n  };\n\n  getPopperReference = () => this.dropdownElement.current;\n\n  render() {\n    const { options, isDisabled } = this.props;\n\n    const menuOptions = kebabOptionsToMenu(options);\n\n    return (\n      <div\n        className={classNames({\n          'dropdown pf-c-dropdown': true,\n          'pf-m-expanded': this.state.active,\n        })}\n      >\n        <button ref={this.dropdownElement} type=\"button\" aria-expanded={this.state.active} aria-haspopup=\"true\" aria-label=\"Actions\" className=\"pf-c-dropdown__toggle pf-m-plain\" data-test-id=\"kebab-button\" disabled={isDisabled} onClick={this.toggle} onFocus={this.onHover} onMouseEnter={this.onHover}>\n          <EllipsisVIcon />\n        </button>\n        <Popper open={!isDisabled && this.state.active} placement=\"bottom-end\" closeOnEsc closeOnOutsideClick onRequestClose={this.handleRequestClose} reference={this.getPopperReference}>\n          <FocusTrap focusTrapOptions={{ clickOutsideDeactivates: true, returnFocusOnDeactivate: false }}>\n            <div className=\"pf-c-dropdown pf-m-expanded\">\n              <KebabMenuItems options={menuOptions} onClick={this.onClick} className=\"oc-kebab__popper-items\" focusItem={menuOptions[0]} />\n            </div>\n          </FocusTrap>\n        </Popper>\n      </div>\n    );\n  }\n}\n\nexport type KebabOption = {\n  hidden?: boolean;\n  label: string;\n  href?: string;\n  callback?: () => any;\n  accessReview?: AccessReviewResourceAttributes;\n  isDisabled?: boolean;\n  tooltip?: string;\n  // a `/` separated string where each segment denotes a new sub menu entry\n  // Eg. `Menu 1/Menu 2/Menu 3`\n  path?: string;\n  icon?: React.ReactNode;\n};\n\nexport type KebabAction = (kind: K8sKind, obj: K8sResourceKind | any, resources?: any, customData?: any) => KebabOption;\n\nexport type ResourceKebabProps = {\n  kindObj: K8sKind;\n  actions: KebabAction[];\n  kind: K8sResourceKindReference;\n  resource: K8sResourceKind | any;\n  isDisabled?: boolean;\n};\n\ntype KebabSubMenu = {\n  label: string;\n  children: KebabMenuOption[];\n};\n\nexport type KebabMenuOption = KebabSubMenu | KebabOption;\n\ntype KebabItemProps = {\n  option: KebabOption;\n  onClick: (event: React.MouseEvent<{}>, option: KebabOption) => void;\n  autoFocus?: boolean;\n  onEscape?: () => void;\n};\n\nexport type KebabItemsProps = {\n  options: KebabOption[];\n  onClick: (event: React.MouseEvent<{}>, option: KebabOption) => void;\n  focusItem?: KebabOption;\n  className?: string;\n};\n\nexport type KebabFactory = { [name: string]: KebabAction } & { common?: KebabAction[] };\n\nKebabItems.displayName = 'KebabItems';\nResourceKebab.displayName = 'ResourceKebab';\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash-es';\nimport { K8sResourceKindReference, kindForReference } from '../../module/k8s';\n\nexport const Label: React.SFC<LabelProps> = ({ kind, name, value, expand }) => {\n  const href = `/search?kind=${kind}&q=${value ? encodeURIComponent(`${name}=${value}`) : name}`;\n  const klass = classNames('co-m-label', { 'co-m-label--expand': expand });\n\n  return (\n    <Link className={`co-text-${kindForReference(kind.toLowerCase())}`} to={href}>\n      <div className={klass}>\n        <span className=\"co-m-label__key\">{name}</span>\n        {value && <span className=\"co-m-label__eq\">=</span>}\n        {value && <span className=\"co-m-label__value\">{value}</span>}\n      </div>\n    </Link>\n  );\n};\n\nexport class LabelList extends React.Component<LabelListProps> {\n  shouldComponentUpdate(nextProps) {\n    return !_.isEqual(nextProps, this.props);\n  }\n\n  render() {\n    const { labels, kind, expand = true } = this.props;\n    let list = _.map(labels, (label, key) => (\n      <Label key={key} kind={kind} name={key} value={label} expand={expand} />\n    ));\n\n    if (_.isEmpty(list)) {\n      list = [\n        <div className=\"text-muted\" key=\"0\">\n          No labels\n        </div>,\n      ];\n    }\n\n    return <div className=\"co-m-label-list\">{list}</div>;\n  }\n}\n\nexport type LabelProps = {\n  kind: K8sResourceKindReference;\n  name: string;\n  value: string;\n  expand: boolean;\n};\n\nexport type LabelListProps = {\n  labels: { [key: string]: string };\n  kind: K8sResourceKindReference;\n  expand?: boolean;\n};\n","export const LINE_PATTERN = /^.*(\\n|$)/gm;\n\nexport class LineBuffer {\n  private _maxSize: number;\n  private _buffer: string[];\n  private _tail: string;\n\n  constructor(maxSize) {\n    this._maxSize = maxSize;\n    this._buffer = [];\n    this._tail = '';\n  }\n\n  ingest(text): number {\n    const lines = text.match(LINE_PATTERN);\n    let lineCount = 0;\n    lines.forEach((line) => {\n      const next = `${this._tail}${line}`;\n      if (/\\n$/.test(line)) {\n        if (this._buffer.length === this._maxSize) {\n          this._buffer.shift();\n        }\n        this._buffer.push(next);\n        lineCount++;\n        this._tail = '';\n      } else {\n        this._tail = next;\n      }\n    });\n    return lineCount;\n  }\n\n  clear(): void {\n    this._buffer = [];\n  }\n\n  getLines(): string[] {\n    return this._buffer;\n  }\n\n  getBlob(options): Blob {\n    return new Blob([this._buffer.join('')], options);\n  }\n\n  length(): number {\n    return this._buffer.length;\n  }\n}\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport Linkify from 'react-linkify';\n\nimport { ALL_NAMESPACES_KEY } from '@console/shared/src/constants';\n\n// Kubernetes \"dns-friendly\" names match\n// [a-z0-9]([-a-z0-9]*[a-z0-9])?  and are 63 or fewer characters\n// long. This pattern checks the pattern but not the length.\n//\n// Don't capture anything in legalNamePattern, since it's used\n// in expressions like\n//\n//    new RegExp(\"PREFIX\" + legalNamePattern.source + \"(SUFFIX)\")\n//\n// And it's ok for users to make assumptions about capturing groups.\n\nexport const legalNamePattern = /[a-z0-9](?:[-a-z0-9]*[a-z0-9])?/;\n\nconst basePathPattern = new RegExp(`^/?${window.SERVER_FLAGS.basePath}`);\n\nexport const namespacedPrefixes = ['/api-resource', '/catalog', '/k8s', '/operatorhub', '/operatormanagement', '/operators', '/details', '/provisionedservices', '/search', '/status'];\n\nexport const stripBasePath = (path: string): string => path.replace(basePathPattern, '/');\n\nexport const getNamespace = (path: string): string => {\n  path = stripBasePath(path);\n  const split = path.split('/').filter(x => x);\n\n  if (split[1] === 'all-namespaces') {\n    return ALL_NAMESPACES_KEY;\n  }\n\n  let ns: string;\n  if (split[1] === 'cluster' && ['namespaces', 'projects'].includes(split[2]) && split[3]) {\n    ns = split[3];\n  } else if (split[1] === 'ns' && split[2]) {\n    ns = split[2];\n  } else {\n    return;\n  }\n\n  const match = ns.match(legalNamePattern);\n  return match && match.length > 0 && match[0];\n};\n\nexport const getURLSearchParams = () => {\n  const all: any = {};\n  const params = new URLSearchParams(window.location.search);\n  // The URLSearchParams type definition does not include `entries()`.\n  // https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/entries\n  for (const [k, v] of (params as any).entries()) {\n    all[k] = v;\n  }\n  return all;\n};\n\nexport const ExternalLink: React.FC<ExternalLinkProps> = ({ href, text, additionalClassName = '', dataTestID }) => (\n  <a className={classNames('co-external-link', additionalClassName)} href={href} target=\"_blank\" rel=\"noopener noreferrer\" data-test-id={dataTestID}>\n    {text}\n  </a>\n);\nexport const HyperCloudManualLink: React.FC<HyperCloudManualLinkProps> = ({ href, text, additionalClassName = '', dataTestID }) => (\n  <a className={classNames('co-external-link', additionalClassName)} href={href} target=\"_blank\" rel=\"noopener noreferrer\" data-test-id={dataTestID}>\n    {text}\n  </a>\n);\n\n// Open links in a new window and set noopener/noreferrer.\nexport const LinkifyExternal: React.FC<{ children: React.ReactNode }> = ({ children }) => <Linkify properties={{ target: '_blank', rel: 'noopener noreferrer' }}>{children}</Linkify>;\nLinkifyExternal.displayName = 'LinkifyExternal';\n\ntype ExternalLinkProps = {\n  href: string;\n  text: React.ReactNode;\n  additionalClassName?: string;\n  dataTestID?: string;\n};\n\ntype HyperCloudManualLinkProps = {\n  href: string;\n  text: React.ReactNode;\n  additionalClassName?: string;\n  dataTestID?: string;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as fuzzy from 'fuzzysearch';\nimport * as PropTypes from 'prop-types';\nimport { Alert } from '@patternfly/react-core';\n\nimport { FLAGS } from '@console/shared/src/constants';\nimport { Dropdown } from './dropdown';\nimport { Firehose } from './firehose';\nimport { LoadingInline } from './status-box';\nimport { ResourceName } from './resource-icon';\nimport { connectToFlags, flagPending } from '../../reducers/features';\n\nclass ListDropdown_ extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: {},\n    };\n\n    if (props.selectedKey) {\n      this.state.selectedKey = props.selectedKeyKind\n        ? `${props.selectedKey}-${props.selectedKeyKind}`\n        : props.selectedKey;\n    }\n\n    this.state.title = props.loaded ? props.placeholder : <LoadingInline />;\n\n    this.autocompleteFilter = (text, item) => fuzzy(text, item.props.name);\n    // Pass both the resource name and the resource kind to onChange()\n    this.onChange = (key) => {\n      const { name, kindLabel } = _.get(this.state, ['items', key], {});\n      this.setState({ selectedKey: key, title: <ResourceName kind={kindLabel} name={name} /> });\n      this.props.onChange(name, kindLabel);\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    // we need to trigger state changes to get past shouldComponentUpdate...\n    //   but the entire working set of data can be loaded in memory at this point in time\n    //   in which case componentWillReceiveProps would not be called for a while...\n    this.UNSAFE_componentWillReceiveProps(this.props);\n  }\n\n  UNSAFE_componentWillReceiveProps({\n    desc,\n    placeholder,\n    loaded,\n    loadError,\n    resources,\n    dataFilter,\n  }) {\n    if (!loaded) {\n      return;\n    }\n\n    this.setState(({ selectedKey }) => {\n      if (loadError) {\n        return {\n          title: <div className=\"cos-error-title\">Error Loading {desc}</div>,\n        };\n      }\n\n      const unsortedList = {};\n      _.each(resources, ({ data }, kindLabel) => {\n        _.reduce(\n          data,\n          (acc, resource) => {\n            if (!dataFilter || dataFilter(resource)) {\n              acc[`${resource.metadata.name}-${kindLabel}`] = {\n                kindLabel,\n                name: resource.metadata.name,\n              };\n            }\n            return acc;\n          },\n          unsortedList,\n        );\n      });\n\n      const sortedList = {};\n      _.keys(unsortedList)\n        .sort()\n        .forEach((key) => {\n          sortedList[key] = unsortedList[key];\n        });\n      const selectedItem = sortedList[selectedKey];\n      return {\n        items: sortedList,\n        title: selectedItem ? (\n          <ResourceName kind={selectedItem.kindLabel} name={selectedItem.name} />\n        ) : (\n          placeholder\n        ),\n      };\n    });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return !_.isEqual(this.state, nextState);\n  }\n\n  render() {\n    const { desc, fixed, placeholder, id, loaded, disabled } = this.props;\n    const items = {};\n\n    _.keys(this.state.items).forEach((key) => {\n      const item = this.state.items[key];\n      items[key] = <ResourceName kind={item.kindLabel} name={item.name} />;\n    });\n\n    const { selectedKey } = this.state;\n\n    const Component = fixed ? (\n      items[selectedKey]\n    ) : (\n      <Dropdown\n        autocompleteFilter={this.autocompleteFilter}\n        autocompletePlaceholder={placeholder}\n        items={items}\n        selectedKey={selectedKey}\n        title={this.state.title}\n        onChange={this.onChange}\n        id={id}\n        dropDownClassName=\"dropdown--full-width\"\n        menuClassName=\"dropdown-menu--text-wrap\"\n        disabled={disabled}\n      />\n    );\n\n    return (\n      <div>\n        {Component}\n        {loaded && _.isEmpty(items) && (\n          <Alert\n            isInline\n            className=\"co-alert pf-c-alert--top-margin\"\n            variant=\"info\"\n            title={`No ${desc} found or defined`}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport const ListDropdown = (props) => {\n  const resources = _.map(props.resources, (resource) =>\n    _.assign({ isList: true, prop: resource.kind }, resource),\n  );\n  return (\n    <Firehose resources={resources}>\n      <ListDropdown_ {...props} />\n    </Firehose>\n  );\n};\n\nListDropdown.propTypes = {\n  dataFilter: PropTypes.func,\n  desc: PropTypes.string,\n  // specify both key/kind\n  selectedKey: PropTypes.string,\n  selectedKeyKind: PropTypes.string,\n  fixed: PropTypes.bool,\n  resources: PropTypes.arrayOf(\n    PropTypes.shape({\n      kind: PropTypes.string.isRequired,\n      namespace: PropTypes.string,\n    }),\n  ).isRequired,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func,\n  id: PropTypes.string,\n};\n\nconst NsDropdown_ = (props) => {\n  const openshiftFlag = props.flags[FLAGS.OPENSHIFT];\n  if (flagPending(openshiftFlag)) {\n    return null;\n  }\n  const kind = openshiftFlag ? 'Project' : 'Namespace';\n  const resources = [{ kind }];\n  return (\n    <ListDropdown\n      {...props}\n      desc=\"Namespaces\"\n      resources={resources}\n      selectedKeyKind={kind}\n      placeholder=\"Select namespace\"\n    />\n  );\n};\n/** @type {React.FC<{dataFilter?: (ns: any) => boolean, desc?: string, selectedKey?: string, selectedKeyKind?: string, fixed?: boolean, placeholder?: string, onChange?: (selectedKey: string, event: React.Event) => void, id?: string}}>} */\nexport const NsDropdown = connectToFlags(FLAGS.OPENSHIFT)(NsDropdown_);\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { Button } from '@patternfly/react-core';\nimport { PlusCircleIcon, MinusCircleIcon } from '@patternfly/react-icons';\n\nexport class ListInput extends React.Component<ListInputProps, ListInputState> {\n  private helpID: string = _.uniqueId('list-view-help-');\n  constructor(props: ListInputProps) {\n    super(props);\n    this.state = {\n      values: props.initialValues || [''],\n    };\n  }\n\n  componentDidUpdate(prevProps: ListInputProps, prevState: ListInputState) {\n    if (prevState.values !== this.state.values) {\n      const values = _.compact(this.state.values);\n      this.props.onChange(values);\n    }\n  }\n\n  valueChanged(i: number, v: string) {\n    this.setState((state) => {\n      const values = [...state.values];\n      values[i] = v;\n      return { values };\n    });\n  }\n\n  addValue() {\n    this.setState((state) => ({ values: [...state.values, ''] }));\n  }\n\n  removeValue(i: number) {\n    this.setState((state) => {\n      const values = [...state.values];\n      values.splice(i, 1);\n      return {\n        values: _.isEmpty(values) ? [''] : values,\n      };\n    });\n  }\n\n  render() {\n    const { label, required, helpText } = this.props;\n    const { values } = this.state;\n    const missingValues = required && (_.isEmpty(values) || _.every(values, (v) => !v));\n    const isEmpty = values.length === 1 && (_.isEmpty(values) || _.every(values, (v) => !v));\n    return (\n      <div className=\"form-group\">\n        <label className={classNames('control-label', { 'co-required': required })}>{label}</label>\n        {_.map(values, (v: string, i: number) => (\n          <div className=\"co-list-input__row\" key={i}>\n            <div className=\"co-list-input__value\">\n              <input\n                className=\"pf-c-form-control\"\n                type=\"text\"\n                value={v}\n                onChange={(e: React.FormEvent<HTMLInputElement>) =>\n                  this.valueChanged(i, e.currentTarget.value)\n                }\n                required={missingValues && i === 0}\n                aria-describedby={helpText ? this.helpID : undefined}\n                data-test-list-input-for={label}\n              />\n            </div>\n            <Button\n              type=\"button\"\n              className=\"pairs-list__span-btns\"\n              onClick={() => this.removeValue(i)}\n              aria-label=\"Remove\"\n              variant=\"plain\"\n              disabled={isEmpty}\n            >\n              <MinusCircleIcon className=\"pairs-list__side-btn pairs-list__delete-icon\" />\n            </Button>\n          </div>\n        ))}\n        {helpText && (\n          <div className=\"co-list-input__help-block help-block\" id={this.helpID}>\n            {helpText}\n          </div>\n        )}\n        <Button\n          className=\"pf-m-link--align-left\"\n          onClick={() => this.addValue()}\n          type=\"button\"\n          variant=\"link\"\n        >\n          <PlusCircleIcon className=\"co-icon-space-r\" />\n          Add More\n        </Button>\n      </div>\n    );\n  }\n}\n\ntype ListInputState = {\n  values: string[];\n};\n\ntype ChangeCallback = (values: string[]) => void;\n\ntype ListInputProps = {\n  label: string;\n  initialValues?: string[];\n  onChange: ChangeCallback;\n  helpText?: string;\n  required?: boolean;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { pluralize } from './';\nimport { STREAM_EOF, STREAM_PAUSED, STREAM_ACTIVE } from './resource-log';\nimport { OutlinedPlayCircleIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\n\n// Subtracted from log window height to prevent scroll bar from appearing when resume button is shown.\n// Added fullscreen fudge factor to account for fullscreen taking log contents outside of .co-m-pane__body div\nconst FUDGE_FACTOR = 105;\nconst FULLSCREEN_FUDGE_FACTOR = 57;\n\nexport class LogWindow extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this._unpause = this._unpause.bind(this);\n    this._handleScroll = _.throttle(this._handleScroll.bind(this), 100);\n    this._handleResize = _.debounce(this._handleResize.bind(this), 50);\n    this._setScrollPane = (element) => (this.scrollPane = element);\n    this._setLogContents = (element) => (this.logContents = element);\n    this.state = {\n      content: '',\n      height: '',\n    };\n    this.prevScrollLeft = null;\n  }\n\n  static getDerivedStateFromProps(nextProps) {\n    if (nextProps.status !== STREAM_PAUSED) {\n      return {\n        content: nextProps.lines.join(''),\n      };\n    }\n    return null;\n  }\n\n  componentDidMount() {\n    this.scrollPane.addEventListener('scroll', this._handleScroll, { passive: true });\n    window.addEventListener('resize', this._handleResize, { passive: true });\n    this._handleResize();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.status !== this.props.status ||\n      prevProps.lines.length ||\n      this.props.lines.length\n    ) {\n      this._scrollToBottom();\n    }\n  }\n\n  componentWillUnmount() {\n    this.scrollPane.removeEventListener('scroll', this._handleScroll, { passive: true });\n    window.removeEventListener('resize', this._handleResize, { passive: true });\n  }\n\n  _handleScroll() {\n    const scrollLeftChanged = this.prevScrollLeft !== this.scrollPane.scrollLeft;\n\n    // Stream is finished, take no action on scroll\n    if (this.props.status === STREAM_EOF) {\n      return;\n    }\n\n    // If horizontal scrolling, take no action\n    if (scrollLeftChanged) {\n      this.prevScrollLeft = this.scrollPane.scrollLeft;\n      return;\n    }\n\n    // 1px fudge for fractional heights\n    const scrollTarget = this.scrollPane.scrollHeight - (this.scrollPane.clientHeight + 1);\n    if (this.scrollPane.scrollTop < scrollTarget) {\n      if (this.props.status !== STREAM_PAUSED) {\n        this.props.updateStatus(STREAM_PAUSED);\n      }\n    } else {\n      this.props.updateStatus(STREAM_ACTIVE);\n    }\n  }\n\n  _handleResize() {\n    if (!this.scrollPane) {\n      return;\n    }\n\n    const targetHeight = Math.floor(\n      window.innerHeight -\n        this.scrollPane.getBoundingClientRect().top -\n        (this.props.isFullscreen ? FULLSCREEN_FUDGE_FACTOR : FUDGE_FACTOR),\n    );\n    this.prevScrollLeft = this.scrollPane.scrollLeft;\n    this.setState({\n      height: targetHeight,\n    });\n  }\n\n  _scrollToBottom() {\n    if (this.props.status === STREAM_ACTIVE) {\n      // Async because scrollHeight depends on the size of the rendered pane\n      setTimeout(() => {\n        if (this.scrollPane && this.props.status === STREAM_ACTIVE) {\n          this.scrollPane.scrollTop = this.scrollPane.scrollHeight;\n        }\n      }, 0);\n    }\n  }\n\n  _unpause() {\n    this.props.updateStatus(STREAM_ACTIVE);\n  }\n\n  render() {\n    const { bufferFull, lines, linesBehind, status } = this.props;\n    const { content, height } = this.state;\n\n    // TODO maybe move these variables into state so they are only updated on changes\n    const totalLineCount = pluralize(lines.length, 'line');\n    const linesBehindCount = pluralize(linesBehind, 'new line');\n    const headerText = bufferFull ? `last ${totalLineCount}` : totalLineCount;\n    const resumeText =\n      linesBehind > 0 ? ` Resume stream and show ${linesBehindCount}` : ' Resume stream';\n\n    return (\n      <div className=\"log-window\">\n        <div className=\"log-window__header\">{headerText}</div>\n        <div className=\"log-window__body\">\n          <div className=\"log-window__scroll-pane\" ref={this._setScrollPane}>\n            <div className=\"log-window__contents\" ref={this._setLogContents} style={{ height }}>\n              <div className=\"log-window__contents__text\">{content}</div>\n            </div>\n          </div>\n        </div>\n        {status === STREAM_PAUSED && (\n          <Button onClick={this._unpause} isBlock>\n            <OutlinedPlayCircleIcon />\n            {resumeText}\n          </Button>\n        )}\n      </div>\n    );\n  }\n}\n\nLogWindow.propTypes = {\n  bufferFull: PropTypes.bool.isRequired,\n  lines: PropTypes.array.isRequired,\n  linesBehind: PropTypes.number.isRequired,\n  status: PropTypes.string.isRequired,\n  updateStatus: PropTypes.func.isRequired,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport { DRAGGABLE_TYPE } from './draggable-item-types';\nimport { Button } from '@patternfly/react-core';\nimport { PficonDragdropIcon, MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\n\nimport { NameValueEditorPair, EnvFromPair, EnvType } from './index';\nimport { ValueFromPair } from './value-from-pair';\nimport withDragDropContext from './drag-drop-context';\n\nexport const NameValueEditor = withDragDropContext(\n  class NameValueEditor extends React.Component {\n    constructor(props) {\n      super(props);\n      this._append = this._append.bind(this);\n      this._appendConfigMapOrSecret = this._appendConfigMapOrSecret.bind(this);\n      this._change = this._change.bind(this);\n      this._move = this._move.bind(this);\n      this._remove = this._remove.bind(this);\n    }\n\n    _append() {\n      const { updateParentData, nameValuePairs, nameValueId } = this.props;\n\n      updateParentData(\n        { nameValuePairs: nameValuePairs.concat([['', '', nameValuePairs.length]]) },\n        nameValueId,\n      );\n    }\n\n    _appendConfigMapOrSecret() {\n      const { updateParentData, nameValuePairs, nameValueId } = this.props;\n      const configMapSecretKeyRef = { name: '', key: '' };\n      updateParentData(\n        {\n          nameValuePairs: nameValuePairs.concat([\n            ['', { configMapSecretKeyRef }, nameValuePairs.length],\n          ]),\n        },\n        nameValueId,\n      );\n    }\n\n    _remove(i) {\n      const { updateParentData, nameValueId } = this.props;\n      const nameValuePairs = _.cloneDeep(this.props.nameValuePairs);\n      nameValuePairs.splice(i, 1);\n      nameValuePairs.forEach((values, index) => (values[2] = index)); // update the indices in order.\n\n      updateParentData(\n        { nameValuePairs: nameValuePairs.length ? nameValuePairs : [['', '', 0]] },\n        nameValueId,\n      );\n    }\n\n    _change(e, i, type) {\n      const { updateParentData, nameValueId } = this.props;\n      const nameValuePairs = _.cloneDeep(this.props.nameValuePairs);\n\n      nameValuePairs[i][\n        type === NameValueEditorPair.Name ? NameValueEditorPair.Name : NameValueEditorPair.Value\n      ] = e.target.value;\n      updateParentData({ nameValuePairs }, nameValueId);\n    }\n\n    _move(dragIndex, hoverIndex) {\n      const { updateParentData, nameValueId } = this.props;\n      const nameValuePairs = _.cloneDeep(this.props.nameValuePairs);\n      const movedPair = nameValuePairs[dragIndex];\n\n      nameValuePairs[dragIndex] = nameValuePairs[hoverIndex];\n      nameValuePairs[hoverIndex] = movedPair;\n      updateParentData({ nameValuePairs }, nameValueId);\n    }\n\n    render() {\n      const {\n        nameString,\n        valueString,\n        addString,\n        addSecondString,\n        nameValuePairs,\n        allowSorting,\n        readOnly,\n        nameValueId,\n        configMaps,\n        secrets,\n        addConfigMapSecret,\n      } = this.props;\n      const pairElems = nameValuePairs.map((pair, i) => {\n        const key = _.get(pair, [NameValueEditorPair.Index], i);\n        const isEmpty = nameValuePairs.length === 1 && nameValuePairs[0].every((value) => !value);\n\n        return (\n          <PairElement\n            onChange={this._change}\n            index={i}\n            nameString={nameString}\n            valueString={valueString}\n            allowSorting={allowSorting}\n            readOnly={readOnly}\n            pair={pair}\n            key={key}\n            onRemove={this._remove}\n            onMove={this._move}\n            rowSourceId={nameValueId}\n            configMaps={configMaps}\n            secrets={secrets}\n            isEmpty={isEmpty}\n            disableReorder={nameValuePairs.length === 1}\n          />\n        );\n      });\n      return (\n        <>\n          <div className=\"row pairs-list__heading\">\n            {!readOnly && allowSorting && <div className=\"col-xs-1 co-empty__header\" />}\n            <div className=\"col-xs-5 text-secondary text-uppercase\">{nameString}</div>\n            <div className=\"col-xs-5 text-secondary text-uppercase\">{valueString}</div>\n            <div className=\"col-xs-1 co-empty__header\" />\n          </div>\n          {pairElems}\n          <div className=\"row\">\n            <div className=\"col-xs-12\">\n              {readOnly ? null : (\n                <div className=\"co-toolbar__group co-toolbar__group--left\">\n                  <Button\n                    className=\"pf-m-link--align-left\"\n                    data-test-id=\"pairs-list__add-btn\"\n                    onClick={this._append}\n                    type=\"button\"\n                    variant=\"link\"\n                  >\n                    <PlusCircleIcon\n                      data-test-id=\"pairs-list__add-icon\"\n                      className=\"co-icon-space-r\"\n                    />\n                    {addString}\n                  </Button>\n                  {addConfigMapSecret && (\n                    <>\n                      <Button\n                        className=\"pf-m-link--align-left\"\n                        onClick={this._appendConfigMapOrSecret}\n                        type=\"button\"\n                        variant=\"link\"\n                      >\n                        <PlusCircleIcon\n                          data-test-id=\"pairs-list__add-icon\"\n                          className=\"co-icon-space-r\"\n                        />\n                        {addSecondString}\n                      </Button>\n                    </>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </>\n      );\n    }\n  },\n);\nNameValueEditor.propTypes = {\n  nameString: PropTypes.string,\n  valueString: PropTypes.string,\n  addString: PropTypes.string,\n  addSecondString: PropTypes.string,\n  allowSorting: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  nameValueId: PropTypes.number,\n  nameValuePairs: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.string),\n      PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object])),\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.number]),\n      ),\n    ]),\n  ).isRequired,\n  updateParentData: PropTypes.func.isRequired,\n  configMaps: PropTypes.object,\n  secrets: PropTypes.object,\n  addConfigMapSecret: PropTypes.bool,\n};\nNameValueEditor.defaultProps = {\n  nameString: 'Key',\n  valueString: 'Value',\n  addString: 'Add More',\n  addSecondString: 'Add from Config Map or Secret',\n  allowSorting: false,\n  readOnly: false,\n  nameValueId: 0,\n  addConfigMapSecret: false,\n};\n\nNameValueEditor.displayName = 'Name Value Editor';\n\nexport const EnvFromEditor = withDragDropContext(\n  class EnvFromEditor extends React.Component {\n    constructor(props) {\n      super(props);\n      this._append = this._append.bind(this);\n      this._change = this._change.bind(this);\n      this._move = this._move.bind(this);\n      this._remove = this._remove.bind(this);\n    }\n\n    _append() {\n      const { updateParentData, nameValuePairs, nameValueId } = this.props;\n      const configMapSecretRef = { name: '', key: '' };\n      updateParentData(\n        {\n          nameValuePairs: nameValuePairs.concat([\n            ['', { configMapSecretRef }, nameValuePairs.length],\n          ]),\n        },\n        nameValueId,\n        EnvType.ENV_FROM,\n      );\n    }\n\n    _remove(i) {\n      const { updateParentData, nameValueId } = this.props;\n      const nameValuePairs = _.cloneDeep(this.props.nameValuePairs);\n      nameValuePairs.splice(i, 1);\n      const configMapSecretRef = { name: '', key: '' };\n\n      updateParentData(\n        { nameValuePairs: nameValuePairs.length ? nameValuePairs : [['', { configMapSecretRef }]] },\n        nameValueId,\n        EnvType.ENV_FROM,\n      );\n    }\n\n    _change(e, i, type) {\n      const { updateParentData, nameValueId } = this.props;\n      const nameValuePairs = _.cloneDeep(this.props.nameValuePairs);\n      nameValuePairs[i][type === EnvFromPair.Prefix ? EnvFromPair.Prefix : EnvFromPair.Resource] =\n        e.target.value;\n      updateParentData({ nameValuePairs }, nameValueId, EnvType.ENV_FROM);\n    }\n\n    _move(dragIndex, hoverIndex) {\n      const { updateParentData, nameValueId } = this.props;\n      const nameValuePairs = _.cloneDeep(this.props.nameValuePairs);\n      const movedPair = nameValuePairs[dragIndex];\n\n      nameValuePairs[dragIndex] = nameValuePairs[hoverIndex];\n      nameValuePairs[hoverIndex] = movedPair;\n      updateParentData({ nameValuePairs }, nameValueId, EnvType.ENV_FROM);\n    }\n\n    render() {\n      const {\n        nameValuePairs,\n        readOnly,\n        nameValueId,\n        configMaps,\n        secrets,\n        serviceAccounts,\n        firstTitle,\n        secondTitle,\n        addButtonDisabled,\n        addButtonLabel,\n      } = this.props;\n      const pairElems = nameValuePairs.map((pair, i) => {\n        const key = _.get(pair, [EnvFromPair.Index], i);\n\n        return (\n          <EnvFromPairElement\n            onChange={this._change}\n            index={i}\n            nameString=\"config map/secret\"\n            valueString=\"\"\n            readOnly={readOnly}\n            pair={pair}\n            key={key}\n            onRemove={this._remove}\n            onMove={this._move}\n            rowSourceId={nameValueId}\n            configMaps={configMaps}\n            secrets={secrets}\n            serviceAccounts={serviceAccounts}\n          />\n        );\n      });\n\n      return (\n        <>\n          <div className=\"row pairs-list__heading\">\n            {!readOnly && <div className=\"col-xs-1 co-empty__header\" />}\n            <div className=\"col-xs-5 text-secondary text-uppercase\">{firstTitle}</div>\n            <div className=\"col-xs-5 text-secondary text-uppercase\">{secondTitle}</div>\n            <div className=\"col-xs-1 co-empty__header\" />\n          </div>\n          {pairElems}\n          <div className=\"row\">\n            <div className=\"col-xs-12\">\n              {!readOnly && (\n                <Button\n                  className=\"pf-m-link--align-left\"\n                  onClick={this._append}\n                  type=\"button\"\n                  variant=\"link\"\n                  isDisabled={addButtonDisabled}\n                >\n                  <PlusCircleIcon /> {addButtonLabel}\n                </Button>\n              )}\n            </div>\n          </div>\n        </>\n      );\n    }\n  },\n);\nEnvFromEditor.propTypes = {\n  readOnly: PropTypes.bool,\n  nameValueId: PropTypes.number,\n  nameValuePairs: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.string),\n      PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object])),\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.number]),\n      ),\n    ]),\n  ).isRequired,\n  updateParentData: PropTypes.func.isRequired,\n  configMaps: PropTypes.object,\n  secrets: PropTypes.object,\n  serviceAccounts: PropTypes.object,\n  firstTitle: PropTypes.string,\n  secondTitle: PropTypes.string,\n  addButtonDisabled: PropTypes.bool,\n};\nEnvFromEditor.defaultProps = {\n  readOnly: false,\n  nameValueId: 0,\n  firstTitle: 'Config map/secret',\n  secondTitle: 'Prefix (Optional)',\n  addButtonDisabled: false,\n  addButtonLabel: 'Add All From Config Map or Secret',\n};\n\nconst pairSource = {\n  beginDrag(props) {\n    return {\n      index: props.index,\n      rowSourceId: props.rowSourceId,\n    };\n  },\n};\n\nconst itemTarget = {\n  hover(props, monitor, component) {\n    const dragIndex = monitor.getItem().index;\n    const hoverIndex = props.index;\n\n    // Don't replace items with themselves or with other row groupings on the page\n    if (dragIndex === hoverIndex || monitor.getItem().rowSourceId !== props.rowSourceId) {\n      return;\n    }\n\n    // Determine rectangle on screen\n    const hoverBoundingRect = component.node.getBoundingClientRect();\n\n    // Get vertical middle\n    const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n    // Determine mouse position\n    const clientOffset = monitor.getClientOffset();\n\n    // Get pixels to the top\n    const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n\n    // Only perform the move when the mouse has crossed half of the items height\n    // When dragging downwards, only move when the cursor is below 50%\n    // When dragging upwards, only move when the cursor is above 50%\n\n    // Dragging downwards\n    if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n      return;\n    }\n\n    // Dragging upwards\n    if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n      return;\n    }\n\n    // Time to actually perform the action\n    props.onMove(dragIndex, hoverIndex);\n\n    // Note: we're mutating the monitor item here!\n    // Generally it's better to avoid mutations,\n    // but it's good here for the sake of performance\n    // to avoid expensive index searches.\n    monitor.getItem().index = hoverIndex;\n  },\n};\n\nconst collectSourcePair = (connect, monitor) => ({\n  connectDragSource: connect.dragSource(),\n  connectDragPreview: connect.dragPreview(),\n  isDragging: monitor.isDragging(),\n});\n\nconst collectTargetPair = (connect) => ({\n  connectDropTarget: connect.dropTarget(),\n});\n\nconst PairElement = DragSource(\n  DRAGGABLE_TYPE.ENV_ROW,\n  pairSource,\n  collectSourcePair,\n)(\n  DropTarget(\n    DRAGGABLE_TYPE.ENV_ROW,\n    itemTarget,\n    collectTargetPair,\n  )(\n    class PairElement extends React.Component {\n      constructor(props) {\n        super(props);\n\n        this._onRemove = this._onRemove.bind(this);\n        this._onChangeName = this._onChangeName.bind(this);\n        this._onChangeValue = this._onChangeValue.bind(this);\n      }\n\n      _onRemove() {\n        const { index, onRemove } = this.props;\n        onRemove(index);\n      }\n\n      _onChangeName(e) {\n        const { index, onChange } = this.props;\n        onChange(e, index, NameValueEditorPair.Name);\n      }\n\n      _onChangeValue(e) {\n        const { index, onChange } = this.props;\n        onChange(e, index, NameValueEditorPair.Value);\n      }\n\n      render() {\n        const {\n          isDragging,\n          connectDragSource,\n          connectDragPreview,\n          connectDropTarget,\n          nameString,\n          valueString,\n          allowSorting,\n          readOnly,\n          pair,\n          configMaps,\n          secrets,\n          isEmpty,\n          disableReorder,\n        } = this.props;\n        const deleteIcon = (\n          <>\n            <MinusCircleIcon className=\"pairs-list__side-btn pairs-list__delete-icon\" />\n            <span className=\"sr-only\">Delete</span>\n          </>\n        );\n        const dragButton = (\n          <div>\n            <Button\n              type=\"button\"\n              className=\"pairs-list__action-icon\"\n              tabIndex=\"-1\"\n              isDisabled={disableReorder}\n              variant=\"plain\"\n            >\n              <PficonDragdropIcon className=\"pairs-list__action-icon--reorder\" />\n            </Button>\n          </div>\n        );\n\n        return connectDropTarget(\n          connectDragPreview(\n            <div\n              className={classNames(\n                'row',\n                isDragging ? 'pairs-list__row-dragging' : 'pairs-list__row',\n              )}\n              ref={(node) => (this.node = node)}\n            >\n              {allowSorting && !readOnly && (\n                <div className=\"col-xs-1 pairs-list__action\">\n                  {disableReorder ? dragButton : connectDragSource(dragButton)}\n                </div>\n              )}\n              <div className=\"col-xs-5 pairs-list__name-field\">\n                <input\n                  type=\"text\"\n                  className=\"pf-c-form-control\"\n                  placeholder={nameString.toLowerCase()}\n                  value={pair[NameValueEditorPair.Name]}\n                  onChange={this._onChangeName}\n                  disabled={readOnly}\n                />\n              </div>\n              {_.isPlainObject(pair[NameValueEditorPair.Value]) ? (\n                <div className=\"col-xs-5 pairs-list__value-pair-field\">\n                  <ValueFromPair\n                    pair={pair[NameValueEditorPair.Value]}\n                    configMaps={configMaps}\n                    secrets={secrets}\n                    onChange={this._onChangeValue}\n                    disabled={readOnly}\n                  />\n                </div>\n              ) : (\n                <div className=\"col-xs-5 pairs-list__value-field\">\n                  <input\n                    type=\"text\"\n                    className=\"pf-c-form-control\"\n                    placeholder={valueString.toLowerCase()}\n                    value={pair[NameValueEditorPair.Value] || ''}\n                    onChange={this._onChangeValue}\n                    disabled={readOnly}\n                  />\n                </div>\n              )}\n              {!readOnly && (\n                <div className=\"col-xs-1 pairs-list__action\">\n                  <Button\n                    type=\"button\"\n                    data-test-id=\"pairs-list__delete-btn\"\n                    className={classNames({\n                      'pairs-list__span-btns': allowSorting,\n                    })}\n                    onClick={this._onRemove}\n                    isDisabled={isEmpty}\n                    variant=\"plain\"\n                  >\n                    {deleteIcon}\n                  </Button>\n                </div>\n              )}\n            </div>,\n          ),\n        );\n      }\n    },\n  ),\n);\nPairElement.propTypes = {\n  nameString: PropTypes.string,\n  valueString: PropTypes.string,\n  readOnly: PropTypes.bool,\n  index: PropTypes.number.isRequired,\n  pair: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.string),\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object])),\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.number])),\n  ]),\n  allowSorting: PropTypes.bool.isRequired,\n  onChange: PropTypes.func.isRequired,\n  connectDragSource: PropTypes.func,\n  connectDropTarget: PropTypes.func,\n  isDragging: PropTypes.bool,\n  onMove: PropTypes.func.isRequired,\n  rowSourceId: PropTypes.number.isRequired,\n  configMaps: PropTypes.object,\n  secrets: PropTypes.object,\n};\n\nconst EnvFromPairElement = DragSource(\n  DRAGGABLE_TYPE.ENV_FROM_ROW,\n  pairSource,\n  collectSourcePair,\n)(\n  DropTarget(\n    DRAGGABLE_TYPE.ENV_FROM_ROW,\n    itemTarget,\n    collectTargetPair,\n  )(\n    class EnvFromPairElement extends React.Component {\n      constructor(props) {\n        super(props);\n\n        this._onRemove = this._onRemove.bind(this);\n        this._onChangePrefix = this._onChangePrefix.bind(this);\n        this._onChangeResource = this._onChangeResource.bind(this);\n      }\n\n      _onRemove() {\n        const { index, onRemove } = this.props;\n        onRemove(index);\n      }\n\n      _onChangePrefix(e) {\n        const { index, onChange } = this.props;\n        onChange(e, index, EnvFromPair.Prefix);\n      }\n\n      _onChangeResource(e) {\n        const { index, onChange } = this.props;\n        onChange(e, index, EnvFromPair.Resource);\n      }\n\n      render() {\n        const {\n          isDragging,\n          connectDragSource,\n          connectDragPreview,\n          connectDropTarget,\n          valueString,\n          readOnly,\n          pair,\n          configMaps,\n          secrets,\n          serviceAccounts,\n        } = this.props;\n        const deleteButton = (\n          <>\n            <MinusCircleIcon className=\"pairs-list__side-btn pairs-list__delete-icon\" />\n            <span className=\"sr-only\">Delete</span>\n          </>\n        );\n\n        return connectDropTarget(\n          connectDragPreview(\n            <div\n              className={classNames(\n                'row',\n                isDragging ? 'pairs-list__row-dragging' : 'pairs-list__row',\n              )}\n              ref={(node) => (this.node = node)}\n            >\n              {!readOnly &&\n                connectDragSource(\n                  <div className=\"col-xs-1 pairs-list__action\">\n                    <Button\n                      type=\"button\"\n                      className=\"pairs-list__action-icon\"\n                      tabIndex=\"-1\"\n                      variant=\"plain\"\n                    >\n                      <PficonDragdropIcon className=\"pairs-list__action-icon--reorder\" />\n                    </Button>\n                  </div>,\n                )}\n              <div className=\"col-xs-5 pairs-list__value-pair-field\">\n                <ValueFromPair\n                  pair={pair[EnvFromPair.Resource]}\n                  configMaps={configMaps}\n                  secrets={secrets}\n                  serviceAccounts={serviceAccounts}\n                  onChange={this._onChangeResource}\n                  disabled={readOnly}\n                />\n              </div>\n              <div className=\"col-xs-5 pairs-list__name-field\">\n                <input\n                  data-test-id=\"env-prefix\"\n                  type=\"text\"\n                  className=\"pf-c-form-control\"\n                  placeholder={valueString.toLowerCase()}\n                  value={pair[EnvFromPair.Prefix]}\n                  onChange={this._onChangePrefix}\n                  disabled={readOnly}\n                />\n              </div>\n              {readOnly ? null : (\n                <div className=\"col-xs-1 pairs-list__action\">\n                  <Button\n                    type=\"button\"\n                    data-test-id=\"pairs-list__delete-from-btn\"\n                    className=\"pairs-list__span-btns\"\n                    onClick={this._onRemove}\n                    variant=\"plain\"\n                  >\n                    {deleteButton}\n                  </Button>\n                </div>\n              )}\n            </div>,\n          ),\n        );\n      }\n    },\n  ),\n);\nEnvFromPairElement.propTypes = {\n  valueString: PropTypes.string,\n  readOnly: PropTypes.bool,\n  index: PropTypes.number.isRequired,\n  pair: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.string),\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object])),\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.number])),\n  ]),\n  onChange: PropTypes.func.isRequired,\n  connectDragSource: PropTypes.func,\n  connectDropTarget: PropTypes.func,\n  isDragging: PropTypes.bool,\n  onMove: PropTypes.func.isRequired,\n  rowSourceId: PropTypes.number.isRequired,\n  configMaps: PropTypes.object,\n  secrets: PropTypes.object,\n};\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect, RouteComponentProps } from 'react-router-dom';\nimport { ALL_NAMESPACES_KEY } from '@console/shared/src/constants';\nimport { RootState } from '../../redux';\n\nconst appendActiveNamespace = (namespace: string, pathname: string): string => {\n  const basePath = pathname.replace(/\\/$/, '');\n  return namespace === ALL_NAMESPACES_KEY\n    ? `${basePath}/all-namespaces`\n    : `${basePath}/ns/${namespace}`;\n};\n\ninterface StateProps {\n  activeNamespace: string;\n}\n\nexport type NamespaceRedirectProps = StateProps & RouteComponentProps;\n\nconst NamespaceRedirect_: React.FC<NamespaceRedirectProps> = ({\n  activeNamespace,\n  location: { pathname },\n}) => <Redirect to={appendActiveNamespace(activeNamespace, pathname) + location.search} />;\n\nconst mapStateToProps = (state: RootState): StateProps => {\n  return {\n    activeNamespace: state.UI.get('activeNamespace'),\n  };\n};\n\nexport const NamespaceRedirect = connect(mapStateToProps)(NamespaceRedirect_);\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { Button } from '@patternfly/react-core';\nimport { MinusSquareIcon, PlusSquareIcon } from '@patternfly/react-icons';\n\nexport const NumberSpinner: React.FC<NumberSpinnerProps> = ({\n  className,\n  changeValueBy,\n  min,\n  ...inputProps\n}) => {\n  return (\n    <div>\n      <Button\n        onClick={() => changeValueBy(-1)}\n        type=\"button\"\n        variant=\"plain\"\n        isDisabled={!_.isNil(min) && inputProps.value <= min}\n        aria-label=\"Decrement\"\n        className=\"co-m-number-spinner__button\"\n      >\n        <MinusSquareIcon className=\"co-m-number-spinner__down-icon\" />\n      </Button>\n      <input\n        type=\"number\"\n        className={classNames(className, 'co-m-number-spinner__input')}\n        {...inputProps}\n      />\n      <Button\n        onClick={() => changeValueBy(1)}\n        type=\"button\"\n        variant=\"plain\"\n        aria-label=\"Increment\"\n        className=\"co-m-number-spinner__button\"\n      >\n        <PlusSquareIcon className=\"co-m-number-spinner__up-icon\" />\n      </Button>\n    </div>\n  );\n};\n\ntype NumberSpinnerProps = {\n  className?: string;\n  changeValueBy: (operation: number) => void;\n  min?: number;\n} & React.HTMLProps<HTMLInputElement>;\n","import * as React from 'react';\nimport { OverviewItem } from '@console/shared';\nimport { OwnerReferences } from './owner-references';\n\nconst OperatorBackedOwnerReferences: React.FC<OperatorBackedOwnerReferencesProps> = ({ item }) => {\n  return item.isOperatorBackedService ? (\n    <span className=\"sidebar__section-owner-operator-heading\">\n      Managed by:\n      <span className=\"sidebar__section-owner-reference-operator\">\n        <OwnerReferences resource={item.obj} />\n      </span>\n    </span>\n  ) : null;\n};\n\ntype OperatorBackedOwnerReferencesProps = {\n  item: OverviewItem;\n};\n\nOperatorBackedOwnerReferences.displayName = 'OperatorBackedOwnerReferences';\n\nexport default OperatorBackedOwnerReferences;\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { K8sResourceKind, OwnerReference, referenceForOwnerRef } from '../../module/k8s';\nimport { ResourceLink } from './resource-link';\n\nexport const OwnerReferences: React.FC<OwnerReferencesProps> = ({ resource }) => {\n  const owners = (_.get(resource.metadata, 'ownerReferences') || []).map((o: OwnerReference) => (\n    <ResourceLink\n      key={o.uid}\n      kind={referenceForOwnerRef(o)}\n      name={o.name}\n      namespace={resource.metadata.namespace}\n    />\n  ));\n  return owners.length ? <>{owners}</> : <span className=\"text-muted\">No owner</span>;\n};\n\ntype OwnerReferencesProps = {\n  resource: K8sResourceKind;\n};\n\nOwnerReferences.displayName = 'OwnerReferences';\n","import { useEffect, useRef } from 'react';\n\n// Slightly modified from Dan Abramov's blog post about using React hooks for polling\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport const usePoll = (callback, delay, ...dependencies) => {\n  const savedCallback = useRef(null);\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    const tick = () => savedCallback.current();\n\n    tick(); // Run first tick immediately.\n\n    if (delay) {\n      // Only start interval if a delay is provided.\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [delay, ...dependencies]);\n};\n","import * as React from 'react';\n\nexport const withHandlePromise: WithHandlePromise = (Component) => (props) => {\n  const [inProgress, setInProgress] = React.useState(false);\n  const [errorMessage, setErrorMessage] = React.useState('');\n\n  const handlePromise = (promise) => {\n    setInProgress(true);\n    return promise.then(\n      (res) => {\n        setInProgress(false);\n        setErrorMessage('');\n        return res;\n      },\n      (error) => {\n        const errorMsg = error.message || 'An error occurred. Please try again.';\n        setInProgress(false);\n        setErrorMessage(errorMsg);\n        return Promise.reject(errorMsg);\n      },\n    );\n  };\n\n  return (\n    <Component\n      {...(props as any)}\n      handlePromise={handlePromise}\n      inProgress={inProgress}\n      errorMessage={errorMessage}\n    />\n  );\n};\n\nexport class PromiseComponent<P, S extends PromiseComponentState> extends React.Component<P, S> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inProgress: false,\n      errorMessage: '',\n    } as S;\n  }\n\n  handlePromise<T>(promise: Promise<T>): Promise<T> {\n    this.setState({\n      inProgress: true,\n    });\n    return promise.then(\n      (res) => this.then(res),\n      (error) => this.catch(error),\n    );\n  }\n\n  private then(res) {\n    this.setState({\n      inProgress: false,\n      errorMessage: '',\n    });\n    return res;\n  }\n\n  private catch(error) {\n    const errorMessage = error.message || 'An error occurred. Please try again.';\n    this.setState({\n      inProgress: false,\n      errorMessage,\n    });\n    return Promise.reject(errorMessage);\n  }\n}\n\nexport type HandlePromiseProps = {\n  handlePromise: <T>(promise: Promise<T>) => Promise<T>;\n  inProgress: boolean;\n  errorMessage: string;\n};\n\nexport type WithHandlePromise = <P extends HandlePromiseProps>(\n  C: React.ComponentType<P>,\n) => React.FC<Diff<P, HandlePromiseProps>>;\n\nexport type PromiseComponentState = {\n  inProgress: boolean;\n  errorMessage: string;\n};\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as _ from 'lodash-es';\n\nimport { getName, getNamespace } from '@console/shared';\n\nimport store from '../../redux';\nimport { impersonateStateToProps } from '../../reducers/ui';\nimport {\n  AccessReviewResourceAttributes,\n  k8sCreate,\n  K8sKind,\n  K8sResourceKind,\n  K8sVerb,\n  SelfSubjectAccessReviewKind,\n} from '../../module/k8s';\nimport { ProjectModel, SelfSubjectAccessReviewModel } from '../../models';\nimport { useSafetyFirst } from '../../components/safety-first';\n\n// Memoize the result so we only make the request once for each access review.\n// This does mean that the user will have to refresh the page to see updates.\n// Accept an `impersonateKey` parameter to include in the cache key even though\n// it's not used in the function body. (Impersonate headers are added\n// automatically by `k8sCreate`.) This function takes in the destructured\n// resource attributes so that the cache keys are stable. (`JSON.stringify` is\n// not guaranteed to give the same result for equivalent objects.)\nconst checkAccessInternal = _.memoize(\n  (\n    group: string,\n    resource: string,\n    subresource: string,\n    verb: K8sVerb,\n    name: string,\n    namespace: string,\n    // eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars\n    impersonateKey: string,\n  ): Promise<SelfSubjectAccessReviewKind> => {\n    // Projects are a special case. `namespace` must be set to the project name\n    // even though it's a cluster-scoped resource.\n    const reviewNamespace =\n      group === ProjectModel.apiGroup && resource === ProjectModel.plural ? name : namespace;\n    const ssar: SelfSubjectAccessReviewKind = {\n      apiVersion: 'authorization.k8s.io/v1',\n      kind: 'SelfSubjectAccessReview',\n      spec: {\n        resourceAttributes: {\n          group,\n          resource,\n          subresource,\n          verb,\n          name,\n          namespace: reviewNamespace,\n        },\n      },\n    };\n    return k8sCreate(SelfSubjectAccessReviewModel, ssar);\n  },\n  (...args) => args.join('~'),\n);\n\nconst getImpersonateKey = (impersonate): string => {\n  impersonate = impersonate || store.getState().UI.get('impersonate');\n  return impersonate ? `${impersonate.kind}~{impersonate.user}` : '';\n};\n\nexport const checkAccess = (\n  resourceAttributes: AccessReviewResourceAttributes,\n  impersonate?,\n): Promise<SelfSubjectAccessReviewKind> => {\n  // Destructure the attributes with defaults so we can create a stable cache key.\n  const {\n    group = '',\n    resource = '',\n    subresource = '',\n    verb = '' as K8sVerb,\n    name = '',\n    namespace = '',\n  } = resourceAttributes || {};\n  return checkAccessInternal(\n    group,\n    resource,\n    subresource,\n    verb,\n    name,\n    namespace,\n    getImpersonateKey(impersonate),\n  );\n};\n\nexport const useAccessReview2 = (\n  resourceAttributes: AccessReviewResourceAttributes,\n  impersonate?,\n): [boolean, boolean] => {\n  const [loading, setLoading] = useSafetyFirst(true);\n  const [isAllowed, setAllowed] = useSafetyFirst(false);\n  // Destructure the attributes to pass them as dependencies to `useEffect`,\n  // which doesn't do deep comparison of object dependencies.\n  const {\n    group = '',\n    resource = '',\n    subresource = '',\n    verb = '' as K8sVerb,\n    name = '',\n    namespace = '',\n  } = resourceAttributes;\n  const impersonateKey = getImpersonateKey(impersonate);\n  React.useEffect(() => {\n    checkAccessInternal(group, resource, subresource, verb, name, namespace, impersonateKey)\n      .then((result: SelfSubjectAccessReviewKind) => {\n        setAllowed(result.status.allowed);\n        setLoading(false);\n      })\n      .catch((e) => {\n        // eslint-disable-next-line no-console\n        console.warn('SelfSubjectAccessReview failed', e);\n        // Default to enabling the action if the access review fails so that we\n        // don't incorrectly block users from actions they can perform. The server\n        // still enforces access control.\n        setAllowed(true);\n        setLoading(false);\n      });\n  }, [setLoading, setAllowed, group, resource, subresource, verb, name, namespace, impersonateKey]);\n\n  return [isAllowed, loading];\n};\n\nexport const useAccessReview = (\n  resourceAttributes: AccessReviewResourceAttributes,\n  impersonate?,\n): boolean => useAccessReview2(resourceAttributes, impersonate)[0];\n\nconst RequireCreatePermission_: React.FC<RequireCreatePermissionProps> = ({\n  model,\n  namespace,\n  impersonate,\n  children,\n}) => {\n  const isAllowed = useAccessReview(\n    {\n      group: model.apiGroup,\n      resource: model.plural,\n      verb: 'create',\n      namespace,\n    },\n    impersonate,\n  );\n  return isAllowed ? <>{children}</> : null;\n};\nexport const RequireCreatePermission = connect(impersonateStateToProps)(RequireCreatePermission_);\nRequireCreatePermission.displayName = 'RequireCreatePermission';\n\ntype RequireCreatePermissionProps = {\n  model: K8sKind;\n  namespace?: string;\n  impersonate?: string;\n  children: React.ReactNode;\n};\n\nexport const asAccessReview = (\n  kindObj: K8sKind,\n  obj: K8sResourceKind,\n  verb: K8sVerb,\n): AccessReviewResourceAttributes => {\n  if (!obj) {\n    console.warn('review obj should not be null'); // eslint-disable-line no-console\n    return null;\n  }\n  return {\n    group: kindObj.apiGroup,\n    resource: kindObj.plural,\n    name: getName(obj),\n    namespace: getNamespace(obj),\n    verb,\n  };\n};\n","import { useEffect, useRef, useState } from 'react';\n\nexport const useRefWidth = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const [width, setWidth] = useState<number>();\n\n  const clientWidth = ref?.current?.clientWidth;\n\n  useEffect(() => {\n    const handleResize = () => setWidth(ref?.current?.clientWidth);\n    window.addEventListener('resize', handleResize);\n    window.addEventListener('sidebar_toggle', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('sidebar_toggle', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    setWidth(clientWidth);\n  }, [clientWidth]);\n\n  return [ref, width] as [React.MutableRefObject<HTMLDivElement>, number];\n};\n","import * as React from 'react';\nimport { Dropdown } from './dropdown';\nimport * as classNames from 'classnames';\n\nexport class RequestSizeInput extends React.Component<RequestSizeInputProps> {\n  state = {\n    unit: this.props.defaultRequestSizeUnit,\n    value: this.props.defaultRequestSizeValue,\n  };\n\n  onValueChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ value: event.currentTarget.value });\n    this.props.onChange({ value: event.currentTarget.value, unit: this.state.unit });\n  };\n\n  onUnitChange = (unit) => {\n    this.setState({ unit });\n    this.props.onChange({ value: this.state.value, unit });\n  };\n\n  render() {\n    const { describedBy, name, inputID } = this.props;\n    const inputName = `${name}Value`;\n    const dropdownName = `${name}Unit`;\n    return (\n      <div className=\"form-group\">\n        <div className=\"pf-c-input-group\">\n          <input\n            className={classNames('pf-c-form-control', this.props.inputClassName)}\n            type=\"number\"\n            step={this.props.step || 'any'}\n            onChange={this.onValueChange}\n            placeholder={this.props.placeholder}\n            aria-describedby={describedBy}\n            name={inputName}\n            id={inputID}\n            required={this.props.required}\n            value={this.props.defaultRequestSizeValue}\n            min={this.props.minValue}\n          />\n          <Dropdown\n            title={this.props.dropdownUnits[this.props.defaultRequestSizeUnit]}\n            selectedKey={this.props.defaultRequestSizeUnit}\n            name={dropdownName}\n            className=\"btn-group\"\n            items={this.props.dropdownUnits}\n            onChange={this.onUnitChange}\n            required={this.props.required}\n            ariaLabel={`Number of ${this.props.dropdownUnits[this.props.defaultRequestSizeUnit]}`}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport type RequestSizeInputProps = {\n  placeholder?: string;\n  name: string;\n  onChange: Function;\n  required?: boolean;\n  dropdownUnits: any;\n  defaultRequestSizeUnit: string;\n  defaultRequestSizeValue: string;\n  describedBy?: string;\n  step?: number;\n  minValue?: number;\n  inputClassName?: string;\n  inputID?: string;\n};\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash-es';\n\nimport { K8sResourceKindReference } from '../../module/k8s';\nimport { modelFor } from '../../module/k8s/k8s-models';\nimport { kindToAbbr } from '../../module/k8s/get-resources';\n\nconst MEMO = {};\n\nexport const ResourceIcon: React.SFC<ResourceIconProps> = ({ className, kind }) => {\n  // if no kind, return null so an empty icon isn't rendered\n  if (!kind) {\n    return null;\n  }\n  const memoKey = className ? `${kind}/${className}` : kind;\n  if (MEMO[memoKey]) {\n    return MEMO[memoKey];\n  }\n  const kindObj = modelFor(kind);\n  const kindStr = _.get(kindObj, 'kind', kind);\n  const backgroundColor = _.get(kindObj, 'color', undefined);\n  const klass = classNames(`co-m-resource-icon co-m-resource-${kindStr.toLowerCase()}`, className);\n  const iconLabel = (kindObj && kindObj.abbr) || kindToAbbr(kindStr);\n\n  const rendered = (\n    <>\n      <span className=\"sr-only\">{kindStr}</span>\n      <span className={klass} title={kindStr} style={{ backgroundColor }}>\n        {iconLabel}\n      </span>\n    </>\n  );\n  if (kindObj) {\n    MEMO[memoKey] = rendered;\n  }\n\n  return rendered;\n};\n\nexport type ResourceIconProps = {\n  className?: string;\n  kind: K8sResourceKindReference;\n};\n\nexport type ResourceNameProps = {\n  kind: K8sResourceKindReference;\n  name: string;\n};\n\nexport const ResourceName: React.SFC<ResourceNameProps> = (props) => (\n  <span className=\"co-resource-item\">\n    <ResourceIcon kind={props.kind} />{' '}\n    <span className=\"co-resource-item__resource-name\">{props.name}</span>\n  </span>\n);\n\nResourceName.displayName = 'ResourceName';\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as classNames from 'classnames';\n\nimport { FLAGS } from '@console/shared/src/constants';\nimport { ResourceIcon } from './resource-icon';\nimport {\n  modelFor,\n  referenceForModel,\n  K8sKind,\n  K8sResourceKindReference,\n  K8sResourceKind,\n} from '../../module/k8s';\nimport { connectToModel } from '../../kinds';\nimport { connectToFlags, FlagsObject } from '../../reducers/features';\n\nconst unknownKinds = new Set();\n\nexport const resourcePathFromModel = (model: K8sKind, name?: string, namespace?: string) => {\n  const { plural, namespaced, crd } = model;\n\n  let url = '/k8s/';\n\n  if (!namespaced) {\n    url += 'cluster/';\n  }\n\n  if (namespaced) {\n    url += namespace ? `ns/${namespace}/` : 'all-namespaces/';\n  }\n\n  if (crd) {\n    url += referenceForModel(model);\n  } else if (plural) {\n    url += plural;\n  }\n\n  if (name) {\n    // Some resources have a name that needs to be encoded. For instance,\n    // Users can have special characters in the name like `#`.\n    url += `/${encodeURIComponent(name)}`;\n  }\n\n  return url;\n};\n\nexport const resourceListPathFromModel = (model: K8sKind, namespace: string) =>\n  resourcePathFromModel(model, null, namespace);\n\n/**\n * NOTE: This will not work for runtime-defined resources. Use a `connect`-ed component like `ResourceLink` instead.\n */\nexport const resourcePath = (kind: K8sResourceKindReference, name?: string, namespace?: string) => {\n  const model = modelFor(kind);\n  if (!model) {\n    if (!unknownKinds.has(kind)) {\n      unknownKinds.add(kind);\n      // eslint-disable-next-line no-console\n      console.error(`resourcePath: no model for \"${kind}\"`);\n    }\n    return;\n  }\n\n  return resourcePathFromModel(model, name, namespace);\n};\n\nexport const resourceObjPath = (obj: K8sResourceKind, kind: K8sResourceKindReference) =>\n  resourcePath(kind, _.get(obj, 'metadata.name'), _.get(obj, 'metadata.namespace'));\n\nexport const ResourceLink = connectToModel(\n  ({\n    className,\n    displayName,\n    inline = false,\n    kind,\n    linkTo = true,\n    name,\n    namespace,\n    hideIcon,\n    title,\n    children,\n  }) => {\n    if (!kind) {\n      return null;\n    }\n    const path = resourcePath(kind, name, namespace);\n    const value = displayName ? displayName : name;\n    const classes = classNames('co-resource-item', className, {\n      'co-resource-item--inline': inline,\n    });\n\n    return (\n      <span className={classes}>\n        {!hideIcon && <ResourceIcon kind={kind} />}\n        {path && linkTo ? (\n          <Link\n            to={path}\n            title={title}\n            className=\"co-resource-item__resource-name\"\n            data-test-id={value}\n          >\n            {value}\n          </Link>\n        ) : (\n          <span className=\"co-resource-item__resource-name\" data-test-id={value}>\n            {value}\n          </span>\n        )}\n        {children}\n      </span>\n    );\n  },\n);\n\nconst NodeLink_: React.FC<NodeLinkProps> = (props) => {\n  const { name, flags } = props;\n  if (!name) {\n    return <>-</>;\n  }\n  return flags[FLAGS.CAN_LIST_NODE] ? (\n    <ResourceLink kind=\"Node\" name={name} title={name} />\n  ) : (\n    <span className=\"co-break-word\">{name}</span>\n  );\n};\n\nexport const NodeLink = connectToFlags<NodeLinkProps>(FLAGS.CAN_LIST_NODE)(NodeLink_);\n\ntype NodeLinkProps = {\n  name: string;\n  flags: FlagsObject;\n};\n\nResourceLink.displayName = 'ResourceLink';\n","import * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { Base64 } from 'js-base64';\nimport { saveAs } from 'file-saver';\nimport { Alert, AlertActionLink, Button } from '@patternfly/react-core';\nimport * as _ from 'lodash-es';\nimport { CompressIcon, ExpandIcon, DownloadIcon } from '@patternfly/react-icons';\nimport * as classNames from 'classnames';\nimport { FLAGS } from '@console/shared/src/constants';\nimport { LoadingInline, LogWindow, TogglePlay, ExternalLink } from './';\nimport { modelFor, resourceURL } from '../../module/k8s';\nimport { WSFactory } from '../../module/ws-factory';\nimport { LineBuffer } from './line-buffer';\nimport * as screenfull from 'screenfull';\nimport { k8sGet, k8sList } from '@console/internal/module/k8s';\nimport { ConsoleExternalLogLinkModel, ProjectModel } from '@console/internal/models';\nimport { connectToFlags } from '../../reducers/features';\n\nexport const STREAM_EOF = 'eof';\nexport const STREAM_LOADING = 'loading';\nexport const STREAM_PAUSED = 'paused';\nexport const STREAM_ACTIVE = 'streaming';\n\nexport const LOG_SOURCE_RESTARTING = 'restarting';\nexport const LOG_SOURCE_RUNNING = 'running';\nexport const LOG_SOURCE_TERMINATED = 'terminated';\nexport const LOG_SOURCE_WAITING = 'waiting';\n\n// Messages to display for corresponding log status\nconst streamStatusMessages = {\n  [STREAM_EOF]: 'Log stream ended.',\n  [STREAM_LOADING]: 'Loading log...',\n  [STREAM_PAUSED]: 'Log stream paused.',\n  [STREAM_ACTIVE]: 'Log streaming...',\n};\n\nconst replaceVariables = (template, values) => {\n  return _.reduce(\n    values,\n    (result, value, name) => {\n      // Replace all occurrences of template expressions like \"${name}\" with the URL-encoded value.\n      // eslint-disable-next-line prefer-template\n      const pattern = _.escapeRegExp('${' + name + '}');\n      return result.replace(new RegExp(pattern, 'g'), encodeURIComponent(value));\n    },\n    template,\n  );\n};\n\n// Component for log stream controls\nexport const LogControls = ({\n  dropdown,\n  onDownload,\n  toggleFullscreen,\n  isFullscreen,\n  status,\n  toggleStreaming,\n  resource,\n  containerName,\n  podLogLinks,\n  namespaceUID,\n}) => {\n  return (\n    <div className=\"co-toolbar\">\n      <div className=\"co-toolbar__group co-toolbar__group--left\">\n        <div className=\"co-toolbar__item\">\n          {status === STREAM_LOADING && (\n            <>\n              <LoadingInline />\n              &nbsp;\n            </>\n          )}\n          {[STREAM_ACTIVE, STREAM_PAUSED].includes(status) && (\n            <TogglePlay active={status === STREAM_ACTIVE} onClick={toggleStreaming} />\n          )}\n          {streamStatusMessages[status]}\n        </div>\n        {dropdown && <div className=\"co-toolbar__item\">{dropdown}</div>}\n      </div>\n      <div className=\"co-toolbar__group co-toolbar__group--right\">\n        {!_.isEmpty(podLogLinks) &&\n          _.map(_.sortBy(podLogLinks, 'metadata.name'), (link) => {\n            const namespace = resource.metadata.namespace;\n            const namespaceFilter = link.spec.namespaceFilter;\n            if (namespaceFilter) {\n              try {\n                const namespaceRegExp = new RegExp(namespaceFilter, 'g');\n                if (namespace.search(namespaceRegExp)) {\n                  return null;\n                }\n              } catch (e) {\n                // eslint-disable-next-line no-console\n                console.warn('invalid log link regex', namespaceFilter, e);\n                return null;\n              }\n            }\n            const url = replaceVariables(link.spec.hrefTemplate, {\n              resourceName: resource.metadata.name,\n              resourceUID: resource.metadata.uid,\n              containerName,\n              resourceNamespace: namespace,\n              resourceNamespaceUID: namespaceUID,\n              podLabels: JSON.stringify(resource.metadata.labels),\n            });\n            return (\n              <React.Fragment key={link.metadata.uid}>\n                <ExternalLink href={url} text={link.spec.text} dataTestID={link.metadata.name} />\n                <span aria-hidden=\"true\" className=\"co-action-divider hidden-xs\">\n                  |\n                </span>\n              </React.Fragment>\n            );\n          })}\n        <Button variant=\"link\" isInline onClick={onDownload}>\n          <DownloadIcon className=\"co-icon-space-r\" />\n          Download\n        </Button>\n        {screenfull.enabled && (\n          <>\n            <span aria-hidden=\"true\" className=\"co-action-divider hidden-xs\">\n              |\n            </span>\n            <Button variant=\"link\" isInline onClick={toggleFullscreen}>\n              {isFullscreen ? (\n                <>\n                  <CompressIcon className=\"co-icon-space-r\" />\n                  Collapse\n                </>\n              ) : (\n                <>\n                  <ExpandIcon className=\"co-icon-space-r\" />\n                  Expand\n                </>\n              )}\n            </Button>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nLogControls.propTypes = {\n  isFullscreen: PropTypes.bool.isRequired,\n  dropdown: PropTypes.node,\n  status: PropTypes.string,\n  resource: PropTypes.object,\n  containerName: PropTypes.string,\n  podLogLinks: PropTypes.arrayOf(PropTypes.object), // k8sResourceKind\n  namespaceUID: PropTypes.string,\n  toggleStreaming: PropTypes.func,\n  onDownload: PropTypes.func.isRequired,\n  toggleFullscreen: PropTypes.func.isRequired,\n};\n\n// Resource agnostic log component\nclass ResourceLog_ extends React.Component {\n  constructor(props) {\n    super(props);\n    this._buffer = new LineBuffer(props.bufferSize);\n    this._download = this._download.bind(this);\n    this._toggleFullscreen = this._toggleFullscreen.bind(this);\n    this._onClose = this._onClose.bind(this);\n    this._onError = this._onError.bind(this);\n    this._onMessage = this._onMessage.bind(this);\n    this._onOpen = this._onOpen.bind(this);\n    this._restartStream = this._restartStream.bind(this);\n    this._toggleStreaming = this._toggleStreaming.bind(this);\n    this._updateStatus = this._updateStatus.bind(this);\n    this._resourceLogRef = React.createRef();\n    this.state = {\n      error: false,\n      lines: [],\n      linesBehind: 0,\n      resourceStatus: LOG_SOURCE_WAITING,\n      stale: false,\n      status: STREAM_LOADING,\n      isFullscreen: false,\n      namespaceUID: '',\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.resourceStatus !== prevState.resourcStatus) {\n      const newState = {};\n      newState.resourceStatus = nextProps.resourceStatus;\n      // Container changed from non-running to running state, so currently displayed logs are stale\n      if (\n        prevState.resourceStatus === LOG_SOURCE_RESTARTING &&\n        newState.resourceStatus !== LOG_SOURCE_RESTARTING\n      ) {\n        newState.stale = true;\n      }\n      return newState;\n    }\n    return null;\n  }\n\n  fetchLogLinks() {\n    const promises = [\n      k8sList(ConsoleExternalLogLinkModel),\n      k8sGet(ProjectModel, this.props.resource.metadata.namespace),\n    ];\n    Promise.all(promises)\n      .then(([podLogLinks, project]) => {\n        // Project UID and namespace UID are the same value. Use the projects\n        // API since normal OpenShift users can list projects.\n        this.setState({ podLogLinks, namespaceUID: project.metadata.uid });\n      })\n      .catch((e) => this.setState({ error: e }));\n  }\n\n  componentDidMount() {\n    if (this.props.flags.CONSOLE_EXTERNAL_LOG_LINK && this.props.resource.kind === 'Pod') {\n      this.fetchLogLinks();\n    }\n    this._wsInit(this.props);\n    if (screenfull.enabled) {\n      screenfull.on('change', () => {\n        this.setState({ isFullscreen: screenfull.isFullscreen });\n      });\n      screenfull.on('error', () => {\n        this.setState({ isFullscreen: false });\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const containerChanged = prevProps.containerName !== this.props.containerName;\n    const resourceStarted =\n      prevState.resourceStatus === LOG_SOURCE_WAITING &&\n      this.state.resourceStatus !== LOG_SOURCE_WAITING;\n\n    // Container changed or transitioned out of waiting state\n    if (containerChanged || resourceStarted) {\n      this._restartStream();\n    }\n  }\n\n  componentWillUnmount() {\n    this._wsDestroy();\n    if (screenfull.enabled) {\n      screenfull.off('change');\n      screenfull.off('error');\n    }\n  }\n\n  // Download currently displayed log content\n  _download() {\n    const { resource, containerName } = this.props;\n    const blob = this._buffer.getBlob({ type: 'text/plain;charset=utf-8' });\n    let filename = resource.metadata.name;\n    if (containerName) {\n      filename = `${filename}-${containerName}`;\n    }\n    saveAs(blob, `${filename}.log`);\n  }\n\n  // Handler for websocket onclose event\n  _onClose() {\n    this.setState({ status: STREAM_EOF });\n  }\n\n  // Handler for websocket onerror event\n  _onError() {\n    this.setState({\n      error: true,\n    });\n  }\n\n  // Handler for websocket onmessage event\n  _onMessage(msg) {\n    const { linesBehind, status } = this.state;\n    if (msg) {\n      const text = Base64.decode(msg);\n      const linesAdded = this._buffer.ingest(text);\n      this.setState({\n        linesBehind: status === STREAM_PAUSED ? linesBehind + linesAdded : linesBehind,\n        lines: this._buffer.getLines(),\n      });\n    }\n  }\n\n  // Handler for websocket onopen event\n  _onOpen() {\n    this._buffer.clear();\n    this._updateStatus(STREAM_ACTIVE);\n  }\n\n  // Destroy and reinitialize websocket connection\n  _restartStream() {\n    this.setState(\n      {\n        error: false,\n        lines: [],\n        linesBehind: 0,\n        stale: false,\n        status: STREAM_LOADING,\n      },\n      () => {\n        this._wsDestroy();\n        this._wsInit(this.props);\n      },\n    );\n  }\n\n  // Toggle currently displayed log content to/from fullscreen\n  _toggleFullscreen() {\n    const logConsole = this._resourceLogRef.current;\n    if (!logConsole) {\n      return;\n    }\n\n    if (screenfull.enabled) {\n      screenfull.toggle(logConsole);\n    }\n  }\n\n  // Toggle streaming/paused status\n  _toggleStreaming() {\n    const newStatus = this.state.status === STREAM_ACTIVE ? STREAM_PAUSED : STREAM_ACTIVE;\n    this._updateStatus(newStatus);\n  }\n\n  // Updates log status\n  _updateStatus(newStatus) {\n    const { status } = this.state;\n    const newState = { status: newStatus };\n\n    // Reset linesBehind when transitioning out of paused state\n    if (status !== STREAM_ACTIVE && newStatus === STREAM_ACTIVE) {\n      newState.linesBehind = 0;\n    }\n    this.setState(newState);\n  }\n\n  // Destroy websocket\n  _wsDestroy() {\n    this.ws && this.ws.destroy();\n  }\n\n  // Initialize websocket connection and wire up handlers\n  _wsInit({ resource, containerName, bufferSize }) {\n    if (\n      [LOG_SOURCE_RUNNING, LOG_SOURCE_TERMINATED, LOG_SOURCE_RESTARTING].includes(\n        this.state.resourceStatus,\n      )\n    ) {\n      const urlOpts = {\n        ns: resource.metadata.namespace,\n        name: resource.metadata.name,\n        path: 'log',\n        queryParams: {\n          container: containerName || '',\n          follow: 'true',\n          tailLines: bufferSize,\n        },\n      };\n      const watchURL = resourceURL(modelFor(resource.kind), urlOpts);\n      const wsOpts = {\n        host: 'auto',\n        path: watchURL,\n        subprotocols: ['base64.binary.k8s.io'],\n      };\n\n      this.ws = new WSFactory(watchURL, wsOpts)\n        .onclose(this._onClose)\n        .onerror(this._onError)\n        .onmessage(this._onMessage)\n        .onopen(this._onOpen);\n    }\n  }\n\n  render() {\n    const { resource, containerName, dropdown, bufferSize } = this.props;\n    const {\n      error,\n      lines,\n      linesBehind,\n      stale,\n      status,\n      isFullscreen,\n      podLogLinks,\n      namespaceUID,\n    } = this.state;\n    const bufferFull = lines.length === bufferSize;\n\n    return (\n      <>\n        {error && (\n          <Alert\n            isInline\n            className=\"co-alert\"\n            variant=\"danger\"\n            title=\"An error occurred while retrieving the requested logs.\"\n            action={<AlertActionLink onClick={this._restartStream}>Retry</AlertActionLink>}\n          />\n        )}\n        {stale && (\n          <Alert\n            isInline\n            className=\"co-alert\"\n            variant=\"info\"\n            title={`The logs for this ${resource.kind} may be stale.`}\n            action={<AlertActionLink onClick={this._restartStream}>Refresh</AlertActionLink>}\n          />\n        )}\n        <div\n          ref={this._resourceLogRef}\n          className={classNames('resource-log', { 'resource-log--fullscreen': isFullscreen })}\n        >\n          <LogControls\n            dropdown={dropdown}\n            isFullscreen={isFullscreen}\n            onDownload={this._download}\n            status={status}\n            toggleFullscreen={this._toggleFullscreen}\n            toggleStreaming={this._toggleStreaming}\n            resource={resource}\n            containerName={containerName}\n            podLogLinks={podLogLinks}\n            namespaceUID={namespaceUID}\n          />\n          <LogWindow\n            lines={lines}\n            linesBehind={linesBehind}\n            bufferFull={bufferFull}\n            isFullscreen={isFullscreen}\n            status={status}\n            updateStatus={this._updateStatus}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\n/** @type {React.FC<{bufferSize?: number, containerName?: string, dropdown?: React.ReactNode, resource: any, resourceStatus: string}}>} */\nexport const ResourceLog = connectToFlags(FLAGS.CONSOLE_EXTERNAL_LOG_LINK)(ResourceLog_);\n\nResourceLog.defaultProps = {\n  bufferSize: 1000,\n};\n\nResourceLog.propTypes = {\n  bufferSize: PropTypes.number.isRequired,\n  containerName: PropTypes.string,\n  dropdown: PropTypes.element,\n  resource: PropTypes.object.isRequired,\n  resourceStatus: PropTypes.string.isRequired,\n};\n","import * as _ from 'lodash-es';\nimport { createBrowserHistory, createMemoryHistory, History } from 'history';\n\ntype AppHistory = History & { pushPath: History['push'] };\n\nlet createHistory;\n\ntry {\n  if (process.env.NODE_ENV === 'test') {\n    // Running in node. Can't use browser history\n    createHistory = createMemoryHistory;\n  } else {\n    createHistory = createBrowserHistory;\n  }\n} catch (unused) {\n  createHistory = createBrowserHistory;\n}\n\nexport const history: AppHistory = createHistory({ basename: window.SERVER_FLAGS.basePath });\n\nconst removeBasePath = (url = '/') =>\n  _.startsWith(url, window.SERVER_FLAGS.basePath)\n    ? url.slice(window.SERVER_FLAGS.basePath.length - 1)\n    : url;\n\n// Monkey patch history to slice off the base path\n(history as any).__replace__ = history.replace;\nhistory.replace = (url) => (history as any).__replace__(removeBasePath(url));\n\n(history as any).__push__ = history.push;\nhistory.push = (url) => (history as any).__push__(removeBasePath(url));\n(history as any).pushPath = (path) => (history as any).__push__(path);\n\nexport const getQueryArgument = (arg: string) =>\n  new URLSearchParams(window.location.search).get(arg);\n\nexport const setQueryArgument = (k: string, v: string) => {\n  const params = new URLSearchParams(window.location.search);\n  params.set(k, v);\n  const url = new URL(window.location.href);\n  history.replace(`${url.pathname}?${params.toString()}${url.hash}`);\n};\n\nexport const setAllQueryArguments = (newParams: { [k: string]: string }) => {\n  const params = new URLSearchParams();\n  _.each(newParams, (v, k) => params.set(k, v));\n  const url = new URL(window.location.href);\n  history.replace(`${url.pathname}?${params.toString()}${url.hash}`);\n};\n\nexport const removeQueryArgument = (k: string) => {\n  const params = new URLSearchParams(window.location.search);\n  params.delete(k);\n  const url = new URL(window.location.href);\n  history.replace(`${url.pathname}?${params.toString()}${url.hash}`);\n};\n","import { useEffect, useRef } from 'react';\nimport { coFetchJSON } from '../../co-fetch';\n\nexport const useSafeFetch = () => {\n  const controller = useRef<AbortController>();\n  useEffect(() => {\n    controller.current = new AbortController();\n    return () => controller.current.abort();\n  }, []);\n\n  return (url) => coFetchJSON(url, 'get', { signal: controller.current.signal as AbortSignal });\n};\n","import * as React from 'react';\n\n// When pages share a resource (e.g., pod.jsx and container.jsx),\n// the scroll position will be maintained when navigating between\n// pages.  Use <ScrollToTopOnMount /> to always reset the scroll position\n// back to the top of the navigated to page when pages share a resource.\nexport class ScrollToTopOnMount extends React.Component {\n  componentDidMount() {\n    document.getElementById('content-scrollable').scrollTop = 0;\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport const useScrollToTopOnMount = () =>\n  React.useEffect(() => {\n    document.getElementById('content-scrollable').scrollTop = 0;\n  }, []);\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as TagsInput from 'react-tagsinput';\n\nimport * as k8sSelector from '../../module/k8s/selector';\nimport * as k8sSelectorRequirement from '../../module/k8s/selector-requirement';\n\n// Helpers for cleaning up tags by running them through the selector parser\nconst cleanSelectorStr = (tag) => k8sSelector.selectorToString(k8sSelector.selectorFromString(tag));\nconst cleanTags = (tags) => k8sSelector.split(cleanSelectorStr(tags.join(',')));\n\nexport class SelectorInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.isBasic = !!_.get(this.props.options, 'basic');\n    this.setRef = (ref) => (this.ref_ = ref);\n    this.state = {\n      inputValue: '',\n      isInputValid: true,\n      tags: this.props.tags,\n    };\n  }\n\n  static arrayify(obj) {\n    return _.map(obj, (v, k) => (v ? `${k}=${v}` : k));\n  }\n\n  static objectify(arr) {\n    const result = {};\n    _.each(arr, (item) => {\n      const [key, value = null] = item.split('=');\n      result[key] = value;\n    });\n    return result;\n  }\n\n  focus() {\n    this.ref_ && this.ref_.focus();\n  }\n\n  isTagValid(tag) {\n    const requirement = k8sSelectorRequirement.requirementFromString(tag);\n    return !!(requirement && (!this.isBasic || requirement.operator === 'Equals'));\n  }\n\n  handleInputChange(e) {\n    // We track the input field value in state so we can retain the input value when an invalid tag is entered.\n    // Otherwise, the default behaviour of TagsInput is to clear the input field.\n    const inputValue = e.target.value;\n\n    // If the user deletes an existing inputValue, set isInputValid back to true\n    if (inputValue === '') {\n      this.setState({ inputValue, isInputValid: true });\n      return;\n    }\n\n    this.setState({ inputValue, isInputValid: this.isTagValid(inputValue) });\n  }\n\n  handleChange(tags, changed) {\n    // The way we use TagsInput, there should only ever be one new tag in changed\n    const newTag = changed[0];\n\n    if (!this.isTagValid(newTag)) {\n      this.setState({ isInputValid: false });\n      return;\n    }\n\n    // Clean up the new tag by running it through the selector parser\n    const cleanNewTag = cleanSelectorStr(newTag);\n\n    // Is the new tag a duplicate of an already existing tag?\n    // Note that TagsInput accepts an onlyUnique property, but we handle this logic ourselves so that we can set a\n    // custom error class\n    if (_.filter(tags, (tag) => tag === cleanNewTag).length > 1) {\n      this.setState({ isInputValid: false });\n      return;\n    }\n\n    const newTags = cleanTags(tags);\n    this.setState({ inputValue: '', isInputValid: true, tags: newTags });\n    this.props.onChange(newTags);\n  }\n\n  render() {\n    const { inputValue, isInputValid, tags } = this.state;\n\n    // Keys that add tags: Enter\n    const addKeys = [13];\n\n    // Backspace deletes tags, but not if there is text being edited in the input field\n    const removeKeys = inputValue.length ? [] : [8];\n\n    const inputProps = {\n      autoFocus: this.props.autoFocus,\n      className: classNames('input', { 'invalid-tag': !isInputValid }),\n      onChange: this.handleInputChange.bind(this),\n      placeholder: _.isEmpty(tags) ? 'app=frontend' : '',\n      spellCheck: 'false',\n      value: inputValue,\n      id: 'tags-input',\n      ...(this.props.inputProps || {}),\n    };\n\n    const renderTag = ({ tag, key, onRemove, getTagDisplayValue }) => {\n      return (\n        <span className={classNames('tag-item', this.props.labelClassName)} key={key}>\n          <span className=\"tag-item__content\">{getTagDisplayValue(tag)}</span>\n          &nbsp;\n          <a className=\"remove-button\" onClick={() => onRemove(key)}>\n            ×\n          </a>\n        </span>\n      );\n    };\n\n    return (\n      <div className=\"co-search-input pf-c-form-control\">\n        <tags-input>\n          <TagsInput\n            ref={this.setRef}\n            className=\"tags\"\n            value={tags}\n            addKeys={addKeys}\n            removeKeys={removeKeys}\n            inputProps={inputProps}\n            renderTag={renderTag}\n            onChange={this.handleChange.bind(this)}\n            addOnBlur\n          />\n        </tags-input>\n      </div>\n    );\n  }\n}\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { SearchIcon } from '@patternfly/react-icons';\n\nimport { Selector as SelectorKind } from '../../module/k8s';\nimport { selectorToString } from '../../module/k8s/selector';\n\nconst Requirement: React.FC<RequirementProps> = ({ kind, requirements, namespace = '' }) => {\n  // Strip off any trailing '=' characters for valueless selectors\n  const requirementAsString = selectorToString(requirements)\n    .replace(/=,/g, ',')\n    .replace(/=$/g, '');\n  const requirementAsUrlEncodedString = encodeURIComponent(requirementAsString);\n\n  const to = namespace\n    ? `/search/ns/${namespace}?kind=${kind}&q=${requirementAsUrlEncodedString}`\n    : `/search/all-namespaces?kind=${kind}&q=${requirementAsUrlEncodedString}`;\n\n  return (\n    <div className=\"co-m-requirement\">\n      <Link className={`co-m-requirement__link co-text-${kind.toLowerCase()}`} to={to}>\n        <SearchIcon className=\"co-m-requirement__icon co-icon-flex-child\" />\n        <span className=\"co-m-requirement__label\">{requirementAsString.replace(/,/g, ', ')}</span>\n      </Link>\n    </div>\n  );\n};\nRequirement.displayName = 'Requirement';\n\nexport const Selector: React.FC<SelectorProps> = ({\n  kind = 'Pod',\n  selector = {},\n  namespace = undefined,\n}) => (\n  <div className=\"co-m-selector\">\n    {_.isEmpty(selector) ? (\n      <p className=\"text-muted\">No selector</p>\n    ) : (\n      <Requirement kind={kind} requirements={selector} namespace={namespace} />\n    )}\n  </div>\n);\nSelector.displayName = 'Selector';\n\ntype RequirementProps = {\n  kind: string;\n  requirements: SelectorKind;\n  namespace?: string;\n};\n\ntype SelectorProps = {\n  kind?: string;\n  selector: SelectorKind;\n  namespace?: string;\n};\n","import * as React from 'react';\nimport { Status } from '@console/shared';\n\nimport { K8sResourceKind, serviceCatalogStatus } from '../../module/k8s';\n\nexport const StatusWithIcon: React.SFC<StatusWithIconProps> = ({ obj }) => {\n  const objStatus: string = serviceCatalogStatus(obj);\n  return <Status status={objStatus} />;\n};\n\nexport type StatusWithIconProps = {\n  obj: K8sResourceKind;\n};\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash-es';\n\nclass SimpleTab extends React.PureComponent<SimpleTabProps> {\n  constructor(props) {\n    super(props);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick() {\n    this.props.onClick(this.props.title);\n  }\n\n  render() {\n    const { active, title } = this.props;\n    const className = classNames('co-m-horizontal-nav__menu-item', {\n      'co-m-horizontal-nav-item--active': active,\n    });\n    return (\n      <li className={className}>\n        <button onClick={this.onClick} type=\"button\">\n          {title}\n        </button>\n      </li>\n    );\n  }\n}\n\nexport class SimpleTabNav extends React.Component<SimpleTabNavProps, SimpleTabNavState> {\n  constructor(props) {\n    super(props);\n    this.state = { selectedTab: props.selectedTab };\n  }\n\n  onClickTab = (name) => {\n    this.props.onClickTab && this.props.onClickTab(name);\n    this.setState({\n      selectedTab: name,\n    });\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const selectedTab = (\n      _.find(nextProps.tabs, { name: prevState.selectedTab }) ||\n      _.find(nextProps.tabs, { name: nextProps.selectedTab }) ||\n      _.head(nextProps.tabs)\n    ).name;\n    if (prevState.selectedTab !== selectedTab) {\n      return {\n        selectedTab,\n      };\n    }\n    return null;\n  }\n\n  render() {\n    const { tabs, tabProps, additionalClassNames } = this.props;\n    const { selectedTab } = this.state;\n    const selectedTabData = _.find(tabs, { name: selectedTab }) || _.head(tabs);\n    const Component = selectedTabData.component;\n\n    return (\n      <>\n        <ul className={classNames('co-m-horizontal-nav__menu', additionalClassNames)}>\n          {_.map(tabs, (tab) => (\n            <SimpleTab\n              active={selectedTabData.name === tab.name}\n              key={tab.name}\n              onClick={this.onClickTab}\n              title={tab.name}\n            />\n          ))}\n        </ul>\n        <Component {...tabProps} />\n      </>\n    );\n  }\n}\n\ntype SimpleTabNavProps = {\n  onClickTab?: (name: string) => void;\n  selectedTab?: string;\n  tabProps: any;\n  tabs: {\n    name: string;\n    component: any;\n  }[];\n  additionalClassNames?: string;\n};\n\ntype SimpleTabNavState = {\n  selectedTab: string;\n};\n\ntype SimpleTabProps = {\n  active: boolean;\n  onClick: (title: string) => void;\n  title: string;\n};\n","import * as React from 'react';\n\n// 12 works well because it divides evenly for 2, 3, and 4 column layouts\nconst skeletonTiles = Array.from({ length: 12 }, (_, k: number) => (\n  <div key={k} className=\"skeleton-catalog--tile\" />\n));\nexport const skeletonCatalog = (\n  <div className=\"loading-skeleton--catalog\">\n    <div className=\"skeleton-catalog--list\" />\n    <div className=\"skeleton-catalog--grid\">{skeletonTiles}</div>\n  </div>\n);\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { Alert, Button } from '@patternfly/react-core';\n\nimport * as restrictedSignImg from '../../imgs/restricted-sign.svg';\nimport { TimeoutError } from '../../co-fetch';\nimport { useTranslation } from 'react-i18next';\n\nexport const Box: React.FC<BoxProps> = ({ children, className }) => (\n  <div className={classNames('cos-status-box', className)}>{children}</div>\n);\n\nexport const LoadError: React.FC<LoadErrorProps> = ({\n  label,\n  className,\n  message,\n  canRetry = true,\n}) => (\n  <Box className={className}>\n    <div className=\"text-center cos-error-title\">\n      Error Loading {label}\n      {_.isString(message) ? `: ${message}` : ''}\n    </div>\n    {canRetry && (\n      <div className=\"text-center\">\n        Please{' '}\n        <Button\n          type=\"button\"\n          onClick={window.location.reload.bind(window.location)}\n          variant=\"link\"\n          isInline\n        >\n          try again\n        </Button>\n        .\n      </div>\n    )}\n  </Box>\n);\nLoadError.displayName = 'LoadError';\n\nexport const Loading: React.FC<LoadingProps> = ({ className }) => (\n  <div className={classNames('co-m-loader co-an-fade-in-out', className)}>\n    <div className=\"co-m-loader-dot__one\" />\n    <div className=\"co-m-loader-dot__two\" />\n    <div className=\"co-m-loader-dot__three\" />\n  </div>\n);\nLoading.displayName = 'Loading';\n\nexport const LoadingInline: React.FC<{}> = () => <Loading className=\"co-m-loader--inline\" />;\nLoadingInline.displayName = 'LoadingInline';\n\nexport const LoadingBox: React.FC<LoadingBoxProps> = ({ className, message }) => (\n  <Box className={classNames('cos-status-box--loading', className)}>\n    <Loading />\n    {message && <div className=\"cos-status-box__loading-message\">{message}</div>}\n  </Box>\n);\nLoadingBox.displayName = 'LoadingBox';\n\nexport const EmptyBox: React.FC<EmptyBoxProps> = ({ label }) => {\n  const { t } = useTranslation();\n  return (\n    <Box>\n      <div className=\"text-center\">{label ? t('COMMON:MSG_COMMON_ERROR_MESSAGE_22', { something: label }) : t('COMMON:MSG_COMMON_ERROR_MESSAGE_23')}</div>\n    </Box>\n  );\n}\nEmptyBox.displayName = 'EmptyBox';\n\nexport const MsgBox: React.FC<MsgBoxProps> = ({ title, detail, className = '' }) => (\n  <Box className={className}>\n    {title && <div className=\"cos-status-box__title\">{title}</div>}\n    {detail && <div className=\"text-center cos-status-box__detail\">{detail}</div>}\n  </Box>\n);\nMsgBox.displayName = 'MsgBox';\n\nexport const AccessDenied: React.FC<AccessDeniedProps> = ({ message }) => (\n  <div>\n    <Box className=\"text-center\">\n      <img className=\"cos-status-box__access-denied-icon\" src={restrictedSignImg} />\n      <MsgBox\n        title=\"Restricted Access\"\n        detail=\"You don't have access to this section due to cluster policy.\"\n      />\n    </Box>\n    {_.isString(message) && (\n      <Alert isInline className=\"co-alert\" variant=\"danger\" title=\"Error details\">\n        {message}\n      </Alert>\n    )}\n  </div>\n);\nAccessDenied.displayName = 'AccessDenied';\n\nconst Data: React.FC<DataProps> = ({\n  NoDataEmptyMsg,\n  EmptyMsg,\n  label,\n  data,\n  unfilteredData,\n  children,\n}) => {\n  if (NoDataEmptyMsg && _.isEmpty(unfilteredData)) {\n    return (\n      <div className=\"loading-box loading-box__loaded\">\n        {NoDataEmptyMsg ? <NoDataEmptyMsg /> : <EmptyBox label={label} />}\n      </div>\n    );\n  }\n\n  if (!data || _.isEmpty(data)) {\n    return (\n      <div className=\"loading-box loading-box__loaded\">\n        {EmptyMsg ? <EmptyMsg /> : <EmptyBox label={label} />}\n      </div>\n    );\n  }\n  return <div className=\"loading-box loading-box__loaded\">{children}</div>;\n};\nData.displayName = 'Data';\n\nexport const StatusBox: React.FC<StatusBoxProps> = (props) => {\n  const { loadError, loaded, skeleton, ...dataProps } = props;\n\n  if (loadError) {\n    const status = _.get(loadError, 'response.status');\n    if (status === 404) {\n      return (\n        <div className=\"co-m-pane__body\">\n          <h1 className=\"co-m-pane__heading co-m-pane__heading--center\">404: Not Found</h1>\n        </div>\n      );\n    }\n    if (status === 403) {\n      return <AccessDenied message={loadError.message} />;\n    }\n\n    if (loaded && loadError instanceof TimeoutError) {\n      return (\n        <Data {...dataProps}>\n          <div className=\"co-m-timeout-error text-muted\">\n            Timed out fetching new data. The data below is stale.\n          </div>\n          {props.children}\n        </Data>\n      );\n    }\n\n    return (\n      <LoadError\n        message={loadError.message}\n        label={props.label}\n        className=\"loading-box loading-box__errored\"\n      />\n    );\n  }\n\n  if (!loaded) {\n    return skeleton ? <>{skeleton}</> : <LoadingBox className=\"loading-box loading-box__loading\" />;\n  }\n  return <Data {...dataProps} />;\n};\nStatusBox.displayName = 'StatusBox';\n\ntype BoxProps = {\n  children: React.ReactNode;\n  className?: string;\n};\n\ntype LoadErrorProps = {\n  label: string;\n  className?: string;\n  message?: string;\n  canRetry?: boolean;\n};\n\ntype LoadingProps = {\n  className?: string;\n};\n\ntype LoadingBoxProps = {\n  className?: string;\n  message?: string;\n};\n\ntype EmptyBoxProps = {\n  label?: string;\n};\n\ntype MsgBoxProps = {\n  title?: string;\n  detail?: React.ReactNode;\n  className?: string;\n};\n\ntype AccessDeniedProps = {\n  message?: string;\n};\n\ntype DataProps = {\n  NoDataEmptyMsg?: React.ComponentType;\n  EmptyMsg?: React.ComponentType;\n  label?: string;\n  unfilteredData?: any;\n  data?: any;\n  children?: React.ReactNode;\n};\n\ntype StatusBoxProps = {\n  label?: string;\n  loadError?: any;\n  loaded?: boolean;\n  data?: any;\n  unfilteredData?: any;\n  skeleton?: React.ReactNode;\n  NoDataEmptyMsg?: React.ComponentType;\n  EmptyMsg?: React.ComponentType;\n  children?: React.ReactNode;\n};\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Tooltip } from '@patternfly/react-core';\nimport * as classNames from 'classnames';\n// import { GlobeAmericasIcon } from '@patternfly/react-icons';\n\n// import * as dateTime from './datetime';\n\n// MEMO: hypercloud timestamp 기획 변경으로 기존 timestamp 부분 주석처리 해놓음\n\n// const monthAbbrs = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n// const timestampFor = (mdate: Date, now: Date, omitSuffix: boolean) => {\n//   if (!dateTime.isValid(mdate)) {\n//     return '-';\n//   }\n\n//   const timeDifference = now.getTime() - mdate.getTime();\n//   if (omitSuffix) {\n//     return dateTime.fromNow(mdate, undefined, { omitSuffix: true });\n//   }\n//   if (Math.sign(timeDifference) !== -1 && timeDifference < 630000) {\n//     // 10.5 minutes\n//     // Show a relative time if within 10.5 minutes in the past from the current time.\n//     return dateTime.fromNow(mdate);\n//   }\n\n//   let a = 'am';\n//   let hours = mdate.getHours();\n//   if (hours > 12) {\n//     hours -= 12;\n//     a = 'pm';\n//   }\n\n//   const minuteStr = mdate\n//     .getMinutes()\n//     .toString()\n//     .padStart(2, '00');\n//   let timeStr = `${hours}:${minuteStr} ${a}`;\n//   if (mdate.getFullYear() !== now.getFullYear()) {\n//     timeStr = `${mdate.getFullYear()} ${timeStr}`;\n//   }\n\n//   const monthStr = monthAbbrs[mdate.getMonth()];\n\n//   return `${monthStr} ${mdate.getDate()}, ${timeStr}`;\n// };\n\nconst nowStateToProps = ({ UI }) => ({ now: UI.get('lastTick') });\n\n// export const Timestamp = connect(nowStateToProps)((props: TimestampProps) => {\n//   // Check for null. If props.timestamp is null, it returns incorrect date and time of Wed Dec 31 1969 19:00:00 GMT-0500 (Eastern Standard Time)\n//   if (!props.timestamp) {\n//     return <div className=\"co-timestamp\">-</div>;\n//   }\n//   console.log('props.timestamp? ', props.timestamp);\n\n//   const mdate = props.isUnix ? new Date((props.timestamp as number) * 1000) : new Date(props.timestamp);\n//   console.log('mdate? ', mdate);\n\n//   const timestamp = timestampFor(mdate, new Date(props.now), props.omitSuffix);\n//   console.log('timestamp? ', timestamp);\n\n//   if (!dateTime.isValid(mdate)) {\n//     return <div className=\"co-timestamp\">-</div>;\n//   }\n\n//   if (props.simple) {\n//     return <>{timestamp}</>;\n//   }\n\n//   return (\n//     <div className={classNames('co-timestamp co-icon-and-text', props.className)}>\n//       <GlobeAmericasIcon className=\"co-icon-and-text__icon\" />\n//       <Tooltip\n//         content={[\n//           <span className=\"co-nowrap\" key=\"co-timestamp\">\n//             {mdate.toISOString()}\n//           </span>,\n//         ]}\n//       >\n//         <span>{timestamp}</span>\n//       </Tooltip>\n//     </div>\n//   );\n// });\n\nconst formatTimeZoneStamp = timestamp => {\n  const d = new Date(timestamp);\n  const date: any = d.toLocaleDateString();\n  const time: string = d.toTimeString().split(' ')[0];\n\n  if (!!date) {\n    if (date.indexOf('.') > -1) {\n      // MEMO: Date()가 YYYY. MM. DD로 들어오는 경우\n      const dateSplit = date.replace(/\\.\\s/g, '.').split('.');\n      const formattedDate = dateSplit[0] + '.' + (dateSplit[1]?.length === 1 ? '0' + dateSplit[1] : dateSplit[1]) + '.' + (dateSplit[2]?.length === 1 ? '0' + dateSplit[2] : dateSplit[2]);\n      return `${formattedDate} ${time}`;\n    } else if (date.indexOf('/') > -1) {\n      // MEMO: Date()가 YYYY/MM/DD로 들어오는 경우\n      const formattedDate = date.replace(/\\//g, '.');\n      return `${formattedDate} ${time}`;\n    } else {\n      // MEMO: Date()가 이상하게 들어오는 경우 그냥 보여줄 거\n      `${date} ${time}`;\n    }\n  } else {\n    return timestamp;\n  }\n};\n\n// MEMO: timestamp값이 utc로 들어온다는 전제로 변환 구현\nconst formatUtcStamp = timestamp => {\n  if (typeof timestamp == 'object') {\n    const d = new Date(timestamp);\n    const isoTimestamp: any = d.toISOString();\n    return isoTimestamp\n      .replace('T', ' ')\n      .replace(/-/g, '.')\n      .replace('Z', ' (UTC)');\n  } else if (typeof timestamp == 'string') {\n    const formattedStamp = timestamp\n      .replace('T', ' ')\n      .replace(/-/g, '.')\n      .replace('Z', ' (UTC)');\n    return formattedStamp;\n  } else {\n    return '';\n  }\n};\n\nexport const Timestamp = connect(nowStateToProps)((props: TimestampProps) => {\n  if (!props.timestamp) {\n    return <div className=\"co-timestamp\">-</div>;\n  }\n\n  const utcTimestamp = formatUtcStamp(props.timestamp);\n  const timestamp = formatTimeZoneStamp(props.timestamp);\n\n  return (\n    <div className={classNames('co-timestamp co-icon-and-text', props.className)}>\n      <Tooltip\n        content={[\n          <span className=\"co-nowrap\" key=\"co-timestamp\">\n            {utcTimestamp}\n          </span>,\n        ]}\n      >\n        <span>{timestamp}</span>\n      </Tooltip>\n    </div>\n  );\n});\n\nexport type TimestampProps = {\n  timestamp: string | number;\n  isUnix?: boolean;\n  now: number;\n  simple?: boolean;\n  omitSuffix?: boolean;\n  className?: string;\n};\n\nTimestamp.displayName = 'Timestamp';\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport { Button } from '@patternfly/react-core';\n\nexport class TogglePlay extends React.Component {\n  shouldComponentUpdate(nextProps) {\n    return !!['className', 'active', 'onClick'].find(\n      (prop) => nextProps[prop] !== this.props[prop],\n    );\n  }\n\n  render() {\n    const klass = classNames(\n      'co-toggle-play fa',\n      this.props.className,\n      this.props.active ? 'co-toggle-play--active' : 'co-toggle-play--inactive',\n    );\n    return (\n      <Button\n        variant=\"plain\"\n        className={klass}\n        onClick={this.props.onClick}\n        aria-label={this.props.active ? 'Pause event streaming' : 'Start streaming events'}\n      />\n    );\n  }\n}\nTogglePlay.propTypes = {\n  active: PropTypes.bool.isRequired,\n  className: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n};\n","export type TruncateOptions = {\n  length?: number; // Length to truncate text to\n  truncateEnd?: boolean; // Flag to alternatively truncate at the end\n  omission?: string; // Truncation text used to denote the truncation (ellipsis)\n  minTruncateChars?: number; // Minimum number of characters to truncate\n};\n\nconst DEFAULT_OPTIONS: TruncateOptions = {\n  length: 20,\n  truncateEnd: false,\n  omission: '\\u2026', // ellipsis character\n  minTruncateChars: 3,\n};\n\n// Truncates a string down to `maxLength` characters when the length\n// is greater than the `maxLength` + `minTruncateChars` values.\n// By default the middle is truncated, set the options.truncateEnd to true to truncate at the end.\n// Truncated text is replaced with the provided omission option (ellipsis character by default);\nexport const truncateMiddle = (text: string, options: TruncateOptions = {}): string => {\n  const { length, truncateEnd, omission, minTruncateChars } = { ...DEFAULT_OPTIONS, ...options };\n  if (!text) {\n    return text;\n  }\n\n  // Do not truncate less than the minimum truncate characters\n  if (text.length <= length + minTruncateChars) {\n    return text;\n  }\n\n  if (length <= omission.length) {\n    return omission;\n  }\n\n  if (truncateEnd) {\n    return `${text.substr(0, length - 1)}${omission}`;\n  }\n\n  const startLength = Math.ceil((length - omission.length) / 2);\n  const endLength = length - startLength - omission.length;\n  const startFragment = text.substr(0, startLength);\n  const endFragment = text.substr(text.length - endLength);\n  return `${startFragment}${omission}${endFragment}`;\n};\n\nexport const shouldTruncate = (text, options: TruncateOptions = {}): boolean => {\n  const { length, minTruncateChars } = { ...DEFAULT_OPTIONS, ...options };\n\n  return text.length > length + minTruncateChars;\n};\n","import {\n  K8sResourceKindReference,\n  Selector,\n  K8sResourceKind,\n  K8sResourceCommon,\n} from '../../module/k8s';\n\nexport type FirehoseResult<\n  R extends K8sResourceCommon | K8sResourceCommon[] = K8sResourceKind[]\n> = {\n  loaded: boolean;\n  loadError: string;\n  optional?: boolean;\n  data: R;\n  kind?: string;\n};\n\nexport type FirehoseResourcesResult = {\n  [key: string]: FirehoseResult<K8sResourceCommon | K8sResourceCommon[]>;\n};\n\n/*\n  Add the enum for NameValueEditorPair here and not in its namesake file because the editor should always be\n  loaded asynchronously in order not to bloat the vendor file. The enum reference into the editor\n  will cause it not to load asynchronously.\n */\nexport const enum NameValueEditorPair {\n  Name = 0,\n  Value,\n  Index,\n}\n\nexport const enum EnvFromPair {\n  Prefix = 0,\n  Resource,\n  Index,\n}\n/**\n * The environment editor manages two types of env variables env and envFrom. This const distinguishes the two.\n */\nexport const enum EnvType {\n  ENV = 0,\n  ENV_FROM = 1,\n}\n\nexport type FirehoseResource = {\n  kind: K8sResourceKindReference;\n  name?: string;\n  namespace?: string;\n  isList?: boolean;\n  selector?: Selector;\n  prop: string;\n  namespaced?: boolean;\n  optional?: boolean;\n  limit?: number;\n  fieldSelector?: string;\n};\n\nexport type HumanizeResult = {\n  string: string;\n  value: number;\n  unit: string;\n};\n\nexport type Humanize = {\n  (v: React.ReactText, initialUnit?: string, preferredUnit?: string): HumanizeResult;\n};\n","import * as _ from 'lodash-es';\n\nexport const units = {};\nexport const validate = {};\n\nconst TYPES = {\n  numeric: {\n    units: ['', 'k', 'm', 'b'],\n    space: false,\n    divisor: 1000,\n  },\n  decimalBytes: {\n    units: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB'],\n    space: true,\n    divisor: 1000,\n  },\n  decimalBytesWithoutB: {\n    units: ['', 'k', 'M', 'G', 'T', 'P', 'E'],\n    space: true,\n    divisor: 1000,\n  },\n  binaryBytes: {\n    units: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB'],\n    space: true,\n    divisor: 1024,\n  },\n  binaryBytesWithoutB: {\n    units: ['i', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei'],\n    space: true,\n    divisor: 1024,\n  },\n  SI: {\n    units: ['', 'k', 'M', 'G', 'T', 'P', 'E'],\n    space: false,\n    divisor: 1000,\n  },\n  decimalBytesPerSec: {\n    units: ['Bps', 'KBps', 'MBps', 'GBps', 'TBps', 'PBps', 'EBps'],\n    space: true,\n    divisor: 1000,\n  },\n  packetsPerSec: {\n    units: ['pps', 'kpps'],\n    space: true,\n    divisor: 1000,\n  },\n  seconds: {\n    units: ['ns', 'μs', 'ms', 's'],\n    space: true,\n    divisor: 1000,\n  },\n};\n\nexport const getType = (name) => {\n  const type = TYPES[name];\n  if (!_.isPlainObject(type)) {\n    return {\n      units: [],\n      space: false,\n      divisor: 1000,\n    };\n  }\n  return type;\n};\n\nconst convertBaseValueToUnits = (value, unitArray, divisor, initialUnit, preferredUnit) => {\n  const sliceIndex = initialUnit ? unitArray.indexOf(initialUnit) : 0;\n  const units_ = unitArray.slice(sliceIndex);\n\n  if (preferredUnit || preferredUnit === '') {\n    const unitIndex = units_.indexOf(preferredUnit);\n    if (unitIndex !== -1) {\n      return {\n        value: value / divisor ** unitIndex,\n        unit: preferredUnit,\n      };\n    }\n  }\n\n  let unit = units_.shift();\n  while (value >= divisor && units_.length > 0) {\n    value = value / divisor;\n    unit = units_.shift();\n  }\n  return { value, unit };\n};\n\nconst convertValueWithUnitsToBaseValue = (value, unitArray, divisor) => {\n  const defaultReturn = { value, unit: '' };\n  if (typeof value !== 'string') {\n    return defaultReturn;\n  }\n\n  let units_ = unitArray.slice().reverse();\n\n  // find which unit we're given\n  let truncateStringAt = -1;\n  const startingUnitIndex = _.findIndex(units_, function(currentUnitValue) {\n    const index = value.indexOf(currentUnitValue);\n    if (index > -1) {\n      truncateStringAt = index;\n      return true;\n    }\n    return false;\n  });\n  if (startingUnitIndex <= 0) {\n    // can't parse\n    return defaultReturn;\n  }\n\n  // get the numeric value & prepare unit array for conversion\n  units_ = units_.slice(startingUnitIndex);\n  value = value.substring(0, truncateStringAt);\n  value = _.toNumber(value);\n\n  let unit = units_.shift();\n  while (units_.length > 0) {\n    value = value * divisor;\n    unit = units_.shift();\n  }\n\n  return { value, unit };\n};\n\nconst getDefaultFractionDigits = (value) => {\n  if (value < 1) {\n    return 3;\n  }\n  if (value < 100) {\n    return 2;\n  }\n  return 1;\n};\n\nconst formatValue = (value, options) => {\n  const fractionDigits = getDefaultFractionDigits(value);\n  const { locales, ...rest } = _.defaults(options, {\n    maximumFractionDigits: fractionDigits,\n  });\n\n  if (!isFinite(value)) {\n    return Intl.NumberFormat(locales, rest).format(0);\n  }\n  return Intl.NumberFormat(locales, rest).format(value);\n};\n\nconst round = (units.round = (value, fractionDigits) => {\n  if (!isFinite(value)) {\n    return 0;\n  }\n  const multiplier = Math.pow(10, fractionDigits || getDefaultFractionDigits(value));\n  return Math.round(value * multiplier) / multiplier;\n});\n\nconst humanize = (units.humanize = (\n  value,\n  typeName,\n  useRound = false,\n  initialUnit,\n  preferredUnit,\n) => {\n  const type = getType(typeName);\n\n  if (!isFinite(value)) {\n    value = 0;\n  }\n\n  let converted = convertBaseValueToUnits(\n    value,\n    type.units,\n    type.divisor,\n    initialUnit,\n    preferredUnit,\n  );\n\n  if (useRound) {\n    converted.value = round(converted.value);\n    converted = convertBaseValueToUnits(\n      converted.value,\n      type.units,\n      type.divisor,\n      converted.unit,\n      preferredUnit,\n    );\n  }\n\n  const formattedValue = formatValue(converted.value);\n\n  return {\n    string: type.space ? `${formattedValue} ${converted.unit}` : formattedValue + converted.unit,\n    unit: converted.unit,\n    value: converted.value,\n  };\n});\n\nconst formatPercentage = (value, options) => {\n  const { locales, ...rest } = _.defaults(\n    { style: 'percent' }, // Don't allow perent style to be overridden.\n    options,\n    {\n      maximumFractionDigits: 1,\n    },\n  );\n  return Intl.NumberFormat(locales, rest).format(value);\n};\n\nexport const humanizeBinaryBytesWithoutB = (v, initialUnit, preferredUnit) =>\n  humanize(v, 'binaryBytesWithoutB', true, initialUnit, preferredUnit);\nexport const humanizeBinaryBytes = (v, initialUnit, preferredUnit) =>\n  humanize(v, 'binaryBytes', true, initialUnit, preferredUnit);\nexport const humanizeDecimalBytes = (v, initialUnit, preferredUnit) =>\n  humanize(v, 'decimalBytes', true, initialUnit, preferredUnit);\nexport const humanizeDecimalBytesPerSec = (v, initialUnit, preferredUnit) =>\n  humanize(v, 'decimalBytesPerSec', true, initialUnit, preferredUnit);\nexport const humanizePacketsPerSec = (v, initialUnit, preferredUnit) =>\n  humanize(v, 'packetsPerSec', true, initialUnit, preferredUnit);\nexport const humanizeNumber = (v, initialUnit, preferredUnit) =>\n  humanize(v, 'numeric', true, initialUnit, preferredUnit);\nexport const humanizeNumberSI = (v, initialUnit, preferredUnit) =>\n  humanize(v, 'SI', true, initialUnit, preferredUnit);\nexport const humanizeSeconds = (v, initialUnit, preferredUnit) =>\n  humanize(v, 'seconds', true, initialUnit, preferredUnit);\nexport const humanizeCpuCores = (v) => {\n  const value = v < 1 ? round(v * 1000) : v;\n  const unit = v < 1 ? 'm' : '';\n  return {\n    string: `${formatValue(value)}${unit}`,\n    unit,\n    value,\n  };\n};\nexport const humanizePercentage = (value) => {\n  if (!isFinite(value)) {\n    value = 0;\n  }\n  return {\n    string: formatPercentage(value / 100),\n    unit: '%',\n    value: round(value, 1),\n  };\n};\n\nunits.dehumanize = (value, typeName) => {\n  const type = getType(typeName);\n  return convertValueWithUnitsToBaseValue(value, type.units, type.divisor);\n};\n\nvalidate.split = (value) => {\n  const index = value.search(/([a-zA-Z]+)/g);\n  let number, unit;\n  if (index === -1) {\n    number = value;\n  } else {\n    number = value.slice(0, index);\n    unit = value.slice(index);\n  }\n  return [parseFloat(number, 10), unit];\n};\n\nconst baseUnitedValidation = (value) => {\n  if (value === null || value.length === 0) {\n    return;\n  }\n  if (value.search(/\\s/g) !== -1) {\n    return 'white space is not allowed';\n  }\n};\n\nconst validateNumber = (float = '') => {\n  if (float < 0) {\n    return 'must be positive';\n  }\n  if (!isFinite(float)) {\n    return 'must be a number';\n  }\n};\nconst validCPUUnits = new Set(['m', '']);\nconst validateCPUUnit = (value = '') => {\n  if (validCPUUnits.has(value)) {\n    return;\n  }\n  return `unrecongnized unit: ${value}`;\n};\n\nvalidate.CPU = (value = '') => {\n  if (!value) {\n    return;\n  }\n  const error = baseUnitedValidation(value);\n  if (error) {\n    return error;\n  }\n\n  const [number, unit] = validate.split(value);\n\n  if (!unit) {\n    return validateNumber(number);\n  }\n\n  return validateNumber(number) || validateCPUUnit(unit);\n};\n\nconst validMemUnits = new Set(['E', 'P', 'T', 'G', 'M', 'k', 'Pi', 'Ti', 'Gi', 'Mi', 'Ki']);\nconst validateMemUnit = (value = '') => {\n  if (validMemUnits.has(value)) {\n    return;\n  }\n  return `unrecongnized unit: ${value}`;\n};\n\nconst validTimeUnits = new Set(['s', 'm', 'h', 'd', 'M', 'y']);\nconst validateTimeUnit = (value = '') => {\n  if (validTimeUnits.has(value)) {\n    return;\n  }\n  return `unrecongnized unit: ${value}`;\n};\n\nvalidate.time = (value = '') => {\n  if (!value) {\n    return;\n  }\n  const error = baseUnitedValidation(value);\n  if (error) {\n    return error;\n  }\n\n  const [number, unit] = validate.split(value);\n\n  if (!unit) {\n    return 'number and unit required';\n  }\n\n  return validateNumber(number) || validateTimeUnit(unit);\n};\n\nvalidate.memory = (value = '') => {\n  if (!value) {\n    return;\n  }\n  const error = baseUnitedValidation(value);\n  if (error) {\n    return error;\n  }\n\n  const [number, unit] = validate.split(value);\n\n  if (!unit) {\n    return validateNumber(value);\n  }\n\n  return validateNumber(number) || validateMemUnit(unit);\n};\n\n// Convert k8s compute resources values to a base value for comparison.\n// If the value has no unit, it just returns the number, so this function\n// can be used for any quota resource (resource counts). `units.dehumanize`\n// is problematic for comparing quota resources because you need to know\n// what unit you're dealing with already (e.g. decimal vs binary). Returns\n// null if value isn't recognized as valid.\nexport const convertToBaseValue = (value) => {\n  if (!_.isString(value)) {\n    return null;\n  }\n\n  const [number, unit] = validate.split(value);\n  const validationError = validateNumber(number);\n  if (validationError) {\n    return null;\n  }\n\n  if (!unit) {\n    return number;\n  }\n\n  // Handle CPU millicores specifically.\n  if (unit === 'm') {\n    return number / 1000;\n  }\n\n  if (TYPES.binaryBytesWithoutB.units.includes(unit)) {\n    return units.dehumanize(value, 'binaryBytesWithoutB').value;\n  }\n\n  if (TYPES.decimalBytesWithoutB.units.includes(unit)) {\n    return units.dehumanize(value, 'decimalBytesWithoutB').value;\n  }\n\n  // Unrecognized unit.\n  return null;\n};\n\nexport const secondsToNanoSeconds = (value) => {\n  const val = Number(value);\n  return Number.isFinite(val) ? val * 1000 ** 3 : 0;\n};\n\nexport const formatToFractionalDigits = (value, digits) =>\n  Intl.NumberFormat(undefined, {\n    minimumFractionDigits: digits,\n    maximumFractionDigits: digits,\n  }).format(value);\n\nexport const formatBytesAsMiB = (bytes) => {\n  const mib = bytes / 1024 / 1024;\n  return formatToFractionalDigits(mib, 1);\n};\n\nexport const formatCores = (cores) => formatToFractionalDigits(cores, 3);\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash-es';\nimport * as fuzzy from 'fuzzysearch';\n\nimport { Dropdown, ResourceName } from './';\n\n// https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.10/#envvarsource-v1-core\n//   valueFrom:\n//     fieldRef:\n//       fieldPath: spec.nodeName\n\n//   valueFrom:\n//     secretKeyRef:\n//       name: mysecret\n//       key: username\n\n//   valueFrom:\n//     configMapKeyRef:\n//       name: tectonic-config\n//       key: consoleBaseAddress\n\n//   valueFrom:\n//     resourceFieldRef:\n//       containerName: test-container\n//       resource: requests.cpu\n//       divisor: 1 // 1 is default\n\nconst getSpacer = (configMap, secret) => {\n  const spacerBefore = new Set();\n  return _.isEmpty(configMap) || _.isEmpty(secret) ? spacerBefore : spacerBefore.add(secret);\n};\n\nconst getHeaders = (configMap, secret, serviceAccount) => {\n  const headers = {};\n  if (configMap && !_.isEmpty(configMap)) {\n    headers[configMap] = 'Config Maps';\n  }\n  if (secret && !_.isEmpty(secret)) {\n    headers[secret] = 'Secrets';\n  }\n  if (serviceAccount && !_.isEmpty(serviceAccount)) {\n    headers[serviceAccount] = 'Service Accounts';\n  }\n\n  return headers;\n};\n\nconst getKeys = (keyMap) => {\n  const itemKeys = {};\n  _.mapKeys(keyMap, (value, key) => (itemKeys[key] = key));\n  return itemKeys;\n};\n\nexport const NameKeyDropdownPair = ({\n  name,\n  key,\n  configMaps,\n  secrets,\n  serviceAccounts,\n  onChange,\n  kind,\n  nameTitle,\n  placeholderString,\n  isKeyRef = true,\n}) => {\n  let itemKeys = {};\n  let refProperty;\n  const cmItems = {};\n  const secretItems = {};\n  const saItems = {};\n  const nameAutocompleteFilter = (text, item) => fuzzy(text, item.props.name);\n  const keyAutocompleteFilter = (text, item) => fuzzy(text, item);\n  const keyTitle = _.isEmpty(key) ? 'Select a key' : key;\n  const cmRefProperty = isKeyRef ? 'configMapKeyRef' : 'configMapRef';\n  const secretRefProperty = isKeyRef ? 'secretKeyRef' : 'secretRef';\n  const serviceAccountRefProperty = isKeyRef ? 'serviceAccountKeyRef' : 'serviceAccountRef';\n\n  _.each(configMaps.items, (v) => {\n    cmItems[`${v.metadata.name}:${cmRefProperty}`] = (\n      <ResourceName kind=\"ConfigMap\" name={v.metadata.name} />\n    );\n    if (kind === 'ConfigMap' && _.isEqual(v.metadata.name, name)) {\n      refProperty = cmRefProperty;\n      itemKeys = getKeys(v.data);\n    }\n  });\n  _.each(secrets.items, (v) => {\n    secretItems[`${v.metadata.name}:${secretRefProperty}`] = (\n      <ResourceName kind=\"Secret\" name={v.metadata.name} />\n    );\n    if (kind === 'Secret' && _.isEqual(v.metadata.name, name)) {\n      refProperty = secretRefProperty;\n      itemKeys = getKeys(v.data);\n    }\n  });\n  serviceAccounts &&\n    _.each(serviceAccounts.items, (v) => {\n      saItems[`${v.metadata.name}:${serviceAccountRefProperty}`] = (\n        <ResourceName kind=\"ServiceAccount\" name={v.metadata.name} />\n      );\n      if (kind === 'ServiceAccount' && _.isEqual(v.metadata.name, name)) {\n        refProperty = serviceAccountRefProperty;\n        itemKeys = getKeys(v.data);\n      }\n    });\n\n  const firstConfigMap = _.isEmpty(cmItems) ? {} : Object.keys(cmItems)[0];\n  const firstSecret = _.isEmpty(secretItems) ? {} : Object.keys(secretItems)[0];\n  const firstServiceAccount = saItems && !_.isEmpty(saItems) ? Object.keys(saItems)[0] : {};\n  const headerBefore = getHeaders(firstConfigMap, firstSecret, firstServiceAccount);\n  const spacerBefore = getSpacer(firstConfigMap, firstSecret);\n  const items = _.assign({}, cmItems, secretItems, saItems);\n  return (\n    <>\n      <Dropdown\n        menuClassName=\"value-from__menu dropdown-menu--text-wrap\"\n        className=\"value-from\"\n        autocompleteFilter={nameAutocompleteFilter}\n        autocompletePlaceholder={placeholderString}\n        items={items}\n        selectedKey={name}\n        title={nameTitle}\n        headerBefore={headerBefore}\n        spacerBefore={spacerBefore}\n        onChange={(val) => {\n          const keyValuePair = _.split(val, ':');\n          onChange({\n            [keyValuePair[1]]: isKeyRef\n              ? { name: keyValuePair[0], key: '' }\n              : { name: keyValuePair[0] },\n          });\n        }}\n      />\n      {isKeyRef && (\n        <Dropdown\n          menuClassName=\"value-from__menu dropdown-menu--text-wrap\"\n          className=\"value-from value-from--key\"\n          autocompleteFilter={keyAutocompleteFilter}\n          autocompletePlaceholder=\"Key\"\n          items={itemKeys}\n          selectedKey={key}\n          title={keyTitle}\n          onChange={(val) => onChange({ [refProperty]: { name, key: val } })}\n        />\n      )}\n    </>\n  );\n};\n\nconst FieldRef = ({ data: { fieldPath } }) => (\n  <>\n    <div className=\"pairs-list__value-ro-field\">\n      <input type=\"text\" className=\"pf-c-form-control\" value=\"FieldRef\" disabled />\n    </div>\n    <div className=\"pairs-list__value-ro-field\">\n      <input type=\"text\" className=\"pf-c-form-control\" value={fieldPath} disabled />\n    </div>\n  </>\n);\n\nconst ConfigMapSecretKeyRef = ({\n  data: { name, key },\n  configMaps,\n  secrets,\n  serviceAccounts,\n  onChange,\n  disabled,\n  kind,\n}) => {\n  const placeholderString = 'Config Map or Secret';\n  const nameTitle = _.isEmpty(name) ? (\n    'Select a resource'\n  ) : (\n    <ResourceName kind={kind} name={name} />\n  );\n\n  if (disabled) {\n    return (\n      <>\n        <div className=\"pairs-list__value-ro-field\">\n          <input type=\"text\" className=\"pf-c-form-control\" value={`${name} - ${kind}`} disabled />\n        </div>\n        <div className=\"pairs-list__value-ro-field\">\n          <input type=\"text\" className=\"pf-c-form-control\" value={key} disabled />\n        </div>\n      </>\n    );\n  }\n  return NameKeyDropdownPair({\n    name,\n    key,\n    configMaps,\n    secrets,\n    serviceAccounts,\n    onChange,\n    kind,\n    nameTitle,\n    placeholderString,\n  });\n};\n\nconst ConfigMapSecretRef = ({\n  data: { name, key },\n  configMaps,\n  secrets,\n  serviceAccounts,\n  onChange,\n  disabled,\n  kind,\n}) => {\n  const placeholderString = 'Config Map or Secret';\n  const nameTitle = _.isEmpty(name) ? (\n    'Select a resource'\n  ) : (\n    <ResourceName kind={kind} name={name} />\n  );\n  const isKeyRef = false;\n  const nameString = _.isEmpty(name) ? '' : `${name} - ${kind}`;\n\n  if (disabled) {\n    return (\n      <div className=\"pairs-list__value-ro-field\">\n        <input\n          type=\"text\"\n          className=\"pf-c-form-control\"\n          value={nameString}\n          disabled\n          placeholder=\"config map/secret\"\n        />\n      </div>\n    );\n  }\n  return NameKeyDropdownPair({\n    name,\n    key,\n    configMaps,\n    secrets,\n    serviceAccounts,\n    onChange,\n    kind,\n    nameTitle,\n    placeholderString,\n    isKeyRef,\n  });\n};\n\nconst ResourceFieldRef = ({ data: { containerName, resource } }) => (\n  <>\n    <div className=\"pairs-list__value-ro-field\">\n      <input\n        type=\"text\"\n        className=\"pf-c-form-control value-from\"\n        value={`${containerName} - Resource Field`}\n        disabled\n      />\n    </div>\n    <div className=\"pairs-list__value-ro-field\">\n      <input type=\"text\" className=\"pf-c-form-control value-from\" value={resource} disabled />\n    </div>\n  </>\n);\n\nconst keyStringToComponent = {\n  fieldRef: {\n    component: FieldRef,\n  },\n  secretKeyRef: {\n    component: ConfigMapSecretKeyRef,\n    kind: 'Secret',\n  },\n  configMapKeyRef: {\n    component: ConfigMapSecretKeyRef,\n    kind: 'ConfigMap',\n  },\n  configMapSecretKeyRef: {\n    component: ConfigMapSecretKeyRef,\n  },\n  resourceFieldRef: {\n    component: ResourceFieldRef,\n  },\n  configMapRef: {\n    component: ConfigMapSecretRef,\n    kind: 'ConfigMap',\n  },\n  secretRef: {\n    component: ConfigMapSecretRef,\n    kind: 'Secret',\n  },\n  serviceAccountRef: {\n    component: ConfigMapSecretRef,\n    kind: 'ServiceAccount',\n  },\n  configMapSecretRef: {\n    component: ConfigMapSecretRef,\n  },\n};\n\nexport class ValueFromPair extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.onChangeVal = (...args) => this._onChangeVal(...args);\n  }\n\n  _onChangeVal(value) {\n    const { onChange } = this.props;\n    const e = { target: { value } };\n    return onChange(e);\n  }\n\n  render() {\n    const { pair, configMaps, secrets, serviceAccounts, disabled } = this.props;\n    const valueFromKey = Object.keys(this.props.pair)[0];\n    const componentInfo = keyStringToComponent[valueFromKey];\n    const Component = componentInfo.component;\n\n    return (\n      <Component\n        data={pair[valueFromKey]}\n        configMaps={configMaps}\n        secrets={secrets}\n        serviceAccounts={serviceAccounts}\n        kind={componentInfo.kind}\n        onChange={this.onChangeVal}\n        disabled={disabled}\n      />\n    );\n  }\n}\nValueFromPair.propTypes = {\n  pair: PropTypes.object.isRequired,\n  configMaps: PropTypes.object,\n  secrets: PropTypes.object,\n  onChange: PropTypes.func,\n  disabled: PropTypes.bool,\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\n\nimport { Volume } from '../../module/k8s';\nimport { getVolumeLocation, getVolumeType } from '../../module/k8s/pods';\nimport { ResourceLink } from './resource-link';\n\nexport const VolumeType: React.FC<VolumeTypeProps> = ({ volume, namespace }) => {\n  if (volume) {\n    if (volume.secret) {\n      return <ResourceLink kind=\"Secret\" name={volume.secret.secretName} namespace={namespace} />;\n    }\n\n    if (volume.configMap) {\n      return <ResourceLink kind=\"ConfigMap\" name={volume.configMap.name} namespace={namespace} />;\n    }\n\n    if (volume.persistentVolumeClaim) {\n      return (\n        <ResourceLink\n          kind=\"PersistentVolumeClaim\"\n          name={volume.persistentVolumeClaim.claimName}\n          namespace={namespace}\n        />\n      );\n    }\n  }\n\n  const type = getVolumeType(volume);\n  const loc = _.trim(getVolumeLocation(volume));\n  return type ? (\n    <>\n      {type.label}\n      {loc && (\n        <>\n          {' '}\n          (<span className=\"co-break-word co-select-to-copy\">{loc}</span>)\n        </>\n      )}\n    </>\n  ) : null;\n};\n\nexport type VolumeTypeProps = {\n  volume: Volume;\n  namespace: string;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Base64 } from 'js-base64';\nimport { PasteIcon } from '@patternfly/react-icons';\nimport { Button, AlertVariant } from '@patternfly/react-core';\nimport * as classNames from 'classnames';\n\nimport { K8sResourceKind, k8sGet } from '../../module/k8s';\nimport { ExpandableAlert } from './alerts';\nimport { SectionHeading } from './headings';\nimport { ResourceLink } from './resource-link';\nimport { useAccessReview } from './rbac';\nimport { SecretModel } from '../../models';\nimport { errorModal } from '../modals/error-modal';\n\nconst kubeAPIServerURL = window.SERVER_FLAGS.kubeAPIServerURL || 'https://<api-server>';\nenum TriggerTypes {\n  Bitbucket = 'Bitbucket',\n  ConfigChange = 'ConfigChange',\n  Generic = 'Generic',\n  GitHub = 'GitHub',\n  GitLab = 'GitLab',\n  ImageChange = 'ImageChange',\n}\nconst webhookTriggerTypes = new Set<TriggerTypes>([\n  TriggerTypes.Bitbucket,\n  TriggerTypes.Generic,\n  TriggerTypes.GitHub,\n  TriggerTypes.GitLab,\n]);\nconst getTriggerProperty = (trigger: WebhookTrigger) => trigger.type.toLowerCase();\n\nconst getTableColumnClasses = (canGetSecret: boolean) => {\n  if (canGetSecret) {\n    return [\n      classNames('col-lg-2', 'col-md-4', 'col-sm-4', 'col-xs-6'),\n      classNames('col-lg-6', 'hidden-md', 'hidden-sm', 'hidden-xs', 'co-break-all'),\n      classNames('col-lg-2', 'col-md-4 ', 'col-sm-4', 'hidden-xs'),\n      classNames('col-lg-2', 'col-md-4', 'col-sm-4', 'col-xs-6'),\n    ];\n  }\n  return [\n    classNames('col-sm-2'),\n    classNames('col-sm-7', 'co-break-all'),\n    classNames('col-sm-3', 'hidden-xs'),\n    classNames('hidden'),\n  ];\n};\n\nexport const WebhookTriggers: React.FC<WebhookTriggersProps> = (props) => {\n  const { resource } = props;\n  const { name, namespace } = resource.metadata;\n  const { triggers } = resource.spec;\n  const canGetSecret = useAccessReview({\n    group: SecretModel.apiGroup,\n    resource: SecretModel.plural,\n    verb: 'get',\n    namespace,\n  });\n  const tableColumnClasses = getTableColumnClasses(canGetSecret);\n  const [webhookSecrets, setWebhookSecrets] = React.useState<K8sResourceKind[]>([]);\n  const [webhookTriggers, setWebhookTriggers] = React.useState<WebhookTrigger[]>([]);\n  const [secretNames, setSecretNames] = React.useState<string[]>([]);\n  const [secretErrors, setSecretErrors] = React.useState<string[]>([]);\n  const [isLoaded, setLoaded] = React.useState(false);\n\n  React.useEffect(() => {\n    setWebhookTriggers((previousTriggers) => {\n      const newTriggers = _.filter(triggers, ({ type }) => webhookTriggerTypes.has(type));\n      return _.isEqual(previousTriggers, newTriggers) ? previousTriggers : newTriggers;\n    });\n  }, [triggers]);\n\n  React.useEffect(() => {\n    const newSecretNames: string[] = _.uniq(\n      webhookTriggers.reduce((acc: string[], webhook: WebhookTrigger): string[] => {\n        const triggerProperty = getTriggerProperty(webhook);\n        const secretName = _.get(webhook, [triggerProperty, 'secretReference', 'name']);\n        return secretName ? [...acc, secretName] : acc;\n      }, []),\n    );\n    setSecretNames(newSecretNames);\n  }, [webhookTriggers]);\n\n  React.useEffect(() => {\n    if (!canGetSecret) {\n      return;\n    }\n    let errors: string[] = [];\n    Promise.all(\n      secretNames.map(\n        (webhookName: string): Promise<K8sResourceKind> => {\n          return k8sGet(SecretModel, webhookName, namespace).then(\n            (secret) => secret,\n            (error) => {\n              errors = [...errors, `Error: ${error.message}`];\n              return null;\n            },\n          );\n        },\n      ),\n    ).then((secrets) => {\n      setSecretErrors(errors);\n      setWebhookSecrets(_.compact(secrets));\n      setLoaded(true);\n    });\n  }, [secretNames, isLoaded, canGetSecret, namespace]);\n\n  if (_.isEmpty(webhookTriggers)) {\n    return null;\n  }\n\n  const getWebhookURL = (trigger: WebhookTrigger, secret?: string) => {\n    const triggerProperty = getTriggerProperty(trigger);\n    return `${kubeAPIServerURL}/apis/build.openshift.io/v1/namespaces/${namespace}/buildconfigs/${name}/webhooks/${\n      secret ? secret : '<secret>'\n    }/${triggerProperty}`;\n  };\n\n  const getSecretReference = (trigger: WebhookTrigger) => {\n    const triggerProperty = getTriggerProperty(trigger);\n    const secretName = _.get(trigger, [triggerProperty, 'secretReference', 'name']);\n    if (!secretName) {\n      return <span className=\"text-muted\">No secret</span>;\n    }\n    const webhookSecret: K8sResourceKind = webhookSecrets.find(\n      (secret: K8sResourceKind) => secret.metadata.name === secretName,\n    );\n    if (!webhookSecret) {\n      return secretName;\n    }\n    return (\n      <ResourceLink kind=\"Secret\" name={secretName} namespace={namespace} title={secretName} />\n    );\n  };\n\n  const copyWebhookToClipboard = (trigger: WebhookTrigger) => {\n    const triggerProperty = getTriggerProperty(trigger);\n\n    // In case of obsolete `secret` field on the trigger.\n    // https://github.com/openshift/api/blob/master/build/v1/types.go#L950\n    if (_.has(trigger, [triggerProperty, 'secret'])) {\n      const webhookSecret = _.get(trigger, [triggerProperty, 'secret']);\n      const url = getWebhookURL(trigger, webhookSecret);\n      navigator.clipboard.writeText(url);\n      return;\n    }\n\n    const secretName = _.get(trigger, [triggerProperty, 'secretReference', 'name']);\n    const webhookSecret: K8sResourceKind = webhookSecrets.find(\n      (secret: K8sResourceKind) => secret.metadata.name === secretName,\n    );\n    if (!_.has(webhookSecret, 'data.WebHookSecretKey')) {\n      errorModal({\n        error: `Secret referenced in the ${triggerProperty} webhook trigger does not contain 'WebHookSecretKey' key. Webhook trigger won’t work due to the invalid secret reference`,\n      });\n      return;\n    }\n    const webhookSecretValue = Base64.decode(webhookSecret.data.WebHookSecretKey);\n    const url = getWebhookURL(trigger, webhookSecretValue);\n    navigator.clipboard.writeText(url);\n  };\n\n  const getClipboardButton = (trigger: WebhookTrigger) => {\n    const triggerProperty = getTriggerProperty(trigger);\n    const plainSecret = _.get(trigger, [triggerProperty, 'secret']);\n    const secretReference = _.get(trigger, [triggerProperty, 'secretReference', 'name']);\n    const webhookSecret: K8sResourceKind = webhookSecrets.find(\n      (secret: K8sResourceKind) => secret.metadata.name === secretReference,\n    );\n    return webhookSecret || plainSecret ? (\n      <Button variant=\"link\" type=\"button\" onClick={() => copyWebhookToClipboard(trigger)}>\n        <PasteIcon />\n        &nbsp;Copy URL with Secret\n      </Button>\n    ) : null;\n  };\n\n  return (\n    <div className=\"co-m-pane__body\">\n      {!_.isEmpty(secretErrors) && (\n        <ExpandableAlert\n          variant={AlertVariant.warning}\n          alerts={_.map(secretErrors, (error, i) => (\n            <div className=\"co-pre-line\" key={i}>\n              {error}\n            </div>\n          ))}\n        />\n      )}\n      <SectionHeading text=\"Webhooks\" />\n      <div className=\"co-table-container\">\n        <table className=\"table table--layout-fixed\">\n          <colgroup>\n            <col className={tableColumnClasses[0]} />\n            <col className={tableColumnClasses[1]} />\n            <col className={tableColumnClasses[2]} />\n            <col className={tableColumnClasses[3]} />\n          </colgroup>\n          <thead>\n            <tr>\n              <th className={tableColumnClasses[0]}>Type</th>\n              <th className={tableColumnClasses[1]}>Webhook URL</th>\n              <th className={tableColumnClasses[2]}>Secret</th>\n              <th className={tableColumnClasses[3]} />\n            </tr>\n          </thead>\n          <tbody>\n            {_.map(webhookTriggers, (trigger, i) => {\n              const webhookURL = getWebhookURL(trigger);\n              const secretReference = getSecretReference(trigger);\n              const clipboardButton = getClipboardButton(trigger);\n              return (\n                <tr key={i}>\n                  <td className={tableColumnClasses[0]}>{trigger.type}</td>\n                  <td className={tableColumnClasses[1]}>{webhookURL || '-'}</td>\n                  <td className={tableColumnClasses[2]}>{secretReference}</td>\n                  <td className={tableColumnClasses[3]}>{clipboardButton}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport type WebhookTriggersProps = {\n  resource: K8sResourceKind;\n};\n\nexport type WebhookTrigger = {\n  type: string;\n  [key: string]: any;\n};\n\nWebhookTriggers.displayName = 'WebhookTriggers';\n","import * as React from 'react';\nimport { Alert, AlertActionLink } from '@patternfly/react-core';\n\nimport { K8sKind, k8sPatch, K8sResourceKind } from '../../module/k8s/index';\nimport { errorModal } from '../modals/index';\n\nexport const togglePaused = (model: K8sKind, obj: K8sResourceKind) => {\n  const patch = [\n    {\n      path: '/spec/paused',\n      op: 'add',\n      value: !obj.spec.paused,\n    },\n  ];\n\n  return k8sPatch(model, obj, patch);\n};\n\nexport const WorkloadPausedAlert = ({ model, obj }) => {\n  return (\n    <Alert\n      isInline\n      className=\"co-alert\"\n      variant=\"info\"\n      title={<>{obj.metadata.name} is paused</>}\n      action={\n        <AlertActionLink\n          onClick={() =>\n            togglePaused(model, obj).catch((err) => errorModal({ error: err.message }))\n          }\n        >\n          Resume Rollouts\n        </AlertActionLink>\n      }\n    >\n      This will stop any new rollouts or triggers from running until resumed.\n    </Alert>\n  );\n};\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\n\nimport { ContainerSpec, K8sKind, K8sResourceKind, K8sResourceKindReference, PodKind, PodTemplate, Volume, VolumeMount } from '../module/k8s';\nimport { asAccessReview, EmptyBox, Kebab, KebabOption, ResourceIcon, SectionHeading, VolumeType } from './utils';\nimport { Table } from './factory';\nimport { sortable } from '@patternfly/react-table';\nimport { removeVolumeModal } from './modals';\nimport { connectToModel } from '../kinds';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\n\nconst removeVolume = (kind: K8sKind, obj: K8sResourceKind, volume: RowVolumeData): KebabOption => {\n  const { t } = useTranslation();\n  return {\n    label: t('COMMON:MSG_DETAILS_TABDETAILS_VOLUMES_TABLEHEADER_8'),\n    callback: () =>\n      removeVolumeModal({\n        kind,\n        resource: obj,\n        volume,\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  };\n};\n\nconst menuActions = [removeVolume];\n\nconst getPodTemplate = (resource: K8sResourceKind): PodTemplate => {\n  return resource.kind === 'Pod' ? (resource as PodKind) : resource.spec.template;\n};\n\nconst anyContainerWithVolumeMounts = (containers: ContainerSpec[]) => {\n  return !!_.findKey(containers, 'volumeMounts');\n};\n\nconst getRowVolumeData = (resource: K8sResourceKind): RowVolumeData[] => {\n  const pod: PodTemplate = getPodTemplate(resource);\n  if (_.isEmpty(pod.spec.volumes) && !anyContainerWithVolumeMounts(pod.spec.containers)) {\n    return [];\n  }\n\n  const data: RowVolumeData[] = [];\n  const volumes = (pod.spec.volumes || []).reduce((p, v: Volume) => {\n    p[v.name] = v;\n    return p;\n  }, {});\n\n  _.forEach(pod.spec.containers, (c: ContainerSpec) => {\n    _.forEach(c.volumeMounts, (v: VolumeMount) => {\n      data.push({\n        name: v.name,\n        readOnly: !!v.readOnly,\n        volumeDetail: volumes[v.name],\n        container: c.name,\n        mountPath: v.mountPath,\n        subPath: v.subPath,\n        resource,\n      });\n    });\n  });\n  return data;\n};\n\nconst ContainerLink: React.FC<ContainerLinkProps> = ({ name, pod }) => (\n  <span className=\"co-resource-item co-resource-item--inline\">\n    <ResourceIcon kind=\"Container\" />\n    <Link to={`/k8s/ns/${pod.metadata.namespace}/pods/${pod.metadata.name}/containers/${name}`}>{name}</Link>\n  </span>\n);\nContainerLink.displayName = 'ContainerLink';\n\nconst volumeRowColumnClasses = [classNames('col-lg-2', 'col-md-3', 'col-sm-4', 'col-xs-5'), classNames('col-lg-2', 'col-md-3', 'col-sm-4', 'col-xs-7'), classNames('col-lg-2', 'col-md-2', 'col-sm-4', 'hidden-xs'), classNames('col-lg-2', 'col-md-2', 'hidden-sm', 'hidden-xs'), classNames('col-lg-2', 'col-md-2', 'hidden-sm', 'hidden-xs'), classNames('col-lg-2', 'hidden-md', 'hidden-sm', 'hidden-xs'), Kebab.columnClass];\n\nconst VolumesTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_DETAILS_TABDETAILS_VOLUMES_TABLEHEADER_2'),\n      sortField: 'name',\n      transforms: [sortable],\n      props: { className: volumeRowColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_DETAILS_TABDETAILS_VOLUMES_TABLEHEADER_3'),\n      sortField: 'mountPath',\n      transforms: [sortable],\n      props: { className: volumeRowColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_DETAILS_TABDETAILS_VOLUMES_TABLEHEADER_4'),\n      sortField: 'subPath',\n      transforms: [sortable],\n      props: { className: volumeRowColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_DETAILS_TABDETAILS_VOLUMES_TABLEHEADER_5'),\n      props: { className: volumeRowColumnClasses[3] },\n    },\n    {\n      title: t('COMMON:MSG_DETAILS_TABDETAILS_VOLUMES_TABLEHEADER_6'),\n      sortField: 'readOnly',\n      transforms: [sortable],\n      props: { className: volumeRowColumnClasses[4] },\n    },\n    {\n      title: t('COMMON:MSG_DETAILS_TABDETAILS_VOLUMES_TABLEHEADER_7'),\n      sortField: 'container',\n      transforms: [sortable],\n      props: { className: volumeRowColumnClasses[5] },\n    },\n    {\n      title: '',\n      props: { className: volumeRowColumnClasses[6] },\n    },\n  ];\n};\nVolumesTableHeader.displayName = 'VolumesTableHeader';\n\nconst VolumesTableRows = ({ componentProps: { data } }) => {\n  return _.map(data, (volume: RowVolumeData) => {\n    const { container, mountPath, name, readOnly, resource, subPath, volumeDetail } = volume;\n    const pod = getPodTemplate(resource);\n    return [\n      {\n        title: name,\n        props: {\n          className: volumeRowColumnClasses[0],\n          'data-test-volume-name-for': name,\n        },\n      },\n      {\n        title: mountPath,\n        props: {\n          classname: volumeRowColumnClasses[1],\n          'data-test-mount-path-for': name,\n        },\n      },\n      {\n        title: subPath || <span className=\"text-muted\">No subpath</span>,\n        props: {\n          classname: volumeRowColumnClasses[2],\n        },\n      },\n      {\n        title: <VolumeType volume={volumeDetail} namespace={resource.metadata.namespace} />,\n        props: {\n          classname: volumeRowColumnClasses[3],\n        },\n      },\n      {\n        title: readOnly ? 'Read-only' : 'Read/Write',\n        props: {\n          classname: volumeRowColumnClasses[4],\n        },\n      },\n      {\n        title: _.get(pod, 'kind') === 'Pod' ? <ContainerLink name={container} pod={pod as PodKind} /> : container,\n        props: {\n          classname: volumeRowColumnClasses[5],\n        },\n      },\n      {\n        title: <VolumeKebab actions={menuActions} kind={resource.kind} resource={resource} rowVolumeData={volume} />,\n        props: {\n          classname: volumeRowColumnClasses[6],\n        },\n      },\n    ];\n  });\n};\n\nexport const VolumesTable = props => {\n  const { t } = useTranslation();\n  const { resource, ...tableProps } = props;\n  const data: RowVolumeData[] = getRowVolumeData(resource);\n  const pod: PodTemplate = getPodTemplate(resource);\n  return (\n    <>\n      {props.heading && <SectionHeading text={props.heading} />}\n      {_.isEmpty(pod.spec.volumes) && !anyContainerWithVolumeMounts(pod.spec.containers) ? <EmptyBox label={t('COMMON:MSG_DETAILS_TABDETAILS_VOLUMES_TABLEHEADER_1')} /> : <Table {...tableProps} aria-label=\"Volumes\" loaded={true} label={props.heading} data={data} Header={VolumesTableHeader.bind(null, t)} Rows={VolumesTableRows} virtualize={false} />}\n    </>\n  );\n};\n\nVolumesTable.displayName = 'VolumesTable';\n\nconst VolumeKebab = connectToModel((props: VolumeKebabProps) => {\n  const { actions, kindObj, resource, isDisabled, rowVolumeData } = props;\n  if (!kindObj || kindObj.kind === 'Pod') {\n    return null;\n  }\n  const options = actions.map(b => b(kindObj, resource, rowVolumeData));\n  return <Kebab options={options} isDisabled={isDisabled !== undefined ? isDisabled : _.get(resource.metadata, 'deletionTimestamp')} />;\n});\n\ntype VolumeKebabAction = (kind: K8sKind, obj: K8sResourceKind, rowVolumeData: RowVolumeData) => KebabOption;\ntype VolumeKebabProps = {\n  kindObj: K8sKind;\n  actions: VolumeKebabAction[];\n  kind: K8sResourceKindReference;\n  resource: K8sResourceKind;\n  isDisabled?: boolean;\n  rowVolumeData: RowVolumeData;\n};\n\nexport type RowVolumeData = {\n  name: string;\n  readOnly: boolean;\n  volumeDetail: Volume;\n  container: string;\n  mountPath: string;\n  subPath?: string;\n  resource: K8sResourceKind;\n};\n\ntype ContainerLinkProps = {\n  pod: PodKind;\n  name: string;\n};\n","export const getAccessToken = function() {\n  return sessionStorage.getItem('accessToken');\n};\n\nexport const getId = function() {\n  return sessionStorage.getItem('id');\n};\n\nexport const getUserGroup = function() {\n  let usergroups = getParsedAccessToken().group;\n  let result = '';\n  if (usergroups?.length > 0) {\n    result = '&' + usergroups.map(cur => `userGroup=${cur}`).join('&');\n  }\n  return result;\n};\n\nexport const setAccessToken = function(at) {\n  sessionStorage.setItem('accessToken', at);\n  return;\n};\n\nexport const setId = function(id) {\n  sessionStorage.setItem('id', id);\n  return;\n};\n\n// 로그아웃 시 사용\nexport const resetLoginState = function() {\n  sessionStorage.clear();\n  return;\n};\n\nexport const getParsedAccessToken = function() {\n  const token = getAccessToken();\n  var base64Url = token.split('.')[1];\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  var jsonPayload = decodeURIComponent(\n    atob(base64)\n      .split('')\n      .map(function(c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      })\n      .join(''),\n  );\n\n  return JSON.parse(jsonPayload);\n};\n","import Keycloak from 'keycloak-js';\n\nconst keycloak = new Keycloak({\n    realm: window.SERVER_FLAGS.KeycloakRealm,\n    url: window.SERVER_FLAGS.KeycloakAuthURL,\n    clientId: window.SERVER_FLAGS.KeycloakClientId,\n});\n\nkeycloak.logout = keycloak.logout.bind(keycloak, { redirectUri: document.location.origin });\n\nexport default keycloak;\n","import * as React from 'react';\nimport { CogsIcon } from '@patternfly/react-icons';\nimport { Perspective } from '@console/plugin-sdk';\nimport { TFunction } from 'i18next';\n\n/* 임시 */\n// TODO:  싱글 클러스터 증가시 동적 생성하는 방법 확인\n//        getK8sLandingPageURL, getImportRedirectURL 하는 상황 파악 및 수정\nexport const getPerspectives: (t?: TFunction) => Perspective[] = (t?: TFunction) => {\n  return [\n    {\n      type: 'Perspective',\n      properties: {\n        id: 'mc',\n        name: t ? t('COMMON:MSG_LNB_MENU_CONSOLE_LIST_2') : 'Multi-Cluster',\n        icon: <CogsIcon />,\n        default: true,\n        getLandingPageURL: flags => '/k8s/all-namespaces/clustermanagers',\n        getK8sLandingPageURL: flags => '/k8s/all-namespaces/clustermanagers',\n        getImportRedirectURL: project => `/k8s/all-namespaces/projects/${project}/workloads`,\n      },\n    },\n    {\n      type: 'Perspective',\n      properties: {\n        id: 'master',\n        name: t ? t('COMMON:MSG_LNB_MENU_CONSOLE_LIST_3') : 'Master-Cluster',\n        icon: <CogsIcon />,\n        getLandingPageURL: flags => (localStorage.getItem('flag/first-time-login') ? '/master/dashboards' : '/welcome'),\n        getK8sLandingPageURL: flags => (localStorage.getItem('flag/first-time-login') ? '/master/dashboards' : '/welcome'),\n        getImportRedirectURL: project => `/k8s/cluster/projects/${project}/workloads`,\n      },\n    },\n    {\n      type: 'Perspective',\n      properties: {\n        id: 'hc',\n        name: t ? t('COMMON:MSG_LNB_MENU_CONSOLE_LIST_1') : 'Single-Cluster',\n        icon: <CogsIcon />,\n        getLandingPageURL: flags => (localStorage.getItem('flag/first-time-login') ? '/single/dashboards' : '/welcome'),\n        getK8sLandingPageURL: flags => (localStorage.getItem('flag/first-time-login') ? '/single/dashboards' : '/welcome'),\n        getImportRedirectURL: project => `/k8s/cluster/projects/${project}/workloads`,\n      },\n    },\n  ];\n};\n","module.exports = __webpack_public_path__ + \"assets/logo_symbol_text.svg\";","module.exports = __webpack_public_path__ + \"assets/helm.svg\";","module.exports = __webpack_public_path__ + \"assets/restricted-sign.svg\";","import * as _ from 'lodash-es';\nimport { connect } from 'react-redux';\nimport { match } from 'react-router-dom';\n\nimport {\n  K8sKind,\n  K8sResourceKindReference,\n  kindForReference,\n  GroupVersionKind,\n  isGroupVersionKind,\n  allModels,\n  getGroupVersionKind,\n} from './module/k8s';\nimport { RootState } from './redux';\n\nexport const connectToModel = connect(\n  (state: RootState, props: { kind: K8sResourceKindReference } & any) => {\n    const kind: string = props.kind || _.get(props, 'match.params.plural');\n\n    const kindObj: K8sKind = !_.isEmpty(kind)\n      ? state.k8s.getIn(['RESOURCES', 'models', kind]) ||\n        state.k8s.getIn(['RESOURCES', 'models', kindForReference(kind)])\n      : null;\n\n    return { kindObj, kindsInFlight: state.k8s.getIn(['RESOURCES', 'inFlight']) } as any;\n  },\n);\n\ntype WithPluralProps = {\n  kindObj?: K8sKind;\n  modelRef?: K8sResourceKindReference;\n  kindsInFlight?: boolean;\n};\n\nexport type ConnectToPlural = <P extends WithPluralProps>(\n  C: React.ComponentType<P>,\n) => React.ComponentType<Omit<P, keyof WithPluralProps>> & {\n  WrappedComponent: React.ComponentType<P>;\n};\n\n/**\n * @deprecated TODO(alecmerdler): `plural` is not a unique lookup key, remove uses of this.\n * FIXME(alecmerdler): Not returning correctly typed `WrappedComponent`\n */\nexport const connectToPlural: ConnectToPlural = connect(\n  (\n    state: RootState,\n    props: {\n      plural?: GroupVersionKind | string;\n      match: match<{ plural: GroupVersionKind | string }>;\n    },\n  ) => {\n    const plural = props.plural || _.get(props, 'match.params.plural');\n\n    const groupVersionKind = getGroupVersionKind(plural);\n\n    let kindObj: K8sKind = null;\n    if (groupVersionKind) {\n      const [group, version, kind] = groupVersionKind;\n      kindObj = allModels().find((model) => {\n        return model.apiGroup === group && model.apiVersion === version && model.kind === kind;\n      });\n\n      if (!kindObj) {\n        kindObj = state.k8s.getIn(['RESOURCES', 'models']).get(plural);\n      }\n    } else {\n      kindObj = allModels().find(\n        (model) => model.plural === plural && (!model.crd || model.legacyPluralURL),\n      );\n    }\n\n    const modelRef = isGroupVersionKind(plural) ? plural : _.get(kindObj, 'kind');\n\n    return { kindObj, modelRef, kindsInFlight: state.k8s.getIn(['RESOURCES', 'inFlight']) };\n  },\n);\n","import { K8sKind } from '../../module/k8s';\n\nexport const HyperClusterResourceModel: K8sKind = {\n  label: 'Cluster',\n  labelPlural: 'Clusters',\n  apiVersion: 'v1',\n  apiGroup: 'hyper.multi.tmax.io',\n  plural: 'hyperclusterresources',\n  abbr: 'C',\n  kind: 'HyperClusterResource',\n  id: 'hyperclusterresource',\n  namespaced: false,\n};\n\nexport const ClusterManagerModel: K8sKind = {\n  label: 'Cluster',\n  labelPlural: 'Clusters',\n  apiVersion: 'v1alpha1',\n  apiGroup: 'cluster.tmax.io',\n  plural: 'clustermanagers',\n  abbr: 'CM',\n  kind: 'ClusterManager',\n  id: 'clustermanager',\n  namespaced: true,\n};\n\nexport const ClusterClaimModel: K8sKind = {\n  label: 'ClusterClaim',\n  labelPlural: 'Clusters Claims',\n  apiVersion: 'v1alpha1',\n  apiGroup: 'claim.tmax.io',\n  plural: 'clusterclaims',\n  abbr: 'CC',\n  kind: 'ClusterClaim',\n  id: 'clusterclaim',\n  namespaced: true,\n};\n\nexport const SignerPolicyModel: K8sKind = {\n  kind: 'SignerPolicy',\n  label: 'Signer Policy',\n  labelPlural: 'Signer Policies',\n  apiGroup: 'tmax.io',\n  apiVersion: 'v1',\n  abbr: 'SP',\n  namespaced: true,\n  crd: false,\n  id: 'signerpolicy',\n  plural: 'signerpolicies',\n};\n\nexport const ImageReplicateModel: K8sKind = {\n  kind: 'ImageReplicate',\n  label: 'Image Replicate',\n  labelPlural: 'Image Replicates',\n  apiGroup: 'tmax.io',\n  apiVersion: 'v1',\n  abbr: 'IR',\n  namespaced: true,\n  crd: false,\n  id: 'imagereplicate',\n  plural: 'imagereplicates',\n};\n\nexport const PodSecurityPolicyModel: K8sKind = {\n  kind: 'PodSecurityPolicy',\n  namespaced: false,\n  label: 'Pod Security Policy',\n  plural: 'podsecuritypolicies',\n  apiVersion: 'v1beta1',\n  abbr: 'PSP',\n  apiGroup: 'policy',\n  labelPlural: 'Pod Security Policies',\n  id: 'podsecuritypolicie',\n  crd: false,\n};\n\nexport const FederatedConfigMapModel: K8sKind = {\n  label: 'Federated Config Map',\n  labelPlural: 'Federated Config Maps',\n  apiVersion: 'v1beta1',\n  apiGroup: 'types.kubefed.io',\n  plural: 'federatedconfigmaps',\n  abbr: 'FCM',\n  kind: 'FederatedConfigMap',\n  id: 'federatedconfigmap',\n  namespaced: true,\n};\n\nexport const FederatedDeploymentModel: K8sKind = {\n  label: 'Federated Deployment',\n  labelPlural: 'Federated Deployments',\n  apiVersion: 'v1beta1',\n  apiGroup: 'types.kubefed.io',\n  plural: 'federateddeployments',\n  abbr: 'FDEPLOY',\n  kind: 'FederatedDeployment',\n  id: 'federateddeployment',\n  namespaced: true,\n};\n\nexport const FederatedIngressModel: K8sKind = {\n  label: 'Federated Ingress',\n  labelPlural: 'Federated Ingresses',\n  apiVersion: 'v1beta1',\n  apiGroup: 'types.kubefed.io',\n  plural: 'federatedingresses',\n  abbr: 'FING',\n  kind: 'FederatedIngress',\n  id: 'federatedingress',\n  namespaced: true,\n};\n\nexport const FederatedJobModel: K8sKind = {\n  label: 'Federated Job',\n  labelPlural: 'Federated Jobs',\n  apiVersion: 'v1beta1',\n  apiGroup: 'types.kubefed.io',\n  plural: 'federatedjobs',\n  abbr: 'FJ',\n  kind: 'FederatedJob',\n  id: 'federatedjob',\n  namespaced: true,\n};\n\nexport const FederatedNamespaceModel: K8sKind = {\n  label: 'Federated Namespace',\n  labelPlural: 'Federated Namespaces',\n  apiVersion: 'v1beta1',\n  apiGroup: 'types.kubefed.io',\n  plural: 'federatednamespaces',\n  abbr: 'FNS',\n  kind: 'FederatedNamespace',\n  id: 'federatednamespace',\n  namespaced: true,\n};\n\nexport const FederatedReplicaSetModel: K8sKind = {\n  label: 'Federated Replica Set',\n  labelPlural: 'Federated Replica Sets',\n  apiVersion: 'v1beta1',\n  apiGroup: 'types.kubefed.io',\n  plural: 'federatedreplicasets',\n  abbr: 'FRS',\n  kind: 'FederatedReplicaSet',\n  id: 'federatedreplicaset',\n  namespaced: true,\n};\n\nexport const FederatedSecretModel: K8sKind = {\n  label: 'Federated Secret',\n  labelPlural: 'Federated Secrets',\n  apiVersion: 'v1beta1',\n  apiGroup: 'types.kubefed.io',\n  plural: 'federatedsecrets',\n  abbr: 'FS',\n  kind: 'FederatedSecret',\n  id: 'federatedsecret',\n  namespaced: true,\n};\n\nexport const FederatedServiceModel: K8sKind = {\n  label: 'Federated Service',\n  labelPlural: 'Federated Services',\n  apiVersion: 'v1beta1',\n  apiGroup: 'types.kubefed.io',\n  plural: 'federatedservices',\n  abbr: 'FSVC',\n  kind: 'FederatedService',\n  id: 'federatedservice',\n  namespaced: true,\n};\n\nexport const FederatedPodModel: K8sKind = {\n  label: 'Federated Pod',\n  labelPlural: 'Federated Pods',\n  apiVersion: 'v1beta1',\n  apiGroup: 'types.kubefed.io',\n  plural: 'federatedpods',\n  abbr: 'FPO',\n  kind: 'FederatedPod',\n  id: 'federatedpod',\n  namespaced: true,\n};\n\nexport const FederatedHPAModel: K8sKind = {\n  label: 'Federated Horizontal Pod Autoscaler',\n  labelPlural: 'Federated Horizontal Pod Autoscalers',\n  apiVersion: 'v1beta1',\n  apiGroup: 'types.kubefed.io',\n  plural: 'federatedhorizontalpodautoscalers',\n  abbr: 'FHPA',\n  kind: 'FederatedHorizontalPodAutoscaler',\n  id: 'federatedhorizontalpodautoscaler',\n  namespaced: true,\n};\n\nexport const FederatedDaemonSetModel: K8sKind = {\n  label: 'Federated Daemon Set',\n  labelPlural: 'Federated Daemon Sets',\n  apiVersion: 'v1beta1',\n  apiGroup: 'types.kubefed.io',\n  plural: 'federateddaemonsets',\n  abbr: 'FDS',\n  kind: 'FederatedDaemonSet',\n  id: 'federateddaemonset',\n  namespaced: true,\n};\n\nexport const FederatedStatefulSetModel: K8sKind = {\n  label: 'Federated Stateful Set',\n  labelPlural: 'Federated Stateful Sets',\n  apiVersion: 'v1beta1',\n  apiGroup: 'types.kubefed.io',\n  plural: 'federatedstatefulsets',\n  abbr: 'FSTS',\n  kind: 'FederatedStatefulSet',\n  id: 'federatedstatefulset',\n  namespaced: true,\n};\n\nexport const FederatedCronJobModel: K8sKind = {\n  label: 'Federated Cron Job',\n  labelPlural: 'Federated Cron Jobs',\n  apiVersion: 'v1beta1',\n  apiGroup: 'types.kubefed.io',\n  plural: 'federatedcronjobs',\n  abbr: 'FCJ',\n  kind: 'FederatedCronJob',\n  id: 'federatedcronjob',\n  namespaced: true,\n};\n\nexport const RegistryModel: K8sKind = {\n  kind: 'Registry',\n  namespaced: true,\n  label: 'Registry',\n  plural: 'registries',\n  apiVersion: 'v1',\n  abbr: 'RG',\n  apiGroup: 'tmax.io',\n  labelPlural: 'Registries',\n  id: 'registry',\n  crd: false,\n};\n\nexport const ExternalRegistryModel: K8sKind = {\n  kind: 'ExternalRegistry',\n  namespaced: true,\n  label: 'External Registry',\n  plural: 'externalregistries',\n  apiVersion: 'v1',\n  abbr: 'ERG',\n  apiGroup: 'tmax.io',\n  labelPlural: 'External Registries',\n  id: 'externalregistry',\n  crd: false,\n};\n\nexport const RepositoryModel: K8sKind = {\n  kind: 'Repository',\n  namespaced: true,\n  label: 'Repository',\n  plural: 'repositories',\n  apiVersion: 'v1',\n  abbr: 'RP',\n  apiGroup: 'tmax.io',\n  labelPlural: 'Repositories',\n  id: 'repository',\n  crd: false,\n};\n\nexport const NotaryModel: K8sKind = {\n  kind: 'Notary',\n  namespaced: true,\n  label: 'Notary',\n  plural: 'notaries',\n  apiVersion: 'v1',\n  abbr: 'N',\n  apiGroup: 'tmax.io',\n  labelPlural: 'Notaries',\n  id: 'notary',\n  crd: false,\n};\n\nexport const ImageModel: K8sKind = {\n  label: 'Image',\n  apiVersion: 'v1',\n  apiGroup: 'tmax.io',\n  plural: 'images',\n  abbr: 'I',\n  namespaced: true,\n  kind: 'Image',\n  id: 'image',\n  labelPlural: 'Images',\n  crd: false,\n};\n\nexport const ImageSignerModel: K8sKind = {\n  label: 'Image Signer',\n  apiVersion: 'v1',\n  apiGroup: 'tmax.io',\n  plural: 'imagesigners',\n  abbr: 'IS',\n  namespaced: false,\n  kind: 'ImageSigner',\n  id: 'imagesigner',\n  labelPlural: 'Image Signers',\n  crd: false,\n};\n\nexport const ImageSignRequestModel: K8sKind = {\n  label: 'Image Sign Request',\n  apiVersion: 'v1',\n  apiGroup: 'tmax.io',\n  plural: 'imagesignrequests',\n  abbr: 'ISR',\n  namespaced: true,\n  kind: 'ImageSignRequest',\n  id: 'imagesignrequest',\n  labelPlural: 'Image Sign Requests',\n  crd: false,\n};\nexport const ImageScanRequestModel: K8sKind = {\n  label: 'Image Scan Request',\n  apiVersion: 'v1',\n  apiGroup: 'tmax.io',\n  plural: 'imagescanrequests',\n  abbr: 'ISR',\n  namespaced: true,\n  kind: 'ImageScanRequest',\n  id: 'imagescanrequest',\n  labelPlural: 'Image Scan Requests',\n  crd: false,\n};\n\nexport const TaskModel: K8sKind = {\n  kind: 'Task',\n  namespaced: true,\n  label: 'Task',\n  plural: 'tasks',\n  apiVersion: 'v1beta1',\n  abbr: 'TK',\n  apiGroup: 'tekton.dev',\n  labelPlural: 'Tasks',\n  id: 'task',\n  crd: false,\n};\n\nexport const ClusterTaskModel: K8sKind = {\n  kind: 'ClusterTask',\n  namespaced: false,\n  label: 'ClusterTask',\n  plural: 'clustertasks',\n  apiVersion: 'v1beta1',\n  abbr: 'CTK',\n  apiGroup: 'tekton.dev',\n  labelPlural: 'Cluster Tasks',\n  id: 'clustertask',\n  crd: false,\n};\n\nexport const TaskRunModel: K8sKind = {\n  kind: 'TaskRun',\n  namespaced: true,\n  label: 'Task Run',\n  plural: 'taskruns',\n  apiVersion: 'v1beta1',\n  abbr: 'TR',\n  apiGroup: 'tekton.dev',\n  labelPlural: 'Task Runs',\n  id: 'taskrun',\n  crd: false,\n};\n\nexport const PipelineModel: K8sKind = {\n  kind: 'Pipeline',\n  namespaced: true,\n  label: 'Pipeline',\n  plural: 'pipelines',\n  apiVersion: 'v1beta1',\n  abbr: 'P',\n  apiGroup: 'tekton.dev',\n  labelPlural: 'Pipelines',\n  id: 'pipeline',\n  crd: false,\n};\n\nexport const PipelineRunModel: K8sKind = {\n  kind: 'PipelineRun',\n  namespaced: true,\n  label: 'Pipeline Run',\n  plural: 'pipelineruns',\n  apiVersion: 'v1beta1',\n  abbr: 'PR',\n  apiGroup: 'tekton.dev',\n  labelPlural: 'Pipeline Runs',\n  id: 'pipelinerun',\n  crd: false,\n};\n\nexport const ApprovalModel: K8sKind = {\n  kind: 'Approval',\n  namespaced: true,\n  label: 'Approval',\n  plural: 'approvals',\n  apiVersion: 'v1',\n  abbr: 'PA',\n  apiGroup: 'cicd.tmax.io',\n  labelPlural: 'Pipeline Approvals',\n  id: 'approval',\n  crd: false,\n};\n\nexport const PipelineResourceModel: K8sKind = {\n  kind: 'PipelineResource',\n  namespaced: true,\n  label: 'Pipeline Resource',\n  plural: 'pipelineresources',\n  apiVersion: 'v1alpha1',\n  abbr: 'PRS',\n  apiGroup: 'tekton.dev',\n  labelPlural: 'Pipeline Resources',\n  id: 'pipelineresource',\n  crd: false,\n};\n\nexport const IntegrationJobModel: K8sKind = {\n  kind: 'IntegrationJob',\n  namespaced: true,\n  label: 'Integration Job',\n  plural: 'integrationjobs',\n  apiVersion: 'v1',\n  abbr: 'IJ',\n  apiGroup: 'cicd.tmax.io',\n  labelPlural: 'Integration Jobs',\n  id: 'integrationjob',\n  crd: false,\n};\n\nexport const IntegrationConfigModel: K8sKind = {\n  kind: 'IntegrationConfig',\n  namespaced: true,\n  label: 'Integration Config',\n  plural: 'integrationconfigs',\n  apiVersion: 'v1',\n  abbr: 'IC',\n  apiGroup: 'cicd.tmax.io',\n  labelPlural: 'Integration Configs',\n  id: 'integrationconfig',\n  crd: false,\n};\n\nexport const VirtualMachineModel: K8sKind = {\n  label: 'VirtualMachine',\n  labelPlural: 'VirtualMachines',\n  apiVersion: 'v1alpha3',\n  apiGroup: 'kubevirt.io',\n  plural: 'virtualmachines',\n  abbr: 'vm',\n  kind: 'VirtualMachine',\n  id: 'virtualmachine',\n  namespaced: true,\n};\n\nexport const VirtualMachineInstanceModel: K8sKind = {\n  label: 'VirtualMachineInstance',\n  labelPlural: 'VirtualMachineInstances',\n  apiVersion: 'v1alpha3',\n  apiGroup: 'kubevirt.io',\n  plural: 'virtualmachineinstances',\n  abbr: 'vmi',\n  kind: 'VirtualMachineInstance',\n  id: 'virtualmachineinstance',\n  namespaced: true,\n};\n\nexport const VirtualServiceModel: K8sKind = {\n  label: 'Virtual Service',\n  labelPlural: 'Virtual Services',\n  apiVersion: 'v1alpha3',\n  apiGroup: 'networking.istio.io',\n  plural: 'virtualservices',\n  abbr: 'vs',\n  kind: 'VirtualService',\n  id: 'virtualservice',\n  namespaced: true,\n};\n\nexport const DestinationRuleModel: K8sKind = {\n  label: 'Destination Rule',\n  labelPlural: 'Destination Rules',\n  apiVersion: 'v1alpha3',\n  apiGroup: 'networking.istio.io',\n  plural: 'destinationrules',\n  abbr: 'dr',\n  kind: 'DestinationRule',\n  id: 'destinationrule',\n  namespaced: true,\n};\n\nexport const EnvoyFilterModel: K8sKind = {\n  label: 'Envoy Filter',\n  labelPlural: 'Envoy Filters',\n  apiVersion: 'v1alpha3',\n  apiGroup: 'networking.istio.io',\n  plural: 'envoyfilters',\n  abbr: 'ef',\n  kind: 'EnvoyFilter',\n  id: 'envoyfilter',\n  namespaced: true,\n};\n\nexport const GatewayModel: K8sKind = {\n  label: 'Gateway',\n  labelPlural: 'Gateways',\n  apiVersion: 'v1alpha3',\n  apiGroup: 'networking.istio.io',\n  plural: 'gateways',\n  abbr: 'g',\n  kind: 'Gateway',\n  id: 'gateway',\n  namespaced: true,\n};\n\nexport const SidecarModel: K8sKind = {\n  label: 'Sidecar',\n  labelPlural: 'Sidecars',\n  apiVersion: 'v1alpha3',\n  apiGroup: 'networking.istio.io',\n  plural: 'sidecars',\n  abbr: 'sc',\n  kind: 'Sidecar',\n  id: 'sidecar',\n  namespaced: true,\n};\n\nexport const ServiceEntryModel: K8sKind = {\n  label: 'Service Entry',\n  labelPlural: 'Service Entries',\n  apiVersion: 'v1alpha3',\n  apiGroup: 'networking.istio.io',\n  plural: 'serviceentries',\n  abbr: 'se',\n  kind: 'ServiceEntry',\n  id: 'serviceentry',\n  namespaced: true,\n};\n\nexport const RequestAuthenticationModel: K8sKind = {\n  label: 'Request Authentication',\n  labelPlural: 'Request Authentications',\n  apiVersion: 'v1beta1',\n  apiGroup: 'security.istio.io',\n  plural: 'requestauthentications',\n  abbr: 'ra',\n  kind: 'RequestAuthentication',\n  id: 'requestauthentication',\n  namespaced: true,\n};\n\nexport const PeerAuthenticationModel: K8sKind = {\n  label: 'Peer Authentication',\n  labelPlural: 'Peer Authentications',\n  apiVersion: 'v1beta1',\n  apiGroup: 'security.istio.io',\n  plural: 'peerauthentications',\n  abbr: 'pa',\n  kind: 'PeerAuthentication',\n  id: 'peerauthentication',\n  namespaced: true,\n};\n\nexport const AuthorizationPolicyModel: K8sKind = {\n  label: 'Authorization Policy',\n  labelPlural: 'Authorization Policies',\n  apiVersion: 'v1beta1',\n  apiGroup: 'security.istio.io',\n  plural: 'authorizationpolicies',\n  abbr: 'ap',\n  namespaced: true,\n  kind: 'AuthorizationPolicy',\n  id: 'authorizationpolicy',\n};\n\nexport const DataVolumeModel: K8sKind = {\n  label: 'Data Volume',\n  labelPlural: 'Data Volumes',\n  apiVersion: 'v1alpha1',\n  apiGroup: 'cdi.kubevirt.io',\n  plural: 'datavolumes',\n  abbr: 'dv',\n  kind: 'DataVolume',\n  id: 'datavolume',\n  namespaced: true,\n};\nexport const NamespaceClaimModel: K8sKind = {\n  label: 'NamespaceClaim',\n  labelPlural: 'NamespaceClaims',\n  apiVersion: 'v1alpha1',\n  apiGroup: 'claim.tmax.io',\n  plural: 'namespaceclaims',\n  abbr: 'NSC',\n  kind: 'NamespaceClaim',\n  id: 'namespaceclaim',\n  namespaced: false,\n};\n\nexport const ResourceQuotaClaimModel: K8sKind = {\n  label: 'ResourceQuotaClaim',\n  labelPlural: 'ResourceQuotaClaims',\n  apiVersion: 'v1alpha1',\n  apiGroup: 'claim.tmax.io',\n  plural: 'resourcequotaclaims',\n  abbr: 'RQC',\n  kind: 'ResourceQuotaClaim',\n  id: 'resourcequotaclaim',\n  namespaced: true,\n};\n\nexport const RoleBindingClaimModel: K8sKind = {\n  label: 'RoleBindingClaim',\n  labelPlural: 'RoleBindingClaims',\n  apiVersion: 'v1alpha1',\n  apiGroup: 'claim.tmax.io',\n  plural: 'rolebindingclaims',\n  abbr: 'RBC',\n  kind: 'RoleBindingClaim',\n  id: 'rolebindingclaim',\n  namespaced: true,\n};\n\nexport const ServiceBrokerModel: K8sKind = {\n  label: 'Service Broker',\n  labelPlural: 'Service Brokers',\n  apiVersion: 'v1beta1',\n  apiGroup: 'servicecatalog.k8s.io',\n  plural: 'servicebrokers',\n  abbr: 'SB',\n  kind: 'ServiceBroker',\n  id: 'servicebroker',\n  namespaced: true,\n};\n\nexport const ServiceClassModel: K8sKind = {\n  label: 'Service Class',\n  labelPlural: 'Service Classes',\n  apiVersion: 'v1beta1',\n  apiGroup: 'servicecatalog.k8s.io',\n  plural: 'serviceclasses',\n  abbr: 'SC',\n  kind: 'ServiceClass',\n  id: 'serviceclass',\n  namespaced: true,\n};\n\nexport const ServicePlanModel: K8sKind = {\n  label: 'Service Plan',\n  labelPlural: 'Service Plans',\n  apiVersion: 'v1beta1',\n  apiGroup: 'servicecatalog.k8s.io',\n  plural: 'serviceplans',\n  abbr: 'SP',\n  kind: 'ServicePlan',\n  id: 'serviceplan',\n  namespaced: true,\n};\n\nexport const ClusterServiceBrokerModel: K8sKind = {\n  label: 'Cluster Service Broker',\n  labelPlural: 'Cluster Service Brokers',\n  apiVersion: 'v1beta1',\n  apiGroup: 'servicecatalog.k8s.io',\n  plural: 'clusterservicebrokers',\n  abbr: 'CSB',\n  kind: 'ClusterServiceBroker',\n  id: 'clusterservicebroker',\n  namespaced: false,\n};\n\nexport const ClusterServiceClassModel: K8sKind = {\n  label: 'Cluster Service Class',\n  labelPlural: 'Cluster Service Classes',\n  apiVersion: 'v1beta1',\n  apiGroup: 'servicecatalog.k8s.io',\n  plural: 'clusterserviceclasses',\n  abbr: 'CSC',\n  kind: 'ClusterServiceClass',\n  id: 'clusterserviceclass',\n  namespaced: false,\n};\n\nexport const ClusterServicePlanModel: K8sKind = {\n  label: 'Cluster Service Plan',\n  labelPlural: 'Cluster Service Plans',\n  apiVersion: 'v1beta1',\n  apiGroup: 'servicecatalog.k8s.io',\n  plural: 'clusterserviceplans',\n  abbr: 'CSP',\n  kind: 'ClusterServicePlan',\n  id: 'clusterserviceplan',\n  namespaced: false,\n};\n\nexport const ServiceInstanceModel: K8sKind = {\n  label: 'Service Instance',\n  labelPlural: 'Service Instances',\n  apiVersion: 'v1beta1',\n  apiGroup: 'servicecatalog.k8s.io',\n  plural: 'serviceinstances',\n  abbr: 'SI',\n  kind: 'ServiceInstance',\n  id: 'serviceinstance',\n  namespaced: true,\n};\n\nexport const ServiceBindingModel: K8sKind = {\n  label: 'Service Binding',\n  labelPlural: 'Service Bindings',\n  apiVersion: 'v1beta1',\n  apiGroup: 'servicecatalog.k8s.io',\n  plural: 'servicebindings',\n  abbr: 'SB',\n  kind: 'ServiceBinding',\n  id: 'servicebinding',\n  namespaced: true,\n};\n\nexport const CatalogServiceClaimModel: K8sKind = {\n  label: 'CatalogServiceClaim',\n  labelPlural: 'Catalog Service Claim',\n  apiVersion: 'v1',\n  apiGroup: 'tmax.io',\n  plural: 'catalogserviceclaims',\n  abbr: 'CSC',\n  kind: 'CatalogServiceClaim',\n  id: 'catalogserviceclaim',\n  namespaced: true,\n};\n\nexport const TemplateModel: K8sKind = {\n  label: 'Template',\n  labelPlural: 'Templates',\n  apiVersion: 'v1',\n  apiGroup: 'tmax.io',\n  plural: 'templates',\n  abbr: 'T',\n  kind: 'Template',\n  id: 'template',\n  namespaced: true,\n};\n\nexport const TemplateInstanceModel: K8sKind = {\n  label: 'Template Instance',\n  labelPlural: 'Template Instances',\n  apiVersion: 'v1',\n  apiGroup: 'tmax.io',\n  plural: 'templateinstances',\n  abbr: 'TI',\n  kind: 'TemplateInstance',\n  id: 'templateinstance',\n  namespaced: true,\n};\n\nexport const ClusterTemplateModel: K8sKind = {\n  label: 'Cluster Template',\n  labelPlural: 'Cluster Templates',\n  apiVersion: 'v1',\n  apiGroup: 'tmax.io',\n  plural: 'clustertemplates',\n  abbr: 'CT',\n  kind: 'ClusterTemplate',\n  id: 'clustertemplate',\n  namespaced: false,\n};\n\nexport const NotebookModel: K8sKind = {\n  label: 'Notebook',\n  labelPlural: 'Notebook Server',\n  apiVersion: 'v1',\n  apiGroup: 'kubeflow.tmax.io',\n  plural: 'notebooks',\n  abbr: 'NB',\n  namespaced: true,\n  kind: 'Notebook',\n  id: 'notebook',\n  crd: false,\n};\n\nexport const ExperimentModel: K8sKind = {\n  label: 'Experiment',\n  labelPlural: 'Experiments',\n  apiVersion: 'v1beta1',\n  apiGroup: 'kubeflow.org',\n  plural: 'experiments',\n  abbr: 'EX',\n  namespaced: true,\n  kind: 'Experiment',\n  id: 'experiment',\n  crd: false,\n};\n\nexport const TrainingJobModel: K8sKind = {\n  label: 'Training Job',\n  labelPlural: 'Training Jobs',\n  apiVersion: 'v1',\n  apiGroup: 'kubeflow.org',\n  plural: 'trainingjobs',\n  abbr: 'TJ',\n  namespaced: true,\n  kind: 'TrainingJob',\n  id: 'trainingjob',\n  crd: false,\n};\n\nexport const TFJobModel: K8sKind = {\n  label: 'TFJob',\n  labelPlural: 'TF Jobs',\n  apiVersion: 'v1',\n  apiGroup: 'kubeflow.org',\n  plural: 'tfjobs',\n  abbr: 'TFJ',\n  namespaced: true,\n  kind: 'TFJob',\n  id: 'tfjob',\n  crd: false,\n};\nexport const PyTorchJobModel: K8sKind = {\n  label: 'PyTorchJob',\n  labelPlural: 'PyTorch Jobs',\n  apiVersion: 'v1',\n  apiGroup: 'kubeflow.org',\n  plural: 'pytorchjobs',\n  abbr: 'PTJ',\n  namespaced: true,\n  kind: 'PyTorchJob',\n  id: 'pytorchjob',\n  crd: false,\n};\n\nexport const InferenceServiceModel: K8sKind = {\n  label: 'Inference Service',\n  labelPlural: 'Inference Services',\n  apiVersion: 'v1alpha2',\n  apiGroup: 'serving.kubeflow.org',\n  plural: 'inferenceservices',\n  abbr: 'ISVC',\n  namespaced: true,\n  kind: 'InferenceService',\n  id: 'inferenceservice',\n  crd: false,\n};\n\nexport const WorkflowTemplateModel: K8sKind = {\n  label: 'WorkflowTemplate',\n  labelPlural: 'Workflow Templates',\n  apiVersion: 'v1alpha1',\n  apiGroup: 'argoproj.io',\n  plural: 'workflowtemplates',\n  abbr: 'WFT',\n  namespaced: true,\n  kind: 'WorkflowTemplate',\n  id: 'workflowtemplate',\n  crd: false,\n};\n\nexport const WorkflowModel: K8sKind = {\n  label: 'Workflow',\n  labelPlural: 'Workflows',\n  apiVersion: 'v1alpha1',\n  apiGroup: 'argoproj.io',\n  plural: 'workflows',\n  abbr: 'WF',\n  namespaced: true,\n  kind: 'Workflow',\n  id: 'workflow',\n  crd: false,\n};\n","import { TFunction } from 'i18next';\n\nexport const ResourceLabel = (kindObj, t?: TFunction) => {\n  if (!t || !ResourceStringKeyMap[kindObj.kind]?.label) {\n    return kindObj.label;\n  }\n  return t(ResourceStringKeyMap[kindObj.kind].label);\n};\n\nexport const ResourceLabelPlural = (kindObj, t?: TFunction) => {\n  if (!t || !ResourceStringKeyMap[kindObj.kind]?.labelPlural) {\n    return kindObj.labelPlural;\n  }\n\n  return t(ResourceStringKeyMap[kindObj.kind].labelPlural);\n};\n\nexport const ResourceStringKeyMap = {\n  ClusterClaim: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_105',\n    label: 'COMMON:MSG_LNB_MENU_182',\n  },\n  ClusterManager: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_84',\n    label: 'COMMON:MSG_LNB_MENU_165',\n  },\n  FederatedPod: {},\n  FederatedDeployment: {},\n  FederatedReplicaSet: {},\n  FederatedHorizontalPodAutoscaler: {},\n  FederatedDaemonSet: {},\n  FederatedStatefulSet: {},\n  FederatedConfigMap: {},\n  FederatedSecret: {},\n  FederatedJob: {},\n  FederatedCronJob: {},\n  FederatedIngress: {},\n  FederatedService: {},\n  FederatedNamespace: {},\n  //\n  ServiceBroker: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_11',\n    label: 'COMMON:MSG_LNB_MENU_107',\n  },\n  ServiceClass: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_12',\n    label: 'COMMON:MSG_LNB_MENU_108',\n  },\n  ClusterServiceBroker: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_14',\n    label: 'COMMON:MSG_LNB_MENU_109',\n  },\n  ClusterServiceClass: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_15',\n    label: 'COMMON:MSG_LNB_MENU_110',\n  },\n  ServiceInstance: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_17',\n    label: 'COMMON:MSG_LNB_MENU_111',\n  },\n  ServiceBinding: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_18',\n    label: 'COMMON:MSG_LNB_MENU_112',\n  },\n  CatalogServiceClaim: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_19',\n    label: 'COMMON:MSG_LNB_MENU_113',\n  },\n  Template: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_20',\n    label: 'COMMON:MSG_LNB_MENU_114',\n  },\n  ClusterTemplate: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_104',\n    label: 'COMMON:MSG_LNB_MENU_181',\n  },\n  TemplateInstance: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_21',\n    label: 'COMMON:MSG_LNB_MENU_115',\n  },\n  Pod: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_23',\n    label: 'COMMON:MSG_LNB_MENU_116',\n  },\n  Deployment: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_24',\n    label: 'COMMON:MSG_LNB_MENU_117',\n  },\n  ReplicaSet: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_31',\n    label: 'COMMON:MSG_LNB_MENU_124',\n  },\n  HorizontalPodAutoscaler: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_32',\n    label: 'COMMON:MSG_LNB_MENU_125',\n  },\n  DaemonSet: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_30',\n    label: 'COMMON:MSG_LNB_MENU_123',\n  },\n  StatefulSet: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_25',\n    label: 'COMMON:MSG_LNB_MENU_118',\n  },\n  ConfigMap: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_27',\n    label: 'COMMON:MSG_LNB_MENU_120',\n  },\n  Secret: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_26',\n    label: 'COMMON:MSG_LNB_MENU_119',\n  },\n  Job: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_29',\n    label: 'COMMON:MSG_LNB_MENU_122',\n  },\n  CronJob: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_28',\n    label: 'COMMON:MSG_LNB_MENU_121',\n  },\n  VirtualMachine: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_33',\n    label: 'COMMON:MSG_LNB_MENU_126',\n  },\n  VirtualMachineInstance: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_34',\n    label: 'COMMON:MSG_LNB_MENU_127',\n  },\n  VirtualService: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_36',\n    label: 'COMMON:MSG_LNB_MENU_128',\n  },\n  DestinationRule: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_37',\n    label: 'COMMON:MSG_LNB_MENU_129',\n  },\n  EnvoyFilter: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_38',\n    label: 'COMMON:MSG_LNB_MENU_130',\n  },\n  Gateway: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_39',\n    label: 'COMMON:MSG_LNB_MENU_131',\n  },\n  Sidecar: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_40',\n    label: 'COMMON:MSG_LNB_MENU_132',\n  },\n  ServiceEntry: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_41',\n    label: 'COMMON:MSG_LNB_MENU_133',\n  },\n  RequestAuthentication: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_42',\n    label: 'COMMON:MSG_LNB_MENU_134',\n  },\n  PeerAuthentication: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_43',\n    label: 'COMMON:MSG_LNB_MENU_135',\n  },\n  AuthorizationPolicy: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_44',\n    label: 'COMMON:MSG_LNB_MENU_136',\n  },\n  Service: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_47',\n    label: 'COMMON:MSG_LNB_MENU_137',\n  },\n  Ingress: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_48',\n    label: 'COMMON:MSG_LNB_MENU_138',\n  },\n  NetworkPolicy: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_49',\n    label: 'COMMON:MSG_LNB_MENU_139',\n  },\n  StorageClass: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_53',\n    label: 'COMMON:MSG_LNB_MENU_142',\n  },\n  PersistentVolume: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_51',\n    label: 'COMMON:MSG_LNB_MENU_140',\n  },\n  PersistentVolumeClaim: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_52',\n    label: 'COMMON:MSG_LNB_MENU_141',\n  },\n  Task: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_57',\n    label: 'COMMON:MSG_LNB_MENU_144',\n  },\n  ClusterTask: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_94',\n    label: 'COMMON:MSG_LNB_MENU_173',\n  },\n  TaskRun: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_58',\n    label: 'COMMON:MSG_LNB_MENU_145',\n  },\n  Pipeline: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_59',\n    label: 'COMMON:MSG_LNB_MENU_146',\n  },\n  PipelineRun: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_60',\n    label: 'COMMON:MSG_LNB_MENU_147',\n  },\n  Approval: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_61',\n    label: 'COMMON:MSG_LNB_MENU_148',\n  },\n  PipelineResource: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_62',\n    label: 'COMMON:MSG_LNB_MENU_149',\n  },\n  IntegrationJob: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_185',\n    label: 'COMMON:MSG_LNB_MENU_186',\n  },\n  IntegrationConfig: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_183',\n    label: 'COMMON:MSG_LNB_MENU_184',\n  },\n  Registry: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_187',\n    label: 'COMMON:MSG_LNB_MENU_188',\n  },\n  ExternalRegistry: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_189',\n    label: 'COMMON:MSG_LNB_MENU_190',\n  },\n  ImageSigner: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_91',\n    label: 'COMMON:MSG_LNB_MENU_170',\n  },\n  ImageSignRequest: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_92',\n    label: 'COMMON:MSG_LNB_MENU_171',\n  },\n  SignerPolicy: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_96',\n    label: 'COMMON:MSG_LNB_MENU_175',\n  },\n  ImageScanRequest: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_95',\n    label: 'COMMON:MSG_LNB_MENU_174',\n  },\n  Namespace: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_3',\n    label: 'COMMON:MSG_LNB_MENU_106',\n  },\n  NamespaceClaim: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_103',\n    label: 'COMMON:MSG_LNB_MENU_180',\n  },\n  LimitRange: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_81',\n    label: 'COMMON:MSG_LNB_MENU_162',\n  },\n  ResourceQuota: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_80',\n    label: 'COMMON:MSG_LNB_MENU_161',\n  },\n  ResourceQuotaClaim: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_102',\n    label: 'COMMON:MSG_LNB_MENU_179',\n  },\n  CustomResourceDefinition: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_82',\n    label: 'COMMON:MSG_LNB_MENU_163',\n  },\n  Node: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_100',\n    label: 'COMMON:MSG_LNB_MENU_177',\n  },\n  Role: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_75',\n    label: 'COMMON:MSG_LNB_MENU_157',\n  },\n  RoleBinding: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_76',\n    label: 'COMMON:MSG_LNB_MENU_158',\n  },\n  ClusterRole: {\n    labelPlural: 'COMMON:MSG_DETAILS_TABDETAILS_DETAILS_124',\n    label: 'COMMON:MSG_DETAILS_TABDETAILS_DETAILS_124',\n  },\n  RoleBindingClaim: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_101',\n    label: 'COMMON:MSG_LNB_MENU_178',\n  },\n  ClusterRoleBinding: {\n    labelPlural: 'COMMON:MSG_DETAILS_TABDETAILS_DETAILS_123',\n    label: 'COMMON:MSG_DETAILS_TABDETAILS_DETAILS_123',\n  },\n  ServiceAccount: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_74',\n    label: 'COMMON:MSG_LNB_MENU_156',\n  },\n  PodSecurityPolicy: {\n    labelPlural: 'COMMON:MSG_LNB_MENU_78',\n    label: 'COMMON:MSG_LNB_MENU_160',\n  },\n};\n","import { K8sKind } from '../module/k8s';\nexport * from './hypercloud/index';\n\nexport const PrometheusModel: K8sKind = {\n  kind: 'Prometheus',\n  label: 'Prometheus',\n  labelPlural: 'Prometheuses',\n  apiGroup: 'monitoring.coreos.com',\n  apiVersion: 'v1',\n  abbr: 'PI',\n  namespaced: true,\n  crd: true,\n  plural: 'prometheuses',\n  propagationPolicy: 'Foreground',\n};\n\nexport const ServiceMonitorModel: K8sKind = {\n  kind: 'ServiceMonitor',\n  label: 'Service Monitor',\n  labelPlural: 'Service Monitors',\n  apiGroup: 'monitoring.coreos.com',\n  apiVersion: 'v1',\n  abbr: 'SM',\n  namespaced: true,\n  crd: true,\n  plural: 'servicemonitors',\n  propagationPolicy: 'Foreground',\n};\n\nexport const AlertmanagerModel: K8sKind = {\n  kind: 'Alertmanager',\n  label: 'Alertmanager',\n  labelPlural: 'Alertmanagers',\n  apiGroup: 'monitoring.coreos.com',\n  apiVersion: 'v1',\n  abbr: 'AM',\n  namespaced: true,\n  crd: true,\n  plural: 'alertmanagers',\n  propagationPolicy: 'Foreground',\n};\n\nexport const ChargebackReportModel: K8sKind = {\n  kind: 'Report',\n  label: 'Report',\n  labelPlural: 'Reports',\n  apiGroup: 'metering.openshift.io',\n  apiVersion: 'v1',\n  crd: true,\n  plural: 'reports',\n  abbr: 'R',\n  namespaced: true,\n};\n\nexport const ReportQueryModel: K8sKind = {\n  kind: 'ReportQuery',\n  label: 'ReportQuery',\n  labelPlural: 'Report Queries',\n  apiGroup: 'metering.openshift.io',\n  apiVersion: 'v1',\n  crd: true,\n  plural: 'reportqueries',\n  abbr: 'RQ',\n  namespaced: true,\n};\n\nexport const ServiceModel: K8sKind = {\n  apiVersion: 'v1',\n  label: 'Service',\n  plural: 'services',\n  abbr: 'S',\n  namespaced: true,\n  kind: 'Service',\n  id: 'service',\n  labelPlural: 'Services',\n};\n\nexport const PodModel: K8sKind = {\n  apiVersion: 'v1',\n  label: 'Pod',\n  plural: 'pods',\n  abbr: 'P',\n  namespaced: true,\n  kind: 'Pod',\n  id: 'pod',\n  labelPlural: 'Pods',\n};\n\nexport const ContainerModel: K8sKind = {\n  apiVersion: 'v1',\n  label: 'Container',\n  plural: 'containers',\n  abbr: 'C',\n  kind: 'Container',\n  id: 'container',\n  labelPlural: 'Containers',\n};\n\nexport const DaemonSetModel: K8sKind = {\n  label: 'Daemon Set',\n  apiGroup: 'apps',\n  plural: 'daemonsets',\n  apiVersion: 'v1',\n  abbr: 'DS',\n  namespaced: true,\n  propagationPolicy: 'Foreground',\n  kind: 'DaemonSet',\n  id: 'daemonset',\n  labelPlural: 'Daemon Sets',\n};\n\nexport const ReplicationControllerModel: K8sKind = {\n  apiVersion: 'v1',\n  label: 'Replication Controller',\n  plural: 'replicationcontrollers',\n  abbr: 'RC',\n  namespaced: true,\n  propagationPolicy: 'Foreground',\n  kind: 'ReplicationController',\n  id: 'replicationcontroller',\n  labelPlural: 'Replication Controllers',\n};\n\nexport const HorizontalPodAutoscalerModel: K8sKind = {\n  label: 'Horizontal Pod Autoscaler',\n  plural: 'horizontalpodautoscalers',\n  apiVersion: 'v2beta1',\n  apiGroup: 'autoscaling',\n  abbr: 'HPA',\n  namespaced: true,\n  kind: 'HorizontalPodAutoscaler',\n  id: 'horizontalpodautoscaler',\n  labelPlural: 'Horizontal Pod Autoscalers',\n};\n\nexport const ServiceAccountModel: K8sKind = {\n  apiVersion: 'v1',\n  label: 'Service Account',\n  plural: 'serviceaccounts',\n  abbr: 'SA',\n  namespaced: true,\n  kind: 'ServiceAccount',\n  id: 'serviceaccount',\n  labelPlural: 'Service Accounts',\n};\n\nexport const ReplicaSetModel: K8sKind = {\n  label: 'Replica Set',\n  apiVersion: 'v1',\n  apiGroup: 'apps',\n  plural: 'replicasets',\n  abbr: 'RS',\n  namespaced: true,\n  propagationPolicy: 'Foreground',\n  kind: 'ReplicaSet',\n  id: 'replicaset',\n  labelPlural: 'Replica Sets',\n};\n\nexport const DeploymentModel: K8sKind = {\n  label: 'Deployment',\n  apiVersion: 'v1',\n  apiGroup: 'apps',\n  plural: 'deployments',\n  abbr: 'D',\n  namespaced: true,\n  propagationPolicy: 'Foreground',\n  kind: 'Deployment',\n  id: 'deployment',\n  labelPlural: 'Deployments',\n};\n\nexport const DeploymentConfigModel: K8sKind = {\n  label: 'Deployment Config',\n  apiVersion: 'v1',\n  apiGroup: 'apps.openshift.io',\n  plural: 'deploymentconfigs',\n  abbr: 'DC',\n  namespaced: true,\n  propagationPolicy: 'Foreground',\n  kind: 'DeploymentConfig',\n  id: 'deploymentconfig',\n  labelPlural: 'Deployment Configs',\n};\n\nexport const BuildConfigModel: K8sKind = {\n  label: 'Build Config',\n  apiVersion: 'v1',\n  apiGroup: 'build.openshift.io',\n  plural: 'buildconfigs',\n  abbr: 'BC',\n  namespaced: true,\n  propagationPolicy: 'Foreground',\n  kind: 'BuildConfig',\n  id: 'buildconfig',\n  labelPlural: 'Build Configs',\n};\n\nexport const BuildModel: K8sKind = {\n  label: 'Build',\n  apiVersion: 'v1',\n  apiGroup: 'build.openshift.io',\n  plural: 'builds',\n  abbr: 'B',\n  namespaced: true,\n  propagationPolicy: 'Foreground',\n  kind: 'Build',\n  id: 'build',\n  labelPlural: 'Builds',\n};\n\n/* Moved to hypercloud models */\n\n// export const TemplateModel: K8sKind = {\n//   label: 'Template',\n//   apiVersion: 'v1',\n//   apiGroup: 'template.openshift.io',\n//   plural: 'templates',\n//   abbr: 'T',\n//   namespaced: true,\n//   propagationPolicy: 'Foreground',\n//   kind: 'Template',\n//   id: 'template',\n//   labelPlural: 'Templates',\n// };\n\n// export const TemplateInstanceModel: K8sKind = {\n//   label: 'Template Instance',\n//   apiVersion: 'v1',\n//   apiGroup: 'template.openshift.io',\n//   plural: 'templateinstances',\n//   abbr: 'TI',\n//   namespaced: true,\n//   kind: 'TemplateInstance',\n//   id: 'templateinstance',\n//   labelPlural: 'Template Instances',\n// };\n\nexport const ImageStreamModel: K8sKind = {\n  label: 'Image Stream',\n  apiVersion: 'v1',\n  apiGroup: 'image.openshift.io',\n  plural: 'imagestreams',\n  abbr: 'IS',\n  namespaced: true,\n  propagationPolicy: 'Foreground',\n  kind: 'ImageStream',\n  id: 'imagestream',\n  labelPlural: 'Image Streams',\n};\n\nexport const ImageStreamTagModel: K8sKind = {\n  label: 'Image Stream Tag',\n  apiVersion: 'v1',\n  apiGroup: 'image.openshift.io',\n  plural: 'imagestreamtags',\n  abbr: 'IST',\n  namespaced: true,\n  propagationPolicy: 'Foreground',\n  kind: 'ImageStreamTag',\n  id: 'imagestreamtag',\n  labelPlural: 'Image Stream Tags',\n};\n\nexport const ImageStreamImportsModel: K8sKind = {\n  label: 'Image Stream Import',\n  apiVersion: 'v1',\n  apiGroup: 'image.openshift.io',\n  plural: 'imagestreamimports',\n  abbr: 'ISI',\n  namespaced: true,\n  kind: 'ImageStreamImport',\n  id: 'imagestreamimport',\n  labelPlural: 'Image Stream Imports',\n};\n\nexport const JobModel: K8sKind = {\n  label: 'Job',\n  apiVersion: 'v1',\n  apiGroup: 'batch',\n  plural: 'jobs',\n  abbr: 'J',\n  namespaced: true,\n  propagationPolicy: 'Foreground',\n  kind: 'Job',\n  id: 'job',\n  labelPlural: 'Jobs',\n};\n\nexport const NodeModel: K8sKind = {\n  apiVersion: 'v1',\n  label: 'Node',\n  plural: 'nodes',\n  abbr: 'N',\n  kind: 'Node',\n  id: 'node',\n  labelPlural: 'Nodes',\n};\n\nexport const EventModel: K8sKind = {\n  apiVersion: 'v1',\n  label: 'Event',\n  plural: 'events',\n  abbr: 'E',\n  namespaced: true,\n  kind: 'Event',\n  id: 'event',\n  labelPlural: 'Events',\n};\n\nexport const ComponentStatusModel: K8sKind = {\n  apiVersion: 'v1',\n  label: 'Component Status',\n  labelPlural: 'Component Statuses',\n  plural: 'componentstatuses',\n  abbr: 'CS',\n  kind: 'ComponentStatus',\n  id: 'componentstatus',\n};\n\nexport const NamespaceModel: K8sKind = {\n  apiVersion: 'v1',\n  label: 'Namespace',\n  plural: 'namespaces',\n  abbr: 'NS',\n  kind: 'Namespace',\n  id: 'namespace',\n  labelPlural: 'Namespaces',\n};\n\nexport const ProjectModel: K8sKind = {\n  apiVersion: 'v1',\n  apiGroup: 'project.openshift.io',\n  label: 'Project',\n  plural: 'projects',\n  abbr: 'PR',\n  kind: 'Project',\n  id: 'project',\n  labelPlural: 'Projects',\n};\n\nexport const ProjectRequestModel: K8sKind = {\n  apiVersion: 'v1',\n  apiGroup: 'project.openshift.io',\n  label: 'Project Request',\n  plural: 'projectrequests',\n  abbr: '',\n  kind: 'ProjectRequest',\n  id: 'projectrequest',\n  labelPlural: 'Project Requests',\n};\n\nexport const IngressModel: K8sKind = {\n  label: 'Ingress',\n  labelPlural: 'Ingresses',\n  apiGroup: 'networking.k8s.io',\n  apiVersion: 'v1beta1',\n  plural: 'ingresses',\n  abbr: 'I',\n  namespaced: true,\n  kind: 'Ingress',\n  id: 'ingress',\n};\n\nexport const RouteModel: K8sKind = {\n  label: 'Route',\n  labelPlural: 'Routes',\n  apiGroup: 'route.openshift.io',\n  apiVersion: 'v1',\n  plural: 'routes',\n  abbr: 'RT',\n  namespaced: true,\n  kind: 'Route',\n  id: 'route',\n};\n\nexport const ConfigMapModel: K8sKind = {\n  apiVersion: 'v1',\n  label: 'Config Map',\n  plural: 'configmaps',\n  abbr: 'CM',\n  namespaced: true,\n  kind: 'ConfigMap',\n  id: 'configmap',\n  labelPlural: 'Config Maps',\n};\n\nexport const SecretModel: K8sKind = {\n  apiVersion: 'v1',\n  label: 'Secret',\n  plural: 'secrets',\n  abbr: 'S',\n  namespaced: true,\n  kind: 'Secret',\n  id: 'secret',\n  labelPlural: 'Secrets',\n};\n\nexport const ClusterRoleBindingModel: K8sKind = {\n  label: 'Cluster Role Binding',\n  apiGroup: 'rbac.authorization.k8s.io',\n  apiVersion: 'v1',\n  plural: 'clusterrolebindings',\n  abbr: 'CRB',\n  kind: 'ClusterRoleBinding',\n  id: 'clusterrolebinding',\n  labelPlural: 'Cluster Role Bindings',\n};\n\nexport const ClusterRoleModel: K8sKind = {\n  label: 'Cluster Role',\n  apiGroup: 'rbac.authorization.k8s.io',\n  apiVersion: 'v1',\n  plural: 'clusterroles',\n  abbr: 'CR',\n  kind: 'ClusterRole',\n  id: 'clusterrole',\n  labelPlural: 'Cluster Roles',\n};\n\nexport const RoleBindingModel: K8sKind = {\n  label: 'Role Binding',\n  apiGroup: 'rbac.authorization.k8s.io',\n  apiVersion: 'v1',\n  plural: 'rolebindings',\n  abbr: 'RB',\n  namespaced: true,\n  kind: 'RoleBinding',\n  id: 'rolebinding',\n  labelPlural: 'Role Bindings',\n};\n\nexport const RoleModel: K8sKind = {\n  label: 'Role',\n  apiGroup: 'rbac.authorization.k8s.io',\n  apiVersion: 'v1',\n  plural: 'roles',\n  abbr: 'R',\n  namespaced: true,\n  kind: 'Role',\n  id: 'role',\n  labelPlural: 'Roles',\n};\n\nexport const SelfSubjectAccessReviewModel: K8sKind = {\n  label: 'Self Subject Access Review',\n  apiGroup: 'authorization.k8s.io',\n  apiVersion: 'v1',\n  plural: 'selfsubjectaccessreviews',\n  abbr: 'SSAR',\n  namespaced: true,\n  kind: 'SelfSubjectAccessReview',\n  id: 'selfsubjectaccessreview',\n  labelPlural: 'Self Subject Access Reviews',\n};\n\nexport const ResourceAccessReviewsModel: K8sKind = {\n  label: 'Resource Access Review',\n  apiGroup: 'authorization.openshift.io',\n  apiVersion: 'v1',\n  plural: 'resourceaccessreviews',\n  abbr: 'LRAR',\n  namespaced: false,\n  kind: 'ResourceAccessReview',\n  id: 'resourceaccessreview',\n  labelPlural: 'Resource Access Reviews',\n};\n\nexport const LocalResourceAccessReviewsModel: K8sKind = {\n  label: 'Local Resource Access Review',\n  apiGroup: 'authorization.openshift.io',\n  apiVersion: 'v1',\n  plural: 'localresourceaccessreviews',\n  abbr: 'LRAR',\n  namespaced: true,\n  kind: 'LocalResourceAccessReview',\n  id: 'localresourceaccessreview',\n  labelPlural: 'Local Resource Access Reviews',\n};\n\nexport const PersistentVolumeModel: K8sKind = {\n  label: 'Persistent Volume',\n  apiVersion: 'v1',\n  plural: 'persistentvolumes',\n  abbr: 'PV',\n  kind: 'PersistentVolume',\n  id: 'persistentvolume',\n  labelPlural: 'Persistent Volumes',\n};\n\nexport const PersistentVolumeClaimModel: K8sKind = {\n  label: 'Persistent Volume Claim',\n  apiVersion: 'v1',\n  plural: 'persistentvolumeclaims',\n  abbr: 'PVC',\n  namespaced: true,\n  kind: 'PersistentVolumeClaim',\n  id: 'persistentvolumeclaim',\n  labelPlural: 'Persistent Volume Claims',\n};\n\nexport const PetsetModel: K8sKind = {\n  apiVersion: 'v1',\n  label: 'Petset',\n  plural: 'petsets',\n  abbr: 'PS',\n  propagationPolicy: 'Foreground',\n  kind: 'Petset',\n  id: 'petset',\n  labelPlural: 'Petsets',\n};\n\nexport const StatefulSetModel: K8sKind = {\n  label: 'Stateful Set',\n  apiGroup: 'apps',\n  apiVersion: 'v1',\n  plural: 'statefulsets',\n  abbr: 'SS',\n  namespaced: true,\n  propagationPolicy: 'Foreground',\n  kind: 'StatefulSet',\n  id: 'statefulset',\n  labelPlural: 'Stateful Sets',\n};\n\nexport const ResourceQuotaModel: K8sKind = {\n  label: 'Resource Quota',\n  apiVersion: 'v1',\n  plural: 'resourcequotas',\n  abbr: 'RQ',\n  namespaced: true,\n  kind: 'ResourceQuota',\n  id: 'resourcequota',\n  labelPlural: 'Resource Quotas',\n};\n\nexport const ClusterResourceQuotaModel: K8sKind = {\n  label: 'Cluster Resource Quota',\n  apiGroup: 'quota.openshift.io',\n  apiVersion: 'v1',\n  plural: 'clusterresourcequotas',\n  abbr: 'CRQ',\n  namespaced: false,\n  kind: 'ClusterResourceQuota',\n  id: 'clusterresourcequota',\n  labelPlural: 'Cluster Resource Quotas',\n  crd: true,\n};\n\nexport const NetworkPolicyModel: K8sKind = {\n  label: 'Network Policy',\n  labelPlural: 'Network Policies',\n  apiVersion: 'v1',\n  apiGroup: 'networking.k8s.io',\n  plural: 'networkpolicies',\n  abbr: 'NP',\n  namespaced: true,\n  kind: 'NetworkPolicy',\n  id: 'networkpolicy',\n};\n\nexport const CustomResourceDefinitionModel: K8sKind = {\n  label: 'Custom Resource Definition',\n  apiGroup: 'apiextensions.k8s.io',\n  apiVersion: 'v1beta1',\n  abbr: 'CRD',\n  namespaced: false,\n  plural: 'customresourcedefinitions',\n  kind: 'CustomResourceDefinition',\n  id: 'customresourcedefinition',\n  labelPlural: 'Custom Resource Definitions',\n};\n\nexport const CronJobModel: K8sKind = {\n  label: 'Cron Job',\n  apiVersion: 'v1beta1',\n  apiGroup: 'batch',\n  plural: 'cronjobs',\n  abbr: 'CJ',\n  namespaced: true,\n  kind: 'CronJob',\n  id: 'cronjob',\n  labelPlural: 'Cron Jobs',\n  propagationPolicy: 'Foreground',\n};\n\nexport const StorageClassModel: K8sKind = {\n  label: 'Storage Class',\n  labelPlural: 'Storage Classes',\n  apiVersion: 'v1',\n  apiGroup: 'storage.k8s.io',\n  plural: 'storageclasses',\n  abbr: 'SC',\n  namespaced: false,\n  kind: 'StorageClass',\n  id: 'storageclass',\n};\n\n/* Moved to hypercloud models */\n\n// export const ClusterServiceBrokerModel: K8sKind = {\n//   label: 'Cluster Service Broker',\n//   labelPlural: 'Cluster Service Brokers',\n//   apiVersion: 'v1beta1',\n//   apiGroup: 'servicecatalog.k8s.io',\n//   plural: 'clusterservicebrokers',\n//   abbr: 'CSB',\n//   namespaced: false,\n//   kind: 'ClusterServiceBroker',\n//   id: 'clusterservicebroker',\n//   crd: true,\n// };\n\n// export const ClusterServiceClassModel: K8sKind = {\n//   label: 'Cluster Service Class',\n//   labelPlural: 'Cluster Service Classes',\n//   apiVersion: 'v1beta1',\n//   apiGroup: 'servicecatalog.k8s.io',\n//   plural: 'clusterserviceclasses',\n//   abbr: 'CSC',\n//   namespaced: false,\n//   kind: 'ClusterServiceClass',\n//   id: 'clusterserviceclass',\n//   crd: true,\n// };\n\n// export const ClusterServicePlanModel: K8sKind = {\n//   label: 'Cluster Service Plan',\n//   labelPlural: 'Cluster Service Plans',\n//   apiVersion: 'v1beta1',\n//   apiGroup: 'servicecatalog.k8s.io',\n//   plural: 'clusterserviceplans',\n//   abbr: 'CSP',\n//   namespaced: false,\n//   kind: 'ClusterServicePlan',\n//   id: 'clusterserviceplan',\n//   crd: true,\n// };\n\n// export const ServiceInstanceModel: K8sKind = {\n//   label: 'Service Instance',\n//   labelPlural: 'Service Instances',\n//   apiVersion: 'v1beta1',\n//   apiGroup: 'servicecatalog.k8s.io',\n//   plural: 'serviceinstances',\n//   abbr: 'SI',\n//   namespaced: true,\n//   kind: 'ServiceInstance',\n//   id: 'serviceinstance',\n//   crd: true,\n// };\n\n// export const ServiceBindingModel: K8sKind = {\n//   label: 'Service Binding',\n//   labelPlural: 'Service Bindings',\n//   apiVersion: 'v1beta1',\n//   apiGroup: 'servicecatalog.k8s.io',\n//   plural: 'servicebindings',\n//   abbr: 'SB',\n//   namespaced: true,\n//   kind: 'ServiceBinding',\n//   id: 'servicebinding',\n//   crd: true,\n// };\n\nexport const LimitRangeModel: K8sKind = {\n  label: 'Limit Range',\n  apiVersion: 'v1',\n  plural: 'limitranges',\n  abbr: 'LR',\n  namespaced: true,\n  kind: 'LimitRange',\n  id: 'limitrange',\n  labelPlural: 'Limit Ranges',\n};\n\nexport const APIServiceModel: K8sKind = {\n  label: 'API Service',\n  labelPlural: 'API Services',\n  apiVersion: 'v1',\n  apiGroup: 'apiregistration.k8s.io',\n  plural: 'apiservices',\n  abbr: 'APIS',\n  namespaced: false,\n  kind: 'APIService',\n  id: 'apiservice',\n  crd: true,\n};\n\nexport const UserModel: K8sKind = {\n  label: 'User',\n  labelPlural: 'Users',\n  apiVersion: 'v1',\n  apiGroup: 'user.openshift.io',\n  plural: 'users',\n  abbr: 'U',\n  namespaced: false,\n  kind: 'User',\n  id: 'user',\n  crd: true,\n};\n\nexport const GroupModel: K8sKind = {\n  label: 'Group',\n  labelPlural: 'Groups',\n  apiVersion: 'v1',\n  apiGroup: 'user.openshift.io',\n  plural: 'groups',\n  abbr: 'G',\n  namespaced: false,\n  kind: 'Group',\n  id: 'group',\n  crd: true,\n};\n\n// Cluster API resources\n// https://github.com/openshift/cluster-api\nexport const MachineModel: K8sKind = {\n  label: 'Machine',\n  labelPlural: 'Machines',\n  apiVersion: 'v1beta1',\n  apiGroup: 'machine.openshift.io',\n  plural: 'machines',\n  abbr: 'M',\n  namespaced: true,\n  kind: 'Machine',\n  id: 'machine',\n  crd: true,\n};\n\nexport const MachineSetModel: K8sKind = {\n  label: 'Machine Set',\n  labelPlural: 'Machine Sets',\n  apiVersion: 'v1beta1',\n  apiGroup: 'machine.openshift.io',\n  plural: 'machinesets',\n  abbr: 'MS',\n  namespaced: true,\n  kind: 'MachineSet',\n  id: 'machineset',\n  crd: true,\n};\n\nexport const MachineDeploymentModel: K8sKind = {\n  label: 'Machine Deployment',\n  labelPlural: 'Machine Deployments',\n  apiVersion: 'v1beta1',\n  apiGroup: 'machine.openshift.io',\n  plural: 'machinedeployments',\n  abbr: 'MD',\n  namespaced: true,\n  kind: 'MachineDeployment',\n  id: 'machinedeployment',\n  crd: true,\n};\n\nexport const MachineConfigPoolModel: K8sKind = {\n  label: 'Machine Config Pool',\n  labelPlural: 'Machine Config Pools',\n  apiVersion: 'v1',\n  apiGroup: 'machineconfiguration.openshift.io',\n  plural: 'machineconfigpools',\n  abbr: 'MCP',\n  namespaced: false,\n  kind: 'MachineConfigPool',\n  id: 'machineconfigpool',\n  crd: true,\n};\n\nexport const MachineConfigModel: K8sKind = {\n  label: 'Machine Config',\n  labelPlural: 'Machine Configs',\n  apiVersion: 'v1',\n  apiGroup: 'machineconfiguration.openshift.io',\n  plural: 'machineconfigs',\n  abbr: 'MC',\n  namespaced: false,\n  kind: 'MachineConfig',\n  id: 'machineconfigpool',\n  crd: true,\n};\n\nexport const MachineAutoscalerModel: K8sKind = {\n  label: 'Machine Autoscaler',\n  labelPlural: 'Machine Autoscalers',\n  apiVersion: 'v1beta1',\n  apiGroup: 'autoscaling.openshift.io',\n  plural: 'machineautoscalers',\n  abbr: 'MA',\n  namespaced: true,\n  kind: 'MachineAutoscaler',\n  id: 'machineautoscaler',\n  crd: true,\n};\n\nexport const MachineHealthCheckModel: K8sKind = {\n  label: 'Machine Health Check',\n  labelPlural: 'Machine Health Checks',\n  apiVersion: 'v1beta1',\n  apiGroup: 'machine.openshift.io',\n  plural: 'machinehealthchecks',\n  abbr: 'MHC',\n  namespaced: true,\n  kind: 'MachineHealthCheck',\n  id: 'machinehealthcheck',\n  crd: true,\n};\n\n// Openshift cluster resources\nexport const ClusterOperatorModel: K8sKind = {\n  label: 'Cluster Operator',\n  labelPlural: 'Cluster Operators',\n  apiVersion: 'v1',\n  apiGroup: 'config.openshift.io',\n  plural: 'clusteroperators',\n  abbr: 'CO',\n  namespaced: false,\n  kind: 'ClusterOperator',\n  id: 'clusteroperator',\n  crd: true,\n};\n\nexport const ClusterVersionModel: K8sKind = {\n  label: 'Cluster Version',\n  labelPlural: 'Cluster Versions',\n  apiVersion: 'v1',\n  apiGroup: 'config.openshift.io',\n  plural: 'clusterversions',\n  abbr: 'CV',\n  namespaced: false,\n  kind: 'ClusterVersion',\n  id: 'clusterversion',\n  crd: true,\n};\n\nexport const CSIDriverModel: K8sKind = {\n  label: 'CSIDriver',\n  labelPlural: 'CSIDrivers',\n  apiVersion: 'v1beta1',\n  apiGroup: 'storage.k8s.io',\n  plural: 'csidrivers',\n  abbr: 'CSI',\n  namespaced: false,\n  kind: 'CSIDriver',\n  id: 'csidriver',\n  crd: true,\n};\n\nexport const ClusterAutoscalerModel: K8sKind = {\n  label: 'Cluster Autoscaler',\n  labelPlural: 'Cluster Autoscalers',\n  apiVersion: 'v1',\n  apiGroup: 'autoscaling.openshift.io',\n  plural: 'clusterautoscalers',\n  abbr: 'CA',\n  namespaced: false,\n  kind: 'ClusterAutoscaler',\n  id: 'clusterautoscaler',\n  crd: true,\n};\n\n// OpenShift global configuration\nexport const OAuthModel: K8sKind = {\n  label: 'OAuth',\n  labelPlural: 'OAuths',\n  apiVersion: 'v1',\n  apiGroup: 'config.openshift.io',\n  plural: 'oauths',\n  abbr: 'OA',\n  namespaced: false,\n  kind: 'OAuth',\n  id: 'oauth',\n  crd: true,\n};\n\nexport const InfrastructureModel: K8sKind = {\n  label: 'Infrastructure',\n  labelPlural: 'Infrastructures',\n  apiVersion: 'v1',\n  apiGroup: 'config.openshift.io',\n  plural: 'infrastructures',\n  abbr: 'INF',\n  namespaced: false,\n  kind: 'Infrastructure',\n  id: 'infrastructure',\n  crd: true,\n};\n\nexport const ConsoleLinkModel: K8sKind = {\n  label: 'Console Link',\n  labelPlural: 'Console Links',\n  apiVersion: 'v1',\n  apiGroup: 'console.openshift.io',\n  plural: 'consolelinks',\n  abbr: 'CL',\n  namespaced: false,\n  kind: 'ConsoleLink',\n  id: 'consolelink',\n  crd: true,\n};\n\nexport const ConsoleCLIDownloadModel: K8sKind = {\n  label: 'Console CLI Download',\n  labelPlural: 'Console CLI Downloads',\n  apiVersion: 'v1',\n  apiGroup: 'console.openshift.io',\n  plural: 'consoleclidownloads',\n  abbr: 'CCD',\n  namespaced: false,\n  kind: 'ConsoleCLIDownload',\n  id: 'consoleclidownload',\n  crd: true,\n};\n\nexport const ConsoleNotificationModel: K8sKind = {\n  label: 'Console Notification',\n  labelPlural: 'Console Notifications',\n  apiVersion: 'v1',\n  apiGroup: 'console.openshift.io',\n  plural: 'consolenotifications',\n  abbr: 'CN',\n  namespaced: false,\n  kind: 'ConsoleNotification',\n  id: 'consolenotification',\n  crd: true,\n};\n\nexport const ConsoleExternalLogLinkModel: K8sKind = {\n  label: 'Console External Log Link',\n  labelPlural: 'Console External Log Links',\n  apiVersion: 'v1',\n  apiGroup: 'console.openshift.io',\n  plural: 'consoleexternalloglinks',\n  abbr: 'CELL',\n  namespaced: false,\n  kind: 'ConsoleExternalLogLink',\n  id: 'consoleexternalloglink',\n  crd: true,\n};\n\nexport const ConsoleYAMLSampleModel: K8sKind = {\n  label: 'Console YAML Sample',\n  labelPlural: 'Console YAML Samples',\n  apiVersion: 'v1',\n  apiGroup: 'console.openshift.io',\n  plural: 'consoleyamlsamples',\n  abbr: 'CYS',\n  namespaced: false,\n  kind: 'ConsoleYAMLSample',\n  id: 'consoleyamlsample',\n  crd: true,\n};\n","import * as _ from 'lodash-es';\n\nimport { coFetch } from '../co-fetch';\nimport { stripBasePath } from '../components/utils/link';\n\nconst loginState = (key) => localStorage.getItem(key);\n\nconst loginStateItem = (key) => loginState(key);\n\nconst userID = 'userID';\nconst name = 'name';\nconst email = 'email';\n\nconst setNext = (next) => {\n  if (!next) {\n    return;\n  }\n\n  try {\n    // Don't redirect the user back to the error page after logging in.\n    const path = stripBasePath(next);\n    localStorage.setItem('next', path.startsWith('/error') ? '/' : path);\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error(e);\n  }\n};\n\nconst clearLocalStorage = () => {\n  [userID, name, email].forEach((key) => {\n    try {\n      localStorage.removeItem(key);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n    }\n  });\n};\n\nexport const authSvc = {\n  userID: () => {\n    const id = loginStateItem(userID);\n    try {\n      return id && atob(id);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error('error decoding userID', id, ':', e);\n    }\n    return id;\n  },\n  name: () => loginStateItem(name),\n  email: () => loginStateItem(email),\n\n  // Avoid logging out multiple times if concurrent requests return unauthorized.\n  logout: _.once((next) => {\n    setNext(next);\n    clearLocalStorage();\n    coFetch(window.SERVER_FLAGS.logoutURL, { method: 'POST' })\n      // eslint-disable-next-line no-console\n      .catch((e) => console.error('Error logging out', e))\n      .then(() => {\n        if (window.SERVER_FLAGS.logoutRedirect && !next) {\n          // window.location = window.SERVER_FLAGS.logoutRedirect;\n        } else {\n          authSvc.login();\n        }\n      });\n  }),\n\n  // Extra steps are needed if this is OpenShift to delete the user's access\n  // token and logout the kube:admin user.\n  logoutOpenShift: (isKubeAdmin = false) => {\n    return authSvc.deleteOpenShiftToken().then(() => {\n      if (isKubeAdmin) {\n        authSvc.logoutKubeAdmin();\n      } else {\n        authSvc.logout();\n      }\n    });\n  },\n\n  deleteOpenShiftToken: () => {\n    return (\n      coFetch('/api/openshift/delete-token', { method: 'POST' })\n        // eslint-disable-next-line no-console\n        .catch((e) => console.error('Error deleting token', e))\n    );\n  },\n\n  // The kube:admin user has a special logout flow. The OAuth server has a\n  // session cookie that must be cleared by POSTing to the kube:admin logout\n  // endpoint, otherwise the user will be logged in again immediately after\n  // logging out.\n  logoutKubeAdmin: () => {\n    clearLocalStorage();\n    // First POST to the console server to clear the console session cookie.\n    coFetch(window.SERVER_FLAGS.logoutURL, { method: 'POST' })\n      // eslint-disable-next-line no-console\n      .catch((e) => console.error('Error logging out', e))\n      .then(() => {\n        // We need to POST to the kube:admin logout URL. Since this is a\n        // cross-origin request, use a hidden form to POST.\n        const form = document.createElement('form');\n        form.action = window.SERVER_FLAGS.kubeAdminLogoutURL;\n        form.method = 'POST';\n\n        // Redirect back to the console when logout is complete by passing a\n        // `then` parameter.\n        const input = document.createElement('input');\n        input.type = 'hidden';\n        input.name = 'then';\n        input.value = window.SERVER_FLAGS.loginSuccessURL;\n        form.appendChild(input);\n\n        document.body.appendChild(form);\n        form.submit();\n      });\n  },\n\n  login: () => {\n    // window.location = window.SERVER_FLAGS.loginURL;\n  },\n};\n","export const kindToSchemaPath = new Map([\n  ['CustomResourceDefinition', { directory: 'management', file: 'CustomResourceDefinition.json' }],\n  ['LimitRange', { directory: 'management', file: 'LimitRange.json' }],\n  ['Namespace', { directory: 'management', file: 'Namespace.json' }],\n  ['Node', { directory: 'management', file: 'Node.json' }],\n  ['ResourceQuota', { directory: 'management', file: 'ResourceQuota.json' }],\n  ['Role', { directory: 'management', file: 'Role.json' }],\n  ['ServiceAccount', { directory: 'management', file: 'ServiceAccount.json' }],\n  ['Ingress', { directory: 'network', file: 'Ingress.json' }],\n  ['NetworkPolicy', { directory: 'network', file: 'NetworkPolicy.json' }],\n  ['Service', { directory: 'network', file: 'Service.json' }],\n  ['PersistentVolume', { directory: 'storage', file: 'PersistentVolume.json' }],\n  ['PersistentVolumeClaim', { directory: 'storage', file: 'PersistentVolumeClaim.json' }],\n  ['StorageClass', { directory: 'storage', file: 'StorageClass.json' }],\n  ['ConfigMap', { directory: 'workload', file: 'ConfigMap.json' }],\n  ['CronJob', { directory: 'workload', file: 'CronJob.json' }],\n  ['DaemonSet', { directory: 'workload', file: 'DaemonSet.json' }],\n  ['Deployment', { directory: 'workload', file: 'Deployment.json' }],\n  ['HorizontalPodAutoscaler', { directory: 'workload', file: 'HorizontalPodAutoscaler.json' }],\n  ['Job', { directory: 'workload', file: 'Job.json' }],\n  ['Pod', { directory: 'workload', file: 'Pod.json' }],\n  ['PodSecurityPolicy', { directory: 'workload', file: 'PodSecurityPolicy.json' }],\n  ['ReplicaSet', { directory: 'workload', file: 'ReplicaSet.json' }],\n  ['StatefulSet', { directory: 'workload', file: 'StatefulSet.json' }],\n]);\n","import { K8sResourceCommon, K8sResourceKind } from '../../k8s';\n\nexport type ApprovalKind = K8sResourceCommon & {\n  namespace?: string;\n  apiGroup?: string;\n};\n\nexport type CatalogServiceClaimKind = K8sResourceKind & {\n  resourceName?: string;\n};\n\n// export type TemplateKind = K8sResourceCommon & {\n\n// }\n\n// export type TemplateInstanceKind = K8sResourceCommon & {\n\n// }\n\nexport type K8sClaimResourceKind = K8sResourceKind & {\n  resourceName?: string;\n};\n\n// export type K8sResourceCommon = {\n//     apiVersion?: string;\n//     kind?: string;\n//     metadata?: ObjectMetadata;\n//   };\n","import * as _ from 'lodash-es';\n\nimport { BuildModel, BuildConfigModel } from '../../models';\nimport { k8sCreate } from './';\nimport { formatDuration } from '../../components/utils/datetime';\n\nconst BUILD_NUMBER_ANNOTATION = 'openshift.io/build.number';\n\nexport enum BuildPhase {\n  Cancelled = 'Cancelled',\n  Complete = 'Complete',\n  Error = 'Error',\n  Failed = 'Failed',\n  New = 'New',\n  Pending = 'Pending',\n  Running = 'Running',\n}\n\nconst createBuildRequest = (obj, model, subresource) => {\n  const req = {\n    kind: 'BuildRequest',\n    apiVersion: 'build.openshift.io/v1',\n    metadata: _.pick(obj.metadata, ['name', 'namespace']),\n  };\n  const opts = {\n    name: obj.metadata.name,\n    path: subresource,\n  };\n  return k8sCreate(model, req, opts);\n};\n\nexport const startBuild = (buildConfig) => {\n  return createBuildRequest(buildConfig, BuildConfigModel, 'instantiate');\n};\n\nexport const cloneBuild = (build) => {\n  return createBuildRequest(build, BuildModel, 'clone');\n};\n\nexport const isFinished = (build) => !!_.get(build, 'status.completionTimestamp');\n\n// Formats duration for finished builds.\nexport const formatBuildDuration = (build) => {\n  if (!isFinished(build)) {\n    return '';\n  }\n\n  const duration = _.get(build, 'status.duration');\n  if (!_.isFinite(duration)) {\n    return '';\n  }\n\n  // Duration in the build is returned as nanoseconds. Convert to milliseconds.\n  const ms = Math.floor(duration / 1000 / 1000);\n  return formatDuration(ms);\n};\n\nexport const getBuildNumber = (build) => {\n  const buildNumber = _.get(build, ['metadata', 'annotations', BUILD_NUMBER_ANNOTATION]);\n  return !!buildNumber && parseInt(buildNumber, 10);\n};\n","import * as _ from 'lodash-es';\nimport { ClusterOperator, OperandVersion } from '.';\n\nexport enum OperatorStatus {\n  Available = 'Available',\n  Updating = 'Updating',\n  Degraded = 'Degraded',\n  Unknown = 'Unknown',\n}\n\nexport const getStatusAndMessage = (operator: ClusterOperator) => {\n  const conditions = _.get(operator, 'status.conditions');\n  const degraded: any = _.find(conditions, { type: 'Degraded', status: 'True' });\n  if (degraded) {\n    return { status: OperatorStatus.Degraded, message: degraded.message };\n  }\n\n  const progressing: any = _.find(conditions, { type: 'Progressing', status: 'True' });\n  if (progressing) {\n    return { status: OperatorStatus.Updating, message: progressing.message };\n  }\n\n  const available: any = _.find(conditions, { type: 'Available', status: 'True' });\n  if (available) {\n    return { status: OperatorStatus.Available, message: available.message };\n  }\n\n  return { status: OperatorStatus.Unknown, message: '' };\n};\n\nexport const getClusterOperatorStatus = (operator: ClusterOperator) => {\n  const { status } = getStatusAndMessage(operator);\n  return status;\n};\n\nexport const getClusterOperatorVersion = (operator: ClusterOperator) => {\n  const versions: OperandVersion[] = _.get(operator, 'status.versions', []);\n  const operatorVersion = _.find(versions, (v) => v.name === 'operator');\n  return operatorVersion ? operatorVersion.version : '';\n};\n","import * as _ from 'lodash-es';\nimport * as semver from 'semver';\n\nimport { ClusterVersionModel } from '../../models';\nimport { referenceForModel } from './k8s';\nimport {\n  ClusterVersionKind,\n  ClusterUpdate,\n  ClusterVersionConditionType,\n  K8sResourceConditionStatus,\n  ClusterVersionCondition,\n  UpdateHistory,\n} from '.';\n\nexport enum ClusterUpdateStatus {\n  UpToDate = 'Up to Date',\n  UpdatesAvailable = 'Updates Available',\n  Updating = 'Updating',\n  Failing = 'Failing',\n  ErrorRetrieving = 'Error Retrieving',\n  Invalid = 'Invalid Cluster Version',\n}\n\nexport const clusterVersionReference = referenceForModel(ClusterVersionModel);\n\nexport const getAvailableClusterUpdates = (cv: ClusterVersionKind): ClusterUpdate[] => {\n  return _.get(cv, 'status.availableUpdates', []);\n};\n\nexport const getAvailableClusterChannels = () => ({\n  'stable-4.5': 'stable-4.5',\n  'fast-4.5': 'fast-4.5',\n  'candidate-4.5': 'candidate-4.5',\n});\n\nexport const getDesiredClusterVersion = (cv: ClusterVersionKind): string => {\n  return _.get(cv, 'status.desired.version');\n};\n\nexport const getClusterVersionChannel = (cv: ClusterVersionKind): string =>\n  cv && cv.spec ? cv.spec.channel : undefined;\n\nexport const getLastCompletedUpdate = (cv: ClusterVersionKind): string => {\n  const history: UpdateHistory[] = _.get(cv, 'status.history', []);\n  const lastCompleted: UpdateHistory = history.find((update) => update.state === 'Completed');\n  return lastCompleted && lastCompleted.version;\n};\n\nexport const getClusterVersionCondition = (\n  cv: ClusterVersionKind,\n  type: ClusterVersionConditionType,\n  status: K8sResourceConditionStatus = undefined,\n): ClusterVersionCondition => {\n  const conditions: ClusterVersionCondition[] = _.get(cv, 'status.conditions');\n  if (status) {\n    return _.find(conditions, { type, status });\n  }\n  return _.find(conditions, { type });\n};\n\nexport const isProgressing = (cv: ClusterVersionKind): boolean => {\n  return !_.isEmpty(\n    getClusterVersionCondition(\n      cv,\n      ClusterVersionConditionType.Progressing,\n      K8sResourceConditionStatus.True,\n    ),\n  );\n};\n\nexport const invalid = (cv: ClusterVersionKind): boolean => {\n  return !_.isEmpty(\n    getClusterVersionCondition(\n      cv,\n      ClusterVersionConditionType.Invalid,\n      K8sResourceConditionStatus.True,\n    ),\n  );\n};\n\nexport const failedToRetrieveUpdates = (cv: ClusterVersionKind): boolean => {\n  return !_.isEmpty(\n    getClusterVersionCondition(\n      cv,\n      ClusterVersionConditionType.RetrievedUpdates,\n      K8sResourceConditionStatus.False,\n    ),\n  );\n};\n\nexport const updateFailing = (cv: ClusterVersionKind): boolean => {\n  return !_.isEmpty(\n    getClusterVersionCondition(\n      cv,\n      ClusterVersionConditionType.Failing,\n      K8sResourceConditionStatus.True,\n    ),\n  );\n};\n\nexport const hasAvailableUpdates = (cv: ClusterVersionKind): boolean => {\n  return !_.isEmpty(getAvailableClusterUpdates(cv));\n};\n\nexport const getClusterUpdateStatus = (cv: ClusterVersionKind): ClusterUpdateStatus => {\n  if (invalid(cv)) {\n    return ClusterUpdateStatus.Invalid;\n  }\n\n  if (updateFailing(cv)) {\n    return ClusterUpdateStatus.Failing;\n  }\n\n  if (isProgressing(cv)) {\n    return ClusterUpdateStatus.Updating;\n  }\n\n  if (failedToRetrieveUpdates(cv)) {\n    return ClusterUpdateStatus.ErrorRetrieving;\n  }\n\n  return hasAvailableUpdates(cv)\n    ? ClusterUpdateStatus.UpdatesAvailable\n    : ClusterUpdateStatus.UpToDate;\n};\n\nexport const getK8sGitVersion = (k8sVersionResponse): string =>\n  _.get(k8sVersionResponse, 'gitVersion');\n\nexport const getOpenShiftVersion = (cv: ClusterVersionKind): string => {\n  const lastUpdate: UpdateHistory = _.get(cv, 'status.history[0]');\n  if (!lastUpdate) {\n    return null;\n  }\n  return lastUpdate.state === 'Partial' ? `Updating to ${lastUpdate.version}` : lastUpdate.version;\n};\n\ntype ParsedVersion = {\n  major: number;\n  minor: number;\n  patch: number;\n  prerelease: string[];\n};\n\nconst getCurrentVersion = (cv: ClusterVersionKind): string => {\n  return _.get(cv, 'status.history[0].version') || _.get(cv, 'spec.desiredUpdate.version');\n};\n\nexport const getReportBugLink = (cv: ClusterVersionKind): { label: string; href: string } => {\n  const version: string = getCurrentVersion(cv);\n  const parsed: ParsedVersion = semver.parse(version);\n  if (!parsed) {\n    return null;\n  }\n\n  // Show a Bugzilla link for prerelease versions and a support case link for supported versions.\n  const { major, minor, prerelease } = parsed;\n  const bugzillaVersion = major === 4 && minor <= 3 ? `${major}.${minor}.0` : `${major}.${minor}`;\n  const environment = encodeURIComponent(`Version: ${version}\nCluster ID: ${cv.spec.clusterID}\nBrowser: ${window.navigator.userAgent}\n`);\n  return _.isEmpty(prerelease)\n    ? {\n        label: 'Open Support Case with Red Hat',\n        href: `https://access.redhat.com/support/cases/#/case/new?product=OpenShift%20Container%20Platform&version=${major}.${minor}&clusterId=${cv.spec.clusterID}`,\n      }\n    : {\n        label: 'Report Bug to Red Hat',\n        href: `https://bugzilla.redhat.com/enter_bug.cgi?product=OpenShift%20Container%20Platform&version=${bugzillaVersion}&cf_environment=${environment}`,\n      };\n};\n\n// example link: https://access.redhat.com/downloads/content/290/ver=4.1/rhel---7/4.1.13/x86_64/product-errata\nexport const getErrataLink = (cv: ClusterVersionKind): string => {\n  const version: string = getCurrentVersion(cv);\n  const parsed: ParsedVersion = semver.parse(version);\n  if (!parsed) {\n    return null;\n  }\n\n  const { major, minor, patch, prerelease } = parsed;\n  if (major !== 4 || !_.isEmpty(prerelease)) {\n    return null;\n  }\n\n  // TODO: Determine architecture instead of assuming x86_64.\n  return `https://access.redhat.com/downloads/content/290/ver=${major}.${minor}/rhel---7/${major}.${minor}.${patch}/x86_64/product-errata`;\n};\n\nexport const getClusterName = (): string => window.SERVER_FLAGS.kubeAPIServerURL || null;\n\nexport const getClusterID = (cv: ClusterVersionKind): string => _.get(cv, 'spec.clusterID');\n\nexport const getOCMLink = (clusterID: string): string =>\n  `https://cloud.redhat.com/openshift/details/${clusterID}`;\n","import * as _ from 'lodash-es';\n\nimport { ContainerSpec, ContainerStatus, PodKind } from './';\n\nconst PullPolicy = {\n  Always: {\n    id: 'Always',\n    label: 'Always Pull',\n    description: 'Pull down a new copy of the container image whenever a new pod is created.',\n    default: true,\n  },\n  IfNotPresent: {\n    id: 'IfNotPresent',\n    label: 'Pull If Needed',\n    description: 'If the container isn’t available locally, pull it down.',\n  },\n  Never: {\n    id: 'Never',\n    label: 'Never Pull',\n    description:\n      \"Don't pull down a container image. \" +\n      \"If the correct container image doesn't exist locally, the pod will fail to start correctly.\",\n  },\n};\n\n// Parses the state from k8s container info field of a pod.\n// Returned object will always have a 'label' property,\n// but existence of other properties vary depending on the state.\nexport const getContainerState = (containerStatus: ContainerStatus): any => {\n  const state: any = {\n    label: 'Unknown',\n  };\n  if (!containerStatus || !containerStatus.state) {\n    return state;\n  }\n\n  const keys = Object.keys(containerStatus.state);\n  if (_.isEmpty(keys)) {\n    return state;\n  }\n\n  const stateKey = keys[0];\n  _.assign(state, containerStatus.state[stateKey]);\n  state.label = _.startCase(stateKey);\n  state.value = stateKey;\n  return state;\n};\n\nexport const getContainerStatus = (pod: PodKind, containerName: string): ContainerStatus => {\n  const statuses: ContainerStatus[] = _.get(pod, 'status.containerStatuses');\n  const initStatuses: ContainerStatus[] = _.get(pod, 'status.initContainerStatuses');\n  const identity = (s: ContainerStatus) => s.name === containerName;\n  return _.find(statuses, identity) || _.find(initStatuses, identity);\n};\n\nconst getPullPolicy = (container: ContainerSpec) =>\n  _.find(PullPolicy, { id: _.get(container, 'imagePullPolicy') });\n\nexport const getPullPolicyLabel = (container: ContainerSpec): string =>\n  _.get(getPullPolicy(container), 'label', '');\n","import * as _ from 'lodash-es';\nimport { plural } from 'pluralize';\n\nimport { coFetchJSON } from '../../co-fetch';\nimport { K8sKind, K8sVerb } from '../../module/k8s';\nimport { API_DISCOVERY_RESOURCES_LOCAL_STORAGE_KEY } from '@console/shared/src/constants';\n\nconst ADMIN_RESOURCES = new Set([\n  'roles',\n  'rolebindings',\n  'clusterroles',\n  'clusterrolebindings',\n  'thirdpartyresources',\n  'nodes',\n  'secrets',\n]);\n\nconst abbrBlacklist = ['ASS'];\nexport const kindToAbbr = (kind) => {\n  const abbrKind = (kind.replace(/[^A-Z]/g, '') || kind.toUpperCase()).slice(0, 3);\n  return abbrBlacklist.includes(abbrKind) ? abbrKind.slice(0, -1) : abbrKind;\n};\n\nexport const cacheResources = (resources) =>\n  new Promise<void>((resolve, reject) => {\n    try {\n      // Add the console version. We invalidate the cache when console version changes.\n      const { consoleVersion } = window.SERVER_FLAGS;\n      const versionedResources = _.assign({}, resources, { consoleVersion });\n      localStorage.setItem(\n        API_DISCOVERY_RESOURCES_LOCAL_STORAGE_KEY,\n        JSON.stringify(versionedResources),\n      );\n      resolve();\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error('Error caching API resources in localStorage', e);\n      reject(e);\n    }\n  });\n\nexport const getCachedResources = () =>\n  new Promise<any>((resolve, reject) => {\n    try {\n      const resourcesJSON = localStorage.getItem(API_DISCOVERY_RESOURCES_LOCAL_STORAGE_KEY);\n\n      // Clear cached resources after load as a safeguard. If there's any errors\n      // with the content that prevents the console from working, the bad data\n      // will not be loaded when the user refreshes the console. The cache will\n      // be refreshed when discovery completes.\n      localStorage.removeItem(API_DISCOVERY_RESOURCES_LOCAL_STORAGE_KEY);\n\n      if (resourcesJSON) {\n        const resources = JSON.parse(resourcesJSON);\n        const { consoleVersion: currentVersion } = window.SERVER_FLAGS;\n        const { consoleVersion: cachedVersion } = resources;\n        if (cachedVersion !== currentVersion) {\n          // eslint-disable-next-line no-console\n          console.log(\n            `Invalidating API discovery cache from earlier console version (current: ${currentVersion}, cached: ${cachedVersion})`,\n          );\n          resolve(null);\n          return;\n        }\n        // eslint-disable-next-line no-console\n        console.log('Loaded cached API resources from localStorage');\n        resolve(resources);\n        return;\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error('Error reading API resources from localStorage', e);\n      reject(e);\n    }\n\n    resolve(null);\n  });\n\nexport type DiscoveryResources = {\n  adminResources: string[];\n  allResources: string[];\n  configResources: K8sKind[];\n  models: K8sKind[];\n  namespacedSet: Set<string>;\n  preferredVersions: { groupVersion: string; version: string }[];\n  safeResources: string[];\n};\n\nexport const pluralizeKind = (kind: string): string => {\n  // Use startCase to separate words so the last can be pluralized but remove spaces so as not to humanize\n  const pluralized = plural(_.startCase(kind)).replace(/\\s+/g, '');\n  // Handle special cases like DB -> DBs (instead of DBS).\n  if (pluralized === `${kind}S`) {\n    return `${kind}s`;\n  }\n  return pluralized;\n};\n\nexport const getResources = () =>\n  coFetchJSON('api/kubernetes/apis').then((res) => {\n    const preferredVersions = res.groups.map((group) => group.preferredVersion);\n    const all: Promise<APIResourceList>[] = _.flatten(\n      res.groups.map((group) => group.versions.map((version) => `/apis/${version.groupVersion}`)),\n    )\n      .concat(['/api/v1'])\n      .map((p) => coFetchJSON(`api/kubernetes${p}`).catch((err) => err));\n\n    return Promise.all(all).then((data) => {\n      const resourceSet = new Set<string>();\n      const namespacedSet = new Set<string>();\n      data.forEach(\n        (d) =>\n          d.resources &&\n          d.resources.forEach(({ namespaced, name }) => {\n            resourceSet.add(name);\n            namespaced && namespacedSet.add(name);\n          }),\n      );\n      const allResources = [...resourceSet].sort();\n\n      const safeResources = [];\n      const adminResources = [];\n\n      const defineModels = (list: APIResourceList): K8sKind[] => {\n        const groupVersionParts = list.groupVersion.split('/');\n        const apiGroup = groupVersionParts.length > 1 ? groupVersionParts[0] : null;\n        const apiVersion = groupVersionParts.length > 1 ? groupVersionParts[1] : list.groupVersion;\n        return list.resources\n          .filter(({ name }) => !name.includes('/'))\n          .map(({ name, singularName, namespaced, kind, verbs, shortNames }) => {\n            return {\n              kind,\n              namespaced,\n              verbs,\n              shortNames,\n              label: kind,\n              plural: name,\n              apiVersion,\n              abbr: kindToAbbr(kind),\n              ...(apiGroup ? { apiGroup } : {}),\n              labelPlural: pluralizeKind(kind),\n              path: name,\n              id: singularName,\n              crd: true,\n            };\n          });\n      };\n\n      const models = _.flatten(data.filter((d) => d.resources).map(defineModels));\n      allResources.forEach((r) =>\n        ADMIN_RESOURCES.has(r.split('/')[0]) ? adminResources.push(r) : safeResources.push(r),\n      );\n      const configResources = _.filter(\n        models,\n        (m) => m.apiGroup === 'config.openshift.io' && m.kind !== 'ClusterOperator',\n      );\n\n      return {\n        allResources,\n        safeResources,\n        adminResources,\n        configResources,\n        namespacedSet,\n        models,\n        preferredVersions,\n      } as DiscoveryResources;\n    });\n  });\n\nexport type APIResourceList = {\n  kind: 'APIResourceList';\n  apiVersion: 'v1';\n  groupVersion: string;\n  resources?: {\n    name: string;\n    singularName?: string;\n    namespaced?: boolean;\n    kind: string;\n    verbs: K8sVerb[];\n    shortNames?: string[];\n  }[];\n};\n","export * from './job';\nexport * from './k8s';\nexport * from './pods';\nexport * from './resource';\nexport * from './service-catalog';\nexport * from './get-resources';\nexport * from './k8s-models';\nexport * from './label-selector';\nexport * from './cluster-operator';\nexport * from './cluster-settings';\nexport * from './template';\nexport * from './swagger';\nexport * from './event';\nexport * from './types';\nexport * from '../hypercloud/k8s/types';\n","export const getJobTypeAndCompletions = ({ spec }) => {\n  // if neither completions nor parallelism are defined, then it is a non-parallel job.\n  if (!spec.completions && !spec.parallelism) {\n    return { type: 'Non-parallel', completions: 1 };\n  }\n  // if completions are defined and no parallelism is defined, or if parallelism is 0 or 1, then it is a 'Non-parallel' job.\n  if (spec.completions && (!spec.parallelism || spec.parallelism === 1)) {\n    return { type: 'Non-parallel', completions: spec.completions };\n  }\n  // if parallelism is greater than 1 and completions are defined, then it is a 'Fixed Completion Count' job.\n  if (spec.hasOwnProperty('parallelism') && spec.completions) {\n    return { type: 'Fixed Completion Count', completions: spec.completions };\n  }\n  // otherwise, if parallelism is defined, but completions is not, then it is a 'Work Queue' job.\n  return { type: 'Work Queue', completions: 1 };\n};\n","import { Map as ImmutableMap } from 'immutable';\nimport * as _ from 'lodash-es';\n\nimport { K8sResourceKindReference, K8sKind } from './index';\nimport * as staticModels from '../../models';\nimport { referenceForModel, kindForReference } from './k8s';\nimport store from '../../redux';\nimport { registry } from '../../plugins';\n\nconst modelKey = (model: K8sKind): string => {\n  // TODO: Use `referenceForModel` even for known API objects\n  return model.crd ? referenceForModel(model) : model.kind;\n};\n\nexport const modelsToMap = (models: K8sKind[]): ImmutableMap<K8sResourceKindReference, K8sKind> => {\n  return ImmutableMap<K8sResourceKindReference, K8sKind>().withMutations((map) => {\n    models.forEach((model) => map.set(modelKey(model), model));\n  });\n};\n\n/**\n * Contains static resource definitions for Kubernetes objects.\n * Keys are of type `group:version:Kind`, but TypeScript doesn't support regex types (https://github.com/Microsoft/TypeScript/issues/6579).\n */\nlet k8sModels = modelsToMap(_.values(staticModels));\n\nconst hasModel = (model: K8sKind) => k8sModels.has(modelKey(model));\n\nk8sModels = k8sModels.withMutations((map) => {\n  const pluginModels = _.flatMap(registry.getModelDefinitions().map((md) => md.properties.models));\n  map.merge(modelsToMap(pluginModels.filter((model) => !hasModel(model))));\n});\n\n/**\n * Provides a synchronous way to acquire a statically-defined Kubernetes model.\n * NOTE: This will not work for CRDs defined at runtime, use `connectToModels` instead.\n */\nexport const modelFor = (ref: K8sResourceKindReference) => {\n  let m = k8sModels.get(ref);\n  if (m) {\n    return m;\n  }\n  // FIXME: Remove synchronous `store.getState()` call here, should be using `connectToModels` instead, only here for backwards-compatibility\n  m = store\n    .getState()\n    .k8s.getIn(['RESOURCES', 'models'])\n    .get(ref);\n  if (m) {\n    return m;\n  }\n  m = k8sModels.get(kindForReference(ref));\n  if (m) {\n    return m;\n  }\n  m = store\n    .getState()\n    .k8s.getIn(['RESOURCES', 'models'])\n    .get(kindForReference(ref));\n  if (m) {\n    return m;\n  }\n};\n\n/**\n * Provides a synchronous way to acquire all statically-defined Kubernetes models.\n * NOTE: This will not work for CRDs defined at runtime, use `connectToModels` instead.\n */\nexport const allModels = () => k8sModels;\n","import * as _ from 'lodash-es';\n\nimport {\n  CustomResourceDefinitionKind,\n  GroupVersionKind,\n  K8sKind,\n  K8sResourceCommon,\n  K8sResourceKind,\n  K8sResourceKindReference,\n  OwnerReference,\n  modelFor,\n} from './index';\n\nexport const getQN: (obj: K8sResourceKind) => string = ({ metadata: { name, namespace } }) =>\n  (namespace ? `(${namespace})-` : '') + name;\n\nexport const k8sBasePath = `${window.SERVER_FLAGS.basePath}api/kubernetes`;\nexport const multiClusterBasePath = `${window.SERVER_FLAGS.basePath}api/multi-hypercloud`;\n\n// TODO(alecmerdler): Replace all manual string building with this function\nexport const referenceForGroupVersionKind = (group: string) => (version: string) => (\n  kind: string,\n) => {\n  if (kind === 'PipelineResource' || kind === 'ClusterTask' || kind === 'Task' || kind === 'ServiceClass' || kind === 'ClusterServiceClass') {\n    return kind;\n  }\n  return [group, version, kind].join('~')\n};\n\nexport const getGroupVersionKind = (\n  ref: GroupVersionKind | string,\n): [string, string, string] | undefined => {\n  const parts = ref.split('~');\n  if (parts.length !== 3) {\n    return undefined;\n  }\n  return parts as [string, string, string];\n};\n\nexport const isGroupVersionKind = (ref: GroupVersionKind | string) => ref.split('~').length === 3;\n\nexport const groupVersionFor = (apiVersion: string) => ({\n  group: apiVersion.split('/').length === 2 ? apiVersion.split('/')[0] : 'core',\n  version: apiVersion.split('/').length === 2 ? apiVersion.split('/')[1] : apiVersion,\n});\n\nconst parseAPIVersion = (version: string) => {\n  const parsed = /^v(\\d+)(?:(alpha|beta)(\\d+))?$/.exec(version);\n  return parsed\n    ? { majorVersion: Number(parsed[1]), qualifier: parsed[2], minorVersion: Number(parsed[3]) }\n    : null;\n};\n\nexport const apiVersionCompare = (v1: string, v2: string) => {\n  const v1Parsed = parseAPIVersion(v1);\n  const v2Parsed = parseAPIVersion(v2);\n\n  // Check null parsed versions first\n  if (!v1Parsed || !v2Parsed) {\n    // If a value fails null check order it last\n    if (v1Parsed) {\n      return -1;\n    }\n    if (v2Parsed) {\n      return 1;\n    }\n    return v1.localeCompare(v2);\n  }\n  // Then sort on major version with no qualifiers: v3 > v1\n  if (\n    v1Parsed.majorVersion !== v2Parsed.majorVersion &&\n    !v1Parsed.qualifier &&\n    !v2Parsed.qualifier\n  ) {\n    return v2Parsed.majorVersion - v1Parsed.majorVersion;\n  }\n  // Then sort on any version with no qualifier over a qualifier: v1 > v3alpha\n  if (_.isEmpty(v1Parsed.qualifier) !== _.isEmpty(v2Parsed.qualifier)) {\n    return v1Parsed.qualifier ? 1 : -1;\n  }\n  // Beta beats alpha: v1beta1 > v1alpha1\n  const isBetaV1 = v1Parsed.qualifier === 'beta';\n  const isBetaV2 = v2Parsed.qualifier === 'beta';\n  if (isBetaV1 !== isBetaV2) {\n    return isBetaV1 ? -1 : 1;\n  }\n  // Same qualifier, then numeric values win: v2beta2 > v1beta2\n  if (v1Parsed.majorVersion !== v2Parsed.majorVersion) {\n    return v2Parsed.majorVersion - v1Parsed.majorVersion;\n  }\n  // Finally compare minor version: v1beta2 > v1beta1\n  return v2Parsed.minorVersion - v1Parsed.minorVersion;\n};\n\nexport const getLatestVersionForCRD = (crd: CustomResourceDefinitionKind) => {\n  const sorted = crd.spec.versions\n    ?.filter((version) => version.served)\n    ?.map(({ name }) => name)\n    ?.sort(apiVersionCompare);\n  return parseAPIVersion(sorted?.[0]) ? sorted[0] : crd.spec.version;\n};\n\nexport const referenceForCRD = (obj: CustomResourceDefinitionKind): GroupVersionKind =>\n  referenceForGroupVersionKind(obj.spec.group)(getLatestVersionForCRD(obj))(obj.spec.names.kind);\n\nexport const referenceForOwnerRef = (ownerRef: OwnerReference): GroupVersionKind =>\n  referenceForGroupVersionKind(groupVersionFor(ownerRef.apiVersion).group)(\n    groupVersionFor(ownerRef.apiVersion).version,\n  )(ownerRef.kind);\n\nexport const referenceForModel = (model: K8sKind): GroupVersionKind =>\n  referenceForGroupVersionKind(model.apiGroup || 'core')(model.apiVersion)(model.kind);\n\nexport const referenceFor = ({ kind, apiVersion }: K8sResourceCommon): GroupVersionKind => {\n  if (!kind) {\n    return '';\n  }\n\n  // `apiVersion` is optional in some k8s object references (for instance,\n  // event `involvedObject`). The CLI resolves the version from API discovery.\n  // Use `modelFor` to get the version from the model when missing.\n  if (!apiVersion) {\n    const m = modelFor(kind);\n    return m ? referenceForModel(m) : '';\n  }\n\n  const { group, version } = groupVersionFor(apiVersion);\n  return referenceForGroupVersionKind(group)(version)(kind);\n};\n\nexport const kindForReference = (ref: K8sResourceKindReference) =>\n  isGroupVersionKind(ref) ? ref.split('~')[2] : ref;\n\nexport const apiGroupForReference = (ref: GroupVersionKind) => ref.split('~')[0];\n\nexport const versionForReference = (ref: GroupVersionKind) => ref.split('~')[1];\n\nexport const apiVersionForModel = (model: K8sKind) =>\n  _.isEmpty(model.apiGroup) ? model.apiVersion : `${model.apiGroup}/${model.apiVersion}`;\n\nexport const apiVersionForReference = (ref: GroupVersionKind) =>\n  isGroupVersionKind(ref) ? `${ref.split('~')[0]}/${ref.split('~')[1]}` : ref;\n\nexport const nameForModel = (model: K8sKind) => [model.plural, model.apiGroup].join('.');\n","/* eslint-disable guard-for-in, default-case, no-case-declarations */\n\n/**\n * Converted from Angular based  \"kubernetes-label-selector\"\n *    git://github.com/kubernetes-ui/label-selector.git\n *    author: Jessica Forrester <jforrest@redhat.com>\n **/\nimport * as _ from 'lodash-es';\n// selector (optional) - the JSON format as returned by k8s API, will also\n//      handle {key: null} as the key exists operator (not currently returned\n//      by API)\n// emptySelectsAll (optional) - whether a label selector with no conjuncts\n//      selects objects.  Typical behavior is false.  Example of an\n//      exceptional case is when filtering by labels, no label selectors\n//      means no filters.\nexport class LabelSelector {\n  constructor(selector, emptySelectsAll) {\n    this._conjuncts = {};\n    this._emptySelectsAll = !!emptySelectsAll;\n    // expects the JSON format as returned by k8s API\n    // Supports both the old selector syntax of just key: value pairs like on RCs\n    // as well as the new matchLabel and matchExpression syntax on newer controllers like ReplicaSets\n    // For now it will also handle key: null as key exists for backwards compatibility from before\n    // the matchExpression support was added.\n    this._OPERATOR_MAP = {\n      In: 'in',\n      NotIn: 'not in',\n      Exists: 'exists',\n      DoesNotExist: 'does not exist',\n    };\n    this._REVERSE_OPERATOR_MAP = {\n      in: 'In',\n      'not in': 'NotIn',\n      exists: 'Exists',\n      'does not exist': 'DoesNotExist',\n    };\n    if (selector) {\n      if (selector.matchLabels || selector.matchExpressions) {\n        _.forEach(\n          selector.matchLabels,\n          (details, key) => {\n            this.addConjunct(key, 'in', [details]);\n          },\n          this,\n        );\n        _.forEach(\n          selector.matchExpressions,\n          (expression) => {\n            this.addConjunct(\n              expression.key,\n              this._OPERATOR_MAP[expression.operator],\n              expression.values,\n            );\n          },\n          this,\n        );\n      } else {\n        _.forEach(\n          selector,\n          (details, key) => {\n            if (details || details === '') {\n              this.addConjunct(key, 'in', [details]);\n            } else {\n              this.addConjunct(key, 'exists', []);\n            }\n          },\n          this,\n        );\n      }\n    }\n  }\n\n  addConjunct(key, operator, values) {\n    const conjunct = {\n      key,\n      operator,\n      values,\n    };\n    const id = this._getIdForConjunct(conjunct);\n    this._conjuncts[id] = conjunct;\n    conjunct.id = id;\n    conjunct.string = this._getStringForConjunct(conjunct);\n    return conjunct;\n  }\n\n  // Can accept either the id of the conjunct to remove, or the conjunct\n  // object that was returned from a call to addConjunct\n  removeConjunct(conjunct) {\n    if (conjunct.id) {\n      delete this._conjuncts[conjunct.id];\n    } else {\n      delete this._conjuncts[conjunct];\n    }\n  }\n  clearConjuncts() {\n    this._conjuncts = {};\n  }\n  isEmpty() {\n    return _.isEmpty(this._conjuncts);\n  }\n  each(fn) {\n    _.forEach(this._conjuncts, fn);\n  }\n  select(resources) {\n    // If passed an array, return an array.\n    if (_.isArray(resources)) {\n      return _.filter(resources, _.bind(this.matches, this));\n    }\n    // Otherwise handle it as a map.\n    return _.pickBy(resources, _.bind(this.matches, this));\n  }\n  matches(resource) {\n    if (!resource) {\n      return false;\n    }\n    if (this.isEmpty()) {\n      return this._emptySelectsAll;\n    }\n    const labels = resource.metadata.labels || {};\n    for (const id in this._conjuncts) {\n      const conjunct = this._conjuncts[id];\n      switch (conjunct.operator) {\n        case 'exists':\n          if (!labels[conjunct.key] && labels[conjunct.key] !== '') {\n            return false;\n          }\n          break;\n        case 'does not exist':\n          if (labels[conjunct.key] || labels[conjunct.key] === '') {\n            return false;\n          }\n          break;\n        case 'in':\n          let found = false;\n          if (labels[conjunct.key] || labels[conjunct.key] === '') {\n            for (let i = 0; !found && i < conjunct.values.length; i++) {\n              if (labels[conjunct.key] === conjunct.values[i]) {\n                found = true;\n              }\n            }\n          }\n          if (!found) {\n            return false;\n          }\n          break;\n        case 'not in':\n          let keep = true;\n          if (labels[conjunct.key]) {\n            for (let i = 0; keep && i < conjunct.values.length; i++) {\n              keep = labels[conjunct.key] !== conjunct.values[i];\n            }\n          }\n          if (!keep) {\n            return false;\n          }\n      }\n    }\n    return true;\n  }\n  hasConjunct(conjunct) {\n    return !!this._conjuncts[this._getIdForConjunct(conjunct)];\n  }\n  findConjunctsMatching(operator, key) {\n    return _.pickBy(\n      this._conjuncts,\n      _.matches({\n        operator,\n        key,\n      }),\n    );\n  }\n  // Test whether this label selector covers the given selector\n  covers(selector) {\n    if (this.isEmpty()) {\n      // TODO don't think we ever want to consider an empty\n      // label selector as covering any other label selector\n      return false;\n    }\n    return _.every(this._conjuncts, function(conjunct) {\n      // Return true immediately if we find an exact match for operator/key/values\n      if (selector.hasConjunct(conjunct)) {\n        return true;\n      }\n      // If we can't find a conjunct that matches exactly, do a more detailed check\n      switch (conjunct.operator) {\n        case 'exists':\n          // If an Exists conjunct existed for the same key in selector it\n          // would have passed the exact match, just need to check if an In\n          // conjunct exists for the same key\n          return !_.isEmpty(selector.findConjunctsMatching('in', conjunct.key));\n        case 'does not exist':\n          // A DoesNotExist can only cover a DoesNotExist operator, if we got here\n          // then we didn't have a DNE with the same key so we know we can't cover\n          return false;\n        case 'in':\n          // In (A,B,C) covers In (A,B) AND In (B,C)\n          const inConjuncts = selector.findConjunctsMatching('in', conjunct.key);\n          if (_.isEmpty(inConjuncts)) {\n            return false;\n          }\n          return _.every(inConjuncts, function(inConjunct) {\n            return (\n              inConjunct.values.length === _.intersection(inConjunct.values, conjunct.values).length\n            );\n          });\n        case 'not in':\n          // NotIn (A,B) covers NotIn (A,B,C) AND NotIn (A,B,D)\n          const notInConjuncts = selector.findConjunctsMatching('not in', conjunct.key);\n          if (_.isEmpty(notInConjuncts)) {\n            return false;\n          }\n          return _.every(notInConjuncts, function(notInConjunct) {\n            return (\n              conjunct.values.length ===\n              _.intersection(notInConjunct.values, conjunct.values).length\n            );\n          });\n      }\n      return true;\n    });\n  }\n\n  // Exports the labelSelector as a string in the API format, exports as matchExpressions\n  exportJSON() {\n    const result = {\n      matchExpressions: [],\n    };\n    for (const id in this._conjuncts) {\n      const conjunct = this._conjuncts[id];\n      const expression = {\n        key: conjunct.key,\n        operator: this._REVERSE_OPERATOR_MAP[conjunct.operator],\n        values: conjunct.values,\n      };\n      result.matchExpressions.push(expression);\n    }\n    return JSON.stringify(result);\n  }\n\n  // We assume label values have no whitespace, commas, parens, etc. based\n  // on k8s def for label values\n  _getStringForConjunct(conjunct) {\n    let conjunctString = conjunct.key;\n    if (conjunct.operator === 'exists') {\n      return `${conjunctString} exists`;\n    } else if (conjunct.operator === 'does not exist') {\n      return `${conjunctString} does not exist`;\n    }\n    if (conjunct.operator === 'not in') {\n      conjunctString += ' not';\n    }\n    conjunctString += ' in (';\n    for (let i = 0; i < conjunct.values.length; i++) {\n      if (conjunct.values[i] === '') {\n        conjunctString += '\"\"';\n      } else {\n        conjunctString += conjunct.values[i];\n      }\n      if (i !== conjunct.values.length - 1) {\n        conjunctString += ', ';\n      }\n    }\n    conjunctString += ')';\n\n    return conjunctString;\n  }\n\n  _getIdForConjunct(conjunct) {\n    let id = `${conjunct.key}-${conjunct.operator}`;\n    if (conjunct.values) {\n      id += `-${conjunct.values.join(',')}`;\n    }\n    return id;\n  }\n}\n","import * as _ from 'lodash-es';\n\nimport { ContainerSpec, ContainerStatus, PodKind, Volume, VolumeMount } from './types';\n\nconst getRestartPolicy = (pod: PodKind) =>\n  _.find(\n    {\n      Always: {\n        // A unique id to identify the type, used as the value when communicating with the API.\n        id: 'Always',\n        // What is shown in the UI.\n        label: 'Always Restart',\n        // Description in the UI.\n        description:\n          'If the container restarts for any reason, restart it. ' +\n          'Useful for stateless services that may fail from time to time.',\n        // Default selection for new pods.\n        default: true,\n      },\n      OnFailure: {\n        id: 'OnFailure',\n        label: 'Restart On Failure',\n        description: 'If the container exits with a non-zero status code, restart it.',\n      },\n      Never: {\n        id: 'Never',\n        label: 'Never Restart',\n        description:\n          'Never restart the container. ' +\n          'Useful for containers that exit when they have completed a specific job, like a data import daemon.',\n      },\n    },\n    { id: _.get<any, string>(pod, 'spec.restartPolicy') },\n  );\n\nexport const VolumeSource = {\n  emptyDir: {\n    id: 'emptyDir',\n    label: 'Container Volume',\n    description: \"Temporary directory that shares a pod's lifetime.\",\n  },\n  hostPath: {\n    id: 'hostPath',\n    label: 'Host Directory',\n    description:\n      'Pre-existing host file or directory, ' +\n      'generally for privileged system daemons or other agents tied to the host.',\n  },\n  gitRepo: {\n    id: 'gitRepo',\n    label: 'Git Repo',\n    description: 'Git repository at a particular revision.',\n  },\n  nfs: {\n    id: 'nfs',\n    label: 'NFS',\n    description: 'NFS volume that will be mounted in the host machine.',\n  },\n  secret: {\n    id: 'secret',\n    label: 'Secret',\n    description: 'Secret to populate volume.',\n  },\n  gcePersistentDisk: {\n    id: 'gcePersistentDisk',\n    label: 'GCE Persistent Disk',\n    description: 'GCE disk resource attached to the host machine on demand.',\n  },\n  awsElasticBlockStore: {\n    id: 'awsElasticBlockStore',\n    label: 'AWS Elastic Block Store',\n    description: 'AWS disk resource attached to the host machine on demand.',\n  },\n  glusterfs: {\n    id: 'glusterfs',\n    label: 'Gluster FS',\n    description: 'GlusterFS volume that will be mounted on the host machine.',\n  },\n  iscsi: {\n    id: 'iscsi',\n    label: 'iSCSI',\n    description: 'iSCSI disk attached to host machine on demand',\n  },\n  configMap: {\n    id: 'configMap',\n    label: 'ConfigMap',\n    description: 'ConfigMap to be consumed in volume.',\n  },\n  projected: {\n    id: 'projected',\n    label: 'Projected',\n    description: 'A projected volume maps several existing volume sources into the same directory.',\n  },\n};\n\nexport const getVolumeType = (volume: Volume) => {\n  if (!volume) {\n    return null;\n  }\n  return _.find(VolumeSource, function(v) {\n    return !!volume[v.id];\n  });\n};\n\nconst genericFormatter = (volInfo) => {\n  const keys = Object.keys(volInfo).sort();\n  const parts = keys.map(function(key) {\n    if (key === 'readOnly') {\n      return '';\n    }\n    return volInfo[key];\n  });\n  if (keys.indexOf('readOnly') !== -1) {\n    parts.push(volInfo.readOnly ? 'ro' : 'rw');\n  }\n  return parts.join(' ') || null;\n};\n\nexport const getVolumeLocation = (volume: Volume) => {\n  const vtype = getVolumeType(volume);\n  if (!vtype) {\n    return null;\n  }\n\n  const typeID = vtype.id;\n  const info = volume[typeID];\n  switch (typeID) {\n    // Override any special formatting cases.\n    case VolumeSource.gitRepo.id:\n      return `${info.repository}:${info.revision}`;\n    case VolumeSource.configMap.id:\n    case VolumeSource.emptyDir.id:\n    case VolumeSource.secret.id:\n    case VolumeSource.projected.id:\n      return null;\n    // Defaults to space separated sorted keys.\n    default:\n      return genericFormatter(info);\n  }\n};\n\nexport const getRestartPolicyLabel = (pod: PodKind) => _.get(getRestartPolicy(pod), 'label', '');\n\nexport type PodReadiness = string;\nexport type PodPhase = string;\n\nexport const getVolumeMountPermissions = (v: VolumeMount) => {\n  if (!v) {\n    return null;\n  }\n\n  return v.readOnly ? 'Read-only' : 'Read/Write';\n};\n\nexport const getVolumeMountsByPermissions = (pod: PodKind) => {\n  if (!pod || !pod.spec || !pod.spec.volumes) {\n    return [];\n  }\n  const m = {};\n\n  const volumes = (pod.spec.volumes || []).reduce((p, v: Volume) => {\n    p[v.name] = v;\n    return p;\n  }, {});\n\n  _.forEach(pod.spec.containers, (c: ContainerSpec) => {\n    _.forEach(c.volumeMounts, (v: VolumeMount) => {\n      const k = `${v.name}_${v.readOnly ? 'ro' : 'rw'}`;\n      const mount = { container: c.name, mountPath: v.mountPath, subPath: v.subPath };\n      if (k in m) {\n        return m[k].mounts.push(mount);\n      }\n      m[k] = { mounts: [mount], name: v.name, readOnly: !!v.readOnly, volume: volumes[v.name] };\n    });\n  });\n\n  return _.values(m);\n};\n\nexport const podRestarts = (pod: PodKind): number => {\n  if (!pod || !pod.status) {\n    return 0;\n  }\n  const { initContainerStatuses = [], containerStatuses = [] } = pod.status;\n  const isInitializing = initContainerStatuses.some(({ state }) => {\n    return !state.terminated || state.terminated.exitCode !== 0;\n  });\n  const toCheck = isInitializing ? initContainerStatuses : containerStatuses;\n  return toCheck.reduce(\n    (restartCount, status: ContainerStatus) => restartCount + status.restartCount,\n    0,\n  );\n};\n\nexport const podReadiness = (pod: PodKind): { readyCount: number; totalContainers: number } => {\n  // Don't include init containers in readiness count. This is consistent with the CLI.\n  const containerStatuses = pod?.status?.containerStatuses || [];\n  return containerStatuses.reduce(\n    (acc, { ready }: ContainerStatus) => {\n      if (ready) {\n        acc.readyCount = acc.readyCount + 1;\n      }\n      return acc;\n    },\n    { readyCount: 0, totalContainers: containerStatuses.length },\n  );\n};\n\n// This logic is replicated from k8s (at this writing, Kubernetes 1.17)\n// (See https://github.com/kubernetes/kubernetes/blob/release-1.17/pkg/printers/internalversion/printers.go)\nexport const podPhase = (pod: PodKind): PodPhase => {\n  if (!pod || !pod.status) {\n    return '';\n  }\n\n  if (pod.metadata.deletionTimestamp) {\n    return 'Terminating';\n  }\n\n  if (pod.status.reason === 'NodeLost') {\n    return 'Unknown';\n  }\n\n  if (pod.status.reason === 'Evicted') {\n    return 'Evicted';\n  }\n\n  let initializing = false;\n  let phase = pod.status.phase || pod.status.reason;\n\n  _.each(pod.status.initContainerStatuses, (container: ContainerStatus, i: number) => {\n    const { terminated, waiting } = container.state;\n    if (terminated && terminated.exitCode === 0) {\n      return true;\n    }\n\n    initializing = true;\n    if (terminated && terminated.reason) {\n      phase = `Init:${terminated.reason}`;\n    } else if (terminated && !terminated.reason) {\n      phase = terminated.signal\n        ? `Init:Signal:${terminated.signal}`\n        : `Init:ExitCode:${terminated.exitCode}`;\n    } else if (waiting && waiting.reason && waiting.reason !== 'PodInitializing') {\n      phase = `Init:${waiting.reason}`;\n    } else {\n      phase = `Init:${i}/${pod.status.initContainerStatuses.length}`;\n    }\n    return false;\n  });\n\n  if (!initializing) {\n    let hasRunning = false;\n    const containerStatuses = pod.status.containerStatuses || [];\n    for (let i = containerStatuses.length - 1; i >= 0; i--) {\n      const {\n        state: { running, terminated, waiting },\n        ready,\n      } = containerStatuses[i];\n      if (terminated && terminated.reason) {\n        phase = terminated.reason;\n      } else if (waiting && waiting.reason) {\n        phase = waiting.reason;\n      } else if (waiting && !waiting.reason) {\n        phase = terminated.signal\n          ? `Signal:${terminated.signal}`\n          : `ExitCode:${terminated.exitCode}`;\n      } else if (running && ready) {\n        hasRunning = true;\n      }\n    }\n\n    // Change pod status back to \"Running\" if there is at least one container\n    // still reporting as \"Running\" status.\n    if (phase === 'Completed' && hasRunning) {\n      phase = 'Running';\n    }\n  }\n\n  return phase;\n};\n\nexport const podPhaseFilterReducer = (pod: PodKind): PodPhase => {\n  const status = podPhase(pod);\n  if (status === 'Terminating') {\n    return status;\n  }\n  if (status.includes('CrashLoopBackOff')) {\n    return 'CrashLoopBackOff';\n  }\n  return _.get(pod, 'status.phase', 'Unknown');\n};\n","import * as _ from 'lodash-es';\nimport { coFetchJSON } from '../../co-fetch';\nimport { k8sBasePath, multiClusterBasePath } from './k8s';\nimport { selectorToString } from './selector';\nimport { WSFactory } from '../ws-factory';\nimport { getActivePerspective, getActiveCluster } from '../../actions/ui';\nimport { getId, getUserGroup } from '../../hypercloud/auth';\nimport { kindToSchemaPath } from '../hypercloud/k8s/kind-to-schema-path.ts'\n\nexport const getDynamicProxyPath = (cluster) => {\n  if (window.SERVER_FLAGS.McMode && getActivePerspective() == 'hc') {\n    return `${window.SERVER_FLAGS.basePath}api/${getActiveCluster()}`;\n  } else if (cluster) {\n    return `${window.SERVER_FLAGS.basePath}api/${cluster}`;\n  } else {\n    return k8sBasePath;\n  }\n};\n\n/** @type {(model: K8sKind) => string} */\nexport const getK8sAPIPath = ({ apiGroup = 'core', apiVersion}, cluster)\n=> {\n  const isLegacy = apiGroup === 'core' && apiVersion === 'v1';\n\n  let p = getDynamicProxyPath(cluster);\n\n  if (isLegacy) {\n    p += '/api/';\n  } else {\n    p += '/apis/';\n  }\n\n  if (!isLegacy && apiGroup) {\n    p += `${apiGroup}/`;\n  }\n\n  p += apiVersion;\n  return p;\n};\n\n/** @type {(model: K8sKind) => string} */\nconst getClusterAPIPath = ({ apiGroup = 'core', apiVersion}, cluster)\n=> {\n  const isLegacy = apiGroup === 'core' && apiVersion === 'v1';\n  let p = multiClusterBasePath;\n\n  if (window.SERVER_FLAGS.McMode && getActivePerspective() == 'hc') {\n    p = `${window.SERVER_FLAGS.basePath}api/${getActiveCluster()}`;\n  } else if (cluster) {\n    p = `${window.SERVER_FLAGS.basePath}api/${cluster}`;\n  }\n  return p;\n};\n\n/** @type {(model: GroupVersionKind, options: {ns?: string, name?: string, path?: string, queryParams?: {[k: string]: string}}) => string} */\n// export const resourceURL = (model, options, listName) => {\nexport const resourceURL = (model, options) => {\n  let q = '';\n  let u = getK8sAPIPath(model, options.cluster);\n\n  if (options.ns) {\n    u += `/namespaces/${options.ns}`;\n  }\n  u += `/${model.plural}`;\n  if (options.name) {\n    // Some resources like Users can have special characters in the name.\n    u += `/${encodeURIComponent(options.name)}`;\n  }\n  if (options.path) {\n    u += `/${options.path}`;\n  }\n  if (!_.isEmpty(options.queryParams)) {\n    q = _.map(options.queryParams, function(v, k) {\n      return `${k}=${v}`;\n    });\n    u += `?${q.join('&')}`;\n  }\n\n  return u;\n};\n\nexport const resourceClusterURL = (model, options) => {\n  let q = '';\n  let u = getClusterAPIPath(model, options.cluster);\n\n  if (options.ns) {\n    u += `/namespaces/${options.ns}`;\n  }\n  u += `/${model.plural}`;\n  if (options.name) {\n    // Some resources like Users can have special characters in the name.\n    u += `/${encodeURIComponent(options.name)}`;\n  }\n  if (options.path) {\n    u += `/${options.path}`;\n  }\n  if (!_.isEmpty(options.queryParams)) {\n    q = _.map(options.queryParams, function(v, k) {\n      return `${k}=${v}`;\n    });\n    u += `?${q.join('&')}`;\n\n  }\n\n  if(isCluster(model)) {\n    return `${u}?userId=${getId()}${getUserGroup()}&accessOnly=false`;\n  }\n  return `${u}?userId=${getId()}${getUserGroup()}`;\n}\n\nexport const resourceApprovalURL = (model, options, approval) => {\n  return resourceURL(model, options).replace('cicd', 'cicdapi') + `/${approval}`\n}\n\nconst isCluster = (model) => {\n  if(model.kind === 'ClusterManager') {\n    return true;\n  }\n  return false;\n}\n\nconst isClusterClaim = (model) => {\n  if(model.kind === 'ClusterClaim') {\n    return true;\n  }\n  return false;\n}\n\nexport const watchURL = (kind, options) => {\n  const opts = options || {};\n\n  opts.queryParams = opts.queryParams || {};\n  opts.queryParams.watch = true;\n  return resourceURL(kind, opts);\n};\n\nexport const k8sGet = (kind, name, ns, opts) => coFetchJSON(resourceURL(kind, Object.assign({ ns, name }, opts)));\n\nexport const k8sCreate = (kind, data, opts = {}) => {\n  // Occassionally, a resource won't have a metadata property.\n  // For example: apps.openshift.io/v1 DeploymentRequest\n  // https://github.com/openshift/api/blob/master/apps/v1/types.go\n  data.metadata = data.metadata || {};\n\n  // Lowercase the resource name\n  // https://github.com/kubernetes/kubernetes/blob/HEAD/docs/user-guide/identifiers.md#names\n  if (data.metadata.name && _.isString(data.metadata.name) && !data.metadata.generateName) {\n    data.metadata.name = data.metadata.name.toLowerCase();\n  }\n\n  return coFetchJSON.post(resourceURL(kind, Object.assign({ ns: data.metadata.namespace }, opts)), data);\n};\n\nexport const k8sCreateUrl = (kind, data, opts = {}) => {\n  return coFetchJSON.post(resourceURL(kind, opts), data);\n}\n\n\nexport const k8sUpdate = (kind, data, ns, name) => coFetchJSON.put(resourceURL(kind, { ns: ns || data.metadata.namespace, name: name || data.metadata.name }), data);\n\nexport const k8sUpdateApproval = (kind, resource, approval, data, method = 'PUT') => {\n  const url = resourceApprovalURL(\n    kind,\n    Object.assign(\n      {\n        ns: resource.metadata.namespace,\n        name: resource.metadata.name,\n      },\n    ),\n    approval,\n  );\n\n  switch(method) {\n    case 'PATCH': {\n      return coFetchJSON.patch(url, data);\n    }\n    default: {\n      return coFetchJSON.put(url, data);\n    }\n  }\n}\n\nexport const k8sUpdateClaim = (kind, clusterClaim, admit, reason, userName, nameSpace) => {\n\n  const resourceClusterURL = `api/multi-hypercloud/namespaces/${nameSpace}/clusterclaims/${clusterClaim}?userId=${getId()}${getUserGroup()}`;\n\n  const url = resourceClusterURL + `&admit=${admit}&reason=${reason}&userName=${userName}&memberName=cho`;\n\n  return coFetchJSON.put(url);\n}\n\nexport const k8sPatch = (kind, resource, data, opts = {}) => {\n  const patches = _.compact(data);\n\n  if (_.isEmpty(patches)) {\n    return Promise.resolve(resource);\n  }\n\n  return coFetchJSON.patch(\n    resourceURL(\n      kind,\n      Object.assign(\n        {\n          ns: resource.metadata.namespace,\n          name: resource.metadata.name,\n        },\n        opts,\n      ),\n    ),\n    patches,\n  );\n};\n\nexport const k8sCreateSchema = (kind) => {\n  const directory = kindToSchemaPath.get(kind)?.['directory'];\n  const file = kindToSchemaPath.get(kind)?.['file'];\n  const schemaUrl = `/api/resource/${directory}/${file}`;\n  return coFetchJSON(`${schemaUrl}`, 'GET');\n}\n\nexport const k8sPatchByName = (kind, name, namespace, data, opts = {}) => k8sPatch(kind, { metadata: { name, namespace } }, data, opts);\n\nexport const k8sKill = (kind, resource, opts = {}, json = null) => coFetchJSON.delete(resourceURL(kind, Object.assign({ ns: resource.metadata.namespace, name: resource.metadata.name }, opts)), opts, json);\n\nexport const k8sKillByName = (kind, name, namespace, opts = {}) => k8sKill(kind, { metadata: { name, namespace } }, opts);\n\nexport const k8sList = (kind, params = {}, raw = false, options = {}) => {\n  const query = _.map(_.omit(params, 'ns'), (v, k) => {\n    if (k === 'labelSelector') {\n      v = selectorToString(v);\n    }\n    return `${encodeURIComponent(k)}=${encodeURIComponent(v)}`;\n  }).join('&');\n\n  // if(isCluster(kind) || isClusterClaim(kind)) {\n  //   const listClusterURL = resourceClusterURL(kind);\n  //   return coFetchJSON(`${listClusterURL}`, 'GET').then((result) => raw ? result: result.items);\n  // }\n\n  let isMultiCluster = isCluster(kind) || isClusterClaim(kind);\n  let listURL = isMultiCluster ? resourceClusterURL(kind, {ns: params.ns}) : resourceURL(kind, { ns: params.ns });\n  // let listURL = resourceURL(kind, { ns: params.ns });\n  if(localStorage.getItem('bridge/last-perspective') === 'hc') {\n    return coFetchJSON(`${listURL}?${query}`, 'GET', options).then(result => (raw ? result : result.items));\n  }\n\n  if (kind.kind === 'Namespace') {\n    listURL = `${document.location.origin}/api/hypercloud/namespace?userId=${getId()}${getUserGroup()}`;\n    return coFetchJSON(`${listURL}`, 'GET', options).then(result => (raw ? result : result.items));\n  } else if (kind.kind === 'NamespaceClaim') {\n    listURL = `${document.location.origin}/api/hypercloud/namespaceClaim?userId=${getId()}${getUserGroup()}`;\n    return coFetchJSON(`${listURL}`, 'GET', options).then(result => (raw ? result : result.items));\n  } else if (isMultiCluster){\n    return coFetchJSON(`${listURL}`, 'GET', options).then(result => (raw ? result : result.items));  \n  }\n  else {\n    return coFetchJSON(`${listURL}?${query}`, 'GET', options).then(result => (raw ? result : result.items));\n  }\n};\n\nexport const k8sListPartialMetadata = (kind, params = {}, raw = false) => {\n  return k8sList(kind, params, raw, {\n    headers: {\n      Accept: 'application/json;as=PartialObjectMetadataList;v=v1beta1;g=meta.k8s.io,application/json',\n    },\n  });\n};\n\nexport const k8sWatch = (kind, query = {}, wsOptions = {}) => {\n  const queryParams = { watch: true };\n  const opts = { queryParams };\n  wsOptions = Object.assign(\n    {\n      host: 'auto',\n      reconnect: true,\n      jsonParse: true,\n      bufferFlushInterval: 500,\n      bufferMax: 1000,\n    },\n    wsOptions,\n  );\n\n  const labelSelector = query.labelSelector || kind.labelSelector;\n  if (labelSelector) {\n    const encodedSelector = encodeURIComponent(selectorToString(labelSelector));\n    if (encodedSelector) {\n      queryParams.labelSelector = encodedSelector;\n    }\n  }\n\n  if (query.fieldSelector) {\n    queryParams.fieldSelector = encodeURIComponent(query.fieldSelector);\n  }\n\n  if (query.ns) {\n    opts.ns = query.ns;\n  }\n\n  if (query.resourceVersion) {\n    queryParams.resourceVersion = encodeURIComponent(query.resourceVersion);\n  }\n\n  const path = resourceURL(kind, opts);\n  wsOptions.path = path;\n  return new WSFactory(path, wsOptions);\n};\n","import * as _ from 'lodash-es';\n\nconst toArray = (value) => (Array.isArray(value) ? value : [value]);\n\nexport const createEquals = (key, value) => ({\n  key,\n  operator: 'Equals',\n  values: [value],\n});\n\nexport const requirementFromString = (string) => {\n  string = string.trim();\n\n  // \"key\"\n  if (/^[0-9A-Za-z/\\-_.]+$/.test(string)) {\n    return {\n      key: string,\n      operator: 'Exists',\n      values: [],\n    };\n  }\n\n  // \"!key\"\n  if (/^!\\s*[0-9A-Za-z/\\-_.]+$/.test(string)) {\n    return {\n      key: string.split(/!\\s*/)[1],\n      operator: 'DoesNotExist',\n      values: [],\n    };\n  }\n\n  // \"key=value\" OR \"key==value\"\n  if (/^[0-9A-Za-z/\\-_.]+\\s*==?\\s*[0-9A-Za-z/\\-_.]+$/.test(string)) {\n    const parts = string.split(/\\s*==?\\s*/);\n    const key = parts[0];\n    const value = parts[1];\n    return createEquals(key, value);\n  }\n\n  // \"key!=value\"\n  if (/^[0-9A-Za-z/\\-_.]+\\s*!=\\s*[0-9A-Za-z/\\-_.]+$/.test(string)) {\n    return {\n      key: string.split(/\\s*!=\\s*/)[0],\n      operator: 'NotEquals',\n      values: [string.split(/\\s*!=\\s*/)[1]],\n    };\n  }\n\n  // \"key in (value1[,value2,...])\"\n  if (/^[0-9A-Za-z/\\-_.]+\\s+in\\s+\\([0-9A-Za-z/\\-_.,\\s]+\\)$/.test(string)) {\n    const parts = string.split(/\\s+in\\s+/);\n    const key = parts[0];\n    const values = parts[1]\n      .slice(1, -1)\n      .split(',')\n      .map(_.trim);\n\n    return {\n      key,\n      operator: 'In',\n      values,\n    };\n  }\n\n  // \"key notin (value1[,value2,...])\"\n  if (/^[0-9A-Za-z/\\-_.]+\\s+notin\\s+\\([0-9A-Za-z/\\-_.,\\s]+\\)$/.test(string)) {\n    const parts = string.split(/\\s+notin\\s+/);\n    const key = parts[0];\n    const values = parts[1]\n      .slice(1, -1)\n      .split(',')\n      .map(_.trim);\n\n    return {\n      key,\n      operator: 'NotIn',\n      values,\n    };\n  }\n\n  // \"key > value1\"\n  if (/^[0-9A-Za-z/\\-_.]+\\s+>\\s+[0-9.]+$/.test(string)) {\n    const parts = string.split(/\\s+>\\s+/);\n    const key = parts[0];\n    const value = parts[1];\n\n    return {\n      key,\n      operator: 'GreaterThan',\n      values: [value],\n    };\n  }\n\n  // \"key < value1\"\n  if (/^[0-9A-Za-z/\\-_.]+\\s+<\\s+[0-9.]+$/.test(string)) {\n    const parts = string.split(/\\s+<\\s+/);\n    const key = parts[0];\n    const value = parts[1];\n\n    return {\n      key,\n      operator: 'LessThan',\n      values: [value],\n    };\n  }\n\n  return; // falsy means parsing failure\n};\n\nexport const requirementToString = (requirement) => {\n  if (requirement.operator === 'Equals') {\n    return `${requirement.key}=${requirement.values[0]}`;\n  }\n\n  if (requirement.operator === 'NotEquals') {\n    return `${requirement.key}!=${requirement.values[0]}`;\n  }\n\n  if (requirement.operator === 'Exists') {\n    return requirement.key;\n  }\n\n  if (requirement.operator === 'DoesNotExist') {\n    return `!${requirement.key}`;\n  }\n\n  if (requirement.operator === 'In') {\n    return `${requirement.key} in (${toArray(requirement.values).join(',')})`;\n  }\n\n  if (requirement.operator === 'NotIn') {\n    return `${requirement.key} notin (${toArray(requirement.values).join(',')})`;\n  }\n\n  if (requirement.operator === 'GreaterThan') {\n    return `${requirement.key} > ${requirement.values[0]}`;\n  }\n\n  if (requirement.operator === 'LessThan') {\n    return `${requirement.key} < ${requirement.values[0]}`;\n  }\n\n  return; // falsy means malformed requirement\n};\n","import { createEquals, requirementFromString, requirementToString } from './selector-requirement';\nimport { Selector, MatchExpression, MatchLabels } from './index';\n\nconst isOldFormat = (selector: Selector | MatchLabels) =>\n  !selector.matchLabels && !selector.matchExpressions;\n\ntype Options = { undefinedWhenEmpty?: boolean; basic?: boolean };\n\nexport const fromRequirements = (requirements: MatchExpression[], options = {} as Options) => {\n  options = options || {};\n  const selector = {\n    matchLabels: {},\n    matchExpressions: [],\n  };\n\n  if (options.undefinedWhenEmpty && requirements.length === 0) {\n    return;\n  }\n\n  requirements.forEach((r) => {\n    if (r.operator === 'Equals') {\n      selector.matchLabels[r.key] = r.values[0];\n    } else {\n      selector.matchExpressions.push(r);\n    }\n  });\n\n  // old selector format?\n  if (options.basic) {\n    return selector.matchLabels;\n  }\n\n  return selector;\n};\n\nexport const split = (str: string) => (str.trim() ? str.split(/,(?![^(]*\\))/) : []); // [''] -> []\n\nexport const toRequirements = (selector: Selector = {}) => {\n  const requirements = [];\n  const matchLabels = isOldFormat(selector) ? selector : selector.matchLabels;\n  const matchExpressions = selector.matchExpressions;\n\n  Object.keys(matchLabels || {})\n    .sort()\n    .forEach(function(k) {\n      requirements.push(createEquals(k, matchLabels[k]));\n    });\n\n  (matchExpressions || []).forEach(function(me) {\n    requirements.push(me);\n  });\n\n  return requirements;\n};\n\nexport const selectorFromString = (str: string) => {\n  const requirements = split(str || '').map(requirementFromString) as MatchExpression[];\n  return fromRequirements(requirements);\n};\n\nexport const selectorToString = (selector: Selector) => {\n  const requirements = toRequirements(selector);\n  return requirements.map(requirementToString).join(',');\n};\n","import * as _ from 'lodash-es';\n\nimport { K8sResourceKind } from '../../module/k8s';\n\nexport const serviceClassDisplayName = (serviceClass: K8sResourceKind): string =>\n  _.get(serviceClass, 'spec.externalMetadata.displayName') ||\n  _.get(serviceClass, 'spec.externalName');\n\nexport const servicePlanDisplayName = (servicePlan: K8sResourceKind): string =>\n  _.get(servicePlan, 'spec.externalMetadata.displayName') ||\n  _.get(servicePlan, 'spec.externalName');\n\nexport const planExternalName = (serviceInstance: K8sResourceKind): string =>\n  _.get(serviceInstance, 'spec.clusterServicePlanExternalName') ||\n  _.get(serviceInstance, 'spec.servicePlanExternalName');\n\nconst statusCondition = (obj: K8sResourceKind, type: string) => {\n  return _.find(_.get(obj, 'status.conditions'), { type });\n};\n\nconst isStatusReady = (obj: K8sResourceKind) => {\n  return _.get(statusCondition(obj, 'Ready'), 'status') === 'True';\n};\n\nexport const serviceCatalogStatus = (obj: K8sResourceKind) => {\n  const conditions = _.get(obj, 'status.conditions');\n  const statusError = _.find(conditions, { type: 'Failed', status: 'True' });\n\n  if (statusError) {\n    return 'Failed';\n  }\n\n  if (isStatusReady(obj)) {\n    return 'Ready';\n  }\n\n  return 'Not Ready';\n};\n","import * as _ from 'lodash-es';\n\nimport { STORAGE_PREFIX } from '@console/shared/src/constants';\nimport { coFetchJSON } from '../../co-fetch';\nimport { K8sKind, referenceForModel } from './';\n\nconst SWAGGER_LOCAL_STORAGE_KEY = `${STORAGE_PREFIX}/swagger-definitions`;\n\nexport const getDefinitionKey = _.memoize(\n  (model: K8sKind, definitions: SwaggerDefinitions): string => {\n    return _.findKey(definitions, (def: SwaggerDefinition) => {\n      return _.some(def['x-kubernetes-group-version-kind'], ({ group, version, kind }) => {\n        return (\n          (model.apiGroup || '') === (group || '') &&\n          model.apiVersion === version &&\n          model.kind === kind\n        );\n      });\n    });\n  },\n  referenceForModel,\n);\n\n// Cache parsed swagger to avoid reparsing the JSON each call.\nlet swagger: SwaggerDefinitions;\nexport const getStoredSwagger = (): SwaggerDefinitions => {\n  if (swagger) {\n    return swagger;\n  }\n  const json = window.localStorage.getItem(SWAGGER_LOCAL_STORAGE_KEY);\n  if (!json) {\n    return null;\n  }\n  try {\n    swagger = JSON.parse(json);\n    return swagger;\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('Could not parse swagger JSON.', e);\n    return null;\n  }\n};\n\nconst storeSwagger = (definitions: SwaggerDefinitions) => {\n  // Only store definitions to reduce the document size.\n  const json = JSON.stringify(definitions);\n  window.localStorage.setItem(SWAGGER_LOCAL_STORAGE_KEY, json);\n  swagger = definitions;\n};\n\nexport const fetchSwagger = async (): Promise<SwaggerDefinitions> => {\n  try {\n    const response: SwaggerAPISpec = await coFetchJSON('api/kubernetes/openapi/v2');\n    if (!response.definitions) {\n      // eslint-disable-next-line no-console\n      console.error('Definitions missing in OpenAPI response.');\n      return null;\n    }\n    storeSwagger(response.definitions);\n    return response.definitions;\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('Could not get OpenAPI definitions', e);\n    return null;\n  }\n};\n\nexport const definitionFor = _.memoize((model: K8sKind): SwaggerDefinition => {\n  const allDefinitions: SwaggerDefinitions = getStoredSwagger();\n  if (!allDefinitions) {\n    return null;\n  }\n  const key = getDefinitionKey(model, allDefinitions);\n  return _.get(allDefinitions, key);\n}, referenceForModel);\n\nconst getRef = (definition: SwaggerDefinition): string => {\n  const ref = definition.$ref || _.get(definition, 'items.$ref');\n  const re = /^#\\/definitions\\//;\n  // Only follow JSON pointers, not external URI references.\n  return ref && re.test(ref) ? ref.replace(re, '') : null;\n};\n\n// Get the path in the swagger document to additional property details.\n// This can be\n// - A reference to another top-level definition\n// - Inline property declartions\n// - Inline property declartions for array items\nexport const getSwaggerPath = (\n  allProperties: SwaggerDefinitions,\n  currentPath: string[],\n  name: string,\n  followRef: boolean,\n): string[] => {\n  const nextPath = [...currentPath, 'properties', name];\n  const definition = _.get(allProperties, nextPath) as SwaggerDefinition;\n  if (!definition) {\n    return null;\n  }\n  const ref = getRef(definition);\n  return followRef && ref ? [ref] : nextPath;\n};\n\nconst findDefinition = (kindObj: K8sKind, propertyPath: string[]): SwaggerDefinition => {\n  const allDefinitions: SwaggerDefinitions = getStoredSwagger();\n  if (!allDefinitions) {\n    return null;\n  }\n\n  const rootPath = getDefinitionKey(kindObj, allDefinitions);\n  const path = propertyPath.reduce(\n    (currentPath: string[], nextProperty: string, i: number): string[] => {\n      if (!currentPath) {\n        return null;\n      }\n      // Don't follow the last reference since the description is not as good.\n      const followRef = i !== propertyPath.length - 1;\n      return getSwaggerPath(allDefinitions, currentPath, nextProperty, followRef);\n    },\n    [rootPath],\n  );\n\n  return path ? (_.get(allDefinitions, path) as SwaggerDefinition) : null;\n};\n\nexport const getPropertyDescription = (\n  kindObj: K8sKind,\n  propertyPath: string | string[],\n): string => {\n  const path: string[] = _.toPath(propertyPath);\n  const definition = findDefinition(kindObj, path);\n  return definition ? definition.description : null;\n};\n\nexport const getResourceDescription = _.memoize((kindObj: K8sKind): string => {\n  const allDefinitions: SwaggerDefinitions = getStoredSwagger();\n  if (!allDefinitions) {\n    return null;\n  }\n  const key = getDefinitionKey(kindObj, allDefinitions);\n  return _.get(allDefinitions, [key, 'description']);\n}, referenceForModel);\n\nexport type SwaggerDefinition = {\n  description?: string;\n  type?: string;\n  enum?: string[];\n  $ref?: string;\n  items?: SwaggerDefinition;\n  required?: string[];\n  properties?: {\n    [prop: string]: SwaggerDefinition;\n  };\n};\n\nexport type SwaggerDefinitions = {\n  [name: string]: SwaggerDefinition;\n};\n\nexport type SwaggerAPISpec = {\n  swagger: string;\n  info: { title: string; version: string };\n  paths: { [path: string]: any };\n  definitions: SwaggerDefinitions;\n};\n","import * as _ from 'lodash-es';\n\nimport { TemplateInstanceKind } from '../../module/k8s';\n\nexport const getTemplateInstanceStatus = (instance: TemplateInstanceKind) => {\n  const conditions = _.get(instance, 'status.conditions');\n  const failed = _.some(conditions, { type: 'InstantiateFailure', status: 'True' });\n  if (failed) {\n    return 'Failed';\n  }\n  const ready = _.some(conditions, { type: 'Ready', status: 'True' });\n  return ready ? 'Ready' : 'Not Ready';\n};\n","import { JSONSchema6 } from 'json-schema';\nimport { BadgeType, NodeAddress } from '@console/shared';\nimport { EventInvolvedObject } from './event';\n\nexport type OwnerReference = {\n  name: string;\n  kind: string;\n  uid: string;\n  apiVersion: string;\n  controller?: boolean;\n  blockOwnerDeletion?: boolean;\n};\n\nexport type ObjectReference = {\n  kind?: string;\n  namespace?: string;\n  name?: string;\n  uid?: string;\n  apiVersion?: string;\n  resourceVersion?: string;\n  fieldPath?: string;\n};\n\nexport type ObjectMetadata = {\n  annotations?: { [key: string]: string };\n  clusterName?: string;\n  creationTimestamp?: string;\n  deletionGracePeriodSeconds?: number;\n  deletionTimestamp?: string;\n  finalizers?: string[];\n  generateName?: string;\n  generation?: number;\n  labels?: { [key: string]: string };\n  managedFields?: any[];\n  name?: string;\n  namespace?: string;\n  ownerReferences?: OwnerReference[];\n  resourceVersion?: string;\n  selfLink?: string;\n  uid?: string;\n};\n\nexport type PartialObjectMetadata = {\n  apiVersion: string;\n  kind: string;\n  metadata: ObjectMetadata;\n};\n\nexport enum K8sResourceConditionStatus {\n  True = 'True',\n  False = 'False',\n  Unknown = 'Unknown',\n}\n\nexport type K8sResourceCondition = {\n  type: string;\n  status: keyof typeof K8sResourceConditionStatus;\n  lastTransitionTime?: string;\n  reason?: string;\n  message?: string;\n};\n\nexport type MatchExpression = {\n  key: string;\n  operator: 'Exists' | 'DoesNotExist' | 'In' | 'NotIn' | 'Equals' | 'NotEqual';\n  values?: string[];\n  value?: string;\n};\n\nexport type MatchLabels = {\n  [key: string]: string;\n};\n\nexport type Selector = {\n  matchLabels?: MatchLabels;\n  matchExpressions?: MatchExpression[];\n};\n\nexport type TaintEffect = '' | 'NoSchedule' | 'PreferNoSchedule' | 'NoExecute';\n\nexport type Taint = {\n  key: string;\n  value: string;\n  effect: TaintEffect;\n};\n\nexport type TolerationOperator = 'Exists' | 'Equal';\n\nexport type Toleration = {\n  effect: TaintEffect;\n  key?: string;\n  operator: TolerationOperator;\n  tolerationSeconds?: number;\n  value?: string;\n};\n\n// Properties common to (almost) all Kubernetes resources.\nexport type K8sResourceCommon = {\n  apiVersion?: string;\n  kind?: string;\n  metadata?: ObjectMetadata;\n};\n\n// Generic, unknown kind. Avoid when possible since it allows any key in spec\n// or status, weakening type checking.\nexport type K8sResourceKind = K8sResourceCommon & {\n  spec?: {\n    selector?: Selector | MatchLabels;\n    [key: string]: any;\n  };\n  status?: { [key: string]: any };\n  type?: { [key: string]: any };\n  data?: { [key: string]: any };\n  specLimit?: any;\n  resourceName?: any;\n};\n\nexport type VolumeMount = {\n  mountPath: string;\n  mountPropagation?: 'None' | 'HostToContainer' | 'Bidirectional';\n  name: string;\n  readOnly?: boolean;\n  subPath?: string;\n  subPathExpr?: string;\n};\n\ntype ProbePort = string | number;\n\nexport type ExecProbe = {\n  command: string[];\n};\n\nexport type HTTPGetProbe = {\n  path?: string;\n  port: ProbePort;\n  host?: string;\n  scheme: 'HTTP' | 'HTTPS';\n  httpHeaders?: any[];\n};\n\nexport type TCPSocketProbe = {\n  port: ProbePort;\n  host?: string;\n};\n\nexport type Handler = {\n  exec?: ExecProbe;\n  httpGet?: HTTPGetProbe;\n  tcpSocket?: TCPSocketProbe;\n};\n\nexport type ContainerProbe = {\n  initialDelaySeconds?: number;\n  timeoutSeconds?: number;\n  periodSeconds?: number;\n  successThreshold?: number;\n  failureThreshold?: number;\n} & Handler;\n\nexport type ContainerLifecycleStage = 'postStart' | 'preStop';\n\nexport type ContainerLifecycle = {\n  postStart?: Handler;\n  preStop?: Handler;\n};\n\nexport type ResourceList = {\n  [resourceName: string]: string;\n};\n\nexport type EnvVarSource = {\n  fieldRef?: {\n    apiVersion?: string;\n    fieldPath: string;\n  };\n  resourceFieldRef?: {\n    resource: string;\n    containerName?: string;\n    divisor?: string;\n  };\n  configMapKeyRef?: {\n    key: string;\n    name: string;\n  };\n  secretKeyRef?: {\n    key: string;\n    name: string;\n  };\n  configMapRef?: {\n    key?: string;\n    name: string;\n  };\n  secretRef?: {\n    key?: string;\n    name: string;\n  };\n  configMapSecretRef?: {\n    key?: string;\n    name: string;\n  };\n  serviceAccountRef?: {\n    key?: string;\n    name: string;\n  };\n};\n\nexport type EnvVar = {\n  name: string;\n  value?: string;\n  valueFrom?: EnvVarSource;\n};\n\nexport type ContainerPort = {\n  name?: string;\n  containerPort: number;\n  protocol: string;\n};\n\nexport enum ImagePullPolicy {\n  Always = 'Always',\n  Never = 'Never',\n  IfNotPresent = 'IfNotPresent',\n}\n\nexport type NodeAffinity = {\n  preferredDuringSchedulingIgnoredDuringExecution?: {\n    preference: Selector;\n    weight: number;\n  }[];\n  requiredDuringSchedulingIgnoredDuringExecution?: {\n    nodeSelectorTerms: Selector[];\n  };\n};\n\nexport type PodAffinityTerm = {\n  labelSelector?: Selector;\n  namespaces?: string[];\n  topologyKey: string;\n};\n\nexport type PodAffinity = {\n  preferredDuringSchedulingIgnoredDuringExecution: {\n    podAffinityTerm: PodAffinityTerm;\n    weight?: number;\n  }[];\n  requiredDuringSchedulingIgnoredDuringExecution: PodAffinityTerm[];\n};\n\nexport type ContainerSpec = {\n  name: string;\n  volumeMounts?: VolumeMount[];\n  env?: EnvVar[];\n  livenessProbe?: ContainerProbe;\n  readinessProbe?: ContainerProbe;\n  lifecycle?: ContainerLifecycle;\n  resources?: {\n    limits?: ResourceList;\n    requested?: ResourceList;\n  };\n  ports?: ContainerPort[];\n  imagePullPolicy?: ImagePullPolicy;\n  [key: string]: any;\n};\n\nexport type Volume = {\n  name: string;\n  [key: string]: any;\n};\n\nexport type PodSpec = {\n  volumes?: Volume[];\n  initContainers?: ContainerSpec[];\n  containers: ContainerSpec[];\n  restartPolicy?: 'Always' | 'OnFailure' | 'Never';\n  terminationGracePeriodSeconds?: number;\n  activeDeadlineSeconds?: number;\n  nodeSelector?: any;\n  serviceAccountName?: string;\n  priorityClassName?: string;\n  tolerations?: Toleration[];\n  nodeName?: string;\n  hostname?: string;\n  [key: string]: any;\n};\n\n// https://github.com/kubernetes/api/blob/release-1.16/core/v1/types.go#L2411-L2432\ntype PodPhase = 'Pending' | 'Running' | 'Succeeded' | 'Failed' | 'Unknown';\n\ntype ContainerStateValue = {\n  reason?: string;\n  [key: string]: any;\n};\n\nexport type ContainerState = {\n  waiting?: ContainerStateValue;\n  running?: ContainerStateValue;\n  terminated?: ContainerStateValue;\n};\n\nexport type ContainerStatus = {\n  name: string;\n  state?: ContainerState;\n  lastState?: ContainerState;\n  ready: boolean;\n  restartCount: number;\n  image: string;\n  imageID: string;\n  containerID?: string;\n};\n\nexport type PodCondition = {\n  lastProbeTime?: string;\n} & K8sResourceCondition;\n\nexport type PodStatus = {\n  phase: PodPhase;\n  conditions?: PodCondition[];\n  message?: string;\n  reason?: string;\n  startTime?: string;\n  initContainerStatuses?: ContainerStatus[];\n  containerStatuses?: ContainerStatus[];\n  [key: string]: any;\n};\n\nexport type PodTemplate = {\n  metadata: ObjectMetadata;\n  spec: PodSpec;\n};\n\nexport type PodKind = {\n  status?: PodStatus;\n} & K8sResourceCommon &\n  PodTemplate;\n\nexport type DeploymentCondition = {\n  lastUpdateTime?: string;\n} & K8sResourceCondition;\n\nexport type DeploymentKind = {\n  spec: {\n    minReadySeconds?: number;\n    paused?: boolean;\n    progressDeadlineSeconds?: number;\n    replicas?: number;\n    revisionHistoryLimit?: number;\n    selector: Selector;\n    strategy?: {\n      rollingUpdate?: {\n        maxSurge: number | string;\n        maxUnavailable: number | string;\n      };\n      type?: string;\n    };\n    template: PodTemplate;\n  };\n  status?: {\n    availableReplicas?: number;\n    collisionCount?: number;\n    conditions?: DeploymentCondition[];\n    observedGeneration?: number;\n    readyReplicas?: number;\n    replicas?: number;\n    unavailableReplicas?: number;\n    updatedReplicas?: number;\n  };\n} & K8sResourceCommon;\n\nexport type StorageClassResourceKind = {\n  provisioner: string;\n  reclaimPolicy: string;\n} & K8sResourceCommon;\n\nexport type NodeCondition = {\n  lastHeartbeatTime?: string;\n} & K8sResourceCondition;\n\nexport type NodeKind = {\n  spec: {\n    taints?: Taint[];\n    unschedulable?: boolean;\n  };\n  status?: {\n    capacity?: {\n      [key: string]: string;\n    };\n    conditions?: NodeCondition[];\n    images?: {\n      names: string[];\n      sizeBytes?: number;\n    }[];\n    phase?: string;\n  };\n} & K8sResourceCommon;\n\nexport type ConfigMapKind = {\n  data?: { [key: string]: string };\n  binaryData?: { [key: string]: string };\n} & K8sResourceCommon;\n\nexport type JobTemplate = {\n  metadata: ObjectMetadata;\n  spec: {\n    activeDeadlineSeconds?: number;\n    backoffLimit?: number;\n    completions?: number;\n    manualSelector?: boolean;\n    parallelism?: boolean;\n    selector?: Selector;\n    template: PodTemplate;\n    ttlSecondsAfterFinished?: number;\n  };\n};\n\nexport type JobKind = {\n  apiVersion: string;\n  kind: string;\n  status: {\n    active?: number;\n    completionTime?: string;\n    conditions?: K8sResourceCondition[];\n    failed?: number;\n    startTime?: string;\n    succeeded?: number;\n  };\n} & JobTemplate;\n\nexport type CronJobKind = {\n  apiVersion: string;\n  kind: string;\n  metadata: ObjectMetadata;\n  spec: {\n    concurrencyPolicy?: string;\n    failedJobsHistoryLimit?: number;\n    jobTemplate: JobTemplate;\n    schedule: string;\n    startingDeadlineSeconds?: number;\n    successfulJobsHistoryLimit?: number;\n    suspend?: boolean;\n  };\n  status: {\n    active?: {\n      apiVersion?: string;\n      fieldPath?: string;\n      kind?: string;\n      name?: string;\n      namespace?: string;\n      resourceVersion?: string;\n      uid?: string;\n    }[];\n    lastScheduleTime?: string;\n  };\n};\n\nexport type CRDVersion = {\n  name: string;\n  served: boolean;\n  storage: boolean;\n};\n\nexport type CustomResourceDefinitionKind = {\n  spec: {\n    version: string;\n    group: string;\n    names: {\n      kind: string;\n      singular: string;\n      plural: string;\n      listKind: string;\n      shortNames?: string[];\n    };\n    scope?: 'Namespaced';\n    validation?: {\n      // NOTE: Actually a subset of JSONSchema, but using this type for convenience\n      openAPIV3Schema: JSONSchema6;\n    };\n    versions?: CRDVersion[];\n  };\n  status?: {\n    conditions?: K8sResourceCondition[];\n  };\n} & K8sResourceCommon;\n\nexport type RouteTarget = {\n  kind: 'Service';\n  name: string;\n  weight: number;\n};\n\nexport type RouteTLS = {\n  caCertificate?: string;\n  certificate?: string;\n  destinationCACertificate?: string;\n  insecureEdgeTerminationPolicy?: string;\n  key?: string;\n  termination: string;\n};\n\nexport type RouteIngress = {\n  conditions: K8sResourceCondition[];\n  host?: string;\n  routerCanonicalHostname?: string;\n  routerName?: string;\n  wildcardPolicy?: string;\n};\n\nexport type RouteKind = {\n  spec: {\n    alternateBackends?: RouteTarget[];\n    host?: string;\n    path?: string;\n    port?: {\n      targetPort: number | string;\n    };\n    subdomain?: string;\n    tls?: RouteTLS;\n    to: RouteTarget;\n    wildcardPolicy?: string;\n  };\n  status?: {\n    ingress: RouteIngress[];\n  };\n} & K8sResourceCommon;\n\nexport type TemplateParameter = {\n  name: string;\n  value?: string;\n  displayName?: string;\n  description?: string;\n  generate?: string;\n  required?: boolean;\n};\n\nexport type TemplateKind = {\n  message?: string;\n  objects: any[];\n  parameters: TemplateParameter[];\n  labels?: any[];\n} & K8sResourceCommon;\n\ntype TemplateInstanceObject = {\n  ref: ObjectReference;\n};\n\nexport type TemplateInstanceKind = {\n  spec: {\n    template: TemplateKind;\n    secret: {\n      name: string;\n    };\n    requester?: {\n      username?: string;\n      uid?: string;\n      groups?: string[];\n      extra?: any;\n    };\n  };\n  status?: {\n    conditions: K8sResourceCondition[];\n    objects: TemplateInstanceObject[];\n  };\n} & K8sResourceCommon;\n\nexport type MachineAWSPlacement = {\n  availabilityZone?: string;\n  region?: string;\n};\n\nexport type MachineSpec = {\n  providerSpec: {\n    value?: {\n      placement?: MachineAWSPlacement;\n    };\n  };\n  versions: {\n    kubelet: string;\n  };\n  [key: string]: any;\n};\n\nexport type MachineKind = {\n  spec: MachineSpec;\n  status?: {\n    phase?: string;\n    addresses: NodeAddress[];\n    lastUpdated: string;\n    nodeRef: {\n      kind: string;\n      name: string;\n      uid: string;\n    };\n    providerStatus: {\n      kind: string;\n      conditions?: K8sResourceCondition[];\n      [key: string]: any;\n    };\n  };\n} & K8sResourceCommon;\n\nexport type MachineSetKind = {\n  spec: {\n    replicas: number;\n    selector: any;\n    template: {\n      spec: MachineSpec;\n    };\n  };\n  status?: {\n    availableReplicas: number;\n    fullyLabeledReplicas: number;\n    readyReplicas: number;\n    replicas: number;\n  };\n} & K8sResourceCommon;\n\nexport type Patch = {\n  op: string;\n  path: string;\n  value?: any;\n};\n\nexport type RollingUpdate = { maxUnavailable?: number | string; maxSurge?: number | string };\nexport type DeploymentUpdateStrategy =\n  | {\n      type: 'Recreate';\n    }\n  | {\n      type: 'RollingUpdate';\n      rollingUpdate: RollingUpdate;\n    };\n\nexport type MachineDeploymentKind = {\n  spec: {\n    replicas: number;\n    selector: Selector;\n    template: {\n      spec: MachineSpec;\n    };\n    paused?: boolean;\n    minReadySeconds?: number;\n    progressDeadlineSeconds?: number;\n    strategy: DeploymentUpdateStrategy;\n  };\n  status?: {\n    availableReplicas: number;\n    unavailableReplicas: number;\n    readyReplicas: number;\n    replicas: number;\n  };\n} & K8sResourceCommon;\n\nexport type MachineConfigKind = {\n  spec: {\n    osImageURL: string;\n    config: any;\n  };\n} & K8sResourceCommon;\n\nexport enum MachineConfigPoolConditionType {\n  Updated = 'Updated',\n  Updating = 'Updating',\n  Degraded = 'Degraded',\n}\n\nexport type MachineConfigPoolCondition = {\n  type: keyof typeof MachineConfigPoolConditionType;\n} & K8sResourceCondition;\n\nexport type MachineConfigPoolStatus = {\n  observedGeneration?: number;\n  configuration: {\n    name: string;\n    source: ObjectReference[];\n  };\n  machineCount: number;\n  updatedMachineCount: number;\n  readyMachineCount: number;\n  unavailableMachineCount: number;\n  conditions: MachineConfigPoolCondition[];\n};\n\nexport type MachineConfigPoolSpec = {\n  machineConfigSelector?: Selector;\n  nodeSelector?: Selector;\n  paused: boolean;\n  maxUnavailable: number | string;\n};\n\nexport type MachineConfigPoolKind = {\n  spec: MachineConfigPoolSpec;\n  status: MachineConfigPoolStatus;\n} & K8sResourceKind;\n\nexport type ClusterUpdate = {\n  image: string;\n  version: string;\n};\n\nexport type UpdateHistory = {\n  state: 'Completed' | 'Partial';\n  startedTime: string;\n  completionTime: string;\n  version: string;\n  image: string;\n};\n\nexport enum ClusterVersionConditionType {\n  Available = 'Available',\n  Failing = 'Failing',\n  Progressing = 'Progressing',\n  RetrievedUpdates = 'RetrievedUpdates',\n  Invalid = 'Invalid',\n}\n\nexport type ClusterVersionCondition = {\n  type: keyof typeof ClusterVersionConditionType;\n} & K8sResourceCondition;\n\ntype ClusterVersionStatus = {\n  availableUpdates: ClusterUpdate[];\n  conditions: ClusterVersionCondition[];\n  desired: ClusterUpdate;\n  history: UpdateHistory[];\n};\n\ntype ClusterVersionSpec = {\n  channel: string;\n  clusterID: string;\n  desiredUpdate: ClusterUpdate;\n  upstream: string;\n};\n\nexport type ClusterVersionKind = {\n  spec: ClusterVersionSpec;\n  status: ClusterVersionStatus;\n} & K8sResourceCommon;\n\nexport type OperandVersion = {\n  name: string;\n  version: string;\n};\n\ntype ClusterOperatorObjectReference = {\n  group: string;\n  resource: string;\n  namespace?: string;\n  name: string;\n};\n\nexport type ClusterOperator = {\n  spec: {};\n  status: {\n    conditions?: K8sResourceCondition[];\n    versions?: OperandVersion[];\n    relatedObjects?: ClusterOperatorObjectReference[];\n  };\n} & K8sResourceCommon;\n\nexport type MappingMethodType = 'claim' | 'lookup' | 'add';\n\ntype IdentityProviderType = 'BasicAuth' | 'GitHub' | 'GitLab' | 'Google' | 'HTPasswd' | 'Keystone' | 'LDAP' | 'OpenID' | 'RequestHeader';\n\ntype IdentityProviderConfig = {\n  [key: string]: any;\n};\n\nexport type IdentityProvider = {\n  name: string;\n  mappingMethod: MappingMethodType;\n  type: IdentityProviderType;\n  basicAuth?: IdentityProviderConfig;\n  github?: IdentityProviderConfig;\n  gitlab?: IdentityProviderConfig;\n  google?: IdentityProviderConfig;\n  htpasswd?: IdentityProviderConfig;\n  keystone?: IdentityProviderConfig;\n  ldap?: IdentityProviderConfig;\n  openID?: IdentityProviderConfig;\n  requestHeader?: IdentityProviderConfig;\n};\n\nexport type OAuthKind = {\n  spec: {\n    identityProviders?: IdentityProvider[];\n    tokenConfig?: {\n      accessTokenMaxAgeSeconds: number;\n    };\n    templates?: {\n      login: string;\n      providerSelection: string;\n      error: string;\n    };\n  };\n} & K8sResourceCommon;\n\nexport type K8sVerb = 'create' | 'get' | 'list' | 'update' | 'patch' | 'delete' | 'deletecollection' | 'watch';\n\nexport type AccessReviewResourceAttributes = {\n  group?: string;\n  resource?: string;\n  subresource?: string;\n  verb?: K8sVerb;\n  name?: string;\n  namespace?: string;\n};\n\nexport type SelfSubjectAccessReviewKind = {\n  apiVersion: string;\n  kind: string;\n  metadata?: ObjectMetadata;\n  spec: {\n    resourceAttributes?: AccessReviewResourceAttributes;\n  };\n  status?: {\n    allowed: boolean;\n    denied?: boolean;\n    reason?: string;\n    evaluationError?: string;\n  };\n};\n\nexport type ResourceAccessReviewRequest = {\n  apiVersion: string;\n  kind: string;\n  namespace?: string;\n  resourceAPIVersion: string;\n  resourceAPIGroup: string;\n  resource: string;\n  verb: K8sVerb;\n};\n\nexport type ResourceAccessReviewResponse = {\n  namespace?: string;\n  users: string[];\n  groups: string[];\n} & K8sResourceCommon;\n\nexport type UserKind = {\n  fullName?: string;\n  identities: string[];\n} & K8sResourceCommon;\n\nexport type GroupKind = {\n  users: string[];\n} & K8sResourceCommon;\n\nexport type K8sKind = {\n  abbr: string;\n  kind: string;\n  label: string;\n  labelPlural: string;\n  plural: string;\n  propagationPolicy?: 'Foreground' | 'Background';\n\n  id?: string;\n  crd?: boolean;\n  apiVersion: string;\n  apiGroup?: string;\n  namespaced?: boolean;\n  selector?: Selector;\n  labels?: { [key: string]: string };\n  annotations?: { [key: string]: string };\n  verbs?: K8sVerb[];\n  shortNames?: string[];\n  badge?: BadgeType;\n  color?: string;\n\n  // Legacy option for supporing plural names in URL paths when `crd: true`.\n  // This should not be set for new models, but is needed to avoid breaking\n  // existing links as we transition to using the API group in URL paths.\n  legacyPluralURL?: boolean;\n};\n\nexport type Cause = {\n  field: string;\n  message: string;\n  reason: string;\n};\n\nexport type Status = {\n  apiVersion: 'v1';\n  kind: 'Status';\n  details: {\n    causes: Cause[];\n    group: string;\n    kind: string;\n  };\n  message: string;\n  metadata: any;\n  reason: string;\n  status: string;\n};\n\n/**\n * GroupVersionKind unambiguously identifies a kind.\n * https://godoc.org/k8s.io/apimachinery/pkg/runtime/schema#GroupVersionKind\n * TODO: Change this to a regex-type if it ever becomes a thing (https://github.com/Microsoft/TypeScript/issues/6579)\n */\nexport type GroupVersionKind = string;\n\n/**\n * The canonical, unique identifier for a Kubernetes resource type.\n * Maintains backwards-compatibility with references using the `kind` string field.\n */\nexport type K8sResourceKindReference = GroupVersionKind | string;\n\nexport type SecretKind = {\n  data: { [key: string]: string };\n  stringData?: { [key: string]: string };\n  type: string;\n} & K8sResourceCommon;\n\nexport type ServiceAccountKind = {\n  automountServiceAccountToken?: boolean;\n  imagePullSecrets?: { [key: string]: string };\n  secrets?: SecretKind[] | { [key: string]: string };\n} & K8sResourceCommon;\n\nexport type ListKind<R extends K8sResourceCommon> = K8sResourceCommon & {\n  items: R[];\n};\n\nexport type EventKind = {\n  action?: string;\n  count?: number;\n  type?: string;\n  involvedObject: EventInvolvedObject;\n  message?: string;\n  eventTime?: string;\n  lastTimestamp?: string;\n  firstTimestamp?: string;\n  reason?: string;\n  source: {\n    component: string;\n    host?: string;\n  };\n  series?: {\n    count?: number;\n    lastObservedTime?: string;\n    state?: string;\n  };\n} & K8sResourceCommon;\n\nexport type MachineHealthCondition = {\n  type: string;\n  status: string;\n  timeout: string;\n};\n\nexport type MachineHealthCheckKind = K8sResourceCommon & {\n  spec: {\n    selector: Selector;\n    unhealthyConditions: MachineHealthCondition[];\n  };\n};\n","import { k8sBasePath } from './k8s/k8s';\nimport { coFetchJSON } from '../co-fetch';\n\nexport const k8sVersion = () => coFetchJSON(`${k8sBasePath}/version`);\n","/**\n * @fileOverview\n * WebSocket factory and utility wrapper.\n *\n */\n/* eslint-disable no-console */\nimport { getAccessToken } from '../hypercloud/auth';\n\nfunction createURL(host, path) {\n  let url;\n\n  if (host === 'auto') {\n    if (location.protocol === 'https:') {\n      url = 'wss://';\n    } else {\n      url = 'ws://';\n    }\n    url += location.host;\n  } else {\n    url = host;\n  }\n\n  if (path) {\n    if (!!getAccessToken()) {\n      if (path.indexOf('?') !== -1) {\n        url += path + '&token=' + getAccessToken();\n      } else {\n        url += path + '?token=' + getAccessToken();\n      }\n    } else {\n      url += path;\n    }\n    // url += path;\n  }\n\n  return url;\n}\n\nexport function WSFactory(id, options) {\n  this.id = id;\n  this.options = options;\n  this.bufferMax = options.bufferMax || 0;\n  this.url = createURL(options.host, options.path);\n  this._paused = false;\n  this._handlers = {\n    open: [],\n    close: [],\n    error: [],\n    message: [],\n    destroy: [],\n    // psuedo event :-/\n    bulkmessage: [],\n  };\n\n  this._connect();\n\n  if (this.bufferMax) {\n    this.flushCanceler = setInterval(this.flushMessageBuffer.bind(this), this.options.bufferFlushInterval || 500);\n  }\n}\n\nWSFactory.prototype._reconnect = function() {\n  if (this._connectionAttempt || this._state === 'destroyed') {\n    return;\n  }\n\n  let delay = 1000;\n\n  const attempt = () => {\n    if (!this.options.reconnect || this._state === 'open') {\n      clearTimeout(this._connectionAttempt);\n      this._connectionAttempt = null;\n      return;\n    }\n    if (this.options.timeout && delay > this.options.timeout) {\n      clearTimeout(this._connectionAttempt);\n      this._connectionAttempt = null;\n      this.destroy(true);\n      return;\n    }\n\n    this._connect();\n    delay = Math.round(Math.min(1.5 * delay, 60000));\n    this._connectionAttempt = setTimeout(attempt, delay);\n    console.log(`attempting reconnect in ${delay / 1000} seconds...`);\n  };\n\n  this._connectionAttempt = setTimeout(attempt, delay);\n};\n\nWSFactory.prototype._connect = function() {\n  const that = this;\n  this._state = 'init';\n  this._messageBuffer = [];\n  try {\n    this.ws = new WebSocket(this.url, this.options.subprotocols);\n  } catch (e) {\n    console.error('Error creating websocket:', e);\n    this._reconnect();\n    return;\n  }\n\n  this.ws.onopen = function() {\n    console.log(`websocket open: ${that.id}`);\n    that._state = 'open';\n    that._triggerEvent('open');\n    if (that._connectionAttempt) {\n      clearTimeout(that._connectionAttempt);\n      that._connectionAttempt = null;\n    }\n  };\n  this.ws.onclose = function(evt) {\n    console.log(`websocket closed: ${that.id}`, evt);\n    that._state = 'closed';\n    that._triggerEvent('close', evt);\n    that._reconnect();\n  };\n  this.ws.onerror = function(evt) {\n    console.log(`websocket error: ${that.id}`);\n    that._state = 'error';\n    that._triggerEvent('error', evt);\n  };\n  this.ws.onmessage = function(evt) {\n    const msg = that.options && that.options.jsonParse ? JSON.parse(evt.data) : evt.data;\n    // In some browsers, onmessage can fire after onclose/error. Don't update state to be incorrect.\n    if (that._state !== 'destroyed' && that._state !== 'closed') {\n      that._state = 'open';\n    }\n    that._triggerEvent('message', msg);\n  };\n};\n\nWSFactory.prototype._registerHandler = function(type, fn) {\n  if (this._state === 'destroyed') {\n    return;\n  }\n  this._handlers[type].push(fn);\n};\n\n// Invoke all registered handler callbacks for a given event type.\nWSFactory.prototype._invokeHandlers = function(type, data) {\n  const handlers = this._handlers[type];\n  if (!handlers) {\n    return;\n  }\n  handlers.forEach(function(h) {\n    try {\n      h(data);\n    } catch (e) {\n      console.error(e);\n    }\n  });\n};\n\n// Triggers event to be buffered or invoked depending on config.\nWSFactory.prototype._triggerEvent = function(type, event) {\n  if (this._state === 'destroyed') {\n    return;\n  }\n\n  // Only buffer \"message\" events, so \"error\" and \"close\" etc can pass thru.\n  if (this.bufferMax && type === 'message') {\n    this._messageBuffer.push(event);\n\n    if (this._messageBuffer.length > this.bufferMax) {\n      this._messageBuffer.shift();\n    }\n\n    return;\n  }\n\n  this._invokeHandlers(type, event);\n};\n\nWSFactory.prototype.onmessage = function(fn) {\n  this._registerHandler('message', fn);\n  return this;\n};\n\nWSFactory.prototype.onbulkmessage = function(fn) {\n  this._registerHandler('bulkmessage', fn);\n  return this;\n};\n\nWSFactory.prototype.onerror = function(fn) {\n  this._registerHandler('error', fn);\n  return this;\n};\n\nWSFactory.prototype.onopen = function(fn) {\n  this._registerHandler('open', fn);\n  return this;\n};\n\nWSFactory.prototype.onclose = function(fn) {\n  this._registerHandler('close', fn);\n  return this;\n};\n\nWSFactory.prototype.ondestroy = function(fn) {\n  this._registerHandler('destroy', fn);\n  return this;\n};\n\nWSFactory.prototype.flushMessageBuffer = function() {\n  if (this._paused) {\n    return;\n  }\n\n  if (!this._messageBuffer.length) {\n    return;\n  }\n\n  if (this._handlers.bulkmessage.length) {\n    this._invokeHandlers('bulkmessage', this._messageBuffer);\n  } else {\n    this._messageBuffer.forEach(e => this._invokeHandlers('message', e));\n  }\n\n  this._messageBuffer = [];\n};\n\n// Pausing prevents any buffer flushing until unpaused.\nWSFactory.prototype.pause = function() {\n  this._paused = true;\n};\n\nWSFactory.prototype.unpause = function() {\n  this._paused = false;\n  this.flushMessageBuffer();\n};\n\nWSFactory.prototype.isPaused = function() {\n  return this._paused;\n};\n\nWSFactory.prototype.state = function() {\n  return this._state;\n};\n\nWSFactory.prototype.bufferSize = function() {\n  return this._messageBuffer.length;\n};\n\nWSFactory.prototype.destroy = function(timedout) {\n  console.log(`destroying websocket: ${this.id}`);\n  if (this._state === 'destroyed') {\n    return;\n  }\n\n  try {\n    this.ws.close();\n  } catch (e) {\n    console.error(e);\n  }\n\n  clearInterval(this.flushCanceler);\n  clearTimeout(this._connectionAttempt);\n\n  if (this.ws) {\n    this.ws.onopen = null;\n    this.ws.onclose = null;\n    this.ws.onerror = null;\n    this.ws.onmessage = null;\n    delete this.ws;\n  }\n\n  try {\n    this._triggerEvent('destroy', timedout);\n  } catch (e) {\n    console.error(e);\n  }\n\n  this._state = 'destroyed';\n\n  delete this.options;\n  this._messageBuffer = [];\n};\n\nWSFactory.prototype.send = function(data) {\n  this.ws && this.ws.send(data);\n};\n","/* eslint-disable no-undef */\n\nimport { ActivePlugin, PluginStore } from '@console/plugin-sdk';\n\n// TODO(vojtech): legacy, remove along with `registry` export\nexport * from '@console/plugin-sdk';\n\n// The '@console/active-plugins' module is generated during a webpack build,\n// so we use dynamic require() instead of the usual static import statement.\nexport const activePlugins =\n  process.env.NODE_ENV !== 'test'\n    ? (require('@console/active-plugins').default as ActivePlugin[])\n    : [];\n\nif (process.env.NODE_ENV !== 'test') {\n  // eslint-disable-next-line no-console\n  console.info(`Active plugins: [${activePlugins.map((p) => p.name).join(', ')}]`);\n}\n\nexport const pluginStore = new PluginStore(activePlugins);\nexport const registry = pluginStore.registry;\n\nif (process.env.NODE_ENV !== 'production') {\n  // Expose Console plugin store for debugging\n  window.pluginStore = pluginStore;\n}\n","import * as _ from 'lodash-es';\n\n// React's \"isRequired\" means that not only must key exist, but the *value* must be truthy too! This doesn't fly with NSs\nexport const namespaceProptype = function(\n  props: { namespace: string },\n  propName: string,\n  componentName: string,\n) {\n  if (!props.hasOwnProperty('namespace')) {\n    throw new Error(`${componentName}: \"namespace\" is a required prop`);\n  }\n  if (propName !== 'namespace') {\n    return;\n  }\n  if (props.namespace !== undefined && !_.isString(props.namespace)) {\n    throw new Error(`${componentName}: \"namespace\" must be a string`);\n  }\n};\n","import { ActionType, DashboardsAction } from '../actions/dashboards';\nimport { Map as ImmutableMap, fromJS } from 'immutable';\n\nexport enum RESULTS_TYPE {\n  PROMETHEUS = 'PROMETHEUS',\n  URL = 'URL',\n  ALERTS = 'ALERTS',\n}\n\nexport const defaults = {\n  [RESULTS_TYPE.PROMETHEUS]: fromJS({}),\n  [RESULTS_TYPE.URL]: fromJS({}),\n};\n\ntype Request<R> = {\n  active: boolean;\n  timeout: NodeJS.Timer;\n  inFlight: boolean;\n  data: R;\n  error: any;\n};\n\nexport type RequestMap<R> = ImmutableMap<string, Request<R>>;\n\nexport type DashboardsState = ImmutableMap<string, RequestMap<any>>;\n\nexport const isWatchActive = (state: DashboardsState, type: string, key: string): boolean =>\n  state.getIn([type, key, 'active']) > 0 || state.getIn([type, key, 'inFlight']);\n\nexport const dashboardsReducer = (\n  state: DashboardsState,\n  action: DashboardsAction,\n): DashboardsState => {\n  if (!state) {\n    return ImmutableMap(defaults);\n  }\n  switch (action.type) {\n    case ActionType.ActivateWatch: {\n      const activePath = [action.payload.type, action.payload.key, 'active'];\n      const active = state.hasIn(activePath) ? state.getIn(activePath) : 0;\n      return state.setIn(activePath, active + 1);\n    }\n    case ActionType.UpdateWatchTimeout:\n      return state.setIn(\n        [action.payload.type, action.payload.key, 'timeout'],\n        action.payload.timeout,\n      );\n    case ActionType.UpdateWatchInFlight:\n      return state.setIn(\n        [action.payload.type, action.payload.key, 'inFlight'],\n        action.payload.inFlight,\n      );\n    case ActionType.StopWatch: {\n      const active = state.getIn([action.payload.type, action.payload.key, 'active']);\n      const newState = state.setIn([action.payload.type, action.payload.key, 'active'], active - 1);\n      if (active === 1) {\n        clearTimeout(state.getIn([action.payload.type, action.payload.key, 'timeout']));\n      }\n      return newState;\n    }\n    case ActionType.SetError:\n      return state.setIn(\n        [action.payload.type, action.payload.key, 'loadError'],\n        action.payload.error,\n      );\n    case ActionType.SetData:\n      return state.withMutations((s) =>\n        s\n          .setIn([action.payload.type, action.payload.key, 'data'], action.payload.data)\n          .setIn([action.payload.type, action.payload.key, 'loadError'], null),\n      );\n    default:\n      return state;\n  }\n};\n","import { connect } from 'react-redux';\nimport { Map as ImmutableMap } from 'immutable';\nimport * as _ from 'lodash-es';\n\nimport {\n  ChargebackReportModel,\n  ClusterServiceClassModel,\n  ConsoleCLIDownloadModel,\n  ConsoleExternalLogLinkModel,\n  ConsoleNotificationModel,\n  ConsoleYAMLSampleModel,\n  MachineAutoscalerModel,\n  MachineConfigModel,\n  MachineHealthCheckModel,\n  MachineModel,\n  PrometheusModel,\n} from '../models';\nimport { referenceForModel } from '../module/k8s';\nimport { RootState } from '../redux';\nimport { ActionType as K8sActionType } from '../actions/k8s';\nimport { FeatureAction, ActionType } from '../actions/features';\nimport { FLAGS } from '@console/shared/src/constants';\nimport * as plugins from '../plugins';\n\nexport const defaults = _.mapValues(FLAGS, (flag) =>\n  flag === FLAGS.AUTH_ENABLED ? !window.SERVER_FLAGS.authDisabled : undefined,\n);\n\nexport const baseCRDs = {\n  [referenceForModel(ChargebackReportModel)]: FLAGS.CHARGEBACK,\n  [referenceForModel(ClusterServiceClassModel)]: FLAGS.SERVICE_CATALOG,\n  [referenceForModel(ConsoleCLIDownloadModel)]: FLAGS.CONSOLE_CLI_DOWNLOAD,\n  [referenceForModel(ConsoleExternalLogLinkModel)]: FLAGS.CONSOLE_EXTERNAL_LOG_LINK,\n  [referenceForModel(ConsoleNotificationModel)]: FLAGS.CONSOLE_NOTIFICATION,\n  [referenceForModel(ConsoleYAMLSampleModel)]: FLAGS.CONSOLE_YAML_SAMPLE,\n  [referenceForModel(MachineAutoscalerModel)]: FLAGS.MACHINE_AUTOSCALER,\n  [referenceForModel(MachineConfigModel)]: FLAGS.MACHINE_CONFIG,\n  [referenceForModel(MachineHealthCheckModel)]: FLAGS.MACHINE_HEALTH_CHECK,\n  [referenceForModel(MachineModel)]: FLAGS.CLUSTER_API,\n  [referenceForModel(PrometheusModel)]: FLAGS.PROMETHEUS,\n};\n\nconst CRDs = { ...baseCRDs };\n\nplugins.registry.getModelFeatureFlags().forEach((ff) => {\n  const modelRef = referenceForModel(ff.properties.model);\n  if (!CRDs[modelRef]) {\n    CRDs[modelRef] = ff.properties.flag as FLAGS;\n  }\n});\n\nexport type FeatureState = ImmutableMap<string, boolean>;\n\nexport const featureReducerName = 'FLAGS';\nexport const featureReducer = (state: FeatureState, action: FeatureAction): FeatureState => {\n  if (!state) {\n    return ImmutableMap(defaults);\n  }\n\n  switch (action.type) {\n    case ActionType.SetFlag:\n      return state.set(action.payload.flag, action.payload.value);\n\n    case ActionType.ClearSSARFlags:\n      return state.withMutations((s) =>\n        action.payload.flags.reduce((acc, curr) => acc.remove(curr), s),\n      );\n\n    case K8sActionType.ReceivedResources:\n      // Flip all flags to false to signify that we did not see them\n      _.each(CRDs, (v) => (state = state.set(v, false)));\n\n      return action.payload.resources.models\n        .filter((model) => CRDs[referenceForModel(model)] !== undefined)\n        .reduce((nextState, model) => {\n          const flag = CRDs[referenceForModel(model)];\n          // eslint-disable-next-line no-console\n          console.log(`${flag} was detected.`);\n\n          return nextState.set(flag, true);\n        }, state);\n\n    default:\n      return state;\n  }\n};\n\nexport const stateToFlagsObject = (state: FeatureState, desiredFlags: string[]): FlagsObject =>\n  desiredFlags.reduce((allFlags, f) => ({ ...allFlags, [f]: state.get(f) }), {} as FlagsObject);\n\nconst stateToProps = (state: FeatureState, desiredFlags: string[]): WithFlagsProps => ({\n  flags: stateToFlagsObject(state, desiredFlags),\n});\n\nexport const getFlagsObject = ({ [featureReducerName]: featureState }: RootState): FlagsObject =>\n  featureState.toObject();\n\nexport type FlagsObject = { [key: string]: boolean };\n\nexport type WithFlagsProps = {\n  flags: FlagsObject;\n};\n\nexport type ConnectToFlags = <P extends WithFlagsProps>(\n  ...flags: (FLAGS | string)[]\n) => (\n  C: React.ComponentType<P>,\n) => React.ComponentType<Omit<P, keyof WithFlagsProps>> & {\n  WrappedComponent: React.ComponentType<P>;\n};\n\nexport const connectToFlags: ConnectToFlags = (...flags) =>\n  connect((state: RootState) => stateToProps(state[featureReducerName], flags), null, null, {\n    areStatePropsEqual: _.isEqual,\n  });\n\n// Flag detection is not complete if the flag's value is `undefined`.\nexport const flagPending = (flag: boolean) => flag === undefined;\n","import * as _ from 'lodash-es';\nimport { Map as ImmutableMap, fromJS } from 'immutable';\n\nimport { ActionType, K8sAction } from '../actions/k8s';\nimport { getQN, referenceForModel, allModels, K8sResourceKind, K8sKind } from '../module/k8s';\nimport { namespacedResources } from '../actions/ui';\n\nconst moreRecent = (a, b) => {\n  const metaA = a.get('metadata').toJSON();\n  const metaB = b.get('metadata').toJSON();\n  if (metaA.uid !== metaB.uid) {\n    return new Date(metaA.creationTimestamp) > new Date(metaB.creationTimestamp);\n  }\n  return parseInt(metaA.resourceVersion, 10) > parseInt(metaB.resourceVersion, 10);\n};\n\nconst removeFromList = (list, resource) => {\n  const qualifiedName = getQN(resource);\n  // eslint-disable-next-line no-console\n  console.log(`deleting ${qualifiedName}`);\n  return list.delete(qualifiedName);\n};\n\nconst updateList = (list: ImmutableMap<string, any>, nextJS: K8sResourceKind) => {\n  const qualifiedName = getQN(nextJS);\n  const current = list.get(qualifiedName);\n  const next = fromJS(nextJS);\n\n  if (!current) {\n    return list.set(qualifiedName, next);\n  }\n\n  if (!moreRecent(next, current)) {\n    return list;\n  }\n\n  // TODO: (kans) only store the data for things we display ...\n  //  and then only do this comparison for the same stuff!\n  if (\n    current\n      .deleteIn(['metadata', 'resourceVersion'])\n      .equals(next.deleteIn(['metadata', 'resourceVersion']))\n  ) {\n    // If the only thing that differs is resource version, don't fire an update.\n    return list;\n  }\n\n  return list.set(qualifiedName, next);\n};\n\nconst loadList = (oldList, resources) => {\n  const existingKeys = new Set(oldList.keys());\n  return oldList.withMutations((list) => {\n    (resources || []).forEach((r) => {\n      const qualifiedName = getQN(r);\n      existingKeys.delete(qualifiedName);\n      const next = fromJS(r);\n      const current = list.get(qualifiedName);\n      if (!current || moreRecent(next, current)) {\n        list.set(qualifiedName, next);\n      }\n    });\n    existingKeys.forEach((k) => {\n      const r = list.get(k);\n      const metadata = r.get('metadata').toJSON();\n      if (!metadata.deletionTimestamp) {\n        // eslint-disable-next-line no-console\n        console.warn(`${metadata.namespace}-${metadata.name} is gone with no deletion timestamp!`);\n      }\n      list.delete(k);\n    });\n  });\n};\n\nexport type K8sState = ImmutableMap<string, any>;\n\nexport default (state: K8sState, action: K8sAction): K8sState => {\n  if (!state) {\n    return fromJS({ RESOURCES: { inFlight: false, models: ImmutableMap<string, K8sKind>() } });\n  }\n  // const {k8sObjects, id} = action;\n  // const list: ImmutableMap<string, any> = state.getIn([id, 'data']);\n\n  let newList;\n\n  switch (action.type) {\n    case ActionType.GetResourcesInFlight:\n      return state.setIn(['RESOURCES', 'inFlight'], true);\n    case ActionType.SetAPIGroups:\n      return state.setIn(['RESOURCES', 'apiGroups'], action.payload.value);\n    case ActionType.ReceivedResources:\n      return (\n        action.payload.resources.models\n          .filter((model) => !state.getIn(['RESOURCES', 'models']).has(referenceForModel(model)))\n          .filter((model) => {\n            const existingModel = state.getIn(['RESOURCES', 'models', model.kind]);\n            return !existingModel || referenceForModel(existingModel) !== referenceForModel(model);\n          })\n          .map((model) => {\n            model.namespaced\n              ? namespacedResources.add(referenceForModel(model))\n              : namespacedResources.delete(referenceForModel(model));\n            return model;\n          })\n          .reduce((prevState, newModel) => {\n            // FIXME: Need to use `kind` as model reference for legacy components accessing k8s primitives\n            const [modelRef, model] = allModels().findEntry(\n              (staticModel) => referenceForModel(staticModel) === referenceForModel(newModel),\n            ) || [referenceForModel(newModel), newModel];\n            // Verbs and short names are not part of the static model definitions, so use the values found during discovery.\n            return prevState.updateIn(['RESOURCES', 'models'], (models) =>\n              models.set(modelRef, {\n                ...model,\n                verbs: newModel.verbs,\n                shortNames: newModel.shortNames,\n              }),\n            );\n          }, state)\n          // TODO: Determine where these are used and implement filtering in that component instead of storing in Redux\n          .setIn(['RESOURCES', 'allResources'], action.payload.resources.allResources)\n          .setIn(['RESOURCES', 'safeResources'], action.payload.resources.safeResources)\n          .setIn(['RESOURCES', 'adminResources'], action.payload.resources.adminResources)\n          .setIn(['RESOURCES', 'configResources'], action.payload.resources.configResources)\n          .setIn(['RESOURCES', 'namespacedSet'], action.payload.resources.namespacedSet)\n          .setIn(['RESOURCES', 'preferredVersions'], action.payload.resources.preferredVersions)\n          .setIn(['RESOURCES', 'inFlight'], false)\n      );\n\n    case ActionType.FilterList:\n      return state.setIn([action.payload.id, 'filters', action.payload.name], action.payload.value);\n\n    case ActionType.StartWatchK8sObject:\n      return state.set(\n        action.payload.id,\n        ImmutableMap({\n          loadError: '',\n          loaded: false,\n          data: {},\n        }),\n      );\n\n    case ActionType.ModifyObject: {\n      const { k8sObjects, id } = action.payload;\n      let currentJS = state.getIn([id, 'data'], {});\n      // getIn can return JS object or Immutable object\n      if (currentJS.toJSON) {\n        currentJS = currentJS.toJSON();\n        currentJS.metadata.resourceVersion = k8sObjects.metadata.resourceVersion;\n        if (_.isEqual(currentJS, k8sObjects)) {\n          // If the only thing that differs is resource version, don't fire an update.\n          return state;\n        }\n      }\n      return state.mergeIn([id], {\n        loadError: '',\n        loaded: true,\n        data: k8sObjects,\n      });\n    }\n\n    case ActionType.StartWatchK8sList:\n      if (state.getIn([action.payload.id, 'data'])) {\n        return state;\n      }\n\n      // We mergeDeep instead of overwriting state because it's possible to add filters before load/watching\n      return state.mergeDeep({\n        [action.payload.id]: {\n          loadError: '',\n          // has the data set been loaded successfully\n          loaded: false,\n          // Canonical data\n          data: ImmutableMap(),\n          // client side filters to be applied externally (ie, we keep all data intact)\n          filters: ImmutableMap(),\n          // The name of an element in the list that has been \"selected\"\n          selected: null,\n        },\n      });\n\n    case ActionType.StopWatchK8s:\n      return state.delete(action.payload.id);\n\n    case ActionType.Loaded:\n      if (!state.getIn([action.payload.id, 'data'])) {\n        return state;\n      }\n      // eslint-disable-next-line no-console\n      console.info(`loaded ${action.payload.id}`);\n      state = state.mergeDeep({\n        [action.payload.id]: { loaded: true, loadError: '' },\n      });\n      newList = loadList(state.getIn([action.payload.id, 'data']), action.payload.k8sObjects);\n      break;\n\n    case ActionType.UpdateListFromWS:\n      newList = state.getIn([action.payload.id, 'data']);\n      // k8sObjects is an array of k8s WS Events\n      for (const { type, object } of action.payload.k8sObjects) {\n        switch (type) {\n          case 'DELETED':\n            newList = removeFromList(newList, object);\n            continue;\n          case 'ADDED':\n          case 'MODIFIED':\n            newList = updateList(newList, object);\n            continue;\n          default:\n            // possible `ERROR` type or other\n            // eslint-disable-next-line no-console\n            console.warn(`unknown websocket action: ${type} (${_.get(event, 'object.message')})`);\n            continue;\n        }\n      }\n      break;\n    case ActionType.BulkAddToList:\n      if (!state.getIn([action.payload.id, 'data'])) {\n        return state;\n      }\n      newList = state\n        .getIn([action.payload.id, 'data'])\n        .merge(\n          action.payload.k8sObjects.reduce(\n            (map, obj) => map.set(getQN(obj), fromJS(obj)),\n            ImmutableMap(),\n          ),\n        );\n      break;\n    case ActionType.Errored:\n      if (!state.getIn([action.payload.id, 'data'])) {\n        return state;\n      }\n      /* Don't overwrite data or loaded state if there was an error. Better to\n       * keep stale data around than to suddenly have it disappear on a user.\n       */\n      return state.setIn([action.payload.id, 'loadError'], action.payload.k8sObjects);\n    default:\n      return state;\n  }\n  return state.setIn([action.payload.id, 'data'], newList);\n};\n","import { connect } from 'react-redux';\nimport { Map as ImmutableMap } from 'immutable';\nimport * as _ from 'lodash-es';\n\nimport { MonitoringAction, ActionType } from '../actions/monitoring';\n\nexport const enum AlertSeverity {\n  Critical = 'critical',\n  Info = 'info',\n  None = 'none',\n  Warning = 'warning',\n}\n\nexport const enum AlertStates {\n  Firing = 'firing',\n  Pending = 'pending',\n  Silenced = 'silenced',\n}\n\nexport const enum SilenceStates {\n  Active = 'active',\n  Expired = 'expired',\n  Pending = 'pending',\n}\n\nexport enum MonitoringRoutes {\n  Kibana = 'kibana',\n}\n\nconst DEFAULTS = _.mapValues(MonitoringRoutes, undefined);\n\nexport type MonitoringState = ImmutableMap<string, any>;\n\nexport const monitoringReducerName = 'monitoringURLs';\nexport const monitoringReducer = (\n  state: MonitoringState,\n  action: MonitoringAction,\n): MonitoringState => {\n  if (!state) {\n    return ImmutableMap(DEFAULTS);\n  }\n\n  switch (action.type) {\n    case ActionType.SetMonitoringURL:\n      return state.merge({ [action.payload.name]: action.payload.url });\n\n    default:\n      return state;\n  }\n};\n\nconst stateToProps = (desiredURLs: string[], state) => {\n  const urls = desiredURLs.reduce(\n    (previous, next) => ({ ...previous, [next]: state[monitoringReducerName].get(next) }),\n    {},\n  );\n  return { urls };\n};\n\nexport const connectToURLs = (...urls) => connect((state) => stateToProps(urls, state));\n\nexport const alertState = (a) => a?.state;\nexport const silenceState = (s) => s?.status?.state;\n\nexport const alertingRuleIsActive = (rule) => (rule.state === 'inactive' ? 'false' : 'true');\n\nexport const alertDescription = (alert) =>\n  alert.annotations?.description || alert.annotations?.message || alert.labels?.alertname;\n\n// Sort alerts and silences by their state (sort first by the state itself, then by the timestamp relevant to the state)\nexport const alertStateOrder = (alert) => [\n  [AlertStates.Firing, AlertStates.Silenced, AlertStates.Pending].indexOf(alertState(alert)),\n  alertState(alert) === AlertStates.Silenced\n    ? _.max(_.map(alert.silencedBy, 'endsAt'))\n    : _.get(alert, 'activeAt'),\n];\n\nexport const silenceFiringAlertsOrder = (silence) => {\n  const severityCounts = _.countBy(silence.firingAlerts, 'labels.severity');\n  return [\n    severityCounts[AlertSeverity.Critical],\n    severityCounts[AlertSeverity.Warning],\n    silence.firingAlerts.length,\n  ];\n};\n\nexport const silenceStateOrder = (silence) => [\n  [SilenceStates.Active, SilenceStates.Pending, SilenceStates.Expired].indexOf(\n    silenceState(silence),\n  ),\n  _.get(silence, silenceState(silence) === SilenceStates.Pending ? 'startsAt' : 'endsAt'),\n];\n\n// Determine if an Alert is silenced by a Silence (if all of the Silence's matchers match one of the Alert's labels)\nexport const isSilenced = (alert, silence) =>\n  [AlertStates.Firing, AlertStates.Silenced].includes(alert.state) &&\n  _.every(silence.matchers, (m) => {\n    const alertValue = _.get(alert.labels, m.name);\n    return (\n      alertValue !== undefined &&\n      (m.isRegex ? new RegExp(`^${m.value}$`).test(alertValue) : alertValue === m.value)\n    );\n  });\n","import * as _ from 'lodash-es';\nimport { List as ImmutableList, Map as ImmutableMap } from 'immutable';\n\nimport { ActionType, UIAction } from '../actions/ui';\nimport {\n  ALL_NAMESPACES_KEY,\n  ALL_APPLICATIONS_KEY,\n  LAST_NAMESPACE_NAME_LOCAL_STORAGE_KEY,\n  NAMESPACE_LOCAL_STORAGE_KEY,\n  LAST_PERSPECTIVE_LOCAL_STORAGE_KEY,\n  PINNED_RESOURCES_LOCAL_STORAGE_KEY,\n  LAST_CLUSTER_LOCAL_STORAGE_KEY,\n} from '@console/shared/src/constants';\nimport { AlertStates, isSilenced, SilenceStates } from '../reducers/monitoring';\nimport { legalNamePattern, getNamespace } from '../components/utils/link';\nimport { OverviewSpecialGroup } from '../components/overview/constants';\nimport { RootState } from '../redux';\nimport { getPerspectives } from '../hypercloud/perspectives';\nimport { Alert } from '../components/monitoring';\n\nexport type UIState = ImmutableMap<string, any>;\n\nexport function getDefaultPerspective() {\n  if(!window.SERVER_FLAGS.McMode){\n    return 'hc';\n  }\n\n  let activePerspective = localStorage.getItem(LAST_PERSPECTIVE_LOCAL_STORAGE_KEY);\n  if (\n    activePerspective &&\n    !getPerspectives().some((p) => p.properties.id === activePerspective)\n  ) {\n    // invalid saved perspective\n    activePerspective = undefined;\n  }\n  if (!activePerspective) {\n    // assign default perspective\n    const defaultPerspective = getPerspectives().find((p) => p.properties.default);\n    if (defaultPerspective) {\n      activePerspective = defaultPerspective.properties.id;\n    }\n  }\n  return activePerspective || undefined;\n}\n\nconst newQueryBrowserQuery = (): ImmutableMap<string, any> =>\n  ImmutableMap({\n    id: _.uniqueId('query-browser-query'),\n    isEnabled: true,\n    isExpanded: true,\n  });\n\nconst silenceFiringAlerts = (firingAlerts, silences) => {\n  // For each firing alert, store a list of the Silences that are silencing it and set its state to show it is silenced\n  _.each(firingAlerts, (a) => {\n    a.silencedBy = _.filter(\n      _.get(silences, 'data'),\n      (s) => _.get(s, 'status.state') === SilenceStates.Active && isSilenced(a, s),\n    );\n    if (a.silencedBy.length) {\n      a.state = AlertStates.Silenced;\n      // Also set the state of Alerts in `rule.alerts`\n      _.each(a.rule.alerts, (ruleAlert) => {\n        if (_.some(a.silencedBy, (s) => isSilenced(ruleAlert, s))) {\n          ruleAlert.state = AlertStates.Silenced;\n        }\n      });\n    }\n  });\n};\n\nexport default (state: UIState, action: UIAction): UIState => {\n  if (!state) {\n    const { pathname } = window.location;\n\n    let activeNamespace = getNamespace(pathname);\n    if (!activeNamespace) {\n      const parsedFavorite = localStorage.getItem(NAMESPACE_LOCAL_STORAGE_KEY);\n      if (\n        _.isString(parsedFavorite) &&\n        (parsedFavorite.match(legalNamePattern) || parsedFavorite === ALL_NAMESPACES_KEY)\n      ) {\n        activeNamespace = parsedFavorite;\n      } else {\n        activeNamespace = localStorage.getItem(LAST_NAMESPACE_NAME_LOCAL_STORAGE_KEY);\n      }\n    }\n\n    const storedPins = localStorage.getItem(PINNED_RESOURCES_LOCAL_STORAGE_KEY);\n    const pinnedResources = storedPins ? JSON.parse(storedPins) : {};\n\n    const activeCluster = window.SERVER_FLAGS.McMode ? localStorage.getItem(LAST_CLUSTER_LOCAL_STORAGE_KEY) : undefined;\n\n    return ImmutableMap({\n      activeNavSectionId: 'workloads',\n      location: pathname,\n      activeNamespace: activeNamespace || ALL_NAMESPACES_KEY,\n      activeApplication: ALL_APPLICATIONS_KEY,\n      activePerspective: getDefaultPerspective(),\n      createProjectMessage: '',\n      overview: ImmutableMap({\n        metrics: {},\n        resources: ImmutableMap({}),\n        selectedDetailsTab: 'Resources',\n        selectedUID: '',\n        selectedGroup: OverviewSpecialGroup.GROUP_BY_APPLICATION,\n        groupOptions: ImmutableMap(),\n        filterValue: '',\n      }),\n      user: {},\n      consoleLinks: [],\n      monitoringDashboards: ImmutableMap({\n        pollInterval: 30 * 1000,\n        timespan: 30 * 60 * 1000,\n        variables: ImmutableMap(),\n      }),\n      queryBrowser: ImmutableMap({\n        metrics: [],\n        queries: ImmutableList([newQueryBrowserQuery()]),\n      }),\n      pinnedResources,\n      activeCluster,\n    });\n  }\n\n  switch (action.type) {\n    case ActionType.SetActiveApplication:\n      return state.set('activeApplication', action.payload.application);\n\n    case ActionType.SetActiveNamespace:\n      if (!action.payload.namespace) {\n        // eslint-disable-next-line no-console\n        console.warn('setActiveNamespace: Not setting to falsy!');\n        return state;\n      }\n\n      return state\n        .set('activeApplication', ALL_APPLICATIONS_KEY)\n        .set('activeNamespace', action.payload.namespace);\n\n    case ActionType.SetActivePerspective:\n      return state.set('activePerspective', action.payload.perspective);\n\n    case ActionType.SetCurrentLocation: {\n      state = state.set('location', action.payload.location);\n      const ns = getNamespace(action.payload.location);\n      if (_.isUndefined(ns)) {\n        return state;\n      }\n      return state.set('activeNamespace', ns);\n    }\n    case ActionType.BeginImpersonate:\n      return state.set('impersonate', {\n        kind: action.payload.kind,\n        name: action.payload.name,\n        subprotocols: action.payload.subprotocols,\n      });\n\n    case ActionType.EndImpersonate:\n      return state.delete('impersonate');\n\n    case ActionType.SortList:\n      return state.mergeIn(\n        ['listSorts', action.payload.listId],\n        _.pick(action.payload, ['field', 'func', 'orderBy']),\n      );\n\n    case ActionType.SetCreateProjectMessage:\n      return state.set('createProjectMessage', action.payload.message);\n\n    case ActionType.SetClusterID:\n      return state.set('clusterID', action.payload.clusterID);\n\n    case ActionType.SetUser:\n      return state.set('user', action.payload.user);\n\n    case ActionType.MonitoringDashboardsClearVariables:\n      return state.setIn(['monitoringDashboards', 'variables'], ImmutableMap());\n\n    case ActionType.MonitoringDashboardsPatchVariable:\n      return state.mergeIn(\n        ['monitoringDashboards', 'variables', action.payload.key],\n        ImmutableMap(action.payload.patch),\n      );\n\n    case ActionType.MonitoringDashboardsPatchAllVariables:\n      return state.setIn(\n        ['monitoringDashboards', 'variables'],\n        ImmutableMap(action.payload.variables),\n      );\n\n    case ActionType.MonitoringDashboardsSetPollInterval:\n      return state.setIn(['monitoringDashboards', 'pollInterval'], action.payload.pollInterval);\n\n    case ActionType.MonitoringDashboardsSetTimespan:\n      return state.setIn(['monitoringDashboards', 'timespan'], action.payload.timespan);\n\n    case ActionType.MonitoringDashboardsVariableOptionsLoaded: {\n      const { key, newOptions } = action.payload;\n      const { options, value } = state.getIn(['monitoringDashboards', 'variables', key]).toJS();\n      const patch = _.isEqual(options, newOptions)\n        ? { isLoading: false }\n        : {\n            isLoading: false,\n            options: newOptions,\n            value: newOptions.includes(value) ? value : newOptions[0],\n          };\n      return state.mergeIn(['monitoringDashboards', 'variables', key], ImmutableMap(patch));\n    }\n    case ActionType.MonitoringSetRules:\n      return state.setIn(['monitoring', 'rules'], action.payload.rules);\n\n    case ActionType.SetMonitoringData: {\n      // alerts used by monitoring -> alerting pages\n      const alerts =\n        action.payload.key === 'alerts'\n          ? action.payload.data\n          : state.getIn(['monitoring', 'alerts']);\n      // notificationAlerts used by notification drawer and certain dashboards\n      const notificationAlerts: NotificationAlerts =\n        action.payload.key === 'notificationAlerts'\n          ? action.payload.data\n          : state.getIn(['monitoring', 'notificationAlerts']);\n      const silences =\n        action.payload.key === 'silences'\n          ? action.payload.data\n          : state.getIn(['monitoring', 'silences']);\n\n      const isAlertFiring = (alert) =>\n        alert?.state === AlertStates.Firing || alert?.state === AlertStates.Silenced;\n      const firingAlerts = _.filter(alerts?.data, isAlertFiring);\n      silenceFiringAlerts(firingAlerts, silences);\n      silenceFiringAlerts(_.filter(notificationAlerts?.data, isAlertFiring), silences);\n      // filter out silenced alerts from notificationAlerts\n      notificationAlerts.data = _.reject(notificationAlerts.data, { state: AlertStates.Silenced });\n      state = state.setIn(['monitoring', 'alerts'], alerts);\n      state = state.setIn(['monitoring', 'notificationAlerts'], notificationAlerts);\n\n      // For each Silence, store a list of the Alerts it is silencing\n      _.each(_.get(silences, 'data'), (s) => {\n        s.firingAlerts = _.filter(firingAlerts, (a) => isSilenced(a, s));\n      });\n      return state.setIn(['monitoring', 'silences'], silences);\n    }\n    case ActionType.ToggleMonitoringGraphs:\n      return state.setIn(['monitoring', 'hideGraphs'], !state.getIn(['monitoring', 'hideGraphs']));\n\n    case ActionType.NotificationDrawerToggleExpanded:\n      return state.setIn(\n        ['notifications', 'isExpanded'],\n        !state.getIn(['notifications', 'isExpanded']),\n      );\n\n    case ActionType.NotificationDrawerToggleRead:\n      return state.setIn(['notifications', 'isRead'], !state.getIn(['notifications', 'isRead']));\n\n    case ActionType.QueryBrowserAddQuery:\n      return state.setIn(\n        ['queryBrowser', 'queries'],\n        state.getIn(['queryBrowser', 'queries']).push(newQueryBrowserQuery()),\n      );\n\n    case ActionType.QueryBrowserDeleteAllQueries:\n      return state.setIn(['queryBrowser', 'queries'], ImmutableList([newQueryBrowserQuery()]));\n\n    case ActionType.QueryBrowserDeleteQuery: {\n      let queries = state.getIn(['queryBrowser', 'queries']).delete(action.payload.index);\n      if (queries.size === 0) {\n        queries = queries.push(newQueryBrowserQuery());\n      }\n      return state.setIn(['queryBrowser', 'queries'], queries);\n    }\n    case ActionType.QueryBrowserDismissNamespaceAlert:\n      return state.setIn(['queryBrowser', 'dismissNamespaceAlert'], true);\n\n    case ActionType.QueryBrowserInsertText: {\n      const { index, newText, replaceFrom, replaceTo } = action.payload;\n      const oldText = state.getIn(['queryBrowser', 'queries', index, 'text'], '');\n      const text =\n        _.isInteger(replaceFrom) && _.isInteger(replaceTo)\n          ? oldText.substring(0, replaceFrom) + newText + oldText.substring(replaceTo)\n          : oldText + newText;\n      return state.setIn(['queryBrowser', 'queries', index, 'text'], text);\n    }\n    case ActionType.QueryBrowserPatchQuery: {\n      const { index, patch } = action.payload;\n      const query = state.hasIn(['queryBrowser', 'queries', index])\n        ? ImmutableMap(patch)\n        : newQueryBrowserQuery().merge(patch);\n      return state.mergeIn(['queryBrowser', 'queries', index], query);\n    }\n    case ActionType.QueryBrowserRunQueries: {\n      const queries = state.getIn(['queryBrowser', 'queries']).map((q) => {\n        const isEnabled = q.get('isEnabled');\n        const query = q.get('query');\n        const text = _.trim(q.get('text'));\n        return isEnabled && query !== text ? q.merge({ query: text, series: undefined }) : q;\n      });\n      return state.setIn(['queryBrowser', 'queries'], queries);\n    }\n    case ActionType.QueryBrowserSetAllExpanded: {\n      const queries = state.getIn(['queryBrowser', 'queries']).map((q) => {\n        return q.set('isExpanded', action.payload.isExpanded);\n      });\n      return state.setIn(['queryBrowser', 'queries'], queries);\n    }\n    case ActionType.QueryBrowserSetMetrics:\n      return state.setIn(['queryBrowser', 'metrics'], action.payload.metrics);\n\n    case ActionType.QueryBrowserToggleIsEnabled: {\n      const query = state.getIn(['queryBrowser', 'queries', action.payload.index]);\n      const isEnabled = !query.get('isEnabled');\n      return state.setIn(\n        ['queryBrowser', 'queries', action.payload.index],\n        query.merge({\n          isEnabled,\n          isExpanded: isEnabled,\n          query: isEnabled ? query.get('text') : '',\n        }),\n      );\n    }\n    case ActionType.QueryBrowserToggleSeries:\n      return state.updateIn(\n        ['queryBrowser', 'queries', action.payload.index, 'disabledSeries'],\n        (v) => _.xorWith(v, [action.payload.labels], _.isEqual),\n      );\n\n    case ActionType.SelectOverviewItem:\n      return state.setIn(['overview', 'selectedUID'], action.payload.uid);\n\n    case ActionType.SelectOverviewDetailsTab:\n      return state.setIn(['overview', 'selectedDetailsTab'], action.payload.tab);\n\n    case ActionType.DismissOverviewDetails:\n      return state.mergeIn(['overview'], { selectedUID: '', selectedDetailsTab: '' });\n\n    case ActionType.UpdateOverviewMetrics:\n      return state.setIn(['overview', 'metrics'], action.payload.metrics);\n\n    case ActionType.UpdateOverviewResources: {\n      const newResources = ImmutableMap(_.keyBy(action.payload.resources, 'obj.metadata.uid'));\n      return state.setIn(['overview', 'resources'], newResources);\n    }\n\n    case ActionType.UpdateOverviewSelectedGroup: {\n      return state.setIn(['overview', 'selectedGroup'], action.payload.group);\n    }\n\n    case ActionType.UpdateOverviewLabels: {\n      return state.setIn(['overview', 'labels'], action.payload.labels);\n    }\n\n    case ActionType.UpdateOverviewFilterValue: {\n      return state.setIn(['overview', 'filterValue'], action.payload.value);\n    }\n    case ActionType.UpdateTimestamps:\n      return state.set('lastTick', action.payload.lastTick);\n\n    case ActionType.SetConsoleLinks:\n      return state.set('consoleLinks', action.payload.consoleLinks);\n\n    case ActionType.SetPodMetrics:\n      return state.setIn(['metrics', 'pod'], action.payload.podMetrics);\n\n    case ActionType.SetNamespaceMetrics:\n      return state.setIn(['metrics', 'namespace'], action.payload.namespaceMetrics);\n    case ActionType.SetNodeMetrics:\n      return state.setIn(['metrics', 'node'], action.payload.nodeMetrics);\n\n    case ActionType.SetPinnedResources: {\n      const pinnedResources = { ...state.get('pinnedResources') };\n      pinnedResources[state.get('activePerspective')] = action.payload.resources;\n      localStorage.setItem(PINNED_RESOURCES_LOCAL_STORAGE_KEY, JSON.stringify(pinnedResources));\n      return state.set('pinnedResources', pinnedResources);\n    }\n\n    case ActionType.SetActiveCluster:\n      return state.set('activeCluster', action.payload.cluster);\n\n    default:\n      break;\n  }\n  return state;\n};\n\nexport const createProjectMessageStateToProps = ({ UI }: RootState) => {\n  return { createProjectMessage: UI.get('createProjectMessage') as string };\n};\n\nexport const userStateToProps = ({ UI }: RootState) => {\n  return { user: UI.get('user') };\n};\n\nexport const impersonateStateToProps = ({ UI }: RootState) => {\n  return { impersonate: UI.get('impersonate') };\n};\n\nexport const getActiveNamespace = ({ UI }: RootState): string => UI.get('activeNamespace');\n\nexport const getActivePerspective = ({ UI }: RootState): string => UI.get('activePerspective');\n\nexport const getActiveApplication = ({ UI }: RootState): string => UI.get('activeApplication');\n\nexport const getPinnedResources = (rootState: RootState): string[] =>\n  rootState.UI.get('pinnedResources')[getActivePerspective(rootState)];\n\nexport const getActiveCluster = ({ UI }: RootState): string => UI.get('activeCluster');\n\nexport type NotificationAlerts = {\n  data: Alert[];\n  loaded: boolean;\n  loadError?: {\n    message?: string;\n  };\n};\n","import { applyMiddleware, combineReducers, createStore, compose, ReducersMapObject } from 'redux';\nimport * as _ from 'lodash-es';\n\nimport { featureReducer, featureReducerName, FeatureState } from './reducers/features';\nimport { monitoringReducer, monitoringReducerName, MonitoringState } from './reducers/monitoring';\nimport k8sReducers, { K8sState } from './reducers/k8s';\nimport UIReducers, { UIState } from './reducers/ui';\nimport { dashboardsReducer, DashboardsState } from './reducers/dashboards';\nimport { registry } from './plugins';\nimport { isReduxReducer } from '@console/plugin-sdk';\n\nconst composeEnhancers =\n  (process.env.NODE_ENV !== 'production' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\n/**\n * This is the entirety of the `redux-thunk` library.\n * It hasn't changed since 2016 and has problems with it's TypeScript definitions\n * (https://github.com/reduxjs/redux-thunk/issues/231), so just including it here.\n */\nfunction createThunkMiddleware(extraArgument?) {\n  return ({ dispatch, getState }) => (next) => (action) => {\n    if (typeof action === 'function') {\n      return action(dispatch, getState, extraArgument);\n    }\n\n    return next(action);\n  };\n}\n\nconst thunk = createThunkMiddleware();\n(thunk as any).withExtraArgument = createThunkMiddleware;\n\nexport type RootState = {\n  k8s: K8sState;\n  UI: UIState;\n  [featureReducerName]: FeatureState;\n  [monitoringReducerName]: MonitoringState;\n  dashboards: DashboardsState;\n  plugins?: {\n    [namespace: string]: any;\n  };\n};\n\nconst baseReducers = Object.freeze({\n  k8s: k8sReducers, // data\n  UI: UIReducers,\n  [featureReducerName]: featureReducer,\n  [monitoringReducerName]: monitoringReducer,\n  dashboards: dashboardsReducer,\n});\n\nconst store = createStore(\n  combineReducers<RootState>(baseReducers),\n  {},\n  composeEnhancers(applyMiddleware(thunk)),\n);\n\nconst addPluginListener = () => {\n  const getReduxFlagsObject = () => {\n    const gatingFlags = registry.getGatingFlagNames([isReduxReducer]);\n    const featureState = store.getState()[featureReducerName];\n    return featureState ? _.pick(featureState.toObject(), gatingFlags) : null;\n  };\n\n  let flagsObject = getReduxFlagsObject();\n\n  store.subscribe(() => {\n    const currentFlagsObject = getReduxFlagsObject();\n\n    if (JSON.stringify(flagsObject) !== JSON.stringify(currentFlagsObject)) {\n      flagsObject = currentFlagsObject;\n\n      const pluginReducerExtensions = registry\n        .getReduxReducers()\n        .filter((e) => registry.isExtensionInUse(e, flagsObject));\n\n      const pluginReducers: ReducersMapObject = pluginReducerExtensions.reduce((map, e) => {\n        map[e.properties.namespace] = e.properties.reducer;\n        return map;\n      }, {});\n\n      const nextReducers: ReducersMapObject<RootState> = _.isEmpty(pluginReducers)\n        ? baseReducers\n        : { plugins: combineReducers(pluginReducers), ...baseReducers };\n\n      store.replaceReducer(combineReducers<RootState>(nextReducers));\n    }\n  });\n};\n\naddPluginListener();\n\nif (process.env.NODE_ENV !== 'production') {\n  // Expose Redux store for debugging\n  window.store = store;\n}\n\nexport default store;\n","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAIA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAKA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrFA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCA;AACA;AAiBA;AAQA;AACA;AACA;AACA;AACA;AACA;AAolYA;AAAA;AAAA;AAAA;AAGA;AACA;;;;;AAKA;AACA;AACA;AACA;;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;;AACA;AACA;AAIA;AAEA;;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;AC1CA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAGA;AAMA;AACA;AAOA;AAMA;AAYA;AAEA;;;;;;;;;;;;;AChFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwBA;AAGA;AASA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;AC5JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AAMA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;ACtFA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAKA;;;;;;;;;;;;ACjBA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAMA;AACA;AAEA;AAYA;;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AASA;AAEA;AACA;AAIA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;ACpJA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AASA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAWA;AAEA;;;;;;;;;;;;ACtCA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;ACnFA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAIA;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AA2BA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;ACzGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AAYA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAUA;AAEA;;AAAA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;AC/EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AAWA;AAEA;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAKA;AAEA;AACA;AAEA;;;;;;;;;;;;;ACzEA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AAKA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAEA;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AClKA;AAAA;AAAA;AAAA;AAAA;AAMA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AAQA;AAIA;AACA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAGA;;;;;;;;;;;;;AChIA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AAGA;AACA;AAIA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAWA;AAQA;;;;;;;;;;;;;AC1DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAQA;AAEA;AASA;AACA;AAWA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;;;;;;;;;;;;;ACvSA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;AC3DA;AAAA;AAAA;;;;;;;;;;;;;ACFA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACbvKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAGA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAEA;AAwBA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC1HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AAKA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AAAA;AAAA;;;;;;;;;;;;;ACmNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAWA;AAUA;AAUA;AAIA;AACA;AACA;AAMA;AAMA;AAOA;AASA;AASA;AAQA;AASA;AAUA;AAQA;;;;;;;;;;;;;ACjVA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;ACUA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;AClpCA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;;;;;;;;;;;;;ACyBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;AC1EA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;ACFA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;AAQA;AAEA;AACA;AAKA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;AACA;AAUA;AAEA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAOA;AAIA;AAEA;AAEA;;;;;;;;;;;;;AC3FA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAWA;;;;;;;;;;;;ACdA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAIA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAKA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAIA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAeA;AAEA;AAAA;;AACA;AACA;AACA;AACA;AAuBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAIA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AA0CA;AA7IA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAoFA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAKA;AAOA;AAGA;AAcA;AACA;;;;;;;;;;;;;AC3KA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAMA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AAMA;AAEA;;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAKA;AAOA;AAEA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAIA;AAIA;AAGA;AACA;AAEA;AACA;AAGA;AAEA;AAMA;;;;;;;;;;;;;AC3KA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AAIA;AAEA;AACA;AACA;AAKA;;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AAOA;AACA;AAGA;AAEA;AACA;AAMA;AAGA;AACA;AAEA;AACA;AACA;AAQA;AAQA;AAEA;;;;;;;;;;;;AC/EA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAWA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAIA;AAGA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AAEA;AACA;AAAA;AASA;AAGA;AAGA;AAKA;AAUA;AACA;AACA;AAEA;AAUA;AAGA;AAGA;;;;;;;;;;;;;ACxDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAMA;;;;;;;;;;;;ACTA;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAGA;;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAMA;;;;;;;;;;;;ACTA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAMA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AAEA;AAEA;AASA;AACA;AAEA;AAKA;AAEA;;;;;;;;;;;;ACpJA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAIA;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAQA;;;;;;;;;;;;ACZA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAQA;AAIA;AAOA;AAEA;;;;;;;;;;;;ACxCA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAIA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAMA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AAEA;AACA;AAiBA;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAEA;AAGA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAKA;AAKA;AAKA;AAKA;AAKA;AAKA;AAKA;;;;;;;;;;;;ACzFA;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAQA;AAWA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAEA;AACA;AAGA;AACA;AACA;AAMA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAIA;AAKA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AAQA;AAEA;AAGA;AAEA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AAWA;AAGA;AAIA;AAEA;AACA;;;;;;;;;;;;;ACtPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAYA;AACA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AAEA;AACA;AACA;AAIA;AAEA;;;;;;;;;;;;;AC5DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAIA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;;AAAA;AAKA;AAGA;AAEA;;;;;;;;;;;;ACxJA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;ACjCA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AA0CA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAGA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAIA;AAEA;;;;;;;;;;;;;AClJA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AAaA;AAEA;AACA;AAEA;AAgDA;AACA;AACA;AA6DA;AAgBA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAvJA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA+FA;AACA;AAmBA;AACA;AAEA;;;;;;;;;;;;;AC9PA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAUA;AACA;AAEA;AAEA;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAKA;AAEA;AAQA;AAEA;AAOA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AAMA;AAAA;AAAA;AAIA;AAEA;;;;;;;;;;;;ACbA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAkBA;AACA;AAKA;AAKA;AACA;AASA;AAUA;AAcA;;;;;;;;;;;;;ACtEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AASA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AAEA;AAEA;AAEA;AAWA;AACA;AACA;AACA;AACA;AAkBA;AACA;AACA;AAIA;AAEA;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AASA;AAOA;AACA;AACA;AACA;AAIA;AAEA;;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AASA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAOA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAcA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9EA;AACA;AAEA;AAEA;AAAA;AAGA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AAEA;AAAA;AAMA;AAGA;AAEA;AACA;AAKA;AAGA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAOA;AACA;AACA;AACA;AACA;AAEA;AAEA;AASA;AAKA;AACA;AACA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AASA;AAKA;AACA;AACA;AAKA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzCA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAcA;AAEA;;;;;;;;;;;;AC3BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAOA;AACA;AACA;AACA;AACA;AAWA;AACA;AAEA;AAEA;AACA;AAIA;AAEA;AAWA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAkBA;AAAA;AAWA;AACA;AACA;AACA;AACA;AAEA;AAEA;AASA;AACA;AASA;AACA;AACA;AACA;AAKA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAQA;AACA;AACA;AACA;AACA;AAEA;AAEA;AASA;AAGA;AACA;AACA;AACA;AAQA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDA;AACA;AAEA;AAEA;AAEA;AAAA;AAAA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AASA;AAYA;AAEA;;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAUA;AACA;AACA;AACA;AAYA;;AAUA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAQA;AAKA;AACA;AAOA;AAEA;AAOA;AACA;AAEA;AAMA;AAEA;AAIA;AACA;AAKA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxGA;AACA;AACA;AAEA;AAMA;AAAA;AAUA;AACA;AACA;AACA;AACA;AAsBA;AAEA;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAUA;AAEA;;;;;;;;;;;;;ACgBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;ACxCA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnBA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAuBA;AASA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AA4BA;AAEA;;;;;;;;;;;;ACnHA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAYA;AASA;AACA;AAQA;AACA;AAEA;AACA;AAEA;AAEA;AAKA;AAEA;;;;;;;;;;;;ACjDA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAgBA;AACA;AACA;AAGA;AACA;AACA;AAIA;AAOA;AAGA;AAMA;AACA;AAcA;AASA;AAGA;AAEA;;;;;;;;;;;;;ACpFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAQA;AAgBA;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AAEA;AAGA;AAKA;AACA;AAcA;AAIA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AASA;AAaA;AACA;AAEA;AAQA;AAEA;AAGA;AAEA;AAKA;AAKA;AAEA;AAWA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AAIA;;;;;;;;;;;;;AChFA;AAAA;AAAA;AAAA;AAGA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;AChBA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAMA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAIA;AAMA;AACA;AACA;AAAA;;AACA;AACA;AAMA;AAEA;;;;;;;;;;;;;ACrGA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACXA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;AAEA;AAAA;AAAA;AAIA;AAEA;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAGA;AACA;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;ACDA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAYA;AASA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AASA;AAEA;AACA;AACA;AAQA;AAEA;AASA;AAQA;AAEA;;;;;;;;;;;;;ACtHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AA8BA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAEA;;;;;;;;;;;;AC9GA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AA4BA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAoCA;AACA;AACA;AACA;AAtCA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;AACA;AAaA;AAEA;AAGA;AACA;AACA;AAcA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAGA;AAEA;AAIA;AAKA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACtKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAaA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AA8BA;AAEA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AASA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AAEA;;;;;;;;;;;;;AClOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAeA;AAEA;AAIA;AAYA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAGA;AAGA;AAEA;;;;;;;;;;;;;AC3EA;AAAA;AAAA;AAAA;AAEA;AAEA;AAIA;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AAEA;AACA;AAEA;AACA;AACA;AAOA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AAIA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AAEA;AAEA;AAAA;AAUA;AACA;AACA;AAEA;AAWA;AACA;AAQA;AASA;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AC5FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAQA;AAQA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAKA;AACA;AAGA;AAEA;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AAQA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AAGA;AAGA;AAEA;AAGA;AAEA;AAGA;AAEA;AAGA;AAEA;AAGA;AAEA;AAGA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzCA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;;AAGA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACXA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAIA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AAIA;AACA;;;;;;;;;;;;ACjpCA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AAOA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;;;;;;;;;;;;;AC5DA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;;AAKA;AACA;AAOA;AACA;AASA;AAEA;AACA;AACA;AAQA;AAKA;AACA;AAEA;;AAAA;AACA;AAEA;;;;;;;;;;;;;ACtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACltBA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AASA;AAMA;AAEA;AACA;AACA;AAMA;AAEA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;;AAKA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;AC1PA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAKA;AAEA;AACA;AAGA;AACA;AAEA;AAEA;;AAKA;AACA;AAEA;AACA;AAEA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAYA;AASA;AAWA;AAUA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AAKA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAIA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAKA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAGA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AAEA;AAIA;AACA;AAGA;AAEA;AAIA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AAKA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AAKA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAIA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAcA;AAGA;AAEA;AACA;AAKA;AAGA;AAGA;AAGA;AAGA;AAYA;AAYA;AAYA;AAYA;AAEA;AAGA;AApEA;AACA;AAqEA;;;;;;;;;;;;;ACpGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAQA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AAIA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;ACrIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;;AAKA;AAAA;AACA;AAKA;AAEA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;;AAAA;AAEA;AACA;AAEA;AACA;AAWA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAUA;AAKA;AAIA;;;;;;;;;;;;;ACvKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAQA;AAGA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AC9HA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AAcA;AACA;AACA;AACA;AAEA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACvJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAiBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAoLA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAgBA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxSA;AAAA;AAAA;AAAA;AAAA;AAKA;AAKA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAIA;;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;ACfA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;;ACEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AAoz6BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AAEA;;;;;;;;;;;;AAYA;AAEA;;;;;;;;;;;;;;;;AAgBA;AAEA;;;;;;;;;;;;;;;AAeA;AAEA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;AC7FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAkBA;;AAOA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;ACCA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAKA;AAKA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACTA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnMA;AAeA;AACA;AAEA;AACA;AACA;AAQA;AAUA;AAGA;AAGA;AAghCA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;;;;;;;;;;;;;AC5JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAgBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;;;;;;;;;AASA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAKA;AACA;AAKA;AACA;AAKA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AACA;AAIA;AACA;AAQA;AACA;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5QA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AA+FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzSA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjBA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAKA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;AClIA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzmBA;AAOA;AANA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;;AA7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAaA;AAYA;AAaA;AAwBA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AAhEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AA+BA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7HA;AAAA;AAAA;AAAA;AACA;AAEA;AASA;AACA;AAKA;AAJA;AACA;AACA;AAIA;AACA;AACA;;AAlBA;AACA;AACA;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AAQA;AAEA;;;;;;;;;;;;;AClDA;AAAA;AAAA;AAAA;AACA;AAEA;;AACA;AAEA;AAIA;AAQA;AAEA;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;AChyBA;AACA;AACA;AACA;AACA;AACA;;AA7BA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAQA;AAEA;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AACA;AAEA;;AACA;AACA;AACA;AACA;AAEA;AAIA;AAQA;AAEA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAsCA;AAMA;AAOA;AACA;AACA;AAGA;AAXA;AACA;AACA;AACA;AACA;;AAhDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAIA;AAQA;AAEA;AA2BA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AAGA;AAEA;AAIA;;;;;;;;;;;;;ACjFA;AAAA;AAAA;AAAA;AACA;AAEA;AAOA;AACA;AACA;AACA;AAkBA;AACA;AACA;;AA7BA;AACA;AACA;AASA;AAIA;AAQA;AAEA;;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAQA;AAEA;;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAqBA;AACA;AACA;AACA;AACA;AACA;;AAzBA;AACA;AACA;AAEA;AAIA;AAQA;AAEA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAaA;AACA;AAqBA;AApBA;AACA;AACA;AAoBA;AACA;AACA;AACA;;AAvCA;AACA;AAKA;AACA;AAWA;AAIA;AAQA;AAEA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AACA;AAEA;;AACA;AACA;AAEA;AAIA;AAQA;AAEA;;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAQA;AAEA;;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AAiFA;AAGA;AAEA;AAQA;AAEA;AALA;AACA;AASA;AACA;AACA;;AAtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAIA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AAGA;AAGA;AA8BA;AAIA;AAQA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9JA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AAEA;AAEA;AASA;AAOA;AAsBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAtDA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAoCA;;;;;;;;;;;;;ACtFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAUA;AAMA;AAQA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAYA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AA9DA;AACA;AACA;AACA;AACA;AACA;AAiBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAmCA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAUA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAGA;;AAOA;AAWA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AA1CA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AA4BA;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAEA;AAIA;AAIA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AA+BA;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAIA;AAMA;AACA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AA1CA;AAEA;AACA;AACA;AACA;AACA;AAsCA;AACA;AACA;AACA;;;;;;;;;;;;;AChEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAMA;AAyBA;AACA;AAaA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAzBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAzDA;;AAEA;AACA;AAYA;AACA;AACA;;;;;;;;;;;;;AChCA;AAAA;AAAA;AAAA;AAAA;AAEA;AAMA;AAMA;AACA;AAUA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AAEA;AACA;AACA;AACA;AACA;AACA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChiEA;;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA;;;;;;;;;;;;;AChEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAmBA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAoaA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAMA;AAGA;AAGA;AAGA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAGA;AAGA;AAEA;AAEA;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AAEA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AAEA;AAGA;AAEA;AAEA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAKA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAEA;;;;;;;;;;;;;AC1GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAGA;AAEA;AAEA;AAMA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AAIA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAGA;AACA;AACA;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAIA;AAGA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;ACtrBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AAEA;AAGA;;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AAEA;AAGA;AAGA;AAMA;AAIA;AACA;AACA;AAEA;AAEA;AAGA;AAEA;AAGA;AAEA;AAEA;;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAIA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AC9FA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAKA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAKA;;;;;;;;;;;;;ACzGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AAMA;AAKA;AACA;AACA;AACA;AAQA;AAEA;AACA;AACA;AAEA;AASA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AAQA;AACA;AAIA;AAOA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AAIA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAeA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACjUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;;;;;;;;;;;;ACZA;;;;;;;;;;;;ACCA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAEA;AAEA;;;;;;;;;;;;;AClDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAOA;AACA;AAEA;AAGA;AAGA;AAEA;AAGA;AAKA;AAGA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAuBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;ACpKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3EA;AAAA;AAAA;;;;;;;;;;;;;ACEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;;;;;;;;;;;;;AC7EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;AC5DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;;;;;;;;;;;;;AC7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;AC3GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAEA;;AAKA;AACA;AACA;AACA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAgvRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AAOA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAMA;AAGA;;;;;;;;;;;;;ACzEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAOA;AAYA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AAAA;AACA;AACA;AAEA;;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAQA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;;;;;AAKA;;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACzGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AACA;AAcrSA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AAOA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AACA;AAIA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AAGA;AAIA;AAKA;;;;;;;;;;;;;ACrEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AASA;AAUA;AAEA;AAGA;AAKA;AAIA;AACA;AAGA;AAGA;AAEA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAGA;;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAMA;AACA;AAGA;AAEA;AAKA;AAEA;AAMA;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAcA;;;;;;;;;;;;;AChJA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AAEA;AAGA;AAGA;AAGA;AACA;AAGA;AACA;AACA;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AAAA;AAEA;AACA;;;;;;;;;;;;;AC/EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACpGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAaA;AACA;AACA;AACA;AACA;AACA;AAGA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AC9TA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC7EA;;;;;;;;;;;;ACSA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AA6FA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AASA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAKA;AAcA;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAEA;AAKA;AACA;AACA;AAIA;AACA;AAUA;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AAEA;AAOA;AAEA;AACA;AAGA;AAEA;AAGA;AAEA;AAWA;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AAOA;AAaA;AACA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAQA;AACA;AA4BA;;;;;;;;;;;;;AC1HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AAGA;AACA;AACA;AAEA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;AC1HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAIA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAMA;AACA;AAKA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxQA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AAEA;AAEA;AAEA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5UA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAEA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAOA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA6BA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9ZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5MA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAevgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAQA;AACA;AAGA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;;AC9RA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAGA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAGA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;ACvKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAMA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAGA;AAEA;AACA;AAKA;AAEA;AACA;AAKA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAMA;AACA;AAIA;AACA;AACA;;;;;;;;;;;;;AClIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAGA;AACA;AAGA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAEA;;;;;;;;;;;;;AC1PA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9PA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AASA;AAGA;AACA;AAeA;AAaA;AACA;AAEA;AAGA;AAQA;;;;;;;;;;;;;AC5HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AASA;AACA;;;;;;;;;;;;;AC1EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AAGA;AAEA;AAIA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;;AACA;AAGA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AAIA;AACA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAUA;;;;;;;;;;;;;ACpJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AACA;AAoBA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAKA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAQA;AACA;AAOA;AACA;AASA;AAGA;AAEA;AACA;;AAEA;AACA;;AAMA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAOA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAEA;;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AAUA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;;;;;;;;;;;;;AC3ZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAOA;AACA;AAOA;AACA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AAKA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AAOA;AAWA;AACA;AAEA;AACA;AASA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAEA;AACA;AAOA;AACA;AAOA;AACA;AAKA;AACA;AAEA;AACA;AAIA;AAEA;AAGA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AASA;AAEA;AAUA;AAEA;AACA;AAWA;AACA;AACA;AACA;AACA;AAGA;AAQA;AAoEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACrrBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;;AACA;AACA;;AAAA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AAIA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAKA;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAEA;AAUA;AAEA;AAGA;AAEA;AAKA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzHA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AAKA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAkBA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;;;;;;;;;;;;;ACpvTA;AAAA;AAAA;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAGA;AACA;AACA;AAEA;AASA;AAIA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAQA;AAMA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;;;;;;;;;;;;;ACxJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAOA;;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAIA;AAIA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AAMA;AACA;AACA;AACA;AACA;AAaA;;;;;;;;;;;;;AC5JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAQA;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AAEA;AACA;AAIA;AAEA;;;;;;;;;;;;;AC7EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAEA;AACA;AAGA;AAGA;AAGA;AAGA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAOA;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAKA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAIA;AAMA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AASA;AAMA;AACA;AACA;AACA;AACA;AACA;AASA;AAMA;AACA;AACA;AACA;AACA;AACA;AASA;AAMA;AACA;AACA;AACA;AACA;AACA;AASA;AAMA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AASA;AASA;AASA;AAQA;AAUA;;;;;;;;;;;;;ACvMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAaA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAKA;AAeA;AACA;AALA;AACA;AACA;AA+CA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAYA;AA5FA;AACA;AACA;AACA;AAEA;;AAIA;AAGA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAqDA;AACA;AAEA;AAgBA;AACA;;;;;;;;;;;;;AC9KA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;ACrGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AAEA;AAQA;AAEA;AACA;AAEA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAAA;AAEA;AAEA;;AACA;AAEA;;AACA;AAQA;AAIA;AACA;AAIA;AACA;AACA;AAQA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAnBA;AACA;AACA;AACA;AACA;AACA;AAgBA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAQA;AAGA;AACA;AAEA;AAEA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAAA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;;AACA;AAGA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/dA;AAEA;AACA;AACA;AACA;AACA;AAUA;AAOA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AAIA;AAEA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AACA;AAUA;AAWA;AAyBA;;;;;;;;;;;;;AC7HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAwDA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA/DA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAYA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AAAA;AACA;AAEA;AAGA;AAAA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AACA;AAIA;AAOA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AA8BA;AAEA;AAEA;AACA;AACA;AAEA;AAOA;AAEA;AACA;AAIA;AAEA;;;;;;;;;;;;AClWA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAEA;AAMA;AAEA;AACA;AAKA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAYA;;;;;;;;;;;;;ACtGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAMA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AASA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AASA;AAAA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AAoEA;AACA;AACA;AAsCA;AACA;AA4FA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3GA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAOA;AAIA;AACA;AACA;AAEA;AAGA;AAWA;AACA;AA9LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA8JA;;;;;;;;;;;;;AC9ecA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAeA;AAyBA;AACA;;;;;;;;;;;;;AC1SA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AAWA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAiBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAcA;AAIA;AASA;AACA;AACA;AAYA;AAEA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAYA;AACA;AAIA;AACA;AACA;AACA;AACA;AAMA;AACA;AAOA;AAcA;AAEA;AAYA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAeA;;;;;;;;;;;;;ACxGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAGA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAOA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAKA;AACA;AAEA;AAGA;AACA;;;;;;;;;;;;;AC3DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClDA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAKA;AACA;;;;;;;;;;;;;AChIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvFA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACpEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC1FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AAGA;AACA;AAGA;AACA;AAOA;AAEA;;;;;;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AAGA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAUA;AAEA;AACA;AAGA;AAMA;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAMA;AACA;AAEA;;;;;;;;;;;;;ACvEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAgBA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;;AACA;AAOA;AAGA;AAKA;AAEA;AACA;AAUA;AAMA;AACA;AAIA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAQA;AAEA;AACA;AACA;AAEA;AAKA;AAEA;AACA;;;;;;;;;;;;;AC5IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AASA;;;;;;;;;;;;;AC1IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAEA;AAIA;AACA;AAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAcA;;;;;;;;;;;;;AC/DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AA0EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;;AAAA;AAIA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAGA;AAIA;AAGA;AACA;AACA;AACA;AAOA;AACA;AAEA;AACA;AAEA;AAGA;AAGA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AC7NA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;;AACA;AACA;;AACA;;AAAA;AACA;AAKA;;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AAEA;AAEA;AACA;AAGA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACzMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;;AACA;AACA;AAEA;AAIA;;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAKA;AACA;AACA;AAsNA;AAwKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAIA;AAEA;AAEA;AACA;AAGA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAIA;AACA;AA0BA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAMA;AACA;AAGA;AACA;AAMA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAWA;AAMA;AAEA;AACA;AAEA;AACA;AAKA;AAEA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;;;;;;;;;;;;;ACnjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAAA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAqCA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAiEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAmGA;AA5OA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA0BA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAMA;AAUA;AACA;AACA;AAQA;AAEA;AACA;AACA;AAWA;AAQA;AAEA;AACA;AAGA;AAaA;AAQA;AACA;AAEA;;;;;;;;;;;;;AC3QA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAQA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAhCA;AACA;AACA;AAgCA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAMA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAUA;AAQA;AACA;AAEA;;;;;;;;;;;;;AC7HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AAEA;;AACA;;AAIA;AAEA;AACA;AAEA;AAKA;AAGA;AACA;AAEA;;;;;;;;;;;;;AC/EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAQA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAKA;AAKA;AAKA;AAKA;AAKA;AAKA;AAKA;AAGA;AAKA;AAGA;AAKA;AAKA;AAGA;AAGA;AAKA;AAKA;AAGA;AAKA;AAKA;AAKA;AAKA;AAKA;AAKA;;;;;;;;;;;;;AC/GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AAWA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAIA;AACA;AACA;AAWA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAAA;AAGA;AAEA;AAEA;;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAKA;;AAAA;AAIA;AAGA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAIA;;AAAA;AAKA;AAEA;AACA;AACA;AAIA;AAIA;;AAAA;;AAAA;AAKA;AAEA;AAGA;AACA;AAIA;AAEA;AACA;AACA;AAIA;AAEA;AAOA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAQA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AASA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAOA;AACA;AAEA;AAUA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;AAEA;AACA;AACA;AACA;AACA;AAeA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAaA;AAGA;AAKA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAWA;AAEA;AACA;AAEA;AAMA;AACA;AACA;AACA;AAIA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AASA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAQA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAaA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAOA;AACA;AAQA;AACA;AACA;AAgBA;AACA;AAGA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAAA;AAEA;AACA;AACA;AACA;AAKA;AACA;AAEA;AAIA;AAEA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AAYA;AAEA;AAEA;AAKA;AACA;AAEA;AAEA;AAEA;AAEA;AAGA;AAEA;AAWA;AAEA;AACA;AACA;AAEA;;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AAOA;AACA;AACA;AAcA;AACA;AACA;AAMA;AAIA;AACA;AACA;;AAEA;AACA;AAMA;AAEA;AACA;AACA;AAQA;AACA;AACA;AAQA;AACA;AACA;AACA;AAMA;AACA;AAMA;AAOA;AACA;AAMA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAOA;AACA;AACA;AAGA;AAUA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAEA;AACA;AACA;AAKA;AACA;;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/wDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;AAMA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AAEA;;;AAGA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAaA;AACA;AAEA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AAOA;AAOA;;AACA;AAEA;AAGA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAGA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;;;ACtcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAOA;AAGA;AAEA;AAEA;AAEA;AACA;AAKA;AACA;AAOA;AAGA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;;;ACxGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AAeA;;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAAA;AAEA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AASA;AAWA;AACA;AACA;AAWA;;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAEA;AAEA;AACA;AAIA;AACA;AAwBA;AAEA;AAUA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AASA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAQA;AAEA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAKA;AAQA;AAEA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAGA;AAQA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAEA;AACA;AAIA;AAIA;AACA;AAEA;AACA;AAKA;AAEA;AAYA;AAGA;AAIA;;AAKA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AACA;AAGA;AACA;AACA;AAGA;AACA;AAQA;AAGA;AAGA;AACA;AACA;AACA;AACA;AA4FA;;;;;;;;;;;;;ACxnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAEA;AAMA;AACA;AAUA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAQA;;;;;;;;;;;;;AC1EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAUA;AAEA;AAGA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAEA;AACA;AAUA;AACA;AAGA;AAUA;AAQA;;;;;;;;;;;;;AC/LA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAceA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AASA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAOA;AAEA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AAaA;AAOA;AAEA;AAIA;AACA;AAEA;AAgBA;AAEA;AAMA;AAEA;AAQA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;AAEA;AAQA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;AAAA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AASA;AACA;AAEA;AASA;AACA;AAEA;AAaA;AAKA;AASA;AACA;AAEA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAQA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AAaA;AACA;AAKA;AAUA;AAEA;AAKA;AAIA;AAOA;AACA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAMA;AACA;;;;;;;;;;;;;ACr/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAcaA;AAOA;AACA;AAMA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAMA;AAWA;AAEA;AAEA;AAIA;AAgiCA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxuaA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACroBA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACrCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AASA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAKA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAQA;AACA;AAIA;;AAzCA;AACA;AACA;AACA;AAyCA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AAAA;AAQA;AACA;AACA;AACA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;AC/QA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAaA;AAOA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAQA;AACA;AACA;AAOA;AAEA;AASA;AACA;AACA;AAIA;AAIA;AACA;AACA;AAKA;AAIA;AACA;AAMA;AACA;AACA;AACA;AAQA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AACA;;;;;;;;;;;;;ACtIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AASA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AChJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AA+DA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA9GA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAoDA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAUA;AACA;;;;;;;;;;;;;AC5MA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAGA;AAEA;AAEA;AAGA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AAMA;AAMA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAKA;AA2BA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAIA;AAEA;;AAGA;;AAEA;AACA;;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AAOA;AAEA;AACA;AAGA;AAGA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAOA;AAEA;AAOA;AAEA;AAEA;AACA;;;;;;;;;;;;;AClIA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AAEA;AACA;AAWA;AACA;AAIA;AACA;AAEA;AASA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;;AAIA;AAEA;AAoEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA4IA;AArPA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAkBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgDA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAMA;AAMA;AAMA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;;AAAA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAKA;AAQA;AAKA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAYA;AAEA;AACA;AACA;AAEA;AAMA;AAEA;;;;;;;;;;;;;ACpgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAEA;AAAA;AAKA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AAEA;AACA;AAEA;AAAA;AAIA;AAEA;AAEA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AAEA;AAAA;AACA;AACA;AAKA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAIA;;AAAA;;AAEA;;AAEA;;AAAA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AAQA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AAQA;AACA;AAEA;AACA;AAMA;AACA;AAOA;;;;;;;;;;;;;AChFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AAEA;AAMA;AAQA;AAEA;AAMA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAOA;AAOA;;;;;;;;;;;;;ACnJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AAEA;AAIA;AACA;AACA;AACA;;AAAA;AAAA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AAIA;AACA;AACA;AACA;;AAEA;AAMA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAUA;AAEA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AAKA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AASA;;AAGA;AAGA;AAKA;AAEA;AACA;AACA;AAIA;AASA;AAEA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;;AAwDA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AA9FA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA4BA;AACA;AAEA;AAGA;AACA;;AAAA;;AAAA;AACA;AACA;AAGA;AACA;AACA;;;;;;;;;;;;;ACjcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AAOA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;AChEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAQA;AAIA;AAKA;AAKA;AAKA;AAGA;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAWA;AACA;AAGA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;AAEA;AAQA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAIA;AAGA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAGA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAOA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;;;;;;;;;;;;AC3cA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAAA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAIA;AAGA;AASA;AA2BA;AACA;;;;;;;;;;;;;ACnEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;;AAAA;AAQA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAOA;;AAAA;AASA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;AAOA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACvOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAWA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAWA;AAiBA;AACA;;;;;;;;;;;;;AChHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AA2DA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzxUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAYA;AAQA;AACA;AACA;AAEA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAaA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAOA;AACA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AAOA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AAGA;;AACA;AACA;AASA;AAEA;AAGA;AAEA;AAKA;AACA;AAGA;AAeA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAIA;AAEA;AACA;AAEA;AAIA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAOA;AACA;AAIA;AAKA;;AAEA;AACA;;AAAA;AACA;AACA;AAIA;AACA;AACA;AAIA;AAIA;AACA;AACA;AAGA;AAGA;AAKA;AACA;AAQA;AACA;AAMA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AASA;AAEA;AAUA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAQA;AAEA;AAIA;AAKA;AAEA;AASA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAUA;;;;;;;;;;;;;AChiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAMA;AACA;AAOA;AACA;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAEA;AAQA;AACA;AACA;AACA;AACA;AASA;AACA;AAIA;;AAAA;AAEA;;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AAkBA;AACA;AAEA;AACA;;;;;;;;;;;;;ACvKA;AAAA;AAAA;AAAA;AAAA;AAEA;;;AAGA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAIA;AACA;;AAAA;AAOA;AAGA;;;;;;;;;;;;;ACvjiFA;AACA;AAEA;AACA;AACA;AAGA;AACA;AASA;AAMA;AAUA;AAlHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAsCA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AASA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AAQA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAUA;AAWA;AACA;AAiBA;AACA;AACA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AA3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAqCA;AACA;AAEA;AACA;AAGA;AACA;AAWA;AACA;AAGA;AACA;AAWA;AACA;AAGA;AACA;AAWA;AACA;AAGA;AACA;AAYA;AACA;AAiiCA;AAhCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AACA;AAEA;AAAA;;AACA;AACA;AACA;AACA;AAeA;AAdA;AACA;AACA;AACA;AACA;AASA;AACA;AAgBA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5tCA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AAIA;AACA;AAIA;AAOA;AACA;AACA;;;;;;;;;;;;;ACjGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAWA;AAOA;AACA;AACA;AACA;AAOA;;;;;;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;;AAEA;AACA;AAIA;AAAA;AACA;AACA;AAEA;AAAA;;AACA;AAGA;AACA;AAoDA;AAlDA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAGA;AACA;AAEA;AAMA;AAMA;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AAGA;AAMA;AAGA;AAMA;AAEA;AAQA;AAKA;AAEA;AAQA;AAEA;AAQA;AACA;AAKA;AAOA;AAOA;;;;;;;;;;;;;ACnHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAOA;AAGA;AAGA;AAIA;AACA;AACA;AACA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAKA;AACA;AACA;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAOA;;;;;;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAMA;AACA;AAMA;AAOA;;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7KA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAQA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAGA;AAEA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AAQA;AAGA;;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAEA;AAGA;AAIA;AACA;AAOA;AAIA;AACA;AAOA;AACA;AACA;AAEA;AAEA;AAOA;AAEA;AAIA;AACA;AAyBA;AACA;;;;;;;;;;;;;AC5IA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AAOA;;AAAA;AAEA;AAUA;AAaA;;;;;;;;;;;;;AC3DA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAIA;AAIA;;;;;;;;;;;;;ACZA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AACA;AAKA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAEA;AAGA;AACA;AACA;AAEA;AAGA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACjmBA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAUA;AAMA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AA0BA;AAMA;AAsBA;AACA;;;;;;;;;;;;;AC1IA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AAKA;AACA;AAQA;;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AACA;AAMA;AACA;AACA;AAQA;AACA;AAEA;AAEA;AAGA;AAYA;AAGA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAUA;AACA;;;;;;;;;;;;;AC9LA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAIA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;;AACA;AACA;AACA;AAiHA;AA/GA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACxSA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAQA;AACA;AAQA;AACA;AAMA;AAEA;AAGA;AAEA;AAeA;AAIA;AAGA;AACA;AAUA;AACA;AAIA;AACA;AAiBA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAWA;AAEA;AACA;AAEA;AAKA;AAIA;AAIA;AAAA;AACA;AAGA;AAEA;AACA;AAMA;AACA;AAEA;AAGA;AAIA;AACA;AAQA;AAGA;AAEA;AAOA;AAEA;AACA;AAIA;AAIA;AAOA;AACA;AAIA;AAKA;AACA;AAEA;AACA;AACA;AAIA;AAUA;AAEA;AAEA;AAIA;AAGA;AAyDA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzSA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAGA;;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAIA;AACA;AACA;AAEA;;AACA;AACA;AACA;;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AAKA;AAEA;AAIA;AAEA;AACA;AAEA;AAGA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AA8CA;;;;;;;;;;;;;AClpCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AACA;AAOA;AAKA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AACA;AAKA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;AC5NA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AAGA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAOA;AASA;AAQA;AAAA;AACA;AACA;AACA;AAEA;AACA;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AASA;AACA;AAHA;AASA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AA5CA;AACA;AACA;AACA;AA2CA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAMA;;AAhFA;AACA;AAEA;AACA;AA8HA;AACA;;;;;;;;;;;;;AC7fA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAMA;AACA;AACA;;;;;;;;;;;;;ACtEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAiBA;AAEA;AACA;AAUA;AACA;AAEA;AACA;AAGA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;;;;;;;;;;;;;ACjMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAFA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAYA;AAQA;AAIA;AAKA;AAMA;AAEA;AAGA;AACA;;;;;;;;;;;;;AChxJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAaA;AACA;AACA;AAEA;AAmBA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAOA;AAIA;AAEA;AAEA;AAMA;AAIA;AAUA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAYA;AACA;AAEA;AAiBA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AASA;;AAAA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAWA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAeA;AAEA;AACA;AAGA;AAEA;AAOA;AAKA;AASA;AAKA;AACA;AASA;AAEA;AAUA;AAUA;AAEA;AAIA;AACA;AAYA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAWA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAYA;AAEA;AACA;AAIA;AASA;AACA;AAEA;AAMA;AAIA;AACA;AASA;AACA;AAUA;AAEA;AAcA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAQA;AAKA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAMA;AAEA;AAQA;AAEA;AAKA;AAOA;AAIA;;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;;AAGA;AACA;AAIA;AAMA;AAEA;;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AAMA;;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAQA;AASA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AASA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9KA;AAAA;AAAA;AAAA;AAAA;AAEA;;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAoCA;AAlCA;AACA;AACA;AACA;AACA;AAEA;AACA;AAaA;AAaA;AACA;;;;;;;;;;;;;ACtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AAEA;AACA;AAYA;AAEA;AAAA;AACA;AAIA;;;;;;;;;;;;;ACzDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAcA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AAOA;;;;;;;;;;;;;ACtIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAYA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAGA;AAEA;AAGA;AAEA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAUA;AAEA;AAEA;AASA;AASA;AAIA;AAYA;AAWA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAEA;AACA,iBAGA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAWA;AACA;AAEA;;AAEA;AAKA;AAEA;AAEA;AACA;AAcA;AACA;;;;;;;;;;;;;ACvIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AAaA;;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AASA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAUA;AAGA;AACA;;;;;;;;;;;;;AC9EA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AAOA;;AACA;AACA;AAEA;;AAEA;AACA;AASA;AAIA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AAKA;AAOA;AAEA;AAQA;AACA;AAKA;AAEA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAGA;AAEA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAGA;AAEA;AAIA;AAWA;;;;;;;;;;;;;ACnKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAKA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;;;;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3CA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAEA;AACA;AACA;AAEA;AAQA;AACA;AACA;AAOA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAMA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACxcA;AAEA;AAEA;AACA;AAEA;AACA;AAKA;AASA;AACA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAOA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;AACA;AACA;AAIA;;;;;;;;;;;;;ACzcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtnMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC7CA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAWA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAeA;;;AAGA;AACA;AAQA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAEA;AAEA;AACA;;;;;;;;;;;;;ACzv7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC1HA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC5DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AASA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AAOA;AAEA;AACA;AAOA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;;;;;;;;;;;;;AClMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;AC1DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAWA;AACA;AAEA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvdA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;;;;;;;;;;;;;ACnEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAWA;AAGA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AAIA;AACA;AAEA;AAGA;AAKA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AAEA;AAGA;AAGA;;;;;;;;;;;;;AC/IA;AAAA;AAAA;AAAA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAGA;AAKA;AAGA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnjrCA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7IA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACoCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAsKA;AAAA;AACA;AACA;AACA;AACA;AAobA;AAAA;AACA;AACA;AACA;AACA;AA4CA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxsBA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;;;;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;ACzRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAcA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC1EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAaA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AAiBA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;ACrHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAIA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;ACtGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AASA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAGA;;;;;;;;;;;;;ACtZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;ACjGA;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;A","sourceRoot":""}