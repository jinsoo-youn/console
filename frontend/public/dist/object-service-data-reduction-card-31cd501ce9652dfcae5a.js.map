{"version":3,"file":"object-service-data-reduction-card-31cd501ce9652dfcae5a.js","sources":["webpack:///./packages/noobaa-storage-plugin/src/components/object-data-reduction-card/object-data-reduction-card-item.tsx","webpack:///./packages/noobaa-storage-plugin/src/components/object-data-reduction-card/object-data-reduction-card.scss?6862","webpack:///./packages/noobaa-storage-plugin/src/components/object-data-reduction-card/object-data-reduction-card.tsx","webpack:///./packages/noobaa-storage-plugin/src/constants/index.ts","webpack:///./packages/noobaa-storage-plugin/src/queries.ts","webpack:///./packages/noobaa-storage-plugin/src/utils.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  FieldLevelHelp,\n  humanizeBinaryBytes,\n  humanizePercentage,\n} from '@console/internal/components/utils';\n\nconst ItemBody: React.FC<ItemBodyProps> = React.memo(\n  ({ title, stats, infoText, isLoading, error }) => {\n    let status: React.ReactElement;\n    if (isLoading) {\n      status = <div className=\"skeleton-text nb-object-data-reduction__item-body--loading\" />;\n    } else if (error || !stats) {\n      status = <span className=\"co-dashboard-text--small text-muted\">Not available</span>;\n    } else {\n      status = <span className=\"nb-object-data-reduction-card__row-status-item-text\">{stats}</span>;\n    }\n    return (\n      <div className=\"co-inventory-card__item\">\n        <div className=\"nb-object-data-reduction-card__row-title\">{title}</div>\n        <div className=\"nb-object-data-reduction-card__row-status-item\">\n          {status}\n          <FieldLevelHelp>{infoText}</FieldLevelHelp>\n        </div>\n      </div>\n    );\n  },\n);\n\nexport const EfficiencyItem: React.FC<EfficiencyItemProps> = React.memo(\n  ({ efficiency, isLoading, error }) => {\n    const infoText =\n      'Efficiency ratio refers to the deduplication and compression process effectiveness.';\n    let stats: string = efficiency;\n    if (efficiency) {\n      const formattedEfficiency = +Number(efficiency).toFixed(1);\n      stats = formattedEfficiency === 0 ? '1:1' : `${formattedEfficiency}:1`;\n    }\n    return (\n      <ItemBody\n        title=\"Efficiency Ratio\"\n        stats={stats}\n        infoText={infoText}\n        isLoading={isLoading}\n        error={error}\n      />\n    );\n  },\n);\n\nexport const SavingsItem: React.FC<SavingsItemProps> = React.memo(\n  ({ savings, logicalSize, isLoading, error }) => {\n    const infoText =\n      'Savings shows the uncompressed and non-deduped data that would have been stored without those techniques';\n    let stats: string = null;\n    const savingsValue = Number(savings);\n    if (savings && logicalSize) {\n      const savedBytes = humanizeBinaryBytes(savingsValue).string;\n      const savingsPercentage = `${savedBytes} (${\n        humanizePercentage((100 * savingsValue) / Number(logicalSize)).string\n      })`;\n      stats = savingsValue <= 0 ? 'No Savings' : savingsPercentage;\n    }\n    return (\n      <ItemBody\n        title=\"Savings\"\n        stats={stats}\n        infoText={infoText}\n        isLoading={isLoading}\n        error={error}\n      />\n    );\n  },\n);\n\ntype ItemBodyProps = {\n  title: string;\n  stats: string;\n  infoText: string;\n  isLoading: boolean;\n  error: boolean;\n};\n\ntype EfficiencyItemProps = {\n  efficiency: string;\n  isLoading: boolean;\n  error: boolean;\n};\n\ntype SavingsItemProps = {\n  savings: string;\n  logicalSize: string;\n  isLoading: boolean;\n  error: boolean;\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport {\n  DashboardItemProps,\n  withDashboardResources,\n} from '@console/internal/components/dashboard/with-dashboard-resources';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport { getGaugeValue } from '../../utils';\nimport { ObjectDataReductionQueries } from '../../queries';\nimport { EfficiencyItem, SavingsItem } from './object-data-reduction-card-item';\nimport './object-data-reduction-card.scss';\n\nconst DataReductionCard: React.FC<DashboardItemProps> = ({\n  watchPrometheus,\n  stopWatchPrometheusQuery,\n  prometheusResults,\n}) => {\n  React.useEffect(() => {\n    Object.keys(ObjectDataReductionQueries).forEach((key) =>\n      watchPrometheus(ObjectDataReductionQueries[key]),\n    );\n    return () =>\n      Object.keys(ObjectDataReductionQueries).forEach((key) =>\n        stopWatchPrometheusQuery(ObjectDataReductionQueries[key]),\n      );\n  }, [watchPrometheus, stopWatchPrometheusQuery]);\n\n  const efficiencyQueryResult = prometheusResults.getIn([\n    ObjectDataReductionQueries.EFFICIENCY_QUERY,\n    'data',\n  ]) as PrometheusResponse;\n  const efficiencyQueryResultError = prometheusResults.getIn([\n    ObjectDataReductionQueries.EFFICIENCY_QUERY,\n    'loadError',\n  ]);\n\n  const savingsQueryResult = prometheusResults.getIn([\n    ObjectDataReductionQueries.SAVINGS_QUERY,\n    'data',\n  ]) as PrometheusResponse;\n  const savingsQueryResultError = prometheusResults.getIn([\n    ObjectDataReductionQueries.SAVINGS_QUERY,\n    'loadError',\n  ]);\n\n  const logicalSavingsQueryResult = prometheusResults.getIn([\n    ObjectDataReductionQueries.LOGICAL_SAVINGS_QUERY,\n    'data',\n  ]) as PrometheusResponse;\n  const logicalSavingsQueryResultError = prometheusResults.getIn([\n    ObjectDataReductionQueries.LOGICAL_SAVINGS_QUERY,\n    'loadError',\n  ]);\n\n  const efficiency = getGaugeValue(efficiencyQueryResult);\n  const savings = getGaugeValue(savingsQueryResult);\n  const logicalSize = getGaugeValue(logicalSavingsQueryResult);\n\n  const efficiencyProps = {\n    efficiency,\n    isLoading: !efficiencyQueryResult,\n    error: !!efficiencyQueryResultError,\n  };\n\n  const savingsProps = {\n    savings,\n    logicalSize,\n    isLoading: !savingsQueryResult && !logicalSavingsQueryResult,\n    error: !!savingsQueryResultError || !!logicalSavingsQueryResultError,\n  };\n\n  return (\n    <DashboardCard>\n      <DashboardCardHeader>\n        <DashboardCardTitle>Object Data Reduction</DashboardCardTitle>\n      </DashboardCardHeader>\n      <DashboardCardBody className=\"co-dashboard-card__body--no-padding\">\n        <EfficiencyItem {...efficiencyProps} />\n        <SavingsItem {...savingsProps} />\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\nexport default withDashboardResources(DataReductionCard);\n","export const ACCOUNTS = 'Accounts';\nexport const PROVIDERS = 'Providers';\nexport const BY_IOPS = 'I/O Operations';\nexport const BY_LOGICAL_USAGE = 'Logical Used Capacity';\nexport const BY_PHYSICAL_VS_LOGICAL_USAGE = 'Physical Vs Logical Usage';\nexport const BY_EGRESS = 'Egress';\nexport const PROJECTS = 'Projects';\nexport const BUCKET_CLASS = 'Bucket Class';\nexport const OCS_NS = 'openshift-storage';\nexport const NB_PROVISIONER = 'noobaa.io/obc';\n\nexport const CHART_LABELS = {\n  [BY_LOGICAL_USAGE]: 'Logical used capacity per account',\n  [BY_PHYSICAL_VS_LOGICAL_USAGE]: 'Physical vs. Logical used capacity',\n  [BY_EGRESS]: 'Egress Per Provider',\n  [BY_IOPS]: 'I/O Operations count',\n};\n\nexport enum BC_PROVIDERS {\n  AWS = 'AWS S3',\n  S3 = 'S3 Compatible',\n  PVC = 'PVC',\n  GCP = 'Google cloud storage',\n  AZURE = 'Azure Blob',\n  IBM = 'IBM COS',\n}\n\nexport const PROVIDERS_NOOBAA_MAP = {\n  [BC_PROVIDERS.AWS]: 'awsS3',\n  [BC_PROVIDERS.S3]: 's3Compatible',\n  [BC_PROVIDERS.AZURE]: 'azureBlob',\n  [BC_PROVIDERS.GCP]: 'googleCloudStorage',\n  [BC_PROVIDERS.PVC]: 'pvPool',\n  [BC_PROVIDERS.IBM]: 'ibmCos',\n};\n\nexport const BUCKET_LABEL_NOOBAA_MAP = {\n  [BC_PROVIDERS.AWS]: 'targetBucket',\n  [BC_PROVIDERS.S3]: 'targetBucket',\n  [BC_PROVIDERS.AZURE]: 'targetBlobContainer',\n  [BC_PROVIDERS.GCP]: 'targetBucket',\n  [BC_PROVIDERS.IBM]: 'targetBucket',\n};\n\nexport const NOOBAA_TYPE_MAP = {\n  [BC_PROVIDERS.AWS]: 'aws-s3',\n  [BC_PROVIDERS.S3]: 's3-compatible',\n  [BC_PROVIDERS.AZURE]: 'azure-blob',\n  [BC_PROVIDERS.GCP]: 'google-cloud-storage',\n  [BC_PROVIDERS.PVC]: 'pv-pool',\n  [BC_PROVIDERS.IBM]: 'ibm-cos',\n};\n\nexport const AWS_REGIONS = [\n  'us-east-1',\n  'us-east-2',\n  'us-west-1',\n  'us-west-2',\n  'ca-central-1',\n  'eu-central-1',\n  'eu-west-1',\n  'eu-west-2',\n  'eu-west-3',\n  'eu-north-1',\n  'ap-east-1',\n  'ap-northeast-1',\n  'ap-northeast-2',\n  'ap-northeast-3',\n  'ap-southeast-1',\n  'ap-southeast-2',\n  'ap-south-1',\n  'me-south-1',\n  'sa-east-1',\n];\n","import { ProjectModel } from '@console/internal/models';\nimport { PROJECTS, BUCKET_CLASS } from './constants';\nimport { NooBaaBucketClassModel } from './models';\n\nexport enum ObjectDashboardQuery {\n  CAPACITY_USAGE_PROJECT_QUERY = 'CAPACITY_USAGE_PROJECT_QUERY',\n  CAPACITY_USAGE_BUCKET_CLASS_QUERY = 'CAPACITY_USAGE_BUCKET_CLASS_QUERY',\n  PROJECTS_TOTAL_USED = 'PROJECTS_TOTAL_USED',\n  PROJECTS_BY_USED = 'PROJECTS_BY_USED',\n  BUCKETS_TOTAL_USED = 'BUCKETS_TOTAL_USED',\n  BUCKETS_BY_USED = 'BUCKETS_BY_USED',\n  NOOBAA_USED = 'NOOBAA_USED',\n  NOOBAA_TOTAL = 'NOOBAA_TOTAL',\n  PROJECTS_OTHERS = 'PROJECTS_OTHERS',\n  BUCKETS_BY_OTHERS = 'BUCKETS_BY_OTHERS',\n  PROJECT_CAPACITY_USAGE_QUERY = 'PROJECT_CAPACITY_USAGE_QUERY',\n  BUCKET_CLASS_CAPACITY_USAGE_QUERY = 'BUCKET_CLASS_CAPACITY_USAGE_QUERY',\n  PROJECTS_QUERY = 'PROJECTS_QUERY',\n  BUCKETS_QUERY = 'BUCKETS_QUERY',\n}\n\nexport enum DATA_RESILIENCE_QUERIES {\n  REBUILD_PROGRESS_QUERY = 'NooBaa_rebuild_progress/100',\n  REBUILD_TIME_QUERY = 'NooBaa_rebuild_time',\n}\n\nexport enum ObjectDataReductionQueries {\n  EFFICIENCY_QUERY = 'NooBaa_reduction_ratio',\n  SAVINGS_QUERY = '(NooBaa_object_savings_logical_size - NooBaa_object_savings_physical_size)',\n  LOGICAL_SAVINGS_QUERY = 'NooBaa_object_savings_logical_size',\n}\n\nexport enum StatusCardQueries {\n  BUCKETS_COUNT = 'NooBaa_num_buckets',\n  UNHEALTHY_BUCKETS = 'NooBaa_num_unhealthy_buckets',\n  POOLS_COUNT = 'NooBaa_num_pools',\n  UNHEALTHY_POOLS = 'NooBaa_num_unhealthy_pools',\n}\n\nexport const CAPACITY_BREAKDOWN_QUERIES = {\n  [ObjectDashboardQuery.PROJECTS_BY_USED]: 'NooBaa_projects_capacity_usage',\n  [ObjectDashboardQuery.BUCKETS_BY_USED]: 'NooBaa_bucket_class_capacity_usage',\n};\n\nexport const breakdownQueryMap = {\n  [PROJECTS]: {\n    model: ProjectModel,\n    metric: 'project',\n    queries: {\n      [ObjectDashboardQuery.PROJECTS_BY_USED]: `sort_desc(topk(5, ${\n        CAPACITY_BREAKDOWN_QUERIES[ObjectDashboardQuery.PROJECTS_BY_USED]\n      }))`,\n      [ObjectDashboardQuery.PROJECTS_TOTAL_USED]: `sum(${\n        CAPACITY_BREAKDOWN_QUERIES[ObjectDashboardQuery.PROJECTS_BY_USED]\n      })`,\n    },\n  },\n  [BUCKET_CLASS]: {\n    model: NooBaaBucketClassModel,\n    metric: 'bucket_class',\n    queries: {\n      [ObjectDashboardQuery.BUCKETS_BY_USED]: `sort_desc(topk(5, ${\n        CAPACITY_BREAKDOWN_QUERIES[ObjectDashboardQuery.BUCKETS_BY_USED]\n      }))`,\n      [ObjectDashboardQuery.BUCKETS_TOTAL_USED]: `sum(${\n        CAPACITY_BREAKDOWN_QUERIES[ObjectDashboardQuery.BUCKETS_BY_USED]\n      })`,\n    },\n  },\n};\n","import * as _ from 'lodash';\nimport { Alert } from '@console/internal/components/monitoring';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { StorageClass } from '@console/internal/components/storage-class-form';\n\nexport const filterNooBaaAlerts = (alerts: Alert[]): Alert[] =>\n  alerts.filter((alert) => _.get(alert, 'annotations.storage_type') === 'NooBaa');\n\nexport const getGaugeValue = (data) => _.get(data, 'data.result[0].value[1]');\n\nexport const getMetric = (result: PrometheusResponse, metric: string): string =>\n  _.get(result, ['data', 'result', '0', 'metric', metric], null);\n\nexport type PrometheusMetricResult = {\n  metric: { [key: string]: any };\n  value?: [number, string | number];\n};\n\nexport const getPhase = (obj: K8sResourceKind): string => {\n  return _.get(obj, 'status.phase', 'Lost');\n};\n\nexport const isBound = (obj: K8sResourceKind): boolean => getPhase(obj) === 'Bound';\n\nexport const getSCProvisioner = (obj: StorageClass) => obj.provisioner;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AASA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AASA;;;;;;;;;;;;ACxEA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAGA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAEA;;;;;;;;;;;;;ACvFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;;;;;;;;;;;;;ACrEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAGA;AAEA;AAQA;AACA;AACA;AAEA;AAEA;;;;;A","sourceRoot":""}