{"version":3,"file":"google-idp-form-d8dd3e3f185aa206c12c.js","sources":["webpack:///./public/components/cluster-settings/google-idp-form.tsx","webpack:///./public/components/cluster-settings/idp-name-input.tsx","webpack:///./public/components/cluster-settings/index.ts"],"sourcesContent":["import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { ActionGroup, Button } from '@patternfly/react-core';\n\nimport { SecretModel } from '../../models';\nimport { IdentityProvider, k8sCreate, K8sResourceKind, OAuthKind } from '../../module/k8s';\nimport { ButtonBar, PromiseComponent, history } from '../utils';\nimport { addIDP, getOAuthResource, redirectToOAuthPage, mockNames } from './';\nimport { IDPNameInput } from './idp-name-input';\n\nexport class AddGooglePage extends PromiseComponent<{}, AddGooglePageState> {\n  readonly state: AddGooglePageState = {\n    name: 'google',\n    clientID: '',\n    clientSecret: '',\n    hostedDomain: '',\n    inProgress: false,\n    errorMessage: '',\n  };\n\n  getOAuthResource(): Promise<OAuthKind> {\n    return this.handlePromise(getOAuthResource());\n  }\n\n  createClientSecret(): Promise<K8sResourceKind> {\n    const { clientSecret } = this.state;\n    const secret = {\n      apiVersion: 'v1',\n      kind: 'Secret',\n      metadata: {\n        generateName: 'google-client-secret-',\n        namespace: 'openshift-config',\n      },\n      stringData: {\n        clientSecret,\n      },\n    };\n\n    return this.handlePromise(k8sCreate(SecretModel, secret));\n  }\n\n  addGoogleIDP(\n    oauth: OAuthKind,\n    clientSecretName: string,\n    dryRun?: boolean,\n  ): Promise<K8sResourceKind> {\n    const { name, clientID, hostedDomain } = this.state;\n    const idp: IdentityProvider = {\n      name,\n      type: 'Google',\n      mappingMethod: 'claim',\n      google: {\n        hostedDomain,\n        clientID,\n        clientSecret: {\n          name: clientSecretName,\n        },\n      },\n    };\n\n    return this.handlePromise(addIDP(oauth, idp, dryRun));\n  }\n\n  submit: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n\n    // Clear any previous errors.\n    this.setState({ errorMessage: '' });\n    this.getOAuthResource().then((oauth: OAuthKind) => {\n      this.addGoogleIDP(oauth, mockNames.secret, true)\n        .then(() => {\n          return this.createClientSecret()\n            .then((secret: K8sResourceKind) => this.addGoogleIDP(oauth, secret.metadata.name))\n            .then(redirectToOAuthPage);\n        })\n        .catch((err) => {\n          this.setState({ errorMessage: err });\n        });\n    });\n  };\n\n  nameChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  clientIDChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ clientID: event.currentTarget.value });\n  };\n\n  clientSecretChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ clientSecret: event.currentTarget.value });\n  };\n\n  hostedDomainChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ hostedDomain: event.currentTarget.value });\n  };\n\n  render() {\n    const { name, clientID, clientSecret, hostedDomain } = this.state;\n    const title = 'Add Identity Provider: Google';\n    return (\n      <div className=\"co-m-pane__body\">\n        <Helmet>\n          <title>{title}</title>\n        </Helmet>\n        <form onSubmit={this.submit} name=\"form\" className=\"co-m-pane__body-group co-m-pane__form\">\n          <h1 className=\"co-m-pane__heading\">{title}</h1>\n          <p className=\"co-m-pane__explanation\">\n            You can use Google integration for users authenticating with Google credentials.\n          </p>\n          <IDPNameInput value={name} onChange={this.nameChanged} />\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"client-id\">\n              Client ID\n            </label>\n            <input\n              className=\"pf-c-form-control\"\n              type=\"text\"\n              onChange={this.clientIDChanged}\n              value={clientID}\n              id=\"client-id\"\n              required\n            />\n          </div>\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"client-secret\">\n              Client Secret\n            </label>\n            <input\n              className=\"pf-c-form-control\"\n              type=\"password\"\n              onChange={this.clientSecretChanged}\n              value={clientSecret}\n              id=\"client-secret\"\n              required\n            />\n          </div>\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"hosted-domain\">\n              Hosted Domain\n            </label>\n            <input\n              className=\"pf-c-form-control\"\n              type=\"text\"\n              onChange={this.hostedDomainChanged}\n              value={hostedDomain}\n              id=\"hosted-domain\"\n              aria-describedby=\"idp-hosted-domain-help\"\n              required\n            />\n            <p className=\"help-block\" id=\"idp-hosted-domain-help\">\n              Restrict users to a Google App domain.\n            </p>\n          </div>\n          <ButtonBar errorMessage={this.state.errorMessage} inProgress={this.state.inProgress}>\n            <ActionGroup className=\"pf-c-form\">\n              <Button type=\"submit\" variant=\"primary\" data-test-id=\"add-idp\">\n                Add\n              </Button>\n              <Button type=\"button\" variant=\"secondary\" onClick={history.goBack}>\n                Cancel\n              </Button>\n            </ActionGroup>\n          </ButtonBar>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport type AddGooglePageState = {\n  name: string;\n  hostedDomain: string;\n  clientID: string;\n  clientSecret: string;\n  inProgress: boolean;\n  errorMessage: string;\n};\n","import * as React from 'react';\n\nexport const IDPNameInput: React.FC<IDPNameInputProps> = ({ value, onChange }) => (\n  <div className=\"form-group\">\n    <label className=\"control-label co-required\" htmlFor=\"idp-name\">\n      Name\n    </label>\n    <input\n      className=\"pf-c-form-control\"\n      type=\"text\"\n      onChange={onChange}\n      value={value}\n      aria-describedby=\"idp-name-help\"\n      id=\"idp-name\"\n      required\n    />\n    <p className=\"help-block\" id=\"idp-name-help\">\n      Unique name of the new identity provider. This cannot be changed later.\n    </p>\n  </div>\n);\n\ntype IDPNameInputProps = {\n  value: string;\n  onChange: React.ReactEventHandler<HTMLInputElement>;\n};\n","import * as _ from 'lodash-es';\n\nimport { OAuthModel } from '../../models';\nimport { IdentityProvider, k8sGet, k8sPatch, OAuthKind } from '../../module/k8s';\nimport { history, resourcePathFromModel } from '../utils';\nimport { dryRunOpt } from '@console/dev-console/src/utils/shared-submit-utils';\n\n// The name of the cluster-scoped OAuth configuration resource.\nconst OAUTH_RESOURCE_NAME = 'cluster';\n\nexport const getOAuthResource = (): Promise<OAuthKind> => k8sGet(OAuthModel, OAUTH_RESOURCE_NAME);\n\nexport const addIDP = (\n  oauth: OAuthKind,\n  idp: IdentityProvider,\n  dryRun?: boolean,\n): Promise<OAuthKind> => {\n  const patch = _.isEmpty(oauth.spec.identityProviders)\n    ? { op: 'add', path: '/spec/identityProviders', value: [idp] }\n    : { op: 'add', path: '/spec/identityProviders/-', value: idp };\n  return k8sPatch(OAuthModel, oauth, [patch], dryRun ? dryRunOpt : {});\n};\n\nexport const redirectToOAuthPage = () => {\n  const path = resourcePathFromModel(OAuthModel, OAUTH_RESOURCE_NAME);\n  history.push(path);\n};\n\nexport const mockNames = {\n  secret: 'secret-name',\n  ca: 'ca-name',\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA6CA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAyEA;AApJA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAoCA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AASA;AACA;AAGA;AASA;AACA;AAGA;AASA;AAIA;AACA;AACA;AAGA;AAQA;AACA;;;;;;;;;;;;;ACxKA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAGA;AASA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;A","sourceRoot":""}