{"version":3,"file":"members-modal-6689675628dcf8c0cd4f.js","sources":["webpack:///./public/components/hypercloud/modals/invite-member-modal.tsx","webpack:///./public/components/hypercloud/utils/section.tsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\n\nimport {\n  ModalBody,\n  ModalComponentProps,\n  ModalSubmitFooter,\n  ModalTitle,\n  createModalLauncher,\n} from '../../factory/modal';\nimport { HandlePromiseProps, withHandlePromise, Dropdown } from '../../utils';\nimport { Section } from '../utils/section';\nimport { RadioGroup } from '@console/internal/components/radio';\nimport { coFetchJSON } from '../../../co-fetch';\nimport { getId } from '../../../hypercloud/auth';\n\nconst radioItems = (disabled:boolean) => [\n  {\n    title: 'User',\n    value: 'User',\n    disabled\n  },\n  {\n    title: 'User Group',\n    value: 'Group',\n    disabled\n  },\n];\n\nconst dropdownItems = {\n  admin: 'Admin',\n  developer: 'Developer',\n  guest: 'Guest',\n};\n\nexport const InviteMemberModal = withHandlePromise((props: InviteMemberModalProps) => {\n  const [member, setMember] = React.useState(props.member ?? '');\n  const [type, setType] = React.useState(props.type ?? 'User');\n  const [role, setRole] = React.useState(props.role ?? 'guest');\n  const [errorMsg, setError] = React.useState('')\n\n  const isUpdate = props.requestType === 'update';\n\n  const onChangeText = (e: any) => {\n    setMember(e.target.value);\n  }\n\n  const submit: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n    // Append to an existing array, but handle the special case when the array is null.\n    coFetchJSON(`/api/multi-hypercloud/cluster/member?userId=${getId()}&cluster=${props.clusterName}&target${type}=${member}&remoteRole=${role}`, isUpdate ? 'PUT' : 'POST')\n      .then((res) => {\n        props.close();\n      })\n      .catch((err) => {\n        setError(`Fail to ${isUpdate?'update':'invite'} member. ` + err);\n      })\n  };\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content \">\n      <ModalTitle>{isUpdate? 'Update' : 'Invite'} Member</ModalTitle>\n      <ModalBody unsetOverflow={true}>\n        <Section label=\"User / UserGroup\" id=\"user\" isRequired={true}>\n          <div className=\"hc-invite-modal__input-members\">\n            <RadioGroup\n              id=\"type\"\n              currentValue={type}\n              items={radioItems(isUpdate)}\n              onChange={({ currentTarget }) => setType(currentTarget.value)}\n              inline\n            />\n            <input className=\"pf-c-form-control\" id=\"user\" name=\"members\" placeholder=\"Insert User / User Group Name\" value={member} onChange={onChangeText} required disabled={isUpdate} />\n          </div>\n        </Section>\n        <Section label=\"Role\" id=\"role\" isRequired={true}>\n          <Dropdown className=\"btn-group\" id=\"role\" name=\"role\" items={dropdownItems} selectedKey={role} onChange={(selection:string)=>setRole(selection)} />\n        </Section>\n      </ModalBody>\n      <ModalSubmitFooter\n        errorMessage={errorMsg}\n        inProgress={props.inProgress}\n        submitText={isUpdate ? \"Update\" : \"Invite\"}\n        cancel={props.cancel}\n      />\n    </form>\n  );\n});\n\nexport const inviteMemberModal = createModalLauncher(InviteMemberModal);\n\nexport type InviteMemberModalProps = {\n  clusterName: string;\n  type: string;\n  member: string;\n  role: string;\n  requestType: string;\n} & ModalComponentProps &\n  HandlePromiseProps;\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\n\nconst Node = ({ className, children, description }) => (\n  <div className={className}>\n    <div>{children}</div>\n    <p className=\"help-block\">{description}</p>\n  </div>\n);\n\nconst CombineNodes = (id, label, description, children, isRequired) => {\n  // children node 개수에 따라 가로 분할 class 적용\n  let isArray = Array.isArray(children);\n  let className = isArray ? `col-md-${12 / children.length}` : 'col-md-12';\n  return isArray ? children.map(cur => <Node className={className} children={cur} description={description} />) : <Node className={className} children={children} description={description} />;\n};\n\nexport const Section: React.FC<SectionProps> = ({ id, label, description, children, isRequired = false }) => {\n  let result = CombineNodes(id, label, description, children, isRequired);\n  return (\n    <div className=\"form-group\">\n      <label className={'control-label ' + (isRequired ? 'co-required' : '')} htmlFor={id}>\n        {label}\n      </label>\n      <div className=\"row\">{result}</div>\n    </div>\n  );\n};\n\ntype SectionProps = {\n  id: string;\n  children: Array<React.ReactNode> | React.ReactNode;\n  label?: string;\n  description?: string;\n  isRequired?: boolean;\n};\n"],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAOA;AAGA;AACA;AAGA;AAQA;AAEA;;;;;;;;;;;;;ACxFA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAGA;;;;;A","sourceRoot":""}