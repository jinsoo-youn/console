{"version":3,"file":"knative-overview-d3523cd8426a8a6b4766.js","sources":["webpack:///./packages/knative-plugin/src/components/overview/ConfigurationsOverviewList.tsx","webpack:///./packages/knative-plugin/src/components/overview/ConfigurationsOverviewListItem.tsx","webpack:///./packages/knative-plugin/src/components/overview/DeploymentOverviewList.tsx","webpack:///./packages/knative-plugin/src/components/overview/EventSinkServicesOverviewList.tsx","webpack:///./packages/knative-plugin/src/components/overview/KnativeRevisionResources.tsx","webpack:///./packages/knative-plugin/src/components/overview/KnativeServiceResources.tsx","webpack:///./packages/knative-plugin/src/components/overview/OverviewDetailsKnativeResourcesTab.tsx","webpack:///./packages/knative-plugin/src/components/overview/RevisionsOverviewList.scss?9706","webpack:///./packages/knative-plugin/src/components/overview/RevisionsOverviewList.tsx","webpack:///./packages/knative-plugin/src/components/overview/RevisionsOverviewListItem.scss?b795","webpack:///./packages/knative-plugin/src/components/overview/RevisionsOverviewListItem.tsx","webpack:///./packages/knative-plugin/src/components/overview/RoutesOverviewList.tsx","webpack:///./packages/knative-plugin/src/components/overview/RoutesOverviewListItem.tsx","webpack:///./packages/knative-plugin/src/utils/resource-overview-utils.ts"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { SidebarSectionHeading } from '@console/internal/components/utils';\nimport ConfigurationsOverviewListItem from './ConfigurationsOverviewListItem';\n\nexport type ConfigurationsOverviewListProps = {\n  configurations: K8sResourceKind[];\n};\n\nconst ConfigurationsOverviewList: React.FC<ConfigurationsOverviewListProps> = ({\n  configurations,\n}) => (\n  <>\n    <SidebarSectionHeading text=\"Configurations\" />\n    {_.isEmpty(configurations) ? (\n      <span className=\"text-muted\">No Configurations found for this resource.</span>\n    ) : (\n      <ul className=\"list-group\">\n        {_.map(configurations, (configuration) => (\n          <ConfigurationsOverviewListItem\n            key={configuration.metadata.uid}\n            configuration={configuration}\n          />\n        ))}\n      </ul>\n    )}\n  </>\n);\n\nexport default ConfigurationsOverviewList;\n","import * as React from 'react';\nimport { K8sResourceKind, referenceForModel } from '@console/internal/module/k8s';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { ConfigurationModel } from '../../models';\n\nexport type ConfigurationsOverviewListItemProps = {\n  configuration: K8sResourceKind;\n};\n\nconst ConfigurationsOverviewListItem: React.FC<ConfigurationsOverviewListItemProps> = ({\n  configuration: {\n    metadata: { name, namespace },\n    status: { latestCreatedRevisionName, latestReadyRevisionName },\n  },\n}) => {\n  return (\n    <li className=\"list-group-item\">\n      <ResourceLink\n        kind={referenceForModel(ConfigurationModel)}\n        name={name}\n        namespace={namespace}\n      />\n      <span className=\"text-muted\">Latest Created Revision name: </span>\n      <span>{latestCreatedRevisionName}</span>\n      <br />\n      <span className=\"text-muted\">Latest Ready Revision name: </span>\n      <span>{latestReadyRevisionName}</span>\n    </li>\n  );\n};\nexport default ConfigurationsOverviewListItem;\n","import * as React from 'react';\nimport { PodControllerOverviewItem } from '@console/shared';\nimport { ResourceLink, SidebarSectionHeading } from '@console/internal/components/utils';\n\ntype DeploymentOverviewListProps = {\n  current: PodControllerOverviewItem;\n};\n\nconst DeploymentOverviewList: React.FC<DeploymentOverviewListProps> = ({ current }) => {\n  const { obj } = current || {};\n  const namespace = obj?.metadata?.namespace;\n  const deploymentData = obj?.metadata?.ownerReferences[0];\n  return (\n    <>\n      <SidebarSectionHeading text=\"Deployment\" />\n      {deploymentData && deploymentData.name ? (\n        <ul className=\"list-group\">\n          <li className=\"list-group-item\">\n            <ResourceLink\n              kind={deploymentData.kind}\n              name={deploymentData.name}\n              namespace={namespace}\n            />\n          </li>\n        </ul>\n      ) : (\n        <span className=\"text-muted\">No Deployment found for this resource.</span>\n      )}\n    </>\n  );\n};\n\nexport default DeploymentOverviewList;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { K8sResourceKind, referenceForModel, PodKind } from '@console/internal/module/k8s';\nimport {\n  ResourceLink,\n  ExternalLink,\n  SidebarSectionHeading,\n} from '@console/internal/components/utils';\nimport { PodControllerOverviewItem } from '@console/shared';\nimport { PodModel } from '@console/internal/models';\nimport { PodsOverview } from '@console/internal/components/overview/pods-overview';\nimport { ServiceModel } from '../../models';\n\nexport type EventSinkServicesOverviewListProps = {\n  obj: K8sResourceKind;\n  pods?: PodKind[];\n  current?: PodControllerOverviewItem;\n};\n\nconst EventSinkServicesOverviewList: React.FC<EventSinkServicesOverviewListProps> = ({\n  obj,\n  pods,\n  current,\n}) => {\n  const {\n    kind: resKind,\n    apiVersion,\n    metadata: { name, namespace },\n  } = obj;\n  const sink = _.get(obj, 'spec.sink.ref') || _.get(obj, 'spec.sink');\n  const sinkUri = obj?.status?.sinkUri;\n  const deploymentData = current?.obj?.metadata?.ownerReferences?.[0];\n  const apiGroup = apiVersion.split('/')[0];\n  const linkUrl = `/search/ns/${namespace}?kind=${PodModel.kind}&q=${encodeURIComponent(\n    `${apiGroup}/${_.lowerFirst(resKind)}=${name}`,\n  )}`;\n  return (\n    <>\n      <SidebarSectionHeading text=\"Knative Services\" />\n      {sink && sink.kind === ServiceModel.kind ? (\n        <ul className=\"list-group\">\n          <li className=\"list-group-item\">\n            <ResourceLink\n              kind={referenceForModel(ServiceModel)}\n              name={sink.name}\n              namespace={namespace}\n            />\n            {sinkUri && (\n              <>\n                <span className=\"text-muted\">Sink URI: </span>\n                <ExternalLink\n                  href={sinkUri}\n                  additionalClassName=\"co-external-link--block\"\n                  text={sinkUri}\n                />\n              </>\n            )}\n          </li>\n        </ul>\n      ) : (\n        <span className=\"text-muted\">No services found for this resource.</span>\n      )}\n      {pods?.length > 0 && <PodsOverview pods={pods} obj={obj} allPodsLink={linkUrl} />}\n      {deploymentData?.name && (\n        <>\n          <SidebarSectionHeading text=\"Deployment\" />\n          <ul className=\"list-group\">\n            <li className=\"list-group-item\">\n              <ResourceLink\n                kind={deploymentData.kind}\n                name={deploymentData.name}\n                namespace={namespace}\n              />\n            </li>\n          </ul>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default EventSinkServicesOverviewList;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { K8sResourceKind, PodKind, podPhase } from '@console/internal/module/k8s';\nimport { PodControllerOverviewItem } from '@console/shared';\nimport { PodsOverview } from '@console/internal/components/overview/pods-overview';\nimport ConfigurationsOverviewList from './ConfigurationsOverviewList';\nimport KSRoutesOverviewList from './RoutesOverviewList';\nimport DeploymentOverviewList from './DeploymentOverviewList';\n\nconst AUTOSCALED = 'Autoscaled to 0';\ntype KnativeRevisionResourceProps = {\n  ksroutes: K8sResourceKind[];\n  configurations: K8sResourceKind[];\n  obj: K8sResourceKind;\n  pods?: PodKind[];\n  current?: PodControllerOverviewItem;\n};\n\nconst KnativeRevisionResources: React.FC<KnativeRevisionResourceProps> = ({\n  ksroutes,\n  configurations,\n  obj,\n  pods,\n  current,\n}) => {\n  const {\n    kind: resKind,\n    metadata: { name, namespace },\n  } = obj;\n  const activePods = _.filter(pods, (pod) => podPhase(pod) !== AUTOSCALED);\n  const linkUrl = `/search/ns/${namespace}?kind=Pod&q=${encodeURIComponent(\n    `serving.knative.dev/${resKind.toLowerCase()}=${name}`,\n  )}`;\n  return (\n    <>\n      <PodsOverview pods={activePods} obj={obj} emptyText={AUTOSCALED} allPodsLink={linkUrl} />\n      <DeploymentOverviewList current={current} />\n      <KSRoutesOverviewList ksroutes={ksroutes} resource={obj} />\n      <ConfigurationsOverviewList configurations={configurations} />\n    </>\n  );\n};\n\nexport default KnativeRevisionResources;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { podPhase } from '@console/internal/module/k8s';\nimport { BuildOverview } from '@console/internal/components/overview/build-overview';\nimport { PodModel } from '@console/internal/models';\nimport { AllPodStatus, OverviewItem, usePluginsOverviewTabSection } from '@console/shared';\nimport { PodsOverview } from '@console/internal/components/overview/pods-overview';\nimport RevisionsOverviewList from './RevisionsOverviewList';\nimport KSRoutesOverviewList from './RoutesOverviewList';\n\nconst REVISIONS_AUTOSCALED = 'All Revisions are autoscaled to 0';\n\ntype KnativeServiceResourceProps = {\n  item: OverviewItem;\n};\n\nconst KnativeServiceResources: React.FC<KnativeServiceResourceProps> = ({ item }) => {\n  const { revisions, ksroutes, obj, pods, buildConfigs } = item;\n  const {\n    kind: resKind,\n    metadata: { name, namespace },\n  } = obj;\n  const activePods = _.filter(pods, (pod) => podPhase(pod) !== AllPodStatus.AutoScaledTo0);\n  const linkUrl = `/search/ns/${namespace}?kind=${PodModel.kind}&q=${encodeURIComponent(\n    `serving.knative.dev/${resKind.toLowerCase()}=${name}`,\n  )}`;\n  const pluginComponents = usePluginsOverviewTabSection(item);\n  return (\n    <>\n      <PodsOverview\n        pods={activePods}\n        obj={obj}\n        emptyText={REVISIONS_AUTOSCALED}\n        allPodsLink={linkUrl}\n      />\n      <RevisionsOverviewList revisions={revisions} service={obj} />\n      <KSRoutesOverviewList ksroutes={ksroutes} resource={obj} />\n      {buildConfigs.length > 0 && <BuildOverview buildConfigs={buildConfigs} />}\n      {pluginComponents.map(({ Component, key }) => (\n        <Component key={key} item={item} />\n      ))}\n    </>\n  );\n};\n\nexport default KnativeServiceResources;\n","import * as React from 'react';\nimport { OverviewItem } from '@console/shared';\nimport OperatorBackedOwnerReferences from '@console/internal/components/utils';\nimport { referenceFor } from '@console/internal/module/k8s';\nimport { RevisionModel, ServiceModel } from '../../models';\nimport KnativeServiceResources from './KnativeServiceResources';\nimport KnativeRevisionResources from './KnativeRevisionResources';\nimport RevisionsOverviewList from './RevisionsOverviewList';\nimport KSRoutesOverviewList from './RoutesOverviewList';\nimport ConfigurationsOverviewList from './ConfigurationsOverviewList';\nimport EventSinkServicesOverviewList from './EventSinkServicesOverviewList';\nimport { isDynamicEventResourceKind } from '../../utils/fetch-dynamic-eventsources-utils';\n\ntype OverviewDetailsResourcesTabProps = {\n  item: OverviewItem;\n};\n\nconst getSidebarResources = (item: OverviewItem) => {\n  const { obj, ksroutes, revisions, configurations, pods, current } = item;\n  if (isDynamicEventResourceKind(referenceFor(obj))) {\n    return <EventSinkServicesOverviewList obj={obj} pods={pods} current={current} />;\n  }\n  switch (obj.kind) {\n    case RevisionModel.kind:\n      return (\n        <KnativeRevisionResources\n          ksroutes={ksroutes}\n          obj={obj}\n          configurations={configurations}\n          pods={pods}\n          current={current}\n        />\n      );\n    case ServiceModel.kind:\n      return <KnativeServiceResources item={item} />;\n    default:\n      return (\n        <>\n          <RevisionsOverviewList revisions={revisions} service={obj} />\n          <KSRoutesOverviewList ksroutes={ksroutes} resource={obj} />\n          <ConfigurationsOverviewList configurations={configurations} />\n        </>\n      );\n  }\n};\nconst OverviewDetailsKnativeResourcesTab: React.FC<OverviewDetailsResourcesTabProps> = ({\n  item,\n}) => (\n  <div className=\"overview__sidebar-pane-body\">\n    <OperatorBackedOwnerReferences item={item} />\n    {getSidebarResources(item)}\n  </div>\n);\n\nexport default OverviewDetailsKnativeResourcesTab;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Button } from '@patternfly/react-core';\nimport { K8sResourceKind, referenceForModel } from '@console/internal/module/k8s';\nimport { SidebarSectionHeading, useAccessReview } from '@console/internal/components/utils';\nimport { setTrafficDistributionModal } from '../modals';\nimport { ServiceModel, RevisionModel } from '../../models';\nimport RevisionsOverviewListItem from './RevisionsOverviewListItem';\nimport './RevisionsOverviewList.scss';\nimport { Link } from 'react-router-dom';\n\nexport type RevisionsOverviewListProps = {\n  revisions: K8sResourceKind[];\n  service: K8sResourceKind;\n};\n\nconst MAX_REVISIONS: number = 3;\n\nconst RevisionsOverviewList: React.FC<RevisionsOverviewListProps> = ({ revisions, service }) => {\n  const canSetTrafficDistribution = useAccessReview({\n    group: ServiceModel.apiGroup,\n    resource: ServiceModel.plural,\n    namespace: service.metadata.namespace,\n    verb: 'update',\n  });\n\n  const namespace = service.metadata?.namespace;\n  const traffic = service.status?.traffic;\n  const name = service.metadata?.name;\n\n  const filteredRevisions = (): K8sResourceKind[] => {\n    if (!revisions || !revisions.length) {\n      return [];\n    }\n    const [revWithTraffic, revWithoutTraffic] = _.partition(revisions, (element) => {\n      return traffic ? _.find(traffic, { revisionName: element.metadata?.name }) : false;\n    }).map((element) => _.sortBy(element, ['metadata.creationTimestamp']));\n    return revWithTraffic.length < MAX_REVISIONS\n      ? _.concat(revWithTraffic, revWithoutTraffic.slice(0, MAX_REVISIONS - revWithTraffic.length))\n      : revWithTraffic;\n  };\n\n  const getRevisionsLink = () => {\n    const url = `/search/ns/${namespace}`;\n    const searchQuery = `serving.knative.dev/service=${name}`;\n    const params = new URLSearchParams();\n    params.append('kind', referenceForModel(RevisionModel));\n    params.append('q', searchQuery);\n    return `${url}?${params.toString()}`;\n  };\n\n  return (\n    <>\n      <SidebarSectionHeading text=\"Revisions\" className=\"revision-overview-list\">\n        {revisions?.length > MAX_REVISIONS && (\n          <Link className=\"sidebar__section-view-all\" to={getRevisionsLink()}>\n            {`View all (${revisions.length})`}\n          </Link>\n        )}\n\n        {canSetTrafficDistribution && (\n          <Button\n            variant=\"secondary\"\n            onClick={() => setTrafficDistributionModal({ obj: service })}\n            isDisabled={!(revisions && revisions.length)}\n          >\n            Set Traffic Distribution\n          </Button>\n        )}\n      </SidebarSectionHeading>\n      {_.isEmpty(revisions) ? (\n        <span className=\"text-muted\">No Revisions found for this resource.</span>\n      ) : (\n        <ul className=\"list-group\">\n          {_.map(filteredRevisions(), (revision) => (\n            <RevisionsOverviewListItem\n              key={revision.metadata.uid}\n              revision={revision}\n              service={service}\n            />\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default RevisionsOverviewList;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { PodStatus } from '@console/shared';\nimport { ChartLabel } from '@patternfly/react-charts';\nimport { K8sResourceKind, referenceForModel } from '@console/internal/module/k8s';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { Traffic } from '../../types';\nimport { RevisionModel } from '../../models';\nimport './RevisionsOverviewListItem.scss';\n\nexport type RevisionsOverviewListItemProps = {\n  revision: K8sResourceKind;\n  service: K8sResourceKind;\n};\n\nconst RevisionsOverviewListItem: React.FC<RevisionsOverviewListItemProps> = ({\n  revision,\n  service,\n}) => {\n  const {\n    metadata: { name, namespace },\n  } = revision;\n  const {\n    status: { traffic },\n  } = service;\n  const getTraffic = (revName: string) => {\n    if (!traffic || !traffic.length) {\n      return null;\n    }\n    const trafficPercent = traffic\n      .filter((t: Traffic) => t.revisionName === revName)\n      .map((tr: Traffic) => tr.percent)\n      .reduce((a: number, b: number) => a + b, 0);\n\n    return trafficPercent ? `${trafficPercent}%` : null;\n  };\n  const deploymentData = _.get(revision, 'resources.current.obj.metadata.ownerReferences[0]', {});\n  const current = _.get(revision, 'resources.current', null);\n  const availableReplicas = _.get(revision, 'resources.current.obj.status.availableReplicas', '0');\n  return (\n    <li className=\"list-group-item\">\n      <div className=\"row\">\n        <div className=\"col-sm-8 col-xs-9\">\n          <ResourceLink kind={referenceForModel(RevisionModel)} name={name} namespace={namespace} />\n        </div>\n        <span className=\"col-sm-4 col-xs-3 text-right\">{getTraffic(name)}</span>\n      </div>\n      {deploymentData.name && (\n        <div className=\"odc-revision-deployment-list\">\n          <div className=\"row\">\n            <div className=\"col-sm-8 col-xs-9\">\n              <ResourceLink\n                kind={deploymentData.kind}\n                name={deploymentData.name}\n                namespace={namespace}\n              />\n            </div>\n            <div className=\"col-sm-4 col-xs-3\">\n              <div className=\"odc-revision-deployment-list__pod\">\n                <PodStatus\n                  standalone\n                  data={current ? current.pods : []}\n                  size={25}\n                  innerRadius={8}\n                  outerRadius={12}\n                  title={availableReplicas}\n                  titleComponent={<ChartLabel style={{ fontSize: '10px' }} />}\n                  showTooltip={false}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </li>\n  );\n};\n\nexport default RevisionsOverviewListItem;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { SidebarSectionHeading } from '@console/internal/components/utils';\nimport { getKnativeRoutesLinks } from '../../utils/resource-overview-utils';\nimport RoutesOverviewListItem from './RoutesOverviewListItem';\n\nexport type RoutesOverviewListProps = {\n  ksroutes: K8sResourceKind[];\n  resource: K8sResourceKind;\n};\n\nconst RoutesOverviewList: React.FC<RoutesOverviewListProps> = ({ ksroutes, resource }) => (\n  <>\n    <SidebarSectionHeading text=\"Routes\" />\n    {_.isEmpty(ksroutes) ? (\n      <span className=\"text-muted\">No Routes found for this resource.</span>\n    ) : (\n      <ul className=\"list-group\">\n        {_.map(ksroutes, (route) => {\n          const routeLinks = getKnativeRoutesLinks(route, resource);\n          return routeLinks.map((routeLink) => (\n            <RoutesOverviewListItem key={routeLink.uid} routeLink={routeLink} />\n          ));\n        })}\n      </ul>\n    )}\n  </>\n);\n\nexport default RoutesOverviewList;\n","import * as React from 'react';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { ResourceLink, ExternalLink } from '@console/internal/components/utils';\nimport { RouteModel } from '../../models';\nimport { RoutesOverviewListItem } from '../../types';\n\nexport type RoutesOverviewListItemProps = {\n  routeLink: RoutesOverviewListItem;\n};\n\nconst RoutesOverviewListItem: React.FC<RoutesOverviewListItemProps> = ({\n  routeLink: { url, name, namespace, percent },\n}) => (\n  <li className=\"list-group-item\">\n    <div className=\"row\">\n      <div className=\"col-xs-10\">\n        <ResourceLink kind={referenceForModel(RouteModel)} name={name} namespace={namespace} />\n        {url.length > 0 && (\n          <>\n            <span className=\"text-muted\">Location: </span>\n            <ExternalLink href={url} additionalClassName=\"co-external-link--block\" text={url} />\n          </>\n        )}\n      </div>\n      {percent.length > 0 && <span className=\"col-xs-2 text-right\">{percent}</span>}\n    </div>\n  </li>\n);\n\nexport default RoutesOverviewListItem;\n","import { K8sResourceKind, referenceFor, referenceForModel } from '@console/internal/module/k8s';\nimport { ServiceModel as knServiceModel, RevisionModel } from '../models';\nimport { Traffic, RoutesOverviewListItem } from '../types';\n/**\n * Return the knative routes list items.\n * @param route\n * @param resource | resource can be a knative service or revision;\n */\nexport const getKnativeRoutesLinks = (\n  route: K8sResourceKind,\n  resource: K8sResourceKind,\n): RoutesOverviewListItem[] => {\n  if (!route.status) {\n    return [];\n  }\n  const {\n    metadata: { name, namespace },\n    status: {\n      url = '',\n      traffic: trafficData = [{ revisionName: resource.metadata.name, url: route?.status?.url }],\n    },\n  } = route;\n  const filterTrafficBasedOnResource = (tr: Traffic) =>\n    referenceFor(resource) === referenceForModel(knServiceModel) ||\n    (referenceFor(resource) === referenceForModel(RevisionModel) &&\n      tr.revisionName === resource.metadata.name);\n  return trafficData\n    .filter(filterTrafficBasedOnResource)\n    .map((traffic: Traffic, index: number) => ({\n      uid: `${traffic.revisionName}-${traffic?.tag ? traffic?.tag : 'tag'}-${index}`,\n      url: traffic?.url || url,\n      percent: traffic.percent ? `${traffic.percent}%` : '',\n      name,\n      namespace,\n    }));\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAMA;AAIA;AACA;AAeA;;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AAMA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAAA;AAEA;AAMA;;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAYA;AAEA;;;;;;;;;;;;;AChCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AAQA;;AAKA;AAKA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAKA;AAEA;AACA;AAYA;AACA;AAEA;AACA;AACA;AACA;AAWA;AAEA;;;;;;;;;;;;;ACjFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AASA;AAOA;AAIA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAGA;AAEA;;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAIA;AACA;AAGA;AACA;AAEA;AAMA;AACA;AACA;AACA;AAKA;AAEA;;;;;;;;;;;;;AC7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AAIA;;;;;;;;;;;;ACtDA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAMA;AAUA;AAeA;AAEA;;;;;;;;;;;;ACvFA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAIA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAMA;AACA;AACA;AAiBA;AAEA;;;;;;;;;;;;;AC9EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAOA;AAEA;AACA;AAKA;AACA;AAGA;AAMA;;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAKA;;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;;;AAIA;AACA;;AAIA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}