{"version":3,"file":"network-attachment-definitions-8167e28f08e39df04136.js","sources":["webpack:///./packages/network-attachment-definition-plugin/src/components/network-attachment-definitions/NetworkAttachmentDefinition.tsx","webpack:///./packages/network-attachment-definition-plugin/src/components/network-attachment-definitions/NetworkAttachmentDefinitionCreateYaml.tsx","webpack:///./packages/network-attachment-definition-plugin/src/components/network-attachment-definitions/NetworkAttachmentDefinitionDetails.tsx","webpack:///./packages/network-attachment-definition-plugin/src/components/network-attachment-definitions/NetworkAttachmentDefinitionDetailsPage.tsx","webpack:///./packages/network-attachment-definition-plugin/src/components/network-attachment-definitions/NetworkAttachmentDefinitionsForm.tsx","webpack:///./packages/network-attachment-definition-plugin/src/components/network-attachment-definitions/NetworkTypeOptions.tsx","webpack:///./packages/network-attachment-definition-plugin/src/constants/index.ts","webpack:///./packages/network-attachment-definition-plugin/src/index.ts","webpack:///./packages/network-attachment-definition-plugin/src/selectors/index.ts"],"sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport {\n  ListPage,\n  Table,\n  TableData,\n  TableRow,\n  RowFunction,\n} from '@console/internal/components/factory';\nimport { Kebab, ResourceKebab, ResourceLink } from '@console/internal/components/utils';\nimport { NamespaceModel } from '@console/internal/models';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { dimensifyHeader, dimensifyRow, getName, getNamespace, getUID } from '@console/shared';\nimport { NetworkAttachmentDefinitionModel } from '../../models';\nimport { getConfigAsJSON, getType } from '../../selectors';\nimport { NetworkAttachmentDefinitionKind } from '../../types';\nimport { NetAttachDefBundle, NetworkAttachmentDefinitionsPageProps } from './types';\n\nconst { common } = Kebab.factory;\nconst menuActions = [...common];\n\nconst tableColumnClasses = [\n  classNames('col-lg-4', 'col-md-4', 'col-sm-6', 'col-xs-6'),\n  classNames('col-lg-4', 'col-md-4', 'hidden-sm', 'hidden-xs'),\n  classNames('col-lg-4', 'col-md-4', 'col-sm-6', 'col-xs-6'),\n  Kebab.columnClass,\n];\n\nconst NetworkAttachmentDefinitionsHeader = () =>\n  dimensifyHeader(\n    [\n      {\n        title: 'Name',\n        sortField: 'name',\n        transforms: [sortable],\n      },\n      {\n        title: 'Namespace',\n        sortField: 'namespace',\n        transforms: [sortable],\n      },\n      {\n        title: 'Type',\n        sortField: 'type',\n        transforms: [sortable],\n      },\n      {\n        title: '',\n      },\n    ],\n    tableColumnClasses,\n  );\n\nconst NetworkAttachmentDefinitionsRow: RowFunction<NetAttachDefBundle> = ({\n  obj: { name, namespace, type, metadata, netAttachDef },\n  index,\n  key,\n  style,\n}) => {\n  const dimensify = dimensifyRow(tableColumnClasses);\n\n  return (\n    <TableRow id={metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={dimensify()}>\n        <ResourceLink\n          kind={referenceForModel(NetworkAttachmentDefinitionModel)}\n          name={name}\n          namespace={namespace}\n        />\n      </TableData>\n      <TableData className={dimensify()}>\n        <ResourceLink kind={NamespaceModel.kind} name={namespace} title={namespace} />\n      </TableData>\n      <TableData className={dimensify()}>\n        {type || <span className=\"text-secondary\">Not available</span>}\n      </TableData>\n      <TableData className={dimensify(true)}>\n        <ResourceKebab\n          actions={menuActions}\n          kind={referenceForModel(NetworkAttachmentDefinitionModel)}\n          resource={netAttachDef}\n        />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst getNetAttachDefsData = (nadList: NetworkAttachmentDefinitionKind[]): NetAttachDefBundle[] => {\n  return nadList\n    ? nadList.map((netAttachDef) => {\n        const configJSON = getConfigAsJSON(netAttachDef);\n        return {\n          netAttachDef,\n          metadata: { uid: getUID(netAttachDef) },\n          configJSON,\n          // for sorting\n          name: getName(netAttachDef),\n          namespace: getNamespace(netAttachDef),\n          type: getType(configJSON),\n        };\n      })\n    : [];\n};\n\nexport const NetworkAttachmentDefinitionsList: React.FC<React.ComponentProps<typeof Table>> = (\n  props,\n) => {\n  return (\n    <Table\n      data={getNetAttachDefsData(props.data)}\n      aria-label={NetworkAttachmentDefinitionModel.labelPlural}\n      Header={NetworkAttachmentDefinitionsHeader}\n      Row={NetworkAttachmentDefinitionsRow}\n      virtualize\n      loaded={props.loaded}\n      label={props.label}\n    />\n  );\n};\nNetworkAttachmentDefinitionsList.displayName = 'NetworkAttachmentDefinitionsList';\n\nexport const NetworkAttachmentDefinitionsPage: React.FC<NetworkAttachmentDefinitionsPageProps> = (\n  props,\n) => {\n  const namespace = props.namespace || props.match?.params?.ns || 'default';\n  const createProps = {\n    to: `/k8s/ns/${namespace}/${referenceForModel(NetworkAttachmentDefinitionModel)}/~new/form`,\n  };\n\n  return (\n    <ListPage\n      {...props}\n      title={NetworkAttachmentDefinitionModel.labelPlural}\n      kind={referenceForModel(NetworkAttachmentDefinitionModel)}\n      ListComponent={NetworkAttachmentDefinitionsList}\n      filterLabel={props.filterLabel}\n      canCreate\n      createProps={createProps}\n    />\n  );\n};\nNetworkAttachmentDefinitionsPage.displayName = 'NetworkAttachmentDefinitionsPage';\n\nexport default NetworkAttachmentDefinitionsPage;\n","import * as React from 'react';\nimport { safeLoad } from 'js-yaml';\nimport { CreateYAMLProps } from '@console/internal/components/create-yaml';\nimport { ErrorPage404 } from '@console/internal/components/error';\nimport {\n  LoadingBox,\n  AsyncComponent,\n  resourcePathFromModel,\n} from '@console/internal/components/utils';\nimport { connectToPlural } from '@console/internal/kinds';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { getNamespace, getName } from '@console/shared';\nimport { NET_ATTACH_DEF_HEADER_LABEL } from '../../constants';\nimport { NetworkAttachmentDefinitionsYAMLTemplates } from '../../models/templates';\nimport { NetworkAttachmentDefinitionModel } from '../../models';\n\nconst CreateNetAttachDefYAMLConnected = connectToPlural(\n  ({ match, kindsInFlight, kindObj }: CreateYAMLProps) => {\n    if (!kindObj) {\n      if (kindsInFlight) {\n        return <LoadingBox />;\n      }\n      return <ErrorPage404 />;\n    }\n\n    const template = NetworkAttachmentDefinitionsYAMLTemplates.getIn(['default']);\n    const obj = safeLoad(template);\n    obj.kind = kindObj.kind;\n    obj.metadata = obj.metadata || {};\n    obj.metadata.namespace = match.params.ns || 'default';\n\n    const netAttachDefTemplatePath = (o: K8sResourceKind) =>\n      resourcePathFromModel(NetworkAttachmentDefinitionModel, getName(o), getNamespace(o));\n    const DroppableEditYAML = () =>\n      import('@console/internal/components/droppable-edit-yaml').then((c) => c.DroppableEditYAML);\n\n    return (\n      <AsyncComponent\n        loader={DroppableEditYAML}\n        obj={obj}\n        create\n        kind={kindObj.kind}\n        resourceObjPath={netAttachDefTemplatePath}\n        header={NET_ATTACH_DEF_HEADER_LABEL}\n      />\n    );\n  },\n);\n\nexport default (props: any) => (\n  <CreateNetAttachDefYAMLConnected\n    {...(props as any)}\n    plural={NetworkAttachmentDefinitionModel.plural}\n  />\n);\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { ScrollToTopOnMount, SectionHeading, StatusBox } from '@console/internal/components/utils';\nimport { getName, getNamespace } from '@console/shared/src';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { getConfigAsJSON, getDescription, getType } from '../../selectors';\nimport { networkTypes } from '../../constants';\nimport { NetworkAttachmentDefinitionKind } from '../../types';\n\nconst NET_ATTACH_DEF_DETAILS_HEADING = 'Network Attachment Definition Details';\n\nexport const getBasicID = <A extends K8sResourceKind = K8sResourceKind>(entity: A) =>\n  `${getNamespace(entity)}-${getName(entity)}`;\n\nexport const prefixedID = (idPrefix: string, id: string) =>\n  idPrefix && id ? `${idPrefix}-${id}` : null;\n\n// FIXME: Use DetailsItem from common console utils.\nexport const DetailsItem: React.FC<DetailsItemProps> = ({\n  title,\n  isNotAvail = false,\n  idValue,\n  valueClassName,\n  children,\n}) => {\n  return (\n    <>\n      <dt>{title}</dt>\n      <dd id={idValue} className={valueClassName}>\n        {isNotAvail ? <span className=\"text-secondary\">Not available</span> : children}\n      </dd>\n    </>\n  );\n};\n\nexport const NetAttachDefinitionSummary: React.FC<NetAttachDefinitionSummaryProps> = ({\n  netAttachDef,\n}) => {\n  const name = getName(netAttachDef);\n  const description = getDescription(netAttachDef);\n  const type = getType(getConfigAsJSON(netAttachDef));\n  const id = getBasicID(netAttachDef);\n\n  // FIXME: This should use ResourceSummary like all other details pages.\n  return (\n    <>\n      <DetailsItem title=\"Name\" idValue={prefixedID(id, 'name')} isNotAvail={!name}>\n        {name}\n      </DetailsItem>\n\n      <DetailsItem\n        title=\"Description\"\n        idValue={prefixedID(id, 'description')}\n        isNotAvail={!description}\n      >\n        {description}\n      </DetailsItem>\n\n      <DetailsItem title=\"Type\" idValue={prefixedID(id, 'type')} isNotAvail={!type}>\n        {_.get(networkTypes, [type], null) || type}\n      </DetailsItem>\n    </>\n  );\n};\n\nexport const NetworkAttachmentDefinitionDetails: React.FC<NetAttachDefDetailsProps> = (props) => {\n  const { obj: netAttachDef } = props;\n\n  return (\n    <StatusBox data={netAttachDef} loaded={!!netAttachDef}>\n      <ScrollToTopOnMount />\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={NET_ATTACH_DEF_DETAILS_HEADING} />\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <NetAttachDefinitionSummary netAttachDef={netAttachDef} />\n          </div>\n        </div>\n      </div>\n    </StatusBox>\n  );\n};\n\ntype NetAttachDefinitionSummaryProps = {\n  netAttachDef: NetworkAttachmentDefinitionKind;\n};\n\ntype NetAttachDefDetailsProps = {\n  obj: NetworkAttachmentDefinitionKind;\n};\n\ntype DetailsItemProps = {\n  title: string;\n  idValue?: string;\n  isNotAvail?: boolean;\n  valueClassName?: string;\n  children: React.ReactNode;\n};\n\nexport default NetworkAttachmentDefinitionDetails;\n","import * as React from 'react';\nimport { referenceForModel, K8sResourceKindReference } from '@console/internal/module/k8s';\nimport { DetailsPage } from '@console/internal/components/factory';\nimport { Kebab, navFactory } from '@console/internal/components/utils';\nimport { NetworkAttachmentDefinitionModel } from '../..';\nimport { NetworkAttachmentDefinitionDetails } from './NetworkAttachmentDefinitionDetails';\n\nconst { common } = Kebab.factory;\nconst menuActions = [\n  ...Kebab.getExtensionsActionsForKind(NetworkAttachmentDefinitionModel),\n  ...common,\n];\n\nexport const NetworkAttachmentDefinitionsDetailsPage: React.FC<NetworkAttachmentDefinitionsDetailPageProps> = (\n  props,\n) => {\n  const overviewPage = {\n    href: '', // default landing page\n    name: 'Details',\n    component: NetworkAttachmentDefinitionDetails,\n  };\n\n  const pages = [overviewPage, navFactory.editYaml()];\n\n  return (\n    <DetailsPage\n      {...props}\n      pages={pages}\n      kind={referenceForModel(NetworkAttachmentDefinitionModel)}\n      menuActions={menuActions}\n    />\n  );\n};\n\ntype NetworkAttachmentDefinitionsDetailPageProps = {\n  name: string;\n  namespace: string;\n  kind: K8sResourceKindReference;\n  match: any;\n};\n\nexport default NetworkAttachmentDefinitionsDetailsPage;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport * as _ from 'lodash';\nimport { Form, FormControl, FormGroup, HelpBlock } from 'patternfly-react';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { referenceForModel, k8sCreate } from '@console/internal/module/k8s';\nimport {\n  ButtonBar,\n  Dropdown,\n  Firehose,\n  history,\n  resourcePathFromModel,\n} from '@console/internal/components/utils';\nimport { validateDNS1123SubdomainValue, ValidationErrorType } from '@console/shared';\nimport {\n  HyperConvergedModel,\n  NetworkAttachmentDefinitionModel,\n  SriovNetworkNodePolicyModel,\n} from '../..';\nimport {\n  NetworkAttachmentDefinitionAnnotations,\n  NetworkAttachmentDefinitionConfig,\n  TypeParamsData,\n} from '../../types';\nimport { networkTypeParams, networkTypes } from '../../constants';\nimport NetworkTypeOptions from './NetworkTypeOptions';\n\nconst buildConfig = (name, networkType, typeParamsData): NetworkAttachmentDefinitionConfig => {\n  const config: NetworkAttachmentDefinitionConfig = {\n    name,\n    type: networkType,\n    cniVersion: '0.3.1',\n  };\n\n  let ipam = {};\n  try {\n    ipam = JSON.parse(_.get(typeParamsData, 'ipam.value', {}));\n  } catch (e) {\n    console.error(e); // eslint-disable-line no-console\n  }\n\n  if (networkType === 'cnv-bridge') {\n    // cnv-bridge should not define type on root\n    delete config.type;\n\n    const vlan = _.get(typeParamsData, 'vlanTagNum.value', '');\n    config.plugins = [\n      {\n        type: 'cnv-bridge',\n        bridge: _.get(typeParamsData, 'bridge.value', ''),\n        vlan: _.isEmpty(vlan) ? undefined : vlan,\n        ipam,\n      },\n      { type: 'cnv-tuning' },\n    ];\n  } else if (networkType === 'sriov') {\n    config.ipam = ipam;\n  }\n\n  return config;\n};\n\nconst getResourceName = (networkType, typeParamsData): string => {\n  return networkType === 'cnv-bridge'\n    ? `bridge.network.kubevirt.io/${_.get(typeParamsData, 'bridge.value', '')}`\n    : `openshift.io/${_.get(typeParamsData, 'resourceName.value', '')}`;\n};\n\nconst createNetAttachDef = (\n  e: React.FormEvent<EventTarget>,\n  description,\n  name,\n  networkType,\n  typeParamsData,\n  namespace,\n  setError,\n  setLoading,\n) => {\n  e.preventDefault();\n\n  setLoading(true);\n  setError(null);\n\n  const config = JSON.stringify(buildConfig(name, networkType, typeParamsData));\n\n  const annotations: NetworkAttachmentDefinitionAnnotations = {\n    'k8s.v1.cni.cncf.io/resourceName': getResourceName(networkType, typeParamsData),\n  };\n  if (description !== '') {\n    annotations.description = description;\n  }\n\n  const newNetAttachDef = {\n    apiVersion: `${NetworkAttachmentDefinitionModel.apiGroup}/${NetworkAttachmentDefinitionModel.apiVersion}`,\n    kind: NetworkAttachmentDefinitionModel.kind,\n    metadata: {\n      name,\n      namespace,\n      annotations: {\n        'k8s.v1.cni.cncf.io/resourceName': getResourceName(networkType, typeParamsData),\n        description: _.isEmpty(description) ? undefined : description,\n      },\n    },\n    spec: {\n      config,\n    },\n  };\n\n  k8sCreate(NetworkAttachmentDefinitionModel, newNetAttachDef)\n    .then(() => {\n      setLoading(false);\n      history.push(resourcePathFromModel(NetworkAttachmentDefinitionModel, name, namespace));\n    })\n    .catch((err) => {\n      setError(err);\n      setLoading(false);\n      console.error(err); // eslint-disable-line no-console\n    });\n};\n\nconst handleNameChange = (enteredName, fieldErrors, setName, setFieldErrors) => {\n  const fieldErrorsUpdate = { ...fieldErrors };\n  delete fieldErrorsUpdate.nameValidationMsg;\n\n  const nameValidation = validateDNS1123SubdomainValue(enteredName);\n  if (_.get(nameValidation, 'type', null) === ValidationErrorType.Error) {\n    fieldErrorsUpdate.nameValidationMsg = nameValidation.message;\n  }\n\n  setName(enteredName);\n  setFieldErrors(fieldErrorsUpdate);\n};\n\nconst getNetworkTypes = (hasSriovNetNodePolicyCRD, hasHyperConvergedCRD) => {\n  const types = _.clone(networkTypes);\n  if (!hasSriovNetNodePolicyCRD) {\n    delete types.sriov;\n  }\n\n  if (!hasHyperConvergedCRD) {\n    delete types['cnv-bridge'];\n  }\n\n  return types;\n};\n\nconst allTypeParamFieldsValid = (typeParamsData) => {\n  return !_.some(typeParamsData, ({ validationMsg }) => validationMsg !== null);\n};\n\nconst allRequiredFieldsFilled = (name, networkType, typeParamsData): boolean => {\n  if (_.isEmpty(name) || networkType === null) {\n    return false;\n  }\n\n  const allParamsForType = _.get(networkTypeParams, [networkType]);\n  const requiredKeys = _.keys(allParamsForType).filter((key) =>\n    _.get(allParamsForType, [key, 'required'], false),\n  );\n\n  return _.every(requiredKeys, (key) => {\n    const value = _.get(typeParamsData, [key, 'value']);\n    return !_.isEmpty(value);\n  });\n};\n\nconst validateForm = (fieldErrors, name, networkType, typeParamsData, setError) => {\n  setError(null);\n  const nameIsValid = _.get(fieldErrors, 'nameValidationMsg', '') === '';\n\n  return (\n    nameIsValid &&\n    allRequiredFieldsFilled(name, networkType, typeParamsData) &&\n    allTypeParamFieldsValid(typeParamsData)\n  );\n};\n\nconst NetworkAttachmentDefinitionFormBase = (props) => {\n  const { loaded, match, resources, hasSriovNetNodePolicyCRD, hasHyperConvergedCRD } = props;\n  const namespace = _.get(match, 'params.ns', 'default');\n  const sriovNetNodePoliciesData = _.get(resources, 'sriovnetworknodepolicies.data', []);\n\n  const [loading, setLoading] = React.useState(hasSriovNetNodePolicyCRD && !loaded);\n  const [name, setName] = React.useState('');\n  const [description, setDescription] = React.useState('');\n  const [networkType, setNetworkType] = React.useState(null);\n  const [typeParamsData, setTypeParamsData] = React.useState<TypeParamsData>({});\n  const [error, setError] = React.useState(null);\n  const [fieldErrors, setFieldErrors] = React.useState<FieldErrors>({});\n\n  const networkTypeDropdownItems = getNetworkTypes(hasSriovNetNodePolicyCRD, hasHyperConvergedCRD);\n\n  const formIsValid = React.useMemo(\n    () => validateForm(fieldErrors, name, networkType, typeParamsData, setError),\n    [fieldErrors, name, networkType, typeParamsData],\n  );\n\n  React.useEffect(() => setLoading(hasSriovNetNodePolicyCRD && !loaded), [\n    hasSriovNetNodePolicyCRD,\n    resources,\n    loaded,\n  ]);\n\n  return (\n    <div className=\"co-m-pane__body co-m-pane__form\">\n      <h1 className=\"co-m-pane__heading co-m-pane__heading--baseline\">\n        <div className=\"co-m-pane__name\">Create Network Attachment Definition</div>\n        <div className=\"co-m-pane__heading-link\">\n          <Link\n            to={`/k8s/ns/${namespace}/${referenceForModel(NetworkAttachmentDefinitionModel)}/~new`}\n            id=\"yaml-link\"\n            replace\n          >\n            Edit YAML\n          </Link>\n        </div>\n      </h1>\n      <Form>\n        <FormGroup\n          fieldId=\"basic-settings-name\"\n          validationState={fieldErrors.nameValidationMsg ? 'error' : null}\n        >\n          <label className=\"control-label co-required\" htmlFor=\"network-attachment-definition-name\">\n            Name\n          </label>\n          <FormControl\n            type=\"text\"\n            bsClass=\"pf-c-form-control\"\n            placeholder={name}\n            id=\"network-attachment-definition-name\"\n            onChange={(e) => handleNameChange(e.target.value, fieldErrors, setName, setFieldErrors)}\n            value={name}\n          />\n          <HelpBlock>{fieldErrors.nameValidationMsg || null}</HelpBlock>\n        </FormGroup>\n\n        <FormGroup fieldId=\"basic-settings-description\">\n          <label htmlFor=\"network-attachment-definition-description\">Description</label>\n          <FormControl\n            type=\"text\"\n            bsClass=\"pf-c-form-control\"\n            id=\"network-attachment-definition-description\"\n            onChange={(e) => setDescription(e.target.value)}\n            value={description}\n          />\n        </FormGroup>\n\n        <FormGroup fieldId=\"basic-settings-network-type\">\n          <label className=\"control-label co-required\" htmlFor=\"network-type\">\n            Network Type\n          </label>\n          <Dropdown\n            id=\"network-type\"\n            title=\"Network Type\"\n            items={networkTypeDropdownItems}\n            dropDownClassName=\"dropdown--full-width\"\n            selectedKey={networkType}\n            onChange={(e) => setNetworkType(e)}\n            disabled={_.isEmpty(networkTypeDropdownItems)}\n          />\n        </FormGroup>\n\n        <div className=\"co-form-subsection\">\n          <NetworkTypeOptions\n            networkType={networkType}\n            setTypeParamsData={setTypeParamsData}\n            sriovNetNodePoliciesData={sriovNetNodePoliciesData}\n            typeParamsData={typeParamsData}\n          />\n        </div>\n\n        <ButtonBar errorMessage={error ? error.message : ''} inProgress={loading}>\n          <ActionGroup className=\"pf-c-form\">\n            <Button\n              id=\"save-changes\"\n              isDisabled={!formIsValid}\n              onClick={(e) =>\n                createNetAttachDef(\n                  e,\n                  description,\n                  name,\n                  networkType,\n                  typeParamsData,\n                  namespace,\n                  setError,\n                  setLoading,\n                )\n              }\n              type=\"submit\"\n              variant=\"primary\"\n            >\n              Create\n            </Button>\n            <Button id=\"cancel\" onClick={history.goBack} type=\"button\" variant=\"secondary\">\n              Cancel\n            </Button>\n          </ActionGroup>\n        </ButtonBar>\n      </Form>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ k8s }) => {\n  const kindsInFlight = k8s.getIn(['RESOURCES', 'inFlight']);\n  const k8sModels = k8s.getIn(['RESOURCES', 'models']);\n\n  return {\n    // FIXME: These should be feature flags.\n    // TODO: Change back when ready to add back SR-IOV support\n    // hasSriovNetNodePolicyCRD:\n    //   !kindsInFlight && !!k8sModels.get(referenceForModel(SriovNetworkNodePolicyModel)),\n    hasSriovNetNodePolicyCRD: false,\n    hasHyperConvergedCRD: !kindsInFlight && !!k8sModels.get(referenceForModel(HyperConvergedModel)),\n  };\n};\n\nconst networkAttachmentDefinitionFormResources = [\n  {\n    model: SriovNetworkNodePolicyModel,\n    kind: referenceForModel(SriovNetworkNodePolicyModel),\n    isList: true,\n    prop: 'sriovnetworknodepolicies',\n    optional: true,\n  },\n];\n\nexport default connect(mapStateToProps)((props) => {\n  const { hasSriovNetNodePolicyCRD } = props;\n  const resources = hasSriovNetNodePolicyCRD ? networkAttachmentDefinitionFormResources : [];\n  return (\n    <Firehose resources={resources}>\n      <NetworkAttachmentDefinitionFormBase {...props} />\n    </Firehose>\n  );\n});\n\ntype FieldErrors = {\n  nameValidationMsg?: string;\n};\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash';\nimport { FormControl, FormGroup, HelpBlock } from 'patternfly-react';\nimport { Dropdown } from '@console/internal/components/utils';\nimport { ELEMENT_TYPES, networkTypeParams, NetworkTypeParams } from '../../constants';\n\nconst handleTypeParamChange = (\n  paramKey,\n  event,\n  elemType,\n  networkType,\n  setTypeParamsData,\n  typeParamsData,\n) => {\n  const paramsUpdate = { ...typeParamsData };\n\n  if (elemType === ELEMENT_TYPES.CHECKBOX) {\n    paramsUpdate[paramKey] = { value: event.target.checked };\n  } else if (event.target) {\n    paramsUpdate[paramKey] = { value: event.target.value };\n  } else {\n    paramsUpdate[paramKey] = { value: event };\n  }\n\n  _.forOwn(paramsUpdate, (value, key) => {\n    if (key === paramKey) {\n      const validation = _.get(networkTypeParams[networkType], [key, 'validation'], null);\n\n      paramsUpdate[key].validationMsg = validation ? validation(paramsUpdate) : null;\n    }\n  });\n\n  setTypeParamsData(paramsUpdate);\n};\n\nconst getSriovNetNodePolicyResourceNames = (sriovNetNodePoliciesData) => {\n  const resourceNames = {};\n\n  sriovNetNodePoliciesData.forEach((policy) => {\n    const resourceName = _.get(policy, 'spec.resourceName', '');\n    if (resourceName !== '') {\n      resourceNames[resourceName] = resourceName;\n    }\n  });\n\n  return resourceNames;\n};\n\nexport default (props) => {\n  const { networkType, setTypeParamsData, sriovNetNodePoliciesData, typeParamsData } = props;\n  const params: NetworkTypeParams = networkType && networkTypeParams[networkType];\n\n  if (_.isEmpty(params)) {\n    return null;\n  }\n\n  if (networkType === 'sriov') {\n    params.resourceName.values = getSriovNetNodePolicyResourceNames(sriovNetNodePoliciesData);\n  }\n\n  const dynamicContent = _.map(params, (parameter, key) => {\n    const validationMsg = _.get(typeParamsData, [key, 'validationMsg'], null);\n    const elemType = _.get(parameter, 'type');\n\n    let children;\n    switch (elemType) {\n      case ELEMENT_TYPES.TEXTAREA:\n        children = (\n          <>\n            <label\n              className={classNames('control-label', {\n                'co-required': parameter.required,\n              })}\n            >\n              {_.get(parameter, 'name', key)}\n            </label>\n            <FormControl\n              componentClass={ELEMENT_TYPES.TEXTAREA}\n              bsClass=\"pf-c-form-control\"\n              value={_.get(typeParamsData, `${key}.value`, '')}\n              onChange={(event) =>\n                handleTypeParamChange(\n                  key,\n                  event,\n                  ELEMENT_TYPES.TEXTAREA,\n                  networkType,\n                  setTypeParamsData,\n                  typeParamsData,\n                )\n              }\n            />\n            <HelpBlock>{validationMsg || null}</HelpBlock>\n          </>\n        );\n        break;\n      case ELEMENT_TYPES.CHECKBOX:\n        children = (\n          <>\n            <div className=\"checkbox\">\n              <label>\n                <input\n                  type=\"checkbox\"\n                  className=\"create-storage-class-form__checkbox\"\n                  onChange={(event) =>\n                    handleTypeParamChange(\n                      key,\n                      event,\n                      ELEMENT_TYPES.CHECKBOX,\n                      networkType,\n                      setTypeParamsData,\n                      typeParamsData,\n                    )\n                  }\n                  checked={_.get(typeParamsData, `${key}.value`, false)}\n                  id={`network-type-params-${key}-checkbox`}\n                />\n                {_.get(parameter, 'name', key)}\n              </label>\n            </div>\n            <HelpBlock>{validationMsg || null}</HelpBlock>\n          </>\n        );\n        break;\n      case ELEMENT_TYPES.DROPDOWN:\n        children = (\n          <>\n            <label className={classNames('control-label', { 'co-required': parameter.required })}>\n              {_.get(parameter, 'name', key)}\n            </label>\n            <Dropdown\n              title={parameter.hintText}\n              items={parameter.values}\n              dropDownClassName=\"dropdown--full-width\"\n              selectedKey={_.get(typeParamsData, `${key}.value`)}\n              onChange={(event) =>\n                handleTypeParamChange(\n                  key,\n                  event,\n                  ELEMENT_TYPES.DROPDOWN,\n                  networkType,\n                  setTypeParamsData,\n                  typeParamsData,\n                )\n              }\n            />\n            <HelpBlock>{validationMsg || null}</HelpBlock>\n          </>\n        );\n        break;\n      case ELEMENT_TYPES.TEXT:\n      default:\n        children = (\n          <>\n            <label\n              className={classNames('control-label', {\n                'co-required': parameter.required,\n              })}\n            >\n              {_.get(parameter, 'name', key)}\n            </label>\n            <FormControl\n              type=\"text\"\n              bsClass=\"pf-c-form-control\"\n              value={_.get(typeParamsData, `${key}.value`, '')}\n              onChange={(event) =>\n                handleTypeParamChange(\n                  key,\n                  event,\n                  ELEMENT_TYPES.TEXT,\n                  networkType,\n                  setTypeParamsData,\n                  typeParamsData,\n                )\n              }\n            />\n            <HelpBlock>{validationMsg || null}</HelpBlock>\n          </>\n        );\n    }\n\n    return (\n      <FormGroup\n        key={key}\n        controlId={`network-type-parameters-${key}`}\n        validationState={_.get(typeParamsData, `${key}.validationMsg`, null) ? 'error' : null}\n      >\n        {children}\n      </FormGroup>\n    );\n  });\n\n  return <>{dynamicContent}</>;\n};\n","export const NET_ATTACH_DEF_HEADER_LABEL = 'Create Network Attachment Definition';\n\nexport const ELEMENT_TYPES = {\n  CHECKBOX: 'checkbox',\n  DROPDOWN: 'dropdown',\n  TEXT: 'text',\n  TEXTAREA: 'textarea',\n};\n\nexport const networkTypes = {\n  sriov: 'SR-IOV',\n  'cnv-bridge': 'CNV Linux bridge',\n};\n\nexport enum NetworkTypes {\n  SRIOV = 'SR-IOV',\n  'CNV-Bridge' = 'CNV Linux bridge',\n}\n\nexport const networkTypeParams: NetworkTypeParamsList = {\n  sriov: {\n    resourceName: {\n      name: 'Resource Name',\n      values: {},\n      required: true,\n      type: ELEMENT_TYPES.DROPDOWN,\n    },\n    vlanTagNum: {\n      name: 'VLAN Tag Number',\n      hintText: 'Ex: 100',\n      type: ELEMENT_TYPES.TEXT,\n    },\n    ipam: {\n      name: 'IP Address Management',\n      type: ELEMENT_TYPES.TEXTAREA,\n    },\n  },\n  'cnv-bridge': {\n    bridge: {\n      name: 'Bridge Name',\n      required: true,\n      type: ELEMENT_TYPES.TEXT,\n    },\n    vlanTagNum: {\n      name: 'VLAN Tag Number',\n      hintText: 'Ex: 100',\n      type: ELEMENT_TYPES.TEXT,\n    },\n  },\n};\n\ntype NetworkTypeParamsList = {\n  [key: string]: NetworkTypeParams;\n};\n\nexport type NetworkTypeParams = {\n  [key: string]: NetworkTypeParameter;\n};\n\nexport type NetworkTypeParameter = {\n  name: string;\n  required?: boolean;\n  type: string;\n  hintText?: string;\n  values?: { [key: string]: string };\n};\n","export * from './models';\n","import * as _ from 'lodash';\nimport { NetworkAttachmentDefinitionConfig, NetworkAttachmentDefinitionKind } from '../types';\n\nexport const getConfigAsJSON = (\n  obj: NetworkAttachmentDefinitionKind,\n): NetworkAttachmentDefinitionConfig => {\n  try {\n    return JSON.parse(_.get(obj, 'spec.config'));\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('Unable to parse network attachment definition configuration');\n    return null;\n  }\n};\n\nexport const getType = (config: NetworkAttachmentDefinitionConfig): string => {\n  return _.get(config, 'type') === undefined ? null : config.type;\n};\n\nexport const getDescription = (netAttachDef: NetworkAttachmentDefinitionKind): string =>\n  _.get(netAttachDef, 'metadata.annotations.description');\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAMA;AAEA;AAEA;AACA;AAMA;AACA;AAEA;AAGA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAWA;AACA;AAEA;;AAGA;AACA;AACA;AACA;AAEA;AAWA;AACA;AAEA;;;;;;;;;;;;;AChJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAKA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAUA;AAGA;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AAGA;AAGA;AACA;AAOA;AAEA;AACA;AAKA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AAQA;AAKA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AAkBA;;;;;;;;;;;;;ACnGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AASA;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAUA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AASA;AACA;AAIA;AAGA;AAQA;AAGA;AACA;AACA;AASA;AACA;AAGA;AAWA;AACA;AAQA;AACA;AACA;AAoBA;AAQA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;;;;;;;;;;;;;AChVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AAeA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAgBA;AAGA;AAGA;AACA;AACA;AAEA;AAGA;AAgBA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AAeA;AAGA;AAEA;AASA;AAEA;AACA;;;;;;;;;;;;;ACjMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;A","sourceRoot":""}