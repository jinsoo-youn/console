{"version":3,"file":"pipelinerun-details-2ef82143a7c39eb7ca6f.js","sources":["webpack:///./packages/dev-console/src/components/pipelineruns/PipelineRunDetailsPage.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/detail-page-tabs/PipelineRunDetails.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/detail-page-tabs/TriggeredBySection.scss?a4d3","webpack:///./packages/dev-console/src/components/pipelineruns/triggered-by/ResourceKebabWithUserLabel.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/triggered-by/hooks.ts","webpack:///./packages/dev-console/src/components/pipelineruns/triggered-by/index.ts","webpack:///./packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/PipelineVisualization.tsx","webpack:///./packages/dev-console/src/components/pipelines/resource-overview/DynamicResourceLinkList.scss?7299","webpack:///./packages/dev-console/src/components/pipelines/resource-overview/DynamicResourceLinkList.tsx"],"sourcesContent":["import * as React from 'react';\nimport { DetailsPage, DetailsPageProps } from '@console/internal/components/factory';\nimport { KebabAction, navFactory, viewYamlComponent } from '@console/internal/components/utils';\nimport { pipelineRunStatus } from '../../utils/pipeline-filter-reducer';\nimport { getPipelineRunKebabActions } from '../../utils/pipeline-actions';\nimport { PipelineRunDetails } from './detail-page-tabs/PipelineRunDetails';\nimport { PipelineRunLogsWithActiveTask } from './detail-page-tabs/PipelineRunLogs';\nimport { useMenuActionsWithUserLabel } from './triggered-by';\n\nconst PipelineRunDetailsPage: React.FC<DetailsPageProps> = (props) => {\n  const menuActions: KebabAction[] = useMenuActionsWithUserLabel(getPipelineRunKebabActions(true));\n\n  return (\n    <DetailsPage\n      {...props}\n      menuActions={menuActions}\n      getResourceStatus={pipelineRunStatus}\n      pages={[\n        navFactory.details(PipelineRunDetails),\n        navFactory.editYaml(viewYamlComponent),\n        {\n          href: 'logs',\n          path: 'logs/:name?',\n          name: 'Logs',\n          component: PipelineRunLogsWithActiveTask,\n        },\n      ]}\n    />\n  );\n};\n\nexport default PipelineRunDetailsPage;\n","import * as React from 'react';\nimport { SectionHeading, ResourceSummary, ResourceLink } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport {\n  PipelineRun,\n  PipelineRunReferenceResource,\n  pipelineRefExists,\n} from '../../../utils/pipeline-augment';\nimport { PipelineModel, PipelineResourceModel } from '../../../models';\nimport ResourceLinkList from '../../pipelines/resource-overview/ResourceLinkList';\nimport PipelineRunVisualization from './PipelineRunVisualization';\nimport TriggeredBySection from './TriggeredBySection';\n\nimport './TriggeredBySection.scss';\n\nexport interface PipelineRunDetailsProps {\n  obj: PipelineRun;\n}\n\nexport const PipelineRunDetails: React.FC<PipelineRunDetailsProps> = ({ obj: pipelineRun }) => {\n  // FIXME: If they are inline resources, we are not going to render them\n  const unfilteredResources = pipelineRun.spec.resources as PipelineRunReferenceResource[];\n  const renderResources =\n    unfilteredResources\n      ?.filter(({ resourceRef }) => !!resourceRef)\n      .map((resource) => resource.resourceRef.name) || [];\n\n  return (\n    <div className=\"co-m-pane__body odc-pipeline-run-details\">\n      <SectionHeading text=\"Pipeline Run Details\" />\n      <PipelineRunVisualization pipelineRun={pipelineRun} />\n      <div className=\"row\">\n        <div className=\"col-sm-6\">\n          <ResourceSummary resource={pipelineRun} />\n        </div>\n        <div className=\"col-sm-6 odc-pipeline-run-details__customDetails\">\n          {pipelineRefExists(pipelineRun) && (\n            <dl>\n              <dt>Pipeline</dt>\n              <dd>\n                <ResourceLink\n                  kind={referenceForModel(PipelineModel)}\n                  name={pipelineRun.spec.pipelineRef.name}\n                  namespace={pipelineRun.metadata.namespace}\n                />\n              </dd>\n            </dl>\n          )}\n          <TriggeredBySection pipelineRun={pipelineRun} />\n          <br />\n          <ResourceLinkList\n            model={PipelineResourceModel}\n            links={renderResources}\n            namespace={pipelineRun.metadata.namespace}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { KebabAction, ResourceKebab } from '@console/internal/components/utils';\nimport { useMenuActionsWithUserLabel } from './hooks';\n\nconst ResourceKebabWithUserLabel: React.FC<React.ComponentProps<typeof ResourceKebab>> = ({\n  actions,\n  ...otherProps\n}) => {\n  const augmentedMenuActions: KebabAction[] = useMenuActionsWithUserLabel(actions);\n\n  return <ResourceKebab {...otherProps} actions={augmentedMenuActions} />;\n};\n\nexport default ResourceKebabWithUserLabel;\n","import { merge } from 'lodash';\n// FIXME react-redux types are 6.x while react-redux is 7.x\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport { useSelector } from 'react-redux';\nimport { KebabAction } from '@console/internal/components/utils';\nimport { K8sResourceCommon } from '@console/internal/module/k8s';\nimport { PipelineRun } from '../../../utils/pipeline-augment';\nimport { StartedByLabel } from '../../pipelines/const';\n\ntype LabelMap = { [labelKey: string]: string };\n\nconst mergeLabelsWithResource = (labels: LabelMap, resource: K8sResourceCommon) => {\n  return merge({}, resource, { metadata: { labels } });\n};\n\nexport const useUserLabelForManualStart = (): LabelMap => {\n  const user = useSelector((state) => state.UI.get('user'));\n\n  return {\n    // kube:admin is an invalid k8s label value\n    [StartedByLabel.user]: user.metadata.name.replace(/:/, ''),\n  };\n};\n\nexport const usePipelineRunWithUserLabel = (plr: PipelineRun): PipelineRun => {\n  const labels = useUserLabelForManualStart();\n\n  return plr && mergeLabelsWithResource(labels, plr);\n};\n\nexport const useMenuActionsWithUserLabel = (menuActions: KebabAction[]): KebabAction[] => {\n  const labels = useUserLabelForManualStart();\n\n  return menuActions.map((kebabAction) => {\n    return (kind, resource, ...rest) =>\n      kebabAction(kind, mergeLabelsWithResource(labels, resource), ...rest);\n  });\n};\n","export * from './hooks';\nexport { default as ResourceKebabWithUserLabel } from './ResourceKebabWithUserLabel';\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { Pipeline, PipelineRun } from '../../../../utils/pipeline-augment';\nimport PipelineTopologyGraph from '../../pipeline-topology/PipelineTopologyGraph';\nimport { getTopologyNodesEdges } from '../../pipeline-topology/utils';\nimport { PipelineLayout } from '../../pipeline-topology/const';\n\nimport './PipelineVisualization.scss';\n\ninterface PipelineTopologyVisualizationProps {\n  pipeline: Pipeline;\n  pipelineRun?: PipelineRun;\n}\n\nconst PipelineVisualization: React.FC<PipelineTopologyVisualizationProps> = ({\n  pipeline,\n  pipelineRun,\n}) => {\n  const { nodes, edges } = getTopologyNodesEdges(pipeline, pipelineRun);\n\n  if (nodes.length === 0 && edges.length === 0) {\n    // Nothing to render\n    // TODO: Confirm wording with UX; ODC-1860\n    return <Alert variant=\"info\" isInline title=\"This Pipeline has no tasks to visualize.\" />;\n  }\n\n  return (\n    <div className=\"odc-pipeline-visualization\">\n      <PipelineTopologyGraph\n        id={pipelineRun?.metadata?.name || pipeline.metadata.name}\n        nodes={nodes}\n        edges={edges}\n        layout={PipelineLayout.DAGRE_VIEWER}\n      />\n    </div>\n  );\n};\n\nexport default PipelineVisualization;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { K8sKind, referenceForModel } from '@console/internal/module/k8s';\n\nimport './DynamicResourceLinkList.scss';\n\nexport type ResourceModelLink = {\n  model: K8sKind;\n  name: string;\n  displayName?: string;\n};\n\ntype DynamicResourceLinkListProps = {\n  links: ResourceModelLink[];\n  namespace: string;\n  title: string;\n};\n\nconst DynamicResourceLinkList: React.FC<DynamicResourceLinkListProps> = ({\n  links = [],\n  namespace,\n  title,\n}) => {\n  if (links.length === 0) {\n    return null;\n  }\n  return (\n    <div className=\"odc-dynamic-resource-link-list\">\n      <dl>\n        <dt>{title}</dt>\n        <dd>\n          {links.map(({ name, model, displayName = '' }) => {\n            const kind = referenceForModel(model);\n            let linkName = name;\n            if (displayName.length > 0 && name !== displayName) {\n              linkName += ` (${displayName})`;\n            }\n            return (\n              <div key={`${kind}/${name}`}>\n                <ResourceLink\n                  kind={kind}\n                  name={name}\n                  displayName={linkName}\n                  namespace={namespace}\n                  title={name}\n                  inline\n                />\n              </div>\n            );\n          })}\n        </dd>\n      </dl>\n    </div>\n  );\n};\n\nexport default DynamicResourceLinkList;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAQA;AACA;AACA;AASA;;;;;;;;;;;;AC3DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAEA;AAAA;AAIA;AAEA;AACA;AAEA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAOA;;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AAEA;;;;;;;;;;;;ACtCA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAcA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAKA;AAEA;;;;;A","sourceRoot":""}