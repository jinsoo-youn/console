{"version":3,"file":"dev-console-projectDetails-7063d71df2ced6db92b6.js","sources":["webpack:///./packages/dev-console/src/components/project-access/ProjectAccess.tsx","webpack:///./packages/dev-console/src/components/project-access/ProjectAccessForm.tsx","webpack:///./packages/dev-console/src/components/project-access/ProjectAccessPage.tsx","webpack:///./packages/dev-console/src/components/project-access/project-access-form-submit-utils.ts","webpack:///./packages/dev-console/src/components/project-access/project-access-form-utils-types.ts","webpack:///./packages/dev-console/src/components/project-access/project-access-form-utils.ts","webpack:///./packages/dev-console/src/components/project-access/project-access-form-validation-utils.ts","webpack:///./packages/dev-console/src/components/projects/ProjectListPage.scss?762c","webpack:///./packages/dev-console/src/components/projects/ProjectListPage.tsx","webpack:///./packages/dev-console/src/components/projects/details/ProjectDetailsPage.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Formik } from 'formik';\nimport { Link } from 'react-router-dom';\nimport {\n  LoadingBox,\n  PageHeading,\n  ExternalLink,\n  StatusBox,\n} from '@console/internal/components/utils';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { RoleBindingModel, RoleModel } from '@console/internal/models';\nimport { filterRoleBindings, getUserRoleBindings } from './project-access-form-utils';\nimport {\n  getRolesWithNameChange,\n  sendRoleBindingRequest,\n  getNewRoles,\n  getRemovedRoles,\n} from './project-access-form-submit-utils';\nimport { validationSchema } from './project-access-form-validation-utils';\nimport ProjectAccessForm from './ProjectAccessForm';\nimport { Verb, UserRoleBinding, Roles, roleBinding } from './project-access-form-utils-types';\n\nexport interface ProjectAccessProps {\n  formName: string;\n  namespace: string;\n  roleBindings?: { data: []; loaded: boolean; loadError: {} };\n}\n\nconst ProjectAccess: React.FC<ProjectAccessProps> = ({ formName, namespace, roleBindings }) => {\n  if (!roleBindings.loaded && _.isEmpty(roleBindings.loadError)) {\n    return <LoadingBox />;\n  }\n\n  const filteredRoleBindings = filterRoleBindings(roleBindings, Roles);\n\n  const userRoleBindings: UserRoleBinding[] = getUserRoleBindings(filteredRoleBindings);\n\n  const initialValues = {\n    projectAccess: roleBindings.loaded && userRoleBindings,\n  };\n\n  const handleSubmit = (values, actions) => {\n    let newRoles = getNewRoles(initialValues.projectAccess, values.projectAccess);\n    let removeRoles = getRemovedRoles(initialValues.projectAccess, values.projectAccess);\n    const updateRoles = getRolesWithNameChange(newRoles, removeRoles);\n\n    if (!_.isEmpty(updateRoles)) {\n      newRoles = _.filter(\n        newRoles,\n        (o1) => !updateRoles.find((o2) => o1.roleBindingName === o2.roleBindingName),\n      );\n      removeRoles = _.filter(\n        removeRoles,\n        (o1) => !updateRoles.find((o2) => o1.roleBindingName === o2.roleBindingName),\n      );\n    }\n\n    const roleBindingRequests = [];\n    roleBinding.metadata.namespace = namespace;\n\n    actions.setSubmitting(true);\n    if (!_.isEmpty(updateRoles)) {\n      roleBindingRequests.push(...sendRoleBindingRequest(Verb.Patch, updateRoles, roleBinding));\n    }\n    if (!_.isEmpty(removeRoles)) {\n      roleBindingRequests.push(...sendRoleBindingRequest(Verb.Remove, removeRoles, roleBinding));\n    }\n    if (!_.isEmpty(newRoles)) {\n      roleBindingRequests.push(...sendRoleBindingRequest(Verb.Create, newRoles, roleBinding));\n    }\n\n    Promise.all(roleBindingRequests)\n      .then(() => {\n        actions.setSubmitting(false);\n        actions.resetForm({\n          values: {\n            projectAccess: values.projectAccess,\n          },\n          status: { success: `Successfully updated the ${formName}.` },\n        });\n      })\n      .catch((err) => {\n        actions.setSubmitting(false);\n        actions.setStatus({ submitError: err.message });\n      });\n  };\n\n  const handleReset = (values, actions) => {\n    actions.resetForm({ status: { success: null } });\n  };\n\n  return (\n    <>\n      <PageHeading>\n        Project Access allows you to add or remove a user&apos;s access to the project. More\n        advanced management of role-based access control appear in{' '}\n        <Link to={`/k8s/ns/${getActiveNamespace()}/${RoleModel.plural}`}>Roles</Link> and{' '}\n        <Link to={`/k8s/ns/${getActiveNamespace()}/${RoleBindingModel.plural}`}>Role Bindings</Link>\n        . For more information, see the{' '}\n        <ExternalLink\n          href=\"https://docs.openshift.com/container-platform/4.1/authentication/using-rbac.html\"\n          text=\"role-based access control documentation\"\n        />{' '}\n        .\n      </PageHeading>\n      <div className=\"co-m-pane__body\">\n        {roleBindings.loadError ? (\n          <StatusBox loaded={roleBindings.loaded} loadError={roleBindings.loadError} />\n        ) : (\n          <Formik\n            initialValues={initialValues}\n            onSubmit={handleSubmit}\n            onReset={handleReset}\n            validationSchema={validationSchema}\n            render={(props) => <ProjectAccessForm {...props} />}\n          />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default ProjectAccess;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Form, TextInputTypes } from '@patternfly/react-core';\nimport { FormikProps, FormikValues } from 'formik';\nimport { MultiColumnField, InputField, DropdownField, FormFooter } from '@console/shared';\n\nenum accessRoles {\n  '' = 'Select a role',\n  admin = 'Admin',\n  edit = 'Edit',\n  view = 'View',\n}\n\nconst ProjectAccessForm: React.FC<FormikProps<FormikValues>> = ({\n  handleSubmit,\n  handleReset,\n  isSubmitting,\n  status,\n  errors,\n  dirty,\n}) => (\n  <Form onSubmit={handleSubmit}>\n    <div className=\"co-m-pane__form\">\n      <MultiColumnField\n        name=\"projectAccess\"\n        addLabel=\"Add Access\"\n        headers={['Name', 'Role']}\n        emptyValues={{ user: '', role: '' }}\n        toolTip=\"Remove Access\"\n      >\n        <InputField name=\"user\" type={TextInputTypes.text} placeholder=\"Name\" />\n        <DropdownField name=\"role\" items={accessRoles} fullWidth />\n      </MultiColumnField>\n      <hr />\n      <FormFooter\n        handleReset={handleReset}\n        isSubmitting={isSubmitting}\n        errorMessage={status && status.submitError}\n        successMessage={status && !dirty && status.success}\n        disableSubmit={!dirty || !_.isEmpty(errors)}\n        showAlert={dirty}\n      />\n    </div>\n  </Form>\n);\n\nexport default ProjectAccessForm;\n","import * as React from 'react';\nimport { Firehose } from '@console/internal/components/utils';\nimport ProjectAccess from './ProjectAccess';\n\nexport interface ProjectAccessPageProps {\n  customData: { activeNamespace: string };\n}\n\nconst ProjectAccessPage: React.FC<ProjectAccessPageProps> = ({ customData }) => {\n  const { activeNamespace } = customData;\n  const props: React.ComponentProps<typeof ProjectAccess> = {\n    formName: 'project access',\n    namespace: activeNamespace,\n  };\n  return (\n    <Firehose\n      resources={[\n        {\n          namespace: activeNamespace,\n          kind: 'RoleBinding',\n          prop: 'roleBindings',\n          isList: true,\n          optional: true,\n        },\n      ]}\n    >\n      <ProjectAccess {...props} />\n    </Firehose>\n  );\n};\n\nexport default ProjectAccessPage;\n","import * as _ from 'lodash';\nimport { k8sCreate, k8sKill, k8sPatch, K8sResourceKind } from '@console/internal/module/k8s';\nimport { RoleBindingModel } from '@console/internal/models';\nimport { generateSecret } from '../import/import-submit-utils';\nimport { Verb, UserRoleBinding } from './project-access-form-utils-types';\n\nexport const getRolesWithNameChange = (\n  newRoles: UserRoleBinding[],\n  removeRoles: UserRoleBinding[],\n) => {\n  const createRoles = _.filter(newRoles, 'roleBindingName');\n  const deleteRoles = _.filter(removeRoles, (o1) =>\n    createRoles.find((o2) => o1.roleBindingName === o2.roleBindingName),\n  );\n  const rolesWithNameChange = _.filter(createRoles, (o1) =>\n    deleteRoles.find(\n      (o2) =>\n        o1.roleBindingName === o2.roleBindingName && o1.user !== o2.user && o1.role === o2.role,\n    ),\n  );\n  return rolesWithNameChange;\n};\n\nexport const sendK8sRequest = (verb: string, roleBinding): Promise<K8sResourceKind> => {\n  switch (verb) {\n    case Verb.Create:\n      return k8sCreate(RoleBindingModel, roleBinding);\n    case Verb.Remove:\n      return k8sKill(RoleBindingModel, roleBinding);\n    case Verb.Patch:\n      return k8sPatch(RoleBindingModel, { metadata: roleBinding.metadata }, [\n        { op: 'replace', path: `/subjects/0`, value: roleBinding.subjects[0] },\n      ]);\n    default:\n      return null;\n  }\n};\n\nexport const generateRoleBindingName = (username: string, role: string) => {\n  return `${username}-${role}-${generateSecret()}`;\n};\n\nexport const getNewRoles = (initialRoles: UserRoleBinding[], formValues: UserRoleBinding[]) => {\n  const newRoles = _.uniqBy(\n    _.filter(\n      formValues,\n      (o1) => !initialRoles.find((o2) => o1.user === o2.user && o1.role === o2.role),\n    ),\n    function(user) {\n      return JSON.stringify([user.user, user.role]);\n    },\n  );\n  return newRoles;\n};\n\nexport const getRemovedRoles = (initialRoles: UserRoleBinding[], formValues: UserRoleBinding[]) => {\n  const removeRoles = _.filter(\n    initialRoles,\n    (o1) => !formValues.find((o2: UserRoleBinding) => o1.user === o2.user && o1.role === o2.role),\n  );\n  return removeRoles;\n};\n\nexport const sendRoleBindingRequest = (verb: string, roles: UserRoleBinding[], roleBinding) => {\n  const finalArray = [];\n  _.forEach(roles, (user) => {\n    const roleBindingName =\n      verb === Verb.Create ? generateRoleBindingName(user.user, user.role) : user.roleBindingName;\n    roleBinding.subjects[0].name = user.user;\n    roleBinding.roleRef.name = user.role;\n    roleBinding.metadata.name = roleBindingName;\n    finalArray.push(sendK8sRequest(verb, roleBinding));\n  });\n  return finalArray;\n};\n","export enum Verb {\n  Create = 'Create',\n  Remove = 'Remove',\n  Patch = 'Patch',\n}\n\nexport enum Roles {\n  view = 'view',\n  admin = 'admin',\n  edit = 'edit',\n}\n\nexport interface UserRole {\n  metadata: {\n    name: string;\n  };\n  roleRef: {\n    name: string;\n  };\n  subjects: [\n    {\n      name: string;\n    },\n  ];\n}\n\nexport interface UserRoleBinding {\n  roleBindingName?: string;\n  user: string;\n  role: string;\n}\n\nexport const roleBinding = {\n  apiVersion: 'rbac.authorization.k8s.io/v1',\n  kind: 'RoleBinding',\n  metadata: {\n    name: '',\n    namespace: '',\n  },\n  roleRef: {\n    apiGroup: 'rbac.authorization.k8s.io',\n    kind: 'ClusterRole',\n    name: '',\n  },\n  subjects: [\n    {\n      apiGroup: 'rbac.authorization.k8s.io',\n      kind: 'User',\n      name: '',\n    },\n  ],\n};\n","import * as _ from 'lodash';\nimport { UserRoleBinding, UserRole } from './project-access-form-utils-types';\n\nexport const filterRoleBindings = (roleBindings, roles) => {\n  return _.filter(roleBindings.data, (user: UserRole) => _.keys(roles).includes(user.roleRef.name));\n};\n\nexport const getUserRoleBindings = (roleBindings) => {\n  let userRoleBindings: UserRoleBinding[] = [];\n  roleBindings.map(\n    (user: UserRole) =>\n      (userRoleBindings = [\n        ...userRoleBindings,\n        ...[\n          {\n            roleBindingName: user.metadata.name,\n            user: user.subjects[0].name,\n            role: user.roleRef.name,\n          },\n        ],\n      ]),\n  );\n  return userRoleBindings;\n};\n","import * as yup from 'yup';\n\nexport const validationSchema = yup.object().shape({\n  projectAccess: yup.array().of(\n    yup.object().shape({\n      user: yup.string().required('Required'),\n      role: yup.string().required('Required'),\n    }),\n  ),\n});\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { ListPage } from '@console/internal/components/factory';\nimport { ProjectsTable } from '@console/internal/components/namespace';\nimport { PageHeading } from '@console/internal/components/utils';\nimport './ProjectListPage.scss';\n\nexport interface ProjectListPageProps {\n  title: string;\n  listComponent?: React.ComponentType<any>;\n  children?: React.ReactNode;\n  badge?: React.ReactNode;\n}\nconst ProjectListPage: React.FC<ProjectListPageProps> = ({ badge, title, children, listComponent, ...listPageProps }) => (\n  <div className=\"odc-project-list-page\">\n    <PageHeading title={title} badge={badge}>\n      {children}\n    </PageHeading>\n    <hr className=\"odc-project-list-page__section-border\" />\n    <ListPage {...listPageProps} showTitle={false} kind=\"Project\" ListComponent={listComponent || ProjectsTable} canCreate={false} filterLabel=\"by name or display name\" textFilter=\"project-name\" />\n  </div>\n);\n\nexport default ProjectListPage;\n","import * as React from 'react';\nimport { match as RMatch } from 'react-router';\nimport { history, useAccessReview } from '@console/internal/components/utils';\nimport { ALL_NAMESPACES_KEY } from '@console/shared';\nimport { NamespaceDetails, projectMenuActions } from '@console/internal/components/namespace';\nimport { ProjectModel, RoleBindingModel } from '@console/internal/models';\nimport { DetailsPage } from '@console/internal/components/factory';\nimport { ProjectDashboard } from '@console/internal/components/dashboard/project-dashboard/project-dashboard';\nimport { withStartGuide } from '@console/internal/components/start-guide';\nimport NamespacedPage, { NamespacedPageVariants } from '../../NamespacedPage';\nimport ProjectAccessPage from '../../project-access/ProjectAccessPage';\nimport { Helmet } from 'react-helmet';\nimport ProjectListPage from '../ProjectListPage';\n\nexport const PROJECT_DETAILS_ALL_NS_PAGE_URI = '/project-details/all-namespaces';\n\ninterface MonitoringPageProps {\n  match: RMatch<{\n    ns?: string;\n  }>;\n  noProjectsAvailable?: boolean;\n}\n\nconst handleNamespaceChange = (newNamespace: string): void => {\n  if (newNamespace === ALL_NAMESPACES_KEY) {\n    history.push(PROJECT_DETAILS_ALL_NS_PAGE_URI);\n  }\n};\n\nexport const PageContents: React.FC<MonitoringPageProps> = ({ noProjectsAvailable, match, ...props }) => {\n  const activeNamespace = match.params.ns;\n\n  const canListRoleBindings = useAccessReview({\n    group: RoleBindingModel.apiGroup,\n    resource: RoleBindingModel.plural,\n    verb: 'list',\n    namespace: activeNamespace,\n  });\n\n  const canCreateRoleBindings = useAccessReview({\n    group: RoleBindingModel.apiGroup,\n    resource: RoleBindingModel.plural,\n    verb: 'create',\n    namespace: activeNamespace,\n  });\n\n  return !noProjectsAvailable && activeNamespace ? (\n    <DetailsPage\n      {...props}\n      match={match}\n      breadcrumbsFor={() => []}\n      name={activeNamespace}\n      kind={ProjectModel.kind}\n      kindObj={ProjectModel}\n      menuActions={projectMenuActions}\n      customData={{ activeNamespace, hideHeading: true }}\n      pages={[\n        {\n          href: '',\n          name: 'Overview',\n          component: ProjectDashboard,\n        },\n        {\n          href: 'details',\n          name: 'Details',\n          component: NamespaceDetails,\n        },\n        canListRoleBindings &&\n          canCreateRoleBindings && {\n            href: 'access',\n            name: 'Project Access',\n            component: ProjectAccessPage,\n          },\n      ]}\n    />\n  ) : (\n    <ProjectListPage title=\"Project Details\">Select a project to view its details</ProjectListPage>\n  );\n};\n\nconst PageContentsWithStartGuide = withStartGuide(PageContents);\n\nexport const ProjectDetailsPage: React.FC<MonitoringPageProps> = props => (\n  <>\n    <Helmet>\n      <title>Project Details</title>\n    </Helmet>\n    <NamespacedPage hideApplications variant={NamespacedPageVariants.light} onNamespaceChange={handleNamespaceChange}>\n      <PageContentsWithStartGuide {...props} />\n    </NamespacedPage>\n  </>\n);\n\nexport default ProjectDetailsPage;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAMA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;;AAAA;AACA;;AACA;AACA;AAGA;AAEA;AACA;AAeA;AAEA;;;;;;;;;;;;;AC3HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AACA;AAOA;AACA;AAEA;AACA;AAYA;;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAGA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1EA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;ACTA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AAEA;AAGA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAKA;;;;;A","sourceRoot":""}