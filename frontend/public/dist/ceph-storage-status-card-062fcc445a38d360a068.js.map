{"version":3,"file":"ceph-storage-status-card-062fcc445a38d360a068.js","sources":["webpack:///./packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/status-card/status-card.tsx","webpack:///./packages/ceph-storage-plugin/src/constants/resources.ts","webpack:///./packages/ceph-storage-plugin/src/selectors/index.ts","webpack:///./packages/console-shared/src/components/dashboard/status-card/AlertItem.tsx","webpack:///./packages/console-shared/src/components/dashboard/status-card/AlertsBody.tsx","webpack:///./packages/console-shared/src/components/dashboard/status-card/HealthItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Gallery, GalleryItem } from '@patternfly/react-core';\nimport AlertsBody from '@console/shared/src/components/dashboard/status-card/AlertsBody';\nimport AlertItem from '@console/shared/src/components/dashboard/status-card/AlertItem';\nimport { alertURL } from '@console/internal/components/monitoring';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport HealthBody from '@console/shared/src/components/dashboard/status-card/HealthBody';\nimport HealthItem from '@console/shared/src/components/dashboard/status-card/HealthItem';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport {\n  withDashboardResources,\n  DashboardItemProps,\n} from '@console/internal/components/dashboard/with-dashboard-resources';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { DATA_RESILIENCY_QUERY, StorageDashboardQuery } from '../../../../constants/queries';\nimport { cephClusterResource } from '../../../../constants/resources';\nimport { filterCephAlerts } from '../../../../selectors';\nimport { getCephHealthState, getDataResiliencyState } from './utils';\n\nconst resiliencyProgressQuery = DATA_RESILIENCY_QUERY[StorageDashboardQuery.RESILIENCY_PROGRESS];\n\nexport const CephAlerts = withDashboardResources(\n  ({ watchAlerts, stopWatchAlerts, notificationAlerts }) => {\n    React.useEffect(() => {\n      watchAlerts();\n      return () => {\n        stopWatchAlerts();\n      };\n    }, [watchAlerts, stopWatchAlerts]);\n\n    const { data, loaded, loadError } = notificationAlerts || {};\n    const alerts = filterCephAlerts(data);\n\n    return (\n      <AlertsBody error={!_.isEmpty(loadError)}>\n        {loaded &&\n          alerts.length > 0 &&\n          alerts.map((alert) => <AlertItem key={alertURL(alert, alert.rule.id)} alert={alert} />)}\n      </AlertsBody>\n    );\n  },\n);\n\nexport const StatusCard: React.FC<DashboardItemProps> = ({\n  watchPrometheus,\n  stopWatchPrometheusQuery,\n  prometheusResults,\n}) => {\n  const [data, loaded, loadError] = useK8sWatchResource<K8sResourceKind[]>(cephClusterResource);\n\n  React.useEffect(() => {\n    watchPrometheus(resiliencyProgressQuery);\n    return () => {\n      stopWatchPrometheusQuery(resiliencyProgressQuery);\n    };\n  }, [watchPrometheus, stopWatchPrometheusQuery]);\n\n  const resiliencyProgress = prometheusResults.getIn([\n    resiliencyProgressQuery,\n    'data',\n  ]) as PrometheusResponse;\n  const resiliencyProgressError = prometheusResults.getIn([resiliencyProgressQuery, 'loadError']);\n\n  const cephHealthState = getCephHealthState({ ceph: { data, loaded, loadError } });\n  const dataResiliencyState = getDataResiliencyState([\n    { response: resiliencyProgress, error: resiliencyProgressError },\n  ]);\n\n  return (\n    <DashboardCard gradient>\n      <DashboardCardHeader>\n        <DashboardCardTitle>Status</DashboardCardTitle>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <HealthBody>\n          <Gallery className=\"co-overview-status__health\" gutter=\"md\">\n            <GalleryItem>\n              <HealthItem\n                title=\"OCS Cluster\"\n                state={cephHealthState.state}\n                details={cephHealthState.message}\n              />\n            </GalleryItem>\n            <GalleryItem>\n              <HealthItem\n                title=\"Data Resiliency\"\n                state={dataResiliencyState.state}\n                details={dataResiliencyState.message}\n              />\n            </GalleryItem>\n          </Gallery>\n        </HealthBody>\n        <CephAlerts />\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\nexport default withDashboardResources(StatusCard);\n","import { FirehoseResource } from '@console/internal/components/utils/index';\nimport { referenceForModel } from '@console/internal/module/k8s/k8s';\nimport { PersistentVolumeModel } from '@console/internal/models';\nimport { WatchK8sResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { CephClusterModel } from '../models';\n\nexport const cephClusterResource: FirehoseResource = {\n  kind: referenceForModel(CephClusterModel),\n  namespaced: false,\n  isList: true,\n  prop: 'ceph',\n};\n\nexport const pvResource: WatchK8sResource = {\n  kind: PersistentVolumeModel.kind,\n  namespaced: false,\n  isList: true,\n};\n","import * as _ from 'lodash';\nimport { Alert } from '@console/internal/components/monitoring';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { FirehoseResult, convertToBaseValue } from '@console/internal/components/utils';\nimport { cephStorageProvisioners } from '@console/shared/src/utils';\nimport { OCS_OPERATOR } from '../constants';\n\nexport const cephStorageLabel = 'cluster.ocs.openshift.io/openshift-storage';\n\nconst enum status {\n  BOUND = 'Bound',\n  AVAILABLE = 'Available',\n}\nexport const filterCephAlerts = (alerts: Alert[]): Alert[] =>\n  alerts.filter((alert) => _.get(alert, 'annotations.storage_type') === 'ceph');\n\nexport const getCephPVs = (pvsData: K8sResourceKind[] = []): K8sResourceKind[] =>\n  pvsData.filter((pv) => {\n    return cephStorageProvisioners.some((provisioner: string) =>\n      _.get(pv, 'metadata.annotations[\"pv.kubernetes.io/provisioned-by\"]', '').includes(\n        provisioner,\n      ),\n    );\n  });\n\nconst getPVStorageClass = (pv: K8sResourceKind) => _.get(pv, 'spec.storageClassName');\nconst getStorageClassName = (pvc: K8sResourceKind) =>\n  _.get(pvc, ['metadata', 'annotations', 'volume.beta.kubernetes.io/storage-class']) ||\n  _.get(pvc, 'spec.storageClassName');\nconst isBound = (pvc: K8sResourceKind) => pvc.status.phase === status.BOUND;\n\nexport const getCephPVCs = (\n  cephSCNames: string[] = [],\n  pvcsData: K8sResourceKind[] = [],\n  pvsData: K8sResourceKind[] = [],\n): K8sResourceKind[] => {\n  const cephPVs = getCephPVs(pvsData);\n  const cephSCNameSet = new Set<string>([...cephSCNames, ...cephPVs.map(getPVStorageClass)]);\n  const cephBoundPVCUIDSet = new Set<string>(_.map(cephPVs, 'spec.claimRef.uid'));\n  // If the PVC is bound use claim uid(links PVC to PV) else storage class to verify it's provisioned by ceph.\n  return pvcsData.filter((pvc: K8sResourceKind) =>\n    isBound(pvc)\n      ? cephBoundPVCUIDSet.has(pvc.metadata.uid)\n      : cephSCNameSet.has(getStorageClassName(pvc)),\n  );\n};\n\nexport const getCephNodes = (nodesData: K8sResourceKind[] = []): K8sResourceKind[] =>\n  nodesData.filter((node) => _.keys(_.get(node, 'metadata.labels')).includes(cephStorageLabel));\n\nexport const getCephSC = (scData: K8sResourceKind[]): K8sResourceKind[] =>\n  scData.filter((sc) => {\n    return cephStorageProvisioners.some((provisioner: string) =>\n      _.get(sc, 'provisioner', '').includes(provisioner),\n    );\n  });\n\nexport const getOCSVersion = (items: FirehoseResult): string => {\n  const itemsData: K8sResourceKind[] = _.get(items, 'data');\n  const operator: K8sResourceKind = _.find(\n    itemsData,\n    (item) => _.get(item, 'spec.name') === OCS_OPERATOR,\n  );\n  return _.get(operator, 'status.installedCSV');\n};\n\nexport const calcPVsCapacity = (pvs: K8sResourceKind[]): number =>\n  pvs.reduce((sum, pv) => {\n    const storage = Number(convertToBaseValue(pv.spec.capacity.storage));\n    return sum + storage;\n  }, 0);\n\nexport const getSCAvailablePVs = (pvsData: K8sResourceKind[], sc: string): K8sResourceKind[] =>\n  pvsData.filter((pv) => getPVStorageClass(pv) === sc && pv.status.phase === status.AVAILABLE);\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { alertActions } from '@console/internal/components/notification-drawer';\nimport { Timestamp } from '@console/internal/components/utils/timestamp';\nimport { alertURL, Alert } from '@console/internal/components/monitoring';\nimport { RedExclamationCircleIcon, YellowExclamationTriangleIcon } from '../../status/icons';\nimport {\n  getAlertSeverity,\n  getAlertMessage,\n  getAlertDescription,\n  getAlertTime,\n} from './alert-utils';\n\nconst getSeverityIcon = (severity: string) => {\n  switch (severity) {\n    case 'critical':\n      return RedExclamationCircleIcon;\n    case 'warning':\n    default:\n      return YellowExclamationTriangleIcon;\n  }\n};\n\nexport const StatusItem: React.FC<StatusItemProps> = ({ Icon, timestamp, message, children }) => {\n  return (\n    <div className=\"co-status-card__alert-item\">\n      <div className=\"co-status-card__alert-item-icon co-dashboard-icon\">\n        <Icon />\n      </div>\n      <div className=\"co-status-card__alert-item-text\">\n        <div className=\"co-status-card__alert-item-message\">\n          <div className=\"co-health-card__alert-item-timestamp co-status-card__health-item-text text-secondary\">\n            {timestamp && <Timestamp simple timestamp={timestamp} />}\n          </div>\n          <span className=\"co-status-card__health-item-text co-break-word\">{message}</span>\n        </div>\n        {children && <div className=\"co-status-card__alert-item-more\">{children}</div>}\n      </div>\n    </div>\n  );\n};\n\nconst AlertItem: React.FC<AlertItemProps> = ({ alert }) => {\n  const action = alertActions.get(alert.rule.name);\n  return (\n    <StatusItem\n      Icon={getSeverityIcon(getAlertSeverity(alert))}\n      timestamp={getAlertTime(alert)}\n      message={getAlertDescription(alert) || getAlertMessage(alert)}\n    >\n      {action ? (\n        <Link to={action.path}>{action.text}</Link>\n      ) : (\n        <Link to={alertURL(alert, alert.rule.id)}>View details</Link>\n      )}\n    </StatusItem>\n  );\n};\n\nexport default AlertItem;\n\ntype StatusItemProps = {\n  Icon: React.ComponentType<any>;\n  timestamp?: string;\n  message: string;\n};\n\ntype AlertItemProps = {\n  alert: Alert;\n};\n","import * as React from 'react';\nimport {\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { UnknownIcon } from '@patternfly/react-icons';\n\nconst AlertsBody: React.FC<AlertsBodyProps> = ({ error = false, children }) =>\n  (error || !!React.Children.toArray(children).length) && (\n    <div className=\"co-dashboard-card__body--no-padding co-status-card__alerts-body co-dashboard-card__body--top-margin\">\n      {error ? (\n        <EmptyState variant={EmptyStateVariant.full} className=\"co-status-card__alerts-msg\">\n          <EmptyStateIcon className=\"co-status-card__alerts-icon\" icon={UnknownIcon} />\n          <EmptyStateBody>Alerts could not be loaded.</EmptyStateBody>\n        </EmptyState>\n      ) : (\n        children\n      )}\n    </div>\n  );\n\nexport default AlertsBody;\n\ntype AlertsBodyProps = {\n  error?: boolean;\n  children?: React.ReactNode;\n};\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { DashboardCardPopupLink } from '../dashboard-card/DashboardCardLink';\nimport { HealthState, healthStateMapping } from './states';\n\nconst HealthItemIcon: React.FC<HealthItemIconProps> = ({ state }) => (\n  <div className=\"co-dashboard-icon\">\n    {(healthStateMapping[state] || healthStateMapping[HealthState.UNKNOWN]).icon}\n  </div>\n);\n\nconst HealthItem: React.FC<HealthItemProps> = React.memo(\n  ({ className, state, title, details, popupTitle, noIcon = false, children }) => {\n    const detailMessage =\n      details || (healthStateMapping[state] || healthStateMapping[HealthState.UNKNOWN]).message;\n    return (\n      <div className={classNames('co-status-card__health-item', className)}>\n        {state === HealthState.LOADING ? (\n          <div className=\"skeleton-health\" />\n        ) : (\n          !noIcon && <HealthItemIcon state={state} />\n        )}\n        <div>\n          <span className=\"co-dashboard-text--small co-status-card__health-item-text\">\n            {React.Children.toArray(children).length && state !== HealthState.LOADING ? (\n              <DashboardCardPopupLink\n                linkTitle={title}\n                popupTitle={popupTitle}\n                className=\"co-status-card__popup\"\n              >\n                {children}\n              </DashboardCardPopupLink>\n            ) : (\n              title\n            )}\n          </span>\n          {state !== HealthState.LOADING && detailMessage && (\n            <div className=\"co-dashboard-text--small co-status-card__health-item-text co-status-card__health-item-subtitle\">\n              {detailMessage}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n\nexport default HealthItem;\n\ntype HealthItemProps = {\n  title: string;\n  className?: string;\n  details?: string;\n  state?: HealthState;\n  popupTitle?: string;\n  noIcon?: boolean;\n};\n\ntype HealthItemIconProps = {\n  state?: HealthState;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAGA;AAGA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AAQA;AAIA;AAEA;;;;;;;;;;;;;ACtGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAKA;AAEA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAEA;AAGA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AAIA;AAEA;AACA;AACA;AAaA;AAEA;;;;;;;;;;;;;AC3DA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAEA;AAKA;AACA;AAQA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAMA;AAEA;AAEA;AAEA;AAKA;AACA;AAaA;AAQA;AAGA;;;;;A","sourceRoot":""}