{"version":3,"file":"knative-routes-page-b9f39f3f9c97bd090fb1.js","sources":["webpack:///./packages/knative-plugin/src/components/routes/RouteHeader.tsx","webpack:///./packages/knative-plugin/src/components/routes/RouteList.tsx","webpack:///./packages/knative-plugin/src/components/routes/RouteRow.tsx","webpack:///./packages/knative-plugin/src/components/routes/RoutesPage.tsx","webpack:///./packages/knative-plugin/src/components/routes/route-table.ts","webpack:///./packages/knative-plugin/src/utils/condition-utils.ts"],"sourcesContent":["import { sortable } from '@patternfly/react-table';\nimport { tableColumnClasses } from './route-table';\n\nconst RouteHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'URL',\n      sortField: 'status.url',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Created',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Conditions',\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: 'Traffic',\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[6] },\n    },\n  ];\n};\n\nexport default RouteHeader;\n","import * as React from 'react';\nimport { Table, TableProps } from '@console/internal/components/factory';\nimport { RouteModel } from '../../models';\nimport RouteHeader from './RouteHeader';\nimport RouteRow from './RouteRow';\n\nconst RouteList: React.FC<TableProps> = (props) => (\n  <Table\n    {...props}\n    aria-label={RouteModel.labelPlural}\n    Header={RouteHeader}\n    Row={RouteRow}\n    virtualize\n  />\n);\n\nexport default RouteList;\n","import * as React from 'react';\nimport * as cx from 'classnames';\nimport { TableRow, TableData, RowFunction } from '@console/internal/components/factory';\nimport {\n  Kebab,\n  ResourceLink,\n  ResourceKebab,\n  Timestamp,\n  ExternalLink,\n} from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { RevisionModel, RouteModel } from '../../models';\nimport { getConditionString } from '../../utils/condition-utils';\nimport { RouteKind } from '../../types';\nimport { tableColumnClasses } from './route-table';\n\nconst routeReference = referenceForModel(RouteModel);\nconst revisionReference = referenceForModel(RevisionModel);\n\nconst RouteRow: RowFunction<RouteKind> = ({ obj, index, key, style }) => (\n  <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n    <TableData className={tableColumnClasses[0]}>\n      <ResourceLink\n        kind={routeReference}\n        name={obj.metadata.name}\n        namespace={obj.metadata.namespace}\n        title={obj.metadata.uid}\n      />\n    </TableData>\n    <TableData className={cx(tableColumnClasses[1], 'co-break-word')}>\n      <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n    </TableData>\n    <TableData className={tableColumnClasses[2]}>\n      {(obj.status && obj.status.url && (\n        <ExternalLink href={obj.status.url} text={obj.status.url} />\n      )) ||\n        '-'}\n    </TableData>\n    <TableData className={tableColumnClasses[3]}>\n      <Timestamp timestamp={obj.metadata.creationTimestamp} />\n    </TableData>\n    <TableData className={tableColumnClasses[4]}>\n      {obj.status ? getConditionString(obj.status.conditions) : '-'}\n    </TableData>\n    <TableData className={tableColumnClasses[5]}>\n      {obj.status && obj.status.traffic\n        ? obj.status.traffic.map((t, i) => (\n            <React.Fragment key={t.revisionName}>\n              {i > 0 ? ', ' : ''}\n              {`${t.percent}% â†’ `}\n              <ResourceLink\n                namespace={obj.metadata.namespace}\n                kind={revisionReference}\n                name={t.revisionName}\n                inline\n                hideIcon\n              />\n            </React.Fragment>\n          ))\n        : '-'}\n    </TableData>\n    <TableData className={tableColumnClasses[6]}>\n      <ResourceKebab actions={Kebab.factory.common} kind={routeReference} resource={obj} />\n    </TableData>\n  </TableRow>\n);\n\nexport default RouteRow;\n","import * as React from 'react';\nimport { ListPage } from '@console/internal/components/factory';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { RouteModel } from '../../models';\nimport RouteList from './RouteList';\n\nconst RoutesPage: React.FC<React.ComponentProps<typeof ListPage>> = (props) => (\n  <ListPage\n    {...props}\n    canCreate={false}\n    kind={referenceForModel(RouteModel)}\n    ListComponent={RouteList}\n  />\n);\n\nexport default RoutesPage;\n","import { Kebab } from '@console/internal/components/utils';\n\nexport const tableColumnClasses = [\n  'col-lg-2 col-md-2 col-sm-4 col-xs-6',\n  'col-lg-2 col-md-2 col-sm-4 col-xs-6',\n  'col-lg-3 col-md-2 col-sm-4 hidden-xs',\n  'col-lg-2 col-md-2 hidden-sm hidden-xs',\n  'col-lg-1 col-md-2 hidden-sm hidden-xs',\n  'col-lg-2 col-md-2 hidden-sm hidden-xs',\n  Kebab.columnClass,\n];\n","import * as _ from 'lodash';\nimport { K8sResourceCondition, K8sResourceConditionStatus } from '@console/internal/module/k8s';\n\nexport const getConditionOKCount = (conditions: K8sResourceCondition[]): number =>\n  _.sumBy<any>(conditions, (c) => Number(c.status === K8sResourceConditionStatus.True));\n\nexport const getConditionString = (conditions: K8sResourceCondition[]): string =>\n  `${getConditionOKCount(conditions)} OK / ${_.size(conditions)}`;\n\nexport const getCondition = (\n  conditions: K8sResourceCondition[],\n  type: K8sResourceCondition['type'],\n): K8sResourceCondition | undefined => _.find(conditions, (c) => c.type === type);\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAUA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAOA;AACA;AAEA;AAIA;AAEA;AACA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AASA;AAEA;AACA;AAKA;;;;;;;;;;;;;ACnEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AASA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AAGA;;;;;A","sourceRoot":""}