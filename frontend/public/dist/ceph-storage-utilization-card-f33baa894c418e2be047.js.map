{"version":3,"file":"ceph-storage-utilization-card-f33baa894c418e2be047.js","sources":["webpack:///./packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/utilization-card/utilization-card.tsx","webpack:///./packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/utilization-card/utils.tsx"],"sourcesContent":["import * as React from 'react';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport { Dropdown } from '@console/internal/components/utils/dropdown';\nimport {\n  humanizeBinaryBytes,\n  humanizeDecimalBytesPerSec,\n} from '@console/internal/components/utils';\nimport UtilizationBody from '@console/shared/src/components/dashboard/utilization-card/UtilizationBody';\nimport { ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\nimport ConsumerPopover from '@console/shared/src/components/dashboard/utilization-card/TopConsumerPopover';\nimport { PrometheusUtilizationItem } from '@console/internal/components/dashboard/dashboards-page/cluster-dashboard/utilization-card';\nimport {\n  useMetricDuration,\n  Duration,\n} from '@console/shared/src/components/dashboard/duration-hook';\nimport {\n  StorageDashboardQuery,\n  UTILIZATION_QUERY,\n  utilizationPopoverQueryMap,\n} from '../../../../constants/queries';\nimport { humanizeIOPS, humanizeLatency } from './utils';\n\nconst UtilizationCard: React.FC = () => {\n  const [duration, setDuration] = useMetricDuration();\n  const [timestamps, setTimestamps] = React.useState<Date[]>();\n\n  const storagePopover = React.useCallback(\n    ({ current }) => (\n      <ConsumerPopover\n        title=\"Used Capacity\"\n        current={current}\n        consumers={utilizationPopoverQueryMap}\n        humanize={humanizeBinaryBytes}\n      />\n    ),\n    [],\n  );\n\n  return (\n    <DashboardCard>\n      <DashboardCardHeader>\n        <DashboardCardTitle>Utilization</DashboardCardTitle>\n        <Dropdown items={Duration} onChange={setDuration} selectedKey={duration} title={duration} />\n      </DashboardCardHeader>\n      <UtilizationBody timestamps={timestamps}>\n        <PrometheusUtilizationItem\n          title=\"Used Capacity\"\n          utilizationQuery={UTILIZATION_QUERY[StorageDashboardQuery.CEPH_CAPACITY_USED]}\n          duration={duration}\n          humanizeValue={humanizeBinaryBytes}\n          byteDataType={ByteDataTypes.BinaryBytes}\n          setTimestamps={setTimestamps}\n          TopConsumerPopover={storagePopover}\n        />\n        <PrometheusUtilizationItem\n          title=\"IOPS\"\n          utilizationQuery={UTILIZATION_QUERY[StorageDashboardQuery.UTILIZATION_IOPS_QUERY]}\n          duration={duration}\n          humanizeValue={humanizeIOPS}\n        />\n        <PrometheusUtilizationItem\n          title=\"Latency\"\n          utilizationQuery={UTILIZATION_QUERY[StorageDashboardQuery.UTILIZATION_LATENCY_QUERY]}\n          duration={duration}\n          humanizeValue={humanizeLatency}\n        />\n        <PrometheusUtilizationItem\n          title=\"Throughput\"\n          utilizationQuery={UTILIZATION_QUERY[StorageDashboardQuery.UTILIZATION_THROUGHPUT_QUERY]}\n          duration={duration}\n          humanizeValue={humanizeDecimalBytesPerSec}\n        />\n        <PrometheusUtilizationItem\n          title=\"Recovery\"\n          utilizationQuery={\n            UTILIZATION_QUERY[StorageDashboardQuery.UTILIZATION_RECOVERY_RATE_QUERY]\n          }\n          duration={duration}\n          humanizeValue={humanizeDecimalBytesPerSec}\n        />\n      </UtilizationBody>\n    </DashboardCard>\n  );\n};\n\nexport default UtilizationCard;\n","import * as _ from 'lodash';\nimport { DataPoint } from '@console/internal/components/graphs';\nimport {\n  Humanize,\n  humanizeNumber,\n  humanizeSeconds,\n  secondsToNanoSeconds,\n} from '@console/internal/components/utils';\n\nexport const humanizeIOPS: Humanize = (value) => {\n  const humanizedNumber = humanizeNumber(value);\n  const unit = 'IOPS';\n  return {\n    ...humanizedNumber,\n    string: `${humanizedNumber.value} ${unit}`,\n    unit,\n  };\n};\n\nexport const humanizeLatency: Humanize = (value) => {\n  const humanizedTime = humanizeSeconds(secondsToNanoSeconds(value), null, 'ms');\n  return humanizedTime;\n};\n\nexport const getLatestValue = (stats: DataPoint[]) => Number(_.get(stats[stats.length - 1], 'y'));\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAIA;AAKA;AAEA;AACA;AACA;AAEA;AAYA;AAEA;AACA;AACA;AAEA;AACA;AASA;AAMA;AAMA;AAMA;AAWA;AAEA;;;;;;;;;;;;;ACvFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAOA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AAEA;;;;;A","sourceRoot":""}