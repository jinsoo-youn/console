{"version":3,"file":"create-route-82914d73dba4fb95b19c.js","sources":["webpack:///./public/components/routes/create-route.tsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Alert, ActionGroup, Button } from '@patternfly/react-core';\nimport { PlusCircleIcon, MinusCircleIcon } from '@patternfly/react-icons';\n\nimport { ButtonBar, Dropdown, history, resourcePathFromModel, ResourceName } from '../utils';\nimport { k8sCreate, k8sList, K8sResourceKind } from '../../module/k8s';\nimport { getActiveNamespace } from '../../actions/ui';\nimport { ServiceModel, RouteModel } from '../../models';\nimport { AsyncComponent } from '../utils/async';\n\nconst UNNAMED_PORT_KEY = '#unnamed';\nconst MAX_ALT_SERVICE_TARGET = 3;\n\nconst getPortOptions = (service: K8sResourceKind) => {\n  if (!service) {\n    return {};\n  }\n\n  const ports = _.get(service, 'spec.ports', []);\n  const portOptions = ports.reduce(\n    (acc, { name = UNNAMED_PORT_KEY, port, targetPort, protocol }) => {\n      acc[name] = (\n        <>\n          {port} &rarr; {targetPort} ({protocol})\n        </>\n      );\n      return acc;\n    },\n    {},\n  );\n\n  return portOptions;\n};\n\nconst DroppableFileInput = (props) => (\n  <AsyncComponent\n    loader={() => import('../utils/file-input').then((c) => c.DroppableFileInput)}\n    {...props}\n  />\n);\n\nexport class CreateRoute extends React.Component<{}, CreateRouteState> {\n  state = {\n    name: '',\n    hostname: '',\n    path: '',\n    service: null,\n    weight: 100,\n    targetPort: '',\n    termination: '',\n    insecureEdgeTerminationPolicy: '',\n    certificate: '',\n    key: '',\n    caCertificate: '',\n    destinationCACertificate: '',\n    secure: false,\n    loaded: false,\n    inProgress: false,\n    error: '',\n    namespace: getActiveNamespace(),\n    services: [],\n    labels: {},\n    portOptions: {},\n    alternateServices: [],\n  };\n\n  componentDidMount() {\n    k8sList(ServiceModel, { ns: this.state.namespace })\n      .then((services) =>\n        this.setState({\n          services,\n          loaded: true,\n        }),\n      )\n      .catch((err) =>\n        this.setState({\n          error: err.message,\n        }),\n      );\n  }\n\n  handleChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState({\n      [name]: value,\n    } as any);\n  };\n\n  handleWeightChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    const { value } = event.currentTarget;\n    this.setState({\n      weight: _.toInteger(value),\n    });\n  };\n\n  changeService = (serviceName: string) => {\n    const service = _.find(this.state.services, { metadata: { name: serviceName } });\n    const portOptions = getPortOptions(service);\n    this.setState({\n      service,\n      portOptions,\n      // unset targetPort if previously set\n      targetPort: '',\n    });\n  };\n\n  changeTargetPort = (targetPort: string) =>\n    this.setState({\n      targetPort,\n    });\n\n  toggleSection: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    const { name, checked } = event.currentTarget;\n    this.setState({\n      [name]: checked,\n    } as any);\n  };\n\n  changeTermination = (termination: string) => {\n    const newState: any = {\n      termination,\n      // unset insecureEdgeTerminationPolicy if it was set\n      insecureEdgeTerminationPolicy: '',\n    };\n    switch (termination) {\n      case 'edge':\n        // unset tls data if it was set\n        newState.destinationCACertificate = '';\n        break;\n      case 'passthrough':\n        Object.assign(newState, {\n          // unset tls data if it was set\n          certificate: '',\n          key: '',\n          caCertificate: '',\n          destinationCACertificate: '',\n        });\n        break;\n      default:\n    }\n    this.setState(newState);\n  };\n\n  changeInsecureTraffic = (insecureEdgeTerminationPolicy: string) =>\n    this.setState({ insecureEdgeTerminationPolicy });\n\n  onCertificateChange = (certificate: string) => this.setState({ certificate });\n\n  onPrivateKeyChange = (key: string) => this.setState({ key });\n\n  onCaCertificateChange = (caCertificate: string) => this.setState({ caCertificate });\n\n  onDestinationCACertificateChange = (destinationCACertificate: string) =>\n    this.setState({ destinationCACertificate });\n\n  save = (event) => {\n    event.preventDefault();\n\n    const {\n      name,\n      hostname,\n      path,\n      service,\n      weight,\n      targetPort: selectedPort,\n      termination,\n      insecureEdgeTerminationPolicy,\n      certificate,\n      key,\n      caCertificate,\n      destinationCACertificate,\n      secure,\n      namespace,\n      alternateServices,\n    } = this.state;\n\n    const tls = secure\n      ? {\n          termination,\n          insecureEdgeTerminationPolicy,\n          certificate,\n          key,\n          caCertificate,\n          destinationCACertificate,\n        }\n      : null;\n\n    const serviceName = _.get(service, 'metadata.name');\n    const labels = _.get(service, 'metadata.labels');\n\n    // If the port is unnamed, there is only one port. Use the port number.\n    const targetPort =\n      selectedPort === UNNAMED_PORT_KEY\n        ? _.get(service, 'spec.ports[0].targetPort') || _.get(service, 'spec.ports[0].port')\n        : selectedPort;\n\n    const alternateBackends = _.filter(alternateServices, 'name').map(\n      (serviceData: AlternateServiceEntryType) => {\n        return {\n          weight: serviceData.weight,\n          kind: 'Service',\n          name: serviceData.name,\n        };\n      },\n    );\n\n    const route: K8sResourceKind = {\n      kind: 'Route',\n      apiVersion: 'route.openshift.io/v1',\n      metadata: {\n        name,\n        namespace,\n        labels,\n      },\n      spec: {\n        to: {\n          kind: 'Service',\n          name: serviceName,\n          weight,\n        },\n        tls,\n        host: hostname,\n        path,\n        port: {\n          targetPort,\n        },\n      },\n    };\n\n    if (!_.isEmpty(alternateBackends)) {\n      route.spec.alternateBackends = alternateBackends;\n    }\n\n    this.setState({ inProgress: true });\n    k8sCreate(RouteModel, route).then(\n      () => {\n        this.setState({ inProgress: false });\n        history.push(resourcePathFromModel(RouteModel, name, namespace));\n      },\n      (err) =>\n        this.setState({\n          error: err.message,\n          inProgress: false,\n        }),\n    );\n  };\n\n  addAltServiceEntry = () => {\n    this.setState(({ alternateServices }) => {\n      return {\n        alternateServices: [\n          ...alternateServices,\n          { name: null, weight: 100, key: _.uniqueId('alternate-backend-') },\n        ],\n      };\n    });\n  };\n\n  removeAltServiceEntry(alternateServiceIndex: number) {\n    this.setState(({ alternateServices }) => {\n      const updatedServiceEntriesArray: AlternateServiceEntryType[] = [...alternateServices];\n      updatedServiceEntriesArray.splice(alternateServiceIndex, 1);\n      return {\n        alternateServices: updatedServiceEntriesArray,\n      };\n    });\n  }\n\n  onDataChanged = (updatedEntry: AlternateServiceEntryGroupData, index: number) => {\n    this.setState(({ alternateServices }) => {\n      const updatedServiceEntriesArray: AlternateServiceEntryType[] = [...alternateServices];\n      const updatedEntryData: AlternateServiceEntryType = {\n        key: updatedServiceEntriesArray[index].key,\n        weight: updatedEntry.weight,\n        name: updatedEntry.name,\n      };\n      updatedServiceEntriesArray[index] = updatedEntryData;\n      return {\n        alternateServices: updatedServiceEntriesArray,\n      };\n    });\n  };\n\n  render() {\n    const title = 'Create Route';\n    const {\n      loaded,\n      services,\n      service,\n      portOptions,\n      targetPort,\n      termination,\n      alternateServices,\n    } = this.state;\n    const serviceOptions = {};\n    _.each(\n      _.sortBy(services, 'metadata.name'),\n      ({ metadata: { name } }) =>\n        (serviceOptions[name] = <ResourceName kind=\"Service\" name={name} />),\n    );\n    const configuredServices = new Set<string>();\n    if (service) {\n      configuredServices.add(service.metadata.name);\n    }\n    _.each(alternateServices, ({ name }) => configuredServices.add(name));\n    const availableServiceOptions = _.pickBy(\n      serviceOptions,\n      (item, key) => !configuredServices.has(key),\n    );\n    const terminationTypes = {\n      edge: 'Edge',\n      passthrough: 'Passthrough',\n      reencrypt: 'Re-encrypt',\n    };\n    const insecureTrafficTypes = {\n      None: 'None',\n      Allow: 'Allow',\n      Redirect: 'Redirect',\n    };\n    const passthroughInsecureTrafficTypes = {\n      None: 'None',\n      Redirect: 'Redirect',\n    };\n    const alternateServicesList = _.map(alternateServices, (entryData, index) => {\n      return (\n        <div className=\"co-add-remove-form__entry\" key={entryData.key}>\n          {!_.isEmpty(alternateServices) && (\n            <div className=\"co-add-remove-form__link--remove-entry\">\n              <Button\n                type=\"button\"\n                onClick={() => this.removeAltServiceEntry(index)}\n                variant=\"link\"\n                isInline\n              >\n                <MinusCircleIcon className=\"co-icon-space-r\" />\n                Remove Alternate Service\n              </Button>\n            </div>\n          )}\n          <AlternateServicesGroup\n            index={index}\n            name={entryData.name}\n            weight={entryData.weight}\n            onChange={this.onDataChanged}\n            serviceOptions={serviceOptions}\n            availableServiceOptions={availableServiceOptions}\n          />\n        </div>\n      );\n    });\n\n    return (\n      <>\n        <div className=\"co-m-pane__body co-m-pane__form\">\n          <h1 className=\"co-m-pane__heading co-m-pane__heading--baseline\">\n            <div className=\"co-m-pane__name\">{title}</div>\n            <div className=\"co-m-pane__heading-link\">\n              <Link to={`/k8s/ns/${this.state.namespace}/routes/~new`} id=\"yaml-link\" replace>\n                Edit YAML\n              </Link>\n            </div>\n          </h1>\n          <p className=\"co-m-pane__explanation\">\n            Routing is a way to make your application publicly visible.\n          </p>\n          <form onSubmit={this.save} className=\"co-create-route\">\n            <div className=\"form-group co-create-route__name\">\n              <label className=\"co-required\" htmlFor=\"name\">\n                Name\n              </label>\n              <input\n                className=\"pf-c-form-control\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.name}\n                placeholder=\"my-route\"\n                id=\"name\"\n                name=\"name\"\n                aria-describedby=\"name-help\"\n                required\n              />\n              <div className=\"help-block\" id=\"name-help\">\n                <p>A unique name for the route within the project.</p>\n              </div>\n            </div>\n            <div className=\"form-group co-create-route__hostname\">\n              <label htmlFor=\"hostname\">Hostname</label>\n              <input\n                className=\"pf-c-form-control\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.hostname}\n                placeholder=\"www.example.com\"\n                id=\"hostname\"\n                name=\"hostname\"\n                aria-describedby=\"hostname-help\"\n              />\n              <div className=\"help-block\" id=\"hostname-help\">\n                <p>Public hostname for the route. If not specified, a hostname is generated.</p>\n              </div>\n            </div>\n            <div className=\"form-group co-create-route__path\">\n              <label htmlFor=\"path\">Path</label>\n              <input\n                className=\"pf-c-form-control\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.path}\n                placeholder=\"/\"\n                id=\"path\"\n                name=\"path\"\n                aria-describedby=\"path-help\"\n              />\n              <div className=\"help-block\" id=\"path-help\">\n                <p>Path that the router watches to route traffic to the service.</p>\n              </div>\n            </div>\n            <div className=\"form-group co-create-route__service\">\n              <label className=\"co-required\" htmlFor=\"service\">\n                Service\n              </label>\n              {loaded && _.isEmpty(serviceOptions) && (\n                <Alert\n                  isInline\n                  className=\"co-alert co-create-route__alert\"\n                  variant=\"info\"\n                  title=\"No services\"\n                >\n                  There are no services in your project to expose with a route.\n                </Alert>\n              )}\n              {loaded && !_.isEmpty(serviceOptions) && (\n                <Dropdown\n                  items={availableServiceOptions}\n                  title={service ? serviceOptions[service.metadata.name] : 'Select a service'}\n                  dropDownClassName=\"dropdown--full-width\"\n                  id=\"service\"\n                  onChange={this.changeService}\n                  describedBy=\"service-help\"\n                />\n              )}\n              <div className=\"help-block\" id=\"service-help\">\n                <p>Service to route to.</p>\n              </div>\n            </div>\n            {alternateServicesList.length > 0 && (\n              <>\n                <div className=\"form-group co-create-route__weight\">\n                  <label htmlFor=\"weight\">Weight</label>\n                  <input\n                    className=\"pf-c-form-control co-create-route__weight-label\"\n                    type=\"number\"\n                    onChange={this.handleWeightChange}\n                    value={this.state.weight}\n                    id=\"weight\"\n                    aria-describedby=\"weight-help\"\n                  />\n                  <div className=\"help-block\" id=\"weight-help\">\n                    <p>\n                      A number between 0 and 255 that depicts relative weight compared with other\n                      targets.\n                    </p>\n                  </div>\n                </div>\n                {alternateServicesList}\n              </>\n            )}\n            {alternateServicesList.length < MAX_ALT_SERVICE_TARGET &&\n              alternateServicesList.length + 1 < _.keys(serviceOptions).length &&\n              service && (\n                <Button\n                  className=\"pf-m-link--align-left co-create-route__add-service-btn\"\n                  onClick={this.addAltServiceEntry}\n                  type=\"button\"\n                  variant=\"link\"\n                  isInline\n                >\n                  <PlusCircleIcon className=\"co-icon-space-r\" />\n                  Add Alternate Service\n                </Button>\n              )}\n            <div className=\"form-group co-create-route__target-port\">\n              <label className=\"co-required\" htmlFor=\"target-port\">\n                Target Port\n              </label>\n              {_.isEmpty(portOptions) && <p>Select a service above</p>}\n              {!_.isEmpty(portOptions) && (\n                <Dropdown\n                  items={portOptions}\n                  title={portOptions[targetPort] || 'Select target port'}\n                  dropDownClassName=\"dropdown--full-width\"\n                  id=\"target-port\"\n                  onChange={this.changeTargetPort}\n                  describedBy=\"target-port-help\"\n                />\n              )}\n              <div className=\"help-block\" id=\"target-port-help\">\n                <p>Target port for traffic.</p>\n              </div>\n            </div>\n            <div className=\"form-group co-create-route__security\">\n              <label className=\"control-label\">Security</label>\n              <div className=\"checkbox\">\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    onChange={this.toggleSection}\n                    checked={this.state.secure}\n                    id=\"secure\"\n                    name=\"secure\"\n                    aria-describedby=\"secure-help\"\n                  />\n                  Secure route\n                </label>\n                <div className=\"help-block\" id=\"secure-help\">\n                  <p>\n                    Routes can be secured using several TLS termination types for serving\n                    certificates.\n                  </p>\n                </div>\n              </div>\n              {this.state.secure && (\n                <div className=\"co-create-route__security\">\n                  <div className=\"form-group co-create-route__tls-termination\">\n                    <label className=\"co-required\" htmlFor=\"tls-termination\">\n                      TLS Termination\n                    </label>\n                    <Dropdown\n                      items={terminationTypes}\n                      title=\"Select termination type\"\n                      dropDownClassName=\"dropdown--full-width\"\n                      id=\"tls-termination\"\n                      onChange={this.changeTermination}\n                    />\n                  </div>\n                  <div className=\"form-group co-create-route__insecure-traffic\">\n                    <label htmlFor=\"insecure-traffic\">Insecure Traffic</label>\n                    <Dropdown\n                      items={\n                        termination === 'passthrough'\n                          ? passthroughInsecureTrafficTypes\n                          : insecureTrafficTypes\n                      }\n                      title=\"Select insecure traffic type\"\n                      dropDownClassName=\"dropdown--full-width\"\n                      id=\"insecure-traffic\"\n                      onChange={this.changeInsecureTraffic}\n                      describedBy=\"insecure-traffic-help\"\n                    />\n                    <div className=\"help-block\" id=\"insecure-traffic-help\">\n                      <p>Policy for traffic on insecure schemes like HTTP.</p>\n                    </div>\n                  </div>\n                  {termination && termination !== 'passthrough' && (\n                    <>\n                      <h2 className=\"h3\">Certificates</h2>\n                      <div className=\"help-block\">\n                        <p>\n                          TLS certificates for edge and re-encrypt termination. If not specified,\n                          the router&apos;s default certificate is used.\n                        </p>\n                      </div>\n                      <div className=\"form-group co-create-route__certificate\">\n                        <DroppableFileInput\n                          onChange={this.onCertificateChange}\n                          inputFileData={this.state.certificate}\n                          id=\"certificate\"\n                          label=\"Certificate\"\n                          inputFieldHelpText=\"The PEM format certificate. Upload file by dragging &amp; dropping, selecting it, or pasting from the clipboard.\"\n                        />\n                      </div>\n                      <div className=\"form-group co-create-route__private-key\">\n                        <DroppableFileInput\n                          onChange={this.onPrivateKeyChange}\n                          inputFileData={this.state.key}\n                          id=\"private-key\"\n                          label=\"Private Key\"\n                          inputFieldHelpText=\"The PEM format key. Upload file by dragging &amp; dropping, selecting it, or pasting from the clipboard.\"\n                        />\n                      </div>\n                      <div className=\"form-group co-create-route__caCertificate\">\n                        <DroppableFileInput\n                          onChange={this.onCaCertificateChange}\n                          inputFileData={this.state.caCertificate}\n                          id=\"ca-certificate\"\n                          label=\"CA Certificate\"\n                          inputFieldHelpText=\"The PEM format CA certificate chain. Upload file by dragging &amp; dropping, selecting it, or pasting from the clipboard.\"\n                        />\n                      </div>\n                      {termination === 'reencrypt' && (\n                        <div className=\"form-group co-create-route__destinationCaCertificate\">\n                          <DroppableFileInput\n                            onChange={this.onDestinationCACertificateChange}\n                            inputFileData={this.state.destinationCACertificate}\n                            id=\"destination-ca-certificate\"\n                            label=\"Destination CA Certificate\"\n                          />\n                        </div>\n                      )}\n                    </>\n                  )}\n                </div>\n              )}\n              <ButtonBar errorMessage={this.state.error} inProgress={this.state.inProgress}>\n                <ActionGroup className=\"pf-c-form\">\n                  <Button\n                    type=\"submit\"\n                    isDisabled={\n                      !this.state.name ||\n                      !this.state.service ||\n                      !this.state.targetPort ||\n                      (this.state.secure && !this.state.termination)\n                    }\n                    id=\"save-changes\"\n                    variant=\"primary\"\n                  >\n                    Create\n                  </Button>\n                  <Button onClick={history.goBack} id=\"cancel\" variant=\"secondary\">\n                    Cancel\n                  </Button>\n                </ActionGroup>\n              </ButtonBar>\n            </div>\n          </form>\n        </div>\n      </>\n    );\n  }\n}\n\nexport const AlternateServicesGroup: React.FC<AlternateServiceEntryGroupProps> = (props) => {\n  const [weight, setWeight] = React.useState(props.weight);\n  const [name, setName] = React.useState(props.name);\n\n  const onWeightChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    setWeight(_.toInteger(event.currentTarget.value));\n  };\n\n  const onServiceChange = (serviceName: string) => {\n    setName(serviceName);\n  };\n\n  const { serviceOptions, availableServiceOptions, index, onChange } = props;\n\n  React.useEffect(() => {\n    onChange({ name, weight }, index);\n  }, [name, weight, index, onChange]);\n\n  return (\n    <>\n      <div className=\"form-group\">\n        <label htmlFor={`${index}-alt-service`}>Alternate Service Target</label>\n        <Dropdown\n          items={availableServiceOptions}\n          title={name ? serviceOptions[name] : 'Select a service'}\n          dropDownClassName=\"dropdown--full-width\"\n          id={`${index}-alt-service`}\n          onChange={onServiceChange}\n          describedby={`${index}-alt-service-help`}\n        />\n        <div className=\"help-block\" id={`${index}-alt-service-help`}>\n          <p>Alternate service to route to.</p>\n        </div>\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor={`${index}-weight`}>Alternate Service Weight</label>\n        <input\n          className=\"pf-c-form-control co-create-route__weight-label\"\n          id={`${index}-weight`}\n          type=\"number\"\n          onChange={onWeightChange}\n          value={weight}\n          aria-describedby={`${index}-alt-weight-help`}\n        />\n        <div className=\"help-block\" id={`${index}-alt-weight-help`}>\n          <p>\n            A number between 0 and 255 that depicts relative weight compared with other targets.\n          </p>\n        </div>\n      </div>\n    </>\n  );\n};\n\ntype AlternateServiceEntryType = {\n  name: string;\n  weight: number;\n  key: string;\n};\n\ntype AlternateServiceEntryGroupData = {\n  weight: number;\n  name: string;\n};\n\ntype AlternateServiceEntryGroupProps = {\n  name: string;\n  weight: number;\n  index: number;\n  onChange: Function;\n  serviceOptions: any;\n  availableServiceOptions: any;\n};\n\nexport type CreateRouteState = {\n  name: string;\n  hostname: string;\n  path: string;\n  service: K8sResourceKind;\n  weight: number;\n  targetPort: string;\n  termination: string;\n  insecureEdgeTerminationPolicy: string;\n  certificate: string;\n  key: string;\n  caCertificate: string;\n  destinationCACertificate: string;\n  secure: boolean;\n  loaded: boolean;\n  inProgress: boolean;\n  error: string;\n  namespace: string;\n  services: K8sResourceKind[];\n  labels: object;\n  portOptions: any;\n  alternateServices: AlternateServiceEntryType[];\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;;AAAA;;AAAA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AAOA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAEA;AAEA;AAGA;AACA;AAEA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA4VA;AAnjBA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAmLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AACA;AACA;AASA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAMA;AAEA;AAGA;AAUA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAKA;AAGA;AACA;AACA;AAGA;AAWA;AACA;AAGA;AACA;AACA;AAUA;AACA;AAGA;AACA;AACA;AAUA;AACA;AAGA;AACA;AAGA;AAUA;AAUA;AACA;AAGA;AAEA;AACA;AACA;AAQA;AACA;AAMA;AAGA;AACA;AACA;AAQA;AAEA;AAEA;AACA;AAGA;AACA;AAUA;AACA;AAGA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AAMA;AAEA;AACA;AAGA;AAQA;AACA;AACA;AAGA;AACA;AAQA;AACA;AAGA;AAEA;AACA;AACA;AAKA;AACA;AAQA;AACA;AAQA;AACA;AAQA;AAEA;AAYA;AACA;AACA;AAIA;AACA;AACA;AAOA;AAUA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAQA;AACA;AAGA;AACA;AACA;AAQA;AACA;AAOA;;;;;A","sourceRoot":""}