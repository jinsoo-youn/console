{"version":3,"file":"oauth-17aeb2d13f24095edba1.js","sources":["webpack:///./public/components/cluster-settings/oauth.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\n\nimport { OAuthModel } from '../../models';\nimport { IdentityProvider, OAuthKind, referenceForModel } from '../../module/k8s';\nimport { DetailsPage } from '../factory';\nimport {\n  Dropdown,\n  EmptyBox,\n  Kebab,\n  ResourceSummary,\n  SectionHeading,\n  history,\n  navFactory,\n} from '../utils';\nimport { formatDuration } from '../utils/datetime';\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(OAuthModel), ...common];\n\nconst oAuthReference = referenceForModel(OAuthModel);\n\n// Convert to ms for formatDuration\nconst tokenDuration = (seconds: number) =>\n  _.isNil(seconds) ? '-' : formatDuration(seconds * 1000);\n\nconst IdentityProviders: React.SFC<IdentityProvidersProps> = ({ identityProviders }) => {\n  return _.isEmpty(identityProviders) ? (\n    <EmptyBox label=\"Identity Providers\" />\n  ) : (\n    <div className=\"co-table-container\">\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Type</th>\n            <th>Mapping Method</th>\n          </tr>\n        </thead>\n        <tbody>\n          {_.map(identityProviders, (idp) => (\n            <tr key={idp.name}>\n              <td data-test-idp-name={idp.name}>{idp.name}</td>\n              <td data-test-idp-type-for={idp.name}>{idp.type}</td>\n              <td data-test-idp-mapping-for={idp.name}>{idp.mappingMethod || 'claim'}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport const addIDPItems = Object.freeze({\n  basicauth: 'Basic Authentication',\n  github: 'GitHub',\n  gitlab: 'GitLab',\n  google: 'Google',\n  htpasswd: 'HTPasswd',\n  keystone: 'Keystone',\n  ldap: 'LDAP',\n  oidconnect: 'OpenID Connect',\n  requestheader: 'Request Header',\n});\n\nconst OAuthDetails: React.SFC<OAuthDetailsProps> = ({ obj }: { obj: OAuthKind }) => {\n  const { identityProviders, tokenConfig } = obj.spec;\n\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"OAuth Details\" />\n        <ResourceSummary resource={obj}>\n          {tokenConfig && (\n            <>\n              <dt>Access Token Max Age</dt>\n              <dd>{tokenDuration(tokenConfig.accessTokenMaxAgeSeconds)}</dd>\n            </>\n          )}\n        </ResourceSummary>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Identity Providers\" />\n        <p className=\"co-m-pane__explanation co-m-pane__explanation--alt\">\n          Identity providers determine how users log into the cluster.\n        </p>\n        <Dropdown\n          className=\"co-m-pane__dropdown\"\n          buttonClassName=\"pf-c-dropdown__toggle\"\n          title=\"Add\"\n          noSelection={true}\n          items={addIDPItems}\n          onChange={(name: string) => history.push(`/settings/idp/${name}`)}\n        />\n        <IdentityProviders identityProviders={identityProviders} />\n      </div>\n    </>\n  );\n};\n\nexport const OAuthDetailsPage: React.SFC<OAuthDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    kind={oAuthReference}\n    menuActions={menuActions}\n    pages={[navFactory.details(OAuthDetails), navFactory.editYaml()]}\n  />\n);\n\ntype IdentityProvidersProps = {\n  identityProviders: IdentityProvider[];\n};\n\ntype OAuthDetailsProps = {\n  obj: OAuthKind;\n};\n\ntype OAuthDetailsPageProps = {\n  match: any;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AASA;AAEA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAKA;AACA;AACA;AAGA;AAQA;AAIA;AAEA;;;;;A","sourceRoot":""}