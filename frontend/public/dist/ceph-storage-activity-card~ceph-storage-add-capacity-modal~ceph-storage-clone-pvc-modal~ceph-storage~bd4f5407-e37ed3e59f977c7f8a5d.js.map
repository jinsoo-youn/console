{"version":3,"file":"ceph-storage-activity-card~ceph-storage-add-capacity-modal~ceph-storage-clone-pvc-modal~ceph-storage~bd4f5407-e37ed3e59f977c7f8a5d.js","sources":["webpack:///./packages/ceph-storage-plugin/src/constants/queries.ts"],"sourcesContent":["import { ProjectModel, PodModel, StorageClassModel } from '@console/internal/models';\nimport { STORAGE_CLASSES, PROJECTS, PODS } from '.';\n\nexport enum StorageDashboardQuery {\n  CEPH_STATUS_QUERY = 'CEPH_STATUS_QUERY',\n  CEPH_PG_CLEAN_AND_ACTIVE_QUERY = 'CEPH_PG_CLEAN_AND_ACTIVE_QUERY',\n  CEPH_PG_TOTAL_QUERY = 'CEPH_PG_TOTAL_QUERY',\n  UTILIZATION_IOPS_QUERY = 'UTILIZATION_IOPS_QUERY',\n  UTILIZATION_LATENCY_QUERY = 'UTILIZATION_LATENCY_QUERY',\n  UTILIZATION_THROUGHPUT_QUERY = 'UTILIZATION_THROUGHPUT_QUERY',\n  UTILIZATION_RECOVERY_RATE_QUERY = 'UTILIZATION_RECOVERY_RATE_QUERY',\n  CEPH_CAPACITY_TOTAL = 'CAPACITY_TOTAL',\n  CEPH_CAPACITY_USED = 'CAPACITY_USED',\n  PODS_TOTAL_USED = 'PODS_TOTAL_USED',\n  PODS_BY_USED = 'PODS_BY_USED',\n  PROJECTS_TOTAL_USED = 'PROJECTS_TOTAL_USED',\n  PROJECTS_BY_USED = 'PROJECTS_BY_USED',\n  STORAGE_CLASSES_TOTAL_USED = 'STORAGE_CLASSES_TOTAL_USED',\n  STORAGE_CLASSES_BY_USED = 'STORAGE_CLASSES_BY_USED',\n  STORAGE_CEPH_CAPACITY_REQUESTED_QUERY = 'STORAGE_CEPH_CAPACITY_REQUESTED_QUERY',\n  STORAGE_CEPH_CAPACITY_USED_QUERY = 'STORAGE_CEPH_CAPACITY_USED_QUERY',\n  RESILIENCY_PROGRESS = 'RESILIENCY_PROGRESS',\n  NODES_BY_USED = 'NODES_BY_USED',\n  USED_CAPACITY = 'USED_CAPACITY',\n  REQUESTED_CAPACITY = 'REQUESTED_CAPACITY',\n  CEPH_CAPACITY_AVAILABLE = 'CEPH_CAPACITY_AVAILABLE',\n}\n\nexport const INDEPENDENT_UTILIZATION_QUERIES = {\n  [StorageDashboardQuery.REQUESTED_CAPACITY]:\n    'sum((kube_persistentvolumeclaim_resource_requests_storage_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"}))',\n  [StorageDashboardQuery.USED_CAPACITY]:\n    'sum((kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"}))',\n};\n\nexport const STORAGE_HEALTH_QUERIES = {\n  [StorageDashboardQuery.CEPH_STATUS_QUERY]: 'ceph_health_status',\n};\n\nexport const DATA_RESILIENCY_QUERY = {\n  [StorageDashboardQuery.RESILIENCY_PROGRESS]: '(ceph_pg_clean and ceph_pg_active)/ceph_pg_total',\n};\n\nexport const UTILIZATION_QUERY = {\n  [StorageDashboardQuery.CEPH_CAPACITY_USED]:\n    'sum(kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)\"}))',\n  [StorageDashboardQuery.UTILIZATION_IOPS_QUERY]:\n    '(sum(rate(ceph_pool_wr[1m])) + sum(rate(ceph_pool_rd[1m])))',\n  [StorageDashboardQuery.UTILIZATION_LATENCY_QUERY]:\n    '(quantile(.95,(cluster:ceph_disk_latency:join_ceph_node_disk_irate1m)))',\n  [StorageDashboardQuery.UTILIZATION_THROUGHPUT_QUERY]:\n    '(sum(rate(ceph_pool_wr_bytes[1m]) + rate(ceph_pool_rd_bytes[1m])))',\n  [StorageDashboardQuery.UTILIZATION_RECOVERY_RATE_QUERY]:\n    '(sum(ceph_pool_recovering_bytes_per_sec))',\n};\n\nexport const TOTAL_QUERY = {\n  [StorageDashboardQuery.CEPH_CAPACITY_TOTAL]: 'ceph_cluster_total_bytes',\n};\n\nexport const CAPACITY_USAGE_QUERIES = {\n  [StorageDashboardQuery.CEPH_CAPACITY_TOTAL]: 'ceph_cluster_total_bytes',\n  [StorageDashboardQuery.CEPH_CAPACITY_USED]: 'ceph_cluster_total_used_bytes',\n  [StorageDashboardQuery.STORAGE_CEPH_CAPACITY_REQUESTED_QUERY]:\n    'sum((kube_persistentvolumeclaim_resource_requests_storage_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"}))',\n  [StorageDashboardQuery.STORAGE_CEPH_CAPACITY_USED_QUERY]:\n    'sum((kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"}))',\n};\n\nexport const CAPACITY_BREAKDOWN_QUERIES = {\n  [StorageDashboardQuery.PROJECTS_TOTAL_USED]:\n    'sum(sum(kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"})) by (namespace))',\n  [StorageDashboardQuery.PROJECTS_BY_USED]:\n    'sum(kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"})) by (namespace)',\n  [StorageDashboardQuery.STORAGE_CLASSES_TOTAL_USED]:\n    'sum(sum(kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass) group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"})) by (storageclass, provisioner))',\n  [StorageDashboardQuery.STORAGE_CLASSES_BY_USED]:\n    'sum(kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass) group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"})) by (storageclass, provisioner)',\n  [StorageDashboardQuery.PODS_TOTAL_USED]:\n    'sum(sum((kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"})) by (pod,namespace))',\n  [StorageDashboardQuery.PODS_BY_USED]:\n    'sum((kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"})) by (pod,namespace)',\n  [StorageDashboardQuery.CEPH_CAPACITY_TOTAL]: 'ceph_cluster_total_bytes',\n  [StorageDashboardQuery.CEPH_CAPACITY_USED]:\n    'sum(kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)\"}))',\n  [StorageDashboardQuery.CEPH_CAPACITY_AVAILABLE]:\n    'max(ceph_pool_max_avail * on (pool_id) group_left(name)ceph_pool_metadata{name=~\"(.*file.*)|(.*block.*)\"})',\n};\n\nexport const breakdownQueryMap = {\n  [PROJECTS]: {\n    model: ProjectModel,\n    metric: 'namespace',\n    queries: {\n      [StorageDashboardQuery.PROJECTS_BY_USED]: `(topk(6,(${\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PROJECTS_BY_USED]\n      })))`,\n      [StorageDashboardQuery.PROJECTS_TOTAL_USED]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PROJECTS_TOTAL_USED],\n      [StorageDashboardQuery.CEPH_CAPACITY_AVAILABLE]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.CEPH_CAPACITY_AVAILABLE],\n      [StorageDashboardQuery.CEPH_CAPACITY_USED]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.CEPH_CAPACITY_USED],\n    },\n  },\n  [STORAGE_CLASSES]: {\n    model: StorageClassModel,\n    metric: 'storageclass',\n    queries: {\n      [StorageDashboardQuery.STORAGE_CLASSES_BY_USED]: `(topk(6,(${\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.STORAGE_CLASSES_BY_USED]\n      })))`,\n      [StorageDashboardQuery.STORAGE_CLASSES_TOTAL_USED]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.STORAGE_CLASSES_TOTAL_USED],\n      [StorageDashboardQuery.CEPH_CAPACITY_AVAILABLE]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.CEPH_CAPACITY_AVAILABLE],\n      [StorageDashboardQuery.CEPH_CAPACITY_USED]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.CEPH_CAPACITY_USED],\n    },\n  },\n  [PODS]: {\n    model: PodModel,\n    metric: 'pod',\n    queries: {\n      [StorageDashboardQuery.PODS_BY_USED]: `(topk(6,(${\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PODS_BY_USED]\n      })))`,\n      [StorageDashboardQuery.PODS_TOTAL_USED]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PODS_TOTAL_USED],\n      [StorageDashboardQuery.CEPH_CAPACITY_AVAILABLE]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.CEPH_CAPACITY_AVAILABLE],\n      [StorageDashboardQuery.CEPH_CAPACITY_USED]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.CEPH_CAPACITY_USED],\n    },\n  },\n};\n\nexport const breakdownIndependentQueryMap = {\n  [PROJECTS]: {\n    model: ProjectModel,\n    metric: 'namespace',\n    queries: {\n      [StorageDashboardQuery.PROJECTS_BY_USED]: `(topk(6,(${\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PROJECTS_BY_USED]\n      })))`,\n      [StorageDashboardQuery.PROJECTS_TOTAL_USED]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PROJECTS_TOTAL_USED],\n    },\n  },\n  [STORAGE_CLASSES]: {\n    model: StorageClassModel,\n    metric: 'storageclass',\n    queries: {\n      [StorageDashboardQuery.STORAGE_CLASSES_BY_USED]: `(topk(6,(${\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.STORAGE_CLASSES_BY_USED]\n      })))`,\n      [StorageDashboardQuery.STORAGE_CLASSES_TOTAL_USED]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.STORAGE_CLASSES_TOTAL_USED],\n    },\n  },\n  [PODS]: {\n    model: PodModel,\n    metric: 'pod',\n    queries: {\n      [StorageDashboardQuery.PODS_BY_USED]: `(topk(6,(${\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PODS_BY_USED]\n      })))`,\n      [StorageDashboardQuery.PODS_TOTAL_USED]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PODS_TOTAL_USED],\n    },\n  },\n};\n\nexport const utilizationPopoverQueryMap = [\n  {\n    model: ProjectModel,\n    metric: 'namespace',\n    query: `(sort_desc(topk(25,(${\n      CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PROJECTS_BY_USED]\n    }))))`,\n  },\n  {\n    model: StorageClassModel,\n    metric: 'storageclass',\n    query: `(sort_desc(topk(25,(${\n      CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.STORAGE_CLASSES_BY_USED]\n    }))))`,\n  },\n  {\n    model: PodModel,\n    metric: 'pod',\n    query: `(sort_desc(topk(25, (${\n      CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PODS_BY_USED]\n    }))))`,\n  },\n];\n\nexport const getPVCUsedCapacityQuery = (pvcName: string): string =>\n  `kubelet_volume_stats_used_bytes{persistentvolumeclaim='${pvcName}'}`;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;;;;;A","sourceRoot":""}