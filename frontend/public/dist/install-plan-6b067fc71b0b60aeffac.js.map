{"version":3,"file":"install-plan-6b067fc71b0b60aeffac.js","sources":["webpack:///./packages/operator-lifecycle-manager/src/components/install-plan.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/modals/installplan-preview-modal.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/operator-group.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { match, Link } from 'react-router-dom';\nimport { Map as ImmutableMap, Set as ImmutableSet, fromJS } from 'immutable';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { Button } from '@patternfly/react-core';\nimport {\n  MultiListPage,\n  DetailsPage,\n  Table,\n  TableRow,\n  TableData,\n  RowFunction,\n} from '@console/internal/components/factory';\nimport { Conditions } from '@console/internal/components/conditions';\nimport {\n  SectionHeading,\n  MsgBox,\n  ResourceLink,\n  ResourceKebab,\n  Kebab,\n  ResourceIcon,\n  navFactory,\n  ResourceSummary,\n  history,\n  HintBlock,\n} from '@console/internal/components/utils';\nimport {\n  K8sResourceKind,\n  referenceForModel,\n  referenceForOwnerRef,\n  k8sUpdate,\n  apiVersionForReference,\n} from '@console/internal/module/k8s';\nimport { GreenCheckCircleIcon, Status } from '@console/shared';\nimport {\n  SubscriptionModel,\n  ClusterServiceVersionModel,\n  InstallPlanModel,\n  OperatorGroupModel,\n  CatalogSourceModel,\n} from '../models';\nimport { InstallPlanKind, InstallPlanApproval, Step } from '../types';\nimport { requireOperatorGroup } from './operator-group';\nimport { installPlanPreviewModal } from './modals/installplan-preview-modal';\nimport { referenceForStepResource } from './index';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  Kebab.columnClass,\n];\n\nconst componentsTableColumnClasses = [\n  '',\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n];\n\nexport const InstallPlanTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Status',\n      sortField: 'status.phase',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Components',\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Subscriptions',\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nInstallPlanTableHeader.displayName = 'InstallPlanTableHeader';\n\nexport const InstallPlanTableRow: RowFunction<K8sResourceKind> = ({ obj, index, key, style }) => {\n  const phaseFor = (phase: InstallPlanKind['status']['phase']) => <Status status={phase} />;\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      {/* Name */}\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={referenceForModel(InstallPlanModel)}\n          namespace={obj.metadata.namespace}\n          name={obj.metadata.name}\n          title={obj.metadata.uid}\n        />\n      </TableData>\n\n      {/* Namespace */}\n      <TableData className={tableColumnClasses[1]}>\n        <ResourceLink\n          kind=\"Namespace\"\n          name={obj.metadata.namespace}\n          title={obj.metadata.namespace}\n          displayName={obj.metadata.namespace}\n        />\n      </TableData>\n\n      {/* Status */}\n      <TableData className={tableColumnClasses[2]}>\n        {phaseFor(_.get(obj, 'status.phase') || 'Unknown')}\n      </TableData>\n\n      {/* Components */}\n      <TableData className={tableColumnClasses[3]}>\n        <ul className=\"list-unstyled\">\n          {obj.spec.clusterServiceVersionNames.map((csvName) => (\n            <li key={csvName}>\n              {_.get(obj, 'status.phase') === 'Complete' ? (\n                <ResourceLink\n                  kind={referenceForModel(ClusterServiceVersionModel)}\n                  name={csvName}\n                  namespace={obj.metadata.namespace}\n                  title={csvName}\n                />\n              ) : (\n                <>\n                  <ResourceIcon kind={referenceForModel(ClusterServiceVersionModel)} />\n                  {csvName}\n                </>\n              )}\n            </li>\n          ))}\n        </ul>\n      </TableData>\n\n      {/* Subscriptions */}\n      <TableData className={tableColumnClasses[4]}>\n        {(obj.metadata.ownerReferences || [])\n          .filter((ref) => referenceForOwnerRef(ref) === referenceForModel(SubscriptionModel))\n          .map((ref) => (\n            <ul key={ref.uid} className=\"list-unstyled\">\n              <li>\n                <ResourceLink\n                  kind={referenceForModel(SubscriptionModel)}\n                  name={ref.name}\n                  namespace={obj.metadata.namespace}\n                  title={ref.uid}\n                />\n              </li>\n            </ul>\n          )) || <span className=\"text-muted\">None</span>}\n      </TableData>\n\n      {/* Kebab */}\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab\n          actions={Kebab.factory.common}\n          kind={referenceForModel(InstallPlanModel)}\n          resource={obj}\n        />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const InstallPlansList = requireOperatorGroup((props: InstallPlansListProps) => {\n  const EmptyMsg = () => (\n    <MsgBox\n      title=\"No Install Plans Found\"\n      detail=\"Install Plans are created automatically by subscriptions or manually using the CLI.\"\n    />\n  );\n  return (\n    <Table\n      {...props}\n      aria-label=\"Install Plans\"\n      Header={InstallPlanTableHeader}\n      Row={InstallPlanTableRow}\n      EmptyMsg={EmptyMsg}\n    />\n  );\n});\n\nconst getCatalogSources = (\n  installPlan: InstallPlanKind,\n): { sourceName: string; sourceNamespace: string }[] =>\n  _.reduce(\n    _.get(installPlan, 'status.plan') || [],\n    (accumulator, { resource: { sourceName, sourceNamespace } }) =>\n      accumulator.add(fromJS({ sourceName, sourceNamespace })),\n    ImmutableSet(),\n  ).toJS();\n\nexport const InstallPlansPage: React.SFC<InstallPlansPageProps> = (props) => {\n  const namespace = _.get(props.match, 'params.ns');\n  return (\n    <MultiListPage\n      {...props}\n      namespace={namespace}\n      resources={[\n        {\n          kind: referenceForModel(InstallPlanModel),\n          namespace,\n          namespaced: true,\n          prop: 'installPlan',\n        },\n        {\n          kind: referenceForModel(OperatorGroupModel),\n          namespace,\n          namespaced: true,\n          prop: 'operatorGroup',\n        },\n      ]}\n      flatten={(resources) => _.get(resources.installPlan, 'data', [])}\n      title=\"Install Plans\"\n      showTitle={false}\n      ListComponent={InstallPlansList}\n    />\n  );\n};\n\nexport const InstallPlanDetails: React.SFC<InstallPlanDetailsProps> = ({ obj }) => {\n  const needsApproval =\n    obj.spec.approval === InstallPlanApproval.Manual && obj.spec.approved === false;\n\n  return (\n    <>\n      {needsApproval && (\n        <div className=\"co-m-pane__body\">\n          <HintBlock title=\"Review Manual Install Plan\">\n            <p>\n              Inspect the requirements for the components specified in this install plan before\n              approving.\n            </p>\n            <Link\n              to={`/k8s/ns/${obj.metadata.namespace}/${referenceForModel(InstallPlanModel)}/${\n                obj.metadata.name\n              }/components`}\n            >\n              <Button variant=\"primary\">Preview Install Plan</Button>\n            </Link>\n          </HintBlock>\n        </div>\n      )}\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Install Plan Details\" />\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={obj} showAnnotations={false} />\n            </div>\n            <div className=\"col-sm-6\">\n              <dl className=\"co-m-pane__details\">\n                <dt>Status</dt>\n                <dd>\n                  <Status status={_.get(obj.status, 'phase', 'Unknown')} />\n                </dd>\n                <dt>Components</dt>\n                {(obj.spec.clusterServiceVersionNames || []).map((csvName) => (\n                  <dd key={csvName}>\n                    {obj.status.phase === 'Complete' ? (\n                      <ResourceLink\n                        kind={referenceForModel(ClusterServiceVersionModel)}\n                        name={csvName}\n                        namespace={obj.metadata.namespace}\n                        title={csvName}\n                      />\n                    ) : (\n                      <>\n                        <ResourceIcon kind={referenceForModel(ClusterServiceVersionModel)} />\n                        {csvName}\n                      </>\n                    )}\n                  </dd>\n                ))}\n                <dt>Catalog Sources</dt>\n                {getCatalogSources(obj).map(({ sourceName, sourceNamespace }) => (\n                  <dd key={`${sourceNamespace}-${sourceName}`}>\n                    <ResourceLink\n                      kind={referenceForModel(CatalogSourceModel)}\n                      name={sourceName}\n                      namespace={sourceNamespace}\n                      title={sourceName}\n                    />\n                  </dd>\n                ))}\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Conditions\" />\n        <Conditions conditions={obj.status?.conditions} />\n      </div>\n    </>\n  );\n};\n\nexport class InstallPlanPreview extends React.Component<\n  InstallPlanPreviewProps,\n  InstallPlanPreviewState\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      needsApproval:\n        this.props.obj.spec.approval === InstallPlanApproval.Manual &&\n        this.props.obj.spec.approved === false,\n    };\n  }\n\n  render() {\n    const { obj } = this.props;\n    const subscription = obj.metadata.ownerReferences.find(\n      (ref) => referenceForOwnerRef(ref) === referenceForModel(SubscriptionModel),\n    );\n\n    const plan = _.get(obj.status, 'plan') || [];\n    const stepsByCSV = plan\n      .reduce(\n        (acc, step) => acc.update(step.resolving, [], (steps) => steps.concat([step])),\n        ImmutableMap<string, Step[]>(),\n      )\n      .toArray();\n\n    const approve = () =>\n      k8sUpdate(InstallPlanModel, { ...obj, spec: { ...obj.spec, approved: true } })\n        .then(() => this.setState({ needsApproval: false }))\n        .catch((error) => this.setState({ error }));\n\n    const stepStatus = (status: Step['status']) => (\n      <>\n        {status === 'Present' && <GreenCheckCircleIcon className=\"co-icon-space-r\" />}\n        {status === 'Created' && <GreenCheckCircleIcon className=\"co-icon-space-r\" />}\n        {status}\n      </>\n    );\n\n    return plan.length > 0 ? (\n      <>\n        {this.state.error && (\n          <div className=\"co-clusterserviceversion-detail__error-box\">{this.state.error}</div>\n        )}\n        {this.state.needsApproval && (\n          <div className=\"co-m-pane__body\">\n            <HintBlock title=\"Review Manual Install Plan\">\n              <p>\n                Once approved, the following resources will be created in order to satisfy the\n                requirements for the components specified in the plan. Click the resource name to\n                view the resource in detail.\n              </p>\n              <div className=\"pf-c-form\">\n                <div className=\"pf-c-form__actions\">\n                  <Button\n                    variant=\"primary\"\n                    isDisabled={!this.state.needsApproval}\n                    onClick={() => approve()}\n                  >\n                    {this.state.needsApproval ? 'Approve' : 'Approved'}\n                  </Button>\n                  <Button\n                    variant=\"secondary\"\n                    isDisabled={false}\n                    onClick={() =>\n                      history.push(\n                        `/k8s/ns/${obj.metadata.namespace}/${referenceForModel(\n                          SubscriptionModel,\n                        )}/${subscription.name}?showDelete=true`,\n                      )\n                    }\n                  >\n                    Deny\n                  </Button>\n                </div>\n              </div>\n            </HintBlock>\n          </div>\n        )}\n        {stepsByCSV.map((steps) => (\n          <div key={steps[0].resolving} className=\"co-m-pane__body\">\n            <SectionHeading text={steps[0].resolving} />\n            <div className=\"co-table-container\">\n              <table className=\"pf-c-table pf-m-compact pf-m-border-rows\">\n                <thead>\n                  <tr>\n                    <th className={componentsTableColumnClasses[0]}>Name</th>\n                    <th className={componentsTableColumnClasses[1]}>Kind</th>\n                    <th className={componentsTableColumnClasses[2]}>Status</th>\n                    <th className={componentsTableColumnClasses[3]}>API Version</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {steps.map((step) => (\n                    <tr key={`${referenceForStepResource(step.resource)}-${step.resource.name}`}>\n                      <td className={componentsTableColumnClasses[0]}>\n                        {['Present', 'Created'].includes(step.status) ? (\n                          <ResourceLink\n                            kind={referenceForStepResource(step.resource)}\n                            namespace={obj.metadata.namespace}\n                            name={step.resource.name}\n                            title={step.resource.name}\n                          />\n                        ) : (\n                          <>\n                            <ResourceIcon kind={referenceForStepResource(step.resource)} />\n                            <Button\n                              type=\"button\"\n                              onClick={() =>\n                                installPlanPreviewModal({ stepResource: step.resource })\n                              }\n                              variant=\"link\"\n                            >\n                              {step.resource.name}\n                            </Button>\n                          </>\n                        )}\n                      </td>\n                      <td className={componentsTableColumnClasses[1]}>{step.resource.kind}</td>\n                      <td className={componentsTableColumnClasses[2]}>{stepStatus(step.status)}</td>\n                      <td className={componentsTableColumnClasses[3]}>\n                        {apiVersionForReference(referenceForStepResource(step.resource))}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        ))}\n      </>\n    ) : (\n      <div className=\"co-m-pane__body\">\n        <MsgBox\n          title=\"No Components Resolved\"\n          detail=\"This install plan has not been fully resolved yet.\"\n        />\n      </div>\n    );\n  }\n}\n\nexport const InstallPlanDetailsPage: React.SFC<InstallPlanDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    namespace={props.match.params.ns}\n    kind={referenceForModel(InstallPlanModel)}\n    name={props.match.params.name}\n    pages={[\n      navFactory.details(InstallPlanDetails),\n      navFactory.editYaml(),\n      { href: 'components', name: 'Components', component: InstallPlanPreview },\n    ]}\n    menuActions={[...Kebab.getExtensionsActionsForKind(InstallPlanModel), ...Kebab.factory.common]}\n  />\n);\n\nexport type InstallPlansListProps = {};\n\nexport type InstallPlansPageProps = {\n  namespace?: string;\n  match?: match<{ ns?: string }>;\n};\n\nexport type InstallPlanDetailsProps = {\n  obj: InstallPlanKind;\n};\n\nexport type InstallPlanDetailsPageProps = {\n  match: match<{ ns: string; name: string }>;\n};\n\nexport type InstallPlanPreviewProps = {\n  obj: InstallPlanKind;\n};\n\nexport type InstallPlanPreviewState = {\n  needsApproval: boolean;\n  error?: string;\n};\n\nInstallPlansList.displayName = 'InstallPlansList';\nInstallPlansPage.displayName = 'InstallPlansPage';\n","import * as React from 'react';\nimport { safeDump } from 'js-yaml';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalFooter,\n} from '@console/internal/components/factory/modal';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { ResourceLink, CopyToClipboard } from '@console/internal/components/utils';\nimport { referenceForStepResource } from '../index';\nimport { StepResource } from '../../types';\n\nconst InstallPlanPreview: React.FC<InstallPlanPreviewModalProps> = ({ cancel, stepResource }) => (\n  <div className=\"modal-content\">\n    <ModalTitle>\n      Install Plan Preview{' '}\n      <ResourceLink\n        linkTo={false}\n        name={stepResource.name}\n        kind={referenceForStepResource(stepResource)}\n      />\n    </ModalTitle>\n    <ModalBody>\n      <CopyToClipboard value={safeDump(JSON.parse(stepResource.manifest))} />\n    </ModalBody>\n    <ModalFooter inProgress={false}>\n      <ActionGroup className=\"pf-c-form pf-c-form__actions--right pf-c-form__group--no-top-margin\">\n        <Button type=\"button\" variant=\"secondary\" onClick={() => cancel()}>\n          OK\n        </Button>\n      </ActionGroup>\n    </ModalFooter>\n  </div>\n);\n\nexport const installPlanPreviewModal = createModalLauncher<InstallPlanPreviewModalProps>(\n  InstallPlanPreview,\n);\n\nexport type InstallPlanPreviewModalProps = {\n  stepResource: StepResource;\n  cancel?: () => void;\n  close?: () => void;\n};\n\nInstallPlanPreview.displayName = 'InstallPlanPreview';\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport { MsgBox } from '@console/internal/components/utils/status-box';\nimport {\n  K8sResourceKind,\n  GroupVersionKind,\n  referenceForModel,\n  referenceForGroupVersionKind,\n} from '@console/internal/module/k8s';\nimport { AsyncComponent } from '@console/internal/components/utils/async';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { OperatorGroupModel } from '../models';\nimport { OperatorGroupKind, SubscriptionKind, InstallModeType } from '../types';\n\nexport const targetNamespacesFor = (obj: K8sResourceKind) =>\n  _.get(obj, ['metadata', 'annotations', 'olm.targetNamespaces']);\nexport const operatorNamespaceFor = (obj: K8sResourceKind) =>\n  _.get(obj, ['metadata', 'annotations', 'olm.operatorNamespace']);\nexport const operatorGroupFor = (obj: K8sResourceKind) =>\n  _.get(obj, ['metadata', 'annotations', 'olm.operatorGroup']);\n\nexport const NoOperatorGroupMsg: React.SFC = () => (\n  <MsgBox\n    title=\"Namespace Not Enabled\"\n    detail={\n      <p>\n        The Operator Lifecycle Manager will not watch this namespace because it is not configured\n        with an OperatorGroup.{' '}\n        <Link to={`/ns/${getActiveNamespace()}/${referenceForModel(OperatorGroupModel)}/~new`}>\n          Create one here.\n        </Link>\n      </p>\n    }\n  />\n);\n\ntype RequireOperatorGroupProps = {\n  operatorGroup: { loaded: boolean; data?: OperatorGroupKind[] };\n};\n\nexport const OperatorGroupSelector: React.SFC<OperatorGroupSelectorProps> = (props) => (\n  <AsyncComponent\n    loader={() =>\n      import('@console/internal/components/utils/list-dropdown').then((m) => m.ListDropdown)\n    }\n    onChange={\n      props.onChange ||\n      function() {\n        return null;\n      }\n    }\n    desc=\"Operator Groups\"\n    placeholder=\"Select Operator Group\"\n    selectedKeyKind={referenceForModel(OperatorGroupModel)}\n    dataFilter={props.dataFilter}\n    resources={[\n      {\n        kind: referenceForModel(OperatorGroupModel),\n        fieldSelector: `metadata.name!=${props.excludeName}`,\n      },\n    ]}\n  />\n);\n\nexport const requireOperatorGroup = <P extends RequireOperatorGroupProps>(\n  Component: React.ComponentType<P>,\n) => {\n  return class RequireOperatorGroup extends React.Component<P> {\n    static WrappedComponent = Component;\n\n    render() {\n      const namespaceEnabled =\n        !_.get(this.props.operatorGroup, 'loaded') || !_.isEmpty(this.props.operatorGroup.data);\n\n      return namespaceEnabled ? <Component {...this.props} /> : <NoOperatorGroupMsg />;\n    }\n  } as React.ComponentClass<P> & { WrappedComponent: React.ComponentType<P> };\n};\n\nexport type InstallModeSet = { type: InstallModeType; supported: boolean }[];\n\n/**\n * Logic consistent with https://github.com/operator-framework/operator-lifecycle-manager/blob/4ef074e4207f5518d95ddf8c378036dfc4270dda/pkg/api/apis/operators/v1alpha1/clusterserviceversion.go#L165.\n */\nexport const supports = (set: InstallModeSet) => (obj: OperatorGroupKind) => {\n  const namespaces = _.get(obj.status, 'namespaces') || [];\n  const supportedModes = set.filter(({ supported }) => supported).map(({ type }) => type);\n\n  if (namespaces.length === 0) {\n    return false;\n  }\n  if (namespaces.length === 1) {\n    if (namespaces[0] === obj.metadata.namespace) {\n      return supportedModes.includes(InstallModeType.InstallModeTypeOwnNamespace);\n    }\n    if (namespaces[0] === '') {\n      return supportedModes.includes(InstallModeType.InstallModeTypeAllNamespaces);\n    }\n    return supportedModes.includes(InstallModeType.InstallModeTypeSingleNamespace);\n  }\n  if (\n    namespaces.length > 1 &&\n    !supportedModes.includes(InstallModeType.InstallModeTypeMultiNamespace)\n  ) {\n    return false;\n  }\n  if (namespaces.length > 1) {\n    if (\n      namespaces.includes(obj.metadata.namespace) &&\n      !supportedModes.includes(InstallModeType.InstallModeTypeOwnNamespace)\n    ) {\n      return false;\n    }\n    if (namespaces.includes('')) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport const isGlobal = (obj: OperatorGroupKind) =>\n  supports([{ type: InstallModeType.InstallModeTypeAllNamespaces, supported: true }])(obj);\nexport const isSingle = (obj: OperatorGroupKind) =>\n  supports([{ type: InstallModeType.InstallModeTypeSingleNamespace, supported: true }])(obj);\n\n/**\n * Determines if a given Operator package has a `Subscription` that makes it available in the given namespace.\n * Finds any `Subscriptions` for the given package, matches them to their `OperatorGroup`, and checks if the `OperatorGroup` is targeting the given namespace or if it is global.\n */\nexport const subscriptionFor = (allSubscriptions: SubscriptionKind[] = []) => (\n  allGroups: OperatorGroupKind[] = [],\n) => (pkgName: string) => (ns = '') => {\n  return allSubscriptions\n    .filter((sub) => sub.spec.name === pkgName)\n    .find((sub) =>\n      allGroups.some(\n        (og) =>\n          og.metadata.namespace === sub.metadata.namespace &&\n          (isGlobal(og) || _.get(og.status, 'namespaces', [] as string[]).includes(ns)),\n      ),\n    );\n};\n\nexport const installedFor = (allSubscriptions: SubscriptionKind[] = []) => (\n  allGroups: OperatorGroupKind[] = [],\n) => (pkgName: string) => (ns = '') => {\n  return !_.isNil(subscriptionFor(allSubscriptions)(allGroups)(pkgName)(ns));\n};\n\nexport const providedAPIsFor = (og: OperatorGroupKind) =>\n  _.get(og.metadata.annotations, 'olm.providedAPIs', '')\n    .split(',')\n    .map((api) => ({\n      group: api\n        .split('.')\n        .slice(2)\n        .join('.'),\n      version: api.split('.')[1],\n      kind: api.split('.')[0],\n    }))\n    .map(({ group, version, kind }) => referenceForGroupVersionKind(group)(version)(kind));\n\nexport type OperatorGroupSelectorProps = {\n  onChange?: (name: string, kind: GroupVersionKind) => void;\n  excludeName?: string;\n  dataFilter?: (obj: OperatorGroupKind) => boolean;\n};\n\nNoOperatorGroupMsg.displayName = 'NoOperatorGroupMsg';\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAYA;AAOA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AASA;AACA;AASA;AAKA;AACA;AAYA;AACA;AASA;AAEA;AACA;AAEA;AACA;AAYA;AACA;AAQA;AAEA;AACA;AAMA;AASA;AAEA;AAUA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;;AACA;AAGA;AAEA;AAEA;AACA;AAIA;AAKA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAWA;AACA;AAKA;AACA;AAEA;AAaA;AACA;AACA;AAIA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AAEA;AAGA;AAEA;AACA;AAKA;AACA;AACA;AAOA;AAkBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAUA;AACA;AAYA;AACA;AACA;AAaA;AAMA;AACA;AAEA;AAOA;AACA;AACA;AACA;AA6BA;AACA;;;;;;;;;;;;;ACnfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AACA;AAGA;AAEA;;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAQA;AAUA;;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAGA;;AAMA;AACA;AAYA;AAOA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAIA;;AAGA;AAGA;AACA;AAGA;AACA;AACA;AARA;AAQA;AACA;AAIA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;;;AAGA;AACA;AAGA;AACA;AACA;AAIA;AAGA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;;;;;A","sourceRoot":""}