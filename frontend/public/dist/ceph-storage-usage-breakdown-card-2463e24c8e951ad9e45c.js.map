{"version":3,"file":"ceph-storage-usage-breakdown-card-2463e24c8e951ad9e45c.js","sources":["webpack:///./packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/capacity-breakdown/capacity-breakdown-card.scss?c92a","webpack:///./packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/capacity-breakdown/capacity-breakdown-card.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Dropdown, humanizeBinaryBytes } from '@console/internal/components/utils';\nimport {\n  DashboardItemProps,\n  withDashboardResources,\n} from '@console/internal/components/dashboard/with-dashboard-resources';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport { getInstantVectorStats } from '@console/internal/components/graphs/utils';\nimport { breakdownQueryMap, CAPACITY_BREAKDOWN_QUERIES } from '../../../../constants/queries';\nimport { PROJECTS } from '../../../../constants/index';\nimport { BreakdownCardBody } from '../breakdown-card/breakdown-body';\nimport { HeaderPrometheusViewLink } from '../breakdown-card/breakdown-header';\nimport { getStackChartStats, sortInstantVectorStats } from '../breakdown-card/utils';\nimport './capacity-breakdown-card.scss';\n\nconst keys = Object.keys(breakdownQueryMap);\nconst dropdownOptions = _.zipObject(keys, keys);\n\nconst BreakdownCard: React.FC<DashboardItemProps> = ({\n  watchPrometheus,\n  stopWatchPrometheusQuery,\n  prometheusResults,\n}) => {\n  const [metricType, setMetricType] = React.useState(PROJECTS);\n  const { queries, model, metric } = breakdownQueryMap[metricType];\n  const queryKeys = Object.keys(queries);\n\n  React.useEffect(() => {\n    queryKeys.forEach((q) => watchPrometheus(queries[q]));\n    return () => queryKeys.forEach((key) => stopWatchPrometheusQuery(queries[key]));\n  }, [watchPrometheus, stopWatchPrometheusQuery, metricType, queryKeys, queries]);\n\n  const results = queryKeys.map((key) => prometheusResults.getIn([queries[key], 'data']));\n  const queriesLoadError = queryKeys.some((q) =>\n    prometheusResults.getIn([queries[q], 'loadError']),\n  );\n\n  const queriesDataLoaded = queryKeys.some((q) => !prometheusResults.getIn([queries[q], 'data']));\n\n  const humanize = humanizeBinaryBytes;\n  const top6MetricsData = getInstantVectorStats(results[0], metric);\n  const top5SortedMetricsData = sortInstantVectorStats(top6MetricsData);\n  const top5MetricsStats = getStackChartStats(top5SortedMetricsData, humanize);\n  const metricTotal = _.get(results[1], 'data.result[0].value[1]');\n  const cephAvailable = _.get(results[2], 'data.result[0].value[1]');\n  const cephUsed = _.get(results[3], 'data.result[0].value[1]');\n  const link = `topk(20, (${CAPACITY_BREAKDOWN_QUERIES[queryKeys[0]]}))`;\n\n  return (\n    <DashboardCard>\n      <DashboardCardHeader>\n        <DashboardCardTitle>Capacity breakdown</DashboardCardTitle>\n        <div className=\"ceph-capacity-breakdown-card__header\">\n          <HeaderPrometheusViewLink link={link} />\n          <Dropdown\n            items={dropdownOptions}\n            onChange={setMetricType}\n            selectedKey={metricType}\n            title={metricType}\n          />\n        </div>\n      </DashboardCardHeader>\n      <DashboardCardBody classname=\"ceph-capacity-breakdown-card__body\">\n        <BreakdownCardBody\n          isLoading={queriesDataLoaded}\n          hasLoadError={queriesLoadError}\n          metricTotal={metricTotal}\n          top5MetricsStats={top5MetricsStats}\n          capacityAvailable={cephAvailable}\n          capacityUsed={cephUsed}\n          metricModel={model}\n          humanize={humanize}\n        />\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\nexport default withDashboardResources(BreakdownCard);\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAQA;AACA;AAaA;AAEA;;;;;A","sourceRoot":""}