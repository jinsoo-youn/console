{"version":3,"file":"dev-console-topology-ed6e1c3ba222a4d11650.js","sources":["webpack:///./packages/console-shared/src/k8s/index.ts","webpack:///./packages/console-shared/src/k8s/patch.ts","webpack:///./packages/dev-console/src/actions/modify-helm-release.ts","webpack:///./packages/dev-console/src/components/EmptyState.scss?6f58","webpack:///./packages/dev-console/src/components/EmptyState.tsx","webpack:///./packages/dev-console/src/components/ProjectsExistWrapper.tsx","webpack:///./packages/dev-console/src/components/helm/details/notes/HelmReleaseNotesEmptyState.tsx","webpack:///./packages/dev-console/src/components/helm/details/overview/HelmChartSummary.tsx","webpack:///./packages/dev-console/src/components/helm/details/overview/HelmReleaseOverview.tsx","webpack:///./packages/dev-console/src/components/import/section/FormSection.scss?8752","webpack:///./packages/dev-console/src/components/import/section/FormSection.tsx","webpack:///./packages/dev-console/src/components/projects/ProjectListPage.scss?762c","webpack:///./packages/dev-console/src/components/projects/ProjectListPage.tsx","webpack:///./packages/dev-console/src/components/topology/Topology.tsx","webpack:///./packages/dev-console/src/components/topology/TopologyDataController.tsx","webpack:///./packages/dev-console/src/components/topology/TopologyEdgePanel.tsx","webpack:///./packages/dev-console/src/components/topology/TopologyPage.scss?a8dc","webpack:///./packages/dev-console/src/components/topology/TopologyPage.tsx","webpack:///./packages/dev-console/src/components/topology/TopologyResourcePanel.tsx","webpack:///./packages/dev-console/src/components/topology/TopologyShortcuts.tsx","webpack:///./packages/dev-console/src/components/topology/TopologySideBar.tsx","webpack:///./packages/dev-console/src/components/topology/actions/edgeActions.ts","webpack:///./packages/dev-console/src/components/topology/application-panel/ApplicationGroupResource.tsx","webpack:///./packages/dev-console/src/components/topology/application-panel/TopologyApplicationList.tsx","webpack:///./packages/dev-console/src/components/topology/application-panel/TopologyApplicationPanel.tsx","webpack:///./packages/dev-console/src/components/topology/application-panel/TopologyApplicationResources.scss?ded2","webpack:///./packages/dev-console/src/components/topology/application-panel/TopologyApplicationResources.tsx","webpack:///./packages/dev-console/src/components/topology/components/MoveConnectionModal.tsx","webpack:///./packages/dev-console/src/components/topology/filters/FilterDropdown.tsx","webpack:///./packages/dev-console/src/components/topology/filters/TopologyFilterBar.scss?ec69","webpack:///./packages/dev-console/src/components/topology/filters/TopologyFilterBar.tsx","webpack:///./packages/dev-console/src/components/topology/helm/TopologyHelmReleaseNotesPanel.tsx","webpack:///./packages/dev-console/src/components/topology/helm/TopologyHelmReleasePanel.tsx","webpack:///./packages/dev-console/src/components/topology/helm/TopologyHelmReleaseResourceItem.tsx","webpack:///./packages/dev-console/src/components/topology/helm/TopologyHelmReleaseResourceList.tsx","webpack:///./packages/dev-console/src/components/topology/helm/TopologyHelmReleaseResourcesPanel.tsx","webpack:///./packages/dev-console/src/components/topology/helm/TopologyHelmWorkloadPanel.tsx","webpack:///./packages/dev-console/src/components/topology/helm/actions/helmReleaseActions.ts","webpack:///./packages/dev-console/src/components/topology/helm/components/HelmRelease.scss?055d","webpack:///./packages/dev-console/src/components/topology/helm/components/HelmRelease.tsx","webpack:///./packages/dev-console/src/components/topology/helm/components/HelmReleaseGroup.tsx","webpack:///./packages/dev-console/src/components/topology/helm/components/HelmReleaseNode.tsx","webpack:///./packages/dev-console/src/components/topology/helm/components/helmComponentFactory.ts","webpack:///./packages/dev-console/src/components/topology/layouts/TopologyColaLayout.ts","webpack:///./packages/dev-console/src/components/topology/layouts/layoutFactory.ts","webpack:///./packages/dev-console/src/components/topology/operators/components/OperatorBackedService.scss?216a","webpack:///./packages/dev-console/src/components/topology/operators/components/OperatorBackedService.tsx","webpack:///./packages/dev-console/src/components/topology/operators/components/OperatorBackedServiceGroup.tsx","webpack:///./packages/dev-console/src/components/topology/operators/components/OperatorBackedServiceNode.tsx","webpack:///./packages/dev-console/src/components/topology/operators/components/operatorsComponentFactory.ts","webpack:///./packages/dev-console/src/extensions/add-actions.ts","webpack:///./packages/dev-console/src/utils/useAddToProjectAccess.ts","webpack:///./packages/knative-plugin/src/actions/delete-revision.ts","webpack:///./packages/knative-plugin/src/actions/getRevisionActions.ts","webpack:///./packages/knative-plugin/src/components/overview/KnativeOverview.tsx","webpack:///./packages/knative-plugin/src/components/overview/KnativeResourceOverviewPage.tsx","webpack:///./packages/knative-plugin/src/imgs/logos/apiserversource.png","webpack:///./packages/knative-plugin/src/imgs/logos/camelsource.svg","webpack:///./packages/knative-plugin/src/imgs/logos/containersource.png","webpack:///./packages/knative-plugin/src/imgs/logos/cronjobsource.svg","webpack:///./packages/knative-plugin/src/imgs/logos/kafkasource.svg","webpack:///./packages/knative-plugin/src/topology/components/anchors/RevisionTrafficSourceAnchor.ts","webpack:///./packages/knative-plugin/src/topology/components/anchors/RevisionTrafficTargetAnchor.ts","webpack:///./packages/knative-plugin/src/topology/components/edges/EventSourceLink.scss?85ba","webpack:///./packages/knative-plugin/src/topology/components/edges/EventSourceLink.tsx","webpack:///./packages/knative-plugin/src/topology/components/edges/TrafficLink.scss?76db","webpack:///./packages/knative-plugin/src/topology/components/edges/TrafficLink.tsx","webpack:///./packages/knative-plugin/src/topology/components/groups/KnativeService.scss?1405","webpack:///./packages/knative-plugin/src/topology/components/groups/KnativeService.tsx","webpack:///./packages/knative-plugin/src/topology/components/groups/KnativeServiceGroup.tsx","webpack:///./packages/knative-plugin/src/topology/components/groups/KnativeServiceNode.tsx","webpack:///./packages/knative-plugin/src/topology/components/knativeComponentFactory.ts","webpack:///./packages/knative-plugin/src/topology/components/knativeComponentUtils.ts","webpack:///./packages/knative-plugin/src/topology/components/nodes/EventSource.scss?f1f7","webpack:///./packages/knative-plugin/src/topology/components/nodes/EventSource.tsx","webpack:///./packages/knative-plugin/src/topology/components/nodes/RevisionNode.tsx","webpack:///./packages/knative-plugin/src/topology/layouts/layoutConstraints.ts","webpack:///./packages/knative-plugin/src/utils/get-knative-icon.ts","webpack:///./packages/kubevirt-plugin/src/components/LabelsList/LabelRow/label-row.tsx","webpack:///./packages/kubevirt-plugin/src/components/LabelsList/consts.ts","webpack:///./packages/kubevirt-plugin/src/components/LabelsList/labels-list.scss?a4c6","webpack:///./packages/kubevirt-plugin/src/components/LabelsList/labels-list.tsx","webpack:///./packages/kubevirt-plugin/src/components/boot-order/add-device-button.tsx","webpack:///./packages/kubevirt-plugin/src/components/boot-order/add-device-form-select.tsx","webpack:///./packages/kubevirt-plugin/src/components/boot-order/add-device.tsx","webpack:///./packages/kubevirt-plugin/src/components/boot-order/boot-order-empty.tsx","webpack:///./packages/kubevirt-plugin/src/components/boot-order/boot-order.scss?fcb6","webpack:///./packages/kubevirt-plugin/src/components/boot-order/boot-order.tsx","webpack:///./packages/kubevirt-plugin/src/components/boot-order/constants.tsx","webpack:///./packages/kubevirt-plugin/src/components/boot-order/index.tsx","webpack:///./packages/kubevirt-plugin/src/components/boot-order/summary/boot-order-empty-summary.tsx","webpack:///./packages/kubevirt-plugin/src/components/boot-order/summary/boot-order-summary.tsx","webpack:///./packages/kubevirt-plugin/src/components/dnd-list/dnd-data-list-item.tsx","webpack:///./packages/kubevirt-plugin/src/components/dnd-list/dnd-data-list.tsx","webpack:///./packages/kubevirt-plugin/src/components/dnd-list/index.ts","webpack:///./packages/kubevirt-plugin/src/components/edit-button.tsx","webpack:///./packages/kubevirt-plugin/src/components/errors/errors.scss?e991","webpack:///./packages/kubevirt-plugin/src/components/errors/errors.tsx","webpack:///./packages/kubevirt-plugin/src/components/form/form-row.scss?0065","webpack:///./packages/kubevirt-plugin/src/components/form/form-row.tsx","webpack:///./packages/kubevirt-plugin/src/components/form/form-select-placeholder-option.tsx","webpack:///./packages/kubevirt-plugin/src/components/form/integer/integer.scss?ae9f","webpack:///./packages/kubevirt-plugin/src/components/form/integer/integer.tsx","webpack:///./packages/kubevirt-plugin/src/components/form/k8s-resource-select-row.tsx","webpack:///./packages/kubevirt-plugin/src/components/form/size-unit-form-row.scss?d0c3","webpack:///./packages/kubevirt-plugin/src/components/form/size-unit-form-row.tsx","webpack:///./packages/kubevirt-plugin/src/components/form/size-unit-utils.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/boot-order-modal/boot-order-modal.scss?c7f3","webpack:///./packages/kubevirt-plugin/src/components/modals/boot-order-modal/boot-order-modal.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/cdrom-vm-modal/cdrom-modal.scss?1dfc","webpack:///./packages/kubevirt-plugin/src/components/modals/cdrom-vm-modal/cdrom-modal.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/cdrom-vm-modal/cdrom-row.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/cdrom-vm-modal/helpers.ts","webpack:///./packages/kubevirt-plugin/src/components/modals/cdrom-vm-modal/vm-cdrom-modal.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/clone-vm-modal/_clone-vm-modal.scss?ca83","webpack:///./packages/kubevirt-plugin/src/components/modals/clone-vm-modal/clone-vm-modal.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/clone-vm-modal/configuration-summary.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/clone-vm-modal/index.ts","webpack:///./packages/kubevirt-plugin/src/components/modals/delete-vm-like-entity-modal/delete-vm-like-entity-modal.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/disk-modal/storage-ui-source.ts","webpack:///./packages/kubevirt-plugin/src/components/modals/index.ts","webpack:///./packages/kubevirt-plugin/src/components/modals/modal-resource-launcher.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/modal/modal-footer.scss?82d2","webpack:///./packages/kubevirt-plugin/src/components/modals/modal/modal-footer.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/affinity-modal.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/components/affinity-edit/affinity-edit.scss?a0e8","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/components/affinity-edit/affinity-edit.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/components/affinity-expression-list/affinity-expression-list.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/components/affinity-expression-list/affinity-expression-row.scss?5d79","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/components/affinity-expression-list/affinity-expression-row.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/components/affinity-table/affinity-row.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/components/affinity-table/affinity-table.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/connected-affinity-modal.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/helpers.ts","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/validations.ts","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/dedicated-resources-modal/connected-dedicated-resources-modal.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/dedicated-resources-modal/dedicated-resources-modal.scss?d9f3","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/dedicated-resources-modal/dedicated-resources-modal.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/node-selector-modal/connected-node-selector-modal.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/node-selector-modal/helpers.ts","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/node-selector-modal/node-selector-header.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/node-selector-modal/node-selector-modal.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/shared/NodeChecker/node-checker.scss?77f2","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/shared/NodeChecker/node-checker.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/shared/consts.ts","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/shared/hooks.ts","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/shared/scheduling-modals.scss?442a","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/tolerations-modal/connected-tolerations-modal.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/tolerations-modal/toleration-header.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/tolerations-modal/toleration-row.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/scheduling-modals/tolerations-modal/tolerations-modal.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/vm-description-modal/_vm-description-modal.scss?8de5","webpack:///./packages/kubevirt-plugin/src/components/modals/vm-description-modal/index.ts","webpack:///./packages/kubevirt-plugin/src/components/modals/vm-description-modal/vm-description-modal.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/vm-flavor-modal/index.ts","webpack:///./packages/kubevirt-plugin/src/components/modals/vm-flavor-modal/vm-flavor-modal.tsx","webpack:///./packages/kubevirt-plugin/src/components/modals/vm-status-modal/vm-status-modal.tsx","webpack:///./packages/kubevirt-plugin/src/components/table/validation-cell.scss?0e8c","webpack:///./packages/kubevirt-plugin/src/components/table/validation-cell.tsx","webpack:///./packages/kubevirt-plugin/src/components/vm-disks/disk-summary.scss?47be","webpack:///./packages/kubevirt-plugin/src/components/vm-disks/disk-summary.tsx","webpack:///./packages/kubevirt-plugin/src/components/vm-status/vm-status.scss?e416","webpack:///./packages/kubevirt-plugin/src/components/vm-status/vm-status.tsx","webpack:///./packages/kubevirt-plugin/src/components/vm-templates/vm-template-link.tsx","webpack:///./packages/kubevirt-plugin/src/components/vms/menu-actions.tsx","webpack:///./packages/kubevirt-plugin/src/components/vms/vm-resource.scss?d73e","webpack:///./packages/kubevirt-plugin/src/components/vms/vm-resource.tsx","webpack:///./packages/kubevirt-plugin/src/constants/keys.ts","webpack:///./packages/kubevirt-plugin/src/constants/sc.ts","webpack:///./packages/kubevirt-plugin/src/constants/vm/provision-source.ts","webpack:///./packages/kubevirt-plugin/src/hooks/storage-class-config-map.ts","webpack:///./packages/kubevirt-plugin/src/hooks/use-collision-checker.ts","webpack:///./packages/kubevirt-plugin/src/hooks/use-id-entities.ts","webpack:///./packages/kubevirt-plugin/src/hooks/use-owned-volume-referenced-resources.ts","webpack:///./packages/kubevirt-plugin/src/hooks/use-show-error-toggler.ts","webpack:///./packages/kubevirt-plugin/src/hooks/use-virtual-machine-import.ts","webpack:///./packages/kubevirt-plugin/src/hooks/use-vm-like-entity.ts","webpack:///./packages/kubevirt-plugin/src/k8s/helpers/vm-clone.ts","webpack:///./packages/kubevirt-plugin/src/k8s/objects/vm/datavolume-template/index.ts","webpack:///./packages/kubevirt-plugin/src/k8s/objects/vmi-migration/vmi-migration.ts","webpack:///./packages/kubevirt-plugin/src/k8s/patches/vm-template/index.ts","webpack:///./packages/kubevirt-plugin/src/k8s/patches/vm/vm-boot-patches.ts","webpack:///./packages/kubevirt-plugin/src/k8s/patches/vm/vm-cdrom-patches.ts","webpack:///./packages/kubevirt-plugin/src/k8s/patches/vm/vm-cpu-patches.ts","webpack:///./packages/kubevirt-plugin/src/k8s/patches/vm/vm-patches.ts","webpack:///./packages/kubevirt-plugin/src/k8s/patches/vm/vm-scheduling-patches.ts","webpack:///./packages/kubevirt-plugin/src/k8s/requests/free-owned-resources.ts","webpack:///./packages/kubevirt-plugin/src/k8s/requests/k8s-kill-propagated.ts","webpack:///./packages/kubevirt-plugin/src/k8s/requests/vm/actions.ts","webpack:///./packages/kubevirt-plugin/src/k8s/requests/vm/clone.ts","webpack:///./packages/kubevirt-plugin/src/k8s/requests/vm/index.ts","webpack:///./packages/kubevirt-plugin/src/k8s/requests/vmi/actions.ts","webpack:///./packages/kubevirt-plugin/src/k8s/requests/vmi/index.ts","webpack:///./packages/kubevirt-plugin/src/k8s/requests/vmi/migration.ts","webpack:///./packages/kubevirt-plugin/src/k8s/requests/vmim/index.ts","webpack:///./packages/kubevirt-plugin/src/k8s/requests/vmtemplate/actions.ts","webpack:///./packages/kubevirt-plugin/src/k8s/wrapper/common/k8s-resource-wrapper.ts","webpack:///./packages/kubevirt-plugin/src/k8s/wrapper/utils/convert.ts","webpack:///./packages/kubevirt-plugin/src/k8s/wrapper/vm/cloud-init-data-helper.tsx","webpack:///./packages/kubevirt-plugin/src/k8s/wrapper/vm/combined-disk.ts","webpack:///./packages/kubevirt-plugin/src/k8s/wrapper/vm/data-volume-wrapper.ts","webpack:///./packages/kubevirt-plugin/src/k8s/wrapper/vm/persistent-volume-claim-wrapper.ts","webpack:///./packages/kubevirt-plugin/src/k8s/wrapper/vm/vm-wrapper.ts","webpack:///./packages/kubevirt-plugin/src/k8s/wrapper/vm/vmi-wrapper.ts","webpack:///./packages/kubevirt-plugin/src/k8s/wrapper/vm/volume-wrapper.ts","webpack:///./packages/kubevirt-plugin/src/selectors/affinity/selectors.ts","webpack:///./packages/kubevirt-plugin/src/selectors/config-map/sc-defaults.ts","webpack:///./packages/kubevirt-plugin/src/selectors/pvc/selectors.ts","webpack:///./packages/kubevirt-plugin/src/selectors/service/index.ts","webpack:///./packages/kubevirt-plugin/src/selectors/service/rdp/index.ts","webpack:///./packages/kubevirt-plugin/src/selectors/service/selectors.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vm-like/flavor.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vm-like/selectors.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vm-template/advanced.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vm-template/selectors.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vm/flavor-text.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vmi/combined.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vmi/index.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vmi/ip-address.ts","webpack:///./packages/kubevirt-plugin/src/selectors/vmi/selectors.ts","webpack:///./packages/kubevirt-plugin/src/topology/TopologyVmDetailsPanel.tsx","webpack:///./packages/kubevirt-plugin/src/topology/TopologyVmPanel.tsx","webpack:///./packages/kubevirt-plugin/src/topology/TopologyVmResourcesPanel.tsx","webpack:///./packages/kubevirt-plugin/src/topology/components/kubevirtComponentFactory.ts","webpack:///./packages/kubevirt-plugin/src/topology/components/nodes/VmNode.scss?3f0e","webpack:///./packages/kubevirt-plugin/src/topology/components/nodes/VmNode.tsx","webpack:///./packages/kubevirt-plugin/src/utils/sort.ts","webpack:///./packages/kubevirt-plugin/src/utils/url.ts","webpack:///./packages/kubevirt-plugin/src/utils/utils.ts","webpack:///./packages/kubevirt-plugin/src/utils/validations/common.ts","webpack:///./packages/kubevirt-plugin/src/utils/validations/strings.ts","webpack:///./packages/kubevirt-plugin/src/utils/validations/template/disk-bus-validation-result.ts","webpack:///./packages/kubevirt-plugin/src/utils/validations/template/interval-validation-result.ts","webpack:///./packages/kubevirt-plugin/src/utils/validations/template/template-validations.ts","webpack:///./packages/kubevirt-plugin/src/utils/validations/vm/disk.ts","webpack:///./packages/kubevirt-plugin/src/utils/validations/vm/flavor.ts","webpack:///./packages/kubevirt-plugin/src/utils/validations/vm/index.ts","webpack:///./packages/kubevirt-plugin/src/utils/validations/vm/nic.ts","webpack:///./packages/kubevirt-plugin/src/utils/validations/vm/validations.ts","webpack:///./packages/kubevirt-plugin/src/utils/validations/vm/vm.ts","webpack:///./public/components/markdown-view.tsx","webpack:///./public/components/overview/resource-overview-details.tsx","webpack:///util (ignored)","webpack:///util (ignored)?6194","webpack:///readable-stream (ignored)","webpack:///supports-color (ignored)","webpack:///chalk (ignored)","webpack:///fs (ignored)"],"sourcesContent":["export * from './patch';\n","import * as _ from 'lodash';\nimport { Patch } from '@console/internal/module/k8s';\nimport { assureEndsWith } from '../utils';\n\nexport const patchSafeValue = (value: string): string =>\n  value.replace('~', '~0').replace('/', '~1');\n\nexport enum PatchOperation {\n  ADD = 'add',\n  REMOVE = 'remove',\n  REPLACE = 'replace',\n}\n\nexport class PatchBuilder {\n  private readonly path: string;\n\n  private value: any;\n\n  private valueIndex: number = -1;\n\n  private valueKey: string = '';\n\n  private operation: PatchOperation;\n\n  private valid = true;\n\n  constructor(path: string) {\n    this.path = path;\n  }\n\n  setValue = (value) => {\n    this.value = value;\n    return this;\n  };\n\n  setOperation = (operation: PatchOperation) => {\n    this.operation = operation;\n    return this;\n  };\n\n  setListIndex = (index: number) => {\n    this.valueIndex = index;\n    return this;\n  };\n\n  add = (value) => {\n    this.value = value;\n    return this.setOperation(PatchOperation.ADD);\n  };\n\n  replace = (value) => {\n    this.value = value;\n    return this.setOperation(PatchOperation.REPLACE);\n  };\n\n  remove = () => this.setOperation(PatchOperation.REMOVE);\n\n  setListRemove = <T>(items: T[], removedItemEquals: (item: T) => boolean) => {\n    this.value = undefined;\n    this.operation = PatchOperation.REMOVE;\n    if (items) {\n      const foundIndex = items.findIndex(removedItemEquals);\n      if (foundIndex < 0) {\n        this.valid = false; // do not do anything\n      } else {\n        this.valueIndex = items.length === 1 ? -1 : foundIndex; // delete the whole list if last value there\n      }\n    } else {\n      this.valueIndex = -1; // remove the empty list\n    }\n    return this;\n  };\n\n  setListUpdate = <T>(\n    item: T,\n    items?: T[],\n    updatedItemEquals: (other: T, updatedItem: T) => boolean = (other, updatedValue) =>\n      other === updatedValue,\n  ) => {\n    if (items) {\n      const foundIndex = items.findIndex((other) => updatedItemEquals(other, item));\n      if (foundIndex < 0) {\n        this.value = item;\n        this.valueIndex = items.length;\n        this.operation = PatchOperation.ADD;\n      } else if (_.isEqual(items[foundIndex], item)) {\n        this.valid = false; // no change\n      } else {\n        this.value = item;\n        this.valueIndex = foundIndex;\n        this.operation = PatchOperation.REPLACE;\n      }\n    } else {\n      // list is missing - add the whole list\n      this.value = [item];\n      this.valueIndex = -1;\n      this.operation = PatchOperation.ADD;\n    }\n    return this;\n  };\n\n  setObjectRemove = (key: string, object: { [k: string]: any }) => {\n    if (_.has(object, [key])) {\n      this.value = undefined;\n      this.valueKey = key;\n      this.operation = PatchOperation.REMOVE;\n    } else {\n      this.valid = false;\n    }\n    return this;\n  };\n\n  setObjectUpdate = (key: string, value: any, object: { [k: string]: any }) => {\n    if (object == null) {\n      this.value = { [key]: value };\n    } else if (object[key] === value) {\n      this.valid = false;\n    } else {\n      this.value = value;\n      this.valueKey = key;\n    }\n    this.operation = _.has(object, [key]) ? PatchOperation.REPLACE : PatchOperation.ADD;\n    return this;\n  };\n\n  isPatchValid = () => this.valid && !!(this.path && this.operation);\n\n  build = (): Patch => {\n    if (!this.isPatchValid()) {\n      return null;\n    }\n\n    let resultPath;\n\n    if (this.valueIndex < 0) {\n      resultPath = this.valueKey\n        ? assureEndsWith(this.path, `/${patchSafeValue(this.valueKey)}`)\n        : this.path;\n    } else {\n      resultPath = `${assureEndsWith(this.path, '/')}${this.valueIndex}`;\n    }\n\n    const result: Patch = {\n      op: this.operation,\n      path: resultPath,\n    };\n\n    if (this.operation !== PatchOperation.REMOVE) {\n      result.value = this.value;\n    }\n\n    return result;\n  };\n\n  buildAddObjectKeysPatches = (\n    newObject: { [k: string]: any },\n    oldObject: { [k: string]: any },\n  ): Patch[] => {\n    if (!newObject) {\n      return [];\n    }\n    let builders;\n    if (!oldObject) {\n      builders = [new PatchBuilder(this.path).add(newObject)];\n    } else {\n      builders = Object.keys(newObject).map((key) =>\n        new PatchBuilder(this.path).setObjectUpdate(key, newObject[key], oldObject),\n      );\n    }\n\n    return _.compact(builders.map((u) => u.build()));\n  };\n}\n","import { coFetchJSON } from '@console/internal/co-fetch';\nimport { history } from '@console/internal/components/utils';\nimport { deleteResourceModal } from '../components/modals';\n\nexport const deleteHelmRelease = (releaseName: string, namespace: string, redirect?: string) => {\n  return {\n    label: 'Uninstall Helm Release',\n    callback: () => {\n      deleteResourceModal({\n        blocking: true,\n        resourceName: releaseName,\n        resourceType: 'Helm Release',\n        actionLabel: 'Uninstall',\n        redirect,\n        onSubmit: () => {\n          return coFetchJSON.delete(\n            `/api/helm/release?name=${releaseName}&ns=${namespace}`,\n            null,\n            null,\n            -1,\n          );\n        },\n      });\n    },\n  };\n};\n\nexport const upgradeHelmRelease = (\n  releaseName: string,\n  namespace: string,\n  actionOrigin: string,\n) => ({\n  label: 'Upgrade',\n  callback: () => {\n    history.push(\n      `/helm-releases/ns/${namespace}/${releaseName}/upgrade?actionOrigin=${actionOrigin}`,\n    );\n  },\n});\n\nexport const rollbackHelmRelease = (\n  releaseName: string,\n  namespace: string,\n  actionOrigin: string,\n) => ({\n  label: 'Rollback',\n  callback: () => {\n    history.push(\n      `/helm-releases/ns/${namespace}/${releaseName}/rollback?actionOrigin=${actionOrigin}`,\n    );\n  },\n});\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { Gallery, GalleryItem } from '@patternfly/react-core';\nimport { CatalogTile } from '@patternfly/react-catalog-view-extension';\nimport { connect } from 'react-redux';\nimport { history, PageHeading, useAccessReview } from '@console/internal/components/utils';\nimport { useExtensions } from '@console/plugin-sdk';\nimport { RootState } from '@console/internal/redux';\nimport { isAddAction, AddAction } from '../extensions/add-actions';\nimport './EmptyState.scss';\nimport { ALL_NAMESPACES_KEY } from '@console/shared';\n\nconst navigateTo = (e: React.SyntheticEvent, url: string) => {\n  history.push(url);\n  e.preventDefault();\n};\n\ninterface ItemProps {\n  action: AddAction;\n  namespace: string;\n}\n\nconst Item: React.FC<ItemProps> = ({\n  action: {\n    properties: { id, label, description, icon, iconClass, url, accessReview },\n  },\n  namespace,\n}) => {\n  const access =\n    !accessReview ||\n    // Defined extensions are immutable. This check will be consistent.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    accessReview.map((descriptor) => useAccessReview({ namespace, ...descriptor })).every((x) => x);\n  if (namespace === ALL_NAMESPACES_KEY && url.match(/:namespace\\b/)) {\n    // URL expects namespace scope\n    return null;\n  }\n  const resolvedUrl = url.replace(/:namespace\\b/g, namespace);\n  return access ? (\n    <GalleryItem>\n      <CatalogTile\n        data-test-id={id}\n        className=\"odc-empty-state__tile\"\n        onClick={(e: React.SyntheticEvent) => navigateTo(e, resolvedUrl)}\n        href={resolvedUrl}\n        title={label}\n        iconImg={typeof icon === 'string' ? icon : undefined}\n        iconClass={iconClass}\n        icon={React.isValidElement(icon) ? icon : undefined}\n        description={description}\n      />\n    </GalleryItem>\n  ) : null;\n};\n\ninterface StateProps {\n  activeNamespace: string;\n}\n\ninterface EmptySProps {\n  title: string;\n  hintBlock?: React.ReactNode;\n}\n\ntype Props = EmptySProps & StateProps;\n\nconst ODCEmptyState: React.FC<Props> = ({\n  title,\n  activeNamespace,\n  hintBlock = 'Select a way to create an application, component or service from one of the options.',\n}) => {\n  const addActionExtensions = useExtensions<AddAction>(\n    isAddAction,\n  ).filter(({ properties: { hide } }) => (hide ? hide() : true));\n  return (\n    <>\n      <div className=\"odc-empty-state__title\">\n        <PageHeading title={title} />\n        {hintBlock && (\n          <div className=\"co-catalog-page__description odc-empty-state__hint-block\">\n            {hintBlock}\n          </div>\n        )}\n      </div>\n      <div className=\"odc-empty-state__content\">\n        <Gallery className=\"co-catalog-tile-view\" gutter=\"sm\">\n          {addActionExtensions.map((action) => (\n            <Item key={action.properties.id} namespace={activeNamespace} action={action} />\n          ))}\n        </Gallery>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => {\n  return {\n    activeNamespace: state.UI.get('activeNamespace'),\n  };\n};\n\nexport default connect<StateProps>(mapStateToProps)(ODCEmptyState);\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { HintBlock, LoadingBox, FirehoseResult } from '@console/internal/components/utils';\nimport ODCEmptyState from './EmptyState';\n\nexport interface ProjectsExistWrapperProps {\n  title: string;\n  projects?: FirehoseResult;\n  children: React.ReactElement;\n}\n\nconst ProjectsExistWrapper: React.FC<ProjectsExistWrapperProps> = ({\n  title,\n  projects,\n  children,\n}) => {\n  if (!projects.loaded) {\n    return <LoadingBox />;\n  }\n\n  if (_.isEmpty(projects.data)) {\n    return (\n      <ODCEmptyState\n        title={title}\n        hintBlock={\n          <HintBlock title=\"No projects exist\">\n            <p>\n              Select one of the following options to create an application, component or service. As\n              part of the creation process a project and application will be created.\n            </p>\n          </HintBlock>\n        }\n      />\n    );\n  }\n\n  return children;\n};\n\nexport default ProjectsExistWrapper;\n","import * as React from 'react';\nimport {\n  Title,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n} from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\n\nconst HelmReleaseNotesEmptyState: React.FC = () => (\n  <EmptyState variant={EmptyStateVariant.full}>\n    <EmptyStateIcon icon={InfoCircleIcon} />\n    <Title size=\"md\">No Release Notes Available</Title>\n    <EmptyStateBody>Release Notes are not available for this Helm Chart.</EmptyStateBody>\n  </EmptyState>\n);\n\nexport default HelmReleaseNotesEmptyState;\n","import * as React from 'react';\nimport { HelmRelease } from '../../helm-types';\nimport { Timestamp } from '@console/internal/components/utils';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\n\ninterface HelmChartSummaryProps {\n  obj: K8sResourceKind;\n  helmRelease: HelmRelease;\n}\n\nconst HelmChartSummary: React.FC<HelmChartSummaryProps> = ({ obj, helmRelease }) => {\n  if (!helmRelease) return null;\n\n  const {\n    chart: {\n      metadata: { name: chartName, version: chartVersion, appVersion },\n    },\n    info: { last_deployed: updated },\n  } = helmRelease;\n\n  const {\n    metadata: {\n      labels: { version: revision },\n    },\n  } = obj;\n\n  return (\n    <dl className=\"co-m-pane__details\">\n      <dt>Chart Name</dt>\n      <dd>{chartName}</dd>\n      <dt>Chart Version</dt>\n      <dd>{chartVersion}</dd>\n      <dt>App Version</dt>\n      <dd>{appVersion}</dd>\n      <dt>Revision</dt>\n      <dd>{revision}</dd>\n      <dt>Updated</dt>\n      <dd>\n        <Timestamp timestamp={updated} />\n      </dd>\n    </dl>\n  );\n};\n\nexport default HelmChartSummary;\n","import * as React from 'react';\nimport { ResourceSummary, SectionHeading } from '@console/internal/components/utils';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { HelmRelease } from '../../helm-types';\nimport HelmChartSummary from './HelmChartSummary';\n\nexport interface HelmReleaseOverviewProps {\n  obj: K8sResourceKind;\n  customData: HelmRelease;\n}\n\nconst HelmReleaseOverview: React.FC<HelmReleaseOverviewProps> = ({ obj, customData }) => {\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text=\"Helm Release Details\" />\n      <div className=\"row\">\n        <div className=\"col-sm-6\">\n          <ResourceSummary resource={obj} customPathName={'metadata.labels.name'} />\n        </div>\n        <div className=\"col-sm-6\">\n          <HelmChartSummary helmRelease={customData} obj={obj} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HelmReleaseOverview;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport cx from 'classnames';\nimport { FormHelperText } from '@patternfly/react-core';\nimport './FormSection.scss';\n\nexport interface FormSectionProps {\n  title?: React.ReactNode;\n  subTitle?: React.ReactNode;\n  fullWidth?: boolean;\n  children: React.ReactNode;\n  flexLayout?: boolean;\n  extraMargin?: boolean;\n}\n\nconst flexStyle: React.CSSProperties = {\n  display: 'flex',\n  flex: 1,\n  flexDirection: 'column',\n  margin: 'var(--pf-global--spacer--md) 0',\n};\n\nconst FormSection: React.FC<FormSectionProps> = ({\n  title,\n  subTitle,\n  fullWidth,\n  children,\n  flexLayout,\n  extraMargin,\n}) => (\n  <div\n    className={cx('pf-c-form', {\n      'co-m-pane__form': !fullWidth,\n      'odc-form-section--extra-margin': extraMargin,\n    })}\n    style={flexLayout ? flexStyle : {}}\n  >\n    {title && <h2 className=\"odc-form-section__heading\">{title}</h2>}\n    {subTitle && <FormHelperText isHidden={false}>{subTitle}</FormHelperText>}\n    {children}\n  </div>\n);\n\nexport default FormSection;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { ListPage } from '@console/internal/components/factory';\nimport { ProjectsTable } from '@console/internal/components/namespace';\nimport { PageHeading } from '@console/internal/components/utils';\nimport './ProjectListPage.scss';\n\nexport interface ProjectListPageProps {\n  title: string;\n  listComponent?: React.ComponentType<any>;\n  children?: React.ReactNode;\n  badge?: React.ReactNode;\n}\nconst ProjectListPage: React.FC<ProjectListPageProps> = ({\n  badge,\n  title,\n  children,\n  listComponent,\n  ...listPageProps\n}) => (\n  <div className=\"odc-project-list-page\">\n    <PageHeading title={title} badge={badge}>\n      {children}\n    </PageHeading>\n    <hr className=\"odc-project-list-page__section-border\" />\n    <ListPage\n      {...listPageProps}\n      showTitle={false}\n      kind=\"Project\"\n      ListComponent={listComponent || ProjectsTable}\n      canCreate={false}\n      filterLabel=\"by name or display name\"\n      textFilter=\"project-name\"\n    />\n  </div>\n);\n\nexport default ProjectListPage;\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { action } from 'mobx';\nimport { connect } from 'react-redux';\nimport { Button, ToolbarItem, Tooltip } from '@patternfly/react-core';\nimport { TopologyIcon } from '@patternfly/react-icons';\nimport {\n  TopologyView,\n  TopologyControlBar,\n  createTopologyControlButtons,\n  defaultControlButtonsOptions,\n} from '@patternfly/react-topology';\nimport {\n  Visualization,\n  VisualizationSurface,\n  isNode,\n  isEdge,\n  BaseEdge,\n  Model,\n  SELECTION_EVENT,\n  SelectionEventListener,\n  GROUPS_LAYER,\n  TOP_LAYER,\n  BOTTOM_LAYER,\n  DEFAULT_LAYER,\n} from '@console/topology';\nimport { RootState } from '@console/internal/redux';\nimport { getActiveApplication } from '@console/internal/reducers/ui';\nimport { selectOverviewDetailsTab } from '@console/internal/actions/ui';\nimport { getEventSourceStatus } from '@console/knative-plugin/src/topology/knative-topology-utils';\nimport {\n  getQueryArgument,\n  setQueryArgument,\n  removeQueryArgument,\n} from '@console/internal/components/utils';\nimport KnativeComponentFactory from '@console/knative-plugin/src/topology/components/knativeComponentFactory';\nimport { KubevirtComponentFactory } from '@console/kubevirt-plugin/src/topology/components/kubevirtComponentFactory';\nimport { TYPE_VIRTUAL_MACHINE } from '@console/kubevirt-plugin/src/topology/components/const';\nimport TopologyVmPanel from '@console/kubevirt-plugin/src/topology/TopologyVmPanel';\nimport { useAddToProjectAccess } from '../../utils/useAddToProjectAccess';\nimport TopologySideBar from './TopologySideBar';\nimport {\n  GraphData,\n  TopologyDataModel,\n  TopologyDataObject,\n  SHOW_GROUPING_HINT_EVENT,\n  ShowGroupingHintEventListener,\n} from './topology-types';\nimport TopologyResourcePanel from './TopologyResourcePanel';\nimport TopologyApplicationPanel from './application-panel/TopologyApplicationPanel';\nimport ConnectedTopologyEdgePanel from './TopologyEdgePanel';\nimport { topologyModelFromDataModel } from './data-transforms/topology-model';\nimport { layoutFactory, COLA_LAYOUT, COLA_FORCE_LAYOUT } from './layouts/layoutFactory';\nimport { TYPE_APPLICATION_GROUP, ComponentFactory } from './components';\nimport TopologyFilterBar from './filters/TopologyFilterBar';\nimport {\n  getTopologyFilters,\n  getTopologySearchQuery,\n  TopologyFilters,\n  TOPOLOGY_SEARCH_FILTER_KEY,\n  FILTER_ACTIVE_CLASS,\n} from './filters';\nimport TopologyHelmReleasePanel from './helm/TopologyHelmReleasePanel';\nimport { TYPE_HELM_RELEASE, TYPE_HELM_WORKLOAD } from './helm/components/const';\nimport { HelmComponentFactory } from './helm/components/helmComponentFactory';\nimport { TYPE_OPERATOR_BACKED_SERVICE } from './operators/components/const';\nimport { OperatorsComponentFactory } from './operators/components/operatorsComponentFactory';\nimport { getServiceBindingStatus } from './topology-utils';\nimport TopologyHelmWorkloadPanel from './helm/TopologyHelmWorkloadPanel';\n\ninterface StateProps {\n  filters: TopologyFilters;\n  application: string;\n  serviceBinding: boolean;\n  eventSourceEnabled: boolean;\n}\n\ninterface DispatchProps {\n  onSelectTab?: (name: string) => void;\n}\n\ninterface TopologyProps {\n  data: TopologyDataModel;\n  namespace: string;\n}\n\nconst graphModel: Model = {\n  graph: {\n    id: 'g1',\n    type: 'graph',\n    layout: COLA_LAYOUT,\n    layers: [BOTTOM_LAYER, GROUPS_LAYER, 'groups2', DEFAULT_LAYER, TOP_LAYER],\n  },\n};\n\ntype ComponentProps = TopologyProps & StateProps & DispatchProps;\n\nconst Topology: React.FC<ComponentProps> = ({\n  data,\n  filters,\n  application,\n  namespace,\n  serviceBinding,\n  eventSourceEnabled,\n  onSelectTab,\n}) => {\n  const visRef = React.useRef<Visualization | null>(null);\n  const applicationRef = React.useRef<string>(null);\n  const componentFactoryRef = React.useRef<ComponentFactory | null>(null);\n  const knativeComponentFactoryRef = React.useRef<KnativeComponentFactory | null>(null);\n  const helmComponentFactoryRef = React.useRef<HelmComponentFactory | null>(null);\n  const operatorsComponentFactoryRef = React.useRef<OperatorsComponentFactory | null>(null);\n  const vmsComponentFactoryRef = React.useRef<KubevirtComponentFactory | null>(null);\n  const [layout, setLayout] = React.useState<string>(graphModel.graph.layout);\n  const [model, setModel] = React.useState<Model>();\n  const [graphData, setGraphData] = React.useState<GraphData>();\n  const [selectedIds, setSelectedIds] = React.useState<string[]>([]);\n  const createResourceAccess: string[] = useAddToProjectAccess(namespace);\n  const [dragHint, setDragHint] = React.useState<string>('');\n\n  if (!componentFactoryRef.current) {\n    componentFactoryRef.current = new ComponentFactory(serviceBinding);\n  }\n  if (!knativeComponentFactoryRef.current) {\n    knativeComponentFactoryRef.current = new KnativeComponentFactory(serviceBinding);\n  }\n  if (!helmComponentFactoryRef.current) {\n    helmComponentFactoryRef.current = new HelmComponentFactory(serviceBinding);\n  }\n  if (!operatorsComponentFactoryRef.current) {\n    operatorsComponentFactoryRef.current = new OperatorsComponentFactory(serviceBinding);\n  }\n  if (!vmsComponentFactoryRef.current) {\n    vmsComponentFactoryRef.current = new KubevirtComponentFactory(serviceBinding);\n  }\n\n  if (!visRef.current) {\n    visRef.current = new Visualization();\n    visRef.current.registerLayoutFactory(layoutFactory);\n    visRef.current.registerComponentFactory(componentFactoryRef.current.getFactory());\n    // TODO: Use Plugins\n    visRef.current.registerComponentFactory(knativeComponentFactoryRef.current.getFactory());\n    visRef.current.registerComponentFactory(helmComponentFactoryRef.current.getFactory());\n    visRef.current.registerComponentFactory(operatorsComponentFactoryRef.current.getFactory());\n    visRef.current.registerComponentFactory(vmsComponentFactoryRef.current.getFactory());\n    visRef.current.addEventListener<SelectionEventListener>(SELECTION_EVENT, (ids: string[]) => {\n      // set empty selection when selecting the graph\n      if (ids.length > 0 && ids[0] === graphModel.graph.id) {\n        setSelectedIds([]);\n        removeQueryArgument('selectId');\n      } else {\n        setSelectedIds(ids);\n        ids.length > 0 ? setQueryArgument('selectId', ids[0]) : removeQueryArgument('selectId');\n      }\n    });\n    visRef.current.addEventListener<ShowGroupingHintEventListener>(\n      SHOW_GROUPING_HINT_EVENT,\n      (element, hint) => {\n        setDragHint(hint);\n      },\n    );\n    visRef.current.fromModel(graphModel);\n  }\n\n  React.useEffect(() => {\n    const newGraphData: GraphData = {\n      createResourceAccess,\n      namespace,\n      eventSourceEnabled,\n    };\n    visRef.current.getGraph().setData(newGraphData);\n    setGraphData(newGraphData);\n  }, [namespace, createResourceAccess, eventSourceEnabled]);\n\n  React.useEffect(() => {\n    const newModel = topologyModelFromDataModel(data, application, filters);\n    visRef.current.fromModel(newModel);\n    setModel(newModel);\n    if (selectedIds.length && !visRef.current.getElementById(selectedIds[0])) {\n      setSelectedIds([]);\n    } else {\n      const selectId = getQueryArgument('selectId');\n      const selectTab = getQueryArgument('selectTab');\n      visRef.current.getElementById(selectId) && setSelectedIds([selectId]);\n      if (selectTab) {\n        onSelectTab(selectTab);\n        removeQueryArgument('selectTab');\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  React.useEffect(() => {\n    if (!applicationRef.current) {\n      applicationRef.current = application;\n      return;\n    }\n    if (application !== applicationRef.current) {\n      applicationRef.current = application;\n      visRef.current.getGraph().reset();\n      visRef.current.getGraph().layout();\n    }\n  }, [application]);\n\n  React.useEffect(() => {\n    let resizeTimeout = null;\n    if (selectedIds.length > 0) {\n      const selectedEntity = visRef.current.getElementById(selectedIds[0]);\n      if (selectedEntity) {\n        const visibleEntity = isNode(selectedEntity)\n          ? selectedEntity\n          : (selectedEntity as BaseEdge).getSource();\n        resizeTimeout = setTimeout(\n          action(() => {\n            visRef.current\n              .getGraph()\n              .panIntoView(visibleEntity, { offset: 20, minimumVisible: 40 });\n            resizeTimeout = null;\n          }),\n          500,\n        );\n      }\n    }\n    return () => {\n      if (resizeTimeout) {\n        clearTimeout(resizeTimeout);\n      }\n    };\n  }, [selectedIds]);\n\n  React.useEffect(() => {\n    action(() => {\n      visRef.current.getGraph().setLayout(layout);\n    })();\n  }, [layout]);\n\n  const onSearchChange = (searchQuery) => {\n    if (searchQuery.length > 0) {\n      setQueryArgument(TOPOLOGY_SEARCH_FILTER_KEY, searchQuery);\n      document.body.classList.add(FILTER_ACTIVE_CLASS);\n    } else {\n      removeQueryArgument(TOPOLOGY_SEARCH_FILTER_KEY);\n      document.body.classList.remove(FILTER_ACTIVE_CLASS);\n    }\n  };\n\n  React.useEffect(() => {\n    const searchQuery = getTopologySearchQuery();\n    searchQuery && onSearchChange(searchQuery);\n  }, []);\n\n  const onSidebarClose = () => {\n    setSelectedIds([]);\n    removeQueryArgument('selectId');\n  };\n\n  const renderControlBar = () => {\n    return (\n      <TopologyControlBar\n        controlButtons={[\n          ...createTopologyControlButtons({\n            ...defaultControlButtonsOptions,\n            zoomInCallback: action(() => {\n              visRef.current.getGraph().scaleBy(4 / 3);\n            }),\n            zoomOutCallback: action(() => {\n              visRef.current.getGraph().scaleBy(0.75);\n            }),\n            fitToScreenCallback: action(() => {\n              visRef.current.getGraph().fit(80);\n            }),\n            resetViewCallback: action(() => {\n              visRef.current.getGraph().reset();\n              visRef.current.getGraph().layout();\n            }),\n            legend: false,\n          }),\n        ]}\n      >\n        <div className=\"odc-topology__layout-group\">\n          <Tooltip content=\"Layout 1\">\n            <ToolbarItem className=\"odc-topology__layout-button\" tabIndex={-1}>\n              <Button\n                className={classNames('pf-topology-control-bar__button', {\n                  'pf-m-active': layout === COLA_LAYOUT,\n                })}\n                variant=\"tertiary\"\n                onClick={() => setLayout(COLA_LAYOUT)}\n              >\n                <TopologyIcon className=\"odc-topology__layout-button__icon\" />1\n                <span className=\"sr-only\">Layout 1</span>\n              </Button>\n            </ToolbarItem>\n          </Tooltip>\n          <Tooltip content=\"Layout 2\">\n            <ToolbarItem className=\"odc-topology__layout-button\" tabIndex={-1}>\n              <Button\n                className={classNames('pf-topology-control-bar__button', {\n                  'pf-m-active': layout === COLA_FORCE_LAYOUT,\n                })}\n                variant=\"tertiary\"\n                onClick={() => setLayout(COLA_FORCE_LAYOUT)}\n              >\n                <TopologyIcon className=\"odc-topology__layout-button__icon\" />2\n                <span className=\"sr-only\">Layout 2</span>\n              </Button>\n            </ToolbarItem>\n          </Tooltip>\n        </div>\n      </TopologyControlBar>\n    );\n  };\n\n  const selectedItemDetails = () => {\n    const selectedEntity = selectedIds[0] ? visRef.current.getElementById(selectedIds[0]) : null;\n    if (isNode(selectedEntity)) {\n      if (selectedEntity.getType() === TYPE_APPLICATION_GROUP) {\n        return (\n          <TopologyApplicationPanel\n            graphData={graphData}\n            application={{\n              id: selectedEntity.getId(),\n              name: selectedEntity.getLabel(),\n              resources: selectedEntity.getData().groupResources,\n            }}\n          />\n        );\n      }\n      // TODO: Use Plugins\n      if (selectedEntity.getType() === TYPE_HELM_RELEASE) {\n        return <TopologyHelmReleasePanel helmRelease={selectedEntity} />;\n      }\n      if (selectedEntity.getType() === TYPE_HELM_WORKLOAD) {\n        return <TopologyHelmWorkloadPanel item={selectedEntity.getData() as TopologyDataObject} />;\n      }\n      if (selectedEntity.getType() === TYPE_OPERATOR_BACKED_SERVICE) {\n        return null;\n      }\n      if (selectedEntity.getType() === TYPE_VIRTUAL_MACHINE) {\n        return <TopologyVmPanel vmNode={selectedEntity} />;\n      }\n      return <TopologyResourcePanel item={selectedEntity.getData() as TopologyDataObject} />;\n    }\n\n    if (isEdge(selectedEntity)) {\n      return <ConnectedTopologyEdgePanel edge={selectedEntity as BaseEdge} data={data} />;\n    }\n    return null;\n  };\n\n  const renderSideBar = () => {\n    const selectedEntity =\n      selectedIds.length === 0 ? null : visRef.current.getElementById(selectedIds[0]);\n    const details = selectedItemDetails();\n    if (!selectedEntity || !details) {\n      return null;\n    }\n\n    return (\n      <TopologySideBar show={!!selectedEntity && !!details} onClose={onSidebarClose}>\n        {selectedEntity && details}\n      </TopologySideBar>\n    );\n  };\n\n  if (!model) {\n    return null;\n  }\n\n  const sideBar = renderSideBar();\n\n  return (\n    <TopologyView\n      viewToolbar={\n        <TopologyFilterBar visualization={visRef.current} onSearchChange={onSearchChange} />\n      }\n      controlBar={renderControlBar()}\n      sideBar={sideBar}\n      sideBarOpen={!!sideBar}\n    >\n      <VisualizationSurface visualization={visRef.current} state={{ selectedIds }} />\n      {dragHint && <div className=\"odc-topology__hint-container\">{dragHint}</div>}\n    </TopologyView>\n  );\n};\n\nconst TopologyStateToProps = (state: RootState): StateProps => {\n  return {\n    filters: getTopologyFilters(state),\n    application: getActiveApplication(state),\n    serviceBinding: getServiceBindingStatus(state),\n    eventSourceEnabled: getEventSourceStatus(state),\n  };\n};\n\nconst TopologyDispatchToProps = (dispatch): DispatchProps => ({\n  onSelectTab: (name) => dispatch(selectOverviewDetailsTab(name)),\n});\n\nexport default connect<StateProps, DispatchProps, TopologyProps>(\n  TopologyStateToProps,\n  TopologyDispatchToProps,\n)(Topology);\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { match as RMatch } from 'react-router';\nimport { Firehose } from '@console/internal/components/utils';\nimport * as plugins from '@console/internal/plugins';\nimport { getResourceList } from '@console/shared';\nimport { referenceForModel, K8sResourceKind } from '@console/internal/module/k8s';\nimport { RootState } from '@console/internal/redux';\nimport { safeLoadAll } from 'js-yaml';\nimport { ServiceBindingRequestModel } from '../../models';\nimport { transformTopologyData } from './data-transforms/data-transformer';\nimport { allowedResources, getHelmReleaseKey, getServiceBindingStatus } from './topology-utils';\nimport { TopologyDataModel, TopologyDataResources, TrafficData } from './topology-types';\nimport { HelmReleaseResourcesMap } from '../helm/helm-types';\nimport { fetchHelmReleases } from '../helm/helm-utils';\n\nexport interface RenderProps {\n  data?: TopologyDataModel;\n  namespace: string;\n  loaded: boolean;\n  loadError: string;\n  serviceBinding: boolean;\n}\n\ninterface StateProps {\n  resourceList: plugins.OverviewCRD[];\n  serviceBinding: boolean;\n}\n\nexport interface ControllerProps {\n  utils: Function[];\n  loaded?: boolean;\n  loadError?: any;\n  resources?: TopologyDataResources;\n  render(props: RenderProps): React.ReactElement;\n  namespace: string;\n  serviceBinding: boolean;\n  trafficData?: TrafficData;\n}\n\nexport interface TopologyDataControllerProps extends StateProps {\n  match: RMatch<{\n    name?: string;\n  }>;\n  render(RenderProps): React.ReactElement;\n}\n\nconst Controller: React.FC<ControllerProps> = ({\n  render,\n  resources,\n  loaded,\n  loadError,\n  utils,\n  namespace,\n  serviceBinding,\n  trafficData,\n}) => {\n  const secretCount = React.useRef<number>(-1);\n  const [helmResourcesMap, setHelmResourcesMap] = React.useState<HelmReleaseResourcesMap>(null);\n  React.useEffect(() => {\n    const count = resources?.secrets?.data?.length ?? 0;\n    if (\n      (resources.secrets?.loaded && count !== secretCount.current) ||\n      resources.secrets?.loadError\n    ) {\n      secretCount.current = count;\n      if (count === 0) {\n        setHelmResourcesMap({});\n        return;\n      }\n\n      fetchHelmReleases(namespace)\n        .then((releases) => {\n          setHelmResourcesMap(\n            releases.reduce((acc, release) => {\n              try {\n                const manifestResources: K8sResourceKind[] = safeLoadAll(release.manifest);\n                manifestResources.forEach((resource) => {\n                  const resourceKindName = getHelmReleaseKey(resource);\n                  if (!acc.hasOwnProperty(resourceKindName)) {\n                    acc[resourceKindName] = {\n                      releaseName: release.name,\n                      releaseVersion: release.version,\n                      chartIcon: release.chart.metadata.icon,\n                      manifestResources,\n                      releaseNotes: release.info.notes,\n                    };\n                  }\n                });\n              } catch (e) {\n                // eslint-disable-next-line no-console\n                console.error(e);\n              }\n              return acc;\n            }, {}),\n          );\n        })\n        .catch(() => {\n          setHelmResourcesMap({});\n        });\n    }\n  }, [namespace, resources, resources.secrets, secretCount, setHelmResourcesMap]);\n\n  return render({\n    loaded: loaded && !!helmResourcesMap,\n    loadError,\n    namespace,\n    serviceBinding,\n    data:\n      loaded && helmResourcesMap\n        ? transformTopologyData(resources, allowedResources, utils, trafficData, helmResourcesMap)\n        : null,\n  });\n};\n\nexport const TopologyDataController: React.FC<TopologyDataControllerProps> = ({\n  match,\n  render,\n  resourceList,\n  serviceBinding,\n}) => {\n  const namespace = match.params.name;\n  const { resources, utils } = getResourceList(namespace, resourceList);\n  if (serviceBinding) {\n    resources.push({\n      isList: true,\n      kind: referenceForModel(ServiceBindingRequestModel),\n      namespace,\n      prop: 'serviceBindingRequests',\n      optional: true,\n    });\n  }\n\n  return (\n    <Firehose resources={resources}>\n      <Controller\n        render={render}\n        utils={utils}\n        serviceBinding={serviceBinding}\n        namespace={namespace}\n      />\n    </Firehose>\n  );\n};\n\nconst DataControllerStateToProps = (state: RootState) => {\n  const resourceList = plugins.registry\n    .getOverviewCRDs()\n    .filter((resource) => state.FLAGS.get(resource.properties.required));\n  return {\n    resourceList,\n    serviceBinding: getServiceBindingStatus(state),\n  };\n};\n\nexport default connect(DataControllerStateToProps)(TopologyDataController);\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash';\nimport { Edge } from '@console/topology';\nimport { RootState } from '@console/internal/redux';\nimport { referenceFor, K8sResourceKind } from '@console/internal/module/k8s';\nimport {\n  ActionsMenu,\n  ResourceLink,\n  SidebarSectionHeading,\n  ExternalLink,\n} from '@console/internal/components/utils';\nimport {\n  TYPE_EVENT_SOURCE_LINK,\n  TYPE_REVISION_TRAFFIC,\n} from '@console/knative-plugin/src/topology/const';\nimport { TYPE_CONNECTS_TO, TYPE_SERVICE_BINDING, TYPE_TRAFFIC_CONNECTOR } from './components/const';\nimport { edgeActions } from './actions/edgeActions';\nimport { TopologyDataModel, TopologyDataObject } from './topology-types';\nimport { getKialiLink } from './topology-utils';\n\ntype StateProps = {\n  consoleLinks?: K8sResourceKind[];\n};\n\nexport type TopologyEdgePanelProps = {\n  edge: Edge;\n  data: TopologyDataModel;\n} & StateProps;\n\nconst connectorTypeToTitle = (type: string): string => {\n  switch (type) {\n    case TYPE_CONNECTS_TO:\n      return 'Visual connector';\n    case TYPE_SERVICE_BINDING:\n      return 'Binding connector';\n    case TYPE_REVISION_TRAFFIC:\n      return 'Traffic distribution connector';\n    case TYPE_EVENT_SOURCE_LINK:\n      return 'Event source connector';\n    case TYPE_TRAFFIC_CONNECTOR:\n      return 'Traffic connector';\n    default:\n      return '';\n  }\n};\n\nconst TopologyEdgePanel: React.FC<TopologyEdgePanelProps> = ({ edge, data, consoleLinks }) => {\n  const source: TopologyDataObject = edge.getSource().getData();\n  const target: TopologyDataObject = edge.getTarget().getData();\n  const resources = [source?.resources?.obj, target?.resources?.obj];\n  const nodes = data.graph.nodes.map((n) => edge.getController().getNodeById(n.id));\n  const {\n    metadata: { namespace },\n  } = resources[1];\n\n  return (\n    <div className=\"overview__sidebar-pane resource-overview\">\n      <div className=\"overview__sidebar-pane-head resource-overview__heading\">\n        <h1 className=\"co-m-pane__heading\">\n          <div className=\"co-m-pane__name co-resource-item\">\n            {connectorTypeToTitle(edge.getType())}\n          </div>\n          <div className=\"co-actions\">\n            <ActionsMenu actions={edgeActions(edge, nodes)} />\n          </div>\n        </h1>\n      </div>\n      <ul\n        className={classNames(\n          'co-m-horizontal-nav__menu',\n          'co-m-horizontal-nav__menu--within-sidebar',\n          'co-m-horizontal-nav__menu--within-overview-sidebar',\n          'odc-application-resource-tab',\n        )}\n      >\n        <li className=\"co-m-horizontal-nav__menu-item\">\n          <button type=\"button\">Resources</button>\n        </li>\n      </ul>\n      <div className=\"overview__sidebar-pane-body\">\n        <SidebarSectionHeading text=\"Connections\" />\n        <ul className=\"list-group\">\n          {_.map(resources, (resource) => {\n            if (!resource) {\n              return null;\n            }\n            const {\n              metadata: { name, uid },\n            } = resource;\n            return (\n              <li className=\"list-group-item  container-fluid\" key={uid}>\n                <ResourceLink kind={referenceFor(resource)} name={name} namespace={namespace} />\n              </li>\n            );\n          })}\n        </ul>\n\n        {edge.getType() === TYPE_TRAFFIC_CONNECTOR && (\n          <>\n            <SidebarSectionHeading text=\"Kiali Link\" />\n            <ExternalLink href={getKialiLink(consoleLinks, namespace)} text=\"Kiali Graph View\" />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst TopologyEdgeStateToProps = (state: RootState) => {\n  const consoleLinks = state.UI.get('consoleLinks');\n  return { consoleLinks };\n};\n\nexport default connect(TopologyEdgeStateToProps)(TopologyEdgePanel);\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { matchPath, match as RMatch, Link, Redirect } from 'react-router-dom';\nimport { Tooltip, Popover, Button } from '@patternfly/react-core';\nimport { ListIcon, TopologyIcon, QuestionCircleIcon } from '@patternfly/react-icons';\nimport {\n  StatusBox,\n  Firehose,\n  HintBlock,\n  AsyncComponent,\n  removeQueryArgument,\n} from '@console/internal/components/utils';\n\nimport EmptyState from '../EmptyState';\nimport NamespacedPage, { NamespacedPageVariants } from '../NamespacedPage';\nimport ProjectsExistWrapper from '../ProjectsExistWrapper';\nimport ProjectListPage from '../projects/ProjectListPage';\nimport ConnectedTopologyDataController, { RenderProps } from './TopologyDataController';\nimport Topology from './Topology';\nimport TopologyShortcuts from './TopologyShortcuts';\nimport { LAST_TOPOLOGY_VIEW_LOCAL_STORAGE_KEY } from './components/const';\n\nimport './TopologyPage.scss';\nimport { TOPOLOGY_SEARCH_FILTER_KEY } from './filters';\n\nexport interface TopologyPageProps {\n  match: RMatch<{\n    name?: string;\n  }>;\n}\n\nconst setTopologyActiveView = (id: string) => {\n  localStorage.setItem(LAST_TOPOLOGY_VIEW_LOCAL_STORAGE_KEY, id);\n};\n\nconst getTopologyActiveView = () => {\n  return localStorage.getItem(LAST_TOPOLOGY_VIEW_LOCAL_STORAGE_KEY);\n};\n\nconst EmptyMsg = () => (\n  <EmptyState\n    title=\"Topology\"\n    hintBlock={\n      <HintBlock title=\"No workloads found\">\n        <p>\n          To add content to your project, create an application, component or service using one of\n          these options.\n        </p>\n      </HintBlock>\n    }\n  />\n);\n\nexport function renderTopology({ loaded, loadError, data, namespace }: RenderProps) {\n  return (\n    <StatusBox\n      data={data ? data.graph.nodes : null}\n      label=\"Topology\"\n      loaded={loaded}\n      loadError={loadError}\n      EmptyMsg={EmptyMsg}\n    >\n      <div className=\"odc-topology\">\n        <Topology data={data} namespace={namespace} />\n      </div>\n    </StatusBox>\n  );\n}\n\nexport const TopologyPage: React.FC<TopologyPageProps> = ({ match }) => {\n  const namespace = match.params.name;\n  const showListView = !!matchPath(match.path, {\n    path: '*/list',\n    exact: true,\n  });\n  const showGraphView = !!matchPath(match.path, {\n    path: '*/graph',\n    exact: true,\n  });\n\n  const handleNamespaceChange = (ns: string) => {\n    if (ns !== namespace) {\n      removeQueryArgument(TOPOLOGY_SEARCH_FILTER_KEY);\n    }\n  };\n\n  React.useEffect(() => setTopologyActiveView(showListView && !showGraphView ? 'list' : 'graph'), [\n    showListView,\n    showGraphView,\n  ]);\n\n  if (!showGraphView && !showListView) {\n    return (\n      <Redirect\n        to={`/topology/${namespace ? `ns/${namespace}` : 'all-namespaces'}/${\n          getTopologyActiveView() === 'list' ? 'list' : 'graph'\n        }`}\n      />\n    );\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>Topology</title>\n      </Helmet>\n      <NamespacedPage\n        variant={showListView ? NamespacedPageVariants.light : NamespacedPageVariants.default}\n        hideApplications={showListView}\n        onNamespaceChange={handleNamespaceChange}\n        toolbar={\n          <>\n            {!showListView && namespace && (\n              <Popover\n                aria-label=\"Shortcuts\"\n                bodyContent={TopologyShortcuts}\n                position=\"left\"\n                maxWidth=\"100vw\"\n              >\n                <Button\n                  type=\"button\"\n                  variant=\"link\"\n                  className=\"odc-topology__shortcuts-button\"\n                  icon={<QuestionCircleIcon />}\n                  data-test-id=\"topology-view-shortcuts\"\n                >\n                  View shortcuts\n                </Button>\n              </Popover>\n            )}\n            <Tooltip position=\"left\" content={showListView ? 'Topology View' : 'List View'}>\n              <Link\n                className=\"pf-c-button pf-m-plain\"\n                to={`/topology/${namespace ? `ns/${namespace}` : 'all-namespaces'}${\n                  showListView ? '/graph' : '/list'\n                }`}\n              >\n                {showListView ? <TopologyIcon size=\"md\" /> : <ListIcon size=\"md\" />}\n              </Link>\n            </Tooltip>\n          </>\n        }\n      >\n        <Firehose resources={[{ kind: 'Project', prop: 'projects', isList: true }]}>\n          <ProjectsExistWrapper title=\"Topology\">\n            {namespace ? (\n              showListView ? (\n                <AsyncComponent\n                  mock={false}\n                  match={match}\n                  title=\"\"\n                  EmptyMsg={EmptyMsg}\n                  emptyBodyClass=\"odc-namespaced-page__content\"\n                  loader={() =>\n                    import(\n                      '@console/internal/components/overview' /* webpackChunkName: \"topology-overview\" */\n                    ).then((m) => m.Overview)\n                  }\n                />\n              ) : (\n                <ConnectedTopologyDataController match={match} render={renderTopology} />\n              )\n            ) : (\n              <ProjectListPage title=\"Topology\">\n                Select a project to view the topology\n              </ProjectListPage>\n            )}\n          </ProjectsExistWrapper>\n        </Firehose>\n      </NamespacedPage>\n    </>\n  );\n};\n\nexport default TopologyPage;\n","import * as React from 'react';\nimport { ResourceOverviewPage } from '@console/internal/components/overview/resource-overview-page';\nimport * as _ from 'lodash';\nimport KnativeResourceOverviewPage from '@console/knative-plugin/src/components/overview/KnativeResourceOverviewPage';\nimport { KebabAction } from '@console/internal/components/utils';\nimport { TopologyDataObject } from './topology-types';\nimport { ModifyApplication } from '../../actions/modify-application';\n\nexport type TopologyResourcePanelProps = {\n  item: TopologyDataObject;\n};\n\nconst TopologyResourcePanel: React.FC<TopologyResourcePanelProps> = ({ item }) => {\n  const resourceItemToShowOnSideBar = item && item.resources;\n  // adds extra check, custom sidebar for all knative resources excluding deployment\n  const itemKind = _.get(item, 'data.kind', null);\n  if (_.get(item, 'data.isKnativeResource', false) && itemKind && itemKind !== 'Deployment') {\n    return <KnativeResourceOverviewPage item={item.resources} />;\n  }\n\n  let customActions: KebabAction[] = null;\n  if (!item.operatorBackedService) {\n    customActions = [ModifyApplication];\n  }\n\n  return (\n    resourceItemToShowOnSideBar && (\n      <ResourceOverviewPage\n        item={resourceItemToShowOnSideBar}\n        kind={resourceItemToShowOnSideBar.obj.kind}\n        customActions={customActions}\n      />\n    )\n  );\n};\n\nexport default TopologyResourcePanel;\n","import * as React from 'react';\nimport { Shortcut, ShortcutTable } from '@console/shared';\n\nconst TopologyShortcuts: React.ReactElement = (\n  <ShortcutTable>\n    <Shortcut drag>Move</Shortcut>\n    <Shortcut shift drag>\n      Edit application grouping\n    </Shortcut>\n    <Shortcut rightClick>Access context menu</Shortcut>\n    <Shortcut click>View details in side panel</Shortcut>\n    <Shortcut hover>Access create connector handle</Shortcut>\n  </ShortcutTable>\n);\n\nexport default TopologyShortcuts;\n","import * as React from 'react';\nimport { TopologySideBar as PFTopologySideBar } from '@patternfly/react-topology';\nimport { CloseButton } from '@console/internal/components/utils';\n\nexport type TopologySideBarProps = {\n  show: boolean;\n  onClose: Function;\n};\n\nconst TopologySideBar: React.FC<TopologySideBarProps> = ({ children, show, onClose }) => (\n  <PFTopologySideBar show={show}>\n    <div className=\"co-sidebar-dismiss clearfix\">\n      <CloseButton onClick={onClose} data-test-id=\"sidebar-close-button\" />\n    </div>\n    {children}\n  </PFTopologySideBar>\n);\n\nexport default TopologySideBar;\n","import { KebabOption } from '@console/internal/components/utils/kebab';\nimport { modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { asAccessReview } from '@console/internal/components/utils';\nimport { Edge, Node } from '@console/topology';\nimport {\n  TYPE_EVENT_SOURCE,\n  TYPE_EVENT_SOURCE_LINK,\n  TYPE_KNATIVE_REVISION,\n  TYPE_KNATIVE_SERVICE,\n  TYPE_REVISION_TRAFFIC,\n} from '@console/knative-plugin/src/topology/const';\nimport { getTopologyResourceObject } from '../topology-utils';\nimport { removeConnection } from '../components/removeConnection';\nimport {\n  TYPE_CONNECTS_TO,\n  TYPE_SERVICE_BINDING,\n  TYPE_TRAFFIC_CONNECTOR,\n} from '../components/const';\nimport { moveConnectionModal } from '../components/MoveConnectionModal';\n\nconst moveConnection = (edge: Edge, availableTargets: Node[]) => {\n  const resourceObj = getTopologyResourceObject(edge.getSource().getData());\n  const resourceModel = modelFor(referenceFor(resourceObj));\n\n  return {\n    label: 'Move Connector',\n    callback: () => {\n      moveConnectionModal({ edge, availableTargets });\n    },\n    isDisabled: availableTargets.length <= 1,\n    accessReview: asAccessReview(resourceModel, resourceObj, 'delete'),\n  };\n};\n\nconst deleteConnection = (edge: Edge) => {\n  const resourceObj = getTopologyResourceObject(edge.getSource().getData());\n  const resourceModel = modelFor(referenceFor(resourceObj));\n  return {\n    label: 'Delete Connector',\n    callback: () => {\n      removeConnection(edge);\n    },\n    accessReview: asAccessReview(resourceModel, resourceObj, 'delete'),\n  };\n};\n\nexport const edgeActions = (edge: Edge, nodes: Node[]): KebabOption[] => {\n  const actions: KebabOption[] = [];\n  const currentTargets = edge\n    .getSource()\n    .getSourceEdges()\n    .map((e) => e.getTarget().getId());\n\n  const availableTargets = nodes\n    .filter((n) => {\n      if (n.getId() === edge.getSource().getId()) {\n        return false;\n      }\n      if (n.getId() !== edge.getTarget().getId() && currentTargets.includes(n.getId())) {\n        return false;\n      }\n      if (n.getType() === TYPE_EVENT_SOURCE) {\n        return false;\n      }\n      switch (edge.getType()) {\n        case TYPE_CONNECTS_TO:\n          return n.getType() !== TYPE_KNATIVE_REVISION && n.getType() !== TYPE_KNATIVE_SERVICE;\n        case TYPE_SERVICE_BINDING:\n          return false;\n        case TYPE_EVENT_SOURCE_LINK:\n          return n.getType() === TYPE_KNATIVE_SERVICE;\n        case TYPE_REVISION_TRAFFIC:\n          return false;\n        case TYPE_TRAFFIC_CONNECTOR:\n          return false;\n        default:\n          return true;\n      }\n    })\n    .sort((n1, n2) => n1.getLabel().localeCompare(n2.getLabel()));\n\n  actions.push(moveConnection(edge, availableTargets));\n\n  switch (edge.getType()) {\n    case TYPE_CONNECTS_TO:\n    case TYPE_SERVICE_BINDING:\n      actions.push(deleteConnection(edge));\n      break;\n    default:\n      break;\n  }\n\n  return actions;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport { K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\nimport { SidebarSectionHeading } from '@console/internal/components/utils';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport TopologyApplicationResourceList from './TopologyApplicationList';\n\nconst MAX_RESOURCES = 5;\n\nexport type ApplicationGroupResourceProps = {\n  title: string;\n  resourcesData: K8sResourceKind[];\n  group: string;\n};\n\nconst ApplicationGroupResource: React.FC<ApplicationGroupResourceProps> = ({\n  title,\n  resourcesData,\n  group,\n}) =>\n  !_.isEmpty(resourcesData) ? (\n    <div className=\"overview__sidebar-pane-body\">\n      <SidebarSectionHeading text={title}>\n        {_.size(resourcesData) > MAX_RESOURCES && (\n          <Link\n            className=\"sidebar__section-view-all\"\n            to={`/search/ns/${getActiveNamespace()}?kind=${referenceFor(\n              resourcesData[0],\n            )}&q=${encodeURIComponent(`app.kubernetes.io/part-of=${group}`)}`}\n          >\n            {`View all (${_.size(resourcesData)})`}\n          </Link>\n        )}\n      </SidebarSectionHeading>\n      <TopologyApplicationResourceList resources={_.take(resourcesData, MAX_RESOURCES)} />\n    </div>\n  ) : null;\n\nexport default ApplicationGroupResource;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\n\nexport type TopologyApplicationResourceListProps = {\n  resources: K8sResourceKind[];\n};\n\nconst TopologyApplicationResourceList: React.FC<TopologyApplicationResourceListProps> = ({\n  resources,\n}) => {\n  return (\n    <ul className=\"list-group\">\n      {_.map(resources, (resource) => {\n        const {\n          metadata: { name, namespace, uid },\n        } = resource;\n        return (\n          <li className=\"list-group-item  container-fluid\" key={uid}>\n            <ResourceLink kind={referenceFor(resource)} name={name} namespace={namespace} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default TopologyApplicationResourceList;\n","import * as React from 'react';\nimport { ResourceIcon, ActionsMenu } from '@console/internal/components/utils';\nimport { GraphData, TopologyApplicationObject } from '../topology-types';\nimport { groupActions } from '../actions/groupActions';\nimport TopologyApplicationResources from './TopologyApplicationResources';\n\nexport type TopologyApplicationPanelProps = {\n  graphData: GraphData;\n  application: TopologyApplicationObject;\n};\n\nconst TopologyApplicationPanel: React.FC<TopologyApplicationPanelProps> = ({\n  graphData,\n  application,\n}) => (\n  <div className=\"overview__sidebar-pane resource-overview\">\n    <div className=\"overview__sidebar-pane-head resource-overview__heading\">\n      <h1 className=\"co-m-pane__heading\">\n        <div className=\"co-m-pane__name co-resource-item\">\n          <ResourceIcon className=\"co-m-resource-icon--lg\" kind=\"application\" />\n          {application.name}\n        </div>\n        <div className=\"co-actions\">\n          <ActionsMenu actions={groupActions(graphData, application)} />\n        </div>\n      </h1>\n    </div>\n    <TopologyApplicationResources resources={application.resources} group={application.name} />\n  </div>\n);\n\nexport default TopologyApplicationPanel;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash';\nimport { modelFor } from '@console/internal/module/k8s';\nimport { TopologyDataObject } from '../topology-types';\nimport { getTopologyResourceObject } from '../topology-utils';\nimport ApplicationGroupResource from './ApplicationGroupResource';\n\nimport './TopologyApplicationResources.scss';\n\nexport type TopologyApplicationResourcesProps = {\n  resources: TopologyDataObject[];\n  group: string;\n};\n\nconst TopologyApplicationResources: React.FC<TopologyApplicationResourcesProps> = ({\n  resources,\n  group,\n}) => {\n  const resourcesData = resources.reduce((acc, currVal) => {\n    const resource = getTopologyResourceObject(currVal);\n    acc[resource.kind] = [...(acc[resource.kind] ? acc[resource.kind] : []), resource];\n    return acc;\n  }, {});\n\n  return (\n    <>\n      <ul\n        className={classNames(\n          'co-m-horizontal-nav__menu',\n          'co-m-horizontal-nav__menu--within-sidebar',\n          'co-m-horizontal-nav__menu--within-overview-sidebar',\n          'odc-application-resource-tab',\n        )}\n      >\n        <li className=\"co-m-horizontal-nav__menu-item\">\n          <button type=\"button\">Resources</button>\n        </li>\n      </ul>\n      {_.map(_.keys(resourcesData), (key) => (\n        <ApplicationGroupResource\n          key={`${group}-${key}`}\n          title={modelFor(key) ? modelFor(key).label : key}\n          resourcesData={resourcesData[key]}\n          group={group}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default TopologyApplicationResources;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Title, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport { Formik, FormikProps, FormikValues } from 'formik';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { PromiseComponent, ResourceIcon } from '@console/internal/components/utils';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { Edge, Node } from '@console/topology';\nimport FormSection from '../../import/section/FormSection';\nimport { TYPE_EVENT_SOURCE_LINK } from '@console/knative-plugin/src/topology/const';\nimport { createSinkConnection } from '@console/knative-plugin/src/topology/knative-topology-utils';\nimport { RootState } from '@console/internal/redux';\nimport { getServiceBindingStatus } from '../topology-utils';\nimport { TYPE_CONNECTS_TO, TYPE_SERVICE_BINDING } from './const';\nimport { createConnection } from './createConnection';\n\ninterface StateProps {\n  serviceBinding: boolean;\n}\ntype MoveConnectionModalProps = {\n  edge: Edge;\n  availableTargets: Node[];\n  cancel?: () => void;\n  close?: () => void;\n};\n\ntype MoveConnectionModalState = {\n  inProgress: boolean;\n  errorMessage: string;\n};\n\nconst nodeItem = (node: Node) => (\n  <span>\n    <span className=\"co-icon-space-r\">\n      <ResourceIcon kind={node.getData().data?.kind} />\n    </span>\n    {node.getLabel()}\n  </span>\n);\n\nconst MoveConnectionForm: React.FC<FormikProps<FormikValues> & MoveConnectionModalProps> = ({\n  handleSubmit,\n  isSubmitting,\n  cancel,\n  values,\n  edge,\n  availableTargets,\n  status,\n}) => {\n  const [isOpen, setOpen] = React.useState<boolean>(false);\n  const isDirty = values.target.getId() !== edge.getTarget().getId();\n\n  const onToggle = () => {\n    setOpen(!isOpen);\n  };\n\n  const dropDownNodeItem = (node: Node) => {\n    return (\n      <DropdownItem\n        key={node.getId()}\n        component=\"button\"\n        onClick={() => {\n          values.target = node;\n          setOpen(false);\n        }}\n      >\n        {nodeItem(node)}\n      </DropdownItem>\n    );\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"modal-content modal-content--no-inner-scroll\">\n      <ModalTitle>Move Connector</ModalTitle>\n      <ModalBody>\n        <Title size=\"sm\" className=\"co-m-form-row\">\n          Connect\n          <strong>{` ${edge.getSource().getLabel()} `}</strong>\n          to\n        </Title>\n        <FormSection fullWidth>\n          <FormGroup fieldId=\"target-node\" label=\"Target\">\n            <Dropdown\n              id=\"target-node-dropdown\"\n              className=\"dropdown--full-width\"\n              toggle={\n                <DropdownToggle id=\"toggle-id\" onToggle={onToggle} iconComponent={CaretDownIcon}>\n                  {nodeItem(values.target)}\n                </DropdownToggle>\n              }\n              isOpen={isOpen}\n              dropdownItems={availableTargets.map(dropDownNodeItem)}\n            />\n          </FormGroup>\n        </FormSection>\n      </ModalBody>\n      <ModalSubmitFooter\n        submitText=\"Move\"\n        submitDisabled={!isDirty}\n        cancel={cancel}\n        inProgress={isSubmitting}\n        errorMessage={status && status.submitError}\n      />\n    </form>\n  );\n};\n\nclass MoveConnectionModal extends PromiseComponent<\n  MoveConnectionModalProps & StateProps,\n  MoveConnectionModalState\n> {\n  private onSubmit = (newTarget: Node): Promise<K8sResourceKind[] | K8sResourceKind> => {\n    const { edge, serviceBinding } = this.props;\n    switch (edge.getType()) {\n      case TYPE_CONNECTS_TO:\n        return createConnection(edge.getSource(), newTarget, edge.getTarget(), serviceBinding);\n      case TYPE_SERVICE_BINDING:\n        return createConnection(edge.getSource(), newTarget, edge.getTarget(), serviceBinding);\n      case TYPE_EVENT_SOURCE_LINK:\n        return createSinkConnection(edge.getSource(), newTarget);\n      default:\n        return Promise.reject(new Error(`Unable to move connector of type ${edge.getType()}.`));\n    }\n  };\n\n  private handleSubmit = (values, actions) => {\n    actions.setSubmitting(true);\n    const { close } = this.props;\n    this.handlePromise(this.onSubmit(values.target))\n      .then(() => {\n        actions.setSubmitting(false);\n        close();\n      })\n      .catch((err) => {\n        actions.setSubmitting(false);\n        actions.setStatus({ submitError: err });\n      });\n  };\n\n  render() {\n    const { edge } = this.props;\n    const initialValues = {\n      target: edge.getTarget(),\n    };\n    return (\n      <Formik\n        initialValues={initialValues}\n        onSubmit={this.handleSubmit}\n        render={(formProps) => <MoveConnectionForm {...formProps} {...this.props} />}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state: RootState): StateProps => {\n  return {\n    serviceBinding: getServiceBindingStatus(state),\n  };\n};\n\nconst ConnectedMoveConnectionModal = connect(mapStateToProps)(MoveConnectionModal);\n\nexport const moveConnectionModal = createModalLauncher((props: MoveConnectionModalProps) => (\n  <ConnectedMoveConnectionModal {...props} />\n));\n","import * as React from 'react';\nimport { Select, SelectVariant, SelectOption, SelectGroup } from '@patternfly/react-core';\nimport { ShowFiltersKeyValue, ExpandFiltersKeyValue, DisplayFilters } from './filter-types';\n\ntype FilterDropdownProps = {\n  filters: DisplayFilters;\n  onChange: (filter: DisplayFilters) => void;\n};\n\nconst FilterDropdown: React.FC<FilterDropdownProps> = ({ filters, onChange }) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const selected = Object.keys(filters).filter((key) => filters[key]);\n\n  const onToggle = (open: boolean): void => setIsOpen(open);\n  const onSelect = (e: React.MouseEvent, key: string) => {\n    onChange({ ...filters, [key]: (e.target as HTMLInputElement).checked });\n  };\n  const showOptions = (\n    <SelectGroup label=\"Show\">\n      {Object.keys(ShowFiltersKeyValue).map((key) => (\n        <SelectOption key={key} value={key}>\n          {ShowFiltersKeyValue[key]}\n        </SelectOption>\n      ))}\n    </SelectGroup>\n  );\n  const expandOptions = (\n    <SelectGroup label=\"Expand\">\n      {Object.keys(ExpandFiltersKeyValue).map((key) => (\n        <SelectOption key={key} value={key}>\n          {ExpandFiltersKeyValue[key]}\n        </SelectOption>\n      ))}\n    </SelectGroup>\n  );\n\n  return (\n    <Select\n      className=\"odc-filter-dropdown__select\"\n      variant={SelectVariant.checkbox}\n      onToggle={onToggle}\n      selections={selected}\n      isExpanded={isOpen}\n      onSelect={onSelect}\n      placeholderText=\"Display Options\"\n      isGrouped\n    >\n      {showOptions}\n      {expandOptions}\n    </Select>\n  );\n};\n\nexport default FilterDropdown;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { Toolbar, ToolbarGroup, ToolbarItem, Popover, Button } from '@patternfly/react-core';\nimport { RootState } from '@console/internal/redux';\nimport { TextFilter } from '@console/internal/components/factory';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { Visualization } from '@console/topology';\nimport { setTopologyFilters } from '../redux/action';\nimport { TopologyFilters, DisplayFilters } from './filter-types';\nimport { getTopologyFilters, getTopologySearchQuery } from './filter-utils';\n\nimport FilterDropdown from './FilterDropdown';\nimport './TopologyFilterBar.scss';\n\ntype StateProps = {\n  filters: TopologyFilters;\n};\n\ntype DispatchProps = {\n  onFiltersChange: (filters: TopologyFilters) => void;\n};\n\ntype OwnProps = {\n  visualization: Visualization;\n  onSearchChange: (searchQuery: string) => void;\n};\n\ntype MergeProps = {\n  onDisplayFiltersChange: (display: DisplayFilters) => void;\n} & StateProps &\n  OwnProps;\n\ntype TopologyFilterBarProps = MergeProps;\n\nconst TopologyFilterBar: React.FC<TopologyFilterBarProps> = ({\n  filters: { display },\n  onDisplayFiltersChange,\n  onSearchChange,\n  visualization,\n}) => {\n  const [searchQuery, setSearchQuery] = React.useState<string>('');\n\n  React.useEffect(() => {\n    const query = getTopologySearchQuery();\n    setSearchQuery(query);\n  }, []);\n\n  const onTextFilterChange = React.useCallback(\n    (text) => {\n      const query = text?.trim();\n      setSearchQuery(query);\n      onSearchChange(query);\n    },\n    [onSearchChange],\n  );\n\n  return (\n    <Toolbar className=\"co-namespace-bar odc-topology-filter-bar\">\n      <ToolbarGroup>\n        <ToolbarItem>\n          <FilterDropdown filters={display} onChange={onDisplayFiltersChange} />\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarGroup className=\"odc-topology-filter-bar__search\">\n        <ToolbarItem>\n          <TextFilter\n            placeholder=\"Find by name...\"\n            value={searchQuery}\n            autoFocus\n            onChange={onTextFilterChange}\n          />\n        </ToolbarItem>\n        <ToolbarItem>\n          <Popover\n            aria-label=\"Find by name\"\n            position=\"left\"\n            bodyContent={\n              <>\n                Search results may appear outside of the visible area.{' '}\n                <Button variant=\"link\" onClick={() => visualization.getGraph().fit(80)} isInline>\n                  Click here\n                </Button>{' '}\n                to fit to the screen.\n              </>\n            }\n          >\n            <Button variant=\"link\" className=\"odc-topology-filter-bar__info-icon\" isInline>\n              <InfoCircleIcon />\n            </Button>\n          </Popover>\n        </ToolbarItem>\n      </ToolbarGroup>\n    </Toolbar>\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  filters: getTopologyFilters(state),\n});\n\nconst dispatchToProps = (dispatch: Dispatch): DispatchProps => ({\n  onFiltersChange: (filters: TopologyFilters) => {\n    dispatch(setTopologyFilters(filters));\n  },\n});\n\nconst mergeProps = (\n  { filters }: StateProps,\n  { onFiltersChange }: DispatchProps,\n  { visualization, onSearchChange }: OwnProps,\n): MergeProps => ({\n  filters,\n  onDisplayFiltersChange: (display: DisplayFilters) => {\n    onFiltersChange({ ...filters, display });\n  },\n  onSearchChange,\n  visualization,\n});\n\nexport default connect<StateProps, DispatchProps, OwnProps, MergeProps>(\n  mapStateToProps,\n  dispatchToProps,\n  mergeProps,\n)(TopologyFilterBar);\n","import * as React from 'react';\nimport { SyncMarkdownView } from '@console/internal/components/markdown-view';\nimport HelmReleaseNotesEmptyState from '../../helm/details/notes/HelmReleaseNotesEmptyState';\n\ntype TopologyHelmReleaseNotesPanelProps = {\n  releaseNotes: string;\n};\n\nconst TopologyHelmReleaseNotesPanel: React.SFC<TopologyHelmReleaseNotesPanelProps> = ({\n  releaseNotes,\n}) =>\n  releaseNotes ? (\n    <div className=\"overview__sidebar-pane-body\">\n      <SyncMarkdownView content={releaseNotes} />\n    </div>\n  ) : (\n    <HelmReleaseNotesEmptyState />\n  );\n\nexport default TopologyHelmReleaseNotesPanel;\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport {\n  navFactory,\n  ResourceIcon,\n  SimpleTabNav,\n  StatusBox,\n  ActionsMenu,\n} from '@console/internal/components/utils';\nimport * as UIActions from '@console/internal/actions/ui';\nimport { Node } from '@console/topology';\nimport HelmReleaseOverview from '../../helm/details/overview/HelmReleaseOverview';\nimport { helmReleaseActions } from './actions/helmReleaseActions';\nimport TopologyHelmReleaseResourcesPanel from './TopologyHelmReleaseResourcesPanel';\nimport TopologyHelmReleaseNotesPanel from './TopologyHelmReleaseNotesPanel';\n\ntype PropsFromState = {\n  selectedDetailsTab?: any;\n};\n\ntype PropsFromDispatch = {\n  onClickTab?: (name: string) => void;\n};\n\nconst stateToProps = ({ UI }): PropsFromState => ({\n  selectedDetailsTab: UI.getIn(['overview', 'selectedDetailsTab']),\n});\n\nconst dispatchToProps = (dispatch): PropsFromDispatch => ({\n  onClickTab: (name) => dispatch(UIActions.selectOverviewDetailsTab(name)),\n});\n\ntype OwnProps = {\n  helmRelease: Node;\n};\n\ntype TopologyHelmReleasePanelProps = PropsFromState & PropsFromDispatch & OwnProps;\n\nexport const ConnectedTopologyHelmReleasePanel: React.FC<TopologyHelmReleasePanelProps> = ({\n  helmRelease,\n  selectedDetailsTab,\n  onClickTab,\n}: TopologyHelmReleasePanelProps) => {\n  const secret = helmRelease.getData().resources.obj;\n  const { manifestResources, releaseNotes } = helmRelease.getData().data;\n  const name = helmRelease.getLabel();\n  const { namespace } = helmRelease.getData().groupResources[0].resources.obj.metadata;\n\n  const detailsComponent = !secret\n    ? () => (\n        <StatusBox\n          loaded\n          loadError={{ message: `Unable to find resource for ${helmRelease.getLabel()}` }}\n        />\n      )\n    : navFactory.details(HelmReleaseOverview).component;\n\n  const resourcesComponent = () =>\n    manifestResources ? (\n      <TopologyHelmReleaseResourcesPanel\n        manifestResources={manifestResources}\n        releaseNamespace={namespace}\n      />\n    ) : null;\n\n  const releaseNotesComponent = () => <TopologyHelmReleaseNotesPanel releaseNotes={releaseNotes} />;\n\n  const actions = helmReleaseActions(helmRelease);\n  return (\n    <div className=\"overview__sidebar-pane resource-overview\">\n      <div className=\"overview__sidebar-pane-head resource-overview__heading\">\n        <h1 className=\"co-m-pane__heading\">\n          <div className=\"co-m-pane__name co-resource-item\">\n            <ResourceIcon className=\"co-m-resource-icon--lg\" kind=\"HelmRelease\" />\n            {name && (\n              <Link\n                to={`/helm-releases/ns/${namespace}/release/${name}`}\n                className=\"co-resource-item__resource-name\"\n              >\n                {name}\n              </Link>\n            )}\n          </div>\n          {actions?.length && (\n            <div className=\"co-actions\">\n              <ActionsMenu actions={helmReleaseActions(helmRelease)} />\n            </div>\n          )}\n        </h1>\n      </div>\n      <SimpleTabNav\n        selectedTab={selectedDetailsTab || 'Resources'}\n        onClickTab={onClickTab}\n        tabs={[\n          { name: 'Details', component: detailsComponent },\n          { name: 'Resources', component: resourcesComponent },\n          { name: 'Release Notes', component: releaseNotesComponent },\n        ]}\n        tabProps={{ obj: secret }}\n        additionalClassNames=\"co-m-horizontal-nav__menu--within-sidebar co-m-horizontal-nav__menu--within-overview-sidebar\"\n      />\n    </div>\n  );\n};\n\nconst TopologyHelmReleasePanel = connect<\n  PropsFromState,\n  PropsFromDispatch,\n  TopologyHelmReleasePanelProps\n>(\n  stateToProps,\n  dispatchToProps,\n)(ConnectedTopologyHelmReleasePanel);\n\nexport default TopologyHelmReleasePanel;\n","import * as React from 'react';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { K8sResourceKind, referenceFor, modelFor } from '@console/internal/module/k8s';\n\ntype TopologyHelmReleaseResourceItemProps = {\n  item: K8sResourceKind;\n  releaseNamespace: string;\n};\n\nconst TopologyHelmReleaseResourceItem: React.FC<TopologyHelmReleaseResourceItemProps> = ({\n  item,\n  releaseNamespace,\n}) => {\n  const {\n    metadata: { name, namespace },\n  } = item;\n  const kind = referenceFor(item);\n  const model = modelFor(kind);\n  const resourceNamespace = model.namespaced ? namespace || releaseNamespace : null;\n\n  return (\n    <li className=\"list-group-item container-fluid\">\n      <div className=\"row\">\n        <span className=\"col-xs-12\">\n          <ResourceLink kind={kind} name={name} namespace={resourceNamespace} />\n        </span>\n      </div>\n    </li>\n  );\n};\n\nexport default TopologyHelmReleaseResourceItem;\n","import * as React from 'react';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport TopologyHelmReleaseResourceItem from './TopologyHelmReleaseResourceItem';\n\ntype TopologyHelmReleaseResourceListProps = {\n  resources: K8sResourceKind[];\n  releaseNamespace: string;\n};\n\nconst TopologyHelmReleaseResourceList: React.FC<TopologyHelmReleaseResourceListProps> = ({\n  resources,\n  releaseNamespace,\n}) => {\n  return (\n    <ul className=\"list-group\">\n      {resources\n        .sort((r1, r2) => r1.metadata.name.localeCompare(r2.metadata.name))\n        .map((resource) => (\n          <TopologyHelmReleaseResourceItem\n            key={resource.metadata.name}\n            item={resource}\n            releaseNamespace={releaseNamespace}\n          />\n        ))}\n    </ul>\n  );\n};\n\nexport default TopologyHelmReleaseResourceList;\n","import * as React from 'react';\nimport { K8sResourceKind, modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { SidebarSectionHeading } from '@console/internal/components/utils';\nimport TopologyHelmReleaseResourceList from './TopologyHelmReleaseResourceList';\n\ntype TopologyHelmReleaseResourcesPanelProps = {\n  manifestResources: K8sResourceKind[];\n  releaseNamespace: string;\n};\n\nconst TopologyHelmReleaseResourcesPanel: React.SFC<TopologyHelmReleaseResourcesPanelProps> = ({\n  manifestResources,\n  releaseNamespace,\n}) => {\n  const kinds = manifestResources\n    .reduce((resourceKinds, resource) => {\n      const kind = referenceFor(resource);\n      if (!resourceKinds.includes(kind)) {\n        resourceKinds.push(kind);\n      }\n      return resourceKinds;\n    }, [])\n    .sort((a, b) => a.localeCompare(b));\n\n  const resourceLists = kinds.reduce((lists, kind) => {\n    const model = modelFor(kind);\n    const resources = manifestResources.filter((resource) => resource.kind === model.kind);\n    if (resources.length) {\n      lists.push(\n        <div key={model.kind}>\n          <SidebarSectionHeading text={model.labelPlural} />\n          <TopologyHelmReleaseResourceList\n            resources={resources}\n            releaseNamespace={releaseNamespace}\n          />\n        </div>,\n      );\n    }\n    return lists;\n  }, []);\n\n  return <div className=\"overview__sidebar-pane-body\">{resourceLists}</div>;\n};\n\nexport default TopologyHelmReleaseResourcesPanel;\n","import * as React from 'react';\nimport { ResourceOverviewPage } from '@console/internal/components/overview/resource-overview-page';\nimport { TopologyDataObject } from '../topology-types';\n\nexport type TopologyResourcePanelProps = {\n  item: TopologyDataObject;\n};\n\nconst TopologyHelmWorkloadPanel: React.FC<TopologyResourcePanelProps> = ({ item }) => {\n  const resourceItemToShowOnSideBar = item && item.resources;\n\n  return (\n    resourceItemToShowOnSideBar && (\n      <ResourceOverviewPage\n        item={resourceItemToShowOnSideBar}\n        kind={resourceItemToShowOnSideBar.obj.kind}\n      />\n    )\n  );\n};\n\nexport default TopologyHelmWorkloadPanel;\n","import { KebabOption } from '@console/internal/components/utils/kebab';\nimport { Node } from '@console/topology';\nimport {\n  deleteHelmRelease,\n  upgradeHelmRelease,\n  rollbackHelmRelease,\n} from '../../../../actions/modify-helm-release';\nimport { HelmActionOrigins } from '../../../helm/helm-types';\n\nexport const helmReleaseActions = (helmRelease: Node): KebabOption[] => {\n  const name = helmRelease.getLabel();\n  const { namespace } = helmRelease.getData().groupResources[0].resources.obj.metadata;\n  return name && namespace\n    ? [\n        upgradeHelmRelease(name, namespace, HelmActionOrigins.topology),\n        rollbackHelmRelease(name, namespace, HelmActionOrigins.topology),\n        deleteHelmRelease(name, namespace),\n      ]\n    : [];\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport {\n  Node,\n  observer,\n  WithSelectionProps,\n  WithDndDropProps,\n  WithContextMenuProps,\n} from '@console/topology';\nimport { modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { getTopologyResourceObject } from '../../topology-utils';\nimport HelmReleaseNode from './HelmReleaseNode';\nimport HelmReleaseGroup from './HelmReleaseGroup';\n\nimport './HelmRelease.scss';\n\nexport type HelmReleaseProps = {\n  element: Node;\n} & WithSelectionProps &\n  WithContextMenuProps &\n  WithDndDropProps;\n\nconst HelmRelease: React.FC<HelmReleaseProps> = (props) => {\n  const secretObj = getTopologyResourceObject(props.element.getData());\n  const resourceModel = secretObj ? modelFor(referenceFor(secretObj)) : null;\n  const editAccess = useAccessReview({\n    group: resourceModel?.apiGroup,\n    verb: 'patch',\n    resource: resourceModel?.plural,\n    name: secretObj?.metadata.name,\n    namespace: secretObj?.metadata.namespace,\n  });\n  if (props.element.isCollapsed()) {\n    return <HelmReleaseNode editAccess={editAccess} {...props} />;\n  }\n\n  return <HelmReleaseGroup editAccess={editAccess} {...props} />;\n};\n\nexport default observer(HelmRelease);\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport {\n  Layer,\n  useHover,\n  Node,\n  createSvgIdUrl,\n  useDragNode,\n  WithSelectionProps,\n  WithDndDropProps,\n  WithContextMenuProps,\n  observer,\n  useCombineRefs,\n} from '@console/topology';\nimport {\n  NodeShadows,\n  NODE_SHADOW_FILTER_ID_HOVER,\n  NODE_SHADOW_FILTER_ID,\n} from '../../components/NodeShadows';\nimport SvgBoxedText from '../../../svg/SvgBoxedText';\nimport { useDisplayFilters, useSearchFilter } from '../../filters';\nimport { nodeDragSourceSpec } from '../../components/componentUtils';\nimport { TYPE_HELM_RELEASE } from './const';\n\nexport type HelmReleaseGroupProps = {\n  element: Node;\n  editAccess: boolean;\n} & WithSelectionProps &\n  WithContextMenuProps &\n  WithDndDropProps;\n\nconst HelmReleaseGroup: React.FC<HelmReleaseGroupProps> = ({\n  element,\n  editAccess,\n  selected,\n  onSelect,\n  onContextMenu,\n  contextMenuOpen,\n  dndDropRef,\n}) => {\n  const [hover, hoverRef] = useHover();\n  const [innerHover, innerHoverRef] = useHover();\n  const dragSpec = nodeDragSourceSpec(TYPE_HELM_RELEASE, false);\n  const [{ dragging, regrouping }, dragNodeRef] = useDragNode(dragSpec, { element });\n  const [\n    { dragging: labelDragging, regrouping: labelRegrouping },\n    dragLabelRef,\n  ] = useDragNode(dragSpec, { element });\n\n  const nodeRefs = useCombineRefs(innerHoverRef, dragNodeRef);\n  const [filtered] = useSearchFilter(element.getLabel());\n  const displayFilters = useDisplayFilters();\n  const showLabels = displayFilters.showLabels || hover || innerHover;\n  const hasChildren = element.getChildren()?.length > 0;\n  const { x, y, width, height } = element.getBounds();\n\n  return (\n    <g\n      ref={hoverRef}\n      onClick={onSelect}\n      onContextMenu={editAccess ? onContextMenu : null}\n      className={classNames('odc-helm-release', {\n        'is-dragging': dragging || labelDragging,\n        'is-filtered': filtered,\n      })}\n    >\n      <NodeShadows />\n      <Layer\n        id={(dragging || labelDragging) && (regrouping || labelRegrouping) ? undefined : 'groups2'}\n      >\n        <g\n          ref={nodeRefs}\n          className={classNames('odc-helm-release', {\n            'is-selected': selected,\n            'is-dragging': dragging || labelDragging,\n            'is-filtered': filtered,\n          })}\n        >\n          <rect\n            ref={dndDropRef}\n            className=\"odc-helm-release__bg\"\n            x={x}\n            y={y}\n            width={width}\n            height={height}\n            rx=\"5\"\n            ry=\"5\"\n            filter={createSvgIdUrl(\n              hover || innerHover || contextMenuOpen || dragging || labelDragging\n                ? NODE_SHADOW_FILTER_ID_HOVER\n                : NODE_SHADOW_FILTER_ID,\n            )}\n          />\n          {!hasChildren && (\n            <text x={x + width / 2} y={y + height / 2} dy=\"0.35em\" textAnchor=\"middle\">\n              No Resources\n            </text>\n          )}\n        </g>\n      </Layer>\n      {showLabels && element.getLabel() && (\n        <SvgBoxedText\n          className=\"odc-base-node__label\"\n          x={x + width / 2}\n          y={y + height + 20}\n          paddingX={8}\n          paddingY={4}\n          kind=\"HelmRelease\"\n          dragRef={dragLabelRef}\n          typeIconClass={element.getData().data.chartIcon || 'icon-helm'}\n        >\n          {element.getLabel()}\n        </SvgBoxedText>\n      )}\n    </g>\n  );\n};\n\nexport default observer(HelmReleaseGroup);\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport {\n  useAnchor,\n  RectAnchor,\n  useHover,\n  Node,\n  createSvgIdUrl,\n  useDragNode,\n  WithSelectionProps,\n  WithDndDropProps,\n  WithContextMenuProps,\n  observer,\n  useCombineRefs,\n} from '@console/topology';\nimport {\n  NodeShadows,\n  NODE_SHADOW_FILTER_ID_HOVER,\n  NODE_SHADOW_FILTER_ID,\n} from '../../components/NodeShadows';\nimport { useSearchFilter } from '../../filters/useSearchFilter';\nimport { GroupNode } from '../../components/groups/GroupNode';\nimport { nodeDragSourceSpec } from '../../components/componentUtils';\nimport { TYPE_HELM_RELEASE } from './const';\n\nexport type HelmReleaseNodeProps = {\n  element: Node;\n  editAccess: boolean;\n} & WithSelectionProps &\n  WithContextMenuProps &\n  WithDndDropProps;\n\nconst HelmReleaseNode: React.FC<HelmReleaseNodeProps> = ({\n  element,\n  editAccess,\n  selected,\n  onSelect,\n  onContextMenu,\n  contextMenuOpen,\n  dndDropRef,\n}) => {\n  useAnchor(React.useCallback((node: Node) => new RectAnchor(node, 1.5), []));\n  const [hover, hoverRef] = useHover();\n  const [{ dragging }, dragNodeRef] = useDragNode(nodeDragSourceSpec(TYPE_HELM_RELEASE, false), {\n    element,\n  });\n  const refs = useCombineRefs<SVGRectElement>(dragNodeRef, dndDropRef, hoverRef);\n  const [filtered] = useSearchFilter(element.getLabel());\n  const { width, height } = element.getDimensions();\n\n  return (\n    <g\n      ref={refs}\n      onClick={onSelect}\n      onContextMenu={editAccess ? onContextMenu : null}\n      className={classNames('odc-helm-release', {\n        'is-dragging': dragging,\n        'is-selected': selected,\n        'is-filtered': filtered,\n      })}\n    >\n      <NodeShadows />\n      <rect\n        filter={createSvgIdUrl(\n          hover || contextMenuOpen || dragging\n            ? NODE_SHADOW_FILTER_ID_HOVER\n            : NODE_SHADOW_FILTER_ID,\n        )}\n        className=\"odc-helm-release__bg\"\n        x={0}\n        y={0}\n        width={width}\n        height={height}\n        rx=\"5\"\n        ry=\"5\"\n      />\n      <GroupNode\n        kind=\"HelmRelease\"\n        element={element}\n        typeIconClass=\"icon-helm\"\n        groupResources={element.getData().groupResources}\n      />\n    </g>\n  );\n};\n\nexport default observer(HelmReleaseNode);\n","import * as React from 'react';\nimport {\n  Node,\n  GraphElement,\n  ComponentFactory as TopologyComponentFactory,\n  withDragNode,\n  withSelection,\n  withDndDrop,\n} from '@console/topology';\nimport { kebabOptionsToMenu } from '@console/internal/components/utils';\nimport { WorkloadNode } from '../../components/nodes';\nimport { noRegroupWorkloadContextMenu, createMenuItems } from '../../components/nodeContextMenu';\nimport {\n  NodeComponentProps,\n  nodeDragSourceSpec,\n  nodeDropTargetSpec,\n  withContextMenu,\n  withNoDrop,\n} from '../../components/componentUtils';\nimport { withEditReviewAccess } from '../../components/withEditReviewAccess';\nimport { AbstractSBRComponentFactory } from '../../components/AbstractSBRComponentFactory';\nimport { helmReleaseActions } from '../actions/helmReleaseActions';\nimport { TYPE_HELM_RELEASE, TYPE_HELM_WORKLOAD } from './const';\nimport HelmRelease from './HelmRelease';\n\nexport const helmReleaseContextMenu = (element: Node) =>\n  createMenuItems(kebabOptionsToMenu(helmReleaseActions(element)));\n\nclass HelmComponentFactory extends AbstractSBRComponentFactory {\n  getFactory = (): TopologyComponentFactory => {\n    return (kind, type): React.ComponentType<{ element: GraphElement }> | undefined => {\n      switch (type) {\n        case TYPE_HELM_RELEASE:\n          return withSelection(\n            false,\n            true,\n          )(withContextMenu(helmReleaseContextMenu)(withNoDrop()(HelmRelease)));\n        case TYPE_HELM_WORKLOAD:\n          return this.withAddResourceConnector()(\n            withDndDrop<\n              any,\n              any,\n              { droppable?: boolean; hover?: boolean; canDrop?: boolean },\n              NodeComponentProps\n            >(nodeDropTargetSpec)(\n              withEditReviewAccess('patch')(\n                withDragNode(nodeDragSourceSpec(type, false))(\n                  withSelection(\n                    false,\n                    true,\n                  )(withContextMenu(noRegroupWorkloadContextMenu)(WorkloadNode)),\n                ),\n              ),\n            ),\n          );\n        default:\n          return undefined;\n      }\n    };\n  };\n}\n\nexport { HelmComponentFactory };\n","import { ColaLayout, ColaNode, ColaGroup, ColaLink } from '@console/topology';\nimport { layoutConstraints } from '@console/knative-plugin/src/topology/layouts/layoutConstraints';\n\nexport default class TopologyColaLayout extends ColaLayout {\n  protected getConstraints(nodes: ColaNode[], groups: ColaGroup[], edges: ColaLink[]): any[] {\n    return layoutConstraints(nodes, groups, edges, this.options);\n  }\n}\n","import { Graph, Layout, LayoutFactory } from '@console/topology';\nimport TopologyColaLayout from './TopologyColaLayout';\n\nconst COLA_LAYOUT = 'Cola';\nconst COLA_FORCE_LAYOUT = 'ColaForce';\n\nconst layoutFactory: LayoutFactory = (type: string, graph: Graph): Layout | undefined => {\n  switch (type) {\n    case COLA_FORCE_LAYOUT:\n      return new TopologyColaLayout(graph, { layoutOnDrag: true });\n    case COLA_LAYOUT:\n      return new TopologyColaLayout(graph, { layoutOnDrag: false });\n    default:\n      return undefined;\n  }\n};\n\nexport { layoutFactory, COLA_LAYOUT, COLA_FORCE_LAYOUT };\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport {\n  Node,\n  observer,\n  WithSelectionProps,\n  WithDndDropProps,\n  WithContextMenuProps,\n} from '@console/topology';\nimport { modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { getTopologyResourceObject } from '../../topology-utils';\nimport OperatorBackedServiceGroup from './OperatorBackedServiceGroup';\nimport OperatorBackedServiceNode from './OperatorBackedServiceNode';\n\nimport './OperatorBackedService.scss';\n\nexport type OperatorBackedServiceProps = {\n  element: Node;\n} & WithSelectionProps &\n  WithContextMenuProps &\n  WithDndDropProps;\n\nconst OperatorBackedService: React.FC<OperatorBackedServiceProps> = (\n  props: OperatorBackedServiceProps,\n) => {\n  const resourceObj = getTopologyResourceObject(props.element.getData());\n  const resourceModel = modelFor(referenceFor(resourceObj));\n  const editAccess = useAccessReview({\n    group: resourceModel.apiGroup,\n    verb: 'patch',\n    resource: resourceModel.plural,\n    name: resourceObj.metadata.name,\n    namespace: resourceObj.metadata.namespace,\n  });\n  if (props.element.isCollapsed()) {\n    return <OperatorBackedServiceNode editAccess={editAccess} {...props} />;\n  }\n\n  return <OperatorBackedServiceGroup editAccess={editAccess} {...props} />;\n};\n\nexport default observer(OperatorBackedService);\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport {\n  Node,\n  observer,\n  WithSelectionProps,\n  WithDndDropProps,\n  WithContextMenuProps,\n  useDragNode,\n  Layer,\n  useHover,\n  createSvgIdUrl,\n  useCombineRefs,\n} from '@console/topology';\nimport SvgBoxedText from '../../../svg/SvgBoxedText';\nimport { nodeDragSourceSpec } from '../../components/componentUtils';\nimport { TYPE_OPERATOR_BACKED_SERVICE } from './const';\nimport { useDisplayFilters, useSearchFilter } from '../../filters';\nimport {\n  NodeShadows,\n  NODE_SHADOW_FILTER_ID,\n  NODE_SHADOW_FILTER_ID_HOVER,\n} from '../../components/NodeShadows';\n\nexport type OperatorBackedServiceGroupProps = {\n  element: Node;\n  editAccess: boolean;\n} & WithSelectionProps &\n  WithContextMenuProps &\n  WithDndDropProps;\n\nconst OperatorBackedServiceGroup: React.FC<OperatorBackedServiceGroupProps> = ({\n  element,\n  editAccess,\n  selected,\n  onSelect,\n  onContextMenu,\n  contextMenuOpen,\n  dndDropRef,\n}) => {\n  const [hover, hoverRef] = useHover();\n  const [innerHover, innerHoverRef] = useHover();\n  const [{ dragging, regrouping }, dragNodeRef] = useDragNode(\n    nodeDragSourceSpec(TYPE_OPERATOR_BACKED_SERVICE, false),\n    {\n      element,\n    },\n  );\n  const [{ dragging: labelDragging, regrouping: labelRegrouping }, dragLabelRef] = useDragNode(\n    nodeDragSourceSpec(TYPE_OPERATOR_BACKED_SERVICE, false),\n    {\n      element,\n    },\n  );\n\n  const nodeRefs = useCombineRefs(innerHoverRef, dragNodeRef);\n  const hasChildren = element.getChildren()?.length > 0;\n  const { data } = element.getData();\n  const [filtered] = useSearchFilter(element.getLabel());\n  const displayFilters = useDisplayFilters();\n  const showLabels = displayFilters.showLabels || hover || innerHover;\n  const { x, y, width, height } = element.getBounds();\n\n  return (\n    <g\n      ref={hoverRef}\n      onClick={onSelect}\n      onContextMenu={editAccess ? onContextMenu : null}\n      className={classNames('odc-operator-backed-service', {\n        'is-dragging': dragging || labelDragging,\n        'is-filtered': filtered,\n      })}\n    >\n      <NodeShadows />\n      <Layer\n        id={(dragging || labelDragging) && (regrouping || labelRegrouping) ? undefined : 'groups2'}\n      >\n        <g\n          ref={nodeRefs}\n          className={classNames('odc-operator-backed-service', {\n            'is-selected': selected,\n            'is-dragging': dragging || labelDragging,\n            'is-filtered': filtered,\n          })}\n        >\n          <rect\n            ref={dndDropRef}\n            className=\"odc-operator-backed-service__bg\"\n            x={x}\n            y={y}\n            width={width}\n            height={height}\n            rx=\"5\"\n            ry=\"5\"\n            filter={createSvgIdUrl(\n              hover || innerHover || contextMenuOpen || dragging || labelDragging\n                ? NODE_SHADOW_FILTER_ID_HOVER\n                : NODE_SHADOW_FILTER_ID,\n            )}\n          />\n          {!hasChildren && (\n            <text x={x + width / 2} y={y + height / 2} dy=\"0.35em\" textAnchor=\"middle\">\n              No Resources\n            </text>\n          )}\n        </g>\n      </Layer>\n      {showLabels && (data.kind || element.getLabel()) && (\n        <SvgBoxedText\n          className=\"odc-base-node__label\"\n          x={x + width / 2}\n          y={y + height + 20}\n          paddingX={8}\n          paddingY={4}\n          kind=\"Operator\"\n          dragRef={dragLabelRef}\n          typeIconClass={element.getData().data.builderImage}\n        >\n          {element.getLabel()}\n        </SvgBoxedText>\n      )}\n    </g>\n  );\n};\n\nexport default observer(OperatorBackedServiceGroup);\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport {\n  observer,\n  Node,\n  WithSelectionProps,\n  WithDndDropProps,\n  WithContextMenuProps,\n  useAnchor,\n  RectAnchor,\n  useCombineRefs,\n  useHover,\n  useDragNode,\n  createSvgIdUrl,\n} from '@console/topology';\nimport { useSearchFilter } from '../../filters/useSearchFilter';\nimport { nodeDragSourceSpec } from '../../components/componentUtils';\nimport { TYPE_OPERATOR_BACKED_SERVICE } from './const';\nimport {\n  NodeShadows,\n  NODE_SHADOW_FILTER_ID,\n  NODE_SHADOW_FILTER_ID_HOVER,\n} from '../../components/NodeShadows';\nimport { GroupNode } from '../../components/groups/GroupNode';\n\nexport type OperatorBackedServiceNodeProps = {\n  element: Node;\n  editAccess: boolean;\n} & WithSelectionProps &\n  WithContextMenuProps &\n  WithDndDropProps;\n\nconst OperatorBackedServiceNode: React.FC<OperatorBackedServiceNodeProps> = ({\n  element,\n  editAccess,\n  selected,\n  onSelect,\n  onContextMenu,\n  contextMenuOpen,\n  dndDropRef,\n}) => {\n  useAnchor(React.useCallback((node: Node) => new RectAnchor(node, 1.5), []));\n  const [hover, hoverRef] = useHover();\n  const [{ dragging }, dragNodeRef] = useDragNode(\n    nodeDragSourceSpec(TYPE_OPERATOR_BACKED_SERVICE, true, editAccess),\n    {\n      element,\n    },\n  );\n  const refs = useCombineRefs<SVGRectElement>(hoverRef, dragNodeRef, dndDropRef);\n  const [filtered] = useSearchFilter(element.getLabel());\n  const kind = 'Operator';\n  const { width, height } = element.getDimensions();\n\n  return (\n    <g\n      ref={refs}\n      onClick={onSelect}\n      onContextMenu={editAccess ? onContextMenu : null}\n      className={classNames('odc-operator-backed-service', {\n        'is-dragging': dragging,\n        'is-selected': selected,\n        'is-filtered': filtered,\n      })}\n    >\n      <NodeShadows />\n      <rect\n        className=\"odc-operator-backed-service__bg\"\n        filter={createSvgIdUrl(\n          hover || contextMenuOpen || dragging\n            ? NODE_SHADOW_FILTER_ID_HOVER\n            : NODE_SHADOW_FILTER_ID,\n        )}\n        x={0}\n        y={0}\n        width={width}\n        height={height}\n        rx=\"5\"\n        ry=\"5\"\n      />\n      <GroupNode\n        kind={kind}\n        element={element}\n        groupResources={element.getData().groupResources}\n        typeIconClass={element.getData().data.builderImage}\n      />\n    </g>\n  );\n};\n\nexport default observer(OperatorBackedServiceNode);\n","import * as React from 'react';\nimport {\n  GraphElement,\n  ComponentFactory as TopologyComponentFactory,\n  withDragNode,\n  withSelection,\n  withDndDrop,\n} from '@console/topology';\nimport { WorkloadNode } from '../../components/nodes';\nimport {\n  noRegroupWorkloadContextMenu,\n  NodeComponentProps,\n  nodeDragSourceSpec,\n  nodeDropTargetSpec,\n  withContextMenu,\n  withNoDrop,\n  withEditReviewAccess,\n  AbstractSBRComponentFactory,\n} from '../../components';\nimport { TYPE_OPERATOR_BACKED_SERVICE, TYPE_OPERATOR_WORKLOAD } from './const';\nimport OperatorBackedService from './OperatorBackedService';\n\nclass OperatorsComponentFactory extends AbstractSBRComponentFactory {\n  getFactory = (): TopologyComponentFactory => {\n    return (kind, type): React.ComponentType<{ element: GraphElement }> | undefined => {\n      switch (type) {\n        case TYPE_OPERATOR_BACKED_SERVICE:\n          return withSelection(false, true)(withNoDrop()(OperatorBackedService));\n        case TYPE_OPERATOR_WORKLOAD:\n          return this.withAddResourceConnector()(\n            withEditReviewAccess('patch')(\n              withDndDrop<\n                any,\n                any,\n                { droppable?: boolean; hover?: boolean; canDrop?: boolean },\n                NodeComponentProps\n              >(nodeDropTargetSpec)(\n                withDragNode(nodeDragSourceSpec(type, false))(\n                  withSelection(\n                    false,\n                    true,\n                  )(withContextMenu(noRegroupWorkloadContextMenu)(WorkloadNode)),\n                ),\n              ),\n            ),\n          );\n        default:\n          return undefined;\n      }\n    };\n  };\n}\n\nexport { OperatorsComponentFactory };\n","import * as React from 'react';\nimport { Extension } from '@console/plugin-sdk/src/typings/base';\nimport { AccessReviewResourceAttributes } from '@console/internal/module/k8s';\n\nnamespace ExtensionProperties {\n  export type AddAction = {\n    /** ID used to identify the action. */\n    id: string;\n    /** The label of the action */\n    label: string;\n    /** The description of the action. */\n    description: string;\n    /** The perspective display icon. */\n    icon?: string | React.ReactElement;\n    /** The perspective display icon css class. */\n    iconClass?: string;\n    /** The URL to navigate to. */\n    url: string;\n    /** Optional access review to control visibility / enablement of the action. */\n    accessReview?: AccessReviewResourceAttributes[];\n    /** Optional funtion used to show/hide the add action */\n    hide?: () => boolean;\n  };\n}\n\nexport interface AddAction extends Extension<ExtensionProperties.AddAction> {\n  type: 'AddAction';\n}\n\nexport const isAddAction = (e: Extension): e is AddAction => {\n  return e.type === 'AddAction';\n};\n","import * as React from 'react';\nimport { AccessReviewResourceAttributes, K8sKind } from '@console/internal/module/k8s';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport {\n  BuildConfigModel,\n  DeploymentConfigModel,\n  ImageStreamImportsModel,\n  ImageStreamModel,\n  RouteModel,\n  SecretModel,\n  ServiceModel,\n} from '@console/internal/models';\nimport { allCatalogImageResourceAccess, allImportResourceAccess } from '../actions/add-resources';\n\nconst resourceAttributes = (model: K8sKind, namespace: string): AccessReviewResourceAttributes => {\n  return {\n    group: model.apiGroup || '',\n    resource: model.plural,\n    namespace,\n    verb: 'create',\n  };\n};\n\nexport const useAddToProjectAccess = (activeNamespace: string): string[] => {\n  const [addAccess, setAddAccess] = React.useState<string[]>([]);\n\n  const buildConfigsAccess = useAccessReview(resourceAttributes(BuildConfigModel, activeNamespace));\n  const imageStreamAccess = useAccessReview(resourceAttributes(ImageStreamModel, activeNamespace));\n  const deploymentConfigAccess = useAccessReview(\n    resourceAttributes(DeploymentConfigModel, activeNamespace),\n  );\n  const imageStreamImportAccess = useAccessReview(\n    resourceAttributes(ImageStreamImportsModel, activeNamespace),\n  );\n  const secretAccess = useAccessReview(resourceAttributes(SecretModel, activeNamespace));\n  const routeAccess = useAccessReview(resourceAttributes(RouteModel, activeNamespace));\n  const serviceAccess = useAccessReview(resourceAttributes(ServiceModel, activeNamespace));\n\n  React.useEffect(() => {\n    const createResourceAccess: string[] = [];\n    if (\n      buildConfigsAccess &&\n      imageStreamAccess &&\n      deploymentConfigAccess &&\n      secretAccess &&\n      routeAccess &&\n      serviceAccess\n    ) {\n      createResourceAccess.push(allImportResourceAccess);\n      if (imageStreamImportAccess) {\n        createResourceAccess.push(allCatalogImageResourceAccess);\n      }\n    }\n    setAddAccess(createResourceAccess);\n  }, [\n    buildConfigsAccess,\n    deploymentConfigAccess,\n    imageStreamAccess,\n    imageStreamImportAccess,\n    routeAccess,\n    secretAccess,\n    serviceAccess,\n  ]);\n\n  return addAccess;\n};\n","import { KebabOption } from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { deleteRevisionModal } from '../components/modals';\n\nexport const deleteRevision = (model: K8sKind, revision: K8sResourceKind): KebabOption => {\n  return {\n    label: `Delete ${model.label}`,\n    callback: () =>\n      deleteRevisionModal({\n        revision,\n      }),\n    accessReview: {\n      group: model.apiGroup,\n      resource: model.plural,\n      name: revision.metadata.name,\n      namespace: revision.metadata.namespace,\n      verb: 'delete',\n    },\n  };\n};\n","import { Kebab } from '@console/internal/components/utils';\nimport { RevisionModel } from '../models';\nimport { deleteRevision } from './delete-revision';\n\nexport const getRevisionActions = () => {\n  let deleteFound = false;\n  const commonActions = Kebab.factory.common.map((action) => {\n    if (action.name === 'Delete') {\n      deleteFound = true;\n      return deleteRevision;\n    }\n    return action;\n  });\n  if (!deleteFound) {\n    commonActions.push(deleteRevision);\n  }\n  return [...Kebab.getExtensionsActionsForKind(RevisionModel), ...commonActions];\n};\n","import * as React from 'react';\nimport { ResourceSummary } from '@console/internal/components/utils';\nimport { OverviewItem, PodRing } from '@console/shared';\nimport { RevisionModel } from '../../models';\n\ntype KnativeOverviewProps = {\n  item?: OverviewItem;\n};\n\nconst KnativeOverview: React.FC<KnativeOverviewProps> = ({ item }) => {\n  const { obj, current } = item;\n  return (\n    <div className=\"overview__sidebar-pane-body resource-overview__body\">\n      {obj.kind === RevisionModel.kind && (\n        <div className=\"resource-overview__pod-counts\">\n          <PodRing\n            pods={current ? current.pods : []}\n            obj={obj}\n            rc={current && current.obj}\n            resourceKind={RevisionModel}\n            path=\"/spec/replicas\"\n          />\n        </div>\n      )}\n      <div className=\"resource-overview__summary\">\n        <ResourceSummary resource={obj} />\n      </div>\n    </div>\n  );\n};\n\nexport default KnativeOverview;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Kebab, LoadingBox } from '@console/internal/components/utils';\nimport { ResourceOverviewDetails } from '@console/internal/components/overview/resource-overview-details';\nimport { groupVersionFor, K8sKind, referenceForModel } from '@console/internal/module/k8s';\nimport { RootState } from '@console/internal/redux';\nimport { OverviewItem } from '@console/shared';\nimport { ModifyApplication } from '@console/dev-console/src/actions/modify-application';\nimport { KNATIVE_SERVING_APIGROUP } from '../../const';\nimport { RevisionModel } from '../../models';\nimport { getRevisionActions } from '../../actions/getRevisionActions';\nimport { isDynamicEventResourceKind } from '../../utils/fetch-dynamic-eventsources-utils';\nimport OverviewDetailsKnativeResourcesTab from './OverviewDetailsKnativeResourcesTab';\nimport KnativeOverview from './KnativeOverview';\n\ninterface StateProps {\n  kindsInFlight?: boolean;\n  knativeModels?: K8sKind[];\n}\n\nexport interface KnativeResourceOverviewPageProps extends StateProps {\n  item?: OverviewItem;\n}\n\nconst tabs = [\n  {\n    name: 'Details',\n    component: KnativeOverview,\n  },\n  {\n    name: 'Resources',\n    component: OverviewDetailsKnativeResourcesTab,\n  },\n];\n\nexport const KnativeResourceOverviewPage: React.ComponentType<KnativeResourceOverviewPageProps> = ({\n  item,\n  knativeModels,\n  kindsInFlight,\n}: KnativeResourceOverviewPageProps) => {\n  if (kindsInFlight) {\n    return !knativeModels ? null : <LoadingBox />;\n  }\n  const apiInfo = groupVersionFor(item.obj.apiVersion);\n  const resourceModel = knativeModels.find(\n    (model) =>\n      model.kind === item.obj.kind &&\n      model.apiGroup === apiInfo.group &&\n      model.apiVersion === apiInfo.version,\n  );\n\n  const actions = [];\n  if (resourceModel.kind === RevisionModel.kind) {\n    actions.push(...getRevisionActions());\n  } else {\n    actions.push(\n      ModifyApplication,\n      ...Kebab.getExtensionsActionsForKind(resourceModel),\n      ...Kebab.factory.common,\n    );\n  }\n\n  return (\n    <ResourceOverviewDetails\n      item={item}\n      kindObj={resourceModel}\n      menuActions={actions}\n      tabs={tabs}\n    />\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => {\n  return {\n    kindsInFlight: state.k8s.getIn(['RESOURCES', 'inFlight']),\n    knativeModels: state.k8s\n      .getIn(['RESOURCES', 'models'])\n      .filter(\n        (model: K8sKind) =>\n          model.apiGroup === KNATIVE_SERVING_APIGROUP ||\n          isDynamicEventResourceKind(referenceForModel(model)),\n      ),\n  };\n};\n\nexport default connect(mapStateToProps)(KnativeResourceOverviewPage);\n","module.exports = __webpack_public_path__ + \"assets/apiserversource.png\";","module.exports = __webpack_public_path__ + \"assets/camelsource.svg\";","module.exports = __webpack_public_path__ + \"assets/containersource.png\";","module.exports = __webpack_public_path__ + \"assets/cronjobsource.svg\";","module.exports = __webpack_public_path__ + \"assets/kafkasource.svg\";","import { AbstractAnchor, getEllipseAnchorPoint, Node, Point } from '@console/topology';\n\nexport default class RevisionTrafficSourceAnchor extends AbstractAnchor {\n  private radius: number;\n\n  constructor(node: Node, radius: number) {\n    super(node);\n    this.radius = radius;\n  }\n\n  getLocation(reference: Point): Point {\n    const bounds = this.owner.getBounds();\n    // center point is top right corner\n    const center = new Point(bounds.right(), bounds.y);\n    if (this.radius) {\n      // location is edge of decorator\n      const size = this.radius * 2;\n      return getEllipseAnchorPoint(center, size, size, reference);\n    }\n\n    // location is center of node\n    return center;\n  }\n\n  getReferencePoint(): Point {\n    const bounds = this.owner.getBounds();\n    // reference point is top right corner of node\n    return new Point(bounds.right(), bounds.y);\n  }\n}\n","import { AbstractAnchor, getEllipseAnchorPoint, Node, Point } from '@console/topology';\n\nexport default class RevisionTrafficTargetAnchor extends AbstractAnchor {\n  private radius: number;\n\n  private radiusOffset: number;\n\n  constructor(node: Node, radius: number) {\n    super(node);\n    this.radius = radius;\n    // TODO align sizing with WorkloadNode\n    this.radiusOffset = radius * 0.7;\n  }\n\n  getLocation(reference: Point): Point {\n    const bounds = this.owner.getBounds();\n    if (this.radius) {\n      // location is edge of decorator\n      const center = new Point(bounds.right() - this.radiusOffset, bounds.y + this.radiusOffset);\n      const size = this.radius * 2;\n      return getEllipseAnchorPoint(center, size, size, reference);\n    }\n\n    // location is edge of outer node\n    return getEllipseAnchorPoint(bounds.getCenter(), bounds.width, bounds.height, reference);\n  }\n\n  getReferencePoint(): Point {\n    const bounds = this.owner.getBounds();\n    if (this.radius) {\n      // reference point is center of decorator\n      return new Point(bounds.right() - this.radiusOffset, bounds.y + this.radiusOffset);\n    }\n    // reference point is center of node\n    return bounds.getCenter();\n  }\n}\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { Edge, observer, WithSourceDragProps, WithTargetDragProps } from '@console/topology';\nimport { getTopologyResourceObject, BaseEdge } from '@console/dev-console/src/components/topology';\nimport './EventSourceLink.scss';\n\ntype EventSourceLinkProps = {\n  element: Edge;\n  dragging: boolean;\n} & WithSourceDragProps &\n  WithTargetDragProps;\n\nconst EventSourceLink: React.FC<EventSourceLinkProps> = ({\n  element,\n  targetDragRef,\n  children,\n  ...others\n}) => {\n  const resourceObj = getTopologyResourceObject(element.getSource().getData());\n  const resourceModel = modelFor(referenceFor(resourceObj));\n  const editAccess = useAccessReview({\n    group: resourceModel.apiGroup,\n    verb: 'update',\n    resource: resourceModel.plural,\n    name: resourceObj.metadata.name,\n    namespace: resourceObj.metadata.namespace,\n  });\n  const markerPoint = element.getEndPoint();\n  const edgeClasses = classNames('odc-event-source-link', { 'odc-m-editable': editAccess });\n  return (\n    <BaseEdge className={edgeClasses} element={element} {...others}>\n      <circle\n        className=\"topology-connector-arrow\"\n        ref={editAccess ? targetDragRef : null}\n        cx={markerPoint.x}\n        cy={markerPoint.y}\n        r={6}\n      />\n    </BaseEdge>\n  );\n};\n\nexport default observer(EventSourceLink);\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { Edge, observer, EdgeConnectorArrow } from '@console/topology';\nimport { BaseEdge } from '@console/dev-console/src/components/topology';\n\nimport './TrafficLink.scss';\n\ntype TrafficLinkProps = {\n  element: Edge;\n};\n\nconst TrafficLink: React.FC<TrafficLinkProps> = ({ element }) => {\n  const { percent } = element.getData().data;\n  let text = null;\n  if (percent != null) {\n    const startPoint = element.getStartPoint();\n    const endPoint = element.getEndPoint();\n    text = (\n      <text\n        className=\"odc-traffic-link__text\"\n        x={(endPoint.x + startPoint.x) / 2}\n        y={(endPoint.y + startPoint.y) / 2}\n        textAnchor=\"middle\"\n      >\n        {percent}%\n      </text>\n    );\n  }\n  return (\n    <BaseEdge element={element} className=\"odc-traffic-link\">\n      <EdgeConnectorArrow edge={element} />\n      {text}\n    </BaseEdge>\n  );\n};\n\nexport default observer(TrafficLink);\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport {\n  Node,\n  observer,\n  WithSelectionProps,\n  WithContextMenuProps,\n  WithDndDropProps,\n  WithCreateConnectorProps,\n} from '@console/topology';\nimport { modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { getTopologyResourceObject } from '@console/dev-console/src/components/topology';\nimport KnativeServiceNode from './KnativeServiceNode';\nimport KnativeServiceGroup from './KnativeServiceGroup';\n\nimport './KnativeService.scss';\n\nexport type KnativeServiceProps = {\n  element: Node;\n  highlight?: boolean;\n  canDrop?: boolean;\n  dropTarget?: boolean;\n  edgeDragging?: boolean;\n} & WithSelectionProps &\n  WithDndDropProps &\n  WithContextMenuProps &\n  WithCreateConnectorProps;\n\nconst KnativeService: React.FC<KnativeServiceProps> = (props) => {\n  const resourceObj = getTopologyResourceObject(props.element.getData());\n  const resourceModel = modelFor(referenceFor(resourceObj));\n  const editAccess = useAccessReview({\n    group: resourceModel.apiGroup,\n    verb: 'patch',\n    resource: resourceModel.plural,\n    name: resourceObj.metadata.name,\n    namespace: resourceObj.metadata.namespace,\n  });\n  if (props.element.isCollapsed()) {\n    return <KnativeServiceNode {...props} editAccess={editAccess} />;\n  }\n\n  return <KnativeServiceGroup {...props} editAccess={editAccess} />;\n};\n\nexport default observer(KnativeService);\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { TooltipPosition, Tooltip } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport {\n  Node,\n  AnchorEnd,\n  observer,\n  WithSelectionProps,\n  WithContextMenuProps,\n  WithDndDropProps,\n  RectAnchor,\n  useAnchor,\n  useDragNode,\n  Layer,\n  useHover,\n  createSvgIdUrl,\n  useCombineRefs,\n  WithCreateConnectorProps,\n} from '@console/topology';\nimport SvgBoxedText from '@console/dev-console/src/components/svg/SvgBoxedText';\nimport {\n  NodeShadows,\n  NODE_SHADOW_FILTER_ID,\n  NODE_SHADOW_FILTER_ID_HOVER,\n  nodeDragSourceSpec,\n  Decorator,\n  useSearchFilter,\n  useDisplayFilters,\n} from '@console/dev-console/src/components/topology';\nimport BuildDecorator from '@console/dev-console/src/components/topology/components/nodes/build-decorators/BuildDecorator';\nimport { TYPE_KNATIVE_SERVICE } from '../../const';\nimport RevisionTrafficSourceAnchor from '../anchors/RevisionTrafficSourceAnchor';\n\nexport type KnativeServiceGroupProps = {\n  element: Node;\n  highlight?: boolean;\n  canDrop?: boolean;\n  dropTarget?: boolean;\n  edgeDragging?: boolean;\n  editAccess?: boolean;\n} & WithSelectionProps &\n  WithDndDropProps &\n  WithContextMenuProps &\n  WithCreateConnectorProps;\n\nconst DECORATOR_RADIUS = 13;\nconst KnativeServiceGroup: React.FC<KnativeServiceGroupProps> = ({\n  element,\n  selected,\n  onSelect,\n  onContextMenu,\n  contextMenuOpen,\n  canDrop,\n  dropTarget,\n  edgeDragging,\n  dndDropRef,\n  editAccess,\n  onHideCreateConnector,\n  onShowCreateConnector,\n}) => {\n  const [hover, hoverRef] = useHover();\n  const [innerHover, innerHoverRef] = useHover();\n  const [{ dragging, regrouping }, dragNodeRef] = useDragNode(\n    nodeDragSourceSpec(TYPE_KNATIVE_SERVICE, true, editAccess),\n    {\n      element,\n    },\n  );\n  const [{ dragging: labelDragging, regrouping: labelRegrouping }, dragLabelRef] = useDragNode(\n    nodeDragSourceSpec(TYPE_KNATIVE_SERVICE, true, editAccess),\n    {\n      element,\n    },\n  );\n\n  const nodeRefs = useCombineRefs(innerHoverRef, dragNodeRef);\n  const hasChildren = element.getChildren()?.length > 0;\n  const { data } = element.getData();\n  const hasDataUrl = !!data.url;\n  useAnchor(\n    React.useCallback(\n      (node: Node) => new RevisionTrafficSourceAnchor(node, hasDataUrl ? DECORATOR_RADIUS : 0),\n      [hasDataUrl],\n    ),\n    AnchorEnd.source,\n    'revision-traffic',\n  );\n  useAnchor(React.useCallback((node: Node) => new RectAnchor(node, 1.5), []));\n\n  const [filtered] = useSearchFilter(element.getLabel());\n  const displayFilters = useDisplayFilters();\n  const showLabels = displayFilters.showLabels || hover || innerHover;\n  const { x, y, width, height } = element.getBounds();\n\n  React.useLayoutEffect(() => {\n    if (editAccess) {\n      if (innerHover) {\n        onShowCreateConnector && onShowCreateConnector();\n      } else {\n        onHideCreateConnector && onHideCreateConnector();\n      }\n    }\n  }, [editAccess, innerHover, onShowCreateConnector, onHideCreateConnector]);\n\n  return (\n    <Tooltip\n      content=\"Move sink to service\"\n      trigger=\"manual\"\n      isVisible={dropTarget && canDrop}\n      tippyProps={{ duration: 0, delay: 0 }}\n    >\n      <g\n        ref={hoverRef}\n        onClick={onSelect}\n        onContextMenu={editAccess ? onContextMenu : null}\n        className={classNames('odc-knative-service', {\n          'is-dragging': dragging || labelDragging,\n          'is-highlight': canDrop || edgeDragging,\n          'is-filtered': filtered,\n        })}\n      >\n        <NodeShadows />\n        <Layer\n          id={\n            (dragging || labelDragging) && (regrouping || labelRegrouping) ? undefined : 'groups2'\n          }\n        >\n          <g\n            ref={nodeRefs}\n            className={classNames('odc-knative-service', {\n              'is-selected': selected,\n              'is-dragging': dragging || labelDragging,\n              'is-highlight': canDrop || edgeDragging,\n              'is-dropTarget': canDrop && dropTarget,\n              'is-filtered': filtered,\n            })}\n          >\n            <rect\n              ref={dndDropRef}\n              className=\"odc-knative-service__bg\"\n              x={x}\n              y={y}\n              width={width}\n              height={height}\n              rx=\"5\"\n              ry=\"5\"\n              filter={createSvgIdUrl(\n                hover || innerHover || dragging || labelDragging || contextMenuOpen || dropTarget\n                  ? NODE_SHADOW_FILTER_ID_HOVER\n                  : NODE_SHADOW_FILTER_ID,\n              )}\n            />\n            {!hasChildren && (\n              <text x={x + width / 2} y={y + height / 2} dy=\"0.35em\" textAnchor=\"middle\">\n                No Revisions\n              </text>\n            )}\n          </g>\n        </Layer>\n        {hasDataUrl && (\n          <Tooltip key=\"route\" content=\"Open URL\" position={TooltipPosition.right}>\n            <Decorator x={x + width} y={y} radius={DECORATOR_RADIUS} href={data.url} external>\n              <g transform=\"translate(-6.5, -6.5)\">\n                <ExternalLinkAltIcon style={{ fontSize: DECORATOR_RADIUS }} alt=\"Open URL\" />\n              </g>\n            </Decorator>\n          </Tooltip>\n        )}\n        <BuildDecorator x={x} y={y + height} radius={DECORATOR_RADIUS} workloadData={data} />\n        {showLabels && (data.kind || element.getLabel()) && (\n          <SvgBoxedText\n            className=\"odc-knative-service__label odc-base-node__label\"\n            x={x + width / 2}\n            y={y + height + 20}\n            paddingX={8}\n            paddingY={4}\n            kind={data.kind}\n            dragRef={dragLabelRef}\n            typeIconClass=\"icon-knative\"\n          >\n            {element.getLabel()}\n          </SvgBoxedText>\n        )}\n      </g>\n    </Tooltip>\n  );\n};\n\nexport default observer(KnativeServiceGroup);\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport {\n  observer,\n  Node,\n  useAnchor,\n  RectAnchor,\n  useCombineRefs,\n  useHover,\n  useDragNode,\n  WithDndDropProps,\n  WithSelectionProps,\n  WithContextMenuProps,\n  createSvgIdUrl,\n  WithCreateConnectorProps,\n} from '@console/topology';\nimport {\n  NodeShadows,\n  NODE_SHADOW_FILTER_ID,\n  NODE_SHADOW_FILTER_ID_HOVER,\n  nodeDragSourceSpec,\n  GroupNode,\n  useSearchFilter,\n} from '@console/dev-console/src/components/topology';\nimport { TYPE_KNATIVE_SERVICE } from '../../const';\n\ntype KnativeServiceNodeProps = {\n  element: Node;\n  highlight?: boolean;\n  canDrop?: boolean;\n  dropTarget?: boolean;\n  edgeDragging?: boolean;\n  editAccess: boolean;\n} & WithSelectionProps &\n  WithDndDropProps &\n  WithContextMenuProps &\n  WithCreateConnectorProps;\n\nconst KnativeServiceNode: React.FC<KnativeServiceNodeProps> = ({\n  element,\n  selected,\n  onSelect,\n  onContextMenu,\n  contextMenuOpen,\n  canDrop,\n  dropTarget,\n  edgeDragging,\n  dndDropRef,\n  editAccess,\n  onHideCreateConnector,\n  onShowCreateConnector,\n}) => {\n  useAnchor(React.useCallback((node: Node) => new RectAnchor(node, 1.5), []));\n  const [hover, hoverRef] = useHover();\n  const [{ dragging }, dragNodeRef] = useDragNode(\n    nodeDragSourceSpec(TYPE_KNATIVE_SERVICE, true, editAccess),\n    {\n      element,\n    },\n  );\n  const refs = useCombineRefs<SVGRectElement>(hoverRef, dragNodeRef);\n  const [filtered] = useSearchFilter(element.getLabel());\n  const { kind } = element.getData().data;\n  const { width, height } = element.getBounds();\n\n  React.useLayoutEffect(() => {\n    if (editAccess) {\n      if (hover) {\n        onShowCreateConnector && onShowCreateConnector();\n      } else {\n        onHideCreateConnector && onHideCreateConnector();\n      }\n    }\n  }, [editAccess, hover, onShowCreateConnector, onHideCreateConnector]);\n\n  return (\n    <g\n      ref={refs}\n      onContextMenu={onContextMenu}\n      onClick={onSelect}\n      className={classNames('odc-knative-service', {\n        'is-dragging': dragging,\n        'is-highlight': canDrop || edgeDragging,\n        'is-selected': selected,\n        'is-dropTarget': canDrop && dropTarget,\n        'is-filtered': filtered,\n      })}\n    >\n      <NodeShadows />\n      <rect\n        ref={dndDropRef}\n        className=\"odc-knative-service__bg\"\n        filter={createSvgIdUrl(\n          hover || dragging || contextMenuOpen || dropTarget\n            ? NODE_SHADOW_FILTER_ID_HOVER\n            : NODE_SHADOW_FILTER_ID,\n        )}\n        x={0}\n        y={0}\n        width={width}\n        height={height}\n        rx=\"5\"\n        ry=\"5\"\n      />\n      <GroupNode\n        kind={kind}\n        element={element}\n        typeIconClass=\"icon-knative\"\n        groupResources={element.getData().groupResources}\n        emptyValue=\"No Revisions\"\n      />\n    </g>\n  );\n};\n\nexport default observer(KnativeServiceNode);\n","import * as React from 'react';\nimport {\n  GraphElement,\n  Node,\n  ComponentFactory as TopologyComponentFactory,\n  withDragNode,\n  withTargetDrag,\n  withSelection,\n  withDndDrop,\n} from '@console/topology';\nimport {\n  AbstractSBRComponentFactory,\n  NodeComponentProps,\n  withContextMenu,\n  withNoDrop,\n  nodeDragSourceSpec,\n  withEditReviewAccess,\n  createMenuItems,\n  getTopologyResourceObject,\n} from '@console/dev-console/src/components/topology';\nimport { ModifyApplication } from '@console/dev-console/src/actions/modify-application';\nimport { Kebab, kebabOptionsToMenu } from '@console/internal/components/utils';\nimport { modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { RevisionModel } from '../../models';\nimport { getRevisionActions } from '../../actions/getRevisionActions';\nimport {\n  TYPE_EVENT_SOURCE,\n  TYPE_EVENT_SOURCE_LINK,\n  TYPE_KNATIVE_REVISION,\n  TYPE_KNATIVE_SERVICE,\n  TYPE_REVISION_TRAFFIC,\n} from '../const';\nimport KnativeService from './groups/KnativeService';\nimport RevisionNode from './nodes/RevisionNode';\nimport TrafficLink from './edges/TrafficLink';\nimport EventSourceLink from './edges/EventSourceLink';\nimport EventSource from './nodes/EventSource';\nimport {\n  eventSourceLinkDragSourceSpec,\n  eventSourceTargetSpec,\n  knativeServiceDropTargetSpec,\n} from './knativeComponentUtils';\n\nexport const knativeContextMenu = (element: Node) => {\n  const item = getTopologyResourceObject(element.getData());\n  const model = modelFor(referenceFor(item));\n\n  const actions = [];\n  if (model.kind === RevisionModel.kind) {\n    actions.push(...getRevisionActions());\n  } else {\n    actions.push(\n      ModifyApplication,\n      ...Kebab.getExtensionsActionsForKind(model),\n      ...Kebab.factory.common,\n    );\n  }\n\n  const kebabOptions = actions.map((action) => {\n    return action(model, item);\n  });\n\n  return createMenuItems(kebabOptionsToMenu(kebabOptions));\n};\n\nclass KnativeComponentFactory extends AbstractSBRComponentFactory {\n  getFactory = (): TopologyComponentFactory => {\n    return (kind, type): React.ComponentType<{ element: GraphElement }> | undefined => {\n      switch (type) {\n        case TYPE_KNATIVE_SERVICE:\n          return this.withAddResourceConnector()(\n            withDndDrop<\n              any,\n              any,\n              { droppable?: boolean; hover?: boolean; canDrop?: boolean; dropTarget?: boolean },\n              NodeComponentProps\n            >(knativeServiceDropTargetSpec)(\n              withEditReviewAccess('update')(\n                withSelection(false, true)(withContextMenu(knativeContextMenu)(KnativeService)),\n              ),\n            ),\n          );\n        case TYPE_EVENT_SOURCE:\n          return withEditReviewAccess('patch')(\n            withDragNode(nodeDragSourceSpec(type))(\n              withSelection(\n                false,\n                true,\n              )(\n                withContextMenu(knativeContextMenu)(\n                  withDndDrop<any, any, {}, NodeComponentProps>(eventSourceTargetSpec)(EventSource),\n                ),\n              ),\n            ),\n          );\n        case TYPE_KNATIVE_REVISION:\n          return withDragNode(nodeDragSourceSpec(type, false))(\n            withSelection(\n              false,\n              true,\n            )(withContextMenu(knativeContextMenu)(withNoDrop()(RevisionNode))),\n          );\n        case TYPE_REVISION_TRAFFIC:\n          return TrafficLink;\n        case TYPE_EVENT_SOURCE_LINK:\n          return withTargetDrag(eventSourceLinkDragSourceSpec())(EventSourceLink);\n        default:\n          return undefined;\n      }\n    };\n  };\n}\n\nexport default KnativeComponentFactory;\n","import { errorModal } from '@console/internal/components/modals';\nimport {\n  GraphElement,\n  Edge,\n  Node,\n  DropTargetSpec,\n  DragSourceSpec,\n  DragObjectWithType,\n  CREATE_CONNECTOR_DROP_TYPE,\n  CREATE_CONNECTOR_OPERATION,\n  DragSpecOperationType,\n} from '@console/topology';\nimport {\n  NodeComponentProps,\n  NODE_DRAG_TYPE,\n  EDGE_DRAG_TYPE,\n  EdgeComponentProps,\n  EditableDragOperationType,\n} from '@console/dev-console/src/components/topology';\nimport { TYPE_EVENT_SOURCE_LINK, TYPE_KNATIVE_SERVICE } from '../const';\nimport { createSinkConnection } from '../knative-topology-utils';\n\nexport const MOVE_EV_SRC_CONNECTOR_OPERATION = 'moveeventsourceconnector';\n\nexport const nodesEdgeIsDragging = (monitor, props) =>\n  monitor.isDragging() &&\n  ((monitor.getOperation() === CREATE_CONNECTOR_OPERATION && monitor.getItem() === props.element) ||\n    (monitor.getOperation() === MOVE_EV_SRC_CONNECTOR_OPERATION &&\n      monitor.getItem().getSource()) === props.element);\n\nexport const canDropEventSourceSinkOnNode = (operation: string, edge: Edge, node: Node): boolean =>\n  edge.getSource() !== node &&\n  node.getType() === TYPE_KNATIVE_SERVICE &&\n  operation === MOVE_EV_SRC_CONNECTOR_OPERATION &&\n  !node.getTargetEdges().find((e) => e.getSource() === edge.getSource());\n\nexport const knativeServiceDropTargetSpec: DropTargetSpec<\n  Edge,\n  any,\n  { canDrop: boolean; dropTarget: boolean; edgeDragging: boolean },\n  NodeComponentProps\n> = {\n  accept: [EDGE_DRAG_TYPE],\n  canDrop: (item, monitor, props) =>\n    item.getType() === TYPE_EVENT_SOURCE_LINK && item.getSource() !== props.element,\n  collect: (monitor, props) => ({\n    canDrop:\n      monitor.isDragging() && monitor.getOperation()?.type === MOVE_EV_SRC_CONNECTOR_OPERATION,\n    dropTarget: monitor.isOver({ shallow: true }),\n    edgeDragging: nodesEdgeIsDragging(monitor, props),\n  }),\n};\n\nexport const eventSourceLinkDragSourceSpec = (): DragSourceSpec<\n  DragObjectWithType,\n  DragSpecOperationType<EditableDragOperationType>,\n  Node,\n  { dragging: boolean },\n  EdgeComponentProps\n> => ({\n  item: { type: EDGE_DRAG_TYPE },\n  operation: { type: MOVE_EV_SRC_CONNECTOR_OPERATION, edit: true },\n  begin: (monitor, props) => {\n    props.element.raise();\n    return props.element;\n  },\n  drag: (event, monitor, props) => {\n    props.element.setEndPoint(event.x, event.y);\n  },\n  end: (dropResult, monitor, props) => {\n    props.element.setEndPoint();\n    if (\n      monitor.didDrop() &&\n      dropResult &&\n      canDropEventSourceSinkOnNode(monitor.getOperation().type, props.element, dropResult)\n    ) {\n      createSinkConnection(props.element.getSource(), dropResult).catch((error) => {\n        errorModal({\n          title: 'Error moving event source sink',\n          error: error.message,\n          showIcon: true,\n        });\n      });\n    }\n  },\n  collect: (monitor) => ({\n    dragging: monitor.isDragging(),\n  }),\n});\n\nexport const eventSourceTargetSpec: DropTargetSpec<\n  GraphElement,\n  any,\n  {},\n  { element: GraphElement }\n> = {\n  accept: [NODE_DRAG_TYPE, EDGE_DRAG_TYPE, CREATE_CONNECTOR_DROP_TYPE],\n  canDrop: () => {\n    return false;\n  },\n  collect: (monitor, props) => ({\n    edgeDragging: nodesEdgeIsDragging(monitor, props),\n  }),\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport {\n  Node,\n  observer,\n  useHover,\n  WithSelectionProps,\n  WithDndDropProps,\n  WithContextMenuProps,\n  useSvgAnchor,\n  useCombineRefs,\n  WithDragNodeProps,\n  createSvgIdUrl,\n} from '@console/topology';\nimport SvgBoxedText from '@console/dev-console/src/components/svg/SvgBoxedText';\nimport {\n  NodeShadows,\n  NODE_SHADOW_FILTER_ID_HOVER,\n  NODE_SHADOW_FILTER_ID,\n  useSearchFilter,\n  useDisplayFilters,\n} from '@console/dev-console/src/components/topology';\nimport { getKnativeEventSourceIcon } from '../../../utils/get-knative-icon';\n\nimport './EventSource.scss';\n\nexport type EventSourceProps = {\n  element: Node;\n  dragging?: boolean;\n  edgeDragging?: boolean;\n} & WithSelectionProps &\n  WithDragNodeProps &\n  WithDndDropProps &\n  WithContextMenuProps;\n\nconst EventSource: React.FC<EventSourceProps> = ({\n  element,\n  selected,\n  onSelect,\n  onContextMenu,\n  contextMenuOpen,\n  dragNodeRef,\n  dndDropRef,\n  dragging,\n  edgeDragging,\n}) => {\n  const svgAnchorRef = useSvgAnchor();\n  const [hover, hoverRef] = useHover();\n  const groupRefs = useCombineRefs(dragNodeRef, dndDropRef, hoverRef);\n  const [filtered] = useSearchFilter(element.getLabel());\n  const displayFilters = useDisplayFilters();\n  const showLabels = displayFilters.showLabels || hover;\n  const { width, height } = element.getBounds();\n  const size = Math.min(width, height);\n  const { data } = element.getData();\n\n  return (\n    <g\n      className={classNames('odc-event-source', {\n        'is-filtered': filtered,\n        'is-dragging': dragging || edgeDragging,\n        'is-selected': selected,\n      })}\n      onClick={onSelect}\n      onContextMenu={onContextMenu}\n      ref={groupRefs}\n    >\n      <NodeShadows />\n      <polygon\n        className=\"odc-event-source__bg\"\n        ref={svgAnchorRef}\n        filter={createSvgIdUrl(\n          hover || dragging || contextMenuOpen\n            ? NODE_SHADOW_FILTER_ID_HOVER\n            : NODE_SHADOW_FILTER_ID,\n        )}\n        points={`${width / 2}, ${(height - size) / 2} ${width - (width - size) / 2},${height /\n          2} ${width / 2},${height - (height - size) / 2} ${(width - size) / 2},${height / 2}`}\n      />\n      <image\n        x={width * 0.25}\n        y={height * 0.25}\n        width={size * 0.5}\n        height={size * 0.5}\n        xlinkHref={getKnativeEventSourceIcon(data.kind)}\n      />\n      {showLabels && (data.kind || element.getLabel()) && (\n        <SvgBoxedText\n          className=\"odc-base-node__label\"\n          x={width / 2}\n          y={(height + size) / 2 + 20}\n          paddingX={8}\n          paddingY={4}\n          kind={data.kind}\n        >\n          {element.getLabel()}\n        </SvgBoxedText>\n      )}\n    </g>\n  );\n};\n\nexport default observer(EventSource);\n","import * as React from 'react';\nimport { useAnchor, AnchorEnd, Node, observer } from '@console/topology';\nimport { WorkloadNode } from '@console/dev-console/src/components/topology';\nimport RevisionTrafficTargetAnchor from '../anchors/RevisionTrafficTargetAnchor';\n\nconst DECORATOR_RADIUS = 13;\nconst RevisionNode: React.FC<React.ComponentProps<typeof WorkloadNode>> = (props) => {\n  const hasDataUrl = !!props.element.getData().data.url;\n  useAnchor(\n    React.useCallback(\n      (node: Node) => new RevisionTrafficTargetAnchor(node, hasDataUrl ? DECORATOR_RADIUS : 0),\n      [hasDataUrl],\n    ),\n    AnchorEnd.target,\n    'revision-traffic',\n  );\n  return <WorkloadNode {...props} />;\n};\n\nexport default observer(RevisionNode);\n","import * as _ from 'lodash';\nimport { ColaGroup, ColaLink, ColaNode, getGroupPadding, LayoutOptions } from '@console/topology';\nimport { TYPE_EVENT_SOURCE_LINK, TYPE_KNATIVE_SERVICE } from '../const';\n\nconst getNodeTimeStamp = (node: ColaNode): Date => {\n  const data = node.element.getData();\n  return new Date(_.get(data, 'resources.obj.metadata.creationTimestamp', 0));\n};\n\n// Sort nodes most recent to least recent\nconst nodeSorter = (node1: ColaNode, node2: ColaNode) =>\n  getNodeTimeStamp(node1) > getNodeTimeStamp(node2) ? -1 : 1;\n\nexport const layoutConstraints = (\n  nodes: ColaNode[],\n  groups: ColaGroup[],\n  edges: ColaLink[],\n  options: LayoutOptions,\n): any[] => {\n  const constraints: any[] = [];\n\n  [...groups, ...nodes]\n    .filter((g) => g.element.getType() === TYPE_KNATIVE_SERVICE)\n    .forEach((g) => {\n      const serviceConstraint: any = {\n        type: 'alignment',\n        axis: 'y',\n        offsets: [],\n      };\n\n      // Sort revisions such that most recent is to the left\n      const revisions = g instanceof ColaGroup && g.leaves.sort(nodeSorter);\n      if (revisions) {\n        for (let i = 0; i < revisions.length; i++) {\n          serviceConstraint.offsets.push({ node: revisions[i].index, offset: 0 });\n          if (i < revisions.length - 1) {\n            // Space out each revision horizontally\n            constraints.push({\n              axis: 'x',\n              left: revisions[i].index,\n              right: revisions[i + 1].index,\n              gap: revisions[i].width,\n              equality: true,\n            });\n          }\n        }\n        if (serviceConstraint.offsets.length) {\n          constraints.push(serviceConstraint);\n        }\n      }\n\n      const eventSourceLinks = edges\n        .filter(\n          (e) =>\n            e.element.getType() === TYPE_EVENT_SOURCE_LINK &&\n            (e.target.element === g.element || e.target.element.getParent() === g.element),\n        )\n        .sort((l1: ColaLink, l2: ColaLink) => nodeSorter(l1.source, l2.source));\n      if (eventSourceLinks.length) {\n        const height = eventSourceLinks.reduce((current: number, nextLink: ColaLink) => {\n          return current + nextLink.source.height;\n        }, 0);\n        const serviceNode = (revisions && _.last(revisions)) || g;\n        const serviceDistance = revisions\n          ? (serviceNode as ColaNode).radius + getGroupPadding(g.element)\n          : (serviceNode as ColaNode).width / 2;\n\n        const eventSourceConstraint: any = {\n          type: 'alignment',\n          axis: 'y',\n          offsets: [{ node: eventSourceLinks[0].target.index, offset: 0 }],\n        };\n        let nextOffset = -height / 2;\n        eventSourceLinks.forEach((link: ColaLink) => {\n          // Evenly space out the event sources vertically\n          eventSourceConstraint.offsets.push({\n            node: link.source.index,\n            offset: nextOffset + link.source.height / 2,\n          });\n          // Keep the event sources to the right\n          constraints.push({\n            axis: 'x',\n            left: serviceNode.index,\n            right: link.source.index,\n            gap: serviceDistance + link.source.width / 2 + options.linkDistance,\n            equality: true,\n          });\n          nextOffset += link.source.height;\n        });\n        constraints.push(eventSourceConstraint);\n      }\n    });\n  return constraints;\n};\n","import { kindForReference } from '@console/internal/module/k8s';\nimport * as apiServerSourceImg from '../imgs/logos/apiserversource.png';\nimport * as camelSourceImg from '../imgs/logos/camelsource.svg';\nimport * as containerSourceImg from '../imgs/logos/containersource.png';\nimport * as cronJobSourceImg from '../imgs/logos/cronjobsource.svg';\nimport * as kafkaSourceImg from '../imgs/logos/kafkasource.svg';\nimport * as eventSourceImg from '../imgs/event-source.svg';\nimport {\n  EventSourceCronJobModel,\n  EventSourceContainerModel,\n  EventSourceApiServerModel,\n  EventSourceCamelModel,\n  EventSourceKafkaModel,\n  EventSourcePingModel,\n} from '../models';\n\nexport const getKnativeEventSourceIcon = (kind: string): string => {\n  switch (kindForReference(kind)) {\n    case EventSourceApiServerModel.kind:\n      return apiServerSourceImg;\n    case EventSourceCamelModel.kind:\n      return camelSourceImg;\n    case EventSourceContainerModel.kind:\n      return containerSourceImg;\n    case EventSourceCronJobModel.kind:\n    case EventSourcePingModel.kind:\n      return cronJobSourceImg;\n    case EventSourceKafkaModel.kind:\n      return kafkaSourceImg;\n    default:\n      return eventSourceImg;\n  }\n};\n","import * as React from 'react';\nimport { MinusCircleIcon } from '@patternfly/react-icons';\nimport { GridItem, TextInput, Button } from '@patternfly/react-core';\nimport { IDLabel } from '../types';\n\nexport const LabelRow = <T extends IDLabel = IDLabel>({\n  label,\n  onChange,\n  onDelete,\n}: LabelRowProps<T>) => {\n  const { id, key, value } = label;\n  return (\n    <>\n      <GridItem span={6}>\n        <TextInput\n          id={`label-${id}-key-input`}\n          className=\"kv-label__key\"\n          placeholder=\"key\"\n          isRequired\n          type=\"text\"\n          value={key}\n          onChange={(newKey) => onChange({ ...label, key: newKey })}\n          aria-label=\"selector key\"\n        />\n      </GridItem>\n      <GridItem span={5}>\n        <TextInput\n          id={`label-${id}-value-input`}\n          className=\"kv-label__value\"\n          placeholder=\"value\"\n          isRequired\n          type=\"text\"\n          value={value}\n          onChange={(newValue) => onChange({ ...label, value: newValue })}\n          aria-label=\"selector value\"\n        />\n      </GridItem>\n      <GridItem span={1}>\n        <Button id={`label-${id}-delete-btn`} onClick={() => onDelete(id)} variant=\"plain\">\n          <MinusCircleIcon />\n        </Button>\n      </GridItem>\n    </>\n  );\n};\n\ntype LabelRowProps<T> = {\n  label: T;\n  onChange: (label: T) => void;\n  onDelete: (id: any) => void;\n};\n","export const ADD_LABEL = 'Add Label';\nexport const EMPTY_ADD_LABEL = 'Add Label to specify qualifying nodes';\nexport const LABEL_KEY = 'Key';\nexport const LABEL_TAINT_KEY = 'Taint Key';\nexport const LABEL_VALUE = 'Value';\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { Grid, Button, Split, SplitItem } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { ExternalLink, resourcePath } from '@console/internal/components/utils';\nimport { K8sResourceKindReference } from '@console/internal/module/k8s';\nimport { ADD_LABEL, EMPTY_ADD_LABEL } from './consts';\nimport './labels-list.scss';\n\nexport const LabelsList = ({\n  kind = '',\n  isEmpty,\n  onLabelAdd,\n  children,\n  addRowText = ADD_LABEL,\n  emptyStateAddRowText = EMPTY_ADD_LABEL,\n}: LabelsListProps) => (\n  <>\n    <Grid className=\"kv-labels-list__grid\">{children}</Grid>\n    <Split className=\"kv-labels-list__buttons\">\n      <SplitItem>\n        <Button\n          className=\"pf-m-link--align-left\"\n          id=\"vm-labels-list-add-btn\"\n          variant=\"link\"\n          onClick={() => onLabelAdd()}\n          icon={<PlusCircleIcon />}\n        >\n          {isEmpty ? emptyStateAddRowText : addRowText}\n        </Button>\n      </SplitItem>\n      <SplitItem isFilled />\n      <SplitItem>\n        {kind && (\n          <ExternalLink\n            additionalClassName=\"kv-labels-list__link\"\n            text={<div>{`Explore ${kind} list`}</div>}\n            href={resourcePath(kind)}\n          />\n        )}\n      </SplitItem>\n    </Split>\n  </>\n);\n\ntype LabelsListProps = {\n  children: React.ReactNode;\n  isEmpty: boolean;\n  kind?: K8sResourceKindReference;\n  addRowText?: string;\n  emptyStateAddRowText?: string;\n  onLabelAdd: () => void;\n};\n","import * as React from 'react';\nimport { Button, Text, TextVariants } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\n\nexport const AddDeviceButton: React.FC<AddDeviceButtonType> = ({\n  id,\n  message,\n  disabledMessage,\n  isDisabled,\n  onClick,\n}) =>\n  isDisabled ? (\n    <Text component={TextVariants.p}>{disabledMessage}</Text>\n  ) : (\n    <Button\n      className=\"pf-m-link--align-left\"\n      id={id}\n      variant=\"link\"\n      onClick={onClick}\n      icon={<PlusCircleIcon />}\n    >\n      {message}\n    </Button>\n  );\n\nexport type AddDeviceButtonType = {\n  id: string;\n  message: string;\n  disabledMessage: string;\n  isDisabled: boolean;\n  onClick: () => void;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { FormSelect, FormSelectOption, Button } from '@patternfly/react-core';\nimport { MinusCircleIcon } from '@patternfly/react-icons';\nimport { BootableDeviceType } from '../../types';\nimport { deviceKey, deviceLabel } from './constants';\n\nexport const AddDeviceFormSelect: React.FC<AddDeviceFormSelectProps> = ({\n  id,\n  options,\n  label,\n  onAdd,\n  onDelete,\n}) => (\n  <>\n    <FormSelect\n      value=\"\"\n      id={id}\n      onChange={onAdd}\n      className=\"kubevirt-boot-order__add-device-select\"\n    >\n      <FormSelectOption label={label} value=\"\" />\n      {_.orderBy(options, ['type', 'value.name']).map((option) => (\n        <FormSelectOption\n          label={deviceLabel(option)}\n          value={deviceKey(option)}\n          key={deviceKey(option)}\n        />\n      ))}\n    </FormSelect>\n    <Button\n      onClick={onDelete}\n      variant=\"link\"\n      className=\"kubevirt-boot-order__add-device-delete-btn\"\n    >\n      <MinusCircleIcon />\n    </Button>\n  </>\n);\n\nexport type AddDeviceFormSelectProps = {\n  id: string;\n  options: BootableDeviceType[];\n  label: string;\n  onDelete: () => void;\n  /** onAdd moves items from the options list to the sources list, key = \"<type>-<name>\". */\n  onAdd: (key: string) => void;\n};\n","import * as React from 'react';\nimport { BootableDeviceType } from '../../types';\nimport { AddDeviceButton } from './add-device-button';\nimport { AddDeviceFormSelect } from './add-device-form-select';\nimport { addItemMessage, addItemDisabledMessage, addItemSelectLabel } from './constants';\n\nexport const AddDevice = ({ devices, onAdd, isEditMode, setEditMode }: AddDeviceProps) => {\n  const options = devices.filter((device) => !device.value.bootOrder);\n\n  const canAddItem = options.length > 0;\n  const selectID = 'add-device-select';\n  const buttontID = 'add-device-btm';\n\n  return (\n    <div className=\"kubevirt-boot-order__add-device\">\n      {isEditMode && canAddItem ? (\n        <AddDeviceFormSelect\n          id={selectID}\n          options={options}\n          label={addItemSelectLabel}\n          onAdd={onAdd}\n          onDelete={() => setEditMode(false)}\n        />\n      ) : (\n        <AddDeviceButton\n          id={buttontID}\n          message={addItemMessage}\n          disabledMessage={addItemDisabledMessage}\n          isDisabled={!canAddItem}\n          onClick={() => setEditMode(true)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport type AddDeviceProps = {\n  devices: BootableDeviceType[];\n  isEditMode: boolean;\n  /** onAdd moves items from the options list to the sources list, key = \"<type>-<name>\". */\n  onAdd: (key: string) => void;\n  setEditMode: (boolean) => void;\n};\n","import * as React from 'react';\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateVariant,\n  Title,\n  Alert,\n} from '@patternfly/react-core';\n\n// Display and empty with a Call to add new source if no sources are defined.\nexport const BootOrderEmpty: React.FC<BootOrderEmptyProps> = ({\n  title,\n  message,\n  addItemMessage,\n  addItemIsDisabled,\n  addItemDisabledMessage,\n  onClick,\n}) => (\n  <EmptyState variant={EmptyStateVariant.full}>\n    <Title headingLevel=\"h5\" size=\"lg\">\n      {title}\n    </Title>\n    <EmptyStateBody>{message}</EmptyStateBody>\n    {!addItemIsDisabled ? (\n      <Button\n        variant=\"secondary\"\n        onClick={onClick}\n        className=\"kubevirt-boot-order__boot-order-empty-btn\"\n      >\n        {addItemMessage}\n      </Button>\n    ) : (\n      <Alert variant=\"info\" title={addItemDisabledMessage} />\n    )}\n  </EmptyState>\n);\n\nexport type BootOrderEmptyProps = {\n  title: string;\n  message: string;\n  addItemMessage: string;\n  addItemIsDisabled: boolean;\n  addItemDisabledMessage?: string;\n  onClick: () => void;\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport { DNDDataList, DNDDataListItem } from '../dnd-list';\nimport { BootableDeviceType } from '../../types';\nimport { BootOrderEmpty } from './boot-order-empty';\nimport { AddDevice } from './add-device';\nimport {\n  addItemMessage,\n  addItemDisabledMessage,\n  bootOrderEmptyMessage,\n  bootOrderEmptyTitle,\n  deviceKey,\n  deviceLabel,\n  bootOrderAriaLabel,\n} from './constants';\n\nimport './boot-order.scss';\n\nexport const BootOrder = ({ devices, setDevices }: BootOrderProps) => {\n  const sources = _.sortBy(\n    devices.filter((device) => device.value.bootOrder),\n    'value.bootOrder',\n  );\n  const options = devices.filter((device) => !device.value.bootOrder);\n  const [isEditMode, setEditMode] = React.useState<boolean>(false);\n\n  // Relax bootOrder and use setDevice to update the parent componenet.\n  const updateDevices = (newDevices: BootableDeviceType[]): void => {\n    _.filter(newDevices, (device) => device.value.bootOrder).forEach((source, i) => {\n      source.value.bootOrder = i + 1;\n    });\n\n    setDevices(newDevices);\n    setEditMode(false);\n  };\n\n  // Remove a bootOrder from a device by index.\n  const onDelete = (index: number) => {\n    const newDevices = _.cloneDeep(devices);\n\n    const key = deviceKey(sources[index]);\n    delete newDevices.find((device) => deviceKey(device) === key).value.bootOrder;\n\n    updateDevices(newDevices);\n  };\n\n  // Move a source from one index to another.\n  const onMove = (index: number, toIndex: number) => {\n    const unMovedSources = [...sources.slice(0, index), ...sources.slice(index + 1)];\n\n    // Create an ordered copy of the sources.\n    const newSources = _.cloneDeep([\n      ...unMovedSources.slice(0, toIndex),\n      sources[index],\n      ...unMovedSources.slice(toIndex),\n    ]);\n\n    updateDevices([...newSources, ...options]);\n  };\n\n  // Add a bootOrder to a device by key, item key is \"<type>->name>\".\n  const onAdd = (key: string): void => {\n    const newOptions = _.cloneDeep(options);\n    newOptions.find((option) => deviceKey(option) === key).value.bootOrder = sources.length + 1;\n\n    updateDevices([...sources, ...newOptions]);\n  };\n\n  const showEmpty = sources.length === 0 && !isEditMode;\n  const dataListID = 'VMBootOrderList';\n\n  return (\n    <>\n      {showEmpty ? (\n        <BootOrderEmpty\n          title={bootOrderEmptyTitle}\n          message={bootOrderEmptyMessage}\n          addItemMessage={addItemMessage}\n          addItemDisabledMessage={addItemDisabledMessage}\n          addItemIsDisabled={options.length === 0}\n          onClick={() => {\n            setEditMode(true);\n          }}\n        />\n      ) : (\n        <>\n          <DNDDataList id={dataListID} aria-label={bootOrderAriaLabel}>\n            {sources.map((source, index) => (\n              <DNDDataListItem\n                index={index}\n                onDelete={onDelete}\n                onMove={onMove}\n                aria-labelledby={`device-${deviceKey(source)}`}\n                key={`device-${deviceKey(source)}`}\n                className=\"kubevirt-boot-order__data-list-item\"\n              >\n                <Text id={`device-${deviceKey(source)}`} component={TextVariants.p}>\n                  {deviceLabel(source)}\n                </Text>\n              </DNDDataListItem>\n            ))}\n          </DNDDataList>\n          <AddDevice\n            devices={devices}\n            onAdd={onAdd}\n            isEditMode={isEditMode}\n            setEditMode={setEditMode}\n          />\n        </>\n      )}\n    </>\n  );\n};\n\nexport type BootOrderProps = {\n  devices: BootableDeviceType[];\n  setDevices: (devices: BootableDeviceType[]) => void;\n};\n","import { BootableDeviceType } from '../../types';\n\nexport const addItemMessage = 'Add source';\nexport const addItemDisabledMessage = 'All sources selected';\nexport const addItemSelectLabel = 'Please select a boot source';\nexport const bootOrderEmptyTitle = 'No resource selected';\nexport const bootOrderEmptyMessage =\n  'VM will attempt to boot from disks by order of apearance in YAML file';\nexport const bootOrderAriaLabel = 'VM Boot Order List';\n\nexport const deviceKey = (device: BootableDeviceType) => `${device.type}-${device.value.name}`;\nexport const deviceLabel = (device: BootableDeviceType) =>\n  `${device.value.name} (${device.typeLabel})`;\n","export { deviceKey, deviceLabel } from './constants';\nexport * from './boot-order';\nexport * from './summary/boot-order-summary';\n","import * as React from 'react';\nimport { Expandable, Text, TextVariants } from '@patternfly/react-core';\nimport { BootableDeviceType } from '../../../types';\nimport { deviceLabel, deviceKey, bootOrderEmptyTitle, bootOrderEmptyMessage } from '../constants';\n\nexport const BootOrderEmptySummary: React.FC<BootOrderEmptySummaryProps> = ({ devices }) => {\n  const [isExpanded, setIsExpanded] = React.useState<boolean>(false);\n  const options = devices.filter((device) => !device.value.bootOrder);\n  const onToggle = React.useCallback(() => setIsExpanded(!isExpanded), [isExpanded]);\n\n  // Note(Yaacov):\n  // className='text-secondary' is a hack to fix TextVariants being overriden.\n  // Using <ol> because '@patternfly/react-core' <List> currently miss isOrder parameter.\n  return (\n    <>\n      <Text component={TextVariants.p} className=\"kubevirt-boot-order-summary__empty-text\">\n        {bootOrderEmptyTitle}\n      </Text>\n      <Text component={TextVariants.small} className=\"text-secondary\">\n        {bootOrderEmptyMessage}\n      </Text>\n      {options.length > 0 && (\n        <Expandable\n          toggleText={isExpanded ? 'Hide default boot disks' : 'Show default boot disks'}\n          onToggle={onToggle}\n          isExpanded={isExpanded}\n          className=\"kubevirt-boot-order-summary__expandable\"\n        >\n          <ol>\n            {options.map((option) => (\n              <li key={deviceKey(option)}>{deviceLabel(option)}</li>\n            ))}\n          </ol>\n        </Expandable>\n      )}\n    </>\n  );\n};\n\nexport type BootOrderEmptySummaryProps = {\n  devices: BootableDeviceType[];\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { BootableDeviceType } from '../../../types';\nimport { deviceLabel, deviceKey } from '../constants';\nimport { BootOrderEmptySummary } from './boot-order-empty-summary';\n\n// NOTE(yaacov): using <ol> because '@patternfly/react-core' <List> currently miss isOrder parameter.\nexport const BootOrderSummary: React.FC<BootOrderSummaryProps> = ({ devices }) => {\n  const sources = _.sortBy(\n    devices.filter((device) => device.value.bootOrder),\n    'value.bootOrder',\n  );\n\n  return (\n    <>\n      {sources.length === 0 ? (\n        <BootOrderEmptySummary devices={devices} />\n      ) : (\n        <ol>\n          {sources.map((source) => (\n            <li key={deviceKey(source)}>{deviceLabel(source)}</li>\n          ))}\n        </ol>\n      )}\n    </>\n  );\n};\n\nexport type BootOrderSummaryProps = {\n  devices: BootableDeviceType[];\n};\n","import * as React from 'react';\nimport { MinusCircleIcon, PficonDragdropIcon } from '@patternfly/react-icons';\nimport {\n  DataListItem,\n  DataListItemRow,\n  DataListItemCells,\n  DataListCell,\n  DataListItemProps,\n} from '@patternfly/react-core';\nimport { useDrag, useDrop } from 'react-dnd';\n\nconst DNDDataListItemTypeName = 'dnd-row';\nconst DNDDataListCellMoveStyle = { cursor: 'move' };\nconst DNDDataListCellSDeleteStyle = { cursor: 'pointer' };\n\nexport interface DNDDataListItemProps extends DataListItemProps {\n  /** Order index of rendered item. */\n  index: number;\n  /** Action when delete icon is pressed. */\n  onDelete: (index: number) => void;\n  /** Action when item is moved from one order index to anoter. */\n  onMove: (index: number, toIndex: number) => void;\n}\n\nexport const DNDDataListItem: React.FC<DNDDataListItemProps> = ({\n  index,\n  onDelete,\n  onMove,\n  'aria-labelledby': ariaLabelledby,\n  children,\n  ...props\n}) => {\n  // Create a drag item copy.\n  const [, drag, preview] = useDrag({\n    item: { type: DNDDataListItemTypeName, id: `${DNDDataListItemTypeName}-${index}`, index },\n  });\n  // Move item when hover over onoter item.\n  const [{ opacity }, drop] = useDrop({\n    accept: DNDDataListItemTypeName,\n    collect: (monitor) => ({\n      opacity: monitor.isOver() ? 0 : 1,\n    }),\n    hover(item: any) {\n      if (item.index === index) {\n        return;\n      }\n\n      onMove(item.index, index);\n      item.index = index;\n    },\n  });\n\n  // Action when item is focused and key is pressed:\n  // ArrowUp:   move item one order index down.\n  // ArrowDown: move item one order index up.\n  // '-':       delete an item.\n  const onKeyDown = (e: React.KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowUp':\n        if (index > 0) onMove(index, index - 1);\n        break;\n      case 'ArrowDown':\n        onMove(index, index + 1);\n        break;\n      case '-':\n        onDelete(index);\n        break;\n      default:\n      // We only accept up, down and minus.\n    }\n  };\n\n  const cellKey = (i: number | string) => `item-${i}`;\n  const dataListCell = [\n    <DataListCell isFilled={false} key={cellKey('drag')}>\n      <div ref={drag} style={DNDDataListCellMoveStyle}>\n        <PficonDragdropIcon />\n      </div>\n    </DataListCell>,\n    ...React.Children.map(children, (cell, i) => (\n      <DataListCell width={1} key={cellKey(i)}>\n        {cell}\n      </DataListCell>\n    )),\n    <DataListCell\n      isFilled={false}\n      alignRight\n      key={cellKey('delete')}\n      style={DNDDataListCellSDeleteStyle}\n      onClick={() => onDelete(index)}\n    >\n      <MinusCircleIcon />\n    </DataListCell>,\n  ];\n\n  return (\n    <div ref={(node) => preview(drop(node))} style={{ opacity }}>\n      <DataListItem tabIndex={0} aria-labelledby={ariaLabelledby} onKeyDown={onKeyDown} {...props}>\n        <DataListItemRow>\n          <DataListItemCells dataListCells={dataListCell} />\n        </DataListItemRow>\n      </DataListItem>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { DataList, DataListProps } from '@patternfly/react-core';\nimport { DndProvider } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\n\nexport const DNDDataList: React.FC<DNDDataListProps> = ({ children, ...props }) => (\n  <DndProvider backend={HTML5Backend}>\n    <DataList {...props}>{children}</DataList>\n  </DndProvider>\n);\n\nexport type DNDDataListProps = DataListProps;\n","export * from './dnd-data-list';\nexport * from './dnd-data-list-item';\n","import * as React from 'react';\n\nexport const EditButton: React.FC<EditButtonProps> = (props) => {\n  const { canEdit, onClick, id, children } = props;\n\n  if (canEdit) {\n    return (\n      <button\n        id={id}\n        type=\"button\"\n        className=\"btn btn-link co-modal-btn-link co-modal-btn-link--left\"\n        onClick={onClick}\n      >\n        {children}\n      </button>\n    );\n  }\n\n  return null;\n};\n\ntype EditButtonProps = {\n  children?: any;\n  canEdit: boolean;\n  onClick: React.MouseEventHandler;\n  id?: string;\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { Alert, AlertVariant } from '@patternfly/react-core';\nimport * as classNames from 'classnames';\n\nimport './errors.scss';\n\nexport type Error = {\n  message?: string;\n  variant?: AlertVariant;\n  title: string;\n  key?: string;\n};\n\ntype ErrorsProps = {\n  errors: Error[];\n  endMargin?: boolean;\n};\n\nexport const Errors: React.FC<ErrorsProps> = ({ errors, endMargin }) => {\n  return (\n    <>\n      {errors &&\n        errors.map(({ message, key, title, variant }, idx, arr) => (\n          <Alert\n            isInline\n            key={key || idx}\n            variant={variant || AlertVariant.danger}\n            title={title}\n            className={classNames({\n              'kubevirt-errors__error-group--item': idx !== arr.length - 1,\n              'kubevirt-errors__error-group--end ': endMargin && idx === arr.length - 1,\n            })}\n          >\n            {message}\n          </Alert>\n        ))}\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { FormGroup } from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { PopoverStatus, ValidationErrorType } from '@console/shared';\nimport './form-row.scss';\n\nexport const FormRow: React.FC<FormRowProps> = ({\n  fieldId,\n  title,\n  help,\n  isHidden,\n  isRequired,\n  isLoading,\n  validationMessage,\n  validationType,\n  validation,\n  children,\n  className,\n}) => {\n  if (isHidden) {\n    return null;\n  }\n  const type = (validation && validation.type) || validationType;\n  const message = (validation && validation.message) || validationMessage;\n\n  return (\n    <FormGroup\n      label={title}\n      isRequired={isRequired}\n      fieldId={fieldId}\n      isValid={type !== ValidationErrorType.Error}\n      helperTextInvalid={type === ValidationErrorType.Error ? message : undefined}\n      helperText={\n        type === ValidationErrorType.Info || type === ValidationErrorType.Warn ? message : undefined\n      }\n      className={className}\n    >\n      {help && (\n        <span className=\"kubevirt-form-row__icon-status-container\">\n          <PopoverStatus\n            icon={<HelpIcon className=\"kubevirt-form-row__help-icon--hidden\" />}\n            activeIcon={<HelpIcon />}\n            title={`${fieldId} help`}\n            iconOnly\n            hideHeader\n          >\n            {help}\n          </PopoverStatus>\n        </span>\n      )}\n      {isLoading && (\n        <span className=\"kubevirt-form-row__loading-container\">\n          <LoadingInline />\n        </span>\n      )}\n      {children}\n    </FormGroup>\n  );\n};\n\ntype FormRowProps = {\n  fieldId: string;\n  title?: string;\n  help?: React.ReactNode;\n  helpTitle?: string;\n  isHidden?: boolean;\n  isRequired?: boolean;\n  isLoading?: boolean;\n  validationMessage?: string;\n  validationType?: ValidationErrorType;\n  validation?: {\n    message?: string;\n    type?: ValidationErrorType;\n  };\n  children?: React.ReactNode;\n  className?: string;\n};\n","import * as React from 'react';\nimport { FormSelectOption } from '@patternfly/react-core';\n\nexport const asFormSelectValue = (value) => value || '';\n\n// renders only when props change (shallow compare)\nexport const FormSelectPlaceholderOption: React.FC<FormSelectPlaceholderOptionProps> = ({\n  placeholder,\n  isDisabled,\n}) => {\n  return (\n    placeholder && (\n      <FormSelectOption isDisabled={isDisabled} key=\"defaultValue\" value=\"\" label={placeholder} />\n    )\n  );\n};\n\ntype FormSelectPlaceholderOptionProps = {\n  placeholder?: string;\n  isDisabled?: boolean;\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { TextInput } from '@patternfly/react-core';\nimport { getSequence, setNativeValue } from '../../../utils/utils';\nimport {\n  isMinus,\n  KEY_CODES,\n  INPUT_NAVIGATION_KEYS,\n  INPUT_CTRL_COMBINATIONS_KEYS,\n} from '../../../constants/keys';\n\nimport './integer.scss';\n\nconst NON_NEGATIVE_INTEGER_KEYS = [\n  ...INPUT_NAVIGATION_KEYS,\n  ...getSequence(KEY_CODES[0], KEY_CODES[9]),\n  ...getSequence(KEY_CODES.NUMPAD[0], KEY_CODES.NUMPAD[9]),\n];\n\nconst INTEGER_KEYS = [\n  ...NON_NEGATIVE_INTEGER_KEYS,\n  KEY_CODES.MINUS,\n  KEY_CODES.HYPHEN_MINUS,\n  KEY_CODES.NUMPAD.SUBTRACT,\n];\n\nconst POSITIVE_INT_REGEX = /^[1-9]\\d*$/;\nconst NON_NEGATIVE_INT_REGEX = /^(0|[1-9]\\d*)$/;\nconst INT_REGEX = /^(-?0|-?[1-9]\\d*)$/;\n\nconst PRECEEDING_ZEROS_POSITIVE_INT_REGEX = /^0*([1-9]\\d*)$/;\nconst PRECEEDING_ZEROS_INT_REGEX = /^(-?)0*([1-9]\\d*)$/;\n\nconst fixPrecedingZerosPositiveInt = (value) => {\n  const match = PRECEEDING_ZEROS_POSITIVE_INT_REGEX.exec(value);\n  return match && match.length === 2 ? match[1] : '';\n};\n\nconst fixPrecedingZerosNonNegativeInt = (value) => {\n  const match = PRECEEDING_ZEROS_POSITIVE_INT_REGEX.exec(value);\n  return match && match.length === 2 ? match[1] : '0';\n};\n\nconst fixInt = (value, oldValue, keyCode) => {\n  if (value.length === 0 && isMinus(keyCode)) {\n    if (oldValue) {\n      return oldValue < 0 || oldValue === '-0' ? oldValue : `-${oldValue}`;\n    }\n    return '-0';\n  }\n\n  const match = PRECEEDING_ZEROS_INT_REGEX.exec(value);\n  if (match && match.length === 3) {\n    if (match[1]) {\n      return `${match[1]}${match[2]}`;\n    }\n    return match[2];\n  }\n  return '0';\n};\n\nconst isInputValid = (allowedKeys, keyCode, targetValue, additionalValidation) => {\n  if (allowedKeys.includes(keyCode)) {\n    return additionalValidation ? additionalValidation(keyCode, targetValue) : true;\n  }\n  return false;\n};\n\nconst additionalPositiveValidation = (keyCode, targetValue) =>\n  !(targetValue === '' && (keyCode === KEY_CODES[0] || keyCode === KEY_CODES.NUMPAD[0]));\n\nexport const Integer: React.FC<IntegerProps> = ({\n  id,\n  value,\n  isDisabled,\n  defaultValue,\n  onChange,\n  isPositive,\n  isNonNegative,\n  className,\n  isFullWidth,\n  isValid,\n  ...restProps\n}) => {\n  let allowedKeys;\n  let validRegex;\n  let fixAfterValue;\n  let min;\n  let additionalValidation;\n\n  if (isPositive) {\n    allowedKeys = NON_NEGATIVE_INTEGER_KEYS;\n    validRegex = POSITIVE_INT_REGEX;\n    fixAfterValue = fixPrecedingZerosPositiveInt;\n    min = 1;\n    additionalValidation = additionalPositiveValidation;\n  } else if (isNonNegative) {\n    allowedKeys = NON_NEGATIVE_INTEGER_KEYS;\n    validRegex = NON_NEGATIVE_INT_REGEX;\n    fixAfterValue = fixPrecedingZerosNonNegativeInt;\n    min = 0;\n  } else {\n    allowedKeys = INTEGER_KEYS;\n    validRegex = INT_REGEX;\n    fixAfterValue = fixInt;\n  }\n\n  const onKeydown = React.useCallback(\n    (e) => {\n      const { keyCode, target, ctrlKey, metaKey } = e;\n\n      const ctrlDown = ctrlKey || metaKey; // Mac support\n\n      // check for ctrl+c, a, v and x\n      if (ctrlDown && INPUT_CTRL_COMBINATIONS_KEYS.includes(keyCode)) {\n        return true;\n      }\n\n      if (!isInputValid(allowedKeys, keyCode, target.value, additionalValidation)) {\n        e.preventDefault();\n        return false;\n      }\n\n      const oldValue = target.value;\n\n      window.setTimeout(() => {\n        if (!validRegex.test(target.value)) {\n          const v = fixAfterValue(target.value, oldValue, keyCode);\n          setNativeValue(target, v);\n          target.dispatchEvent(\n            new Event('input', {\n              bubbles: true,\n              cancelable: true,\n            }),\n          );\n        }\n      }, 0);\n      return true;\n    },\n    [additionalValidation, allowedKeys, fixAfterValue, validRegex],\n  );\n\n  return (\n    <TextInput\n      {...restProps}\n      id={id}\n      type=\"number\"\n      onKeyDown={onKeydown}\n      min={min}\n      value={value}\n      defaultValue={defaultValue}\n      onChange={onChange}\n      className={classNames(className, {\n        'kubevirt-integer-component': isFullWidth,\n      })}\n      isDisabled={isDisabled}\n    />\n  );\n};\n\ntype IntegerProps = {\n  id?: string;\n  isFullWidth?: boolean;\n  className?: string;\n  value?: string;\n  defaultValue?: string;\n  onChange?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  isPositive?: boolean;\n  isNonNegative?: boolean; // is ignored when positive == true\n  isDisabled?: boolean;\n  isValid?: boolean;\n  'aria-label'?: string;\n};\n","import * as React from 'react';\nimport { FormSelect, FormSelectOption } from '@patternfly/react-core';\nimport { FirehoseResult } from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { getName, ValidationErrorType, ValidationObject } from '@console/shared';\nimport { getLoadedData, getLoadError, isLoaded } from '../../utils';\nimport { ignoreCaseSort } from '../../utils/sort';\nimport { FormRow } from './form-row';\nimport { asFormSelectValue, FormSelectPlaceholderOption } from './form-select-placeholder-option';\n\ntype K8sResourceSelectProps = {\n  id: string;\n  isDisabled?: boolean;\n  isRequired?: boolean;\n  isPlaceholderDisabled?: boolean;\n  hasPlaceholder?: boolean;\n  data?: FirehoseResult<K8sResourceKind[]>;\n  name?: string;\n  onChange: (name: string) => void;\n  model: K8sKind;\n  title?: string;\n  validation?: ValidationObject;\n  filter?: (obj: K8sResourceKind) => boolean;\n};\n\nexport const K8sResourceSelectRow: React.FC<K8sResourceSelectProps> = ({\n  id,\n  isDisabled,\n  isRequired,\n  isPlaceholderDisabled,\n  hasPlaceholder,\n  data,\n  onChange,\n  name,\n  model,\n  title,\n  validation,\n  filter,\n}) => {\n  const isLoading = !isLoaded(data);\n  const loadError = getLoadError(data, model);\n\n  let loadedData = getLoadedData(data, []);\n\n  if (filter) {\n    loadedData = loadedData.filter(filter);\n  }\n\n  let nameValue;\n  let missingError;\n\n  if (name && !isLoading && !loadError && !loadedData.some((entity) => getName(entity) === name)) {\n    missingError = `Selected ${name} is not available`;\n  } else {\n    nameValue = name;\n  }\n\n  return (\n    <FormRow\n      title={title || model.label}\n      fieldId={id}\n      isLoading={isLoading}\n      validationMessage={loadError || missingError || (validation && validation.message)}\n      validationType={\n        loadError || missingError ? ValidationErrorType.Error : validation && validation.type\n      }\n      isRequired={isRequired}\n    >\n      <FormSelect\n        onChange={onChange}\n        value={asFormSelectValue(nameValue)}\n        id={id}\n        isDisabled={isDisabled || isLoading || loadError}\n      >\n        {hasPlaceholder && (\n          <FormSelectPlaceholderOption\n            isDisabled={isPlaceholderDisabled}\n            placeholder={\n              loadedData.length === 0\n                ? `--- ${model.labelPlural} not available ---`\n                : `--- Select ${model.label} ---`\n            }\n          />\n        )}\n        {ignoreCaseSort(loadedData, ['metadata', 'name']).map((entity) => {\n          const selectName = getName(entity);\n          return <FormSelectOption key={selectName} value={selectName} label={selectName} />;\n        })}\n      </FormSelect>\n    </FormRow>\n  );\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { FormSelect, FormSelectOption, Split, SplitItem } from '@patternfly/react-core';\nimport { ValidationObject } from '@console/shared';\nimport { prefixedID } from '../../utils';\nimport { getStringEnumValues } from '../../utils/types';\nimport { isValidationError } from '../../utils/validations/common';\nimport { FormRow } from './form-row';\nimport { Integer } from './integer/integer';\nimport { BinaryUnit, toIECUnit } from './size-unit-utils';\n\nimport './size-unit-form-row.scss';\n\ntype SizeUnitFormRowProps = {\n  size: string;\n  title?: string;\n  unit: BinaryUnit;\n  units?: BinaryUnit[];\n  validation?: ValidationObject;\n  id?: string;\n  isDisabled?: boolean;\n  isRequired?: boolean;\n  onSizeChanged?: (size: string) => void;\n  onUnitChanged?: (unit: BinaryUnit) => void;\n};\nexport const SizeUnitFormRow: React.FC<SizeUnitFormRowProps> = ({\n  title = 'Size',\n  size,\n  unit,\n  units,\n  validation,\n  id,\n  isRequired,\n  isDisabled,\n  onSizeChanged = () => undefined,\n  onUnitChanged = () => undefined,\n}) => (\n  <FormRow\n    key=\"size\"\n    title={title}\n    fieldId={prefixedID(id, 'size')}\n    isRequired={isRequired}\n    validation={validation}\n  >\n    <Split>\n      <SplitItem isFilled>\n        <Integer\n          isFullWidth\n          isValid={!isValidationError(validation)}\n          isDisabled={isDisabled}\n          id={prefixedID(id, 'size')}\n          value={size}\n          isPositive\n          onChange={React.useCallback((v) => onSizeChanged(v), [onSizeChanged])}\n          aria-label={`${title} size`}\n        />\n      </SplitItem>\n      <SplitItem>\n        <FormSelect\n          className=\"kubevirt-size-unit-form-row__unit\"\n          onChange={React.useCallback((u) => onUnitChanged(u as BinaryUnit), [onUnitChanged])}\n          value={unit}\n          id={prefixedID(id, 'unit')}\n          isDisabled={isDisabled}\n          aria-label={`${title} unit`}\n        >\n          {(units || getStringEnumValues<BinaryUnit>(BinaryUnit)).map((u) => (\n            <FormSelectOption key={u} value={u} label={toIECUnit(u)} />\n          ))}\n        </FormSelect>\n      </SplitItem>\n    </Split>\n  </FormRow>\n);\n","import { assureEndsWith } from '@console/shared/src';\nimport { getStringEnumValues } from '../../utils/types';\nimport { convertToBaseValue } from '@console/internal/components/utils';\n\nexport enum BinaryUnit {\n  B = 'B',\n  Ki = 'Ki',\n  Mi = 'Mi',\n  Gi = 'Gi',\n  Ti = 'Ti',\n}\n\nexport const getReasonableUnits = (originalUnit: BinaryUnit) => {\n  const result = [BinaryUnit.Mi, BinaryUnit.Gi, BinaryUnit.Ti];\n  if (originalUnit === BinaryUnit.B) {\n    result.unshift(BinaryUnit.B, BinaryUnit.Ki);\n  } else if (originalUnit === BinaryUnit.Ki) {\n    result.unshift(BinaryUnit.Ki);\n  }\n  return result;\n};\n\ntype Result = {\n  value: number;\n  unit: BinaryUnit;\n  str: string;\n};\n\nexport const stringValueUnitSplit = (combinedVal) => {\n  const index = combinedVal.search(/([a-zA-Z]+)/g);\n  let value;\n  let unit;\n  if (index === -1) {\n    value = combinedVal;\n  } else {\n    value = combinedVal.slice(0, index);\n    unit = combinedVal.slice(index);\n  }\n  return [value, unit];\n};\n\nexport const convertToHighestUnit = (value: number, unit: BinaryUnit): Result => {\n  const units = getStringEnumValues<BinaryUnit>(BinaryUnit);\n  const sliceIndex = units.indexOf(unit);\n  const slicedUnits = sliceIndex === -1 ? units : units.slice(sliceIndex);\n\n  let nextValue = value;\n  let nextUnit = slicedUnits.shift();\n  while (nextValue !== 0 && nextValue % 1024 === 0 && slicedUnits.length > 0) {\n    nextValue /= 1024;\n    nextUnit = slicedUnits.shift();\n  }\n  return { value: nextValue, unit: nextUnit, str: `${nextValue}${nextUnit}` };\n};\n\nexport const convertToBytes = (value: string): number => {\n  if (!value || BinaryUnit[value]) {\n    return null;\n  }\n\n  const result = convertToBaseValue(value);\n\n  if (!result && value.match(/^[0-9.]+B$/)) {\n    const [v] = stringValueUnitSplit(value);\n    return v;\n  }\n\n  return result;\n};\n\nexport const convertToHighestUnitFromUnknown = (value: string): Result => {\n  const result = convertToBytes(value);\n  return result && convertToHighestUnit(result, BinaryUnit.B);\n};\n\nexport const toIECUnit = (unit: BinaryUnit | string) => assureEndsWith(unit, 'B');\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Modal, Button, ButtonVariant } from '@patternfly/react-core';\nimport { createBasicLookup } from '@console/shared/src';\nimport { withHandlePromise, HandlePromiseProps } from '@console/internal/components/utils';\nimport { ModalComponentProps } from '@console/internal/components/factory';\nimport { k8sPatch } from '@console/internal/module/k8s';\nimport { PatchBuilder } from '@console/shared/src/k8s';\nimport { BootableDeviceType } from '../../../types';\nimport { VMLikeEntityKind } from '../../../types/vmLike';\nimport { getVMLikeModel, getDevices, getBootableDevices } from '../../../selectors/vm';\nimport { getVMLikePatches } from '../../../k8s/patches/vm-template';\nimport { BootOrder, deviceKey } from '../../boot-order';\nimport { DeviceType } from '../../../constants';\nimport { ModalFooter } from '../modal/modal-footer';\n\nimport './boot-order-modal.scss';\n\nconst modalTitle = 'Virtual machine boot order';\n\nconst BootOrderModalComponent = ({\n  vmLikeEntity,\n  isOpen,\n  setOpen,\n  title = modalTitle,\n  handlePromise,\n  inProgress,\n  errorMessage,\n}: BootOrderModalProps) => {\n  const [devices, setDevices] = React.useState<BootableDeviceType[]>(\n    getBootableDevices(vmLikeEntity),\n  );\n  const [initialDeviceList, setInitialDeviceList] = React.useState<BootableDeviceType[]>(\n    getBootableDevices(vmLikeEntity),\n  );\n  const [showUpdatedAlert, setUpdatedAlert] = React.useState<boolean>(false);\n  const [showPatchError, setPatchError] = React.useState<boolean>(false);\n\n  const onReload = React.useCallback(() => {\n    const updatedDevices = getBootableDevices(vmLikeEntity);\n\n    setInitialDeviceList(updatedDevices);\n    setDevices(updatedDevices);\n    setUpdatedAlert(false);\n    setPatchError(false);\n  }, [vmLikeEntity]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Inform user on vmLikeEntity.\n  React.useEffect(() => {\n    if (!isOpen) {\n      return;\n    }\n\n    // Compare only bootOrder from initialDeviceList to current device list.\n    const devicesMap = createBasicLookup(getBootableDevices(vmLikeEntity), deviceKey);\n    const updated =\n      initialDeviceList.length &&\n      initialDeviceList.some((d) => {\n        // Find the initial device in the updated list.\n        const device = devicesMap[deviceKey(d)];\n\n        // If a device bootOrder changed, or it was deleted, set alert.\n        return !device || device.value.bootOrder !== d.value.bootOrder;\n      });\n\n    setUpdatedAlert(updated);\n  }, [vmLikeEntity]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Re-set device list on isOpen change to true.\n  React.useEffect(() => {\n    if (isOpen) {\n      onReload();\n    }\n  }, [isOpen]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Send new bootOrder to k8s.\n  const onSubmit = async (event) => {\n    event.preventDefault();\n\n    // Copy only bootOrder from devices to current device list.\n    const currentDevices = _.cloneDeep(getDevices(vmLikeEntity));\n    const devicesMap = createBasicLookup(currentDevices, deviceKey);\n    devices.forEach((d) => {\n      // Find the device to update.\n      const device = devicesMap[deviceKey(d)];\n\n      // Update device bootOrder.\n      if (device && d.value.bootOrder) {\n        device.value.bootOrder = d.value.bootOrder;\n      }\n      if (device && device.value.bootOrder && !d.value.bootOrder) {\n        delete device.value.bootOrder;\n      }\n    });\n\n    // Filter disks and interfaces from devices list.\n    const disks = [\n      ...currentDevices\n        .filter((source) => source.type === DeviceType.DISK)\n        .map((source) => source.value),\n    ];\n\n    const interfaces = [\n      ...currentDevices\n        .filter((source) => source.type === DeviceType.NIC)\n        .map((source) => source.value),\n    ];\n\n    // Patch k8s.\n    const patches = [\n      new PatchBuilder('/spec/template/spec/domain/devices/disks').replace(disks).build(),\n      new PatchBuilder('/spec/template/spec/domain/devices/interfaces').replace(interfaces).build(),\n    ];\n    const promise = k8sPatch(\n      getVMLikeModel(vmLikeEntity),\n      vmLikeEntity,\n      getVMLikePatches(vmLikeEntity, () => patches),\n    );\n\n    handlePromise(promise)\n      .then(() => setOpen(false))\n      .catch(() => setPatchError(true));\n  };\n\n  const footer = (\n    <ModalFooter\n      errorMessage={showPatchError && errorMessage}\n      inProgress={inProgress}\n      onSubmit={onSubmit}\n      onCancel={() => setOpen(false)}\n      submitButtonText=\"Save\"\n      infoTitle={showUpdatedAlert && 'Boot order has been updated outside this flow.'}\n      infoMessage={\n        <>\n          Saving these changes will override any boot order previously saved.\n          <br />\n          To see the updated order{' '}\n          <Button variant={ButtonVariant.link} isInline onClick={onReload}>\n            reload the content\n          </Button>\n          .\n        </>\n      }\n      className={'kubevirt-boot-order-modal__footer'}\n    />\n  );\n\n  return (\n    <Modal\n      title={title}\n      isOpen={isOpen}\n      isSmall\n      onClose={() => setOpen(false)}\n      footer={footer}\n      showClose={false}\n      isFooterLeftAligned={false}\n    >\n      <BootOrder devices={devices} setDevices={setDevices} />\n    </Modal>\n  );\n};\n\nexport type BootOrderModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    vmLikeEntity: VMLikeEntityKind;\n    title?: string;\n    isOpen: boolean;\n    setOpen: (isOpen: boolean) => void;\n  };\n\nexport const BootOrderModal = withHandlePromise(BootOrderModalComponent);\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Form, Button, Tooltip, Alert, Text, TextVariants } from '@patternfly/react-core';\nimport {\n  FirehoseResult,\n  HandlePromiseProps,\n  withHandlePromise,\n} from '@console/internal/components/utils';\nimport { ModalTitle, ModalBody, ModalComponentProps } from '@console/internal/components/factory';\nimport { PlusCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { k8sPatch } from '@console/internal/module/k8s';\nimport { ModalFooter } from '../modal/modal-footer';\nimport { getCDsPatch } from '../../../k8s/patches/vm/vm-cdrom-patches';\nimport { getVMLikeModel, asVM, isWindows } from '../../../selectors/vm';\nimport {\n  getCDRoms,\n  getContainerImageByDisk,\n  getURLSourceByDisk,\n  getPVCSourceByDisk,\n  getStorageSizeByDisk,\n  getStorageClassNameByDisk,\n  isVMRunningOrExpectedRunning,\n} from '../../../selectors/vm/selectors';\nimport { isValidationError, validateURL } from '../../../utils/validations/common';\nimport { VMLikeEntityKind } from '../../../types/vmLike';\nimport { CDRomRow } from './cdrom-row';\nimport { getAvailableCDName } from './helpers';\nimport { initialDisk, WINTOOLS_CONTAINER_NAMES, StorageType } from './constants';\nimport './cdrom-modal.scss';\nimport { CD, CDMap } from './types';\nimport { VMKind } from '../../../types/vm';\nimport { useStorageClassConfigMap } from '../../../hooks/storage-class-config-map';\n\nexport const AddCDButton = ({ className, text, onClick, isDisabled }: AddCDButtonProps) => (\n  <div className={className}>\n    <Button\n      className=\"pf-m-link--align-left\"\n      id=\"vm-cd-add-btn\"\n      variant=\"link\"\n      onClick={onClick}\n      isDisabled={isDisabled}\n      icon={<PlusCircleIcon />}\n    >\n      {text}\n    </Button>\n    {isDisabled && (\n      <Tooltip\n        position=\"bottom\"\n        trigger=\"click mouseenter\"\n        entryDelay={0}\n        exitDelay={0}\n        content=\"You have reached the maximum amount of CD-ROM drives\"\n      >\n        <OutlinedQuestionCircleIcon />\n      </Tooltip>\n    )}\n  </div>\n);\n\nexport const CDRomModal = withHandlePromise((props: CDRomModalProps) => {\n  const {\n    vmLikeEntity,\n    handlePromise,\n    inProgress: _inProgress,\n    errorMessage,\n    persistentVolumeClaims,\n    storageClasses,\n    winToolsContainer,\n    cancel,\n    close,\n  } = props;\n  const vm = asVM(vmLikeEntity);\n\n  const [storageClassConfigMap, isStorageClassConfigMapLoaded] = useStorageClassConfigMap();\n  const inProgress = _inProgress || !isStorageClassConfigMapLoaded;\n\n  const mapCDsToSource = (cds) =>\n    Object.assign(\n      {},\n      ...cds.map(({ name, cdrom, bootOrder }) => {\n        let cd: CD = {\n          ...initialDisk,\n          name,\n          cdrom,\n          bootOrder,\n        };\n        const container = getContainerImageByDisk(vm, name);\n        if (container) {\n          if (_.includes(WINTOOLS_CONTAINER_NAMES, container)) {\n            cd = {\n              ...cd,\n              type: StorageType.WINTOOLS,\n              windowsTools: container,\n            };\n          } else {\n            cd = { ...cd, type: StorageType.CONTAINER, container };\n          }\n        }\n\n        const url = getURLSourceByDisk(vm, name);\n        if (url) {\n          const storageClass = getStorageClassNameByDisk(vm, name);\n          const size = getStorageSizeByDisk(vm, cd.name).replace(/[^0-9]/g, '');\n          cd = { ...cd, type: StorageType.URL, url, storageClass, size };\n        }\n\n        const pvc = getPVCSourceByDisk(vm, name);\n        if (pvc) {\n          cd = {\n            ...cd,\n            type: StorageType.PVC,\n            pvc,\n          };\n        }\n        return { [name]: cd };\n      }),\n    );\n\n  const [cds, setCDs] = React.useState<CDMap>(mapCDsToSource(getCDRoms(vm)));\n  const [showRestartAlert, setShowRestartAlert] = React.useState<boolean>(false);\n  const [shouldPatch, setShouldPatch] = React.useState<boolean>(false);\n\n  const onCDChange = (cdName: string, key: string, value: string) => {\n    setShowRestartAlert(true);\n    setShouldPatch(true);\n    const cd = { ...cds[cdName], [key]: value };\n    if (key === StorageType.URL) {\n      if (isValidationError(validateURL(value))) {\n        cd.isURLValid = false;\n      } else {\n        cd.isURLValid = true;\n      }\n    }\n    setCDs({ ...cds, [cdName]: cd });\n  };\n\n  const onCDAdd = () => {\n    const name = getAvailableCDName(Object.values(cds));\n    const newCD = {\n      ...initialDisk,\n      type: StorageType.CONTAINER,\n      name,\n      newCD: true,\n    };\n    setShowRestartAlert(true);\n    setShouldPatch(true);\n    setCDs({ ...cds, [name]: newCD });\n  };\n\n  const onCDDelete = (cdName: string) => {\n    setShouldPatch(true);\n    setCDs(_.omit(cds, cdName));\n  };\n\n  const submit = async (e) => {\n    e.preventDefault();\n    if (shouldPatch) {\n      const promise = k8sPatch(\n        getVMLikeModel(vmLikeEntity),\n        vmLikeEntity,\n        getCDsPatch(vmLikeEntity, Object.values(cds), storageClassConfigMap),\n      );\n      handlePromise(promise).then(close); // eslint-disable-line promise/catch-or-return\n    } else {\n      close();\n    }\n  };\n\n  const cdsValue = Object.values(cds);\n  const windowsBool = isWindows(vm);\n  const usedPVCs = cdsValue.map((cd) => cd.pvc);\n  const isFormInvalid =\n    !!cdsValue.find((vol) => !vol.isURLValid) ||\n    !!cdsValue.find((cd) => cd.type === StorageType.PVC && !cd.pvc) ||\n    !!cdsValue.find((cd) => cd.type === StorageType.URL && !cd.storageClass) ||\n    !!cdsValue.find((cd) => cd.type === StorageType.WINTOOLS && !cd.windowsTools);\n\n  return (\n    <div className=\"modal-content\">\n      <ModalTitle>Edit CD-ROMs</ModalTitle>\n      <ModalBody>\n        {showRestartAlert && isVMRunningOrExpectedRunning(vm) && (\n          <Alert\n            variant=\"info\"\n            isInline\n            title=\"Changes will be applied when the virtual machine has been restarted\"\n          />\n        )}\n        <Form className=\"pf-l-grid pf-m-gutter\">\n          {_.size(cds) > 0 ? (\n            cdsValue.map((cd, i) => (\n              <CDRomRow\n                key={`cd-row-${cd.name}`}\n                cd={cd}\n                pvcs={persistentVolumeClaims}\n                usedPVCs={usedPVCs}\n                storageClasses={storageClasses}\n                winToolsContainer={winToolsContainer}\n                index={i}\n                isWindows={windowsBool}\n                inProgress={inProgress}\n                onChange={onCDChange}\n                onDelete={onCDDelete}\n              />\n            ))\n          ) : (\n            <Text component={TextVariants.h4}>\n              This virtual machine does not have any CD-ROMs attached.\n            </Text>\n          )}\n          <AddCDButton\n            className=\"kubevirt-add-cd-btn\"\n            text=\"Add CD-ROM\"\n            onClick={onCDAdd}\n            isDisabled={_.size(cds) > 1}\n          />\n        </Form>\n      </ModalBody>\n      <ModalFooter\n        id=\"cdrom\"\n        errorMessage={errorMessage}\n        inProgress={inProgress}\n        isDisabled={isFormInvalid || inProgress}\n        submitButtonText=\"Save\"\n        onSubmit={submit}\n        onCancel={(e) => {\n          e.stopPropagation();\n          cancel();\n        }}\n      />\n    </div>\n  );\n});\n\ntype AddCDButtonProps = {\n  className: string;\n  text: string;\n  isDisabled: boolean;\n  onClick: () => void;\n};\n\ntype CDRomModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    vmLikeEntity: VMLikeEntityKind;\n    persistentVolumeClaims?: FirehoseResult<VMKind[]>;\n    storageClasses?: FirehoseResult<VMKind[]>;\n    winToolsContainer: string;\n  };\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { MinusCircleIcon } from '@patternfly/react-icons';\nimport { getName } from '@console/shared';\nimport {\n  FormSelect,\n  FormGroup,\n  Text,\n  TextVariants,\n  FormSelectOption,\n  TextInput,\n  Button,\n} from '@patternfly/react-core';\nimport { PersistentVolumeClaimModel, StorageClassModel } from '@console/internal/models';\nimport { FirehoseResult } from '@console/internal/components/utils';\nimport { K8sResourceSelectRow } from '../../form/k8s-resource-select-row';\nimport { VMKind } from '../../../types';\nimport { FormSelectPlaceholderOption } from '../../form/form-select-placeholder-option';\nimport { StorageType, CD_SIZE, CD_STORAGE_CLASS } from './constants';\nimport { CD } from './types';\n\nexport const CDRomRow: React.FC<CDRomRowProps> = ({\n  cd,\n  pvcs,\n  usedPVCs,\n  storageClasses,\n  index,\n  onChange,\n  onDelete,\n  isWindows,\n  inProgress,\n  winToolsContainer,\n}) => {\n  const { name, type, container, pvc, url, windowsTools, size, storageClass, isURLValid } = cd;\n\n  return (\n    <div>\n      <Text component={TextVariants.h4}>{`Drive ${index + 1}`}</Text>\n      <FormGroup\n        fieldId=\"cd-rom-modal-grid\"\n        className=\"kubevirt-cdrom-modal__grid pf-l-grid pf-m-11-col-on-md\"\n      >\n        <FormGroup label=\"Source\" fieldId=\"cd-rom-modal-type\" className=\"pf-m-3-col-on-md\">\n          <FormSelect\n            value={type}\n            onChange={(v) => onChange(name, 'type', v)}\n            id={`cd-rom-modal-select-type-${name}`}\n          >\n            <FormSelectOption key=\"container-option\" value=\"container\" label=\"Container\" />\n            <FormSelectOption key=\"pvc-option\" value=\"pvc\" label=\"Attach Disk\" />\n            <FormSelectOption key=\"url-option\" value=\"url\" label=\"URL\" />\n            {isWindows && (\n              <FormSelectOption\n                key=\"wintools-option\"\n                value=\"windowsTools\"\n                label=\"Windows guest tools\"\n              />\n            )}\n          </FormSelect>\n        </FormGroup>\n        {type === StorageType.URL && (\n          <>\n            <FormGroup\n              label=\"URL\"\n              className=\"pf-m-3-col-on-md\"\n              fieldId=\"cd-rom-modal-url\"\n              id={`cd-url-text-input-${name}`}\n              isValid={isURLValid}\n              helperTextInvalid=\"Invalid URL\"\n            >\n              <TextInput\n                isRequired\n                type=\"text\"\n                value={url}\n                onChange={(v) => onChange(name, StorageType.URL, v)}\n                aria-label=\"url path\"\n              />\n            </FormGroup>\n            <FormGroup\n              id={`cd-url-size-input-${name}`}\n              label=\"Size (GiB)\"\n              className=\"pf-m-2-col-on-md\"\n              fieldId=\"cd-rom-modal-cdsize\"\n            >\n              <TextInput\n                isRequired\n                type=\"text\"\n                value={size}\n                onChange={(v) => onChange(name, CD_SIZE, v)}\n                aria-label=\"cd size\"\n              />\n            </FormGroup>\n            <div className=\"pf-m-3-col-on-md\">\n              <K8sResourceSelectRow\n                key=\"storage-class\"\n                id={`cd-url-storageclass-input-${name}`}\n                isDisabled={inProgress}\n                name={storageClass}\n                data={storageClasses}\n                model={StorageClassModel}\n                hasPlaceholder\n                onChange={(sc) => onChange(name, CD_STORAGE_CLASS, sc)}\n              />\n            </div>\n          </>\n        )}\n        {type === StorageType.CONTAINER && (\n          <FormGroup\n            className=\"pf-m-8-col-on-md\"\n            label=\"Container\"\n            fieldId=\"cd-rom-modal-container\"\n            id={`cdrom-container-input-${name}`}\n          >\n            <TextInput\n              isRequired\n              type=\"text\"\n              value={container}\n              onChange={(v) => onChange(name, StorageType.CONTAINER, v)}\n              aria-label=\"container path\"\n            />\n          </FormGroup>\n        )}\n        {type === StorageType.PVC && (\n          <div className=\"pf-m-8-col-on-md\">\n            <K8sResourceSelectRow\n              key=\"pvc-select\"\n              title=\"Attach Disk\"\n              id={`cdrom-pvc-input-${name}`}\n              isDisabled={inProgress}\n              name={pvc}\n              data={pvcs}\n              model={PersistentVolumeClaimModel}\n              hasPlaceholder\n              isPlaceholderDisabled\n              onChange={(p) => onChange(name, StorageType.PVC, p)}\n              filter={(p) => !_.includes(_.without(usedPVCs, pvc), getName(p))}\n            />\n          </div>\n        )}\n        {type === StorageType.WINTOOLS && (\n          <FormGroup\n            label=\"Windows guest tools\"\n            id={`cdrom-wintools-input-${name}`}\n            className=\"pf-m-8-col-on-md\"\n            fieldId=\"cd-rom-modal-wintools\"\n          >\n            <FormSelect\n              aria-label=\"cd-rom-wintools-label\"\n              value={windowsTools}\n              onChange={(v) => onChange(name, StorageType.WINTOOLS, v)}\n            >\n              <FormSelectPlaceholderOption placeholder=\"--- Select Windows Tools Container ---\" />\n              <FormSelectOption\n                key={winToolsContainer}\n                value={winToolsContainer}\n                label={winToolsContainer}\n              />\n            </FormSelect>\n          </FormGroup>\n        )}\n        <div className=\"kubevirt-cdrom-modal__delete pf-m-1-col-on-md\">\n          <Button onClick={() => onDelete(name)} variant=\"plain\">\n            <MinusCircleIcon />\n          </Button>\n        </div>\n      </FormGroup>\n    </div>\n  );\n};\n\nexport type CDRomRowProps = {\n  cd: CD;\n  pvcs: FirehoseResult<VMKind[]>;\n  storageClasses: FirehoseResult<VMKind[]>;\n  winToolsContainer: string;\n  usedPVCs: string[];\n  index: number;\n  onChange: (cdName: string, key: string, value: string) => void;\n  onDelete: (cdName: any) => void;\n  isWindows: boolean;\n  inProgress: boolean;\n};\n","import { CD } from './types';\n\nexport const getAvailableCDName = (cds: CD[]) => {\n  const cdSet = new Set(cds.map((cd) => cd.name));\n  let index = 1;\n  while (cdSet.has(`cd-drive-${index}`)) {\n    index++;\n  }\n  return `cd-drive-${index}`;\n};\n","import * as React from 'react';\nimport { getNamespace } from '@console/shared';\nimport { Firehose } from '@console/internal/components/utils';\nimport { createModalLauncher, ModalComponentProps } from '@console/internal/components/factory';\nimport { PersistentVolumeClaimModel, StorageClassModel } from '@console/internal/models';\nimport { VMLikeEntityKind } from '../../../types/vmLike';\nimport { asVM } from '../../../selectors/vm';\nimport { V1alpha1DataVolume } from '../../../types/vm/disk/V1alpha1DataVolume';\nimport { CDRomModal } from './cdrom-modal';\nimport { WINTOOLS_CONTAINER_NAMES } from './constants';\n\nconst CDRomModalFirehose: React.FC<CDRomModalFirehoseProps> = (props) => {\n  const { vmLikeEntity } = props;\n\n  const winToolsContainer =\n    WINTOOLS_CONTAINER_NAMES[window.SERVER_FLAGS.branding] || WINTOOLS_CONTAINER_NAMES.okd;\n\n  const resources = [\n    {\n      kind: StorageClassModel.kind,\n      isList: true,\n      prop: 'storageClasses',\n    },\n    {\n      kind: PersistentVolumeClaimModel.kind,\n      isList: true,\n      namespace: getNamespace(asVM(vmLikeEntity)),\n      prop: 'persistentVolumeClaims',\n    },\n  ];\n\n  return (\n    <Firehose resources={resources}>\n      <CDRomModal winToolsContainer={winToolsContainer} {...props} />\n    </Firehose>\n  );\n};\n\ntype CDRomModalFirehoseProps = ModalComponentProps & {\n  vmLikeEntity: VMLikeEntityKind;\n  dataVolume?: V1alpha1DataVolume;\n};\n\nexport const VMCDRomModal = createModalLauncher(CDRomModalFirehose);\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Form,\n  FormGroup,\n  TextArea,\n  TextInput,\n  Checkbox,\n  FormSelect,\n  FormSelectOption,\n} from '@patternfly/react-core';\nimport {\n  Firehose,\n  FirehoseResource,\n  FirehoseResult,\n  HandlePromiseProps,\n  withHandlePromise,\n} from '@console/internal/components/utils';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalComponentProps,\n} from '@console/internal/components/factory';\nimport { ModalFooter } from '../modal/modal-footer';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { NamespaceModel, PersistentVolumeClaimModel, ProjectModel } from '@console/internal/models';\nimport { getName, getNamespace, ValidationErrorType } from '@console/shared';\nimport { VMKind } from '../../../types';\nimport { getDescription } from '../../../selectors/selectors';\nimport { getLoadedData, getLoadError, prefixedID } from '../../../utils';\nimport { DataVolumeModel, VirtualMachineModel } from '../../../models';\nimport { cloneVM } from '../../../k8s/requests/vm/clone';\nimport { validateVmLikeEntityName } from '../../../utils/validations/vm';\nimport {\n  getVolumeDataVolumeName,\n  getVolumePersistentVolumeClaimName,\n  getVolumes,\n  isVMExpectedRunning,\n} from '../../../selectors/vm';\nimport { VIRTUAL_MACHINE_EXISTS } from '../../../utils/validations/strings';\nimport { Errors } from '../../errors/errors';\nimport { COULD_NOT_LOAD_DATA } from '../../../utils/strings';\nimport { ConfigurationSummary } from './configuration-summary';\n\nimport './_clone-vm-modal.scss';\n\nexport const CloneVMModal = withHandlePromise((props: CloneVMModalProps) => {\n  const {\n    vm,\n    namespace,\n    onNamespaceChanged,\n    namespaces,\n    virtualMachines,\n    persistentVolumeClaims,\n    dataVolumes,\n    requestsDataVolumes,\n    requestsPVCs,\n    inProgress,\n    errorMessage,\n    handlePromise,\n    close,\n    cancel,\n  } = props;\n  const asId = prefixedID.bind(null, 'clone-dialog-vm');\n\n  const [name, setName] = React.useState(`${getName(vm)}-clone`);\n  const [description, setDescription] = React.useState(getDescription(vm));\n  const [startVM, setStartVM] = React.useState(false);\n\n  const namespacesError = getLoadError(namespaces, NamespaceModel);\n  const pvcsError = requestsPVCs\n    ? getLoadError(persistentVolumeClaims, PersistentVolumeClaimModel)\n    : null;\n  const dataVolumesError = requestsDataVolumes ? getLoadError(dataVolumes, DataVolumeModel) : null;\n\n  const persistentVolumeClaimsData = getLoadedData(persistentVolumeClaims, []);\n  const dataVolumesData = getLoadedData(dataVolumes, []);\n\n  const nameError = validateVmLikeEntityName(name, namespace, getLoadedData(virtualMachines, []), {\n    existsErrorMessage: VIRTUAL_MACHINE_EXISTS,\n    subject: 'Name',\n  });\n\n  const dataVolumesValid = !(dataVolumesError || (requestsDataVolumes && !dataVolumes.loaded));\n  const pvcsValid = !(pvcsError || (requestsPVCs && !persistentVolumeClaims.loaded));\n\n  const isValid =\n    !nameError && dataVolumesValid && pvcsValid && !namespacesError && name && namespace;\n\n  const submit = (e) => {\n    e.preventDefault();\n\n    const promise = cloneVM(\n      {\n        vm,\n        dataVolumes: dataVolumesData,\n        persistentVolumeClaims: persistentVolumeClaimsData,\n      },\n      { name, namespace, description, startVM },\n    );\n    handlePromise(promise).then(close); // eslint-disable-line promise/catch-or-return\n  };\n\n  const onCancelClick = (e) => {\n    e.stopPropagation();\n    cancel();\n  };\n\n  const vmRunningWarning =\n    isVMExpectedRunning(vm) &&\n    `The VM ${getName(vm)} is still running. It will be powered off while cloning.`;\n\n  return (\n    <div className=\"modal-content\">\n      <ModalTitle>Clone Virtual Machine</ModalTitle>\n      <ModalBody>\n        <Errors\n          endMargin\n          errors={[\n            {\n              key: 'namespacesError',\n              message: namespacesError,\n              title: COULD_NOT_LOAD_DATA,\n            },\n            {\n              key: 'pvcsError',\n              message: pvcsError,\n              title: COULD_NOT_LOAD_DATA,\n            },\n            {\n              key: 'dataVolumesError',\n              message: dataVolumesError,\n              title: COULD_NOT_LOAD_DATA,\n            },\n          ].filter((err) => err.message)}\n        />\n        <Form isHorizontal>\n          <FormGroup\n            label=\"Name\"\n            isRequired\n            fieldId={asId('name')}\n            isValid={!(nameError && nameError.type === ValidationErrorType.Error)}\n            helperTextInvalid={nameError && nameError.message}\n          >\n            <TextInput\n              isValid={!(nameError && nameError.type === ValidationErrorType.Error)}\n              isRequired\n              type=\"text\"\n              id={asId('name')}\n              value={name}\n              onChange={(v) => setName(v)}\n              aria-label=\"new VM name\"\n            />\n          </FormGroup>\n          <FormGroup label=\"Description\" fieldId={asId('description')}>\n            <TextArea\n              id={asId('description')}\n              value={description}\n              onChange={(v) => setDescription(v)}\n              className=\"kubevirt-clone-vm-modal__description\"\n            />\n          </FormGroup>\n          <FormGroup isRequired label=\"Namespace\" fieldId={asId('namespace')}>\n            <FormSelect\n              value={namespace}\n              onChange={(v) => onNamespaceChanged(v)}\n              id={asId('namespace')}\n            >\n              {[...getLoadedData(namespaces, [])]\n                .sort((n1, n2) => {\n                  const n1Name = getName(n1);\n                  const n2Name = getName(n2);\n                  return n1Name.localeCompare(n2Name);\n                })\n                .map((n) => {\n                  const namespaceName = getName(n);\n                  return (\n                    <FormSelectOption\n                      key={namespaceName}\n                      value={namespaceName}\n                      label={namespaceName}\n                    />\n                  );\n                })}\n            </FormSelect>\n          </FormGroup>\n          <FormGroup fieldId={asId('start')}>\n            <Checkbox\n              label=\"Start virtual machine on clone\"\n              id={asId('start')}\n              isChecked={startVM}\n              onChange={setStartVM}\n              className=\"kubevirt-clone-vm-modal__start_vm_checkbox\"\n            />\n          </FormGroup>\n          <FormGroup label=\"Configuration\" fieldId={asId('configuration-summary')}>\n            <ConfigurationSummary\n              id={asId('configuration-summary')}\n              vm={vm}\n              persistentVolumeClaims={persistentVolumeClaimsData}\n              dataVolumes={dataVolumesData}\n            />\n          </FormGroup>\n        </Form>\n      </ModalBody>\n      <ModalFooter\n        id=\"clone-vm\"\n        errorMessage={errorMessage}\n        isSimpleError={!!vmRunningWarning && !errorMessage}\n        warningMessage={vmRunningWarning}\n        inProgress={inProgress}\n        isDisabled={!isValid || inProgress}\n        submitButtonText=\"Clone Virtual Machine\"\n        onSubmit={submit}\n        onCancel={onCancelClick}\n      />\n    </div>\n  );\n});\n\nexport type CloneVMModalProps = CloneVMModalFirehoseProps &\n  HandlePromiseProps & {\n    namespace: string;\n    onNamespaceChanged: (namespace: string) => void;\n    namespaces?: FirehoseResult<K8sResourceKind[]>;\n    virtualMachines?: FirehoseResult<VMKind[]>;\n    dataVolumes?: FirehoseResult<K8sResourceKind[]>;\n    persistentVolumeClaims?: FirehoseResult<K8sResourceKind[]>;\n    requestsDataVolumes: boolean;\n    requestsPVCs: boolean;\n  };\n\nconst CloneVMModalFirehose: React.FC<CloneVMModalFirehoseProps> = (props) => {\n  const { vm, useProjects } = props;\n  const vmNamespace = getNamespace(vm);\n  const [namespace, setNamespace] = React.useState(vmNamespace);\n\n  const requestsDataVolumes = !!getVolumes(vm).find(getVolumeDataVolumeName);\n  const requestsPVCs = !!getVolumes(vm).find(getVolumePersistentVolumeClaimName);\n\n  const resources: FirehoseResource[] = [\n    {\n      kind: (useProjects ? ProjectModel : NamespaceModel).kind,\n      isList: true,\n      prop: 'namespaces',\n    },\n    {\n      kind: VirtualMachineModel.kind,\n      namespace,\n      isList: true,\n      prop: 'virtualMachines',\n    },\n  ];\n\n  if (requestsPVCs) {\n    resources.push({\n      kind: PersistentVolumeClaimModel.kind,\n      namespace: vmNamespace,\n      isList: true,\n      prop: 'persistentVolumeClaims',\n    });\n  }\n\n  if (requestsDataVolumes) {\n    resources.push({\n      kind: DataVolumeModel.kind,\n      namespace: vmNamespace,\n      isList: true,\n      prop: 'dataVolumes',\n    });\n  }\n\n  return (\n    <Firehose resources={resources}>\n      <CloneVMModal\n        {...props}\n        namespace={namespace}\n        onNamespaceChanged={(n) => setNamespace(n)}\n        requestsDataVolumes={requestsDataVolumes}\n        requestsPVCs={requestsPVCs}\n      />\n    </Firehose>\n  );\n};\n\ntype CloneVMModalFirehoseProps = ModalComponentProps & {\n  vm: VMKind;\n  useProjects: boolean;\n};\n\nconst cloneVMModalStateToProps = ({ k8s }) => {\n  const useProjects = k8s.hasIn(['RESOURCES', 'models', ProjectModel.kind]);\n  return {\n    useProjects,\n  };\n};\n\nconst CloneVMModalConnected = connect(cloneVMModalStateToProps)(CloneVMModalFirehose);\n\nexport const cloneVMModal = createModalLauncher(CloneVMModalConnected);\n","import * as React from 'react';\nimport { DASH, getName, getNamespace } from '@console/shared';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { VMKind } from '../../../types/vm';\nimport {\n  getCPU,\n  getDataVolumeTemplates,\n  getDisks,\n  getFlavor,\n  getInterfaces,\n  getMemory,\n  getOperatingSystemName,\n  getVolumes,\n  getWorkloadProfile,\n} from '../../../selectors/vm';\nimport { getStorageSize } from '../../../selectors/selectors';\nimport {\n  getDataVolumeResources,\n  getDataVolumeStorageClassName,\n} from '../../../selectors/dv/selectors';\nimport { getPvcResources, getPvcStorageClassName } from '../../../selectors/pvc/selectors';\nimport { getFlavorText } from '../../../selectors/vm/flavor-text';\n\nimport './_clone-vm-modal.scss';\n\nconst getNicsDescription = (vm: VMKind) =>\n  getInterfaces(vm).map(({ name, model }) => (\n    <div key={name}>{model ? `${name} - ${model}` : name}</div>\n  ));\n\nconst getDisksDescription = (\n  vm: VMKind,\n  pvcs: K8sResourceKind[],\n  dataVolumes: K8sResourceKind[],\n) => {\n  const disks = getDisks(vm);\n  const volumes = getVolumes(vm);\n  const dataVolumeTemplates = getDataVolumeTemplates(vm);\n  return disks.map((disk) => {\n    const description = [disk.name];\n\n    const volume = volumes.find((v) => v.name === disk.name);\n    if (volume) {\n      if (volume.dataVolume) {\n        let dataVolume = dataVolumeTemplates.find((dv) => getName(dv) === volume.dataVolume.name);\n        if (!dataVolume) {\n          dataVolume = dataVolumes.find(\n            (dv) => getName(dv) === volume.dataVolume.name && getNamespace(dv) === getNamespace(vm),\n          );\n        }\n        description.push(\n          getStorageSize(getDataVolumeResources(dataVolume)),\n          getDataVolumeStorageClassName(dataVolume),\n        );\n      } else if (volume.persistentVolumeClaim) {\n        const pvc = pvcs.find((p) => getName(p) === volume.persistentVolumeClaim.claimName);\n        description.push(getStorageSize(getPvcResources(pvc)), getPvcStorageClassName(pvc));\n      } else if (volume.containerDisk) {\n        description.push('container disk');\n      } else if (volume.cloudInitNoCloud) {\n        description.push('cloud-init disk');\n      }\n    }\n    return <div key={disk.name}>{description.join(' - ')}</div>;\n  });\n};\n\nexport const ConfigurationSummary: React.FC<ConfigurationSummaryProps> = ({\n  id,\n  vm,\n  persistentVolumeClaims,\n  dataVolumes,\n}) => {\n  const disks = getDisksDescription(vm, persistentVolumeClaims, dataVolumes);\n  const nics = getNicsDescription(vm);\n  return (\n    <dl id={id} className=\"kubevirt-clone-vm-modal__configuration-summary\">\n      <dt>Operating System</dt>\n      <dd>{getOperatingSystemName(vm) || DASH}</dd>\n      <dt>Flavor</dt>\n      <dd>\n        {getFlavorText({\n          flavor: getFlavor(vm),\n          cpu: getCPU(vm),\n          memory: getMemory(vm),\n        })}\n      </dd>\n      <dt>Workload Profile</dt>\n      <dd>{getWorkloadProfile(vm) || DASH}</dd>\n      <dt>NICs</dt>\n      <dd>{nics.length > 0 ? nics : DASH}</dd>\n      <dt>Disks</dt>\n      <dd>{disks.length > 0 ? disks : DASH}</dd>\n    </dl>\n  );\n};\n\ntype ConfigurationSummaryProps = {\n  id: string;\n  vm: VMKind;\n  persistentVolumeClaims: K8sResourceKind[];\n  dataVolumes: K8sResourceKind[];\n};\n","export * from './clone-vm-modal';\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { HandlePromiseProps, history, withHandlePromise } from '@console/internal/components/utils';\nimport { YellowExclamationTriangleIcon } from '@console/shared/src/components/status/icons';\nimport { getName, getNamespace } from '@console/shared/src/selectors/common';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n  ModalComponentProps,\n} from '@console/internal/components/factory';\nimport { apiVersionForModel } from '@console/internal/module/k8s';\nimport { VMLikeEntityKind } from '../../../types/vmLike';\nimport { asVM, getVMLikeModel, getVolumes } from '../../../selectors/vm';\nimport { useOwnedVolumeReferencedResources } from '../../../hooks/use-owned-volume-referenced-resources';\nimport { isTemplate, isVM } from '../../../selectors/check-type';\nimport { useVirtualMachineImport } from '../../../hooks/use-virtual-machine-import';\nimport { useUpToDateVMLikeEntity } from '../../../hooks/use-vm-like-entity';\nimport { VirtualMachineImportModel } from '../../../models';\nimport { deleteVM } from '../../../k8s/requests/vm';\nimport { deleteVMTemplate } from '../../../k8s/requests/vmtemplate/actions';\n\nconst redirectFn = (vmLikeEntity: VMLikeEntityKind) => {\n  // If we are currently on the deleted resource's page, redirect to the resource list page\n  const re = new RegExp(`/${getName(vmLikeEntity)}(/|$)`);\n  if (re.test(window.location.pathname)) {\n    history.push(\n      `/k8s/ns/${getNamespace(vmLikeEntity)}/virtualization${\n        isTemplate(vmLikeEntity) ? '/templates' : ''\n      }`,\n    );\n  }\n};\n\nexport const DeleteVMLikeEntityModal = withHandlePromise((props: DeleteVMLikeEntityModalProps) => {\n  const { inProgress, errorMessage, handlePromise, close, cancel } = props;\n  const vmLikeEntity = useUpToDateVMLikeEntity(props.vmLikeEntity);\n  const [deleteDisks, setDeleteDisks] = React.useState<boolean>(true);\n  const [deleteVMImport, setDeleteVMImport] = React.useState<boolean>(true);\n\n  const entityModel = getVMLikeModel(vmLikeEntity);\n  const namespace = getNamespace(vmLikeEntity);\n\n  const vmLikeReference = {\n    name: getName(vmLikeEntity),\n    kind: entityModel.kind,\n    apiVersion: apiVersionForModel(entityModel),\n  } as any;\n\n  const [vmImport, vmImportLoaded] = useVirtualMachineImport(\n    isVM(vmLikeEntity) ? vmLikeEntity : null,\n  );\n  const [ownedVolumeResources, isOwnedVolumeResourcesLoaded] = useOwnedVolumeReferencedResources(\n    vmLikeReference,\n    namespace,\n    getVolumes(asVM(vmLikeEntity), null),\n  );\n  const isInProgress = inProgress || !vmImportLoaded || !isOwnedVolumeResourcesLoaded;\n  const numOfAllResources = _.sum([ownedVolumeResources.length, vmImport ? 1 : 0]);\n\n  const submit = (e) => {\n    e.preventDefault();\n\n    let promise;\n\n    if (isVM(vmLikeEntity)) {\n      promise = deleteVM(vmLikeEntity, {\n        vmImport,\n        deleteVMImport,\n        ownedVolumeResources,\n        deleteOwnedVolumeResources: deleteDisks,\n      });\n    } else if (isTemplate(vmLikeEntity)) {\n      promise = deleteVMTemplate(vmLikeEntity, {\n        ownedVolumeResources,\n        deleteOwnedVolumeResources: deleteDisks,\n      });\n    }\n\n    return handlePromise(promise)\n      .then(close)\n      .then(() => redirectFn(vmLikeEntity));\n  };\n\n  return (\n    <form onSubmit={submit} className=\"modal-content\">\n      <ModalTitle>\n        <YellowExclamationTriangleIcon className=\"co-icon-space-r\" /> Delete{' '}\n        {isTemplate(vmLikeEntity) ? 'Virtual Machine Template' : entityModel.label}?\n      </ModalTitle>\n      <ModalBody>\n        Are you sure you want to delete{' '}\n        <strong className=\"co-break-word\">{getName(vmLikeEntity)}</strong> in namespace{' '}\n        <strong>{getNamespace(vmLikeEntity)}</strong> ?\n        {numOfAllResources > 0 && (\n          <p>\n            The following resources will be deleted along with this virtual machine. Unchecked items\n            will not be deleted.\n          </p>\n        )}\n        {ownedVolumeResources.length > 0 && (\n          <div className=\"checkbox\">\n            <label className=\"control-label\">\n              <input\n                type=\"checkbox\"\n                onChange={() => setDeleteDisks(!deleteDisks)}\n                checked={deleteDisks}\n              />\n              Delete Disks ({ownedVolumeResources.length}x)\n            </label>\n          </div>\n        )}\n        {vmImport && (\n          <div className=\"checkbox\">\n            <label className=\"control-label\">\n              <input\n                type=\"checkbox\"\n                onChange={() => setDeleteVMImport(!deleteVMImport)}\n                checked={deleteVMImport}\n              />\n              Delete {VirtualMachineImportModel.label} Resource\n            </label>\n          </div>\n        )}\n      </ModalBody>\n      <ModalSubmitFooter\n        errorMessage={errorMessage}\n        submitDisabled={isInProgress}\n        inProgress={isInProgress}\n        submitText=\"Delete\"\n        submitDanger\n        cancel={cancel}\n      />\n    </form>\n  );\n});\n\nexport type DeleteVMLikeEntityModalProps = {\n  vmLikeEntity: VMLikeEntityKind;\n} & ModalComponentProps &\n  HandlePromiseProps;\n\nexport const deleteVMLikeEntityModal = createModalLauncher(DeleteVMLikeEntityModal);\n","/* eslint-disable lines-between-class-members */\n\nimport { ObjectEnum, VolumeType } from '../../../constants';\nimport { DataVolumeSourceType, DiskType } from '../../../constants/vm/storage';\nimport { getStringEnumValues } from '../../../utils/types';\nimport { BinaryUnit } from '../../form/size-unit-utils';\n\nexport class StorageUISource extends ObjectEnum<string> {\n  static readonly BLANK = new StorageUISource(\n    'Blank',\n    VolumeType.DATA_VOLUME,\n    DataVolumeSourceType.BLANK,\n  );\n  static readonly URL = new StorageUISource(\n    'URL',\n    VolumeType.DATA_VOLUME,\n    DataVolumeSourceType.HTTP,\n  );\n  static readonly CONTAINER = new StorageUISource('Container', VolumeType.CONTAINER_DISK);\n  static readonly ATTACH_CLONED_DISK = new StorageUISource(\n    'Attach Cloned Disk',\n    VolumeType.DATA_VOLUME,\n    DataVolumeSourceType.PVC,\n  );\n  static readonly ATTACH_DISK = new StorageUISource(\n    'Attach Disk',\n    VolumeType.PERSISTENT_VOLUME_CLAIM,\n    undefined,\n  );\n  static readonly IMPORT_DISK = new StorageUISource(\n    'Import Disk',\n    VolumeType.PERSISTENT_VOLUME_CLAIM,\n    undefined,\n    true,\n  );\n\n  static readonly OTHER = new StorageUISource('Other');\n\n  private readonly volumeType: VolumeType;\n  private readonly dataVolumeSourceType: DataVolumeSourceType;\n  private readonly hasNewPVC: boolean;\n\n  private static readonly ALL = Object.freeze(\n    ObjectEnum.getAllClassEnumProperties<StorageUISource>(StorageUISource),\n  );\n\n  private static readonly stringMapper = StorageUISource.ALL.reduce(\n    (accumulator, volumeType: StorageUISource) => ({\n      ...accumulator,\n      [volumeType.value]: volumeType,\n    }),\n    {},\n  );\n\n  protected constructor(\n    value: string,\n    volumeType?: VolumeType,\n    dataVolumeSourceType?: DataVolumeSourceType,\n    hasNewPVC: boolean = false,\n  ) {\n    super(value);\n    this.volumeType = volumeType;\n    this.dataVolumeSourceType = dataVolumeSourceType;\n    this.hasNewPVC = hasNewPVC;\n  }\n\n  static getAll = () => StorageUISource.ALL;\n\n  static fromString = (model: string): StorageUISource => StorageUISource.stringMapper[model];\n\n  static fromTypes = (\n    volumeType: VolumeType,\n    dataVolumeSourceType?: DataVolumeSourceType,\n    hasNewPVC: boolean = false,\n  ) =>\n    StorageUISource.ALL.find(\n      (storageUIType) =>\n        storageUIType !== StorageUISource.OTHER &&\n        storageUIType.volumeType == volumeType && // eslint-disable-line eqeqeq\n        storageUIType.dataVolumeSourceType == dataVolumeSourceType && // eslint-disable-line eqeqeq\n        storageUIType.hasNewPVC == hasNewPVC, // eslint-disable-line eqeqeq\n    ) || StorageUISource.OTHER;\n\n  getVolumeType = () => this.volumeType;\n\n  getDataVolumeSourceType = () => this.dataVolumeSourceType;\n\n  getAllowedUnits = () =>\n    this === StorageUISource.IMPORT_DISK\n      ? getStringEnumValues<BinaryUnit>(BinaryUnit)\n      : [BinaryUnit.Mi, BinaryUnit.Gi, BinaryUnit.Ti];\n\n  requiresPVC = () =>\n    this === StorageUISource.ATTACH_DISK || this === StorageUISource.ATTACH_CLONED_DISK;\n\n  requiresNewPVC = () => this.hasNewPVC;\n\n  requiresContainerImage = () => this === StorageUISource.CONTAINER;\n\n  requiresURL = () => this === StorageUISource.URL;\n\n  requiresSize = () => this.requiresDatavolume() || this.hasNewPVC;\n\n  requiresStorageClass = () => this.requiresDatavolume() || this.hasNewPVC;\n\n  requiresVolumeType = () => !!this.volumeType;\n\n  requiresDatavolume = () => !!this.dataVolumeSourceType;\n\n  requiresNamespace = () => this === StorageUISource.ATTACH_CLONED_DISK;\n\n  requiresAccessModes = () =>\n    this !== StorageUISource.ATTACH_DISK &&\n    this !== StorageUISource.CONTAINER &&\n    this !== StorageUISource.OTHER;\n\n  requiresVolumeMode = () =>\n    this !== StorageUISource.ATTACH_DISK &&\n    this !== StorageUISource.CONTAINER &&\n    this !== StorageUISource.OTHER;\n\n  requiresVolumeModeOrAccessModes = () => this.requiresAccessModes() || this.requiresVolumeMode();\n\n  isNameEditingSupported = (diskType: DiskType) => diskType !== DiskType.CDROM;\n\n  isSizeEditingSupported = (size: number) => size === 0 || this !== StorageUISource.IMPORT_DISK; // if imported disk has 0 size, leave the user to decide\n\n  isPlainDataVolume = (isCreateTemplate: boolean) =>\n    isCreateTemplate && this === StorageUISource.URL;\n\n  hasDynamicSize = () => this === StorageUISource.CONTAINER;\n\n  canBeChangedToThisSource = (diskType: DiskType) => {\n    if (diskType === DiskType.CDROM) {\n      return (\n        this === StorageUISource.ATTACH_DISK ||\n        this === StorageUISource.URL ||\n        this === StorageUISource.CONTAINER\n      );\n    }\n    return this !== StorageUISource.IMPORT_DISK && this !== StorageUISource.OTHER;\n  };\n}\n","export * from './modal-resource-launcher';\nexport * from './vm-description-modal';\nexport * from './vm-flavor-modal';\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Provider } from 'react-redux';\nimport { Router } from 'react-router-dom';\nimport store from '@console/internal/redux';\nimport {\n  Firehose,\n  AccessDenied,\n  history,\n  MsgBox,\n  Box,\n  FirehoseResource,\n  FirehoseResult,\n} from '@console/internal/components/utils';\nimport { ModalErrorContent } from '@console/internal/components/modals/error-modal';\nimport { createModal, GetModalContainer } from '@console/internal/components/factory';\nimport { RedExclamationCircleIcon } from '@console/shared';\n\nconst NotFound: React.FC<NotFoundProps> = ({ message }) => (\n  <Box className=\"text-center\">\n    <MsgBox title=\"Not Found\" detail=\"Requested resource not found.\" />\n    {_.isString(message) && (\n      <div className=\"alert alert-danger text-left\">\n        <RedExclamationCircleIcon />\n        {message}\n      </div>\n    )}\n  </Box>\n);\n\nconst ModalComponentWrapper: React.FC<ModalComponentWrapperProps> = ({\n  Component,\n  onClose,\n  resourcesToProps,\n  loadError,\n  loaded,\n  resources = {},\n  modalProps = {},\n}) => {\n  if (loadError) {\n    const status = _.get(loadError, 'response.status');\n    let errorContent;\n    if (status === 404) {\n      errorContent = <NotFound message={loadError.message} />;\n    }\n    if (status === 403) {\n      errorContent = <AccessDenied message={loadError.message} />;\n    }\n\n    if (!loaded) {\n      return <ModalErrorContent cancel={onClose} error={errorContent} />;\n    }\n  }\n\n  const resourceProps = resourcesToProps ? resourcesToProps(resources) || {} : resources;\n\n  return (\n    <Component\n      onClose={onClose}\n      onCancel={onClose}\n      onHide={onClose}\n      {...modalProps}\n      {...resourceProps}\n    />\n  );\n};\n\nexport const createModalResourceLauncher: CreateModalResourceLauncher = (\n  Component,\n  resources,\n  resourcesToProps,\n) => (props) => {\n  const getModalContainer: GetModalContainer = (onClose) => (\n    <Provider store={store}>\n      <Router {...{ history, basename: window.SERVER_FLAGS.basePath }}>\n        <Firehose resources={resources}>\n          <ModalComponentWrapper\n            Component={Component}\n            onClose={onClose}\n            resourcesToProps={resourcesToProps}\n            modalProps={props}\n          />\n        </Firehose>\n      </Router>\n    </Provider>\n  );\n  return createModal(getModalContainer);\n};\n\ntype NotFoundProps = {\n  message: string;\n};\n\ntype ResourcesToProps = (res: { [key: string]: FirehoseResult }) => { [key: string]: any };\n\ntype CreateModalResourceLauncher = (\n  Component: React.ComponentType<any>,\n  resources: FirehoseResource[],\n  resourcesToProps?: ResourcesToProps,\n) => (props: any) => { result: Promise<any> };\n\ntype ModalComponentWrapperProps = {\n  loadError?: any;\n  loaded?: boolean;\n  Component: React.ComponentType<any>;\n  onClose: (e?: React.SyntheticEvent) => void;\n  resourcesToProps?: ResourcesToProps;\n  modalProps?: { [key: string]: any };\n  resources?: { [key: string]: FirehoseResult };\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport classNames from 'classnames';\nimport { Alert, Button, ButtonVariant, AlertProps, ActionGroup } from '@patternfly/react-core';\nimport { LoadingInline } from '@console/internal/components/utils';\n\nimport './modal-footer.scss';\n\ntype ModalErrorMessageProps = {\n  message: string;\n};\n\nexport const ModalErrorMessage: React.FC<ModalErrorMessageProps> = ({ message }) => (\n  <Alert\n    isInline\n    className=\"co-alert co-alert--scrollable\"\n    variant=\"danger\"\n    title=\"An error occurred\"\n  >\n    <div className=\"co-pre-line\">{message}</div>\n  </Alert>\n);\n\ntype ModalSimpleMessageProps = {\n  message: string;\n  variant?: AlertProps['variant'];\n};\n\nexport const ModalSimpleMessage: React.FC<ModalSimpleMessageProps> = ({\n  message,\n  variant = 'danger',\n}) => <Alert isInline className=\"co-alert\" variant={variant} title={message} />;\n\ntype ModalInfoMessageProps = {\n  title: string;\n  children: React.ReactNode;\n};\n\nexport const ModalInfoMessage: React.FC<ModalInfoMessageProps> = ({ title, children }) => (\n  <Alert isInline className=\"co-alert co-alert--scrollable\" variant=\"info\" title={title}>\n    {children}\n  </Alert>\n);\n\ntype ModalFooterProps = {\n  id?: string;\n  className?: string;\n  errorMessage?: string;\n  warningMessage?: string;\n  isSimpleError?: boolean;\n  onSubmit: (e) => void;\n  onCancel: (e) => void;\n  isDisabled?: boolean;\n  inProgress?: boolean;\n  submitButtonText?: string;\n  cancelButtonText?: string;\n  infoTitle?: string;\n  infoMessage?: React.ReactNode;\n};\n\nexport const ModalFooter: React.FC<ModalFooterProps> = ({\n  className = '',\n  errorMessage = null,\n  warningMessage = null,\n  isDisabled = false,\n  inProgress = false,\n  isSimpleError = false,\n  onSubmit,\n  onCancel,\n  submitButtonText = 'Add',\n  cancelButtonText = 'Cancel',\n  infoMessage = null,\n  infoTitle = null,\n}) => (\n  <footer\n    className={classNames('co-m-btn-bar modal-footer kubevirt-modal-footer__buttons', className)}\n  >\n    {warningMessage && isSimpleError && (\n      <ModalSimpleMessage message={warningMessage} variant=\"warning\" />\n    )}\n    {errorMessage && isSimpleError && <ModalSimpleMessage message={errorMessage} />}\n    {errorMessage && !isSimpleError && <ModalErrorMessage message={errorMessage} />}\n    {infoTitle && <ModalInfoMessage title={infoTitle}>{infoMessage}</ModalInfoMessage>}\n\n    <ActionGroup className=\"pf-c-form pf-c-form__actions--right pf-c-form__group--no-top-margin\">\n      <Button\n        type=\"button\"\n        variant={ButtonVariant.secondary}\n        data-test-id=\"modal-cancel-action\"\n        onClick={onCancel}\n      >\n        {cancelButtonText}\n      </Button>\n      <Button\n        variant={ButtonVariant.primary}\n        isDisabled={isDisabled}\n        id=\"confirm-action\"\n        onClick={onSubmit}\n      >\n        {submitButtonText}\n      </Button>\n    </ActionGroup>\n\n    {inProgress && <LoadingInline />}\n  </footer>\n);\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  withHandlePromise,\n  HandlePromiseProps,\n  FirehoseResult,\n} from '@console/internal/components/utils';\nimport {\n  Button,\n  ButtonVariant,\n  Split,\n  SplitItem,\n  Text,\n  TextVariants,\n  EmptyState,\n  EmptyStateVariant,\n  Title,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { ModalTitle, ModalBody, ModalComponentProps } from '@console/internal/components/factory';\nimport { NodeModel } from '@console/internal/models';\nimport { NodeKind, k8sPatch } from '@console/internal/module/k8s';\nimport { VMLikeEntityKind } from '../../../../types/vmLike';\nimport { getVMLikeModel } from '../../../../selectors/vm';\nimport { getVMLikeAffinity } from '../../../../selectors/vm-like/selectors';\nimport { getLoadedData, isLoaded, getLoadError } from '../../../../utils';\nimport { useCollisionChecker } from '../../../../hooks/use-collision-checker';\nimport { ModalFooter } from '../../modal/modal-footer';\nimport { AFFINITY_MODAL_TITLE, AFFINITY_CREATE, AFFINITY_EDITING } from '../shared/consts';\nimport { AffinityTable } from './components/affinity-table/affinity-table';\nimport { AffinityRow } from './components/affinity-table/affinity-row';\nimport { AffinityEdit } from './components/affinity-edit/affinity-edit';\nimport { AffinityRowData } from './types';\nimport {\n  getRowsDataFromAffinity,\n  getAffinityFromRowsData,\n  defaultNewAffinity,\n  columnClasses,\n} from './helpers';\nimport { getAffinityPatch } from '../../../../k8s/patches/vm/vm-scheduling-patches';\n\nimport '../shared/scheduling-modals.scss';\n\nexport const AffinityModal = withHandlePromise<AffinityModalProps>(\n  ({\n    vmLikeEntity,\n    vmLikeEntityLoading,\n    nodes,\n    close,\n    handlePromise,\n    inProgress,\n    errorMessage,\n  }) => {\n    const vmLikeFinal = getLoadedData(vmLikeEntityLoading, vmLikeEntity);\n    const loadError = getLoadError(nodes, NodeModel);\n    const currentAffinity = getVMLikeAffinity(vmLikeFinal);\n\n    const [affinities, setAffinities] = React.useState<AffinityRowData[]>(\n      getRowsDataFromAffinity(currentAffinity),\n    );\n    const [focusedAffinity, setFocusedAffinity] = React.useState<AffinityRowData>(\n      defaultNewAffinity,\n    );\n\n    const [isEditing, setIsEditing] = React.useState(false);\n    const [isCreating, setIsCreating] = React.useState(false);\n    const [showCollisionAlert, reload] = useCollisionChecker<VMLikeEntityKind>(\n      vmLikeFinal,\n      (oldVM: VMLikeEntityKind, newVM: VMLikeEntityKind) =>\n        _.isEqual(getVMLikeAffinity(oldVM), getVMLikeAffinity(newVM)),\n    );\n\n    const onReload = () => {\n      reload();\n      setAffinities(getRowsDataFromAffinity(currentAffinity));\n      setIsCreating(false);\n    };\n\n    const onAffinityAdd = (affinity: AffinityRowData) => {\n      setAffinities([...affinities, affinity]);\n      setIsEditing(false);\n      setIsCreating(false);\n    };\n\n    const onAffinityChange = (updatedAffinity: AffinityRowData) => {\n      setAffinities(\n        affinities.map((affinity) => {\n          if (affinity.id === updatedAffinity.id) return { ...affinity, ...updatedAffinity };\n          return affinity;\n        }),\n      );\n      setIsEditing(false);\n    };\n\n    const onAffinityClickAdd = () => {\n      setIsEditing(true);\n      setIsCreating(true);\n      setFocusedAffinity(defaultNewAffinity);\n    };\n\n    const onAffinityClickEdit = (affinity: AffinityRowData) => {\n      setFocusedAffinity(affinity);\n      setIsEditing(true);\n    };\n\n    const onAffinityDelete = (affinity: AffinityRowData) =>\n      setAffinities(affinities.filter(({ id }) => id !== affinity.id));\n\n    const submit = async () => {\n      if (!_.isEqual(affinities, getRowsDataFromAffinity(currentAffinity))) {\n        // eslint-disable-next-line promise/catch-or-return\n        handlePromise(\n          k8sPatch(\n            getVMLikeModel(vmLikeFinal),\n            vmLikeFinal,\n            await getAffinityPatch(vmLikeFinal, getAffinityFromRowsData(affinities)),\n          ),\n        ).then(close);\n      } else {\n        close();\n      }\n    };\n\n    const onCancel = () => {\n      if (isEditing) {\n        setIsEditing(false);\n        setIsCreating(false);\n      } else {\n        close();\n      }\n    };\n\n    const modalTitle = !isEditing\n      ? AFFINITY_MODAL_TITLE\n      : isCreating\n      ? AFFINITY_CREATE\n      : AFFINITY_EDITING;\n\n    return (\n      <div className=\"modal-content\">\n        <Split>\n          <SplitItem>\n            <ModalTitle>{modalTitle}</ModalTitle>\n          </SplitItem>\n          <SplitItem isFilled />\n          <SplitItem className=\"scheduling-modals__add-btn\">\n            {!isEditing && affinities.length > 0 && (\n              <Button onClick={() => onAffinityClickAdd()} variant=\"secondary\">\n                Add Affinity rule\n              </Button>\n            )}\n          </SplitItem>\n        </Split>\n        {isEditing ? (\n          <AffinityEdit\n            nodes={nodes}\n            affinity={focusedAffinity}\n            onAffinitySubmit={isCreating ? onAffinityAdd : onAffinityChange}\n            onCancel={onCancel}\n          />\n        ) : (\n          <>\n            <ModalBody>\n              {affinities.length > 0 && (\n                <div className=\"scheduling-modals__desc-container\">\n                  <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                    {\n                      'Set scheduling requirements and affect the ranking of the nodes candidate for scheduling.'\n                    }\n                  </Text>\n                  <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                    {\n                      \"Rules with 'Preferred' condition will stack with an 'AND' relation between them.\"\n                    }\n                  </Text>\n\n                  <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                    {\n                      \"Rules with 'Required' condition will stack with an 'OR' relation between them.\"\n                    }\n                  </Text>\n                </div>\n              )}\n              {affinities.length > 0 ? (\n                <AffinityTable\n                  columnClasses={columnClasses}\n                  data={affinities}\n                  customData={{\n                    isDisabled: false,\n                    vmLikeFinal,\n                    onEdit: onAffinityClickEdit,\n                    onDelete: onAffinityDelete,\n                  }}\n                  row={AffinityRow}\n                />\n              ) : (\n                <EmptyState variant={EmptyStateVariant.full}>\n                  <Title headingLevel=\"h5\" size=\"lg\">\n                    No Affinity rules found\n                  </Title>\n                  <EmptyStateBody>\n                    <div className=\"scheduling-modals__desc-container\">\n                      <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                        {\n                          'Set scheduling requirements and affect the ranking of the nodes candidate for scheduling.'\n                        }\n                      </Text>\n                      <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                        {\n                          \"Rules with 'Preferred' condition will stack with an 'AND' relation between them.\"\n                        }\n                      </Text>\n\n                      <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                        {\n                          \"Rules with 'Required' condition will stack with an 'OR' relation between them.\"\n                        }\n                      </Text>\n                    </div>\n                  </EmptyStateBody>\n                  <Button variant=\"secondary\" onClick={() => onAffinityClickAdd()}>\n                    Add Affinity rule\n                  </Button>\n                </EmptyState>\n              )}\n            </ModalBody>\n            <ModalFooter\n              id=\"affinity\"\n              className=\"kubevirt-affinity__footer\"\n              errorMessage={errorMessage}\n              inProgress={!isLoaded(nodes) || inProgress}\n              isSimpleError={!!loadError}\n              onSubmit={submit}\n              onCancel={onCancel}\n              submitButtonText={'Save'}\n              infoTitle={showCollisionAlert && 'Affinity has been updated outside this flow.'}\n              infoMessage={\n                <>\n                  Saving these changes will override any Affinity previously saved.\n                  <br />\n                  <Button variant={ButtonVariant.link} isInline onClick={onReload}>\n                    Reload Affinity\n                  </Button>\n                  .\n                </>\n              }\n            />\n          </>\n        )}\n      </div>\n    );\n  },\n);\n\ntype AffinityModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    vmLikeEntity: VMLikeEntityKind;\n    nodes?: FirehoseResult<NodeKind[]>;\n    vmLikeEntityLoading?: FirehoseResult<VMLikeEntityKind>;\n  };\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  Form,\n  FormSelect,\n  FormSelectOption,\n  TextInput,\n  Divider,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { FirehoseResult } from '@console/internal/components/utils';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { ModalBody } from '@console/internal/components/factory';\nimport { ValidationErrorType } from '@console/shared';\nimport { isLoaded } from '../../../../../../utils';\nimport { ModalFooter } from '../../../../modal/modal-footer';\nimport {\n  AFFINITY_TYPE_LABLES,\n  AFFINITY_CONDITIONS,\n  AFFINITY_CONDITION_LABELS,\n} from '../../../shared/consts';\nimport { FormRow } from '../../../../../form/form-row';\nimport { isWeightValid, isTermsInvalid, getTopologyKeyValidation } from '../../validations';\nimport { useIDEntities } from '../../../../../../hooks/use-id-entities';\nimport { NodeChecker } from '../../../shared/NodeChecker/node-checker';\nimport { useNodeQualifier } from '../../../shared/hooks';\nimport { AffinityLabel, AffinityRowData } from '../../types';\nimport { AffinityExpressionList } from '../affinity-expression-list/affinity-expression-list';\nimport './affinity-edit.scss';\n\nexport const AffinityEdit: React.FC<AffinityEditProps> = ({\n  nodes,\n  affinity,\n  isDisabled,\n  onAffinitySubmit,\n  onCancel,\n}) => {\n  const [focusedAffinity, setFocusedAffinity] = React.useState(affinity);\n\n  const [\n    affinityExpressions,\n    ,\n    onExpressionAdd,\n    onExpressionChange,\n    onExpressionDelete,\n    initialAffinityExpressionChanged,\n  ] = useIDEntities<AffinityLabel>(affinity?.expressions);\n\n  const onLabelExpressionAdd = () =>\n    onExpressionAdd({ id: null, key: '', values: [], operator: 'In' } as AffinityLabel);\n\n  const [\n    affinityFields,\n    ,\n    onFieldAdd,\n    onFieldChange,\n    onFieldDelete,\n    initialAffinityFieldChanged,\n  ] = useIDEntities<AffinityLabel>(affinity?.fields);\n\n  const initialAffinityChanged = initialAffinityFieldChanged || initialAffinityExpressionChanged;\n\n  const onLabelFieldAdd = () =>\n    onFieldAdd({ id: null, key: '', values: [], operator: 'In' } as AffinityLabel);\n\n  const isNodeAffinity = focusedAffinity.type === 'nodeAffinity';\n  const {\n    isTopologyDisabled,\n    isTopologyInvalid,\n    topologyValidationMessage,\n  } = getTopologyKeyValidation(focusedAffinity);\n\n  React.useEffect(() => {\n    if (isTopologyDisabled && focusedAffinity.topologyKey !== 'kubernetes.io/hostname')\n      setFocusedAffinity({ ...focusedAffinity, topologyKey: 'kubernetes.io/hostname' });\n  }, [focusedAffinity, isTopologyDisabled]);\n\n  const qualifiedExpressionNodes = useNodeQualifier(nodes, 'label', affinityExpressions);\n  const qualifiedFieldNodes = useNodeQualifier(nodes, 'field', affinityFields);\n\n  const getQualifiedNodes = () => {\n    if (affinityExpressions.length > 0 && affinityFields.length > 0) {\n      return _.intersection(qualifiedExpressionNodes, qualifiedFieldNodes);\n    }\n    if (affinityExpressions.length > 0) {\n      return qualifiedExpressionNodes;\n    }\n    if (affinityFields.length > 0) {\n      return qualifiedFieldNodes;\n    }\n    return [];\n  };\n\n  const isExpressionsInvalid = isTermsInvalid(affinityExpressions);\n  const isFieldsInvalid = isTermsInvalid(affinityFields);\n  const isWeightInvalid = !isWeightValid(focusedAffinity);\n\n  const isAffinityInvalid =\n    (affinityExpressions.length === 0 && affinityFields.length === 0) ||\n    isWeightInvalid ||\n    isExpressionsInvalid ||\n    (isNodeAffinity && isFieldsInvalid) ||\n    (!isNodeAffinity && isTopologyInvalid);\n\n  return (\n    <>\n      <ModalBody>\n        <div className=\"scheduling-modals__desc-container\">\n          <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n            {\n              'Define an affinity rule. This rule will be added to the list of affinity rules applied to this workload.'\n            }\n          </Text>\n        </div>\n        <Form>\n          <FormRow title=\"Type\" fieldId={'affinity-type'} isRequired>\n            <FormSelect\n              onChange={(value) =>\n                setFocusedAffinity({\n                  ...focusedAffinity,\n                  type: value as AffinityRowData['type'],\n                })\n              }\n              value={focusedAffinity.type}\n              id={'affinity-type'}\n              isDisabled={isDisabled}\n            >\n              {Object.keys(AFFINITY_TYPE_LABLES).map((affinityType) => {\n                return (\n                  <FormSelectOption\n                    key={affinityType}\n                    value={affinityType}\n                    label={AFFINITY_TYPE_LABLES[affinityType]}\n                  />\n                );\n              })}\n            </FormSelect>\n          </FormRow>\n          <FormRow title=\"Condition\" fieldId={'affinity-condition'} isRequired>\n            <FormSelect\n              onChange={(value) =>\n                setFocusedAffinity({\n                  ...focusedAffinity,\n                  condition: value as AffinityRowData['condition'],\n                })\n              }\n              value={focusedAffinity.condition}\n              id={'affinity-condition'}\n              isDisabled={isDisabled}\n            >\n              <FormSelectOption\n                key={AFFINITY_CONDITIONS.preferred}\n                value={AFFINITY_CONDITIONS.preferred}\n                label={AFFINITY_CONDITION_LABELS[AFFINITY_CONDITIONS.preferred]}\n              />\n              <FormSelectOption\n                key={AFFINITY_CONDITIONS.required}\n                value={AFFINITY_CONDITIONS.required}\n                label={AFFINITY_CONDITION_LABELS[AFFINITY_CONDITIONS.required]}\n              />\n            </FormSelect>\n          </FormRow>\n          {focusedAffinity?.condition === AFFINITY_CONDITIONS.preferred && (\n            <FormRow\n              title=\"Weight\"\n              fieldId={'weight'}\n              validationType={\n                isWeightInvalid ? ValidationErrorType.Error : ValidationErrorType.Info\n              }\n              validationMessage=\"Weight must be a number between 1-100\"\n              isRequired\n            >\n              <TextInput\n                key=\"weight\"\n                isDisabled={isDisabled}\n                id={'weight'}\n                value={focusedAffinity.weight || ''}\n                onChange={(value) =>\n                  setFocusedAffinity({ ...focusedAffinity, weight: parseInt(value, 10) })\n                }\n              />\n            </FormRow>\n          )}\n          {!isNodeAffinity && (\n            <FormRow\n              title=\"Topology Key\"\n              fieldId={'topology-key'}\n              validationType={\n                isTopologyInvalid ? ValidationErrorType.Error : ValidationErrorType.Info\n              }\n              validationMessage={topologyValidationMessage}\n            >\n              <TextInput\n                key=\"topology-key\"\n                isDisabled={isDisabled || isTopologyDisabled}\n                id={'topology-key'}\n                value={focusedAffinity.topologyKey || ''}\n                onChange={(value) => setFocusedAffinity({ ...focusedAffinity, topologyKey: value })}\n              />\n            </FormRow>\n          )}\n          <Divider component=\"div\" />\n          <FormRow\n            title={isNodeAffinity ? 'Node Labels' : 'Workload Labels'}\n            fieldId={'expressions'}\n            validationType={\n              isExpressionsInvalid && initialAffinityChanged && ValidationErrorType.Error\n            }\n            validationMessage={\n              isExpressionsInvalid && initialAffinityChanged && isNodeAffinity\n                ? 'Missing fields in node labels'\n                : 'Missing fields in workload labels'\n            }\n          >\n            <div className=\"scheduling-modals__desc-container\">\n              {isNodeAffinity ? (\n                <>\n                  <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                    {'Select nodes that must have all the following expressions.'}\n                  </Text>\n                  <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                    {\n                      'Label selectors let you select Nodes based on the value of one or more labels.'\n                    }\n                  </Text>\n                  <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                    {'A list of matching nodes will be provided on label input below.'}\n                  </Text>\n                </>\n              ) : (\n                <>\n                  <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                    {'Select workloads that must have all the following expressions.'}\n                  </Text>\n                </>\n              )}\n            </div>\n            <AffinityExpressionList\n              expressions={affinityExpressions}\n              addRowText=\"Add Expression\"\n              onAdd={onLabelExpressionAdd}\n              onChange={onExpressionChange}\n              onDelete={onExpressionDelete}\n            />\n          </FormRow>\n          {isNodeAffinity && (\n            <>\n              <Divider component=\"div\" />\n              <FormRow\n                title=\"Node Fields\"\n                fieldId={'fields'}\n                validationType={\n                  isFieldsInvalid && initialAffinityChanged && ValidationErrorType.Error\n                }\n                validationMessage={\n                  isFieldsInvalid && initialAffinityChanged && 'Missing fields in node fields'\n                }\n              >\n                <div className=\"scheduling-modals__desc-container\">\n                  <>\n                    <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                      {\n                        'Field selectors let you select Nodes based on the value of one or more resource fields.'\n                      }\n                    </Text>\n                    <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                      {\n                        'Note that for Node field expressions, entering a full path is required in the Key field (e.g. `metadata.name: value`).'\n                      }\n                    </Text>\n                    <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                      {'Some fields may not be supported.'}\n                    </Text>\n                  </>\n                </div>\n                <AffinityExpressionList\n                  expressions={affinityFields}\n                  addRowText=\"Add Field\"\n                  onAdd={onLabelFieldAdd}\n                  onChange={onFieldChange}\n                  onDelete={onFieldDelete}\n                />\n              </FormRow>\n              {(affinityExpressions.length > 0 || affinityFields.length > 0) &&\n                !isAffinityInvalid && <NodeChecker qualifiedNodes={getQualifiedNodes()} />}\n            </>\n          )}\n        </Form>\n      </ModalBody>\n      <ModalFooter\n        id=\"affinity-edit\"\n        className=\"kubevirt-affinity-edit__footer\"\n        inProgress={!isLoaded(nodes)}\n        onSubmit={() =>\n          onAffinitySubmit({\n            ...focusedAffinity,\n            expressions: affinityExpressions,\n            fields: affinityFields,\n          })\n        }\n        onCancel={onCancel}\n        submitButtonText=\"Save Affinity rule\"\n        isDisabled={isAffinityInvalid}\n      />\n    </>\n  );\n};\n\ntype AffinityEditProps = {\n  nodes?: FirehoseResult<NodeKind[]>;\n  affinity: AffinityRowData;\n  isDisabled?: boolean;\n  onAffinitySubmit: (affinity: AffinityRowData) => void;\n  onCancel: (affinity: AffinityRowData) => void;\n};\n","import * as React from 'react';\nimport { GridItem, Text, TextVariants } from '@patternfly/react-core';\nimport { LabelsList } from '../../../../../LabelsList/labels-list';\nimport { LABEL_KEY } from '../../../../../LabelsList/consts';\nimport { AffinityLabel } from '../../types';\nimport { AffinityExpressionRow } from './affinity-expression-row';\n\nexport const AffinityExpressionList = ({\n  expressions,\n  addRowText,\n  onAdd,\n  onChange,\n  onDelete,\n}: AffinityExpressionListProps) => {\n  return (\n    <LabelsList\n      isEmpty={expressions.length === 0}\n      onLabelAdd={onAdd}\n      addRowText={addRowText}\n      emptyStateAddRowText={addRowText}\n    >\n      {expressions.length > 0 && (\n        <>\n          <GridItem span={4}>\n            <Text component={TextVariants.h6}>{LABEL_KEY}</Text>\n          </GridItem>\n          <GridItem span={2}>\n            <Text component={TextVariants.h6}>Operator</Text>\n          </GridItem>\n          <GridItem span={6}>\n            <Text component={TextVariants.h6}>Values</Text>\n          </GridItem>\n          {expressions.map((expression) => (\n            <AffinityExpressionRow\n              key={expression.id}\n              expression={expression}\n              onChange={onChange}\n              onDelete={onDelete}\n            />\n          ))}\n        </>\n      )}\n    </LabelsList>\n  );\n};\n\ntype AffinityExpressionListProps = {\n  expressions: AffinityLabel[];\n  addRowText: string;\n  onAdd: () => void;\n  onChange: (aff: AffinityLabel) => void;\n  onDelete: (id: any) => void;\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { MinusCircleIcon } from '@patternfly/react-icons';\nimport {\n  GridItem,\n  TextInput,\n  Button,\n  FormSelect,\n  FormSelectOption,\n  Select,\n  SelectVariant,\n  SelectOption,\n} from '@patternfly/react-core';\nimport { EXPRESSION_OPERATORS } from '../../../shared/consts';\nimport { AffinityLabel } from '../../types';\nimport './affinity-expression-row.scss';\n\nexport const AffinityExpressionRow = ({\n  expression,\n  onChange,\n  onDelete,\n}: AffinityExpressionRowProps) => {\n  const { id, key, values, operator } = expression;\n  const enableValueField = operator !== 'Exists' && operator !== 'DoesNotExist';\n  const [isValuesExpanded, setIsValuesExpanded] = React.useState(false);\n\n  const onSelect = (event, selection) => {\n    const isValueExist = values.some((item) => item === selection);\n    if (isValueExist) {\n      onChange({ ...expression, values: values.filter((item) => item !== selection) });\n    } else {\n      onChange({ ...expression, values: [...values, selection] });\n    }\n  };\n  return (\n    <>\n      <GridItem span={4}>\n        <TextInput\n          id={`affinity-${id}-key-input`}\n          className=\"kv-affinity-expression-row__key-input\"\n          placeholder=\"key\"\n          isRequired\n          type=\"text\"\n          value={key}\n          onChange={(newKey) => onChange({ ...expression, key: newKey })}\n          aria-label=\"selector key\"\n        />\n      </GridItem>\n      <GridItem span={2}>\n        <FormSelect\n          id={`affinity-${id}-effect-select`}\n          className=\"kv-affinity-expression-row__operator-input\"\n          isRequired\n          value={operator}\n          onChange={(v) => onChange({ ...expression, operator: v as AffinityLabel['operator'] })}\n          aria-label=\"selector effect\"\n        >\n          {EXPRESSION_OPERATORS.map((operatorOption) => (\n            <FormSelectOption key={operatorOption} value={operatorOption} label={operatorOption} />\n          ))}\n        </FormSelect>\n      </GridItem>\n      <GridItem span={5}>\n        <Select\n          isDisabled={!enableValueField}\n          variant={SelectVariant.typeaheadMulti}\n          isExpanded={isValuesExpanded}\n          isCreatable\n          ariaLabelTypeAhead=\"Enter Value\"\n          onToggle={() => setIsValuesExpanded(!isValuesExpanded)}\n          onClear={() => onChange({ ...expression, values: [] })}\n          onSelect={onSelect}\n          selections={enableValueField ? values : []}\n          ariaLabelledBy=\"values select\"\n          placeholderText={enableValueField ? 'Enter Value' : ''}\n        >\n          {values?.map((option, index) => (\n            // eslint-disable-next-line react/no-array-index-key\n            <SelectOption isDisabled={false} key={index} value={option} />\n          ))}\n        </Select>\n      </GridItem>\n      <GridItem span={1}>\n        <Button id={`affinity-${id}-delete-btn`} onClick={() => onDelete(id)} variant=\"plain\">\n          <MinusCircleIcon />\n        </Button>\n      </GridItem>\n    </>\n  );\n};\n\ntype AffinityExpressionRowProps = {\n  expression: AffinityLabel;\n  onChange: (label: AffinityLabel) => void;\n  onDelete: (id: any) => void;\n};\n","import * as React from 'react';\nimport { Kebab, KebabOption, pluralize } from '@console/internal/components/utils';\nimport { isVMI } from '../../../../../../selectors/check-type';\nimport { VMLikeEntityKind } from '../../../../../../types/vmLike';\nimport { TableData, TableRow, RowFunction } from '@console/internal/components/factory';\nimport { DASH, dimensifyRow } from '@console/shared';\nimport { ValidationCell } from '../../../../../table/validation-cell';\nimport { AffinityRowData } from '../../types';\nimport { AFFINITY_CONDITION_LABELS, AFFINITY_TYPE_LABLES } from '../../../shared/consts';\n\ntype AffinityRowCustomData = {\n  isDisabled: boolean;\n  columnClasses: string[];\n  vmLikeEntity: VMLikeEntityKind;\n  onEdit: (affinity: AffinityRowData) => void;\n  onDelete: (affinity: AffinityRowData) => void;\n};\n\nconst menuActionDelete = (affinity: AffinityRowData, onDelete): KebabOption => ({\n  label: 'Delete',\n  callback: () => onDelete(affinity),\n});\n\nconst menuActionEdit = (affinity: AffinityRowData, onEdit): KebabOption => ({\n  label: 'Edit',\n  callback: () => onEdit(affinity),\n});\n\nconst getActions = (\n  affinity: AffinityRowData,\n  vmLikeEntity: VMLikeEntityKind,\n  onEdit,\n  onDelete,\n) => {\n  const actions = [];\n  if (isVMI(vmLikeEntity)) {\n    return actions;\n  }\n  actions.push(menuActionEdit(affinity, onEdit));\n  actions.push(menuActionDelete(affinity, onDelete));\n  return actions;\n};\n\nexport const AffinityRow: RowFunction<AffinityRowData, AffinityRowCustomData> = (props) => {\n  const {\n    obj,\n    customData: { isDisabled, columnClasses, vmLikeEntity, onEdit, onDelete },\n    index,\n    style,\n  } = props;\n  const { type, condition, weight, expressions, fields } = obj;\n  const dimensify = dimensifyRow(columnClasses);\n  const expressionsLabel = expressions?.length > 0 && pluralize(expressions.length, 'Expression');\n  const fieldsLabel = fields?.length > 0 && pluralize(fields.length, 'Node Field');\n\n  return (\n    <TableRow id=\"affinity-row\" index={index} trKey={condition} style={style}>\n      <TableData className={dimensify()}>\n        <ValidationCell>{AFFINITY_TYPE_LABLES[type]}</ValidationCell>\n      </TableData>\n      <TableData className={dimensify()}>\n        <ValidationCell>{AFFINITY_CONDITION_LABELS[condition]}</ValidationCell>\n      </TableData>\n      <TableData className={dimensify()}>\n        <ValidationCell>{weight || DASH}</ValidationCell>\n      </TableData>\n      <TableData className={dimensify()}>\n        <ValidationCell>\n          <div>{expressionsLabel}</div> <div>{fieldsLabel}</div>\n        </ValidationCell>\n      </TableData>\n      <TableData className={dimensify(true)}>\n        <Kebab\n          options={getActions(obj, vmLikeEntity, onEdit, onDelete)}\n          isDisabled={isDisabled || isVMI(vmLikeEntity)}\n        />\n      </TableData>\n    </TableRow>\n  );\n};\n","import * as React from 'react';\nimport { Table, RowFunction } from '@console/internal/components/factory';\nimport { dimensifyHeader } from '@console/shared';\nimport { sortable } from '@patternfly/react-table';\nimport { AffinityRowData } from '../../types';\n\nexport type AffinityTableProps = {\n  data?: AffinityRowData[];\n  customData?: object;\n  row: RowFunction;\n  columnClasses?: string[];\n};\n\nexport const AffinityTable: React.FC<AffinityTableProps> = ({\n  data,\n  customData,\n  row: Row,\n  columnClasses,\n}) => {\n  return (\n    <Table\n      aria-label=\"Affinity List\"\n      data={data}\n      Header={() =>\n        dimensifyHeader(\n          [\n            {\n              title: 'Type',\n              sortField: 'type',\n              transforms: [sortable],\n            },\n            {\n              title: 'Condition',\n              sortField: 'condition',\n              transforms: [sortable],\n            },\n            {\n              title: 'Weight',\n              sortField: 'weight',\n              transforms: [sortable],\n            },\n            {\n              title: 'Terms',\n            },\n            {\n              title: '',\n            },\n          ],\n          columnClasses,\n        )\n      }\n      Row={Row}\n      customData={{ ...customData, columnClasses }}\n      virtualize\n      loaded\n    />\n  );\n};\n","import * as React from 'react';\nimport { NodeModel } from '@console/internal/models';\nimport { createModalLauncher, ModalComponentProps } from '@console/internal/components/factory';\nimport { Firehose } from '@console/internal/components/utils';\nimport { getName, getNamespace } from '@console/shared';\nimport { getVMLikeModel } from '../../../../selectors/vm';\nimport { VMLikeEntityKind } from '../../../../types/vmLike';\nimport { AffinityModal } from './affinity-modal';\n\nconst FirehoseAffinityModal: React.FC<FirehoseAffinityModalProps> = (props) => {\n  const { vmLikeEntity, ...restProps } = props;\n\n  const resources = [\n    {\n      kind: getVMLikeModel(vmLikeEntity).kind,\n      name: getName(vmLikeEntity),\n      namespace: getNamespace(vmLikeEntity),\n      prop: 'vmLikeEntityLoading',\n    },\n    {\n      kind: NodeModel.kind,\n      isList: true,\n      namespaced: false,\n      prop: 'nodes',\n    },\n  ];\n\n  return (\n    <Firehose resources={resources}>\n      <AffinityModal vmLikeEntity={vmLikeEntity} {...restProps} />\n    </Firehose>\n  );\n};\n\ntype FirehoseAffinityModalProps = ModalComponentProps & {\n  vmLikeEntity: VMLikeEntityKind;\n};\n\nexport default createModalLauncher(FirehoseAffinityModal);\n","import * as _ from 'lodash';\nimport * as classNames from 'classnames';\nimport { Kebab } from '@console/internal/components/utils';\nimport {\n  getNodeAffinityRequiredTerms,\n  getNodeAffinityPreferredTerms,\n  getPodAffinityRequiredTerms,\n  getPodAffinityPreferredTerms,\n} from '../../../../selectors/affinity/selectors';\nimport {\n  Affinity,\n  NodeAffinity,\n  PodAffinity,\n  PodAffinityTerm,\n  NodeAffinityTerm,\n  PreferredNodeAffinityTerm,\n  PreferredPodAffinityTerm,\n  AffinityRowData,\n  AffinityLabel,\n} from './types';\nimport { AFFINITY_CONDITIONS } from '../shared/consts';\n\nexport const defaultNewAffinity = {\n  type: 'nodeAffinity',\n  condition: AFFINITY_CONDITIONS.required,\n  expressions: [{ id: 0, key: '', values: [], operator: 'In' }],\n  fields: [],\n  topologyKey: 'kubernetes.io/hostname',\n} as AffinityRowData;\n\nexport const columnClasses = [\n  classNames('col-lg-2'),\n  classNames('col-lg-2'),\n  classNames('col-lg-2'),\n  classNames('col-lg-2'),\n  Kebab.columnClass,\n];\n\nconst setIDsToEntity = (entity: any[]) => entity?.map((elm, i) => ({ ...elm, id: i }));\nconst flattenExpressions = (arr: AffinityLabel[]) =>\n  arr?.map((aff) => {\n    const affinityWithoutID = _.omit(aff, 'id');\n\n    return aff.operator === 'Exists' || aff.operator === 'DoesNotExist'\n      ? { ...affinityWithoutID, values: [] }\n      : affinityWithoutID;\n  });\n\nconst getNodeAffinityRows = (nodeAffinity: NodeAffinity): AffinityRowData[] => {\n  const requiredTerms = getNodeAffinityRequiredTerms(nodeAffinity) || [];\n  const preferredTerms = getNodeAffinityPreferredTerms(nodeAffinity) || [];\n\n  const required = requiredTerms.map(({ matchExpressions, matchFields }, i) => ({\n    id: `node-required-${i}`,\n    type: 'nodeAffinity',\n    condition: AFFINITY_CONDITIONS.required,\n    expressions: setIDsToEntity(matchExpressions),\n    fields: setIDsToEntity(matchFields),\n  }));\n\n  const preferred = preferredTerms.map(({ preference, weight }, i) => ({\n    id: `node-preferred-${i}`,\n    weight,\n    type: 'nodeAffinity',\n    condition: AFFINITY_CONDITIONS.preferred,\n    expressions: setIDsToEntity(preference.matchExpressions),\n    fields: setIDsToEntity(preference.matchFields),\n  }));\n\n  return [...required, ...preferred] as AffinityRowData[];\n};\n\nconst getPodLikeAffinityRows = (\n  podLikeAffinity: PodAffinity,\n  isAnti: boolean = false,\n): AffinityRowData[] => {\n  const requiredTerms = getPodAffinityRequiredTerms(podLikeAffinity) || [];\n  const preferredTerms = getPodAffinityPreferredTerms(podLikeAffinity) || [];\n\n  const required = requiredTerms?.map((podAffinityTerm, i) => ({\n    id: isAnti ? `pod-anti-required-${i}` : `pod-required-${i}`,\n    type: isAnti ? 'podAntiAffinity' : 'podAffinity',\n    condition: AFFINITY_CONDITIONS.required,\n    expressions: setIDsToEntity(podAffinityTerm?.labelSelector?.matchExpressions),\n    namespaces: podAffinityTerm?.namespaces,\n    topologyKey: podAffinityTerm?.topologyKey,\n  }));\n\n  const preferred = preferredTerms?.map(({ podAffinityTerm, weight }, i) => ({\n    id: isAnti ? `pod-anti-preferred-${i}` : `pod-preferred-${i}`,\n    type: isAnti ? 'podAntiAffinity' : 'podAffinity',\n    condition: AFFINITY_CONDITIONS.preferred,\n    weight,\n    expressions: setIDsToEntity(podAffinityTerm?.labelSelector?.matchExpressions),\n    namespaces: podAffinityTerm?.namespaces,\n    topologyKey: podAffinityTerm?.topologyKey,\n  }));\n\n  return [...required, ...preferred] as AffinityRowData[];\n};\n\nexport const getRowsDataFromAffinity = (affinity: Affinity): AffinityRowData[] => [\n  ...getNodeAffinityRows(affinity?.nodeAffinity),\n  ...getPodLikeAffinityRows(affinity?.podAffinity),\n  ...getPodLikeAffinityRows(affinity?.podAntiAffinity, true),\n];\n\nconst getRequiredNodeTermFromRowData = ({\n  expressions,\n  fields,\n}: AffinityRowData): NodeAffinityTerm => ({\n  matchExpressions: flattenExpressions(expressions),\n  matchFields: flattenExpressions(fields),\n});\n\nconst getPreferredNodeTermFromRowData = ({\n  weight,\n  expressions,\n  fields,\n}: AffinityRowData): PreferredNodeAffinityTerm => ({\n  weight,\n  preference: {\n    matchExpressions: flattenExpressions(expressions),\n    matchFields: flattenExpressions(fields),\n  },\n});\n\nconst getRequiredPodTermFromRowData = ({\n  expressions,\n  topologyKey,\n}: AffinityRowData): PodAffinityTerm => ({\n  labelSelector: {\n    matchExpressions: flattenExpressions(expressions),\n  },\n  topologyKey,\n});\n\nconst getPreferredPodTermFromRowData = ({\n  weight,\n  expressions,\n  topologyKey,\n}: AffinityRowData): PreferredPodAffinityTerm => ({\n  weight,\n  podAffinityTerm: {\n    labelSelector: {\n      matchExpressions: flattenExpressions(expressions),\n    },\n    topologyKey,\n  },\n});\n\nexport const getAffinityFromRowsData = (affinityRows: AffinityRowData[]) => {\n  if (affinityRows.length === 0) {\n    return null;\n  }\n\n  const pickRows = (rowType, rowCondition, mapper) =>\n    affinityRows\n      .filter(({ type, condition }) => type === rowType && condition === rowCondition)\n      .map((rowData) => mapper(rowData));\n\n  const affinity = {\n    nodeAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        nodeSelectorTerms: pickRows(\n          'nodeAffinity',\n          AFFINITY_CONDITIONS.required,\n          getRequiredNodeTermFromRowData,\n        ),\n      },\n      preferredDuringSchedulingIgnoredDuringExecution: pickRows(\n        'nodeAffinity',\n        AFFINITY_CONDITIONS.preferred,\n        getPreferredNodeTermFromRowData,\n      ),\n    },\n    podAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: pickRows(\n        'podAffinity',\n        AFFINITY_CONDITIONS.required,\n        getRequiredPodTermFromRowData,\n      ),\n      preferredDuringSchedulingIgnoredDuringExecution: pickRows(\n        'podAffinity',\n        AFFINITY_CONDITIONS.preferred,\n        getPreferredPodTermFromRowData,\n      ),\n    },\n    podAntiAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: pickRows(\n        'podAntiAffinity',\n        AFFINITY_CONDITIONS.required,\n        getRequiredPodTermFromRowData,\n      ),\n      preferredDuringSchedulingIgnoredDuringExecution: pickRows(\n        'podAntiAffinity',\n        AFFINITY_CONDITIONS.preferred,\n        getPreferredPodTermFromRowData,\n      ),\n    },\n  };\n\n  return affinity;\n};\n","import { AFFINITY_CONDITIONS } from '../shared/consts';\nimport { AffinityRowData, AffinityLabel } from './types';\n\nexport const isWeightValid = (focusedAffinity: AffinityRowData) =>\n  focusedAffinity.condition === AFFINITY_CONDITIONS.required ||\n  (focusedAffinity.weight > 0 && focusedAffinity.weight <= 100);\n\nexport const isTermsInvalid = (terms: AffinityLabel[]) =>\n  terms.some(\n    ({ key, values, operator }) =>\n      !key || ((operator === 'In' || operator === 'NotIn') && values.length === 0),\n  );\n\nexport const getTopologyKeyValidation = ({ type, condition, topologyKey }: AffinityRowData) => {\n  const topology = {\n    isTopologyDisabled: false,\n    isTopologyInvalid: false,\n    topologyValidationMessage: '',\n  };\n\n  if (condition === AFFINITY_CONDITIONS.required) {\n    if (type === 'podAffinity') {\n      topology.topologyValidationMessage = 'Topology key must not be empty';\n      topology.isTopologyInvalid = !topologyKey;\n    } else {\n      topology.isTopologyDisabled = true;\n      topology.topologyValidationMessage = 'topologyKey is limited with current config';\n    }\n  } else if (type === 'podAntiAffinity') {\n    topology.topologyValidationMessage = 'Empty topologyKey is interpreted as “all topologies”';\n  }\n  return topology;\n};\n","import * as React from 'react';\nimport { NodeModel } from '@console/internal/models';\nimport { createModalLauncher, ModalComponentProps } from '@console/internal/components/factory';\nimport { Firehose } from '@console/internal/components/utils';\nimport { getName, getNamespace } from '@console/shared';\nimport { getVMLikeModel } from '../../../../selectors/vm';\nimport { VMLikeEntityKind } from '../../../../types/vmLike';\nimport { DedicatedResourcesModal } from './dedicated-resources-modal';\n\nconst FirehoseDedicatedResourcesModal: React.FC<FirehoseDedicatedResourcesModalProps> = (props) => {\n  const { vmLikeEntity, ...restProps } = props;\n\n  const resources = [\n    {\n      kind: getVMLikeModel(vmLikeEntity).kind,\n      name: getName(vmLikeEntity),\n      namespace: getNamespace(vmLikeEntity),\n      prop: 'vmLikeEntityLoading',\n    },\n    {\n      kind: NodeModel.kind,\n      isList: true,\n      namespaced: false,\n      prop: 'nodes',\n    },\n  ];\n\n  return (\n    <Firehose resources={resources}>\n      <DedicatedResourcesModal vmLikeEntity={vmLikeEntity} {...restProps} />\n    </Firehose>\n  );\n};\n\ntype FirehoseDedicatedResourcesModalProps = ModalComponentProps & {\n  vmLikeEntity: VMLikeEntityKind;\n};\n\nexport default createModalLauncher(FirehoseDedicatedResourcesModal);\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { Button, ButtonVariant, Checkbox, Text, TextVariants } from '@patternfly/react-core';\nimport { ModalTitle, ModalBody, ModalComponentProps } from '@console/internal/components/factory';\nimport { NodeModel } from '@console/internal/models';\nimport {\n  withHandlePromise,\n  HandlePromiseProps,\n  FirehoseResult,\n  Label,\n} from '@console/internal/components/utils';\nimport { k8sPatch, NodeKind } from '@console/internal/module/k8s';\nimport { VMLikeEntityKind } from '../../../../types/vmLike';\nimport { getVMLikeModel, isDedicatedCPUPlacement, asVM } from '../../../../selectors/vm';\nimport { getDedicatedCpuPatch } from '../../../../k8s/patches/vm/vm-cpu-patches';\nimport { getLoadedData, isLoaded, getLoadError } from '../../../../utils';\nimport { useCollisionChecker } from '../../../../hooks/use-collision-checker';\nimport { useNodeQualifier } from '../shared/hooks';\nimport { ModalFooter } from '../../modal/modal-footer';\nimport { NodeChecker } from '../shared/NodeChecker/node-checker';\nimport { DEDICATED_RESOURCES_MODAL_TITLE, DEDICATED_RESOURCES_LABELS } from '../shared/consts';\nimport './dedicated-resources-modal.scss';\n\nexport const DedicatedResourcesModal = withHandlePromise<DedicatedResourcesModalProps>(\n  ({\n    vmLikeEntity,\n    vmLikeEntityLoading,\n    nodes,\n    close,\n    handlePromise,\n    inProgress,\n    errorMessage,\n  }) => {\n    const vmLikeFinal = getLoadedData(vmLikeEntityLoading, vmLikeEntity);\n    const loadError = getLoadError(nodes, NodeModel);\n    const isCurrentCPUPinned = isDedicatedCPUPlacement(asVM(vmLikeFinal));\n\n    const qualifiedNodes = useNodeQualifier(nodes, 'label', DEDICATED_RESOURCES_LABELS);\n\n    const [showCollisionAlert, reload] = useCollisionChecker<VMLikeEntityKind>(\n      vmLikeFinal,\n      (oldVM: VMLikeEntityKind, newVM: VMLikeEntityKind) =>\n        isDedicatedCPUPlacement(asVM(oldVM)) === isDedicatedCPUPlacement(asVM(newVM)),\n    );\n\n    const [isPinned, setIsPinned] = React.useState<boolean>(isCurrentCPUPinned);\n\n    const onReload = () => {\n      reload();\n      setIsPinned(isCurrentCPUPinned);\n    };\n\n    const onSubmit = async () => {\n      if (isPinned !== isCurrentCPUPinned) {\n        // eslint-disable-next-line promise/catch-or-return\n        handlePromise(\n          k8sPatch(\n            getVMLikeModel(vmLikeFinal),\n            vmLikeFinal,\n            await getDedicatedCpuPatch(vmLikeFinal, isPinned),\n          ),\n        ).then(close);\n      } else {\n        close();\n      }\n    };\n\n    return (\n      <div className=\"modal-content\">\n        <ModalTitle>{DEDICATED_RESOURCES_MODAL_TITLE}</ModalTitle>\n        <ModalBody>\n          <Checkbox\n            className=\"kubevirt-dedicated-resources__checkbox\"\n            label=\"Schedule this workload with dedicated resources (guaranteed policy)\"\n            isChecked={isPinned}\n            isDisabled={!isLoaded(nodes) || inProgress}\n            onChange={(flag) => setIsPinned(flag)}\n            id=\"dedicated-resources-checkbox\"\n          />\n          <Text\n            className=\"kubevirt-dedicated-resources__helper-text\"\n            component={TextVariants.small}\n          >\n            Available only on Nodes with labels{' '}\n            <Label kind={NodeModel.kind} name=\"cpumanager\" value=\"true\" expand />\n          </Text>\n          <NodeChecker qualifiedNodes={qualifiedNodes} />\n        </ModalBody>\n        <ModalFooter\n          id=\"dedicated-resources\"\n          className=\"kubevirt-dedicated-resources__footer\"\n          errorMessage={errorMessage}\n          inProgress={!isLoaded(nodes) || inProgress}\n          isSimpleError={!!loadError}\n          onSubmit={onSubmit}\n          onCancel={close}\n          submitButtonText=\"Save\"\n          infoTitle={showCollisionAlert && 'Policy has been updated outside this flow.'}\n          infoMessage={\n            <>\n              Saving these changes will override any policy previously saved.\n              <br />\n              <Button variant={ButtonVariant.link} isInline onClick={onReload}>\n                Reload Policy\n              </Button>\n              .\n            </>\n          }\n        />\n      </div>\n    );\n  },\n);\n\ntype DedicatedResourcesModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    vmLikeEntity: VMLikeEntityKind;\n    nodes?: FirehoseResult<NodeKind[]>;\n    vmLikeEntityLoading?: FirehoseResult<VMLikeEntityKind>;\n  };\n","import * as React from 'react';\nimport { NodeModel } from '@console/internal/models';\nimport { createModalLauncher, ModalComponentProps } from '@console/internal/components/factory';\nimport { Firehose } from '@console/internal/components/utils';\nimport { getName, getNamespace } from '@console/shared';\nimport { getVMLikeModel } from '../../../../selectors/vm';\nimport { VMLikeEntityKind } from '../../../../types/vmLike';\nimport { NSModal } from './node-selector-modal';\n\nconst NodeSelectorModal: React.FC<NodeSelectorModalProps> = (props) => {\n  const { vmLikeEntity, ...restProps } = props;\n\n  const resources = [\n    {\n      kind: getVMLikeModel(vmLikeEntity).kind,\n      name: getName(vmLikeEntity),\n      namespace: getNamespace(vmLikeEntity),\n      prop: 'vmLikeEntityLoading',\n    },\n    {\n      kind: NodeModel.kind,\n      isList: true,\n      namespaced: false,\n      prop: 'nodes',\n    },\n  ];\n\n  return (\n    <Firehose resources={resources}>\n      <NSModal vmLikeEntity={vmLikeEntity} {...restProps} />\n    </Firehose>\n  );\n};\n\ntype NodeSelectorModalProps = ModalComponentProps & {\n  vmLikeEntity: VMLikeEntityKind;\n};\n\nexport default createModalLauncher(NodeSelectorModal);\n","import { NodeSelector } from '../../../../types';\nimport { IDLabel } from '../../../LabelsList/types';\n\nexport const nodeSelectorToIDLabels = (nodeSelector: NodeSelector): IDLabel[] =>\n  Object.entries(nodeSelector || {}).map(([key, value], id) => ({ id, key, value }));\n","import * as React from 'react';\nimport { GridItem, Text, TextVariants } from '@patternfly/react-core';\nimport { LABEL_VALUE, LABEL_KEY } from '../../../LabelsList/consts';\n\nexport const NodeSelectorHeader = () => {\n  return (\n    <>\n      <GridItem span={6}>\n        <Text component={TextVariants.h4}>{LABEL_KEY}</Text>\n      </GridItem>\n      <GridItem span={6}>\n        <Text component={TextVariants.h4}>{LABEL_VALUE}</Text>\n      </GridItem>\n    </>\n  );\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { ModalTitle, ModalBody, ModalComponentProps } from '@console/internal/components/factory';\nimport { Button, ButtonVariant } from '@patternfly/react-core';\nimport {\n  FirehoseResult,\n  withHandlePromise,\n  HandlePromiseProps,\n} from '@console/internal/components/utils';\nimport { k8sPatch, NodeKind } from '@console/internal/module/k8s';\nimport { NodeModel } from '@console/internal/models';\nimport { isLoaded, getLoadedData, getLoadError } from '../../../../utils';\nimport { ModalFooter } from '../../modal/modal-footer';\nimport { VMLikeEntityKind } from '../../../../types/vmLike';\nimport { getVMLikeModel } from '../../../../selectors/vm';\nimport { getVMLikeNodeSelector } from '../../../../selectors/vm-like/selectors';\nimport { getNodeSelectorPatches } from '../../../../k8s/patches/vm/vm-scheduling-patches';\nimport { NodeChecker } from '../shared/NodeChecker/node-checker';\nimport { useNodeQualifier } from '../shared/hooks';\nimport { LabelsList } from '../../../LabelsList/labels-list';\nimport { LabelRow } from '../../../LabelsList/LabelRow/label-row';\nimport { NODE_SELECTOR_MODAL_TITLE } from '../shared/consts';\nimport { nodeSelectorToIDLabels } from './helpers';\nimport { useIDEntities } from '../../../../hooks/use-id-entities';\nimport { IDLabel } from '../../../LabelsList/types';\nimport { useCollisionChecker } from '../../../../hooks/use-collision-checker';\nimport { NodeSelectorHeader } from './node-selector-header';\n\nexport const NSModal = withHandlePromise(\n  ({\n    nodes,\n    close,\n    handlePromise,\n    inProgress,\n    errorMessage,\n    vmLikeEntity,\n    vmLikeEntityLoading,\n  }: NSModalProps) => {\n    const vmLikeFinal = getLoadedData(vmLikeEntityLoading, vmLikeEntity);\n    const loadError = getLoadError(nodes, NodeModel);\n\n    const [\n      selectorLabels,\n      setSelectorLabels,\n      onLabelAdd,\n      onLabelChange,\n      onLabelDelete,\n    ] = useIDEntities<IDLabel>(nodeSelectorToIDLabels(getVMLikeNodeSelector(vmLikeEntity)));\n\n    const qualifiedNodes = useNodeQualifier(nodes, 'label', selectorLabels);\n    const [showCollisionAlert, reload] = useCollisionChecker<VMLikeEntityKind>(\n      vmLikeFinal,\n      (oldVM: VMLikeEntityKind, newVM: VMLikeEntityKind) =>\n        _.isEqual(getVMLikeNodeSelector(oldVM), getVMLikeNodeSelector(newVM)),\n    );\n\n    const onSelectorLabelAdd = () => onLabelAdd({ id: null, key: '', value: '' } as IDLabel);\n\n    const onReload = () => {\n      reload();\n      setSelectorLabels(nodeSelectorToIDLabels(getVMLikeNodeSelector(vmLikeFinal)));\n    };\n\n    const onSubmit = async () => {\n      const k8sSelector = selectorLabels.reduce((acc, { key, value }) => {\n        acc[key] = value;\n        return acc;\n      }, {});\n\n      if (!_.isEqual(getVMLikeNodeSelector(vmLikeFinal), k8sSelector)) {\n        // eslint-disable-next-line promise/catch-or-return\n        handlePromise(\n          k8sPatch(\n            getVMLikeModel(vmLikeFinal),\n            vmLikeFinal,\n            await getNodeSelectorPatches(vmLikeFinal, k8sSelector),\n          ),\n        ).then(close);\n      } else {\n        close();\n      }\n    };\n\n    return (\n      <div className=\"modal-content\">\n        <ModalTitle>{NODE_SELECTOR_MODAL_TITLE}</ModalTitle>\n        <ModalBody>\n          <LabelsList\n            isEmpty={selectorLabels.length === 0}\n            kind=\"Node\"\n            onLabelAdd={onSelectorLabelAdd}\n          >\n            {selectorLabels.length > 0 && (\n              <>\n                <NodeSelectorHeader key=\"label-title-row\" />\n                {selectorLabels.map((label) => (\n                  <LabelRow\n                    key={label.id}\n                    label={label}\n                    onChange={onLabelChange}\n                    onDelete={onLabelDelete}\n                  />\n                ))}\n              </>\n            )}\n          </LabelsList>\n          <NodeChecker qualifiedNodes={qualifiedNodes} />\n        </ModalBody>\n        <ModalFooter\n          id=\"node-selector\"\n          errorMessage={errorMessage}\n          inProgress={!isLoaded(nodes) || inProgress}\n          isSimpleError={!!loadError}\n          onSubmit={onSubmit}\n          onCancel={close}\n          submitButtonText=\"Save\"\n          infoTitle={showCollisionAlert && 'Node Selector has been updated outside this flow.'}\n          infoMessage={\n            <>\n              Saving these changes will override any Node Selector previously saved.\n              <br />\n              <Button variant={ButtonVariant.link} isInline onClick={onReload}>\n                Reload Node Selector\n              </Button>\n              .\n            </>\n          }\n        />\n      </div>\n    );\n  },\n);\n\ntype NSModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    vmLikeEntity: VMLikeEntityKind;\n    nodes?: FirehoseResult<NodeKind[]>;\n    inProgress: boolean;\n    vmLikeEntityLoading?: FirehoseResult<VMLikeEntityKind>;\n    errorMessage: string;\n  };\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport {\n  Alert,\n  Popover,\n  PopoverPosition,\n  Text,\n  TextVariants,\n  Button,\n} from '@patternfly/react-core';\nimport {\n  ResourceLink,\n  ExternalLink,\n  resourcePath,\n  pluralize,\n} from '@console/internal/components/utils';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { getName } from '@console/shared';\nimport {\n  SCHEDULING_NODES_MATCH_TEXT,\n  SCHEDULING_NO_NODES_MATCH_TEXT,\n  SCHEDULING_NODES_MATCH_BUTTON_TEXT,\n  SCHEDULING_NO_NODES_MATCH_BUTTON_TEXT,\n} from '../consts';\nimport './node-checker.scss';\n\nexport const NodeChecker: React.FC<NodeCheckerProps> = ({\n  qualifiedNodes,\n  wariningTitle,\n  warningMessage,\n}) => {\n  const size = qualifiedNodes.length;\n  const buttonText = pluralize(size, 'Node');\n  return (\n    <Alert\n      className=\"kv-node-checker\"\n      variant={size > 0 ? 'success' : 'warning'}\n      isInline\n      title={\n        size > 0\n          ? SCHEDULING_NODES_MATCH_TEXT(size)\n          : wariningTitle || SCHEDULING_NO_NODES_MATCH_TEXT\n      }\n    >\n      <Popover\n        headerContent={<div>{buttonText} found</div>}\n        position={PopoverPosition.right}\n        className=\"kv-node-checker__popover\"\n        bodyContent={qualifiedNodes.map((node) => (\n          <ExternalLink\n            key={getName(node)}\n            href={resourcePath('Node', getName(node))}\n            text={<ResourceLink linkTo={false} kind=\"Node\" name={getName(node)} />}\n          />\n        ))}\n      >\n        <Button isInline isDisabled={size === 0} variant=\"link\">\n          <Text component={TextVariants.h4}>\n            {size > 0\n              ? SCHEDULING_NODES_MATCH_BUTTON_TEXT(size)\n              : warningMessage || SCHEDULING_NO_NODES_MATCH_BUTTON_TEXT}\n          </Text>\n        </Button>\n      </Popover>\n    </Alert>\n  );\n};\n\ntype NodeCheckerProps = {\n  qualifiedNodes: NodeKind[];\n  wariningTitle?: string;\n  warningMessage?: string;\n};\n","import { pluralize } from '@console/internal/components/utils';\nimport { AffinityRowData } from '../affinity-modal/types';\n\n// Node Checker\nconst pluralNode = (size) => pluralize(size, 'node', 'nodes', false);\nexport const SCHEDULING_NODES_MATCH_TEXT = (nodeAmount) =>\n  `${nodeAmount} matching ${pluralNode(nodeAmount)} found`;\nexport const SCHEDULING_NODES_MATCH_BUTTON_TEXT = (nodeAmount) =>\n  `View ${nodeAmount} matching ${pluralNode(nodeAmount)}`;\nexport const SCHEDULING_NO_NODES_MATCH_BUTTON_TEXT =\n  'Scheduling will not be possible at this state';\nexport const SCHEDULING_NO_NODES_TAINTED_MATCH_BUTTON_TEXT =\n  'No new nodes will be added to scheduler';\nexport const SCHEDULING_NO_NODES_MATCH_TEXT = 'No matching nodes found for the labels';\nexport const SCHEDULING_NO_NODES_TAINTED_MATCH_TEXT = 'No matching tainted nodes found';\n\n// Node Selector\nexport const NODE_SELECTOR_MODAL_TITLE = 'Node Selector';\n\n// Dedicated Resources\nexport const DEDICATED_RESOURCES_LABELS = [{ id: null, key: 'cpumanager', value: 'true' }];\nexport const DEDICATED_RESOURCES_MODAL_TITLE = 'Dedicated Resources';\nexport const DEDICATED_RESOURCES_NOT_PINNED = 'No Dedicated resources applied';\nexport const DEDICATED_RESOURCES_PINNED =\n  'Workload scheduled with dedicated resources (guaranteed policy)';\n\n// Tolerations Modal\nexport const TOLERATIONS_MODAL_TITLE = 'Tolerations';\nexport const TOLERATIONS_EFFECTS = ['NoSchedule', 'PreferNoSchedule', 'NoExecute'];\n\n// Affinity Modal\nexport const AFFINITY_MODAL_TITLE = 'Affinity Rules';\nexport const AFFINITY_CREATE = 'New Affinity';\nexport const AFFINITY_EDITING = 'Edit Affinity';\n\nexport const AFFINITY_CONDITION_LABELS = {\n  preferredDuringSchedulingIgnoredDuringExecution: 'Preferred during scheduling',\n  requiredDuringSchedulingIgnoredDuringExecution: 'Required during scheduling',\n};\n\nexport const AFFINITY_CONDITIONS = {\n  preferred: 'preferredDuringSchedulingIgnoredDuringExecution' as AffinityRowData['condition'],\n  required: 'requiredDuringSchedulingIgnoredDuringExecution' as AffinityRowData['condition'],\n};\n\nexport const AFFINITY_TYPE_LABLES = {\n  nodeAffinity: 'Node Affinity',\n  podAffinity: 'Workload (pod) Affinity',\n  podAntiAffinity: 'Workload (pod) Anti-Affinity',\n};\n\nexport const EXPRESSION_OPERATORS = ['In', 'NotIn', 'Exists', 'DoesNotExist'];\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { FirehoseResult } from '@console/internal/components/utils';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { getLabels, getNodeTaints } from '@console/shared';\nimport { getLoadedData, isLoaded } from '../../../../utils';\nimport { IDLabel } from '../../../LabelsList/types';\n\nconst withOperatorPredicate = <T extends IDLabel = IDLabel>(store: any, label: T) => {\n  const { key, value, values, operator } = label;\n  const hasMultiple = !!values;\n\n  switch (operator) {\n    case 'Exists':\n      return _.has(store, key);\n    case 'DoesNotExist':\n      return !_.has(store, key);\n    case 'In':\n      return !hasMultiple\n        ? _.get(store, key) === value\n        : values.some((singleValue) => _.get(store, key) === singleValue);\n    case 'NotIn':\n      return !hasMultiple\n        ? _.get(store, key) === value\n        : values.every((singleValue) => _.get(store, key) !== singleValue);\n    default:\n      return value ? _.get(store, key) === value : _.has(store, key);\n  }\n};\n\nexport const useNodeQualifier = <T extends IDLabel = IDLabel>(\n  nodes: FirehoseResult<NodeKind[]>,\n  constraintType: NodeQualifierPropertyType,\n  constraints: T[],\n): NodeKind[] => {\n  const loadedNodes = getLoadedData(nodes, []);\n  const isNodesLoaded = isLoaded(nodes);\n\n  const [qualifiedNodes, setQualifiedNodes] = React.useState([]);\n\n  React.useEffect(() => {\n    const filteredConstraints = constraints.filter(({ key }) => !!key);\n    if (!_.isEmpty(filteredConstraints) && isNodesLoaded) {\n      const filteredNodes = [];\n      loadedNodes.forEach((node) => {\n        if (constraintType === 'label') {\n          const nodeLabels = getLabels(node);\n          if (\n            nodeLabels &&\n            filteredConstraints.every((label) => withOperatorPredicate<T>(nodeLabels, label))\n          ) {\n            filteredNodes.push(node);\n          }\n        }\n        if (\n          constraintType === 'field' &&\n          filteredConstraints.every((field) => withOperatorPredicate<T>(node, field))\n        ) {\n          filteredNodes.push(node);\n        }\n\n        if (constraintType === 'taint') {\n          const nodeTaints = getNodeTaints(node);\n          if (\n            nodeTaints &&\n            filteredConstraints.every(({ key, value, effect }) =>\n              nodeTaints.some(\n                (taint) =>\n                  taint.key === key && (!value || taint.value === value) && taint.effect === effect,\n              ),\n            )\n          ) {\n            filteredNodes.push(node);\n          }\n        }\n      });\n      setQualifiedNodes(filteredNodes);\n    }\n  }, [constraintType, constraints, loadedNodes, isNodesLoaded]);\n\n  return qualifiedNodes;\n};\n\nexport type NodeQualifierPropertyType = 'label' | 'taint' | 'field';\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { NodeModel } from '@console/internal/models';\nimport { createModalLauncher, ModalComponentProps } from '@console/internal/components/factory';\nimport { Firehose } from '@console/internal/components/utils';\nimport { getName, getNamespace } from '@console/shared';\nimport { getVMLikeModel } from '../../../../selectors/vm';\nimport { VMLikeEntityKind } from '../../../../types/vmLike';\nimport { TModal } from './tolerations-modal';\n\nconst TolerationsModal: React.FC<TolerationsModalProps> = (props) => {\n  const { vmLikeEntity, ...restProps } = props;\n\n  const resources = [\n    {\n      kind: getVMLikeModel(vmLikeEntity).kind,\n      name: getName(vmLikeEntity),\n      namespace: getNamespace(vmLikeEntity),\n      prop: 'vmLikeEntityLoading',\n    },\n    {\n      kind: NodeModel.kind,\n      isList: true,\n      namespaced: false,\n      prop: 'nodes',\n    },\n  ];\n\n  return (\n    <Firehose resources={resources}>\n      <TModal vmLikeEntity={vmLikeEntity} {...restProps} />\n    </Firehose>\n  );\n};\n\ntype TolerationsModalProps = ModalComponentProps & {\n  vmLikeEntity: VMLikeEntityKind;\n};\n\nexport default createModalLauncher(TolerationsModal);\n","import * as React from 'react';\nimport { GridItem, Text, TextVariants } from '@patternfly/react-core';\nimport { LABEL_VALUE, LABEL_TAINT_KEY } from '../../../LabelsList/consts';\n\nexport const TolerationHeader = () => {\n  return (\n    <>\n      <GridItem span={4}>\n        <Text component={TextVariants.h4}>{LABEL_TAINT_KEY}</Text>\n      </GridItem>\n      <GridItem span={4}>\n        <Text component={TextVariants.h4}>{LABEL_VALUE}</Text>\n      </GridItem>\n      <GridItem span={4}>\n        <Text component={TextVariants.h4}>Effect</Text>\n      </GridItem>\n    </>\n  );\n};\n","import * as React from 'react';\nimport { TaintEffect } from '@console/internal/module/k8s';\nimport { MinusCircleIcon } from '@patternfly/react-icons';\nimport { GridItem, TextInput, Button, FormSelect, FormSelectOption } from '@patternfly/react-core';\nimport { TOLERATIONS_EFFECTS } from '../shared/consts';\nimport { TolerationLabel } from './types';\n\nexport const TolerationRow = ({ label, onChange, onDelete }: TolerationRowProps) => {\n  const { id, key, value, effect } = label;\n  return (\n    <>\n      <GridItem span={4}>\n        <TextInput\n          id={`toleration-${id}-key-input`}\n          className=\"kv-label__key\"\n          placeholder=\"taint key\"\n          isRequired\n          type=\"text\"\n          value={key}\n          onChange={(newKey) => onChange({ ...label, key: newKey })}\n          aria-label=\"selector key\"\n        />\n      </GridItem>\n      <GridItem span={4}>\n        <TextInput\n          id={`toleration-${id}-value-input`}\n          className=\"kv-label__value\"\n          placeholder=\"taint value\"\n          isRequired\n          type=\"text\"\n          value={value}\n          onChange={(newValue) => onChange({ ...label, value: newValue })}\n          aria-label=\"selector value\"\n        />\n      </GridItem>\n      <GridItem span={3}>\n        <FormSelect\n          id={`toleration-${id}-effect-select`}\n          className=\"kv-label__effect\"\n          isRequired\n          value={effect}\n          onChange={(v) => onChange({ ...label, effect: v as TaintEffect })}\n          aria-label=\"selector effect\"\n        >\n          {TOLERATIONS_EFFECTS.map((effectOption) => (\n            <FormSelectOption key={effectOption} value={effectOption} label={effectOption} />\n          ))}\n        </FormSelect>\n      </GridItem>\n      <GridItem span={1}>\n        <Button id={`toleration-${id}-delete-btn`} onClick={() => onDelete(id)} variant=\"plain\">\n          <MinusCircleIcon />\n        </Button>\n      </GridItem>\n    </>\n  );\n};\n\ntype TolerationRowProps = {\n  label: TolerationLabel;\n  onChange: (label: TolerationLabel) => void;\n  onDelete: (id: any) => void;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { ModalTitle, ModalBody, ModalComponentProps } from '@console/internal/components/factory';\nimport { Button, ButtonVariant, Text, TextVariants } from '@patternfly/react-core';\nimport {\n  FirehoseResult,\n  withHandlePromise,\n  HandlePromiseProps,\n  ExternalLink,\n} from '@console/internal/components/utils';\nimport { k8sPatch, NodeKind } from '@console/internal/module/k8s';\nimport { NodeModel } from '@console/internal/models';\nimport { isLoaded, getLoadedData, getLoadError } from '../../../../utils';\nimport { ModalFooter } from '../../modal/modal-footer';\nimport { VMLikeEntityKind } from '../../../../types/vmLike';\nimport { getVMLikeTolerations } from '../../../../selectors/vm-like/selectors';\nimport { getVMLikeModel } from '../../../../selectors/vm';\nimport { NodeChecker } from '../shared/NodeChecker/node-checker';\nimport { useNodeQualifier } from '../shared/hooks';\nimport { getTolerationsPatch } from '../../../../k8s/patches/vm/vm-scheduling-patches';\nimport { LabelsList } from '../../../LabelsList/labels-list';\nimport {\n  TOLERATIONS_MODAL_TITLE,\n  TOLERATIONS_EFFECTS,\n  SCHEDULING_NO_NODES_TAINTED_MATCH_TEXT,\n  SCHEDULING_NO_NODES_TAINTED_MATCH_BUTTON_TEXT,\n} from '../shared/consts';\nimport { useIDEntities } from '../../../../hooks/use-id-entities';\nimport { useCollisionChecker } from '../../../../hooks/use-collision-checker';\n\nimport { TolerationRow } from './toleration-row';\nimport { TolerationHeader } from './toleration-header';\nimport { TolerationLabel } from './types';\n\nimport '../shared/scheduling-modals.scss';\n\nexport const TModal = withHandlePromise(\n  ({\n    nodes,\n    close,\n    handlePromise,\n    inProgress,\n    errorMessage,\n    vmLikeEntity,\n    vmLikeEntityLoading,\n  }: TModalProps) => {\n    const vmLikeFinal = getLoadedData(vmLikeEntityLoading, vmLikeEntity);\n    const loadError = getLoadError(nodes, NodeModel);\n\n    const [\n      tolerationsLabels,\n      setTolerationsLabels,\n      onLabelAdd,\n      onLabelChange,\n      onLabelDelete,\n    ] = useIDEntities<TolerationLabel>(\n      getVMLikeTolerations(vmLikeEntity)?.map((toleration, id) => ({ ...toleration, id })),\n    );\n\n    const qualifiedNodes = useNodeQualifier(nodes, 'taint', tolerationsLabels);\n\n    const [showCollisionAlert, reload] = useCollisionChecker<VMLikeEntityKind>(\n      vmLikeFinal,\n      (oldVM: VMLikeEntityKind, newVM: VMLikeEntityKind) =>\n        _.isEqual(getVMLikeTolerations(oldVM), getVMLikeTolerations(newVM)),\n    );\n\n    const onTolerationAdd = () =>\n      onLabelAdd({\n        id: null,\n        key: '',\n        value: '',\n        effect: TOLERATIONS_EFFECTS[0],\n      } as TolerationLabel);\n\n    const onReload = () => {\n      reload();\n      setTolerationsLabels(\n        getVMLikeTolerations(vmLikeFinal)?.map((toleration, id) => ({\n          ...toleration,\n          id,\n        })) || [],\n      );\n    };\n\n    const onSubmit = async () => {\n      const k8sTolerations = tolerationsLabels.filter(({ key }) => !!key);\n\n      if (!_.isEqual(getVMLikeTolerations(vmLikeFinal), k8sTolerations)) {\n        // eslint-disable-next-line promise/catch-or-return\n        handlePromise(\n          k8sPatch(\n            getVMLikeModel(vmLikeFinal),\n            vmLikeFinal,\n            await getTolerationsPatch(vmLikeFinal, k8sTolerations),\n          ),\n        ).then(close);\n      } else {\n        close();\n      }\n    };\n\n    return (\n      <div className=\"modal-content\">\n        <ModalTitle>{TOLERATIONS_MODAL_TITLE}</ModalTitle>\n        <ModalBody>\n          <div className=\"scheduling-modals__desc-container\">\n            <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n              {\n                'Tolerations are applied to VMs, and allow (but do not require) the VMs to schedule onto nodes with matching taints.'\n              }\n            </Text>\n            <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n              {'Add tolerations to allow a VM to schedule onto nodes with matching taints.'}\n            </Text>\n            <ExternalLink\n              text=\"Taints and Tolerations documentation\"\n              href={\n                'https://kubevirt.io/user-guide/#/usage/node-placement?id=taints-and-tolerations'\n              }\n            />\n          </div>\n          <LabelsList\n            isEmpty={tolerationsLabels.length === 0}\n            kind=\"Node\"\n            onLabelAdd={onTolerationAdd}\n            addRowText=\"Add Toleration\"\n            emptyStateAddRowText=\"Add Toleration to specify qualifying nodes\"\n          >\n            {tolerationsLabels.length > 0 && (\n              <>\n                <TolerationHeader key=\"label-title-row\" />\n                {tolerationsLabels.map((label) => (\n                  <TolerationRow\n                    key={label.id}\n                    label={label}\n                    onChange={onLabelChange}\n                    onDelete={onLabelDelete}\n                  />\n                ))}\n              </>\n            )}\n          </LabelsList>\n          {tolerationsLabels.length > 0 && isLoaded(nodes) && !inProgress && !loadError && (\n            <NodeChecker\n              qualifiedNodes={qualifiedNodes}\n              wariningTitle={SCHEDULING_NO_NODES_TAINTED_MATCH_TEXT}\n              warningMessage={SCHEDULING_NO_NODES_TAINTED_MATCH_BUTTON_TEXT}\n            />\n          )}\n        </ModalBody>\n        <ModalFooter\n          id=\"tolerations\"\n          errorMessage={errorMessage}\n          inProgress={!isLoaded(nodes) || inProgress}\n          isSimpleError={!!loadError}\n          onSubmit={onSubmit}\n          onCancel={close}\n          submitButtonText=\"Save\"\n          infoTitle={showCollisionAlert && 'Tolerations has been updated outside this flow.'}\n          infoMessage={\n            <>\n              Saving these changes will override any Tolerations previously saved.\n              <br />\n              <Button variant={ButtonVariant.link} isInline onClick={onReload}>\n                Reload Tolerations\n              </Button>\n              .\n            </>\n          }\n        />\n      </div>\n    );\n  },\n);\n\ntype TModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    vmLikeEntity: VMLikeEntityKind;\n    nodes?: FirehoseResult<NodeKind[]>;\n    inProgress: boolean;\n    vmLikeEntityLoading?: FirehoseResult<VMLikeEntityKind>;\n    errorMessage: string;\n  };\n","// extracted by mini-css-extract-plugin","export * from './vm-description-modal';\n","import * as React from 'react';\nimport { TextArea } from '@patternfly/react-core';\nimport { HandlePromiseProps, withHandlePromise } from '@console/internal/components/utils';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n  ModalComponentProps,\n} from '@console/internal/components/factory';\nimport { k8sPatch } from '@console/internal/module/k8s';\nimport { getDescription } from '../../../selectors/selectors';\nimport { VMGenericLikeEntityKind } from '../../../types/vmLike';\nimport { getVMLikeModel } from '../../../selectors/vm';\nimport { getUpdateDescriptionPatches } from '../../../k8s/patches/vm/vm-patches';\n\n// TODO: should be moved under kubevirt-plugin/src/style.scss\nimport './_vm-description-modal.scss';\n\nexport const VMDescriptionModal = withHandlePromise((props: VMDescriptionModalProps) => {\n  const { vmLikeEntity, inProgress, errorMessage, handlePromise, close, cancel } = props;\n\n  const [description, setDescription] = React.useState(getDescription(vmLikeEntity));\n\n  const submit = (e) => {\n    e.preventDefault();\n\n    const patches = getUpdateDescriptionPatches(vmLikeEntity, description);\n    if (patches.length === 0) {\n      close();\n    } else {\n      const promise = k8sPatch(getVMLikeModel(vmLikeEntity), vmLikeEntity, patches);\n      handlePromise(promise).then(close); // eslint-disable-line promise/catch-or-return\n    }\n  };\n\n  return (\n    <form onSubmit={submit} className=\"modal-content\">\n      <ModalTitle>Edit Description</ModalTitle>\n      <ModalBody>\n        <TextArea\n          className=\"kubevirt-vm-description-modal__description\"\n          value={description}\n          onChange={(d) => setDescription(d)}\n          aria-label=\"description text area\"\n        />\n      </ModalBody>\n      <ModalSubmitFooter\n        errorMessage={errorMessage}\n        inProgress={inProgress}\n        submitText=\"Save\"\n        cancel={cancel}\n      />\n    </form>\n  );\n});\n\nexport type VMDescriptionModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    vmLikeEntity: VMGenericLikeEntityKind;\n  };\n\nexport const vmDescriptionModal = createModalLauncher(VMDescriptionModal);\n","export * from './vm-flavor-modal';\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Form, FormSelect, FormSelectOption } from '@patternfly/react-core';\nimport {\n  Firehose,\n  FirehoseResult,\n  HandlePromiseProps,\n  withHandlePromise,\n} from '@console/internal/components/utils';\nimport { TemplateModel } from '@console/internal/models';\nimport {\n  createModalLauncher,\n  ModalBody,\n  ModalComponentProps,\n  ModalTitle,\n} from '@console/internal/components/factory';\nimport { k8sPatch, TemplateKind } from '@console/internal/module/k8s';\nimport { VMLikeEntityKind } from '../../../types/vmLike';\nimport {\n  asVM,\n  getCPU,\n  getFlavor,\n  getMemory,\n  getVMLikeModel,\n  vCPUCount,\n} from '../../../selectors/vm';\nimport { getUpdateFlavorPatches } from '../../../k8s/patches/vm/vm-patches';\nimport { CUSTOM_FLAVOR } from '../../../constants';\nimport { getLoadedData } from '../../../utils';\nimport { SizeUnitFormRow } from '../../form/size-unit-form-row';\nimport { BinaryUnit, stringValueUnitSplit } from '../../form/size-unit-utils';\nimport { ModalFooter } from '../modal/modal-footer';\nimport { FormRow } from '../../form/form-row';\nimport { Integer } from '../../form/integer/integer';\nimport { validateFlavor } from '../../../utils/validations/vm/flavor';\nimport { isValidationError } from '../../../utils/validations/common';\nimport { useShowErrorToggler } from '../../../hooks/use-show-error-toggler';\nimport { getDialogUIError } from '../../../utils/strings';\nimport { flavorSort } from '../../../utils/sort';\nimport { getTemplateFlavors } from '../../../selectors/vm-template/advanced';\nimport { getVMTemplateNamespacedName } from '../../../selectors/vm-template/selectors';\nimport { toUIFlavor, isCustomFlavor } from '../../../selectors/vm-like/flavor';\n\nconst getId = (field: string) => `vm-flavor-modal-${field}`;\n\nconst getAvailableFlavors = (template: TemplateKind) => {\n  const flavors = getTemplateFlavors([template]).filter((f) => f && !isCustomFlavor(f));\n  flavors.push(CUSTOM_FLAVOR);\n\n  return _.uniq(flavorSort(flavors));\n};\n\nconst VMFlavorModal = withHandlePromise((props: VMFlavornModalProps) => {\n  const { vmLike, template, errorMessage, handlePromise, close, cancel, loadError, loaded } = props;\n  const inProgress = props.inProgress || !loaded;\n  const vm = asVM(vmLike);\n  const underlyingTemplate = getLoadedData(template);\n\n  const flavors = getAvailableFlavors(underlyingTemplate);\n  const vmFlavor = toUIFlavor(getFlavor(vmLike) || flavors[flavors.length - 1]);\n\n  const [sourceMemSize, sourceMemUnit] = stringValueUnitSplit(getMemory(vm) || '');\n  const sourceCPURaw = getCPU(vm);\n  const sourceCPU = vCPUCount(sourceCPURaw);\n\n  const [flavor, setFlavor] = React.useState(vmFlavor);\n  const isCustom = isCustomFlavor(flavor);\n\n  const [memSize, setMemSize] = React.useState<string>(isCustom ? sourceMemSize || '' : '');\n  const [memUnit, setMemUnit] = React.useState<string>(\n    isCustom ? sourceMemUnit || BinaryUnit.Gi : BinaryUnit.Gi,\n  );\n  const [cpus, setCpus] = React.useState<string>(isCustom ? `${sourceCPU}` : '');\n\n  const {\n    validations: { cpus: cpusValidation, memory: memoryValidation },\n    hasAllRequiredFilled,\n    isValid,\n  } = validateFlavor(\n    { cpus, memory: { size: memSize, unit: memUnit } },\n    { isCustomFlavor: isCustom },\n  );\n\n  const [showUIError, setShowUIError] = useShowErrorToggler(false, isValid, isValid);\n\n  const submit = (e) => {\n    e.preventDefault();\n\n    if (isValid) {\n      const patches = getUpdateFlavorPatches(\n        vmLike,\n        underlyingTemplate,\n        flavor,\n        parseInt(cpus, 10),\n        `${memSize}${memUnit}`,\n      );\n      if (patches.length > 0) {\n        const promise = k8sPatch(getVMLikeModel(vmLike), vmLike, patches);\n        handlePromise(promise).then(close); // eslint-disable-line promise/catch-or-return\n      } else {\n        close();\n      }\n    } else {\n      setShowUIError(true);\n    }\n  };\n\n  return (\n    <div className=\"modal-content\">\n      <ModalTitle>Edit Flavor</ModalTitle>\n      <ModalBody>\n        <Form>\n          <FormRow title=\"Flavor\" fieldId={getId('flavor')} isRequired>\n            <FormSelect\n              onChange={(f) => {\n                if (isCustomFlavor(f)) {\n                  const isSourceCustom = isCustomFlavor(vmFlavor);\n                  setMemSize(isSourceCustom ? sourceMemSize || '' : '');\n                  setMemUnit(isSourceCustom ? sourceMemUnit || BinaryUnit.Gi : BinaryUnit.Gi);\n                  setCpus(isSourceCustom ? `${sourceCPU}` : '');\n                }\n                setFlavor(f);\n              }}\n              value={flavor}\n              id={getId('flavor')}\n              isDisabled={inProgress}\n            >\n              {flavors.map((f) => (\n                <FormSelectOption key={f} value={f} label={_.capitalize(f)} />\n              ))}\n            </FormSelect>\n          </FormRow>\n\n          {isCustom && (\n            <>\n              <FormRow\n                key=\"cpu\"\n                title=\"CPUs\"\n                fieldId={getId('cpu')}\n                isRequired\n                validation={cpusValidation}\n              >\n                <Integer\n                  isValid={!isValidationError(cpusValidation)}\n                  isDisabled={inProgress}\n                  id={getId('cpu')}\n                  value={cpus}\n                  isPositive\n                  onChange={(v) => setCpus(v)}\n                  isFullWidth\n                  aria-label=\"CPU count\"\n                />\n              </FormRow>\n              <SizeUnitFormRow\n                title=\"Memory\"\n                key=\"memory\"\n                id={getId('memory')}\n                size={memSize}\n                unit={memUnit as BinaryUnit}\n                units={[BinaryUnit.Mi, BinaryUnit.Gi, BinaryUnit.Ti]}\n                validation={memoryValidation}\n                isDisabled={inProgress}\n                isRequired\n                onSizeChanged={setMemSize}\n                onUnitChanged={setMemUnit}\n              />\n            </>\n          )}\n        </Form>\n      </ModalBody>\n      <ModalFooter\n        id=\"vm-flavor-modal\"\n        errorMessage={\n          errorMessage ||\n          loadError?.message ||\n          (showUIError ? getDialogUIError(hasAllRequiredFilled) : null)\n        }\n        isSimpleError={showUIError}\n        isDisabled={inProgress}\n        inProgress={inProgress}\n        onSubmit={submit}\n        submitButtonText=\"Save\"\n        onCancel={(e) => {\n          e.stopPropagation();\n          cancel();\n        }}\n      />\n    </div>\n  );\n});\n\nconst VMFlavorModalFirehose = (props) => {\n  const { vmLike } = props;\n  const resources = [];\n  const underlyingTemplate = getVMTemplateNamespacedName(vmLike);\n\n  if (underlyingTemplate) {\n    resources.push({\n      kind: TemplateModel.kind,\n      model: TemplateModel,\n      name: underlyingTemplate.name,\n      namespace: underlyingTemplate.namespace,\n      isList: false,\n      prop: 'template',\n    });\n  }\n  return (\n    <Firehose resources={resources}>\n      <VMFlavorModal {...props} />\n    </Firehose>\n  );\n};\n\nexport type VMFlavornModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    vmLike: VMLikeEntityKind;\n    template?: FirehoseResult<TemplateKind>;\n    loadError?: any;\n    loaded: boolean;\n  };\n\nexport const vmFlavorModal = createModalLauncher(VMFlavorModalFirehose);\n","import * as React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport { HandlePromiseProps, withHandlePromise } from '@console/internal/components/utils';\nimport { ModalComponentProps } from '@console/internal/components/factory';\nimport { ModalFooter } from '../modal/modal-footer';\nimport { PAUSED_VM_MODAL_MESSAGE } from '../../../constants/vm';\nimport { VMIKind } from '../../../types';\nimport { unpauseVMI } from '../../../k8s/requests/vmi/actions';\n\nconst modalTitle = 'Edit pause state';\n\nconst VMStatusModal = withHandlePromise<VMStatusModalProps>(\n  ({ vmi, isOpen, setOpen, title = modalTitle, handlePromise, inProgress, errorMessage }) => {\n    const [showPatchError, setPatchError] = React.useState<boolean>(false);\n\n    const onSubmit = async (event) => {\n      event.preventDefault();\n\n      const promise = unpauseVMI(vmi);\n      handlePromise(promise)\n        .then(() => setOpen(false))\n        .catch(() => setPatchError(true));\n    };\n\n    const footer = (\n      <ModalFooter\n        errorMessage={showPatchError && errorMessage}\n        inProgress={inProgress}\n        onSubmit={onSubmit}\n        onCancel={() => setOpen(false)}\n        submitButtonText=\"Unpause\"\n      />\n    );\n\n    return (\n      <Modal\n        title={title}\n        isOpen={isOpen}\n        isSmall\n        onClose={() => setOpen(false)}\n        footer={footer}\n        isFooterLeftAligned\n      >\n        <div>{PAUSED_VM_MODAL_MESSAGE}</div>\n      </Modal>\n    );\n  },\n);\n\nexport type VMStatusModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    vmi: VMIKind;\n    title?: string;\n    isOpen: boolean;\n    setOpen: (isOpen: boolean) => void;\n  };\n\nexport default VMStatusModal;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { ValidationErrorType, ValidationObject } from '@console/shared';\n\nimport './validation-cell.scss';\n\nexport type SimpleCellProps = {\n  children?: React.ReactNode;\n  validation?: ValidationObject;\n};\n\nexport const ValidationCell: React.FC<SimpleCellProps> = ({ children, validation }) => {\n  return (\n    <>\n      {children}\n      {validation && (\n        <div\n          className={classNames({\n            'kubevirt-validation-cell__cell--error': [\n              ValidationErrorType.Error,\n              ValidationErrorType.TrivialError,\n            ].includes(validation.type),\n            'kubevirt-validation-cell__cell--warning': validation.type === ValidationErrorType.Warn,\n          })}\n        >\n          {validation.message}\n        </div>\n      )}\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  getContainerImageByDisk,\n  getURLSourceByDisk,\n  getPVCSourceByDisk,\n} from '../../selectors/vm/selectors';\nimport { WINTOOLS_CONTAINER_NAMES } from '../modals/cdrom-vm-modal/constants';\nimport { VMKind } from '../../types';\nimport { V1Disk } from '../../types/vm/disk/V1Disk';\n\nimport './disk-summary.scss';\n\nexport const DiskSummary: React.FC<DiskSummaryProps> = ({ disks, vm }) => (\n  <dl className=\"kubevirt-disk-summary\">\n    {disks.map(({ name }) => {\n      const container = getContainerImageByDisk(vm, name);\n      const pvc = getPVCSourceByDisk(vm, name);\n      const url = getURLSourceByDisk(vm, name);\n      const nameKey = `kubevirt-disk-summary-disk-title-${name}`;\n      let value = '';\n\n      if (_.includes(WINTOOLS_CONTAINER_NAMES, container)) {\n        value = `Windows Tools: ${container}`;\n      } else if (container) {\n        value = `Container: ${container}`;\n      } else if (url) {\n        value = `URL: ${url}`;\n      } else if (pvc) {\n        value = `PVC: ${pvc}`;\n      }\n\n      return (\n        <React.Fragment key={nameKey}>\n          <dt id={nameKey} key={nameKey} className=\"kubevirt-disk-summary__datalist-dt\">\n            {name}\n          </dt>\n          <dd\n            id={`${nameKey}-info`}\n            key={`${nameKey}-info`}\n            className=\"kubevirt-disk-summary__datalist-dd\"\n          >\n            {value}\n          </dd>\n        </React.Fragment>\n      );\n    })}\n  </dl>\n);\n\ntype DiskSummaryProps = {\n  vm: VMKind;\n  disks: V1Disk[];\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { PodKind } from '@console/internal/module/k8s';\nimport {\n  HourglassHalfIcon,\n  InProgressIcon,\n  OffIcon,\n  PausedIcon,\n  SyncAltIcon,\n  UnknownIcon,\n} from '@patternfly/react-icons';\nimport { getNamespace, getName } from '@console/shared/src';\nimport { RedExclamationCircleIcon } from '@console/shared/src/components/status/icons';\nimport GenericStatus from '@console/shared/src/components/status/GenericStatus';\nimport {\n  Progress,\n  ProgressVariant,\n  ProgressSize,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { ResourceLink, resourcePath } from '@console/internal/components/utils';\nimport { PersistentVolumeClaimModel, PodModel } from '@console/internal/models';\nimport { unpauseVMI } from '../../k8s/requests/vmi/actions';\nimport { VM_DETAIL_EVENTS_HREF } from '../../constants';\nimport { VMKind, VMIKind } from '../../types';\nimport { getVMLikeModel } from '../../selectors/vm';\nimport { VMStatus as VMStatusEnum } from '../../constants/vm/vm-status';\nimport { VMILikeEntityKind } from '../../types/vmLike';\nimport { VMStatusBundle } from '../../statuses/vm/types';\n\nimport './vm-status.scss';\n\ntype LinkType = {\n  to: string;\n  message?: string;\n};\n\nconst VMStatusPopoverContent: React.FC<VMStatusPopoverContentProps> = ({\n  message,\n  children,\n  progress,\n  links,\n}) => (\n  <>\n    {message}\n    {children && <div className=\"kubevirt-vm-status__detail-section\">{children}</div>}\n    {progress != null && (\n      <div className=\"kubevirt-vm-status__detail-section\">\n        <Progress value={progress} variant={ProgressVariant.info} size={ProgressSize.sm} />\n      </div>\n    )}\n    {links &&\n      links.map(({ to, message: linkMessage }) => (\n        <div className=\"kubevirt-vm-status__detail-section\" key={to}>\n          <Link to={to} title={linkMessage}>\n            {linkMessage || to}\n          </Link>\n        </div>\n      ))}\n  </>\n);\n\ntype ImporterPodsProps = {\n  statuses: VMStatusBundle['importerPodsStatuses'];\n};\n\nconst ImporterPods: React.FC<ImporterPodsProps> = ({ statuses }) => (\n  <>\n    {statuses && (\n      <ul>\n        {statuses.map(({ message, status, progress, pod, dataVolume }) => {\n          return (\n            <li key={getName(pod)} className=\"kubevirt-vm-status__detail-section\">\n              {`${status.getLabel()} (${getName(dataVolume)})`}\n              <ResourceLink\n                className=\"kubevirt-vm-status__detail-small-section\"\n                kind={PodModel.kind}\n                displayName={getName(pod)}\n                name={getName(pod)}\n                namespace={getNamespace(pod)}\n              />\n              {dataVolume && (\n                <ResourceLink\n                  className=\"kubevirt-vm-status__detail-small-section\"\n                  kind={PersistentVolumeClaimModel.kind}\n                  name={getName(dataVolume)}\n                  namespace={getNamespace(dataVolume)}\n                />\n              )}\n              {progress != null && (\n                <Progress\n                  className=\"kubevirt-vm-status__detail-small-section\"\n                  value={progress}\n                  variant={ProgressVariant.info}\n                  size={ProgressSize.sm}\n                />\n              )}\n              {message && <div className=\"kubevirt-vm-status__detail-small-section\">{message}</div>}\n            </li>\n          );\n        })}\n      </ul>\n    )}\n  </>\n);\n\nconst VIEW_POD_LOGS = 'View Pod logs';\nconst VIEW_VM_EVENTS = 'View VM events';\n\nconst getPodLink = (pod: PodKind) =>\n  `${resourcePath(PodModel.kind, getName(pod), getNamespace(pod))}`; // to default tab\n\nconst getVMILikeLink = (vmLike: VMILikeEntityKind) =>\n  `${resourcePath(\n    getVMLikeModel(vmLike).kind,\n    getName(vmLike),\n    getNamespace(vmLike),\n  )}/${VM_DETAIL_EVENTS_HREF}`;\n\nexport const VMStatus: React.FC<VMStatusProps> = ({ vm, vmi, vmStatusBundle }) => {\n  const vmiLike = vm || vmi;\n\n  const { status, pod, progress, importerPodsStatuses } = vmStatusBundle;\n  const title = status.toString(); // TODO status.toVerboseString() should be called to pass to popup header\n  const message = vmStatusBundle.message || vmStatusBundle.detailedMessage;\n  const detailedMessage = vmStatusBundle.message ? vmStatusBundle.detailedMessage : null;\n  const isPaused = status === VMStatusEnum.PAUSED;\n\n  const links: LinkType[] = [];\n\n  if (vmiLike) {\n    links.push({ to: getVMILikeLink(vmiLike), message: VIEW_VM_EVENTS });\n  }\n\n  if (pod) {\n    links.push({ to: `${getPodLink(pod)}/logs`, message: VIEW_POD_LOGS });\n  }\n\n  let icon = UnknownIcon;\n\n  if (isPaused) {\n    icon = PausedIcon;\n  } else if (status === VMStatusEnum.RUNNING) {\n    icon = SyncAltIcon;\n  } else if (status === VMStatusEnum.OFF) {\n    icon = OffIcon;\n  } else if (status.isError()) {\n    icon = RedExclamationCircleIcon;\n  } else if (status.isPending()) {\n    // should be called before inProgress\n    icon = HourglassHalfIcon;\n  } else if (status.isInProgress()) {\n    icon = InProgressIcon;\n  }\n\n  return (\n    <GenericStatus title={title || VMStatusEnum.UNKNOWN.toString()} Icon={icon}>\n      {(message || isPaused) && (\n        <VMStatusPopoverContent key=\"popover\" message={message} links={links} progress={progress}>\n          {isPaused && (\n            <Button\n              key=\"unpause\"\n              variant={ButtonVariant.primary}\n              onClick={async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n                event.preventDefault();\n                await unpauseVMI(vmi);\n              }}\n              id=\"paused-popover-submit\"\n            >\n              Unpause\n            </Button>\n          )}\n          {detailedMessage}\n          <ImporterPods key=\"importerPods\" statuses={importerPodsStatuses} />\n        </VMStatusPopoverContent>\n      )}\n    </GenericStatus>\n  );\n};\n\ntype VMStatusPopoverContentProps = {\n  message: string;\n  children?: React.ReactNode;\n  progress?: number;\n  links?: LinkType[];\n};\n\ntype VMStatusProps = {\n  vm: VMKind;\n  vmi?: VMIKind;\n  vmStatusBundle?: VMStatusBundle;\n};\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ResourceIcon } from '@console/internal/components/utils';\nimport { TemplateModel } from '@console/internal/models';\n\nexport const VMTemplateLink: React.FC<VMTemplateLinkProps> = ({ name, namespace, uid }) => (\n  <>\n    <ResourceIcon kind={TemplateModel.kind} />\n    <Link\n      to={`/k8s/ns/${namespace}/vmtemplates/${name}`}\n      title={uid}\n      data-test-id={name}\n      className=\"co-resource-item__resource-name\"\n    >\n      {name}\n    </Link>\n  </>\n);\n\ntype VMTemplateLinkProps = {\n  name: string;\n  namespace: string;\n  uid?: string;\n};\n","import * as _ from 'lodash';\nimport * as React from 'react';\nimport { asAccessReview, Kebab, KebabOption } from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceCommon, K8sResourceKind, PodKind } from '@console/internal/module/k8s';\nimport { getName, getNamespace } from '@console/shared';\nimport { confirmModal, deleteModal } from '@console/internal/components/modals';\nimport { VMIKind, VMKind } from '../../types/vm';\nimport {\n  isVMCreated,\n  isVMExpectedRunning,\n  isVMRunningOrExpectedRunning,\n} from '../../selectors/vm/selectors';\nimport { getMigrationVMIName } from '../../selectors/vmi-migration';\nimport { VirtualMachineInstanceMigrationModel } from '../../models';\nimport { restartVM, startVM, stopVM, VMActionType } from '../../k8s/requests/vm';\nimport { startVMIMigration } from '../../k8s/requests/vmi';\nimport { cancelMigration } from '../../k8s/requests/vmim';\nimport { cloneVMModal } from '../modals/clone-vm-modal';\nimport { VMCDRomModal } from '../modals/cdrom-vm-modal/vm-cdrom-modal';\nimport { getVMStatus } from '../../statuses/vm/vm-status';\nimport { isVMIPaused } from '../../selectors/vmi';\nimport { unpauseVMI, VMIActionType } from '../../k8s/requests/vmi/actions';\nimport { VMImportKind } from '../../types/vm-import/ovirt/vm-import';\nimport { V1alpha1DataVolume } from '../../types/vm/disk/V1alpha1DataVolume';\nimport { VMStatusBundle } from '../../statuses/vm/types';\nimport { deleteVMLikeEntityModal } from '../modals/delete-vm-like-entity-modal/delete-vm-like-entity-modal';\n\ntype ActionArgs = {\n  vmi?: VMIKind;\n  vmStatusBundle?: VMStatusBundle;\n};\n\nconst getActionMessage = (obj: K8sResourceCommon, action: VMActionType | VMIActionType) => (\n  <>\n    Are you sure you want to {action} <strong>{getName(obj)}</strong> in namespace{' '}\n    <strong>{getNamespace(obj)}</strong>?\n  </>\n);\n\nexport const menuActionStart = (\n  kindObj: K8sKind,\n  vm: VMKind,\n  { vmStatusBundle }: ActionArgs,\n): KebabOption => {\n  const title = 'Start Virtual Machine';\n  return {\n    hidden:\n      vmStatusBundle?.status?.isImporting() ||\n      vmStatusBundle?.status?.isMigrating() ||\n      isVMRunningOrExpectedRunning(vm),\n    label: title,\n    callback: () => startVM(vm),\n    accessReview: asAccessReview(kindObj, vm, 'patch'),\n  };\n};\n\nconst menuActionStop = (kindObj: K8sKind, vm: VMKind): KebabOption => {\n  const title = 'Stop Virtual Machine';\n  return {\n    hidden: !isVMExpectedRunning(vm),\n    label: title,\n    callback: () =>\n      confirmModal({\n        title,\n        message: getActionMessage(vm, VMActionType.Stop),\n        btnText: _.capitalize(VMActionType.Stop),\n        executeFn: () => stopVM(vm),\n      }),\n    accessReview: asAccessReview(kindObj, vm, 'patch'),\n  };\n};\n\nconst menuActionRestart = (\n  kindObj: K8sKind,\n  vm: VMKind,\n  { vmStatusBundle }: ActionArgs,\n): KebabOption => {\n  const title = 'Restart Virtual Machine';\n  return {\n    hidden:\n      vmStatusBundle?.status?.isImporting() ||\n      vmStatusBundle?.status?.isMigrating() ||\n      !isVMExpectedRunning(vm) ||\n      !isVMCreated(vm),\n    label: title,\n    callback: () =>\n      confirmModal({\n        title,\n        message: getActionMessage(vm, VMActionType.Restart),\n        btnText: _.capitalize(VMActionType.Restart),\n        executeFn: () => restartVM(vm),\n      }),\n    accessReview: asAccessReview(kindObj, vm, 'patch'),\n  };\n};\n\nconst menuActionUnpause = (kindObj: K8sKind, vm: VMKind, { vmi }: ActionArgs): KebabOption => {\n  const title = 'Unpause Virtual Machine';\n  return {\n    hidden: !isVMIPaused(vmi),\n    label: title,\n    callback: () =>\n      confirmModal({\n        title,\n        message: getActionMessage(vmi, VMIActionType.Unpause),\n        btnText: _.capitalize(VMIActionType.Unpause),\n        executeFn: () => unpauseVMI(vmi),\n      }),\n  };\n};\n\nconst menuActionMigrate = (\n  kindObj: K8sKind,\n  vm: VMKind,\n  { vmStatusBundle, vmi }: ActionArgs,\n): KebabOption => {\n  const title = 'Migrate Virtual Machine';\n  return {\n    hidden:\n      vmStatusBundle?.status?.isImporting() ||\n      vmStatusBundle?.status?.isMigrating() ||\n      !isVMExpectedRunning(vm) ||\n      !isVMCreated(vm),\n    label: title,\n    callback: () =>\n      confirmModal({\n        title,\n        message: (\n          <>\n            Do you wish to migrate <strong>{getName(vmi)}</strong> vmi to another node?\n          </>\n        ),\n        btnText: 'Migrate',\n        executeFn: () => startVMIMigration(vmi),\n      }),\n  };\n};\n\nconst menuActionCancelMigration = (\n  kindObj: K8sKind,\n  vm: VMKind,\n  { vmStatusBundle }: ActionArgs,\n): KebabOption => {\n  const title = 'Cancel Virtual Machine Migration';\n  const migration = vmStatusBundle?.migration;\n  return {\n    hidden: !vmStatusBundle?.status?.isMigrating(),\n    label: title,\n    callback: () =>\n      confirmModal({\n        title,\n        message: (\n          <>\n            Are you sure you want to cancel <strong>{getMigrationVMIName(migration)}</strong>{' '}\n            migration in <strong>{getNamespace(migration)}</strong> namespace?\n          </>\n        ),\n        btnText: 'Cancel Migration',\n        executeFn: () => cancelMigration(migration),\n      }),\n    accessReview:\n      migration && asAccessReview(VirtualMachineInstanceMigrationModel, migration, 'delete'),\n  };\n};\n\nconst menuActionClone = (\n  kindObj: K8sKind,\n  vm: VMKind,\n  { vmStatusBundle }: ActionArgs,\n): KebabOption => {\n  return {\n    hidden: vmStatusBundle?.status?.isImporting(),\n    label: 'Clone Virtual Machine',\n    callback: () => cloneVMModal({ vm }),\n    accessReview: asAccessReview(kindObj, vm, 'patch'),\n  };\n};\n\nconst menuActionCdEdit = (\n  kindObj: K8sKind,\n  vm: VMKind,\n  { vmStatusBundle }: ActionArgs,\n): KebabOption => {\n  return {\n    hidden:\n      vmStatusBundle?.status?.isImporting() ||\n      vmStatusBundle?.status?.isMigrating() ||\n      isVMRunningOrExpectedRunning(vm),\n    label: 'Edit CD-ROMs',\n    callback: () => VMCDRomModal({ vmLikeEntity: vm, modalClassName: 'modal-lg' }),\n    accessReview: asAccessReview(kindObj, vm, 'patch'),\n  };\n};\n\nexport const menuActionDeleteVM = (kindObj: K8sKind, vm: VMKind): KebabOption => ({\n  label: `Delete ${kindObj.label}`,\n  callback: () =>\n    deleteVMLikeEntityModal({\n      vmLikeEntity: vm,\n    }),\n  accessReview: asAccessReview(kindObj, vm, 'delete'),\n});\n\nexport const menuActionDeleteVMI = (kindObj: K8sKind, vmi: VMIKind): KebabOption => ({\n  label: `Delete ${kindObj.label}`,\n  callback: () =>\n    deleteModal({\n      kind: kindObj,\n      resource: vmi,\n      redirectTo: `/k8s/ns/${getNamespace(vmi)}/virtualization`,\n    }),\n  accessReview: asAccessReview(kindObj, vmi, 'delete'),\n});\n\nexport const vmMenuActions = [\n  menuActionStart,\n  menuActionStop,\n  menuActionRestart,\n  menuActionUnpause,\n  menuActionMigrate,\n  menuActionCancelMigration,\n  menuActionClone,\n  menuActionCdEdit,\n  Kebab.factory.ModifyLabels,\n  Kebab.factory.ModifyAnnotations,\n  menuActionDeleteVM,\n];\n\nexport const vmiMenuActions = [\n  Kebab.factory.ModifyLabels,\n  Kebab.factory.ModifyAnnotations,\n  menuActionDeleteVMI,\n];\n\nexport const vmImportMenuActions = [\n  Kebab.factory.ModifyLabels,\n  Kebab.factory.ModifyAnnotations,\n  Kebab.factory.Delete,\n];\n\nexport type ExtraResources = {\n  vmis: VMIKind[];\n  pods: PodKind[];\n  migrations: K8sResourceKind[];\n  dataVolumes: V1alpha1DataVolume[];\n  vmImports: VMImportKind[];\n};\n\nexport const vmMenuActionsCreator = (\n  kindObj: K8sKind,\n  vm: VMKind,\n  { vmis, pods, migrations, vmImports, dataVolumes }: ExtraResources,\n) => {\n  const vmi = vmis && vmis[0];\n  const vmStatusBundle = getVMStatus({ vm, vmi, pods, migrations, dataVolumes, vmImports });\n\n  return vmMenuActions.map((action) => {\n    return action(kindObj, vm, { vmi, vmStatusBundle });\n  });\n};\n\nexport const vmiMenuActionsCreator = (kindObj: K8sKind, vmi: VMIKind) => {\n  return vmiMenuActions.map((action) => {\n    return action(kindObj, vmi);\n  });\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { ResourceSummary, NodeLink, ResourceLink } from '@console/internal/components/utils';\nimport { K8sKind, PodKind, TemplateKind } from '@console/internal/module/k8s';\nimport { getName, getNamespace, getNodeName } from '@console/shared';\nimport { PodModel } from '@console/internal/models';\nimport { Selector } from '@console/internal/components/utils/selector';\nimport { VMKind, VMIKind } from '../../types';\nimport { VMTemplateLink } from '../vm-templates/vm-template-link';\nimport { getBasicID, prefixedID } from '../../utils';\nimport { vmDescriptionModal, vmFlavorModal } from '../modals';\nimport { VMCDRomModal } from '../modals/cdrom-vm-modal/vm-cdrom-modal';\nimport { BootOrderModal } from '../modals/boot-order-modal/boot-order-modal';\nimport dedicatedResourcesModal from '../modals/scheduling-modals/dedicated-resources-modal/connected-dedicated-resources-modal';\nimport nodeSelectorModal from '../modals/scheduling-modals/node-selector-modal/connected-node-selector-modal';\nimport tolerationsModal from '../modals/scheduling-modals/tolerations-modal/connected-tolerations-modal';\nimport affinityModal from '../modals/scheduling-modals/affinity-modal/connected-affinity-modal';\nimport { getRowsDataFromAffinity } from '../modals/scheduling-modals/affinity-modal/helpers';\nimport VMStatusModal from '../modals/vm-status-modal/vm-status-modal';\nimport { getDescription } from '../../selectors/selectors';\nimport { EditButton } from '../edit-button';\nimport { VMStatus } from '../vm-status/vm-status';\nimport { DiskSummary } from '../vm-disks/disk-summary';\nimport { BootOrderSummary } from '../boot-order';\nimport {\n  getOperatingSystemName,\n  getOperatingSystem,\n  isVMRunningOrExpectedRunning,\n} from '../../selectors/vm';\nimport { getVmiIpAddresses } from '../../selectors/vmi/ip-address';\nimport { findVMIPod } from '../../selectors/pod/selectors';\nimport { isVMIPaused, getVMINodeName } from '../../selectors/vmi';\nimport { VirtualMachineInstanceModel, VirtualMachineModel } from '../../models';\nimport { asVMILikeWrapper } from '../../k8s/wrapper/utils/convert';\nimport { getVMTemplate } from '../../selectors/vm-template/selectors';\nimport { getFlavorText } from '../../selectors/vm/flavor-text';\nimport {\n  NODE_SELECTOR_MODAL_TITLE,\n  DEDICATED_RESOURCES_PINNED,\n  DEDICATED_RESOURCES_NOT_PINNED,\n  DEDICATED_RESOURCES_MODAL_TITLE,\n  TOLERATIONS_MODAL_TITLE,\n  AFFINITY_MODAL_TITLE,\n} from '../modals/scheduling-modals/shared/consts';\nimport { VMStatusBundle } from '../../statuses/vm/types';\n\nimport './vm-resource.scss';\n\nexport const VMDetailsItem: React.FC<VMDetailsItemProps> = ({\n  title,\n  canEdit = false,\n  editButtonId,\n  onEditClick,\n  idValue,\n  isNotAvail = false,\n  valueClassName,\n  children,\n}) => {\n  return (\n    <>\n      <dt>\n        {title} <EditButton id={editButtonId} canEdit={canEdit} onClick={onEditClick} />\n      </dt>\n      <dd id={idValue} className={valueClassName}>\n        {isNotAvail ? <span className=\"text-secondary\">Not available</span> : children}\n      </dd>\n    </>\n  );\n};\n\nexport const VMResourceSummary: React.FC<VMResourceSummaryProps> = ({\n  vm,\n  vmi,\n  canUpdateVM,\n  templates,\n  kindObj,\n}) => {\n  const isVM = kindObj === VirtualMachineModel;\n  const vmiLike = isVM ? vm : vmi;\n\n  const template = getVMTemplate(vm, templates);\n  const id = getBasicID(vmiLike);\n  const description = getDescription(vmiLike);\n  const os = getOperatingSystemName(vmiLike) || getOperatingSystem(vmiLike);\n\n  return (\n    <ResourceSummary resource={vmiLike}>\n      <VMDetailsItem\n        title=\"Description\"\n        idValue={prefixedID(id, 'description')}\n        valueClassName=\"kubevirt-vm-resource-summary__description\"\n      >\n        {!description && <span className=\"text-secondary\">Not available</span>}\n        <EditButton\n          canEdit={canUpdateVM}\n          onClick={() => vmDescriptionModal({ vmLikeEntity: vmiLike })}\n        >\n          {description}\n        </EditButton>\n      </VMDetailsItem>\n\n      <VMDetailsItem title=\"Operating System\" idValue={prefixedID(id, 'os')} isNotAvail={!os}>\n        {os}\n      </VMDetailsItem>\n\n      {isVM && (\n        <VMDetailsItem title=\"Template\" idValue={prefixedID(id, 'template')} isNotAvail={!template}>\n          {template && (\n            <VMTemplateLink name={getName(template)} namespace={getNamespace(template)} />\n          )}\n        </VMDetailsItem>\n      )}\n    </ResourceSummary>\n  );\n};\n\nexport const VMDetailsList: React.FC<VMResourceListProps> = ({\n  vm,\n  vmi,\n  pods,\n  vmStatusBundle,\n  canUpdateVM,\n  kindObj,\n}) => {\n  const [isBootOrderModalOpen, setBootOrderModalOpen] = React.useState<boolean>(false);\n  const isVM = kindObj === VirtualMachineModel;\n  const vmiLike = isVM ? vm : vmi;\n  const vmiLikeWrapper = asVMILikeWrapper(vmiLike);\n\n  const canEdit =\n    vmiLike &&\n    canUpdateVM &&\n    kindObj !== VirtualMachineInstanceModel &&\n    !isVMRunningOrExpectedRunning(vm);\n\n  const [isStatusModalOpen, setStatusModalOpen] = React.useState<boolean>(false);\n\n  const launcherPod = findVMIPod(vmi, pods);\n  const id = getBasicID(vmiLike);\n  const cds = vmiLikeWrapper?.getCDROMs() || [];\n  const devices = vmiLikeWrapper?.getLabeledDevices() || [];\n  const nodeName = getVMINodeName(vmi) || getNodeName(launcherPod);\n  const ipAddrs = getVmiIpAddresses(vmi).join(', ');\n  const workloadProfile = vmiLikeWrapper?.getWorkloadProfile();\n\n  return (\n    <dl className=\"co-m-pane__details\">\n      <VMDetailsItem\n        title=\"Status\"\n        canEdit={isVMIPaused(vmi)}\n        editButtonId={prefixedID(id, 'status-edit')}\n        onEditClick={() => setStatusModalOpen(true)}\n        idValue={prefixedID(id, 'vm-statuses')}\n      >\n        <VMStatusModal isOpen={isStatusModalOpen} setOpen={setStatusModalOpen} vmi={vmi} />\n        <VMStatus vm={vm} vmi={vmi} vmStatusBundle={vmStatusBundle} />\n      </VMDetailsItem>\n\n      <VMDetailsItem title=\"Pod\" idValue={prefixedID(id, 'pod')} isNotAvail={!launcherPod}>\n        {launcherPod && (\n          <ResourceLink\n            kind={PodModel.kind}\n            name={getName(launcherPod)}\n            namespace={getNamespace(launcherPod)}\n          />\n        )}\n      </VMDetailsItem>\n\n      <VMDetailsItem\n        title=\"Boot Order\"\n        canEdit={canEdit}\n        editButtonId={prefixedID(id, 'boot-order-edit')}\n        onEditClick={() => setBootOrderModalOpen(true)}\n        idValue={prefixedID(id, 'boot-order')}\n      >\n        <BootOrderModal\n          isOpen={isBootOrderModalOpen}\n          setOpen={setBootOrderModalOpen}\n          vmLikeEntity={vm}\n        />\n        <BootOrderSummary devices={devices} />\n      </VMDetailsItem>\n\n      <VMDetailsItem\n        title=\"CD-ROMs\"\n        canEdit={canEdit}\n        editButtonId={prefixedID(id, 'cdrom-edit')}\n        onEditClick={() => VMCDRomModal({ vmLikeEntity: vm, modalClassName: 'modal-lg' })}\n        idValue={prefixedID(id, 'cdrom')}\n        isNotAvail={cds.length === 0}\n      >\n        <DiskSummary disks={cds} vm={vm} />\n      </VMDetailsItem>\n\n      <VMDetailsItem\n        title=\"IP Address\"\n        idValue={prefixedID(id, 'ip-addresses')}\n        isNotAvail={!launcherPod || !ipAddrs}\n      >\n        {launcherPod && ipAddrs}\n      </VMDetailsItem>\n\n      <VMDetailsItem\n        title=\"Node\"\n        idValue={prefixedID(id, 'node')}\n        isNotAvail={!launcherPod || !nodeName}\n      >\n        {launcherPod && nodeName && <NodeLink name={nodeName} />}\n      </VMDetailsItem>\n\n      <VMDetailsItem\n        title=\"Workload Profile\"\n        idValue={prefixedID(id, 'workload-profile')}\n        isNotAvail={!workloadProfile}\n      >\n        {workloadProfile}\n      </VMDetailsItem>\n    </dl>\n  );\n};\n\nexport const VMSchedulingList: React.FC<VMSchedulingListProps> = ({\n  vm,\n  vmi,\n  canUpdateVM,\n  kindObj,\n}) => {\n  const isVM = kindObj === VirtualMachineModel;\n  const vmiLike = isVM ? vm : vmi;\n  const vmiLikeWrapper = asVMILikeWrapper(vmiLike);\n  const canEdit =\n    vmiLike &&\n    canUpdateVM &&\n    kindObj !== VirtualMachineInstanceModel &&\n    !isVMRunningOrExpectedRunning(vm);\n\n  const id = getBasicID(vmiLike);\n  const flavorText = getFlavorText({\n    memory: vmiLikeWrapper?.getMemory(),\n    cpu: vmiLikeWrapper?.getCPU(),\n    flavor: vmiLikeWrapper?.getFlavor(),\n  });\n  const isCPUPinned = vmiLikeWrapper?.isDedicatedCPUPlacement();\n  const nodeSelector = vmiLikeWrapper?.getNodeSelector();\n  const tolerationsWrapperCount = (vmiLikeWrapper?.getTolerations() || []).length;\n  const affinityWrapperCount = getRowsDataFromAffinity(vmiLikeWrapper?.getAffinity())?.length;\n\n  return (\n    <>\n      <div className=\"col-sm-6\">\n        <dl className=\"co-m-pane__details\">\n          <VMDetailsItem\n            canEdit={canEdit}\n            title={NODE_SELECTOR_MODAL_TITLE}\n            idValue={prefixedID(id, 'node-selector')}\n            editButtonId={prefixedID(id, 'node-selector-edit')}\n            onEditClick={() => nodeSelectorModal({ vmLikeEntity: vm, blocking: true })}\n          >\n            <Selector kind=\"Node\" selector={nodeSelector} />\n          </VMDetailsItem>\n\n          <VMDetailsItem\n            canEdit={canEdit}\n            title={TOLERATIONS_MODAL_TITLE}\n            idValue={prefixedID(id, 'tolerations')}\n            editButtonId={prefixedID(id, 'tolerations-edit')}\n            onEditClick={() =>\n              tolerationsModal({\n                vmLikeEntity: vm,\n                blocking: true,\n                modalClassName: 'modal-lg',\n              })\n            }\n          >\n            {tolerationsWrapperCount > 0 ? (\n              `${tolerationsWrapperCount} Toleration rules`\n            ) : (\n              <p className=\"text-muted\">No Toleration rules</p>\n            )}\n          </VMDetailsItem>\n\n          <VMDetailsItem\n            canEdit={canEdit}\n            title={AFFINITY_MODAL_TITLE}\n            idValue={prefixedID(id, 'affinity')}\n            editButtonId={prefixedID(id, 'affinity-edit')}\n            onEditClick={() =>\n              affinityModal({ vmLikeEntity: vm, blocking: true, modalClassName: 'modal-lg' })\n            }\n          >\n            {affinityWrapperCount > 0 ? (\n              `${affinityWrapperCount} Affinity rules`\n            ) : (\n              <p className=\"text-muted\">No Affinity rules</p>\n            )}\n          </VMDetailsItem>\n        </dl>\n      </div>\n\n      <div className=\"col-sm-6\">\n        <dl className=\"co-m-pane__details\">\n          <VMDetailsItem\n            title=\"Flavor\"\n            idValue={prefixedID(id, 'flavor')}\n            canEdit={canEdit}\n            onEditClick={() => vmFlavorModal({ vmLike: vm, blocking: true })}\n            editButtonId={prefixedID(id, 'flavor-edit')}\n            isNotAvail={!flavorText}\n          >\n            {flavorText}\n          </VMDetailsItem>\n\n          <VMDetailsItem\n            title={DEDICATED_RESOURCES_MODAL_TITLE}\n            idValue={prefixedID(id, 'dedicated-resources')}\n            canEdit={canEdit}\n            onEditClick={() => dedicatedResourcesModal({ vmLikeEntity: vm, blocking: true })}\n            editButtonId={prefixedID(id, 'dedicated-resources-edit')}\n          >\n            {isCPUPinned ? DEDICATED_RESOURCES_PINNED : DEDICATED_RESOURCES_NOT_PINNED}\n          </VMDetailsItem>\n        </dl>\n      </div>\n    </>\n  );\n};\n\ntype VMDetailsItemProps = {\n  title: string;\n  canEdit?: boolean;\n  editButtonId?: string;\n  onEditClick?: () => void;\n  idValue?: string;\n  isNotAvail?: boolean;\n  valueClassName?: string;\n  children: React.ReactNode;\n};\n\ntype VMResourceSummaryProps = {\n  kindObj: K8sKind;\n  vm?: VMKind;\n  vmi?: VMIKind;\n  templates: TemplateKind[];\n  canUpdateVM: boolean;\n};\n\ntype VMResourceListProps = {\n  kindObj: K8sKind;\n  vm?: VMKind;\n  pods?: PodKind[];\n  vmi?: VMIKind;\n  canUpdateVM: boolean;\n  vmStatusBundle: VMStatusBundle;\n};\n\ntype VMSchedulingListProps = {\n  kindObj: K8sKind;\n  vm?: VMKind;\n  vmi?: VMIKind;\n  canUpdateVM: boolean;\n};\n","export const KEY_CODES = {\n  BACKSPACE: 8,\n  TAB: 9,\n  SHIFT: 16,\n  LEFT_KEY: 37,\n  RIGHT_KEY: 39,\n  DELETE_KEY: 46,\n  0: 48,\n  1: 49,\n  9: 57,\n  NUMPAD: {\n    0: 96,\n    1: 97,\n    9: 105,\n    SUBTRACT: 109,\n  },\n  HYPHEN_MINUS: 173,\n  MINUS: 189,\n  A: 65,\n  C: 67,\n  V: 86,\n  X: 88,\n};\n\nexport const INPUT_CTRL_COMBINATIONS_KEYS = [KEY_CODES.A, KEY_CODES.C, KEY_CODES.V, KEY_CODES.X];\n\nexport const INPUT_NAVIGATION_KEYS = [\n  KEY_CODES.BACKSPACE,\n  KEY_CODES.TAB,\n  KEY_CODES.SHIFT,\n  KEY_CODES.LEFT_KEY,\n  KEY_CODES.RIGHT_KEY,\n  KEY_CODES.DELETE_KEY,\n];\n\nexport const isMinus = (keyCode) => {\n  switch (keyCode) {\n    case KEY_CODES.HYPHEN_MINUS:\n    case KEY_CODES.MINUS:\n    case KEY_CODES.NUMPAD.SUBTRACT:\n      return true;\n    default:\n      return false;\n  }\n};\n","export const STORAGE_CLASS_CONFIG_MAP_NAME = 'kubevirt-storage-class-defaults';\n// Different releases, different locations. Respect the order when resolving. Otherwise the configMap name/namespace is considered as well-known.\nexport const STORAGE_CLASS_CONFIG_MAP_NAMESPACES = [\n  'openshift-cnv',\n  'openshift',\n  'kubevirt-native',\n];\nexport const DEFAULT_SC_ANNOTATION = 'storageclass.kubernetes.io/is-default-class';\n","/* eslint-disable lines-between-class-members */\nimport { getName, getNamespace, K8sEntityMap } from '@console/shared/src';\nimport { ObjectEnum } from '../object-enum';\nimport {\n  asVM,\n  getDataVolumeTemplates,\n  getDisks,\n  getInterfaces,\n  getVolumeDataVolumeName,\n  getVolumes,\n} from '../../selectors/vm';\nimport { VMLikeEntityKind } from '../../types/vmLike';\nimport { StorageUISource } from '../../components/modals/disk-modal/storage-ui-source';\nimport { VolumeWrapper } from '../../k8s/wrapper/vm/volume-wrapper';\nimport { DataVolumeWrapper } from '../../k8s/wrapper/vm/data-volume-wrapper';\nimport { V1alpha1DataVolume } from '../../types/vm/disk/V1alpha1DataVolume';\nimport { VolumeType } from './storage';\n\ntype ProvisionSourceDetails = {\n  type?: ProvisionSource;\n  source?: string;\n  error?: string;\n};\n\nexport class ProvisionSource extends ObjectEnum<string> {\n  static readonly PXE = new ProvisionSource('PXE');\n  static readonly CONTAINER = new ProvisionSource('Container');\n  static readonly URL = new ProvisionSource('URL');\n  static readonly DISK = new ProvisionSource('Disk');\n\n  private static readonly ALL = Object.freeze(\n    ObjectEnum.getAllClassEnumProperties<ProvisionSource>(ProvisionSource),\n  );\n\n  private static readonly stringMapper = ProvisionSource.ALL.reduce(\n    (accumulator, provisionSource: ProvisionSource) => ({\n      ...accumulator,\n      [provisionSource.value]: provisionSource,\n    }),\n    {},\n  );\n\n  static getAll = () => ProvisionSource.ALL;\n\n  static fromString = (source: string): ProvisionSource => ProvisionSource.stringMapper[source];\n\n  static getProvisionSourceDetails = (\n    vmLikeEntity: VMLikeEntityKind,\n    {\n      convertTemplateDataVolumesToAttachClonedDisk,\n      dataVolumes,\n      dataVolumeLookup,\n    }: {\n      convertTemplateDataVolumesToAttachClonedDisk?: boolean;\n      dataVolumes?: V1alpha1DataVolume[];\n      dataVolumeLookup?: K8sEntityMap<V1alpha1DataVolume>;\n    } = {},\n  ): ProvisionSourceDetails => {\n    const vm = asVM(vmLikeEntity);\n    if (getInterfaces(vm).some((i) => i.bootOrder === 1)) {\n      return {\n        type: ProvisionSource.PXE,\n      };\n    }\n\n    const bootDisk = getDisks(vm).find((disk) => disk.bootOrder === 1);\n    if (bootDisk) {\n      const volume = getVolumes(vm).find((vol) => vol.name === bootDisk.name);\n      if (!volume) {\n        return {\n          error: 'No Volume has been found.',\n        };\n      }\n      const volumeWrapper = new VolumeWrapper(volume);\n      let dataVolumeWrapper;\n\n      if (volumeWrapper.getType() === VolumeType.DATA_VOLUME) {\n        if (convertTemplateDataVolumesToAttachClonedDisk) {\n          return {\n            type: ProvisionSource.DISK,\n            source: `${getNamespace(vmLikeEntity)}/${volumeWrapper.getDataVolumeName()}`,\n          };\n        }\n        let dataVolume;\n\n        if (dataVolumeLookup) {\n          dataVolume = dataVolumeLookup[getVolumeDataVolumeName(volume)];\n        }\n        if (!dataVolume) {\n          const allDataVolumes = [...getDataVolumeTemplates(vm)];\n          if (dataVolumes) {\n            allDataVolumes.push(...dataVolumes);\n          }\n          dataVolume = allDataVolumes.find((dv) => getName(dv) === getVolumeDataVolumeName(volume));\n        }\n        if (!dataVolume) {\n          return {\n            error: `Datavolume ${volumeWrapper.getDataVolumeName()} does not exist.`,\n          };\n        }\n        dataVolumeWrapper = new DataVolumeWrapper(dataVolume);\n      }\n\n      const type = StorageUISource.fromTypes(\n        volumeWrapper.getType(),\n        dataVolumeWrapper && dataVolumeWrapper.getType(),\n      );\n\n      switch (type) {\n        case StorageUISource.CONTAINER:\n          return {\n            type: ProvisionSource.CONTAINER,\n            source: volumeWrapper.getContainerImage(),\n          };\n        case StorageUISource.URL:\n          return {\n            type: ProvisionSource.URL,\n            source: dataVolumeWrapper.getURL(),\n          };\n        case StorageUISource.ATTACH_CLONED_DISK:\n          return {\n            type: ProvisionSource.DISK,\n            source: `${dataVolumeWrapper.getPesistentVolumeClaimNamespace()}/${dataVolumeWrapper.getPesistentVolumeClaimName()}`,\n          };\n        case StorageUISource.ATTACH_DISK:\n          return {\n            type: ProvisionSource.DISK,\n            source: `${getNamespace(vmLikeEntity)}/${volumeWrapper.getPersistentVolumeClaimName()}`,\n          };\n        case StorageUISource.BLANK:\n          return {\n            error: `Datavolume ${volumeWrapper.getDataVolumeName()} does not have a supported source (${type}).`,\n          };\n        default:\n          return {\n            error: `Volume ${volumeWrapper.getName()} does not have a supported source.`,\n          };\n      }\n    }\n\n    return {\n      error: 'No bootable device found.',\n    };\n  };\n}\n","import { ConfigMapKind, k8sGet } from '@console/internal/module/k8s';\nimport * as React from 'react';\nimport {\n  STORAGE_CLASS_CONFIG_MAP_NAME,\n  STORAGE_CLASS_CONFIG_MAP_NAMESPACES,\n} from '../constants/sc';\nimport { ConfigMapModel } from '@console/internal/models';\nimport { joinGrammaticallyListOfItems } from '@console/shared/src';\nimport { FirehoseResult } from '@console/internal/components/utils';\n\ntype UseConfigMapResult = [ConfigMapKind, boolean, string];\n\nexport const useStorageClassConfigMap = (): UseConfigMapResult => {\n  const [storageClassConfigMap, setStorageClassConfigMap] = React.useState<ConfigMapKind>(\n    undefined,\n  );\n  const [error, setError] = React.useState<string>(undefined);\n\n  React.useEffect(() => {\n    const controller = new AbortController();\n\n    const fetchData = async () => {\n      for (const namespace of STORAGE_CLASS_CONFIG_MAP_NAMESPACES) {\n        try {\n          // eslint-disable-next-line no-await-in-loop\n          const configMap = await k8sGet(ConfigMapModel, STORAGE_CLASS_CONFIG_MAP_NAME, namespace, {\n            signal: controller.signal,\n          });\n          if (configMap && !controller.signal.aborted) {\n            setStorageClassConfigMap(configMap);\n            return;\n          }\n        } catch (e) {\n          if (controller.signal.aborted) {\n            return;\n          }\n        }\n      }\n\n      if (!controller.signal.aborted) {\n        setStorageClassConfigMap(null);\n        const err = `Could not load storage class config map in following namespaces: ${joinGrammaticallyListOfItems(\n          STORAGE_CLASS_CONFIG_MAP_NAMESPACES,\n          'or',\n        )}`;\n        setError(err);\n        // eslint-disable-next-line no-console\n        console.warn(err);\n      }\n    };\n\n    fetchData();\n    return () => controller.abort();\n  }, []);\n\n  const isLoaded = storageClassConfigMap !== undefined;\n\n  return React.useMemo<UseConfigMapResult>(() => [storageClassConfigMap, isLoaded, error], [\n    storageClassConfigMap,\n    isLoaded,\n    error,\n  ]);\n};\n\nexport const useStorageClassConfigMapWrapped = (): FirehoseResult<ConfigMapKind> => {\n  const [data, loaded, loadError] = useStorageClassConfigMap();\n  return React.useMemo<FirehoseResult<ConfigMapKind>>(\n    () => ({\n      loaded,\n      loadError,\n      data,\n    }),\n    [data, loaded, loadError],\n  );\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from 'react';\n\nexport const useCollisionChecker = <T>(\n  entity: T,\n  isEqual: (outdatedEntity: T, newEntity: T) => boolean,\n): useCollisionCheckerValues => {\n  const [initialEntity, setInitialEntity] = React.useState<T>(entity);\n  const [showCollisionAlert, setCollisionAlert] = React.useState<boolean>(false);\n\n  const onReload = React.useCallback(() => {\n    setInitialEntity(entity);\n    setCollisionAlert(false);\n  }, [entity]);\n\n  React.useEffect(() => {\n    if (!isEqual(initialEntity, entity)) {\n      setCollisionAlert(true);\n    }\n  }, [initialEntity, entity]);\n\n  return [showCollisionAlert, onReload];\n};\n\ntype useCollisionCheckerValues = [\n  boolean, // showCollisionAlert\n  () => void, // onReload\n];\n","import * as React from 'react';\nimport { IDEntity } from '../types';\n\nexport const useIDEntities = <T extends IDEntity = IDEntity>(\n  initialEntities: T[] = [],\n): useIDEntitiesValues<T> => {\n  const [entities, setEntities] = React.useState<T[]>(initialEntities);\n  const [initialEntitiesChanged, setInitialEntitiesChanged] = React.useState<boolean>(false);\n\n  const onEntityAdd = React.useCallback(\n    (newEntity: T) => {\n      setInitialEntitiesChanged(true);\n      const id = entities[entities.length - 1]?.id + 1 || 0;\n      setEntities([...entities, { ...newEntity, id }]);\n    },\n    [entities],\n  );\n\n  const onEntityChange = React.useCallback(\n    (updatedEntity: T) => {\n      setInitialEntitiesChanged(true);\n      setEntities(\n        entities.map((entity) => {\n          if (entity.id === updatedEntity.id) {\n            return updatedEntity;\n          }\n          return entity;\n        }),\n      );\n    },\n    [entities],\n  );\n\n  const onEntityDelete = React.useCallback(\n    (idToDelete: number) => {\n      setInitialEntitiesChanged(true);\n      setEntities(entities.filter(({ id }) => id !== idToDelete));\n    },\n    [entities],\n  );\n\n  return [\n    entities,\n    setEntities,\n    onEntityAdd,\n    onEntityChange,\n    onEntityDelete,\n    initialEntitiesChanged,\n  ];\n};\n\ntype useIDEntitiesValues<T> = [\n  T[], // Entities\n  React.Dispatch<React.SetStateAction<T[]>>, // setEntities()\n  (newEntity: T) => void, // addEntity()\n  (updatedEntity: T) => void, // changeEntity()\n  (idToDelete: number) => void, // deleteEntity()\n  boolean, // initialEntitiesChanged\n];\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport { K8sResourceCommon, OwnerReference } from '@console/internal/module/k8s';\nimport { V1Volume } from '../types/vm/disk/V1Volume';\nimport { VolumeReferencedObject, VolumeWrapper } from '../k8s/wrapper/vm/volume-wrapper';\nimport { useK8sWatchResources } from '@console/internal/components/utils/k8s-watch-hook';\nimport { getOwnerReferences } from '@console/shared/src';\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\nimport { K8sResourceWithModel } from '../types/k8s-resource-with-model';\n\nexport const useOwnedVolumeReferencedResources = (\n  initialOwner: OwnerReference,\n  initialNamespace: string,\n  volumes: V1Volume[],\n) => {\n  const volumeOwner = React.useMemo(() => initialOwner, []);\n  const namespace = React.useMemo(() => initialNamespace, []);\n\n  const referencedObjectLookup = React.useMemo(\n    () =>\n      (volumes || []).reduce((acc, volume) => {\n        const ref = new VolumeWrapper(volume).getReferencedObject();\n        if (ref) {\n          acc[volume.name] = ref;\n        }\n        return acc;\n      }, {} as { [key: string]: VolumeReferencedObject }),\n    [volumes],\n  );\n\n  const resourceWatches = React.useMemo(\n    () =>\n      Object.keys(referencedObjectLookup).reduce((acc, volumeName) => {\n        const ref = referencedObjectLookup[volumeName];\n        acc[volumeName] = {\n          name: ref.name,\n          kind: ref.model.kind, // referenceForModel does not work for basic types like Secret, DataVolume\n          namespace,\n          isList: false,\n        };\n        return acc;\n      }, {}),\n    [namespace, referencedObjectLookup],\n  );\n\n  const results = useK8sWatchResources<{ [key: string]: K8sResourceCommon }>(resourceWatches);\n\n  let isLoaded = true;\n\n  const ownedResources = Object.keys(results)\n    .map((volumeName) => {\n      const { data, loaded, loadError } = results[volumeName];\n\n      if (!loaded || loadError) {\n        if (loadError?.json?.code !== 404) {\n          isLoaded = false;\n        }\n        return null;\n      }\n\n      if (\n        !_.isEmpty(data) &&\n        (getOwnerReferences(data) || []).some((ownerReference) =>\n          compareOwnerReference(ownerReference, volumeOwner),\n        )\n      ) {\n        const referencedObject = referencedObjectLookup[volumeName];\n        return {\n          model: referencedObject.model,\n          resource: data,\n        };\n      }\n      return null;\n    })\n    .filter((r) => r);\n\n  return [ownedResources, isLoaded] as [K8sResourceWithModel[], boolean];\n};\n","import * as React from 'react';\n\nexport const useShowErrorToggler = (\n  initialShowError: boolean = false,\n  initialIsValid: boolean = false,\n  checkIsValid?: boolean,\n) => {\n  const [showError, setShowError] = React.useState<boolean>(initialShowError);\n  const [prevIsValid, setPrevIsValid] = React.useState<boolean>(initialIsValid);\n\n  const checkValidity = (isValid: boolean) => {\n    if (isValid !== prevIsValid) {\n      setPrevIsValid(isValid);\n      if (isValid) {\n        setShowError(false);\n      }\n    }\n  };\n\n  if (checkIsValid != null) {\n    checkValidity(checkIsValid);\n  }\n\n  return [showError, setShowError, checkValidity] as [\n    boolean,\n    React.Dispatch<React.SetStateAction<boolean>>,\n    (isValid: boolean) => void,\n  ];\n};\n","import * as React from 'react';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { getCreationTimestamp, getName, getNamespace } from '@console/shared/src/selectors/common';\nimport { VMKind } from '../types/vm';\nimport { VMImportKind } from '../types/vm-import/ovirt/vm-import';\nimport { VirtualMachineImportModel } from '../models';\nimport { VMImportWrappper } from '../k8s/wrapper/vm-import/vm-import-wrapper';\nimport { VMWrapper } from '../k8s/wrapper/vm/vm-wrapper';\n\nexport const useVirtualMachineImport = (vm: VMKind) => {\n  const resourceWatch = React.useMemo(() => {\n    if (!vm) {\n      return null;\n    }\n\n    const vmImportOwnerReference = new VMWrapper(vm).getVMImportOwnerReference();\n\n    if (vmImportOwnerReference) {\n      return {\n        name: vmImportOwnerReference.name,\n        kind: VirtualMachineImportModel.kind,\n        namespace: getNamespace(vm),\n        isList: false,\n      };\n    }\n    return {\n      kind: VirtualMachineImportModel.kind,\n      namespace: getNamespace(vm),\n      isList: true,\n    };\n  }, [vm]);\n  const resourceWatchID = (resourceWatch?.name || '') + +':' + resourceWatch?.namespace; // should be the unique identifier of a query\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const resourceWatchWithVMChangesMemoized = React.useMemo(() => resourceWatch, [resourceWatchID]);\n\n  const [data, loaded, loadError] = useK8sWatchResource<VMImportKind | VMImportKind[]>(\n    resourceWatchWithVMChangesMemoized,\n  );\n\n  if (!resourceWatch) {\n    return [null, true] as [VMImportKind, boolean];\n  }\n\n  let vmImport;\n  if (resourceWatch.isList) {\n    // eslint-disable-next-line prefer-destructuring\n    vmImport = ((data as VMImportKind[]) || [])\n      .filter((vi) => new VMImportWrappper(vi).getResolvedVMTargetName() === getName(vm))\n      .sort((a, b) => (getCreationTimestamp(a) > getCreationTimestamp(b) ? -1 : 1))[0];\n  } else {\n    vmImport = loadError ? null : data;\n  }\n\n  return [vmImport, loaded || !!loadError] as [VMImportKind, boolean];\n};\n","import * as React from 'react';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { getName, getNamespace } from '@console/shared/src/selectors/common';\nimport { VMLikeEntityKind } from '../types/vmLike';\nimport { getVMLikeModel } from '../selectors/vm';\n\nexport const useUpToDateVMLikeEntity = (vmLikeEntity: VMLikeEntityKind): VMLikeEntityKind => {\n  const vmName = getName(vmLikeEntity);\n  const namespace = getNamespace(vmLikeEntity);\n  const model = getVMLikeModel(vmLikeEntity);\n  const resourceWatch = React.useMemo(() => {\n    return {\n      name: vmName,\n      kind: model.kind,\n      namespace,\n      isList: false,\n    };\n  }, [model.kind, namespace, vmName]);\n\n  const [data, loaded, loadError] = useK8sWatchResource(resourceWatch);\n\n  if (loadError) {\n    return null;\n  }\n\n  if (!loaded) {\n    return vmLikeEntity;\n  }\n  return data as VMLikeEntityKind;\n};\n","import { K8sResourceKind } from '@console/internal/module/k8s';\nimport { createBasicLookup, getName, getNamespace } from '@console/shared';\nimport { VMKind } from '../../types/vm';\nimport { getBasicID, joinIDs } from '../../utils';\nimport {\n  getPvcAccessModes,\n  getPvcStorageClassName,\n  getPvcStorageSize,\n  getPvcVolumeMode,\n} from '../../selectors/pvc/selectors';\nimport { DataVolumeTemplate } from '../objects/vm/datavolume-template';\nimport {\n  getOperatingSystem,\n  getOperatingSystemName,\n  getVolumeDataVolumeName,\n  getVolumePersistentVolumeClaimName,\n} from '../../selectors/vm';\nimport {\n  getDataVolumeAccessModes,\n  getDataVolumeStorageClassName,\n  getDataVolumeStorageSize,\n  getDataVolumeVolumeMode,\n} from '../../selectors/dv/selectors';\nimport {\n  ANNOTATION_DESCRIPTION,\n  TEMPLATE_OS_NAME_ANNOTATION,\n  TEMPLATE_VM_NAME_LABEL,\n} from '../../constants/vm';\nimport { VMWrapper } from '../wrapper/vm/vm-wrapper';\n\nexport type CloneTo = {\n  name: string;\n  namespace: string;\n  description: string;\n  startVM?: boolean;\n};\n\nexport class VMClone {\n  private vm: VMWrapper;\n\n  private oldVMNamespace: string;\n\n  constructor(vm: VMKind, values: CloneTo) {\n    this.vm = new VMWrapper(vm, true);\n    this.oldVMNamespace = getNamespace(vm);\n    this.cleanVM();\n    this.setValues(values);\n  }\n\n  private cleanVM = () => {\n    const data = this.vm.asResource();\n    const { metadata, spec } = data;\n\n    if (metadata) {\n      delete metadata.selfLink;\n      delete metadata.resourceVersion;\n      delete metadata.uid;\n      delete metadata.creationTimestamp;\n      delete metadata.generation;\n    }\n\n    if (spec.template.spec.domain) {\n      delete spec.template.spec.domain.firmware;\n    }\n    delete data.status;\n    spec.dataVolumeTemplates = [];\n\n    this.vm.getNetworkInterfaces().forEach((intface) => delete intface.macAddress);\n  };\n\n  private setValues({ name, namespace, description, startVM = false }: CloneTo) {\n    const data = this.vm.asResource();\n    const osId = getOperatingSystem(data);\n    const osName = getOperatingSystemName(data);\n\n    this.vm.setName(name);\n    this.vm.setNamespace(namespace);\n    this.vm.setRunning(startVM);\n\n    if (description) {\n      this.vm.addAnotation(ANNOTATION_DESCRIPTION, description);\n    }\n    if (osId && osName) {\n      this.vm.addAnotation(`${TEMPLATE_OS_NAME_ANNOTATION}/${osId}`, osName);\n    }\n\n    this.vm.addTemplateLabel(TEMPLATE_VM_NAME_LABEL, name);\n    return this;\n  }\n\n  withClonedPVCs = (persistentVolumeClaimsToClone: K8sResourceKind[]) => {\n    const pvcLookup = createBasicLookup(persistentVolumeClaimsToClone, getBasicID);\n    const name = this.vm.getName();\n\n    this.vm\n      .getVolumes()\n      .filter(getVolumePersistentVolumeClaimName)\n      .forEach((volume) => {\n        const pvcName = getVolumePersistentVolumeClaimName(volume);\n        delete volume.persistentVolumeClaim;\n\n        const pvc = pvcLookup[`${this.oldVMNamespace}-${pvcName}`];\n\n        if (pvc) {\n          const clonedDVTemplate = new DataVolumeTemplate({\n            name: joinIDs(name, pvcName, 'clone'),\n            pvcSourceName: pvcName,\n            pvcSourceNamespace: this.oldVMNamespace,\n            accessModes: getPvcAccessModes(pvc),\n            volumeMode: getPvcVolumeMode(pvc),\n            size: getPvcStorageSize(pvc),\n            storageClassName: getPvcStorageClassName(pvc),\n          }).build();\n\n          this.vm.ensureDataVolumeTemplates().push(clonedDVTemplate);\n\n          volume.dataVolume = {\n            name: getName(clonedDVTemplate),\n          };\n        }\n      });\n    return this;\n  };\n\n  withClonedDataVolumes = (dataVolumes: K8sResourceKind[]) => {\n    const dvLookup = createBasicLookup(dataVolumes, getBasicID);\n    const name = this.vm.getName();\n\n    this.vm\n      .getVolumes()\n      .filter(getVolumeDataVolumeName)\n      .forEach((volume) => {\n        const dvName = getVolumeDataVolumeName(volume);\n        const dataVolume = dvLookup[`${this.oldVMNamespace}-${dvName}`];\n\n        if (dataVolume) {\n          const clonedDVTemplate = new DataVolumeTemplate({\n            name: joinIDs(name, dvName, 'clone'),\n            pvcSourceName: dvName,\n            pvcSourceNamespace: this.oldVMNamespace,\n            accessModes: getDataVolumeAccessModes(dataVolume),\n            volumeMode: getDataVolumeVolumeMode(dataVolume),\n            size: getDataVolumeStorageSize(dataVolume),\n            storageClassName: getDataVolumeStorageClassName(dataVolume),\n          }).build();\n\n          this.vm.ensureDataVolumeTemplates().push(clonedDVTemplate);\n\n          volume.dataVolume = {\n            name: getName(clonedDVTemplate),\n          };\n        }\n      });\n    return this;\n  };\n\n  build() {\n    const result = this.vm.asResource(true);\n    // in case withClonedPVCs was not called\n    if (this.vm.getVolumes(null)) {\n      result.spec.template.spec.volumes = result.spec.template.spec.volumes.filter(\n        (v) => !getVolumePersistentVolumeClaimName(v),\n      );\n    }\n    return result;\n  }\n}\n","import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\n\ntype DataVolumeTemplateArgs = {\n  name: string;\n  pvcSourceName: string;\n  pvcSourceNamespace: string;\n  accessModes?: string[] | object[];\n  volumeMode: string;\n  size: string;\n  unit?: string;\n  storageClassName?: string;\n};\n\n/**\n * @deprecated FIXME deprecate in favor of DataVolumeWrapper\n */\nexport class DataVolumeTemplate {\n  private data: K8sResourceKind;\n\n  constructor({\n    name,\n    pvcSourceName,\n    pvcSourceNamespace,\n    accessModes,\n    volumeMode,\n    size,\n    unit,\n    storageClassName,\n  }: DataVolumeTemplateArgs) {\n    this.data = {\n      metadata: {\n        name,\n      },\n      spec: {\n        source: {\n          pvc: {\n            name: pvcSourceName,\n            namespace: pvcSourceNamespace,\n          },\n        },\n        pvc: {\n          accessModes: _.cloneDeep(accessModes),\n          volumeMode,\n          resources: {\n            requests: {\n              storage: size && unit ? `${size}${unit}` : size,\n            },\n          },\n          storageClassName,\n        },\n      },\n    };\n  }\n\n  build = () => _.cloneDeep(this.data);\n}\n","import * as _ from 'lodash';\nimport { getName, getNamespace } from '@console/shared';\nimport { apiVersionForModel, K8sResourceKind } from '@console/internal/module/k8s';\nimport { VMIKind } from '../../../types/vm';\nimport { VirtualMachineInstanceMigrationModel } from '../../../models';\n\n/**\n * @deprecated FIXME deprecate in favor of VMIMigrationWrapper\n */\nexport class VMIMigration {\n  private data: K8sResourceKind;\n\n  constructor() {\n    this.data = {\n      apiVersion: apiVersionForModel(VirtualMachineInstanceMigrationModel),\n      kind: VirtualMachineInstanceMigrationModel.kind,\n      metadata: {\n        generateName: null,\n        namespace: null,\n      },\n      spec: {\n        vmiName: null,\n      },\n    };\n  }\n\n  setName(name) {\n    this.data.metadata.generateName = `${name}-`;\n    return this;\n  }\n\n  setVMI(vmi: VMIKind) {\n    this.data.metadata.namespace = getNamespace(vmi);\n    this.data.spec.vmiName = getName(vmi);\n    return this;\n  }\n\n  build() {\n    return _.cloneDeep(this.data);\n  }\n}\n","import * as _ from 'lodash';\nimport { TemplateKind, Patch } from '@console/internal/module/k8s';\nimport { VMLikeEntityKind } from '../../../types/vmLike';\nimport { VMKind } from '../../../types/vm';\nimport { isVM } from '../../../selectors/check-type';\nimport { selectVM } from '../../../selectors/vm-template/basic';\n\nexport const addPrefixToPatch = (prefix: string, patch: Patch): Patch => ({\n  ...patch,\n  path: `${prefix}${patch.path}`,\n});\n\nexport const getTemplatePatchPrefix = (vmTemplate: TemplateKind, vm: VMKind): string => {\n  const vmIndex = vmTemplate.objects.indexOf(vm);\n  return vmIndex < 0 ? null : `/objects/${vmIndex}`;\n};\n\nexport const getVMLikePatches = (\n  vmLikeEntity: VMLikeEntityKind,\n  patchesSupplier: (vm: VMKind) => Patch[],\n): Patch[] => {\n  let vm;\n  let templatePrefix = null;\n  if (isVM(vmLikeEntity)) {\n    vm = vmLikeEntity;\n  } else {\n    vm = selectVM(vmLikeEntity as TemplateKind);\n    templatePrefix = getTemplatePatchPrefix(vmLikeEntity as TemplateKind, vm);\n  }\n\n  const patches = _.compact(vm ? patchesSupplier(vm) : []);\n\n  return templatePrefix ? patches.map((p) => addPrefixToPatch(templatePrefix, p)) : patches;\n};\n","import { getAnnotations } from '@console/shared';\nimport { PatchBuilder } from '@console/shared/src/k8s';\nimport { ANNOTATION_FIRST_BOOT, BOOT_ORDER_FIRST, BOOT_ORDER_SECOND } from '../../../constants/vm';\nimport { getBootDeviceIndex, getDisks, getInterfaces } from '../../../selectors/vm';\nimport { VMKind } from '../../../types/vm';\n\nexport const getPxeBootPatch = (vm: VMKind) => {\n  const patches = [];\n  const annotations = getAnnotations(vm);\n  if (annotations && annotations[ANNOTATION_FIRST_BOOT]) {\n    if (annotations[ANNOTATION_FIRST_BOOT] === 'true') {\n      patches.push(\n        new PatchBuilder('/metadata/annotations')\n          .setObjectUpdate(ANNOTATION_FIRST_BOOT, 'false', annotations)\n          .build(),\n      );\n    } else {\n      // find bootable disk and change boot order\n      const bootableDiskIndex = getBootDeviceIndex(getDisks(vm), BOOT_ORDER_SECOND);\n      const bootableInterfaceIndex = getBootDeviceIndex(getInterfaces(vm), BOOT_ORDER_FIRST);\n\n      if (bootableDiskIndex !== -1 && bootableInterfaceIndex !== -1) {\n        patches.push(\n          new PatchBuilder(\n            `/spec/template/spec/domain/devices/disks/${bootableDiskIndex}/bootOrder`,\n          )\n            .replace(BOOT_ORDER_FIRST)\n            .build(),\n\n          new PatchBuilder(\n            `/spec/template/spec/domain/devices/interfaces/${bootableInterfaceIndex}/bootOrder`,\n          )\n            .remove()\n            .build(),\n        );\n      }\n    }\n  }\n  return patches;\n};\n","import { last, includes } from 'lodash';\nimport { getName } from '@console/shared';\nimport { ConfigMapKind, Volume } from '@console/internal/module/k8s';\nimport { PatchBuilder } from '@console/shared/src/k8s';\nimport { StorageType } from '../../../components/modals/cdrom-vm-modal/constants';\nimport { DataVolumeWrapper } from '../../wrapper/vm/data-volume-wrapper';\nimport {\n  getDefaultSCAccessModes,\n  getDefaultSCVolumeMode,\n} from '../../../selectors/config-map/sc-defaults';\nimport { VMLikeEntityKind } from '../../../types/vmLike';\nimport {\n  getVolumes,\n  getDataVolumeTemplates,\n  getDisks,\n  getVolumeDataVolumeName,\n  asVM,\n  getBootableDevicesInOrder,\n} from '../../../selectors/vm';\nimport { getVMLikePatches } from '../vm-template';\nimport { BOOT_ORDER_FIRST, BOOT_ORDER_SECOND, DiskBus } from '../../../constants';\nimport { CD } from '../../../components/modals/cdrom-vm-modal/types';\n\nconst getNextAvailableBootOrderIndex = (vm: VMLikeEntityKind) => {\n  const sortedBootableDevices = getBootableDevicesInOrder(vm);\n  const numBootableDevices = sortedBootableDevices.length;\n  const lastBootableDevice: any = last(sortedBootableDevices);\n\n  // assigned indexes start at two as the first index is assigned directly by the user\n  return numBootableDevices > 0 ? lastBootableDevice.value.bootOrder + 1 : BOOT_ORDER_SECOND;\n};\n\nconst assignBootOrderIndex = (vm: VMLikeEntityKind, currDevBootOrder = -1) => {\n  let bootOrder = currDevBootOrder;\n  if (currDevBootOrder !== BOOT_ORDER_FIRST) {\n    bootOrder = getNextAvailableBootOrderIndex(vm);\n  }\n  return bootOrder;\n};\n\nexport const getCDsPatch = (\n  vm: VMLikeEntityKind,\n  cds: CD[],\n  storageClassConfigMap: ConfigMapKind,\n) => {\n  let newBootOrder = assignBootOrderIndex(asVM(vm));\n\n  let DISKS = getDisks(asVM(vm)).filter(\n    (disk) => !disk.cdrom || cds.find((modalCD) => disk.name === modalCD.name || modalCD.newCD),\n  );\n  let VOLS = getVolumes(asVM(vm)).filter((v) => DISKS.find((disk) => v.name === disk.name));\n  let DATATEMPLATES = getDataVolumeTemplates(asVM(vm)).filter((dataVol) =>\n    VOLS.find((vol) => getVolumeDataVolumeName(vol) === getName(dataVol)),\n  );\n\n  cds.forEach(\n    ({ name, pvc, type, bootOrder, bus, container, windowsTools, url, storageClass, size }) => {\n      const existingCD = !!bootOrder;\n\n      const disk: CD = {\n        name,\n        bootOrder: existingCD ? bootOrder : newBootOrder,\n        cdrom: { bus: bus || DiskBus.SATA.getValue() },\n      };\n      let volume: Volume = { name };\n      let finalDataVolume;\n\n      // Patches\n      if (type === StorageType.PVC) {\n        volume = {\n          persistentVolumeClaim: {\n            claimName: pvc,\n          },\n          name,\n        };\n      }\n\n      if (type === StorageType.URL) {\n        const newDataVolume = {\n          metadata: {\n            name: `${getName(vm)}-${name}`,\n          },\n          spec: {\n            pvc: {\n              accessModes: undefined,\n              volumeMode: undefined,\n              resources: {\n                requests: {\n                  storage: `${size}Gi`,\n                },\n              },\n              storageClassName: storageClass,\n            },\n            source: { http: { url } },\n          },\n        };\n\n        const dataVolumeWrapper = new DataVolumeWrapper(newDataVolume);\n        const storageClassName = dataVolumeWrapper.getStorageClassName();\n\n        finalDataVolume = dataVolumeWrapper\n          .setVolumeMode(getDefaultSCVolumeMode(storageClassConfigMap, storageClassName))\n          .setAccessModes(getDefaultSCAccessModes(storageClassConfigMap, storageClassName))\n          .asResource();\n\n        volume = {\n          name,\n          dataVolume: {\n            name: `${getName(vm)}-${name}`,\n          },\n        };\n      }\n      if (type === StorageType.CONTAINER) {\n        volume = { name, containerDisk: { image: container } };\n      }\n      if (type === StorageType.WINTOOLS) {\n        volume = { name, containerDisk: { image: windowsTools } };\n      }\n\n      const restOfDisks = DISKS.filter((vol) => vol.name !== name);\n      const restOfVolumes = VOLS.filter((vol) => vol.name !== name);\n\n      let restOfDataTemplates = DATATEMPLATES;\n      if (type !== StorageType.CONTAINER && VOLS.filter((vol) => !!vol.dataVolume).length > 0) {\n        const isDataVolume = VOLS.find((vol) => vol.name === name);\n        if (isDataVolume) {\n          restOfDataTemplates = DATATEMPLATES.filter(\n            (vol) => vol.metadata.name !== getVolumeDataVolumeName(isDataVolume),\n          );\n        }\n      }\n\n      DISKS = [...restOfDisks, disk];\n      VOLS = [...restOfVolumes, volume];\n      DATATEMPLATES = restOfDataTemplates;\n\n      if (finalDataVolume) {\n        DATATEMPLATES = [...restOfDataTemplates, finalDataVolume];\n      }\n\n      if (type !== StorageType.URL) {\n        // remove unnecessary dataVolumeTemplates\n        DATATEMPLATES = DATATEMPLATES.filter((dataVol) =>\n          includes(\n            VOLS.map((vol) => getVolumeDataVolumeName(vol)),\n            dataVol.metadata.name,\n          ),\n        );\n      }\n      if (!existingCD) {\n        newBootOrder++;\n      }\n    },\n  );\n\n  const patches = [\n    new PatchBuilder('/spec/template/spec/domain/devices/disks').replace(DISKS).build(),\n    new PatchBuilder('/spec/template/spec/volumes').replace(VOLS).build(),\n    new PatchBuilder('/spec/dataVolumeTemplates').replace(DATATEMPLATES).build(),\n  ].filter((patch) => patch);\n\n  return getVMLikePatches(vm, () => patches);\n};\n","import { PatchBuilder } from '@console/shared/src/k8s';\nimport { Patch } from '@console/internal/module/k8s';\nimport { VMLikeEntityKind } from '../../../types/vmLike';\nimport { getVMLikePatches } from '../vm-template';\nimport {\n  getCPU,\n  getResourcesRequestsCPUCount,\n  getResourcesLimitsCPUCount,\n  asVM,\n} from '../../../selectors/vm';\n\nexport const getDedicatedCpuPatch = (\n  vmLikeEntity: VMLikeEntityKind,\n  dedicatedCpuPlacement: boolean,\n): Patch[] => {\n  const vm = asVM(vmLikeEntity);\n  const isCPUAvailable = !!getCPU(vm);\n  const patches = [];\n\n  if (isCPUAvailable) {\n    patches.push(\n      new PatchBuilder('/spec/template/spec/domain/cpu/dedicatedCpuPlacement')\n        .replace(dedicatedCpuPlacement)\n        .build(),\n    );\n  } else {\n    const resourcesCPU = getResourcesRequestsCPUCount(vm) || getResourcesLimitsCPUCount(vm);\n    patches.push(\n      new PatchBuilder('/spec/template/spec/domain/cpu')\n        .replace(resourcesCPU ? { dedicatedCpuPlacement } : { cores: 1, dedicatedCpuPlacement })\n        .build(),\n    );\n  }\n\n  return getVMLikePatches(vmLikeEntity, () => patches);\n};\n","import * as _ from 'lodash';\nimport { Patch, TemplateKind } from '@console/internal/module/k8s';\nimport { VMGenericLikeEntityKind, VMLikeEntityKind } from '../../../types/vmLike';\nimport { getAnnotations, getDescription } from '../../../selectors/selectors';\nimport { getFlavor, getCPU, getMemory, parseCPU, DEFAULT_CPU } from '../../../selectors/vm';\nimport { isTemplate, isVM } from '../../../selectors/check-type';\nimport { TEMPLATE_FLAVOR_LABEL, TEMPLATE_VM_SIZE_LABEL } from '../../../constants';\nimport { getVMLikePatches } from '../vm-template';\nimport { selectVM } from '../../../selectors/vm-template/basic';\nimport { CPU, VMITemplate, VMKind } from '../../../types/vm';\nimport { PatchBuilder } from '@console/shared/src/k8s';\nimport { getLabels } from '@console/shared/src';\nimport { isCustomFlavor } from '../../../selectors/vm-like/flavor';\n\nconst getDomainPatches = (vm: VMKind): Patch[] => {\n  let patch: Patch = null;\n  if (!_.has(vm, 'spec')) {\n    patch = {\n      op: 'add',\n      path: '/spec',\n      value: {\n        template: {\n          spec: {\n            domain: {},\n          },\n        },\n      },\n    };\n  } else if (!_.has(vm.spec, 'template')) {\n    patch = {\n      op: 'add',\n      path: '/spec/template',\n      value: {\n        spec: {\n          domain: {},\n        },\n      },\n    };\n  } else if (!_.has(vm.spec.template, 'spec')) {\n    patch = {\n      op: 'add',\n      path: '/spec/template/spec',\n      value: {\n        domain: {},\n      },\n    };\n  } else if (!_.has(vm.spec.template.spec, 'domain')) {\n    patch = {\n      op: 'add',\n      path: '/spec/template/spec/domain',\n      value: {},\n    };\n  }\n  return patch ? [patch] : [];\n};\n\nconst getUpdateFlavorPatchesImpl = (\n  vmLike: VMLikeEntityKind | VMITemplate,\n  oldFlavor,\n  newFlavor: string,\n): Patch[] => {\n  const path =\n    isVM(vmLike) || isTemplate(vmLike) ? '/metadata/labels' : '/spec/template/metadata/labels'; // or VMITemplate\n\n  const patches = [];\n  // also remove old unused Custom labels\n  if (isCustomFlavor(newFlavor) || oldFlavor !== newFlavor) {\n    const labels = getLabels(vmLike);\n    const flavorLabel = Object.keys(labels || {}).find((key) =>\n      key.startsWith(TEMPLATE_FLAVOR_LABEL),\n    );\n    if (flavorLabel) {\n      patches.push(new PatchBuilder(path).setObjectRemove(flavorLabel, labels).build());\n    }\n    if (!isCustomFlavor(newFlavor)) {\n      patches.push(\n        new PatchBuilder(path)\n          .setObjectUpdate(`${TEMPLATE_FLAVOR_LABEL}/${newFlavor}`, 'true', labels)\n          .build(),\n      );\n    }\n  }\n  return patches;\n};\n\nconst getMemoryPatch = (vm: VMKind, memory: string): Patch => {\n  if (!_.has(vm.spec, 'template.spec.domain.resources')) {\n    return {\n      op: 'add',\n      path: '/spec/template/spec/domain/resources',\n      value: {\n        requests: {\n          memory,\n        },\n      },\n    };\n  }\n  if (!_.has(vm.spec, 'template.spec.domain.resources.requests')) {\n    return {\n      op: 'add',\n      path: '/spec/template/spec/domain/resources/requests',\n      value: {\n        memory,\n      },\n    };\n  }\n  return {\n    op: _.has(vm.spec, 'template.spec.domain.resources.requests.memory') ? 'replace' : 'add',\n    path: '/spec/template/spec/domain/resources/requests/memory',\n    value: memory,\n  };\n};\n\nconst getUpdateCpuMemoryPatch = (vm: VMKind, cpu: CPU, memory: string): Patch[] => {\n  const patches = [];\n  const oldCPU = getCPU(vm);\n  const vmMemory = getMemory(vm);\n\n  patches.push(\n    new PatchBuilder('/spec/template/spec/domain/cpu')\n      .setObjectUpdate('sockets', cpu?.sockets, oldCPU)\n      .build(),\n  );\n  patches.push(\n    new PatchBuilder('/spec/template/spec/domain/cpu')\n      .setObjectUpdate('threads', cpu?.threads, oldCPU || {}) // created by the patch before\n      .build(),\n  );\n  patches.push(\n    new PatchBuilder('/spec/template/spec/domain/cpu')\n      .setObjectUpdate('cores', cpu?.cores, oldCPU || {})\n      .build(),\n  );\n\n  if (memory !== vmMemory) {\n    patches.push(getMemoryPatch(vm, memory));\n  }\n\n  return patches.length > 0 ? [...getDomainPatches(vm), ...patches] : patches;\n};\n\nexport const getUpdateDescriptionPatches = (\n  vmLikeEntity: VMGenericLikeEntityKind,\n  description: string,\n): Patch[] => {\n  const patches = [];\n  const oldDescription = getDescription(vmLikeEntity);\n  const annotations = getAnnotations(vmLikeEntity, null);\n\n  if (description !== oldDescription) {\n    if (!description && oldDescription) {\n      patches.push({\n        op: 'remove',\n        path: '/metadata/annotations/description',\n      });\n    } else if (!annotations) {\n      patches.push({\n        op: 'add',\n        path: '/metadata/annotations',\n        value: {\n          description,\n        },\n      });\n    } else {\n      patches.push({\n        op: oldDescription ? 'replace' : 'add',\n        path: '/metadata/annotations/description',\n        value: description,\n      });\n    }\n  }\n  return patches;\n};\n\nconst getSizeLabelPatch = (flavor: string, vmi: VMITemplate): Patch[] => {\n  const patches = [];\n\n  if (isCustomFlavor(flavor)) {\n    patches.push(\n      new PatchBuilder('/spec/template/metadata/labels')\n        .setObjectRemove(TEMPLATE_VM_SIZE_LABEL, getLabels(vmi))\n        .build(),\n    );\n  } else {\n    patches.push(\n      new PatchBuilder('/spec/template/metadata/labels')\n        .setObjectUpdate(TEMPLATE_VM_SIZE_LABEL, flavor, getLabels(vmi))\n        .build(),\n    );\n  }\n\n  return patches;\n};\n\nexport const getUpdateFlavorPatches = (\n  vmLike: VMLikeEntityKind,\n  template: TemplateKind,\n  flavor: string,\n  cpu?: number,\n  mem?: string,\n): Patch[] => {\n  const oldFlavor = getFlavor(vmLike);\n  let customCpu = {\n    sockets: 1,\n    cores: cpu,\n    threads: 1,\n  };\n  let customMem = mem;\n  if (!isCustomFlavor(flavor)) {\n    const templateVm = selectVM(template);\n    customCpu = parseCPU(getCPU(templateVm), DEFAULT_CPU);\n    customMem = getMemory(templateVm);\n  }\n\n  return [\n    ...getUpdateFlavorPatchesImpl(vmLike, oldFlavor, flavor),\n    ...getVMLikePatches(vmLike, (vm: VMKind) => {\n      const vmi = vm.spec?.template;\n      const additionalPatches = [\n        ...getSizeLabelPatch(flavor, vmi),\n        ...getUpdateCpuMemoryPatch(vm, customCpu, customMem),\n      ];\n\n      if (isVM(vmLike)) {\n        additionalPatches.push(...getUpdateFlavorPatchesImpl(vmi, oldFlavor, flavor));\n      }\n      return additionalPatches;\n    }),\n  ];\n};\n","import { PatchBuilder } from '@console/shared/src/k8s';\nimport { Patch, Toleration } from '@console/internal/module/k8s';\nimport { NodeSelector } from '../../../types/vm';\nimport { VMLikeEntityKind } from '../../../types/vmLike';\nimport { getVMLikePatches } from '../vm-template';\nimport { Affinity } from '../../../components/modals/scheduling-modals/affinity-modal/types';\n\nexport const getNodeSelectorPatches = (\n  vmLikeEntity: VMLikeEntityKind,\n  selectors: NodeSelector,\n): Patch[] =>\n  getVMLikePatches(vmLikeEntity, () => [\n    new PatchBuilder('/spec/template/spec/nodeSelector').replace(selectors).build(),\n  ]);\n\nexport const getTolerationsPatch = (\n  vmLikeEntity: VMLikeEntityKind,\n  tolerations: Toleration[],\n): Patch[] => {\n  const tolerationsWithOperator = tolerations.map(({ effect, key, tolerationSeconds, value }) => ({\n    key,\n    value,\n    effect,\n    operator: value ? 'Equal' : 'Exists',\n    tolerationSeconds,\n  }));\n\n  return getVMLikePatches(vmLikeEntity, () => [\n    new PatchBuilder('/spec/template/spec/tolerations').replace(tolerationsWithOperator).build(),\n  ]);\n};\n\nexport const getAffinityPatch = (vmLikeEntity: VMLikeEntityKind, affinity: Affinity): Patch[] =>\n  affinity\n    ? getVMLikePatches(vmLikeEntity, () => [\n        new PatchBuilder('/spec/template/spec/affinity').replace(affinity).build(),\n      ])\n    : getVMLikePatches(vmLikeEntity, () => [\n        new PatchBuilder('/spec/template/spec/affinity').remove().build(),\n      ]);\n","import { k8sKill, k8sPatch, OwnerReference } from '@console/internal/module/k8s';\nimport { PatchBuilder } from '@console/shared/src/k8s';\nimport { getOwnerReferences } from '@console/shared/src';\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\nimport { K8sResourceWithModel } from '../../types/k8s-resource-with-model';\n\nexport const freeOwnedResources = async (\n  ownedResources: K8sResourceWithModel[],\n  owner: OwnerReference,\n  doDelete: boolean,\n) => {\n  const freePromises = (ownedResources || [])\n    .filter((res) => res)\n    .map(({ model, resource: ownedResource }) => {\n      if (doDelete) {\n        return k8sKill(model, ownedResource);\n      }\n      return k8sPatch(model, ownedResource, [\n        new PatchBuilder('/metadata/ownerReferences')\n          .setListRemove(getOwnerReferences(ownedResource), (ownerReference) =>\n            compareOwnerReference(ownerReference, owner),\n          )\n          .build(),\n      ]);\n    });\n\n  return Promise.all(freePromises);\n};\n","import { k8sKill, K8sKind, K8sResourceCommon } from '@console/internal/module/k8s';\n\nexport const k8sKillPropagated = (model: K8sKind, resource: K8sResourceCommon, opts = {}) => {\n  const { propagationPolicy } = model;\n  const json = propagationPolicy\n    ? { kind: 'DeleteOptions', apiVersion: 'v1', propagationPolicy }\n    : null;\n  return k8sKill(model, resource, opts, json);\n};\n","import {\n  apiVersionForModel,\n  k8sGet,\n  k8sKill,\n  k8sPatch,\n  resourceURL,\n} from '@console/internal/module/k8s';\nimport { getName, getNamespace, getDeletetionTimestamp } from '@console/shared/src';\nimport { coFetch } from '@console/internal/co-fetch';\nimport { getPxeBootPatch } from '../../patches/vm/vm-boot-patches';\nimport { VirtualMachineImportModel, VirtualMachineModel } from '../../../models';\nimport { VMKind } from '../../../types/vm';\nimport { VMWrapper } from '../../wrapper/vm/vm-wrapper';\nimport { freeOwnedResources } from '../free-owned-resources';\nimport { VMImportKind } from '../../../types/vm-import/ovirt/vm-import';\nimport { K8sResourceWithModel } from '../../../types/k8s-resource-with-model';\n\nexport enum VMActionType {\n  Start = 'start',\n  Stop = 'stop',\n  Restart = 'restart',\n}\n\nconst VMActionRequest = async (vm: VMKind, action: VMActionType) => {\n  const method = 'PUT';\n  let url = resourceURL(\n    { ...VirtualMachineModel, apiGroup: `subresources.${VirtualMachineModel.apiGroup}` },\n    {\n      ns: getNamespace(vm),\n      name: getName(vm),\n    },\n  );\n\n  url = `${url}/${action}`;\n\n  const response = await coFetch(url, { method });\n  const text = await response.text();\n\n  return text;\n};\n\nexport const VMActionWithPXERequest = async (vm: VMKind, action: VMActionType) => {\n  // handle PXE boot (kubevirt.ui/firstBoot annotation)\n  const pxePatch = getPxeBootPatch(vm);\n  if (pxePatch.length > 0) {\n    await k8sPatch(VirtualMachineModel, vm, pxePatch);\n  }\n  return VMActionRequest(vm, action);\n};\n\nexport const startVM = async (vm: VMKind) => VMActionWithPXERequest(vm, VMActionType.Start);\nexport const stopVM = async (vm: VMKind) => VMActionRequest(vm, VMActionType.Stop);\nexport const restartVM = async (vm: VMKind) => VMActionWithPXERequest(vm, VMActionType.Restart);\n\nexport const deleteVM = async (\n  vm: VMKind,\n  {\n    vmImport,\n    deleteVMImport,\n    ownedVolumeResources,\n    deleteOwnedVolumeResources,\n  }: {\n    vmImport: VMImportKind;\n    deleteVMImport: boolean;\n    ownedVolumeResources: K8sResourceWithModel[];\n    deleteOwnedVolumeResources: boolean;\n  },\n) => {\n  if (ownedVolumeResources && !deleteOwnedVolumeResources) {\n    await freeOwnedResources(\n      ownedVolumeResources,\n      {\n        name: getName(vm),\n        kind: VirtualMachineModel.kind,\n        apiVersion: apiVersionForModel(VirtualMachineModel),\n      } as any,\n      false,\n    );\n  }\n\n  if (vmImport && deleteVMImport) {\n    await k8sKill(VirtualMachineImportModel, vmImport);\n    if (new VMWrapper(vm).getVMImportOwnerReference()) {\n      try {\n        const deletingVM = await k8sGet(VirtualMachineModel, getName(vm), getNamespace(vm));\n        if (deletingVM && !getDeletetionTimestamp(deletingVM)) {\n          // just lost reference - kill again\n          await k8sKill(VirtualMachineModel, vm);\n        }\n      } catch (ignored) {\n        // 404 expected\n      }\n    } else {\n      await k8sKill(VirtualMachineModel, vm);\n    }\n  } else {\n    await k8sKill(VirtualMachineModel, vm);\n  }\n};\n","import { k8sCreate, K8sResourceKind } from '@console/internal/module/k8s';\nimport { VMKind } from '../../../types/vm';\nimport { VirtualMachineModel } from '../../../models';\nimport { CloneTo, VMClone } from '../../helpers/vm-clone';\nimport { isVMExpectedRunning } from '../../../selectors/vm';\nimport { stopVM } from './actions';\n\ntype CloneFrom = {\n  vm: VMKind;\n  persistentVolumeClaims: K8sResourceKind[];\n  dataVolumes: K8sResourceKind[];\n};\n\nexport const cloneVM = async (\n  { vm, persistentVolumeClaims, dataVolumes }: CloneFrom,\n  cloneTo: CloneTo,\n) => {\n  if (isVMExpectedRunning(vm)) {\n    await stopVM(vm);\n  }\n\n  const vmClone = new VMClone(vm, cloneTo)\n    .withClonedPVCs(persistentVolumeClaims)\n    .withClonedDataVolumes(dataVolumes)\n    .build();\n\n  return k8sCreate(VirtualMachineModel, vmClone);\n};\n","export * from './actions';\n","import { coFetch } from '@console/internal/co-fetch';\nimport { resourceURL } from '@console/internal/module/k8s';\nimport { getName, getNamespace } from '@console/shared';\nimport { VirtualMachineInstanceModel } from '../../../models';\nimport { VMIKind } from '../../../types/vm';\n\nexport enum VMIActionType {\n  Unpause = 'unpause',\n}\n\nconst VMIActionRequest = async (vmi: VMIKind, action: VMIActionType) => {\n  const method = 'PUT';\n  let url = resourceURL(\n    {\n      ...VirtualMachineInstanceModel,\n      apiGroup: `subresources.${VirtualMachineInstanceModel.apiGroup}`,\n    },\n    {\n      ns: getNamespace(vmi),\n      name: getName(vmi),\n    },\n  );\n\n  url = `${url}/${action}`;\n\n  const response = await coFetch(url, { method });\n  const text = await response.text();\n\n  return text;\n};\n\nexport const unpauseVMI = async (vmi: VMIKind) => VMIActionRequest(vmi, VMIActionType.Unpause);\n","export * from './migration';\n","import { getName } from '@console/shared';\nimport { k8sCreate } from '@console/internal/module/k8s';\nimport { VMIKind } from '../../../types/vm';\nimport { VirtualMachineInstanceMigrationModel } from '../../../models';\nimport { prefixedID } from '../../../utils';\nimport { VMIMigration } from '../../objects/vmi-migration/vmi-migration';\n\nexport const getMigrationName = (vmi: VMIKind) => prefixedID(getName(vmi), 'migration');\n\nexport const startVMIMigration = (vmi: VMIKind) => {\n  const migration = new VMIMigration()\n    .setName(getMigrationName(vmi))\n    .setVMI(vmi)\n    .build();\n\n  return k8sCreate(VirtualMachineInstanceMigrationModel, migration);\n};\n","import { k8sKill, K8sResourceKind } from '@console/internal/module/k8s';\nimport { VirtualMachineInstanceMigrationModel } from '../../../models';\n\nexport const cancelMigration = async (vmim: K8sResourceKind) =>\n  k8sKill(VirtualMachineInstanceMigrationModel, vmim);\n","import { apiVersionForModel, TemplateKind } from '@console/internal/module/k8s';\nimport { getName } from '@console/shared/src';\nimport { freeOwnedResources } from '../free-owned-resources';\nimport { K8sResourceWithModel } from '../../../types/k8s-resource-with-model';\nimport { k8sKillPropagated } from '../k8s-kill-propagated';\nimport { TemplateModel } from '@console/internal/models';\n\nexport const deleteVMTemplate = async (\n  vmTemplate: TemplateKind,\n  {\n    ownedVolumeResources,\n    deleteOwnedVolumeResources,\n  }: {\n    ownedVolumeResources: K8sResourceWithModel[];\n    deleteOwnedVolumeResources: boolean;\n  },\n) => {\n  if (ownedVolumeResources && !deleteOwnedVolumeResources) {\n    await freeOwnedResources(\n      ownedVolumeResources,\n      {\n        name: getName(vmTemplate),\n        kind: TemplateModel.kind,\n        apiVersion: apiVersionForModel(TemplateModel),\n      } as any,\n      false,\n    );\n  }\n\n  await k8sKillPropagated(TemplateModel, vmTemplate);\n};\n","/* eslint-disable lines-between-class-members */\nimport {\n  getName,\n  getNamespace,\n  hasLabel,\n  getLabels,\n  getOwnerReferences,\n  getCreationTimestamp,\n} from '@console/shared/src';\nimport { K8sKind, K8sResourceCommon } from '@console/internal/module/k8s';\nimport { Wrapper } from './wrapper';\nimport { K8sResourceKindMethods } from '../types/types';\nimport { clearRuntimeMetadata, initK8sObject, K8sInitAddon } from './util/k8s-mixin';\n\nexport abstract class K8sResourceWrapper<\n  RESOURCE extends K8sResourceCommon,\n  SELF extends K8sResourceWrapper<RESOURCE, SELF>\n> extends Wrapper<RESOURCE, SELF> implements K8sResourceKindMethods {\n  private readonly model: K8sKind;\n\n  protected constructor(model: K8sKind, data?: RESOURCE | SELF, copy = false) {\n    super(data, copy);\n    this.model = model;\n    if (!this.model) {\n      throw new Error('model must be defined');\n    }\n  }\n\n  init(data: K8sInitAddon = {}) {\n    initK8sObject(this.data, this.model, data);\n    return (this as any) as SELF;\n  }\n\n  clearRuntimeMetadata() {\n    clearRuntimeMetadata(this.data);\n    return (this as any) as SELF;\n  }\n\n  getModel = () => this.model;\n  getName = () => getName(this.data);\n  getNamespace = () => getNamespace(this.data);\n  getCreationTimestamp = () => getCreationTimestamp(this.data);\n  getLabels = (defaultValue = {}) => getLabels(this.data, defaultValue);\n  hasLabel = (label: string) => hasLabel(this.data, label);\n  getOwnerReferences = () => getOwnerReferences(this.data);\n\n  setName = (name: string) => {\n    this.ensurePath('metadata');\n    this.data.metadata.name = name;\n    delete this.data.metadata.generateName;\n    return (this as any) as SELF;\n  };\n\n  setGenerateName = (generateName: string) => {\n    this.ensurePath('metadata');\n    this.data.metadata.generateName = generateName;\n    delete this.data.metadata.name;\n    return (this as any) as SELF;\n  };\n\n  setNamespace = (namespace: string) => {\n    this.ensurePath('metadata');\n    this.data.metadata.namespace = namespace;\n    return (this as any) as SELF;\n  };\n\n  addAnotation = (key: string, value: string) => {\n    if (key) {\n      this.ensurePath('metadata.annotations');\n      this.data.metadata.annotations[key] = value;\n    }\n    return (this as any) as SELF;\n  };\n\n  addLabel = (key: string, value: string) => {\n    if (key) {\n      this.ensurePath('metadata.labels');\n      this.data.metadata.labels[key] = value;\n    }\n    return (this as any) as SELF;\n  };\n}\n","import { VMGenericLikeEntityKind } from '../../../types/vmLike';\nimport { VMWrapper } from '../vm/vm-wrapper';\nimport { VMIWrapper } from '../vm/vmi-wrapper';\nimport { asVM } from '../../../selectors/vm/vmlike';\nimport { VMILikeWrapper } from '../types/vmlike';\nimport { isVMI } from '../../../selectors/check-type';\n\nexport const asVMILikeWrapper = (\n  vmLikeEntity: VMGenericLikeEntityKind,\n  copy = false,\n): VMILikeWrapper => {\n  if (!vmLikeEntity) {\n    return null;\n  }\n\n  if (isVMI(vmLikeEntity)) {\n    return new VMIWrapper(vmLikeEntity, copy);\n  }\n\n  return new VMWrapper(asVM(vmLikeEntity), copy);\n};\n","import * as _ from 'lodash';\nimport { safeLoad, safeDump } from 'js-yaml';\nimport { V1CloudInitNoCloudSource } from '../../../types/vm/disk/V1CloudInitNoCloudSource';\n\nconst safeAtob = (value: string) => {\n  try {\n    return atob(value);\n  } catch (ignored) {\n    return '';\n  }\n};\n\nexport enum CloudInitDataFormKeys {\n  NAME = 'name',\n  HOSTNAME = 'hostname',\n  SSH_AUTHORIZED_KEYS = 'ssh_authorized_keys',\n}\nexport const CLOUD_CONFIG_HEADER = '#cloud-config';\n\nexport const formAllowedKeys = new Set([\n  CloudInitDataFormKeys.NAME,\n  CloudInitDataFormKeys.HOSTNAME,\n  CloudInitDataFormKeys.SSH_AUTHORIZED_KEYS,\n]);\n\nexport class CloudInitDataHelper {\n  static getUserData = (cloudInitNoCloud?: V1CloudInitNoCloudSource) => {\n    const isBase64 = _.has(cloudInitNoCloud, 'userDataBase64');\n    const userData = isBase64\n      ? safeAtob(cloudInitNoCloud && cloudInitNoCloud.userDataBase64)\n      : cloudInitNoCloud && cloudInitNoCloud.userData;\n    return [userData, isBase64] as [string, boolean];\n  };\n\n  static toCloudInitNoCloudSource = (\n    userData: string,\n    isBase64: boolean,\n  ): V1CloudInitNoCloudSource => {\n    if (isBase64) {\n      return { userDataBase64: btoa(userData) };\n    }\n    return { userData };\n  };\n\n  private header: string;\n\n  private base64: boolean;\n\n  private cloudConfigData: any = null;\n\n  private otherFormatData: any = null;\n\n  constructor(cloudInitNoCloud?: V1CloudInitNoCloudSource) {\n    const [userData, isBase64] = CloudInitDataHelper.getUserData(cloudInitNoCloud);\n    this.base64 = isBase64;\n\n    const firstLineSepIndex = userData ? userData.indexOf('\\n') : -1;\n    const header = firstLineSepIndex === -1 ? undefined : userData.substring(0, firstLineSepIndex);\n    const rest = firstLineSepIndex === -1 ? undefined : userData.substring(firstLineSepIndex + 1);\n\n    if (_.trimEnd(header) === CLOUD_CONFIG_HEADER) {\n      try {\n        this.cloudConfigData = safeLoad(rest);\n        this.header = header;\n      } catch (e) {\n        this.otherFormatData = userData;\n      }\n    } else {\n      this.otherFormatData = userData;\n    }\n  }\n\n  isEmpty = () => !this.otherFormatData && _.isEmpty(this.cloudConfigData);\n\n  includesOnlyFormValues = () =>\n    this.cloudConfigData\n      ? Object.keys(this.cloudConfigData).every((key) => formAllowedKeys.has(key as any))\n      : !this.otherFormatData;\n\n  areAllFormValuesEmpty = () =>\n    this.isEmpty() ||\n    (this.includesOnlyFormValues() &&\n      !Object.keys(this.cloudConfigData).find(\n        (key) => this.has(key) && key !== CloudInitDataFormKeys.NAME,\n      ));\n\n  getUserData = () => {\n    if (this.cloudConfigData) {\n      const resultData = safeDump(this.cloudConfigData);\n      return this.header ? `${this.header}\\n${resultData}` : resultData;\n    }\n    return this.otherFormatData;\n  };\n\n  get = (key: string) => this.cloudConfigData && this.cloudConfigData[key];\n\n  has = (key: string) => !!this.get(key);\n\n  set = (key: string, value: string) => {\n    if (key && !this.otherFormatData) {\n      if (!this.cloudConfigData) {\n        this.cloudConfigData = {};\n      }\n      if (value === undefined) {\n        delete this.cloudConfigData[key];\n      } else {\n        this.cloudConfigData[key] = value;\n      }\n    }\n  };\n\n  makeFormCompliant = () => {\n    this.header = CLOUD_CONFIG_HEADER;\n    this.otherFormatData = undefined;\n    if (!this.cloudConfigData) {\n      this.cloudConfigData = {};\n    }\n    Object.keys(this.cloudConfigData).forEach((key) => {\n      if (!formAllowedKeys.has(key as any)) {\n        delete this.cloudConfigData[key];\n      }\n    });\n    if (!this.cloudConfigData[CloudInitDataFormKeys.NAME]) {\n      this.cloudConfigData[CloudInitDataFormKeys.NAME] = 'default'; // root account might not be enabled\n    }\n  };\n\n  asCloudInitNoCloudSource = () =>\n    CloudInitDataHelper.toCloudInitNoCloudSource(this.getUserData(), this.base64);\n}\n","import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s/types';\nimport { apiVersionForModel } from '@console/internal/module/k8s/k8s';\nimport { createBasicLookup, getName, getNamespace, getOwnerReferences } from '@console/shared/src';\nimport { FirehoseResult } from '@console/internal/components/utils';\nimport { V1Disk } from '../../../types/vm/disk/V1Disk';\nimport { V1Volume } from '../../../types/vm/disk/V1Volume';\nimport { V1alpha1DataVolume } from '../../../types/vm/disk/V1alpha1DataVolume';\nimport { getSimpleName } from '../../../selectors/utils';\nimport { VolumeType, DiskType, AccessMode, VolumeMode } from '../../../constants/vm/storage';\nimport { VMGenericLikeEntityKind } from '../../../types/vmLike';\nimport { asVM, getDataVolumeTemplates, isWinToolsImage } from '../../../selectors/vm';\nimport { getLoadedData, isLoaded } from '../../../utils';\nimport { StorageUISource } from '../../../components/modals/disk-modal/storage-ui-source';\nimport { DYNAMIC } from '../../../utils/strings';\nimport { DiskWrapper } from './disk-wrapper';\nimport { DataVolumeWrapper } from './data-volume-wrapper';\nimport { VolumeWrapper } from './volume-wrapper';\nimport { PersistentVolumeClaimWrapper } from './persistent-volume-claim-wrapper';\nimport { asVMILikeWrapper } from '../utils/convert';\nimport { V1PersistentVolumeClaim } from '../../../types/vm/disk/V1PersistentVolumeClaim';\nimport { DataVolumeModel } from '../../../models';\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\n\nexport class CombinedDisk {\n  private readonly dataVolumesLoading: boolean;\n\n  private readonly pvcsLoading: boolean;\n\n  private readonly source: StorageUISource;\n\n  readonly id: string;\n\n  readonly diskWrapper: DiskWrapper;\n\n  readonly volumeWrapper: VolumeWrapper;\n\n  readonly dataVolumeWrapper?: DataVolumeWrapper;\n\n  readonly persistentVolumeClaimWrapper?: PersistentVolumeClaimWrapper;\n\n  constructor({\n    id,\n    disk,\n    volume,\n    dataVolume,\n    persistentVolumeClaim,\n    diskWrapper,\n    volumeWrapper,\n    dataVolumeWrapper,\n    persistentVolumeClaimWrapper,\n    isNewPVC,\n    dataVolumesLoading,\n    pvcsLoading,\n  }: {\n    id?: string;\n    disk?: V1Disk;\n    volume?: V1Volume;\n    dataVolume?: V1alpha1DataVolume;\n    persistentVolumeClaim?: V1PersistentVolumeClaim;\n    diskWrapper?: DiskWrapper;\n    volumeWrapper?: VolumeWrapper;\n    dataVolumeWrapper?: DataVolumeWrapper;\n    persistentVolumeClaimWrapper?: PersistentVolumeClaimWrapper;\n    dataVolumesLoading?: boolean;\n    pvcsLoading?: boolean;\n    isNewPVC?: boolean;\n  }) {\n    this.id = id;\n    this.diskWrapper = disk ? new DiskWrapper(disk) : diskWrapper;\n    this.volumeWrapper = volume ? new VolumeWrapper(volume) : volumeWrapper;\n    this.dataVolumeWrapper = dataVolume ? new DataVolumeWrapper(dataVolume) : dataVolumeWrapper;\n    this.persistentVolumeClaimWrapper = persistentVolumeClaim\n      ? new PersistentVolumeClaimWrapper(persistentVolumeClaim)\n      : persistentVolumeClaimWrapper;\n    this.dataVolumesLoading = dataVolumesLoading;\n    this.pvcsLoading = pvcsLoading;\n\n    this.source = StorageUISource.fromTypes(\n      this.volumeWrapper?.getType(),\n      this.dataVolumeWrapper?.getType(),\n      !!this.persistentVolumeClaimWrapper && isNewPVC,\n    );\n  }\n\n  getSource = () => this.source;\n\n  getInitialSource = (isEditing) => {\n    if (isEditing) {\n      return this.source;\n    }\n    return this.diskWrapper?.getType() === DiskType.CDROM\n      ? StorageUISource.URL\n      : StorageUISource.BLANK;\n  };\n\n  getSourceValue = () => this.source.getValue();\n\n  isEditingSupported = () => {\n    switch (this.volumeWrapper.getType()) {\n      case VolumeType.DATA_VOLUME:\n        // do not edit already created entities\n        return !(\n          this.dataVolumeWrapper?.getCreationTimestamp() ||\n          this.persistentVolumeClaimWrapper?.getCreationTimestamp()\n        );\n      default:\n        return true;\n    }\n  };\n\n  getName = () => this.diskWrapper?.getName();\n\n  getType = () => this.diskWrapper?.getType();\n\n  getTypeValue = () => this.diskWrapper?.getTypeValue();\n\n  getDiskInterface = () => this.diskWrapper?.getReadableDiskBus();\n\n  getReadableSize = (): string => {\n    let result = this.volumeTypeOperation(\n      (persistentVolumeClaimWrapper) => persistentVolumeClaimWrapper.getReadabableSize(),\n      (dataVolumeWrapper) => dataVolumeWrapper.getReadabableSize(),\n    );\n\n    if (result === null && this.source.hasDynamicSize()) {\n      result = DYNAMIC;\n    }\n\n    return result;\n  };\n\n  getSize = (): { value: number; unit: string } =>\n    this.volumeTypeOperation(\n      (persistentVolumeClaimWrapper) => persistentVolumeClaimWrapper.getSize(),\n      (dataVolumeWrapper) => dataVolumeWrapper.getSize(),\n    );\n\n  getStorageClassName = () =>\n    this.volumeTypeOperation(\n      (persistentVolumeClaimWrapper) => persistentVolumeClaimWrapper.getStorageClassName(),\n      (dataVolumeWrapper) => dataVolumeWrapper.getStorageClassName(),\n    );\n\n  getAccessModes = (): AccessMode[] =>\n    this.volumeTypeOperation(\n      (persistentVolumeClaimWrapper) => persistentVolumeClaimWrapper.getAccessModesEnum(),\n      (dataVolumeWrapper) => dataVolumeWrapper.getAccessModesEnum(),\n    );\n\n  getVolumeMode = (): VolumeMode =>\n    this.volumeTypeOperation(\n      (persistentVolumeClaimWrapper) => persistentVolumeClaimWrapper.getVolumeModeEnum(),\n      (dataVolumeWrapper) => dataVolumeWrapper.getVolumeModeEnum(),\n    );\n\n  getPVCNameBySource = (source?: StorageUISource) => {\n    if (source === StorageUISource.IMPORT_DISK) {\n      return this.persistentVolumeClaimWrapper?.getName();\n    }\n    if (source === StorageUISource.ATTACH_DISK) {\n      return this.volumeWrapper?.getPersistentVolumeClaimName();\n    }\n    if (source === StorageUISource.ATTACH_CLONED_DISK) {\n      return this.dataVolumeWrapper?.getPesistentVolumeClaimName();\n    }\n\n    return null;\n  };\n\n  getContent = () => {\n    switch (this.source) {\n      case StorageUISource.CONTAINER: {\n        return this.volumeWrapper?.getContainerImage();\n      }\n      case StorageUISource.URL: {\n        return this.dataVolumeWrapper.getURL();\n      }\n      case StorageUISource.IMPORT_DISK: {\n        return this.getPVCNameBySource(this.source);\n      }\n      case StorageUISource.ATTACH_DISK: {\n        return this.getPVCNameBySource(this.source);\n      }\n      case StorageUISource.ATTACH_CLONED_DISK: {\n        return this.getPVCNameBySource(this.source);\n      }\n      default:\n        return null;\n    }\n  };\n\n  getCDROMSourceValue = () =>\n    isWinToolsImage(this.volumeWrapper?.getContainerImage())\n      ? 'Windows Tools'\n      : this.getSourceValue();\n\n  toString = () => {\n    return _.compact([\n      this.getName(),\n      this.getReadableSize(),\n      this.getDiskInterface(),\n      this.getStorageClassName(),\n      this.getVolumeMode(),\n      (this.getAccessModes() || []).length > 0 ? this.getAccessModes().join(', ') : null,\n    ]).join(' - ');\n  };\n\n  private volumeTypeOperation = (\n    onPersistentVolumeClaimWrapper: (\n      persistentVolumeClaimWrapper: PersistentVolumeClaimWrapper,\n    ) => any,\n    onDataVolumeWrapper: (dataVolumeWrapper: DataVolumeWrapper) => any,\n  ) => {\n    const volumeType = this.volumeWrapper?.getType();\n    if (volumeType === VolumeType.PERSISTENT_VOLUME_CLAIM) {\n      if (this.persistentVolumeClaimWrapper) {\n        return onPersistentVolumeClaimWrapper(this.persistentVolumeClaimWrapper) || null;\n      }\n      if (this.pvcsLoading) {\n        return undefined;\n      }\n    } else if (volumeType === VolumeType.DATA_VOLUME) {\n      if (this.dataVolumeWrapper) {\n        return onDataVolumeWrapper(this.dataVolumeWrapper) || null;\n      }\n      if (this.dataVolumesLoading) {\n        return undefined;\n      }\n    }\n    return null;\n  };\n}\n\nexport class CombinedDiskFactory {\n  private readonly disks: V1Disk[];\n\n  private readonly volumes: V1Volume[];\n\n  private readonly dataVolumeTemplates: V1alpha1DataVolume[];\n\n  private readonly dataVolumes: V1alpha1DataVolume[];\n\n  private readonly pvcs: K8sResourceKind[];\n\n  private readonly dataVolumesLoading: boolean;\n\n  private readonly pvcsLoading: boolean;\n\n  static initializeFromVMLikeEntity = (\n    vmLikeEntity: VMGenericLikeEntityKind,\n    datavolumes?: FirehoseResult<V1alpha1DataVolume[]>,\n    pvcs?: FirehoseResult,\n  ) => {\n    const vmiLikeWrapper = asVMILikeWrapper(vmLikeEntity);\n\n    return new CombinedDiskFactory({\n      disks: vmiLikeWrapper?.getDisks() || [],\n      volumes: vmiLikeWrapper?.getVolumes() || [],\n      dataVolumeTemplates: getDataVolumeTemplates(asVM(vmLikeEntity)),\n      dataVolumes: getLoadedData(datavolumes, []),\n      pvcs: getLoadedData(pvcs),\n      dataVolumesLoading: !isLoaded(datavolumes),\n      pvcsLoading: !isLoaded(pvcs),\n      namespace: getNamespace(vmLikeEntity),\n    });\n  };\n\n  constructor({\n    disks,\n    volumes,\n    dataVolumes,\n    dataVolumeTemplates,\n    dataVolumesLoading,\n    pvcs,\n    pvcsLoading,\n    namespace,\n  }: {\n    disks: V1Disk[];\n    volumes: V1Volume[];\n    dataVolumeTemplates?: V1alpha1DataVolume[];\n    dataVolumes?: V1alpha1DataVolume[];\n    dataVolumesLoading?: boolean;\n    pvcs?: K8sResourceKind[];\n    pvcsLoading?: boolean;\n    namespace: string;\n  }) {\n    this.disks = disks;\n    this.volumes = volumes;\n    this.dataVolumeTemplates = dataVolumeTemplates;\n    this.dataVolumes =\n      dataVolumes &&\n      dataVolumes.filter((dataVolume) => {\n        const ns = getNamespace(dataVolume);\n        return !ns || ns === namespace;\n      });\n    this.pvcs =\n      pvcs &&\n      pvcs.filter((pvc) => {\n        const ns = getNamespace(pvc);\n        return !ns || ns === namespace;\n      });\n    this.dataVolumesLoading = dataVolumesLoading;\n    this.pvcsLoading = pvcsLoading;\n  }\n\n  getCombinedDisks = (): CombinedDisk[] => {\n    const volumeLookup = createBasicLookup(this.volumes, getSimpleName);\n    const datavolumeTemplateLookup = createBasicLookup(this.dataVolumeTemplates, getName);\n    const datavolumeLookup = createBasicLookup(this.dataVolumes, getName);\n    const pvcLookup = createBasicLookup(this.pvcs, getName);\n\n    return this.disks.map((disk) => {\n      const diskWrapper = new DiskWrapper(disk);\n      const volume = volumeLookup[diskWrapper.getName()];\n      const volumeWrapper = new VolumeWrapper(volume);\n      let dataVolumeName: string;\n      let dataVolume;\n      let dataVolumeTemplate;\n      let pvc;\n\n      switch (volumeWrapper.getType()) {\n        case VolumeType.DATA_VOLUME:\n          dataVolumeName = volumeWrapper.getDataVolumeName();\n          dataVolumeTemplate = datavolumeTemplateLookup[dataVolumeName];\n          dataVolume = datavolumeLookup[dataVolumeName];\n          if (!dataVolume) {\n            dataVolume = dataVolumeTemplate;\n          }\n\n          if (dataVolume && this.pvcs) {\n            pvc = this.pvcs.find((p) =>\n              (getOwnerReferences(p) || []).some((ownerReference) =>\n                compareOwnerReference(ownerReference, {\n                  name: dataVolumeName,\n                  kind: DataVolumeModel.kind,\n                  apiVersion: apiVersionForModel(DataVolumeModel),\n                } as any),\n              ),\n            );\n          }\n          break;\n        case VolumeType.PERSISTENT_VOLUME_CLAIM:\n          pvc = pvcLookup[volumeWrapper.getPersistentVolumeClaimName()];\n          break;\n        default:\n          break;\n      }\n\n      return new CombinedDisk({\n        diskWrapper,\n        volumeWrapper,\n        dataVolumeWrapper: dataVolume && new DataVolumeWrapper(dataVolume),\n        persistentVolumeClaimWrapper: pvc && new PersistentVolumeClaimWrapper(pvc),\n        dataVolumesLoading: this.dataVolumesLoading,\n        pvcsLoading: this.pvcsLoading,\n      });\n    });\n  };\n\n  getUsedDiskNames = (excludeName: string): Set<string> =>\n    new Set(this.disks.map(getSimpleName).filter((n) => n && n !== excludeName));\n\n  getUsedDataVolumeNames = (excludeName: string): Set<string> =>\n    new Set(\n      [...this.dataVolumeTemplates, ...this.dataVolumes]\n        .map((dv) => getName(dv))\n        .filter((n) => n && n !== excludeName),\n    );\n}\n","import * as _ from 'lodash';\nimport { getOwnerReferences } from '@console/shared/src';\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\nimport { apiVersionForModel } from '@console/internal/module/k8s';\nimport { V1alpha1DataVolume } from '../../../types/vm/disk/V1alpha1DataVolume';\nimport { AccessMode, DataVolumeSourceType, VolumeMode } from '../../../constants/vm/storage';\nimport {\n  getDataVolumeAccessModes,\n  getDataVolumeStorageClassName,\n  getDataVolumeStorageSize,\n  getDataVolumeVolumeMode,\n} from '../../../selectors/dv/selectors';\nimport {\n  BinaryUnit,\n  stringValueUnitSplit,\n  toIECUnit,\n} from '../../../components/form/size-unit-utils';\nimport { DataVolumeModel } from '../../../models';\nimport { K8sResourceObjectWithTypePropertyWrapper } from '../common/k8s-resource-object-with-type-property-wrapper';\nimport { K8sInitAddon } from '../common/util/k8s-mixin';\n\ntype CombinedTypeData = {\n  name?: string;\n  namespace?: string;\n  url?: string;\n};\n\nexport class DataVolumeWrapper extends K8sResourceObjectWithTypePropertyWrapper<\n  V1alpha1DataVolume,\n  DataVolumeSourceType,\n  CombinedTypeData,\n  DataVolumeWrapper\n> {\n  /**\n   * @deprecated FIXME deprecate initializeFromSimpleData in favor of init\n   */\n  static initializeFromSimpleData = ({\n    name,\n    namespace,\n    type,\n    typeData,\n    accessModes,\n    volumeMode,\n    size,\n    unit,\n    storageClassName,\n  }: {\n    name?: string;\n    namespace?: string;\n    type?: DataVolumeSourceType;\n    typeData?: CombinedTypeData;\n    accessModes?: object[] | string[];\n    volumeMode?: object | string;\n    size?: string | number;\n    unit?: string;\n    storageClassName?: string;\n  }) => {\n    const resources =\n      size == null\n        ? undefined\n        : {\n            requests: {\n              storage: size && unit ? `${size}${unit}` : size,\n            },\n          };\n\n    return new DataVolumeWrapper({\n      apiVersion: apiVersionForModel(DataVolumeModel),\n      kind: DataVolumeModel.kind,\n      metadata: {\n        name,\n        namespace,\n      },\n      spec: {\n        pvc: {\n          accessModes: _.cloneDeep(accessModes),\n          volumeMode: _.cloneDeep(volumeMode),\n          resources,\n          storageClassName,\n        },\n        source: {},\n      },\n    }).setType(type, typeData);\n  };\n\n  constructor(dataVolumeTemplate?: V1alpha1DataVolume | DataVolumeWrapper, copy = false) {\n    super(DataVolumeModel, dataVolumeTemplate, copy, DataVolumeSourceType, ['spec', 'source']);\n  }\n\n  init(\n    data: K8sInitAddon & { size?: string | number; unit?: string; storageClassName?: string } = {},\n  ) {\n    super.init(data);\n    const { size, unit, storageClassName } = data;\n    if (size != null && unit) {\n      this.setSize(size, unit);\n    }\n    if (storageClassName !== undefined) {\n      this.setStorageClassName(storageClassName);\n    }\n    return this;\n  }\n\n  getStorageClassName = () => getDataVolumeStorageClassName(this.data as any);\n\n  getPesistentVolumeClaimName = () => this.getIn(['spec', 'source', 'pvc', 'name']);\n\n  getPesistentVolumeClaimNamespace = () => this.getIn(['spec', 'source', 'pvc', 'namespace']);\n\n  getURL = () => this.getIn(['spec', 'source', 'http', 'url']);\n\n  getSize = (): { value: number; unit: string } => {\n    const parts = stringValueUnitSplit(getDataVolumeStorageSize(this.data as any) || '');\n    return {\n      value: parts[0],\n      unit: parts[1],\n    };\n  };\n\n  getReadabableSize = () => {\n    const { value, unit } = this.getSize();\n    return `${value} ${toIECUnit(unit) || BinaryUnit.B}`;\n  };\n\n  hasSize = () => this.getSize().value > 0;\n\n  getAccessModes = () => getDataVolumeAccessModes(this.data);\n\n  getVolumeMode = () => getDataVolumeVolumeMode(this.data);\n\n  getVolumeModeEnum = () => VolumeMode.fromString(this.getVolumeMode());\n\n  getAccessModesEnum = () => {\n    const accessModes = this.getAccessModes();\n    return accessModes ? accessModes.map((mode) => AccessMode.fromString(mode)) : accessModes;\n  };\n\n  setSize = (value: string | number, unit = 'Gi') => {\n    this.ensurePath('spec.pvc.resources.requests');\n    (this.data.spec.pvc.resources.requests as any).storage = `${value}${unit}`;\n    return this;\n  };\n\n  setStorageClassName = (storageClassName: string) => {\n    this.ensurePath('spec.pvc');\n    this.data.spec.pvc.storageClassName = storageClassName;\n    return this;\n  };\n\n  setAccessModes = (accessModes: AccessMode[]) => {\n    this.ensurePath('spec.pvc');\n    this.data.spec.pvc.accessModes =\n      accessModes && accessModes.map((a) => a?.getValue()).filter((a) => a); // allow null and undefined\n    return this;\n  };\n\n  setVolumeMode = (volumeMode: VolumeMode) => {\n    this.ensurePath('spec.pvc');\n    this.data.spec.pvc.volumeMode = volumeMode && volumeMode.getValue(); // allow null and undefined\n    return this;\n  };\n\n  addOwnerReferences = (...additionalOwnerReferences) => {\n    if (!getOwnerReferences(this.data)) {\n      this.data.metadata.ownerReferences = [];\n    }\n\n    if (additionalOwnerReferences) {\n      const ownerReferences = getOwnerReferences(this.data);\n      additionalOwnerReferences.forEach((newReference) => {\n        if (\n          !ownerReferences.some((oldReference) => compareOwnerReference(oldReference, newReference))\n        ) {\n          ownerReferences.push(newReference);\n        }\n      });\n    }\n    return this;\n  };\n\n  mergeWith(...dataVolumeWrappers: DataVolumeWrapper[]) {\n    super.mergeWith(...dataVolumeWrappers);\n    this.clearIfEmpty('spec.pvc.storageClassName');\n    this.clearIfEmpty('spec.pvc.accessModes');\n    this.clearIfEmpty('spec.pvc.volumeMode');\n    const accessModes = this.getAccessModesEnum();\n    if (accessModes?.length > 1) {\n      // API currently allows only one mode\n      this.setAccessModes([accessModes[0]]);\n    }\n    return this;\n  }\n\n  protected sanitize(type: DataVolumeSourceType, { name, namespace, url }: CombinedTypeData) {\n    switch (type) {\n      case DataVolumeSourceType.HTTP:\n        return { url };\n      case DataVolumeSourceType.PVC:\n        return { name, namespace };\n      case DataVolumeSourceType.BLANK:\n      default:\n        return {};\n    }\n  }\n}\n","import { V1PersistentVolumeClaim } from '../../../types/vm/disk/V1PersistentVolumeClaim';\nimport {\n  getPvcAccessModes,\n  getPvcStorageClassName,\n  getPvcStorageSize,\n  getPvcVolumeMode,\n} from '../../../selectors/pvc/selectors';\nimport {\n  BinaryUnit,\n  stringValueUnitSplit,\n  toIECUnit,\n} from '../../../components/form/size-unit-utils';\nimport { K8sResourceWrapper } from '../common/k8s-resource-wrapper';\nimport { PersistentVolumeClaimModel } from '@console/internal/models';\nimport { K8sInitAddon } from '../common/util/k8s-mixin';\nimport { AccessMode, VolumeMode } from '../../../constants/vm/storage';\n\nexport class PersistentVolumeClaimWrapper extends K8sResourceWrapper<\n  V1PersistentVolumeClaim,\n  PersistentVolumeClaimWrapper\n> {\n  constructor(\n    persistentVolumeClaim?: V1PersistentVolumeClaim | PersistentVolumeClaimWrapper | any,\n    copy = false,\n  ) {\n    super(PersistentVolumeClaimModel, persistentVolumeClaim, copy);\n  }\n\n  init(data: K8sInitAddon & { size?: string | number; unit?: string; storageClassName?: string }) {\n    super.init(data);\n    const { size, unit, storageClassName } = data || {};\n    if (size != null && unit) {\n      this.setSize(size, unit);\n    }\n    if (storageClassName !== undefined) {\n      this.setStorageClassName(storageClassName);\n    }\n\n    return this;\n  }\n\n  getStorageClassName = () => getPvcStorageClassName(this.data as any);\n\n  getSize = (): { value: number; unit: string } => {\n    const parts = stringValueUnitSplit(getPvcStorageSize(this.data as any) || '');\n    return {\n      value: parts[0],\n      unit: parts[1],\n    };\n  };\n\n  getReadabableSize = () => {\n    const { value, unit } = this.getSize();\n    return `${value} ${toIECUnit(unit) || BinaryUnit.B}`;\n  };\n\n  hasSize = () => this.getSize().value > 0;\n\n  getAccessModes = () => getPvcAccessModes(this.data);\n\n  getVolumeMode = () => getPvcVolumeMode(this.data);\n\n  getVolumeModeEnum = () => VolumeMode.fromString(this.getVolumeMode());\n\n  getAccessModesEnum = () => {\n    const accessModes = this.getAccessModes();\n    return accessModes ? accessModes.map((mode) => AccessMode.fromString(mode)) : accessModes;\n  };\n\n  setSize = (value: string | number, unit = 'Gi') => {\n    this.ensurePath('spec.resources.requests');\n    (this.data.spec.resources.requests as any).storage = `${value}${unit}`;\n    return this;\n  };\n\n  setStorageClassName = (storageClassName: string) => {\n    this.ensurePath('spec');\n    this.data.spec.storageClassName = storageClassName;\n    return this;\n  };\n\n  setAccessModes = (accessModes: AccessMode[]) => {\n    this.ensurePath('spec');\n    this.data.spec.accessModes =\n      accessModes && accessModes.map((a) => a?.getValue()).filter((a) => a); // allow null and undefined\n    return this;\n  };\n\n  setVolumeMode = (volumeMode: VolumeMode) => {\n    this.ensurePath('spec');\n    this.data.spec.volumeMode = volumeMode && volumeMode.getValue(); // allow null and undefined\n    return this;\n  };\n\n  mergeWith(...pvcWrappers: PersistentVolumeClaimWrapper[]) {\n    super.mergeWith(...pvcWrappers);\n    this.clearIfEmpty('spec.storageClassName');\n    this.clearIfEmpty('spec.accessModes');\n    this.clearIfEmpty('spec.volumeMode');\n    const accessModes = this.getAccessModesEnum();\n    if (accessModes?.length > 1) {\n      // API currently allows only one mode\n      this.setAccessModes([accessModes[0]]);\n    }\n    return this;\n  }\n}\n","/* eslint-disable lines-between-class-members */\nimport * as _ from 'lodash';\nimport { getLabels } from '@console/shared/src/selectors/common';\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\nimport { K8sResourceWrapper } from '../common/k8s-resource-wrapper';\nimport { CPURaw, V1NetworkInterface, VMKind } from '../../../types/vm';\nimport {\n  getDataVolumeTemplates,\n  getDisks,\n  getInterfaces,\n  getNetworks,\n  getVolumes,\n  isDedicatedCPUPlacement,\n  getNodeSelector,\n  getTolerations,\n  getAffinity,\n} from '../../../selectors/vm/selectors';\nimport { VMWizardNetwork, VMWizardStorage } from '../../../components/create-vm-wizard/types';\nimport { VMILikeMethods } from './types';\nimport { transformDevices } from '../../../selectors/vm';\nimport { findKeySuffixValue } from '../../../selectors/utils';\nimport {\n  TEMPLATE_FLAVOR_LABEL,\n  TEMPLATE_OS_LABEL,\n  TEMPLATE_WORKLOAD_LABEL,\n  VolumeType,\n} from '../../../constants/vm';\nimport { VolumeWrapper } from './volume-wrapper';\nimport { V1Disk } from '../../../types/vm/disk/V1Disk';\nimport { V1Volume } from '../../../types/vm/disk/V1Volume';\nimport { V1alpha1DataVolume } from '../../../types/vm/disk/V1alpha1DataVolume';\nimport { VirtualMachineImportModel, VirtualMachineModel } from '../../../models';\nimport { buildOwnerReferenceForModel } from '../../../utils';\n\nexport class VMWrapper extends K8sResourceWrapper<VMKind, VMWrapper> implements VMILikeMethods {\n  constructor(vm?: VMKind | VMWrapper | any, copy = false) {\n    super(VirtualMachineModel, vm, copy);\n  }\n\n  hasTemplateLabel = (label: string) => _.has(this.getTemplateLabels(null), label);\n\n  getOperatingSystem = () => findKeySuffixValue(this.getLabels(), TEMPLATE_OS_LABEL);\n  getWorkloadProfile = () => findKeySuffixValue(this.getLabels(), TEMPLATE_WORKLOAD_LABEL);\n  getFlavor = () => findKeySuffixValue(this.getLabels(), TEMPLATE_FLAVOR_LABEL);\n\n  getMemory = () => this.data?.spec?.template?.spec?.domain?.resources?.requests?.memory;\n  getCPU = (): CPURaw => this.data?.spec?.template?.spec?.domain?.cpu;\n\n  getTemplateLabels = (defaultValue = {}) =>\n    getLabels(_.get(this.data, 'spec.template'), defaultValue);\n\n  getDataVolumeTemplates = (defaultValue = []) => getDataVolumeTemplates(this.data, defaultValue);\n\n  getNetworkInterfaces = (defaultValue = []) => getInterfaces(this.data, defaultValue);\n\n  getDisks = (defaultValue = []) => getDisks(this.data, defaultValue);\n  getCDROMs = () => this.getDisks().filter((device) => !!device.cdrom);\n\n  getNetworks = (defaultValue = []) => getNetworks(this.data, defaultValue);\n\n  getVolumes = (defaultValue = []) => getVolumes(this.data, defaultValue);\n\n  getLabeledDevices = () => transformDevices(this.getDisks(), this.getNetworkInterfaces());\n\n  getNodeSelector = () => getNodeSelector(this.data);\n\n  getTolerations = () => getTolerations(this.data);\n\n  getConfigMaps = () => this.getVolumes().filter((vol) => Object.keys(vol).includes('configMap'));\n\n  getSecrets = () => this.getVolumes().filter((vol) => Object.keys(vol).includes('secret'));\n\n  getServiceAccounts = () =>\n    this.getVolumes().filter((vol) => Object.keys(vol).includes('serviceAccount'));\n\n  getDiskSerial = (diskName) => {\n    const disk = this.getDisks().find((d) => d.name === diskName);\n    return disk && Object.keys(disk).includes('serial') && disk.serial;\n  };\n\n  getAffinity = () => getAffinity(this.data);\n\n  isDedicatedCPUPlacement = () => isDedicatedCPUPlacement(this.data);\n\n  getVMImportOwnerReference = () => {\n    return (this.getOwnerReferences() || []).find((reference) =>\n      compareOwnerReference(\n        reference,\n        buildOwnerReferenceForModel(VirtualMachineImportModel),\n        true,\n      ),\n    );\n  };\n\n  addTemplateLabel = (key: string, value: string) => {\n    if (key) {\n      this.ensurePath('spec.template.metadata.labels');\n      this.data.spec.template.metadata.labels[key] = value;\n    }\n    return this;\n  };\n\n  addTemplateAnnotation = (key: string, value: string) => {\n    if (key) {\n      this.ensurePath('spec.template.metadata.annotations');\n      this.data.spec.template.metadata.annotations[key] = value;\n    }\n    return this;\n  };\n\n  setMemory = (value: string, suffix?: string) => {\n    this.ensurePath('spec.template.spec.domain.resources.requests');\n    this.data.spec.template.spec.domain.resources.requests.memory = suffix\n      ? `${value}${suffix}`\n      : value;\n    return this;\n  };\n\n  setCPU = (cpu: { sockets: number; cores: number; threads: number }) => {\n    if (cpu) {\n      this.ensurePath('spec.template.spec.domain.cpu', {});\n      const { sockets, cores, threads } = cpu;\n      const vmCPU = this.data.spec.template.spec.domain.cpu;\n      vmCPU.sockets = sockets === undefined ? vmCPU.sockets : sockets;\n      vmCPU.cores = cores === undefined ? vmCPU.cores : cores;\n      vmCPU.threads = threads === undefined ? vmCPU.threads : threads;\n    } else if (this.data?.spec?.template?.spec?.domain) {\n      delete this.data.spec.template.spec.domain.cpu;\n    }\n    return this;\n  };\n\n  setRunning = (isRunning?: boolean) => {\n    this.ensurePath('spec');\n    this.data.spec.running = !!isRunning;\n    return this;\n  };\n\n  setNetworkInterfaces = (networks: V1NetworkInterface[]) => {\n    this.ensurePath('spec.template.spec.domain.devices');\n    this.data.spec.template.spec.domain.devices.interfaces = _.compact(networks);\n    this.ensureNetworksConsistency();\n    return this;\n  };\n\n  setWizardNetworks = (networks: VMWizardNetwork[]) => {\n    this.ensurePath('spec.template.spec.domain.devices');\n    this.data.spec.template.spec.domain.devices.interfaces = _.compact(\n      networks.map((network) => network.networkInterface),\n    );\n    this.data.spec.template.spec.networks = _.compact(networks.map((network) => network.network));\n\n    this.ensureNetworksConsistency();\n    return this;\n  };\n\n  prependStorage = ({\n    disk,\n    volume,\n    dataVolume,\n  }: {\n    disk: V1Disk;\n    volume: V1Volume;\n    dataVolume?: V1alpha1DataVolume;\n  }) => {\n    this.ensureStorages();\n    this.getDisks().unshift(disk);\n    this.getVolumes().unshift(volume);\n    if (dataVolume) {\n      this.getDataVolumeTemplates().unshift(dataVolume);\n    }\n    this.ensureStorageConsistency();\n    return this;\n  };\n\n  removeStorage = (diskName: string) => {\n    this.ensurePath('spec.template.spec.domain.devices', {});\n    this.data.spec.template.spec.domain.devices.disks = this.getDisks().filter(\n      (disk) => disk.name !== diskName,\n    );\n    const volumeWrapper = new VolumeWrapper(\n      this.getVolumes().find((volume) => volume.name === diskName),\n    );\n    this.data.spec.template.spec.volumes = this.getVolumes().filter(\n      (volume) => volume.name !== diskName,\n    );\n\n    if (volumeWrapper.getType() === VolumeType.DATA_VOLUME) {\n      this.data.spec.dataVolumeTemplates = this.getDataVolumeTemplates().filter(\n        (dataVolume) => dataVolume.name !== volumeWrapper.getDataVolumeName(),\n      );\n    }\n\n    this.ensureStorageConsistency();\n    return this;\n  };\n\n  setWizardStorages = (storages: VMWizardStorage[]) => {\n    this.ensurePath('spec.template.spec.domain.devices');\n    this.data.spec.template.spec.domain.devices.disks = _.compact(\n      storages.map((storage) => storage.disk),\n    );\n    this.data.spec.template.spec.volumes = _.compact(storages.map((storage) => storage.volume));\n    this.data.spec.dataVolumeTemplates = _.compact(storages.map((storage) => storage.dataVolume));\n\n    this.ensureStorageConsistency();\n    return this;\n  };\n\n  setAutoAttachPodInterface = (autoAttach: boolean) => {\n    this.ensurePath('spec.template.spec.domain.devices');\n    this.data.spec.template.spec.domain.devices.autoattachPodInterface = autoAttach;\n    return this;\n  };\n\n  setHostname = (hostname: string) => {\n    this.ensurePath('spec.template.spec');\n    this.data.spec.template.spec.hostname = hostname;\n    return this;\n  };\n\n  ensureDataVolumeTemplates = () => this.ensurePath('spec.dataVolumeTemplates', []);\n\n  private ensureStorages = () => {\n    this.ensurePath('spec.template.spec.domain.devices.disks', []);\n    this.ensurePath('spec.template.spec.volumes', []);\n    this.ensurePath('spec.dataVolumeTemplates', []);\n  };\n\n  private ensureNetworksConsistency = () => {\n    this.clearIfEmpty('spec.template.spec.domain.devices.interfaces');\n    this.clearIfEmpty('spec.template.spec.networks');\n  };\n\n  private ensureStorageConsistency = () => {\n    this.clearIfEmpty('spec.template.spec.domain.devices.disks');\n    this.clearIfEmpty('spec.template.spec.volumes');\n    this.clearIfEmpty('spec.dataVolumeTemplates');\n  };\n}\n","/* eslint-disable lines-between-class-members */\nimport { CPURaw, VMIKind } from '../../../types/vm';\nimport { K8sResourceWrapper } from '../common/k8s-resource-wrapper';\nimport {\n  getVMIDisks,\n  getVMINetworks,\n  getVMIVolumes,\n  getVMIInterfaces,\n  getVMINodeSelector,\n  getVMITolerations,\n  getVMIAffinity,\n} from '../../../selectors/vmi';\nimport { VMILikeMethods } from './types';\nimport { transformDevices } from '../../../selectors/vm';\nimport { findKeySuffixValue } from '../../../selectors/utils';\nimport {\n  TEMPLATE_FLAVOR_LABEL,\n  TEMPLATE_OS_LABEL,\n  TEMPLATE_WORKLOAD_LABEL,\n} from '../../../constants/vm';\nimport { VirtualMachineInstanceModel } from '../../../models';\n\nexport class VMIWrapper extends K8sResourceWrapper<VMIKind, VMIWrapper> implements VMILikeMethods {\n  constructor(vmi?: VMIKind | VMIWrapper | any, copy = false) {\n    super(VirtualMachineInstanceModel, vmi, copy);\n  }\n\n  getOperatingSystem = () => findKeySuffixValue(this.getLabels(), TEMPLATE_OS_LABEL);\n  getWorkloadProfile = () => findKeySuffixValue(this.getLabels(), TEMPLATE_WORKLOAD_LABEL);\n  getFlavor = () => findKeySuffixValue(this.getLabels(), TEMPLATE_FLAVOR_LABEL);\n\n  getMemory = () => this.data?.spec?.domain?.resources?.requests?.memory;\n  getCPU = (): CPURaw => this.data?.spec?.domain?.cpu;\n\n  getNetworkInterfaces = (defaultValue = []) => getVMIInterfaces(this.data, defaultValue);\n\n  getDisks = (defaultValue = []) => getVMIDisks(this.data, defaultValue);\n  getCDROMs = () => this.getDisks().filter((device) => !!device.cdrom);\n\n  getNetworks = (defaultValue = []) => getVMINetworks(this.data, defaultValue);\n\n  getVolumes = (defaultValue = []) => getVMIVolumes(this.data, defaultValue);\n\n  getLabeledDevices = () => transformDevices(this.getDisks(), this.getNetworkInterfaces());\n\n  isDedicatedCPUPlacement = () => this.data.spec?.domain?.cpu?.dedicatedCpuPlacement || false;\n\n  getNodeSelector = () => getVMINodeSelector(this.data);\n\n  getTolerations = () => getVMITolerations(this.data);\n\n  getAffinity = () => getVMIAffinity(this.data);\n}\n","import { K8sKind } from '@console/internal/module/k8s';\nimport {\n  ConfigMapModel,\n  PersistentVolumeClaimModel,\n  SecretModel,\n  ServiceAccountModel,\n} from '@console/internal/models';\nimport { ObjectWithTypePropertyWrapper } from '../common/object-with-type-property-wrapper';\nimport { V1Volume } from '../../../types/vm/disk/V1Volume';\nimport { VolumeType } from '../../../constants/vm/storage';\nimport {\n  getVolumeContainerImage,\n  getVolumeDataVolumeName,\n  getVolumePersistentVolumeClaimName,\n} from '../../../selectors/vm/volume';\nimport { DataVolumeModel } from '../../../models';\nimport { V1LocalObjectReference } from '../../../types/vm/disk/V1LocalObjectReference';\n\nexport type VolumeReferencedObject = {\n  name: string;\n  model: K8sKind;\n};\n\nconst getVolumeReferencedObject = (volume: VolumeWrapper): VolumeReferencedObject => {\n  const typeData = volume.getTypeData();\n  let name;\n  switch (volume.getType()) {\n    case VolumeType.CLOUD_INIT_CONFIG_DRIVE:\n    case VolumeType.CLOUD_INIT_NO_CLOUD:\n      name = typeData.networkDataSecretRef?.name || typeData.secretRef?.name;\n      return (\n        name && {\n          name,\n          model: SecretModel,\n        }\n      );\n    case VolumeType.CONFIG_MAP:\n      return {\n        name: typeData.name,\n        model: ConfigMapModel,\n      };\n    case VolumeType.DATA_VOLUME:\n      return {\n        name: typeData.name,\n        model: DataVolumeModel,\n      };\n    case VolumeType.EPHEMERAL:\n      return {\n        name: typeData.persistentVolumeClaim?.claimName,\n        model: PersistentVolumeClaimModel,\n      };\n    case VolumeType.PERSISTENT_VOLUME_CLAIM:\n      return {\n        name: typeData.claimName,\n        model: PersistentVolumeClaimModel,\n      };\n    case VolumeType.SECRET:\n      return {\n        name: typeData.secretName,\n        model: SecretModel,\n      };\n    case VolumeType.SERVICE_ACCOUNT:\n      return {\n        name: typeData.serviceAccountName,\n        model: ServiceAccountModel,\n      };\n    default:\n      return null;\n  }\n};\n\ntype CombinedTypeData = {\n  name?: string;\n  claimName?: string;\n  image?: string;\n  userData?: string;\n  userDataBase64?: string;\n  persistentVolumeClaim?: {\n    claimName: string;\n  };\n  secretName?: string;\n  serviceAccountName?: string;\n  networkDataSecretRef?: V1LocalObjectReference;\n  secretRef?: V1LocalObjectReference;\n};\n\nexport class VolumeWrapper extends ObjectWithTypePropertyWrapper<\n  V1Volume,\n  VolumeType,\n  CombinedTypeData,\n  VolumeWrapper\n> {\n  /**\n   * @deprecated FIXME deprecate initializeFromSimpleData in favor of init\n   */\n  static initializeFromSimpleData = ({\n    name,\n    type,\n    typeData,\n  }: {\n    name?: string;\n    type?: VolumeType;\n    typeData?: CombinedTypeData;\n  }) => new VolumeWrapper({ name }).setType(type, typeData);\n\n  constructor(volume?: V1Volume | VolumeWrapper, copy = false) {\n    super(volume, copy, VolumeType);\n  }\n\n  init({ name }: { name?: string }) {\n    if (name !== undefined) {\n      this.data.name = name;\n    }\n    return this;\n  }\n\n  getName = () => this.get('name');\n\n  getCloudInitNoCloud = () => this.get('cloudInitNoCloud');\n\n  getPersistentVolumeClaimName = () => getVolumePersistentVolumeClaimName(this.data);\n\n  getDataVolumeName = () => getVolumeDataVolumeName(this.data);\n\n  getContainerImage = () => getVolumeContainerImage(this.data);\n\n  getReferencedObject = () => getVolumeReferencedObject(this);\n\n  protected sanitize(\n    type: VolumeType,\n    { name, claimName, image, userData, userDataBase64 }: CombinedTypeData,\n  ): CombinedTypeData {\n    switch (type) {\n      case VolumeType.DATA_VOLUME:\n        return { name };\n      case VolumeType.PERSISTENT_VOLUME_CLAIM:\n        return { claimName };\n      case VolumeType.CONTAINER_DISK:\n        return { image };\n      case VolumeType.CLOUD_INIT_NO_CLOUD:\n        return userDataBase64 ? { userDataBase64 } : { userData };\n      default:\n        return null;\n    }\n  }\n}\n","// import * as _ from 'lodash';\nimport {\n  NodeAffinity,\n  PodAffinity,\n} from '../../components/modals/scheduling-modals/affinity-modal/types';\n\nexport const getRequiredScheduling = (affinity: NodeAffinity | PodAffinity) =>\n  affinity?.requiredDuringSchedulingIgnoredDuringExecution;\n\nexport const getPreferredScheduling = (affinity: NodeAffinity | PodAffinity) =>\n  affinity?.preferredDuringSchedulingIgnoredDuringExecution;\n\n// Node Affinity\nexport const getNodeAffinityRequiredTerms = (affinity: NodeAffinity) =>\n  affinity?.requiredDuringSchedulingIgnoredDuringExecution?.nodeSelectorTerms;\n\nexport const getNodeAffinityPreferredTerms = (affinity: NodeAffinity) =>\n  affinity?.preferredDuringSchedulingIgnoredDuringExecution;\n\n// Pod Affinity\nexport const getPodAffinityRequiredTerms = (affinity: PodAffinity) =>\n  affinity?.requiredDuringSchedulingIgnoredDuringExecution;\n\nexport const getPodAffinityPreferredTerms = (affinity: PodAffinity) =>\n  affinity?.preferredDuringSchedulingIgnoredDuringExecution;\n","import * as _ from 'lodash';\nimport { ConfigMapKind } from '@console/internal/module/k8s';\nimport { AccessMode, VolumeMode } from '../../constants/vm/storage';\n\nconst getSCConfigMapAttribute = (\n  storageClassConfigMap: ConfigMapKind,\n  storageClassName: string,\n  attributeName: string,\n): string => {\n  const hasSubAttribute =\n    storageClassName &&\n    attributeName &&\n    _.has(storageClassConfigMap, ['data', `${storageClassName}.${attributeName}`]);\n  return (\n    _.get(storageClassConfigMap, [\n      'data',\n      hasSubAttribute ? `${storageClassName}.${attributeName}` : attributeName,\n    ]) || null\n  );\n};\n\nexport const getDefaultSCVolumeMode = (\n  storageClassConfigMap: ConfigMapKind,\n  storageClassName?: string,\n) => {\n  const configMapDefault = getSCConfigMapAttribute(\n    storageClassConfigMap,\n    storageClassName,\n    'volumeMode',\n  );\n\n  const volumeMode = configMapDefault ? VolumeMode.fromString(configMapDefault) : null;\n\n  return volumeMode || VolumeMode.FILESYSTEM;\n};\n\nexport const getDefaultSCAccessModes = (\n  storageClassConfigMap: ConfigMapKind,\n  storageClassName?: string,\n) => {\n  const configMapDefault = getSCConfigMapAttribute(\n    storageClassConfigMap,\n    storageClassName,\n    'accessMode',\n  );\n\n  const accessMode = configMapDefault ? AccessMode.fromString(configMapDefault) : null;\n\n  return accessMode ? [accessMode] : [AccessMode.READ_WRITE_ONCE];\n};\n","import * as _ from 'lodash';\nimport { getStorageSize } from '../selectors';\n\nexport const getPvcResources = (pvc) => _.get(pvc, 'spec.resources');\n\nexport const getPvcStorageSize = (pvc): string => getStorageSize(getPvcResources(pvc));\n\nexport const getPvcAccessModes = (pvc) => _.get(pvc, 'spec.accessModes');\nexport const getPvcVolumeMode = (pvc) => _.get(pvc, 'spec.volumeMode');\nexport const getPvcStorageClassName = (pvc): string => _.get(pvc, 'spec.storageClassName');\n","export * from './selectors';\nexport * from './rdp';\n","/* eslint-disable no-console */\nimport * as _ from 'lodash';\nimport { K8sResourceKind, PodKind } from '@console/internal/module/k8s';\nimport { DEFAULT_RDP_PORT } from '../../../constants/vm';\nimport { getServicePort } from '../selectors';\n\nexport const getRdpAddressPort = (rdpService: K8sResourceKind, launcherPod: PodKind) => {\n  const rdpPortObj = getServicePort(rdpService, DEFAULT_RDP_PORT);\n  if (!rdpPortObj) {\n    return null;\n  }\n\n  let port = _.get(rdpPortObj, 'port');\n  let address;\n  switch (_.get(rdpService, 'spec.type')) {\n    case 'LoadBalancer':\n      address = _.get(rdpService, 'spec.externalIPs[0]');\n      if (!address) {\n        console.warn('External IP is not defined for the LoadBalancer RDP Service: ', rdpService);\n      }\n      break;\n    case 'ClusterIP':\n      address = _.get(rdpService, 'spec.clusterIP');\n      if (!address) {\n        console.warn('Cluster IP is not defined for the ClusterIP RDP Service: ', rdpService);\n      }\n      break;\n    case 'NodePort':\n      port = _.get(rdpPortObj, 'nodePort');\n      if (launcherPod) {\n        address = _.get(launcherPod, 'status.hostIP');\n      }\n      if (!address) {\n        console.warn(\n          'Node IP (launcherpod.status.hostIP) is not yet known for NodePort RDP Service: ',\n          rdpService,\n        );\n      }\n      break;\n    default:\n      console.error('Unrecognized Service type: ', rdpService);\n  }\n\n  if (!address || !port) {\n    return null;\n  }\n\n  console.log('RDP requested for: ', address, port);\n  return {\n    address,\n    port,\n  };\n};\n","import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { ServiceKind } from '@console/knative-plugin/src/types';\nimport { VMIKind } from '../../types';\nimport { getLabels } from '@console/shared';\n\nexport const getServicePort = (service: K8sResourceKind, targetPort: number) =>\n  _.get(service, ['spec', 'ports'], []).find(\n    (servicePort) => targetPort === servicePort.targetPort,\n  );\n\nconst getServiceSelectors = (service: ServiceKind) =>\n  service && service.spec && service.spec.selector ? service.spec.selector : {};\n\nexport const getServicesForVmi = (services: ServiceKind[], vmi: VMIKind): ServiceKind[] => {\n  const vmLabels = getLabels(vmi, {});\n  return services.filter((service) => {\n    const selectors = getServiceSelectors(service);\n    const selectorKeys = Object.keys(selectors);\n    return selectorKeys.length > 0\n      ? selectorKeys.every((key) => vmLabels[key] === selectors[key])\n      : false;\n  });\n};\n","import * as _ from 'lodash';\nimport { CUSTOM_FLAVOR } from '../../constants/vm';\n\nexport const isCustomFlavor = (flavor: string) =>\n  !flavor || flavor?.toLowerCase() === CUSTOM_FLAVOR.toLowerCase();\n\n// UI representation of flavor tiny|small|medium|large|Custom\nexport const toUIFlavor = (flavor: string) => (isCustomFlavor(flavor) ? CUSTOM_FLAVOR : flavor);\nexport const toUIFlavorLabel = (flavor: string) => _.capitalize(toUIFlavor(flavor));\n","import { VMGenericLikeEntityKind } from '../../types/vmLike';\nimport { VirtualMachineInstanceModel } from '../../models';\nimport { VMIKind } from '../../types';\nimport { asVM } from '../vm/vmlike';\nimport { getVMINodeSelector, getVMITolerations, getVMIAffinity } from '../vmi';\nimport { getNodeSelector, getTolerations, getAffinity } from '../vm/selectors';\n\nexport const getVMLikeTolerations = (vm: VMGenericLikeEntityKind) =>\n  vm.kind === VirtualMachineInstanceModel.kind\n    ? getVMITolerations(vm as VMIKind)\n    : getTolerations(asVM(vm));\n\nexport const getVMLikeNodeSelector = (vm: VMGenericLikeEntityKind) =>\n  vm.kind === VirtualMachineInstanceModel.kind\n    ? getVMINodeSelector(vm as VMIKind)\n    : getNodeSelector(asVM(vm));\n\nexport const getVMLikeAffinity = (vm: VMGenericLikeEntityKind) =>\n  vm.kind === VirtualMachineInstanceModel.kind\n    ? getVMIAffinity(vm as VMIKind)\n    : getAffinity(asVM(vm));\n","import * as _ from 'lodash';\nimport { TemplateKind } from '@console/internal/module/k8s';\nimport {\n  CloudInitDataHelper,\n  CloudInitDataFormKeys,\n} from '../../k8s/wrapper/vm/cloud-init-data-helper';\nimport { getAnnotation, getAnnotations, getLabels } from '../selectors';\nimport {\n  TEMPLATE_FLAVOR_LABEL,\n  TEMPLATE_OS_LABEL,\n  TEMPLATE_OS_NAME_ANNOTATION,\n  TEMPLATE_TYPE_LABEL,\n  TEMPLATE_TYPE_VM,\n  TEMPLATE_WORKLOAD_LABEL,\n} from '../../constants/vm';\nimport { getCloudInitVolume } from '../vm/selectors';\nimport { VolumeWrapper } from '../../k8s/wrapper/vm/volume-wrapper';\nimport { selectVM } from './basic';\nimport { removeOSDups } from '../../utils/sort';\n\nexport const getTemplatesWithLabels = (templates: TemplateKind[], labels: string[]) => {\n  const requiredLabels = labels.filter((label) => label);\n  return templates.filter((template) => {\n    const templateLabels = new Set(Object.keys(getLabels(template, {})));\n    const missingLabel = requiredLabels.find((requiredLabel) => !templateLabels.has(requiredLabel));\n    return !missingLabel;\n  });\n};\n\nexport const getTemplatesOfLabelType = (templates: TemplateKind[], type: string) =>\n  (templates || []).filter(\n    (template) => _.get(template, ['metadata', 'labels', TEMPLATE_TYPE_LABEL]) === type,\n  );\n\nexport const getUserTemplate = (templates: TemplateKind[], userTemplateName: string) => {\n  const userTemplates = getTemplatesOfLabelType(templates, TEMPLATE_TYPE_VM);\n  return userTemplates.find((template) => template.metadata.name === userTemplateName);\n};\n\nexport const getTemplatesLabelValues = (templates: TemplateKind[], label: string): string[] => {\n  const labelValues = [];\n  (templates || []).forEach((template) => {\n    const labels = Object.keys(getLabels(template, {})).filter((l) => l.startsWith(label));\n    labels.forEach((l) => {\n      const labelParts = l.split('/');\n      if (labelParts.length > 1) {\n        const labelName = labelParts[labelParts.length - 1];\n        if (labelValues.indexOf(labelName) === -1) {\n          labelValues.push(labelName);\n        }\n      }\n    });\n  });\n  return labelValues;\n};\n\nexport const getTemplateFlavors = (templates: TemplateKind[]) =>\n  getTemplatesLabelValues(templates, TEMPLATE_FLAVOR_LABEL);\n\nexport const getTemplateHostname = (template: TemplateKind) => {\n  const vm = selectVM(template);\n  const YAMLHostname = _.get(vm, 'spec.template.spec') && vm.spec.template.spec.hostname;\n  if (YAMLHostname) {\n    return YAMLHostname;\n  }\n\n  const cloudInitVolume = getCloudInitVolume(vm);\n  const data = new VolumeWrapper(cloudInitVolume).getCloudInitNoCloud();\n  const cloudInitHelper = new CloudInitDataHelper(data);\n  return cloudInitHelper.get(CloudInitDataFormKeys.HOSTNAME);\n};\n\nexport const getTemplateOperatingSystems = (templates: TemplateKind[]) => {\n  const osIds = getTemplatesLabelValues(templates, TEMPLATE_OS_LABEL);\n  return removeOSDups(\n    osIds.map((osId) => {\n      const nameAnnotation = `${TEMPLATE_OS_NAME_ANNOTATION}/${osId}`;\n      const template = templates.find(\n        (t) =>\n          !!Object.keys(getAnnotations(t, {})).find((annotation) => annotation === nameAnnotation),\n      );\n      return {\n        id: osId,\n        name: getAnnotation(template, nameAnnotation),\n      };\n    }),\n  );\n};\n\nexport const getTemplateWorkloadProfiles = (templates: TemplateKind[]) =>\n  getTemplatesLabelValues(templates, TEMPLATE_WORKLOAD_LABEL);\n","import { VMGenericLikeEntityKind } from '../../types/vmLike';\nimport { getLabel, getName, getNamespace } from '@console/shared/src';\nimport { LABEL_USED_TEMPLATE_NAME, LABEL_USED_TEMPLATE_NAMESPACE } from '../../constants/vm';\nimport { TemplateKind } from '@console/internal/module/k8s';\nimport { TemplateValidations } from '../../utils/validations/template/template-validations';\n\nexport const getVMTemplateNamespacedName = (\n  vm: VMGenericLikeEntityKind,\n): { name: string; namespace: string } => {\n  const name = getLabel(vm, LABEL_USED_TEMPLATE_NAME);\n  const namespace = getLabel(vm, LABEL_USED_TEMPLATE_NAMESPACE);\n  return name && namespace ? { name, namespace } : null;\n};\n\nexport const getVMTemplate = (\n  vm: VMGenericLikeEntityKind,\n  templates: TemplateKind[],\n): TemplateKind => {\n  const namespacedName = getVMTemplateNamespacedName(vm);\n  return namespacedName\n    ? templates.find(\n        (template) =>\n          getName(template) === namespacedName.name &&\n          getNamespace(template) === namespacedName.namespace,\n      )\n    : undefined;\n};\n\nexport const getTemplateValidationsFromTemplate = (\n  vmTemplate: TemplateKind,\n): TemplateValidations => {\n  const result = vmTemplate?.metadata?.annotations?.validations;\n\n  if (!result) {\n    return new TemplateValidations();\n  }\n\n  try {\n    return new TemplateValidations(JSON.parse(result));\n  } catch (e) {\n    return new TemplateValidations();\n  }\n};\n","import { CPURaw } from '../../types/vm';\nimport { vCPUCount } from './cpu';\nimport { humanizeBinaryBytes } from '@console/internal/components/utils';\nimport { convertToBytes } from '../../components/form/size-unit-utils';\nimport { toUIFlavorLabel } from '../vm-like/flavor';\n\nexport const getFlavorText = ({\n  cpu,\n  memory,\n  flavor,\n}: {\n  cpu: CPURaw;\n  memory: string;\n  flavor: string;\n}) => {\n  const vcpusCount = vCPUCount(cpu);\n  const vcpusText = `${vcpusCount} vCPU${vcpusCount > 1 ? 's' : ''}`;\n\n  const memoryBase = convertToBytes(memory);\n  const memoryText = humanizeBinaryBytes(memoryBase).string;\n\n  return `${toUIFlavorLabel(flavor)}: ${vcpusText}, ${memoryText} Memory`;\n};\n","import * as _ from 'lodash';\nimport { K8sResourceKind, PodKind } from '@console/internal/module/k8s';\nimport { getName } from '@console/shared';\nimport { getServicePort } from '../service';\nimport { VMIKind } from '../../types/vm';\nimport { DEFAULT_RDP_PORT, TEMPLATE_VM_NAME_LABEL } from '../../constants/vm';\nimport { getRdpAddressPort } from '../service/rdp';\nimport { isConnectionEncrypted } from '../../utils/url';\nimport { getVMIApiPath, getVMISubresourcePath } from './selectors';\n\nconst findVMServiceWithPort = (vmi: VMIKind, allServices: K8sResourceKind[], targetPort: number) =>\n  (allServices || []).find(\n    (service) =>\n      getName(vmi) === _.get(service, ['spec', 'selector', TEMPLATE_VM_NAME_LABEL]) &&\n      !!getServicePort(service, targetPort),\n  );\n\n/**\n * Finds Service for the VM/VMI which is exposing the RDP port.\n * Returns undefined or single first match.\n *\n * To pair service with VM, selector must be set on the Service object:\n *   spec:\n *     selector:\n *       vm.kubevirt.io/name: VM_NAME\n *\n * https://kubevirt.io/user-guide/docs/latest/using-virtual-machines/expose-service.html\n * virtctl expose virtualmachine [VM_NAME] --name [MY_SERVICE_NAME] --port 27017 --target-port 3389\n */\nexport const findRDPService = (vmi: VMIKind, allServices: K8sResourceKind[]) =>\n  findVMServiceWithPort(vmi, allServices, DEFAULT_RDP_PORT);\n\nexport const getRdpConnectionDetails = (\n  vmi: VMIKind,\n  rdpService: K8sResourceKind,\n  launcherPod: PodKind,\n): RDPConnectionDetailsType => {\n  if (!vmi || !rdpService) {\n    return undefined;\n  }\n\n  return {\n    vmi,\n    manual: getRdpAddressPort(rdpService, launcherPod),\n  };\n};\n\nexport const getSerialConsoleConnectionDetails = (\n  vmi: VMIKind,\n): SerialConsoleConnectionDetailsType => {\n  if (!vmi) {\n    return undefined;\n  }\n\n  const protocol = isConnectionEncrypted() ? 'wss' : 'ws';\n  return {\n    vmi,\n    host: `${protocol}://${window.location.hostname}:${window.location.port ||\n      (isConnectionEncrypted() ? '443' : '80')}`,\n    path: `/${getVMISubresourcePath()}/${getVMIApiPath(vmi)}/console`, // CSRF Token will be added in WSFactory\n  };\n};\n\nexport const getVncConnectionDetails = (vmi: VMIKind): VNCConnectionDetailsType => {\n  if (!vmi) {\n    return undefined;\n  }\n\n  // the novnc library requires protocol to be specified so the URL must be absolute - including host:port\n  return {\n    encrypt: isConnectionEncrypted(), // whether ws or wss to be used\n    host: window.location.hostname,\n    port: window.location.port || (isConnectionEncrypted() ? '443' : '80'),\n\n    // Example: ws://localhost:9000/api/kubernetes/apis/subresources.kubevirt.io/v1alpha3/namespaces/kube-system/virtualmachineinstances/vm-cirros1/vnc\n    path: `${getVMISubresourcePath()}/${getVMIApiPath(vmi)}/vnc`,\n\n    manual: undefined, // so far unsupported\n    /* TODO: Desktop viewer connection needs general agreement by the Kubevirt community how to expose the VNC port for clients without WS\n      {\n      address: 'Service not exposed',\n      port: undefined,\n      tlsPort: undefined,\n    },\n    */\n  };\n};\n\nconst getVMIStatusConditions = (vmi: VMIKind) => (vmi && vmi.status && vmi.status.conditions) || [];\n\nexport const isGuestAgentConnected = (vmi: VMIKind): boolean =>\n  getVMIStatusConditions(vmi).some(\n    (condition) => condition.type === 'AgentConnected' && condition.status === 'True',\n  );\n\nexport type VNCConnectionDetailsType = {\n  encrypt: boolean;\n  host: string;\n  port: string | number;\n  path: string;\n  manual: VNCConnectionDetailsManualType; // so far not used, kept for compatibility and future extension when VNC can be accessed directly without k8s API proxy\n};\n\nexport type SerialConsoleConnectionDetailsType = {\n  vmi: VMIKind;\n  host: string;\n  path: string;\n};\n\nexport type VNCConnectionDetailsManualType = {};\n\nexport type RDPConnectionDetailsManualType = {\n  address: string;\n  port: number | string;\n};\n\nexport type RDPConnectionDetailsType = {\n  vmi: VMIKind;\n  manual: RDPConnectionDetailsManualType;\n};\n","export * from './basic';\nexport * from './combined';\nexport * from './selectors';\nexport * from './ip-address';\n","import { get, uniq, flatMap } from 'lodash';\nimport { VMIKind } from '../../types';\n\nexport const getVmiIpAddresses = (vmi: VMIKind) =>\n  uniq(\n    flatMap(\n      // get IPs only for named interfaces because Windows reports IPs for other devices like Loopback Pseudo-Interface 1 etc.\n      get(vmi, 'status.interfaces', []).filter((i) => !!i.name),\n      (i) => {\n        const arr = [];\n        if (i.ipAddress) {\n          // the \"ipAddress\" is deprecated but still can contain useful value\n          arr.push(i.ipAddress.trim());\n        }\n        if (i.ipAddresses && Array.isArray(i.ipAddresses) && i.ipAddresses.length > 0) {\n          arr.push(...i.ipAddresses.map((ip) => ip.trim()));\n        }\n        return arr;\n      },\n    ).filter((ip) => ip && ip.length > 0),\n  );\n","import { getName, getNamespace } from '@console/shared';\nimport { VirtualMachineInstanceModel } from '../../models';\nimport { getConsoleAPIBase } from '../../utils/url';\nimport { VMIKind } from '../../types/vm';\n\nexport const getVMISubresourcePath = () =>\n  `${getConsoleAPIBase()}/apis/subresources.${VirtualMachineInstanceModel.apiGroup}`;\n\nexport const getVMIApiPath = (vmi: VMIKind) =>\n  `${VirtualMachineInstanceModel.apiVersion}/namespaces/${getNamespace(vmi)}/${\n    VirtualMachineInstanceModel.plural\n  }/${getName(vmi)}`;\n","import * as React from 'react';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport {\n  Firehose,\n  FirehoseResult,\n  LoadingBox,\n  useAccessReview,\n  asAccessReview,\n} from '@console/internal/components/utils';\nimport { observer } from '@console/topology';\nimport { TemplateKind } from '@console/internal/module/k8s';\nimport { TemplateModel } from '@console/internal/models';\nimport { VirtualMachineModel } from '../models';\nimport { TEMPLATE_TYPE_LABEL, TEMPLATE_TYPE_VM } from '../constants/vm';\nimport { VMDetailsList, VMResourceSummary } from '../components/vms/vm-resource';\nimport { VMNode } from './types';\nimport { VMKind } from '../types/vm';\n\ntype TopologyVmDetailsPanelProps = {\n  vmNode: VMNode;\n};\n\ntype LoadedTopologyVmDetailsPanelProps = TopologyVmDetailsPanelProps & {\n  loaded?: boolean;\n  templates?: FirehoseResult<TemplateKind[]>;\n};\n\nconst LoadedTopologyVmDetailsPanel: React.FC<LoadedTopologyVmDetailsPanelProps> = observer(\n  ({ loaded, vmNode, templates }) => {\n    const vmData = vmNode.getData();\n    const { pods, obj } = vmData.resources;\n    const vmObj = obj as VMKind;\n    const { vmi, vmStatusBundle } = vmData.data;\n    const canUpdate =\n      useAccessReview(asAccessReview(VirtualMachineModel, vmObj || {}, 'patch')) && !!vmObj;\n\n    if (!loaded) {\n      return <LoadingBox />;\n    }\n    return (\n      <Grid gutter=\"md\">\n        <GridItem span={6}>\n          <VMResourceSummary\n            canUpdateVM={canUpdate}\n            vm={vmObj}\n            vmi={vmi}\n            templates={templates.data}\n            kindObj={VirtualMachineModel}\n          />\n        </GridItem>\n        <GridItem span={6}>\n          <VMDetailsList\n            canUpdateVM={canUpdate}\n            vm={vmObj}\n            vmi={vmi}\n            pods={pods}\n            kindObj={VirtualMachineModel}\n            vmStatusBundle={vmStatusBundle}\n          />\n        </GridItem>\n      </Grid>\n    );\n  },\n);\n\nexport const TopologyVmDetailsPanel: React.FC<TopologyVmDetailsPanelProps> = observer(\n  ({ vmNode }: TopologyVmDetailsPanelProps) => {\n    const vmData = vmNode.getData();\n    const vmObj = vmData.resources.obj;\n    const { namespace } = vmObj.metadata;\n\n    const resources = [\n      {\n        kind: TemplateModel.kind,\n        namespace,\n        isList: true,\n        prop: 'templates',\n        matchLabels: { [TEMPLATE_TYPE_LABEL]: TEMPLATE_TYPE_VM },\n      },\n    ];\n    return (\n      <div className=\"overview__sidebar-pane-body resource-overview__body\">\n        <Firehose resources={resources}>\n          <LoadedTopologyVmDetailsPanel vmNode={vmNode} />\n        </Firehose>\n      </div>\n    );\n  },\n);\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport {\n  ResourceIcon,\n  SimpleTabNav,\n  ActionsMenu,\n  resourcePathFromModel,\n} from '@console/internal/components/utils';\nimport * as UIActions from '@console/internal/actions/ui';\nimport { observer } from '@console/topology';\nimport { modelFor } from '@console/internal/module/k8s';\nimport { vmActions } from './components/kubevirtComponentFactory';\nimport { TopologyVmDetailsPanel } from './TopologyVmDetailsPanel';\nimport { TopologyVmResourcesPanel } from './TopologyVmResourcesPanel';\nimport { VMNode } from './types';\n\ntype PropsFromState = {\n  selectedDetailsTab?: any;\n};\n\ntype PropsFromDispatch = {\n  onClickTab?: (name: string) => void;\n};\n\nconst stateToProps = ({ UI }): PropsFromState => ({\n  selectedDetailsTab: UI.getIn(['overview', 'selectedDetailsTab']),\n});\n\nconst dispatchToProps = (dispatch): PropsFromDispatch => ({\n  onClickTab: (name) => dispatch(UIActions.selectOverviewDetailsTab(name)),\n});\n\ntype OwnProps = {\n  vmNode: VMNode;\n};\n\ntype TopologyVmPanelProps = PropsFromState & PropsFromDispatch & OwnProps;\n\nexport const ConnectedTopologyVmPanel: React.FC<TopologyVmPanelProps> = ({\n  vmNode,\n  selectedDetailsTab,\n  onClickTab,\n}: TopologyVmPanelProps) => {\n  const name = vmNode.getLabel();\n  const vmData = vmNode.getData();\n  const vmObj = vmData.resources.obj;\n  const { namespace } = vmObj.metadata;\n  const actions = vmActions(vmData);\n\n  return (\n    <div className=\"overview__sidebar-pane\">\n      <div className=\"overview__sidebar-pane-head resource-overview__heading\">\n        <h1 className=\"co-m-pane__heading\">\n          <div className=\"co-m-pane__name co-resource-item\">\n            <ResourceIcon className=\"co-m-resource-icon--lg\" kind={vmObj.kind} />\n            {name && (\n              <Link\n                to={resourcePathFromModel(modelFor(vmObj.kind), name, namespace)}\n                className=\"co-resource-item__resource-name\"\n              >\n                {name}\n              </Link>\n            )}\n          </div>\n          {actions?.length && (\n            <div className=\"co-actions\">\n              <ActionsMenu actions={actions} />\n            </div>\n          )}\n        </h1>\n      </div>\n      <SimpleTabNav\n        selectedTab={selectedDetailsTab || 'Resources'}\n        onClickTab={onClickTab}\n        tabs={[\n          { name: 'Details', component: TopologyVmDetailsPanel },\n          { name: 'Resources', component: TopologyVmResourcesPanel },\n        ]}\n        tabProps={{ vmNode }}\n        additionalClassNames=\"co-m-horizontal-nav__menu--within-sidebar co-m-horizontal-nav__menu--within-overview-sidebar\"\n      />\n    </div>\n  );\n};\n\nconst TopologyVmPanel = connect<PropsFromState, PropsFromDispatch, TopologyVmPanelProps>(\n  stateToProps,\n  dispatchToProps,\n)(observer(ConnectedTopologyVmPanel));\n\nexport default TopologyVmPanel;\n","import * as React from 'react';\nimport { observer } from '@console/topology';\nimport { PodsOverview } from '@console/internal/components/overview/pods-overview';\nimport { NetworkingOverview } from '@console/internal/components/overview/networking-overview';\nimport { VMNode } from './types';\n\ntype TopologyVmResourcePanelProps = {\n  vmNode: VMNode;\n};\n\nexport const TopologyVmResourcesPanel: React.FC<TopologyVmResourcePanelProps> = observer(\n  ({ vmNode }: TopologyVmResourcePanelProps) => {\n    const vmData = vmNode.getData();\n    const { obj: vm, pods, services, routes } = vmData?.resources;\n\n    return (\n      <div className=\"overview__sidebar-pane-body\">\n        <PodsOverview pods={pods} obj={vm} />\n        <NetworkingOverview services={services} routes={routes} />\n      </div>\n    );\n  },\n);\n","import * as React from 'react';\nimport { modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { KebabOption, kebabOptionsToMenu } from '@console/internal/components/utils';\nimport {\n  GraphElement,\n  ComponentFactory as TopologyComponentFactory,\n  withDragNode,\n  withDndDrop,\n  withSelection,\n  Node,\n} from '@console/topology';\nimport {\n  NodeComponentProps,\n  nodeDragSourceSpec,\n  nodeDropTargetSpec,\n  withEditReviewAccess,\n  withContextMenu,\n  AbstractSBRComponentFactory,\n  createMenuItems,\n  TopologyDataObject,\n  getTopologyResourceObject,\n} from '@console/dev-console/src/components/topology';\nimport { ModifyApplication } from '@console/dev-console/src/actions/modify-application';\nimport { vmMenuActions } from '../../components/vms/menu-actions';\nimport { VmNode } from './nodes/VmNode';\nimport { TYPE_VIRTUAL_MACHINE } from './const';\nimport { VMNodeData } from '../types';\n\nexport const vmActions = (vm: TopologyDataObject<VMNodeData>): KebabOption[] => {\n  const contextMenuResource = getTopologyResourceObject(vm);\n  if (!contextMenuResource) {\n    return null;\n  }\n  const {\n    data: { vmi, vmStatusBundle },\n  } = vm;\n\n  const model = modelFor(referenceFor(contextMenuResource));\n  return [\n    ModifyApplication(model, contextMenuResource),\n    ...vmMenuActions.map((action) => {\n      return action(model, contextMenuResource, {\n        vmi,\n        vmStatusBundle,\n      });\n    }),\n  ];\n};\n\nexport const vmContextMenu = (element: Node) => {\n  return createMenuItems(kebabOptionsToMenu(vmActions(element.getData())));\n};\n\nclass KubevirtComponentFactory extends AbstractSBRComponentFactory {\n  getFactory = (): TopologyComponentFactory => {\n    return (kind, type): React.ComponentType<{ element: GraphElement }> | undefined => {\n      switch (type) {\n        case TYPE_VIRTUAL_MACHINE:\n          return this.withAddResourceConnector()(\n            withDndDrop<\n              any,\n              any,\n              { droppable?: boolean; hover?: boolean; canDrop?: boolean },\n              NodeComponentProps\n            >(nodeDropTargetSpec)(\n              withEditReviewAccess('patch')(\n                withDragNode(nodeDragSourceSpec(type))(\n                  withSelection(false, true)(withContextMenu(vmContextMenu)(VmNode)),\n                ),\n              ),\n            ),\n          );\n        default:\n          return undefined;\n      }\n    };\n  };\n}\n\nexport { KubevirtComponentFactory };\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { Tooltip } from '@patternfly/react-core';\nimport { VirtualMachineIcon } from '@patternfly/react-icons';\nimport {\n  Node,\n  observer,\n  WithSelectionProps,\n  WithContextMenuProps,\n  WithCreateConnectorProps,\n  WithDragNodeProps,\n  WithDndDropProps,\n  useCombineRefs,\n  createSvgIdUrl,\n  useHover,\n  useAnchor,\n  RectAnchor,\n} from '@console/topology';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { modelFor, referenceFor } from '@console/internal/module/k8s';\nimport SvgBoxedText from '@console/dev-console/src/components/svg/SvgBoxedText';\nimport {\n  useDisplayFilters,\n  getTopologyResourceObject,\n  useSearchFilter,\n  NODE_SHADOW_FILTER_ID,\n  NODE_SHADOW_FILTER_ID_HOVER,\n  NodeShadows,\n  TopologyDataObject,\n} from '@console/dev-console/src/components/topology';\nimport { NodeModel } from '@console/topology/src/types';\nimport './VmNode.scss';\nimport { VMStatus } from '../../../constants/vm/vm-status';\nimport { VMNodeData } from '../../types';\n\nexport type VmNodeProps = {\n  element: Node<NodeModel, TopologyDataObject<VMNodeData>>;\n  hover?: boolean;\n  dragging?: boolean;\n  edgeDragging?: boolean;\n  highlight?: boolean;\n  canDrop?: boolean;\n  dropTarget?: boolean;\n  urlAnchorRef?: React.Ref<SVGCircleElement>;\n} & WithSelectionProps &\n  WithContextMenuProps &\n  WithDragNodeProps &\n  WithDndDropProps &\n  WithCreateConnectorProps;\n\nconst VM_NODE_RADIUS = 10;\nconst VM_STATUS_GAP = 7;\nconst VM_STATUS_WIDTH = 7;\nconst VM_STATUS_RADIUS = 7;\n\nconst ObservedVmNode: React.FC<VmNodeProps> = ({\n  element,\n  dragNodeRef,\n  dndDropRef,\n  canDrop,\n  dragging,\n  edgeDragging,\n  dropTarget,\n  selected,\n  onSelect,\n  onContextMenu,\n  contextMenuOpen,\n  onHideCreateConnector,\n  onShowCreateConnector,\n}) => {\n  const [hover, hoverRef] = useHover();\n  useAnchor(RectAnchor);\n  const refs = useCombineRefs<SVGEllipseElement>(hoverRef, dragNodeRef);\n  const { width, height } = element.getBounds();\n  const vmData = element.getData().data;\n  const { kind, osImage, vmStatusBundle } = vmData;\n  const displayFilters = useDisplayFilters();\n  const [filtered] = useSearchFilter(element.getLabel());\n  const iconRadius = Math.min(width, height) * 0.25;\n  const showLabels = displayFilters.showLabels || hover;\n  const tipContent = `Create a visual connector`;\n  const resourceObj = getTopologyResourceObject(element.getData());\n  const resourceModel = modelFor(referenceFor(resourceObj));\n  const editAccess = useAccessReview({\n    group: resourceModel.apiGroup,\n    verb: 'patch',\n    resource: resourceModel.plural,\n    name: resourceObj.metadata.name,\n    namespace: resourceObj.metadata.namespace,\n  });\n\n  React.useLayoutEffect(() => {\n    if (editAccess) {\n      if (hover) {\n        onShowCreateConnector && onShowCreateConnector();\n      } else {\n        onHideCreateConnector && onHideCreateConnector();\n      }\n    }\n  }, [hover, onShowCreateConnector, onHideCreateConnector, editAccess]);\n\n  let statusClass;\n  const statusMessage = vmStatusBundle.message;\n  switch (vmStatusBundle.status) {\n    case VMStatus.V2V_CONVERSION_PENDING:\n    case VMStatus.V2V_VM_IMPORT_PENDING:\n    case VMStatus.CDI_IMPORT_PENDING:\n      statusClass = 'kubevirt-m-pending';\n      break;\n    case VMStatus.V2V_CONVERSION_ERROR:\n    case VMStatus.POD_ERROR:\n    case VMStatus.VM_ERROR:\n    case VMStatus.VMI_ERROR:\n    case VMStatus.CDI_IMPORT_ERROR:\n    case VMStatus.V2V_VM_IMPORT_ERROR:\n    case VMStatus.PAUSED:\n      statusClass = 'kubevirt-m-error';\n      break;\n    case VMStatus.VMI_WAITING:\n    case VMStatus.STARTING:\n      statusClass = 'kubevirt-m-not-ready';\n      break;\n    case VMStatus.STOPPING:\n      statusClass = 'kubevirt-m-terminating';\n      break;\n    case VMStatus.MIGRATING:\n    case VMStatus.RUNNING:\n      statusClass = 'kubevirt-m-running';\n      break;\n    case VMStatus.OFF:\n      statusClass = 'kubevirt-m-off';\n      break;\n    case VMStatus.V2V_CONVERSION_IN_PROGRESS:\n    case VMStatus.V2V_VM_IMPORT_IN_PROGRESS:\n    case VMStatus.CDI_IMPORTING:\n      statusClass = 'kubevirt-m-importing';\n      break;\n    case VMStatus.UNKNOWN:\n    default:\n      statusClass = 'kubevirt-m-unknown';\n  }\n\n  const statusRect = (\n    <rect\n      className=\"kubevirt-vm-node__status\"\n      x={VM_STATUS_GAP}\n      y={VM_STATUS_GAP}\n      rx={VM_STATUS_RADIUS}\n      ry={VM_STATUS_RADIUS}\n      width={width - VM_STATUS_GAP * 2}\n      height={height - VM_STATUS_GAP * 2}\n    />\n  );\n\n  const imageProps = {\n    x: width / 2 - iconRadius,\n    y: height / 2 - iconRadius,\n    width: iconRadius * 2,\n    height: iconRadius * 2,\n  };\n  const imageComponent = osImage ? (\n    <image {...imageProps} xlinkHref={osImage} />\n  ) : (\n    <VirtualMachineIcon {...imageProps} />\n  );\n\n  return (\n    <g>\n      <Tooltip\n        content={tipContent}\n        trigger=\"manual\"\n        isVisible={dropTarget && canDrop}\n        tippyProps={{ duration: 0, delay: 0 }}\n      >\n        <g\n          className={classNames('odc-base-node kubevirt-vm-node', statusClass, {\n            'is-hover': hover || contextMenuOpen,\n            'is-highlight': canDrop,\n            'is-dragging': dragging || edgeDragging,\n            'is-dropTarget': canDrop && dropTarget,\n            'is-filtered': filtered,\n            'is-selected': selected,\n          })}\n        >\n          <NodeShadows />\n          <g\n            data-test-id=\"base-node-handler\"\n            onClick={onSelect}\n            onContextMenu={editAccess ? onContextMenu : null}\n            ref={refs}\n          >\n            <rect\n              className=\"odc-base-node__bg\"\n              ref={dndDropRef}\n              x={0}\n              y={0}\n              rx={VM_NODE_RADIUS}\n              ry={VM_NODE_RADIUS}\n              width={width}\n              height={height}\n              filter={createSvgIdUrl(\n                hover || dragging || edgeDragging || dropTarget || contextMenuOpen\n                  ? NODE_SHADOW_FILTER_ID_HOVER\n                  : NODE_SHADOW_FILTER_ID,\n              )}\n            />\n            {statusMessage ? <Tooltip content={statusMessage}>{statusRect}</Tooltip> : statusRect}\n            <rect\n              className=\"kubevirt-vm-node__bg\"\n              x={VM_STATUS_GAP + VM_STATUS_WIDTH}\n              y={VM_STATUS_GAP + VM_STATUS_WIDTH}\n              width={width - (VM_STATUS_GAP + VM_STATUS_WIDTH) * 2}\n              height={height - (VM_STATUS_GAP + VM_STATUS_WIDTH) * 2}\n            />\n            {imageComponent}\n            {showLabels && (vmData.kind || element.getLabel()) && (\n              <SvgBoxedText\n                className=\"odc-base-node__label\"\n                x={width / 2}\n                y={height + 24}\n                paddingX={8}\n                paddingY={4}\n                kind={kind}\n              >\n                {element.getLabel()}\n              </SvgBoxedText>\n            )}\n          </g>\n        </g>\n      </Tooltip>\n    </g>\n  );\n};\n\nconst VmNode = observer(ObservedVmNode);\nexport { VmNode };\n","import * as _ from 'lodash';\nimport { OperatingSystemRecord } from '../types';\nimport { isCustomFlavor } from '../selectors/vm-like/flavor';\n\nconst FLAVOR_ORDER = {\n  tiny: 0,\n  small: 1,\n  medium: 2,\n  large: 3,\n};\n\nexport const flavorSort = (array: string[] = []) =>\n  array.sort((a, b) => {\n    if (isCustomFlavor(a)) {\n      return 1;\n    }\n    if (isCustomFlavor(b)) {\n      return -1;\n    }\n    const resolvedFlavorA = FLAVOR_ORDER[a];\n    const resolvedFlavorB = FLAVOR_ORDER[b];\n    if (resolvedFlavorA == null && resolvedFlavorB == null) {\n      return a.toLowerCase().localeCompare(b.toLowerCase());\n    }\n    if (resolvedFlavorA == null) {\n      return 1;\n    }\n    if (resolvedFlavorB == null) {\n      return -1;\n    }\n    return resolvedFlavorA - resolvedFlavorB;\n  });\n\nexport const ignoreCaseSort = <T>(\n  array: T[] = [],\n  byPath: string[] = undefined,\n  byValueResolver: (item: T) => string = undefined,\n) => {\n  const resolve = (v) => {\n    const result = _.isFunction(byValueResolver)\n      ? byValueResolver(v)\n      : byPath\n      ? _.get(v, byPath, '')\n      : v;\n\n    return result == null ? '' : result.toLowerCase();\n  };\n  return array.sort((a, b) => resolve(a).localeCompare(resolve(b)));\n};\n\nexport const splitVersion = (osID: string): number[] =>\n  (osID || '')\n    .split(/\\D/)\n    .filter((x) => x)\n    .map((num) => parseInt(num, 10));\n\n/**\n *\n *\n * Compare the numbers between the two versions by the order of their appearance\n * eg in the OS name.\n *\n * For example:\n * version1: [10,2] for OS: 'Windows 10 R2',\n * version2: [10] for OS: 'Windows 10',\n * (return 1)\n *\n * version1: [9,10] for OS: 'ubuntu9.10',\n * version2: [10,4] for OS: 'ubuntu10.04',\n * (return -1)\n *\n * return 0 when equal.\n *\n */\nexport const compareVersions = (version1: number[], version2: number[]): number => {\n  if (!version1 && !version2) {\n    return 0;\n  }\n\n  const finalVersion1 = version1 || [];\n  const finalVersion2 = version2 || [];\n\n  const zipped = _.zip(finalVersion1, finalVersion2);\n  let idx = 0;\n  while (idx < zipped.length) {\n    /*\n      undefined values are equal to 0, eg:\n      14.0 == 14 -> zipped = [[14,14],[0,undefined]]\n      1.0.0 == 1 -> zipped = [[1,1],[0,undefined],[0,undefined]]\n    */\n    const ver1 = !zipped[idx][0] ? 0 : zipped[idx][0];\n    const ver2 = !zipped[idx][1] ? 0 : zipped[idx][1];\n\n    if (ver1 > ver2) {\n      return 1;\n    }\n\n    if (ver2 > ver1) {\n      return -1;\n    }\n\n    idx++;\n  }\n\n  return 0;\n};\n\nconst descSortOSes = (os1: OperatingSystemRecord, os2: OperatingSystemRecord): number => {\n  const nameCMP = (os1.name || '').localeCompare(os2.name || '');\n  if (nameCMP !== 0) {\n    return nameCMP * -1;\n  }\n\n  return compareVersions(splitVersion(os1.id), splitVersion(os2.id)) * -1;\n};\n\nexport const removeOSDups = (osArr: OperatingSystemRecord[]): OperatingSystemRecord[] =>\n  _.uniqBy(osArr.filter((x) => x).sort(descSortOSes), 'name');\n","import { k8sBasePath } from '@console/internal/module/k8s';\nimport { VMWizardMode, VMWizardName, VMWizardView } from '../constants/vm';\n\nconst ELLIPSIS = '…';\n\nconst ellipsizeLeft = (word) => `${ELLIPSIS}${word}`;\n\nexport const getConsoleAPIBase = () => {\n  // avoid the extra slash when compose the URL by VncConsole\n  return k8sBasePath.startsWith('/') ? k8sBasePath.substring(1) : k8sBasePath;\n};\n\nexport const isConnectionEncrypted = () => window.location.protocol === 'https:';\n\nexport const parseURL = (url: string) => {\n  try {\n    return new URL(url);\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const resolveOrigin = ({ hostname, origin, port }, maxHostnameParts) => {\n  const hostnameParts = hostname.split('.');\n  if (hostnameParts.length <= maxHostnameParts) {\n    return origin;\n  }\n\n  const resolvedHostname = hostnameParts.slice(hostnameParts.length - maxHostnameParts).join('.');\n  const resolvedPort = port ? `:${port}` : '';\n\n  return `${ellipsizeLeft(resolvedHostname)}${resolvedPort}`;\n};\n\nexport const resolvePathname = ({ pathname }, maxPathnameParts) => {\n  const pathnameParts = pathname.split('/').filter((part) => part);\n  if (pathnameParts.length <= maxPathnameParts) {\n    return pathname;\n  }\n\n  const resolvedPathname = pathnameParts.slice(pathnameParts.length - maxPathnameParts).join('/');\n  return `/${ellipsizeLeft(`/${resolvedPathname}`)}`;\n};\n\nexport const resolveURL = ({ urlObj, maxHostnameParts, maxPathnameParts }) =>\n  urlObj.origin === 'null'\n    ? urlObj.href\n    : `${resolveOrigin(urlObj, maxHostnameParts)}${resolvePathname(urlObj, maxPathnameParts)}`;\n\nexport const getVMWizardCreateLink = ({\n  namespace,\n  wizardName,\n  mode,\n  view,\n  template,\n}: {\n  namespace: string;\n  wizardName: VMWizardName;\n  mode: VMWizardMode;\n  view?: VMWizardView;\n  template?: string;\n}) => {\n  const type = wizardName === VMWizardName.YAML ? '~new' : '~new-wizard';\n\n  const params = new URLSearchParams();\n\n  if (mode && mode !== VMWizardMode.VM) {\n    params.append('mode', mode);\n  }\n\n  if (template) {\n    params.append('template', template);\n  }\n\n  if (mode === VMWizardMode.IMPORT && view === VMWizardView.ADVANCED) {\n    // only valid combination in the wizard for now\n    params.append('view', view);\n  }\n\n  const paramsString = params.toString() ? `?${params}` : '';\n\n  return `/k8s/ns/${namespace || 'default'}/virtualization/${type}${paramsString}`;\n};\n","import { referenceForModel } from '@console/internal/module/k8s';\nimport { getName, getNamespace } from '@console/shared/src';\nimport * as _ from 'lodash';\nimport { VirtualMachineModel } from '../models';\n\nexport const getSequence = (from, to) => Array.from({ length: to - from + 1 }, (v, i) => i + from);\n\nexport const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nexport const setNativeValue = (element, value) => {\n  const valueSetter = Object.getOwnPropertyDescriptor(element, 'value').set;\n  const prototype = Object.getPrototypeOf(element);\n  const prototypeValueSetter = Object.getOwnPropertyDescriptor(prototype, 'value').set;\n\n  if (valueSetter && valueSetter !== prototypeValueSetter) {\n    prototypeValueSetter.call(element, value);\n  } else {\n    valueSetter.call(element, value);\n  }\n};\n\nexport const getFullResourceId = (obj) =>\n  `${referenceForModel(obj)}~${getNamespace(obj)}~${getName(obj)}`;\n\nexport const getNextIDResolver = (entities: { id?: string }[] = []) => {\n  let lastID =\n    _.max(entities.map((entity) => (entity.id == null ? 0 : _.toSafeInteger(entity.id)))) || 0;\n  return () => _.toString(++lastID);\n};\n\nexport const wrapWithProgress = (setProgress: (inProgress: boolean) => void) => (\n  promise: Promise<any>,\n) => {\n  setProgress(true);\n  promise\n    .then(() => setProgress(false))\n    .catch((reason) => {\n      setProgress(false);\n      throw reason;\n    });\n};\n\nexport const getVMLikeModelName = (isCreateTemplate: boolean) =>\n  isCreateTemplate ? 'virtual machine template' : VirtualMachineModel.label.toLowerCase();\n\nexport const getVMLikeModelListPath = (isCreateTemplate: boolean, namespace: string) =>\n  isCreateTemplate\n    ? `/k8s/ns/${namespace}/virtualization/templates`\n    : `/k8s/ns/${namespace}/virtualization`;\n\nexport const getVMLikeModelDetailPath = (isTemplate: boolean, namespace: string, name: string) =>\n  isTemplate\n    ? `/k8s/ns/${namespace}/vmtemplates/${name}`\n    : `/k8s/ns/${namespace}/${VirtualMachineModel.plural}/${name}`;\n","import * as _ from 'lodash';\nimport {\n  addMissingSubject,\n  getName,\n  getNamespace,\n  asValidationObject,\n  validateEmptyValue,\n  ValidationErrorType,\n  ValidationObject,\n  joinGrammaticallyListOfItems,\n} from '@console/shared';\nimport { parseURL } from '../url';\nimport { END_WHITESPACE_ERROR, START_WHITESPACE_ERROR, URL_INVALID_ERROR } from './strings';\nimport { DiskBus } from '../../constants/vm/storage/disk-bus';\n\nexport const isValidationError = (validationObject: ValidationObject) =>\n  !!validationObject && validationObject.type === ValidationErrorType.Error;\n\nexport const getValidationErrorMessage = (validationObject: ValidationObject): string => {\n  return (\n    validationObject &&\n    validationObject.type === ValidationErrorType.Error &&\n    validationObject.message\n  );\n};\n\nexport const isPositiveNumber = (value) => value && value.toString().match(/^[1-9]\\d*$/);\n\nexport const validateEntityAlreadyExists = (\n  name,\n  namespace,\n  entities,\n  { errorMessage, subject } = { errorMessage: undefined, subject: undefined },\n): ValidationObject => {\n  const exists =\n    entities &&\n    entities.some((entity) => getName(entity) === name && getNamespace(entity) === namespace);\n  return exists ? asValidationObject(addMissingSubject(errorMessage, subject)) : null;\n};\n\nexport const validatePositiveInteger = (\n  value: string,\n  { subject } = { subject: undefined },\n): ValidationObject => {\n  const emptyError = validateEmptyValue(value, { subject });\n  if (emptyError) {\n    return emptyError;\n  }\n  return isPositiveNumber(value) ? null : asValidationObject('must be positive integer');\n};\n\nexport const validateTrim = (\n  value: string,\n  { subject }: { subject: string } = { subject: undefined },\n) => {\n  const emptyError = validateEmptyValue(value, { subject });\n  if (emptyError) {\n    return emptyError;\n  }\n\n  let resultErrror;\n  if (_.trimStart(value).length !== value.length) {\n    resultErrror = START_WHITESPACE_ERROR;\n  }\n\n  if (_.trimEnd(value).length !== value.length) {\n    resultErrror = END_WHITESPACE_ERROR;\n  }\n\n  return resultErrror\n    ? asValidationObject(addMissingSubject(resultErrror, subject), ValidationErrorType.Error)\n    : null;\n};\n\nexport const validateURL = (\n  value: string,\n  { subject }: { subject: string } = { subject: undefined },\n) => {\n  const trimError = validateTrim(value, { subject });\n  if (trimError) {\n    return trimError;\n  }\n\n  return parseURL(value) ? null : asValidationObject(addMissingSubject(URL_INVALID_ERROR, subject));\n};\n\nexport const validateBus = (value: DiskBus, allowedBuses: Set<DiskBus>): ValidationObject => {\n  if (allowedBuses && !allowedBuses.has(value)) {\n    return asValidationObject(\n      `Invalid interface type. Valid types are: ${joinGrammaticallyListOfItems(\n        [...allowedBuses].map((b) => b.toString()),\n      )}`,\n      ValidationErrorType.Error,\n    );\n  }\n  return null;\n};\n","export const GENERAL_ERROR_MSG = 'An error occurred. Please try again';\nexport const START_WHITESPACE_ERROR = 'cannot start with whitespace characters';\nexport const END_WHITESPACE_ERROR = 'cannot end with whitespace characters';\nexport const URL_INVALID_ERROR = 'has to be a valid URL';\n\nexport const VIRTUAL_MACHINE_EXISTS =\n  'is already used by another virtual machine in this namespace';\nexport const VIRTUAL_MACHINE_TEMPLATE_EXISTS = 'is already used in another template';\n\nexport const MAC_ADDRESS_INVALID_ERROR = 'Invalid MAC address format';\nexport const NIC_NAME_EXISTS = 'Interface with this name already exists';\nexport const NETWORK_MULTUS_NAME_EXISTS = 'Multus network with this name already exists';\nexport const NETWORK_REQUIRED = 'Network required';\n\nexport const POSITIVE_SIZE_ERROR = 'must be positive';\n\nconst validationKeyToNameResolver = {\n  name: 'Name',\n  macAddress: 'MAC Address',\n  network: 'Network',\n  size: 'Size',\n  url: 'Url',\n  container: 'Container',\n  diskInterface: 'Model',\n  pvc: 'PVC',\n};\n\nexport const getValidationNameByKey = (key: string) => {\n  return validationKeyToNameResolver[key];\n};\n","import { DiskBus } from '../../../constants/vm/storage/disk-bus';\nimport { ValidationErrorType, ValidationObject } from '@console/shared/src/utils/validation/types';\nimport { joinGrammaticallyListOfItems, asValidationObject } from '@console/shared';\n\nexport class DiskBusValidationResult {\n  allowedBuses: Set<DiskBus>;\n\n  type: ValidationErrorType;\n\n  isValid: boolean;\n\n  constructor({ allowedBuses, type, isValid }) {\n    this.allowedBuses = allowedBuses;\n    this.type = type;\n    this.isValid = isValid;\n  }\n\n  public getErrorMsg = () => {\n    if (this.isValid) {\n      return null;\n    }\n    const isWarn = this.type === ValidationErrorType.Warn;\n    const adj = isWarn ? 'Recommended' : 'Valid';\n    const adj2 = isWarn ? 'Not recommended' : 'Invalid';\n    if (this.allowedBuses.size === 0) {\n      return `There are no ${adj.toLowerCase()} bus types`;\n    }\n    if (this.allowedBuses.size === 1) {\n      return `${adj2} bus type. ${adj} type is ${[...this.allowedBuses][0]}`;\n    }\n    return `${adj2} bus type. ${adj} types are: ${joinGrammaticallyListOfItems(\n      [...this.allowedBuses].map((b) => b.toString()),\n    )}`;\n  };\n\n  public asValidationObject = (): ValidationObject => {\n    return !this.isValid ? asValidationObject(this.getErrorMsg(), this.type) : null;\n  };\n}\n","/* eslint-disable lines-between-class-members */\nimport { ValidationErrorType } from '@console/shared/src';\nimport { humanizeBinaryBytes } from '@console/internal/components/utils';\nimport { Interval } from './types';\n\nexport class IntervalValidationResult implements Interval {\n  type: ValidationErrorType;\n  isValid: boolean;\n  min?: number;\n  max?: number;\n  isMinInclusive?: boolean;\n  isMaxInclusive?: boolean;\n\n  constructor({\n    type,\n    isValid,\n    min,\n    max,\n    isMinInclusive,\n    isMaxInclusive,\n  }: Interval & {\n    isValid: boolean;\n    type: ValidationErrorType;\n  }) {\n    this.type = type;\n    this.isValid = isValid;\n    this.min = min;\n    this.max = max;\n    this.isMinInclusive = isMinInclusive;\n    this.isMaxInclusive = isMaxInclusive;\n  }\n\n  public getErrorMessage = () => (this.isValid ? null : 'Interval is not valid');\n}\n\nexport class MemoryIntervalValidationResult extends IntervalValidationResult {\n  public getErrorMessage = () => {\n    const verb = this.type === ValidationErrorType.Warn ? 'should' : 'must';\n\n    if (!this.isValid) {\n      if (this.min !== 0 && Number.isFinite(this.min) && Number.isFinite(this.max)) {\n        return `Memory ${verb} be between ${humanizeBinaryBytes(this.min).string} and ${\n          humanizeBinaryBytes(this.max).string\n        }`;\n      }\n      if (Number.isFinite(this.max)) {\n        return `Memory ${verb} be ${this.isMaxInclusive ? 'at most' : 'below'} ${\n          humanizeBinaryBytes(this.max).string\n        }`;\n      }\n      return `Memory ${verb} be ${this.isMinInclusive ? 'at least' : 'above'} ${\n        humanizeBinaryBytes(this.min).string\n      }`;\n    }\n    return null;\n  };\n}\n","/* eslint-disable lines-between-class-members */\nimport * as _ from 'lodash';\nimport { ValidationErrorType } from '@console/shared/src';\nimport { ObjectEnum, DiskBus, DiskType } from '../../../constants';\nimport { CommonTemplatesValidation } from '../../../types/template';\nimport {\n  IntervalValidationResult,\n  MemoryIntervalValidationResult,\n} from './interval-validation-result';\nimport { DiskBusValidationResult } from './disk-bus-validation-result';\nimport { isSetEqual } from '../../common';\n\nexport class ValidationJSONPath extends ObjectEnum<string> {\n  static readonly CPU = new ValidationJSONPath('jsonpath::.spec.domain.cpu.cores');\n  static readonly MEMORY = new ValidationJSONPath(\n    'jsonpath::.spec.domain.resources.requests.memory',\n  );\n  static readonly DISK_BUS = new ValidationJSONPath(\n    'jsonpath::.spec.domain.devices.disks[*].disk.bus',\n  );\n  static readonly CD_BUS = new ValidationJSONPath(\n    'jsonpath::.spec.domain.devices.disks[*].cdrom.bus',\n  );\n\n  static getDiskBusPath = (diskType: DiskType) =>\n    diskType === DiskType.CDROM ? ValidationJSONPath.CD_BUS : ValidationJSONPath.DISK_BUS;\n}\n\nexport class TemplateValidations {\n  public static areBusesEqual = (a: TemplateValidations, b: TemplateValidations) =>\n    // eslint-disable-next-line eqeqeq\n    a == b || !!a?.areBusesEqual(b); // check if both null first\n\n  private validations: CommonTemplatesValidation[];\n\n  constructor(validations: CommonTemplatesValidation[] = []) {\n    this.validations = _.compact(validations);\n  }\n\n  validateMemory = (value: number): IntervalValidationResult => {\n    const result = this.validateMemoryByType(value, ValidationErrorType.Error);\n    if (!result.isValid) {\n      return result;\n    }\n\n    return this.validateMemoryByType(value, ValidationErrorType.Warn);\n  };\n\n  getAllowedBuses = (\n    diskType: DiskType,\n    validationErrorType: ValidationErrorType = ValidationErrorType.Error,\n  ): Set<DiskBus> => {\n    const finalDiskType = diskType || DiskType.DISK;\n\n    let allowedBuses: readonly DiskBus[] = this.getAllowedEnumValues(\n      ValidationJSONPath.getDiskBusPath(finalDiskType),\n      validationErrorType,\n    ).map(DiskBus.fromString);\n\n    if (allowedBuses.length === 0) {\n      allowedBuses = DiskBus.getAll();\n    }\n\n    return new Set(allowedBuses.filter((bus) => finalDiskType.isBusSupported(bus)));\n  };\n\n  getRecommendedBuses = (diskType: DiskType): Set<DiskBus> => {\n    const allowedBuses = this.getAllowedBuses(diskType);\n    const recommendedBuses = [\n      ...this.getAllowedBuses(diskType, ValidationErrorType.Warn),\n    ].filter((b) => allowedBuses.has(b));\n    return recommendedBuses.length === 0 ? allowedBuses : new Set(recommendedBuses);\n  };\n\n  areBusesEqual = (otherTempValidations: TemplateValidations): boolean => {\n    if (!otherTempValidations) {\n      return false;\n    }\n\n    if (this === otherTempValidations) {\n      return true;\n    }\n\n    // Check if two sets of bus validations are the same - if the allowed and recommended buses are the same\n    const allowedBuses = this.getAllowedBuses(DiskType.DISK);\n    const otherAllowedBuses = otherTempValidations.getAllowedBuses(DiskType.DISK);\n    if (!isSetEqual(allowedBuses, otherAllowedBuses)) {\n      return false;\n    }\n\n    const recommendedBuses = this.getRecommendedBuses(DiskType.DISK);\n    const otherRecommendedBuses = otherTempValidations.getRecommendedBuses(DiskType.DISK);\n    if (!isSetEqual(recommendedBuses, otherRecommendedBuses)) {\n      return false;\n    }\n\n    const allowedCDBuses = this.getAllowedBuses(DiskType.CDROM);\n    const otherAllowedCDBuses = otherTempValidations.getAllowedBuses(DiskType.CDROM);\n    if (!isSetEqual(allowedCDBuses, otherAllowedCDBuses)) {\n      return false;\n    }\n\n    const recommendedCDBuses = this.getRecommendedBuses(DiskType.CDROM);\n    const otherRecommendedCDBuses = otherTempValidations.getRecommendedBuses(DiskType.CDROM);\n    if (!isSetEqual(recommendedCDBuses, otherRecommendedCDBuses)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  validateBus = (\n    diskType: DiskType,\n    diskBus: DiskBus,\n    validationErrorType: ValidationErrorType = ValidationErrorType.Error,\n  ): DiskBusValidationResult => {\n    const allowedBuses = this.getAllowedBuses(diskType);\n    if (allowedBuses.has(diskBus)) {\n      const recommededBuses = this.getRecommendedBuses(diskType);\n      return new DiskBusValidationResult({\n        allowedBuses: recommededBuses,\n        type: ValidationErrorType.Warn,\n        isValid: recommededBuses.has(diskBus),\n      });\n    }\n\n    return new DiskBusValidationResult({\n      allowedBuses,\n      type: validationErrorType,\n      isValid: allowedBuses.has(diskBus),\n    });\n  };\n\n  getDefaultBus = (diskType: DiskType = DiskType.DISK, defaultBus?: DiskBus): DiskBus => {\n    let resolvedDefaultBus = defaultBus;\n\n    if (!resolvedDefaultBus) {\n      resolvedDefaultBus = diskType === DiskType.CDROM ? DiskBus.SATA : DiskBus.VIRTIO;\n    }\n\n    if (!diskType.isBusSupported(resolvedDefaultBus)) {\n      resolvedDefaultBus = undefined;\n      // eslint-disable-next-line no-console\n      console.error(`${resolvedDefaultBus} is not a supported disk bus for ${diskType} disks`);\n    }\n\n    const allowedBuses = this.getAllowedBuses(diskType);\n\n    if (allowedBuses.size === 0) {\n      return resolvedDefaultBus;\n    }\n\n    const recommendedBuses = this.getRecommendedBuses(diskType);\n\n    if (resolvedDefaultBus && recommendedBuses.has(resolvedDefaultBus)) {\n      return resolvedDefaultBus;\n    }\n\n    if (recommendedBuses.size > 0) {\n      return [...recommendedBuses][0];\n    }\n\n    return resolvedDefaultBus && allowedBuses.has(resolvedDefaultBus)\n      ? resolvedDefaultBus\n      : [...allowedBuses][0];\n  };\n\n  private validateMemoryByType = (\n    value: number,\n    type: ValidationErrorType,\n  ): IntervalValidationResult =>\n    new MemoryIntervalValidationResult(\n      this.validateInterval(value, ValidationJSONPath.MEMORY, {\n        defaultMin: 0,\n        isDefaultMinInclusive: false,\n        type,\n      }),\n    );\n\n  private validateInterval = (\n    value: number,\n    jsonPath: ValidationJSONPath,\n    {\n      isDefaultMinInclusive = true,\n      isDefaultMaxInclusive = true,\n      defaultMin = Number.NEGATIVE_INFINITY,\n      defaultMax = Number.POSITIVE_INFINITY,\n      type = ValidationErrorType.Error,\n    },\n  ): IntervalValidationResult => {\n    const relevantValidations = this.getRelevantValidations(jsonPath, type);\n\n    // combine validations for single template and make them strict (all integer validations must pass)\n    const { min, max, isMinInclusive, isMaxInclusive } = relevantValidations.reduce(\n      (\n        {\n          min: oldMin,\n          max: oldMax,\n          isMinInclusive: oldIsMinInclusive,\n          isMaxInclusive: oldIsMaxInclusive,\n        },\n        validation,\n      ) => {\n        let newMin = oldMin;\n        let newMax = oldMax;\n        let newIsMinInclusive = oldIsMinInclusive;\n        let newIsMaxInclusive = oldIsMaxInclusive;\n\n        if ('min' in validation && validation.min >= oldMin) {\n          newMin = validation.min;\n          newIsMinInclusive = true;\n        }\n        if ('max' in validation && validation.max <= oldMax) {\n          newMax = validation.max;\n          newIsMaxInclusive = true;\n        }\n        return {\n          min: newMin,\n          max: newMax,\n          isMinInclusive: newIsMinInclusive,\n          isMaxInclusive: newIsMaxInclusive,\n        };\n      },\n      {\n        min: defaultMin,\n        max: defaultMax,\n        isMinInclusive: isDefaultMinInclusive,\n        isMaxInclusive: isDefaultMaxInclusive,\n      },\n    );\n\n    const isValid =\n      (isMinInclusive ? min <= value : min < value) &&\n      (isMaxInclusive ? value <= max : value < max);\n\n    return new IntervalValidationResult({\n      type,\n      isValid,\n      min,\n      max,\n      isMinInclusive,\n      isMaxInclusive,\n    });\n  };\n\n  // Empty array means all values are allowed\n  private getAllowedEnumValues = (\n    jsonPath: ValidationJSONPath,\n    type: ValidationErrorType,\n  ): string[] => {\n    const relevantValidations = this.getRelevantValidations(jsonPath, type);\n\n    return relevantValidations.reduce(\n      (result: string[], validation: CommonTemplatesValidation) => result.concat(validation.values),\n      [],\n    );\n  };\n\n  private getRelevantValidations = (jsonPath: ValidationJSONPath, type: ValidationErrorType) => {\n    return this.validations.filter(\n      (validation: CommonTemplatesValidation) =>\n        validation.path.includes(jsonPath.getValue()) &&\n        (type === ValidationErrorType.Warn) === !!validation.justWarning,\n    );\n  };\n}\n","import {\n  addMissingSubject,\n  asValidationObject,\n  makeSentence,\n  validateDNS1123SubdomainValue,\n  ValidationErrorType,\n  ValidationObject,\n} from '@console/shared';\nimport { validateTrim, validateURL } from '../common';\nimport { DiskWrapper } from '../../../k8s/wrapper/vm/disk-wrapper';\nimport { VolumeWrapper } from '../../../k8s/wrapper/vm/volume-wrapper';\nimport { DataVolumeWrapper } from '../../../k8s/wrapper/vm/data-volume-wrapper';\nimport { POSITIVE_SIZE_ERROR } from '../strings';\nimport { StorageUISource } from '../../../components/modals/disk-modal/storage-ui-source';\nimport { CombinedDisk } from '../../../k8s/wrapper/vm/combined-disk';\nimport { PersistentVolumeClaimWrapper } from '../../../k8s/wrapper/vm/persistent-volume-claim-wrapper';\nimport { DiskType } from '../../../constants/vm/storage/disk-type';\nimport { TemplateValidations } from '../template/template-validations';\nimport { UIStorageValidation } from '../../../types/ui/storage';\n\nconst validateDiskName = (name: string, usedDiskNames: Set<string>): ValidationObject => {\n  let validation = validateDNS1123SubdomainValue(name);\n\n  if (validation) {\n    validation.message = addMissingSubject(validation.message, 'Name');\n  }\n\n  if (!validation && usedDiskNames && usedDiskNames.has(name)) {\n    validation = asValidationObject('Disk with this name already exists!');\n  }\n\n  return validation;\n};\n\nconst validatePVCName = (pvcName: string, usedPVCNames: Set<string>): ValidationObject => {\n  if (usedPVCNames && usedPVCNames.has(pvcName)) {\n    asValidationObject('PVC with this name is already used by this VM!');\n  }\n\n  return null;\n};\n\nconst getEmptyDiskSizeValidation = (): ValidationObject =>\n  asValidationObject(\n    makeSentence(addMissingSubject(POSITIVE_SIZE_ERROR, 'Size')),\n    ValidationErrorType.TrivialError,\n  );\n\nexport const validateDisk = (\n  disk: DiskWrapper,\n  volume: VolumeWrapper,\n  dataVolume: DataVolumeWrapper,\n  persistentVolumeClaimWrapper: PersistentVolumeClaimWrapper,\n  {\n    usedDiskNames,\n    usedPVCNames,\n    templateValidations,\n  }: {\n    usedDiskNames?: Set<string>;\n    usedPVCNames?: Set<string>;\n    templateValidations: TemplateValidations;\n  },\n): UIStorageValidation => {\n  const validations = {\n    name: validateDiskName(disk && disk.getName(), usedDiskNames),\n    size: null,\n    url: null,\n    container: null,\n    diskInterface: null,\n    pvc: null,\n  };\n  let hasAllRequiredFilled = disk && disk.getName() && volume && volume.getName();\n\n  const addRequired = (addon) => {\n    if (hasAllRequiredFilled) {\n      hasAllRequiredFilled = hasAllRequiredFilled && addon;\n    }\n  };\n\n  const source = StorageUISource.fromTypes(\n    volume && volume.getType(),\n    dataVolume && dataVolume.getType(),\n    !!persistentVolumeClaimWrapper,\n  );\n\n  const tValidations = templateValidations || new TemplateValidations();\n  const diskType = disk.getType();\n\n  if (source.requiresVolumeType()) {\n    addRequired(volume && volume.hasType());\n  }\n\n  if (source.requiresURL()) {\n    const url = dataVolume && dataVolume.getURL();\n    addRequired(url);\n    validations.url = validateURL(url, { subject: 'URL' });\n  }\n\n  if (source.requiresContainerImage()) {\n    const container = volume.getContainerImage();\n    addRequired(container);\n    validations.container = validateTrim(container, { subject: 'Container' });\n  }\n\n  if (source.requiresDatavolume()) {\n    addRequired(dataVolume);\n  }\n\n  if (source.requiresNewPVC()) {\n    addRequired(persistentVolumeClaimWrapper);\n  }\n\n  if (source.requiresSize()) {\n    let missingSize;\n    if (source.requiresDatavolume()) {\n      missingSize = !dataVolume || !dataVolume.hasSize();\n    }\n    if (source.requiresNewPVC()) {\n      missingSize =\n        missingSize || !persistentVolumeClaimWrapper || !persistentVolumeClaimWrapper.hasSize();\n    }\n\n    if (missingSize) {\n      addRequired(null);\n      validations.size = getEmptyDiskSizeValidation();\n    }\n  }\n\n  if (source.requiresPVC()) {\n    const pvcName = new CombinedDisk({\n      diskWrapper: disk,\n      volumeWrapper: volume,\n      dataVolumeWrapper: dataVolume,\n      persistentVolumeClaimWrapper,\n      isNewPVC: !!persistentVolumeClaimWrapper,\n    }).getPVCNameBySource(source);\n    addRequired(pvcName);\n    validations.pvc = validatePVCName(pvcName, usedPVCNames);\n  }\n\n  if (diskType !== DiskType.FLOPPY) {\n    addRequired(disk.getDiskBus());\n    validations.diskInterface = tValidations\n      .validateBus(disk.getType(), disk.getDiskBus())\n      .asValidationObject();\n  }\n\n  return {\n    validations,\n    hasAllRequiredFilled: !!hasAllRequiredFilled,\n    isValid:\n      !!hasAllRequiredFilled &&\n      !Object.keys(validations).find(\n        (key) =>\n          validations[key] &&\n          (validations[key].type === ValidationErrorType.Error ||\n            validations[key].type === ValidationErrorType.TrivialError),\n      ),\n  };\n};\n","import { ValidationObject, validateEmptyValue } from '@console/shared/src';\n\nexport const validateFlavor = (\n  {\n    memory: { unit, size },\n    cpus,\n  }: {\n    memory: { size: string; unit: string };\n    cpus: string;\n  },\n  { isCustomFlavor }: { isCustomFlavor: boolean },\n): UIFlavorValidation => {\n  const validations = {\n    memory: null,\n    cpus: null,\n  };\n\n  let hasAllRequiredFilled = true;\n\n  const addRequired = (addon) => {\n    if (hasAllRequiredFilled) {\n      hasAllRequiredFilled = hasAllRequiredFilled && addon;\n    }\n  };\n\n  if (isCustomFlavor) {\n    addRequired(unit);\n    addRequired(size);\n    addRequired(cpus);\n    validations.memory = validateEmptyValue(size, { subject: 'Memory' });\n    validations.cpus = validateEmptyValue(cpus, { subject: 'CPUs' });\n  }\n\n  return {\n    validations,\n    hasAllRequiredFilled: !!hasAllRequiredFilled,\n    isValid: !!hasAllRequiredFilled && !Object.keys(validations).find((key) => validations[key]),\n  };\n};\n\nexport type UIFlavorValidation = {\n  validations: {\n    memory?: ValidationObject;\n    cpus?: ValidationObject;\n  };\n  isValid: boolean;\n  hasAllRequiredFilled: boolean;\n};\n","export * from './disk';\nexport * from './nic';\nexport * from './validations';\nexport * from './vm';\n","import {\n  asValidationObject,\n  makeSentence,\n  validateDNS1123SubdomainValue,\n  ValidationErrorType,\n  ValidationObject,\n} from '@console/shared';\nimport { MAC_ADDRESS_INVALID_ERROR, NETWORK_REQUIRED, NIC_NAME_EXISTS } from '../strings';\nimport { NetworkInterfaceWrapper } from '../../../k8s/wrapper/vm/network-interface-wrapper';\nimport { NetworkWrapper } from '../../../k8s/wrapper/vm/network-wrapper';\nimport { isValidMAC } from './validations';\nimport { UINetworkInterfaceValidation } from '../../../types/ui/nic';\n\nexport const validateNicName = (\n  name: string,\n  usedInterfacesNames: Set<string>,\n  { subject } = { subject: 'Name' },\n): ValidationObject => {\n  let validation = validateDNS1123SubdomainValue(name, { subject });\n\n  if (!validation && usedInterfacesNames && usedInterfacesNames.has(name)) {\n    validation = asValidationObject(NIC_NAME_EXISTS);\n  }\n\n  return validation;\n};\n\nexport const validateNetwork = (network: NetworkWrapper): ValidationObject => {\n  if (!network.hasType()) {\n    return asValidationObject(NETWORK_REQUIRED, ValidationErrorType.TrivialError);\n  }\n\n  return null;\n};\n\nexport const validateMACAddress = (mac: string): ValidationObject => {\n  const isValid = !mac || isValidMAC(mac);\n  return isValid ? null : asValidationObject(makeSentence(MAC_ADDRESS_INVALID_ERROR));\n};\n\nexport const validateNIC = (\n  interfaceWrapper: NetworkInterfaceWrapper,\n  network: NetworkWrapper,\n  {\n    usedInterfacesNames,\n    acceptEmptyNetwork,\n  }: {\n    usedInterfacesNames?: Set<string>;\n    acceptEmptyNetwork?: boolean; // do not use for strict validation\n  },\n): UINetworkInterfaceValidation => {\n  const validations = {\n    name: validateNicName(interfaceWrapper && interfaceWrapper.getName(), usedInterfacesNames),\n    macAddress: validateMACAddress(interfaceWrapper && interfaceWrapper.getMACAddress()),\n    network: validateNetwork(network),\n  };\n\n  let hasAllRequiredFilled =\n    interfaceWrapper &&\n    interfaceWrapper.getName() &&\n    interfaceWrapper.getModel() &&\n    interfaceWrapper.hasType();\n\n  if (!acceptEmptyNetwork) {\n    hasAllRequiredFilled =\n      hasAllRequiredFilled && network && network.getReadableName() && network.hasType();\n  }\n\n  return {\n    validations,\n    hasAllRequiredFilled: !!hasAllRequiredFilled,\n    isValid:\n      !!hasAllRequiredFilled &&\n      !Object.keys(validations)\n        .filter((key) => !(acceptEmptyNetwork && key === 'network'))\n        .find((key) => validations[key]),\n  };\n};\n","const HEXCH_REGEX = '[0-9A-Fa-f]';\nconst MAC_REGEX_COLON_DELIMITER = new RegExp(\n  `^((${HEXCH_REGEX}{2}[:]){19}${HEXCH_REGEX}{2})$|` + // 01:23:45:67:89:ab:cd:ef:00:00:01:23:45:67:89:ab:cd:ef:00:00\n  `^((${HEXCH_REGEX}{2}[:]){7}${HEXCH_REGEX}{2})$|` + // 01:23:45:67:89:ab:cd:ef\n    `^((${HEXCH_REGEX}{2}[:]){5}${HEXCH_REGEX}{2})$`, // 01:23:45:67:89:ab\n);\n\nconst MAC_REGEX_DASH_DELIMITER = new RegExp(\n  `^((${HEXCH_REGEX}{2}[-]){19}${HEXCH_REGEX}{2})$|` + // 01-23-45-67-89-ab-cd-ef-00-00-01-23-45-67-89-ab-cd-ef-00-00\n  `^((${HEXCH_REGEX}{2}[-]){7}${HEXCH_REGEX}{2})$|` + // 01-23-45-67-89-ab-cd-ef\n    `^((${HEXCH_REGEX}{2}[-]){5}${HEXCH_REGEX}{2})$`, // 01-23-45-67-89-ab\n);\n\nconst MAC_REGEX_PERIOD_DELIMITER = new RegExp(\n  `^((${HEXCH_REGEX}{4}.){9}${HEXCH_REGEX}{4})$|` + // 0123.4567.89ab.cdef.0000.0123.4567.89ab.cdef.0000\n  `^((${HEXCH_REGEX}{4}.){3}${HEXCH_REGEX}{4})$|` + // 0123.4567.89ab.cdef\n    `^((${HEXCH_REGEX}{4}.){2}${HEXCH_REGEX}{4})$`, // 0123.4567.89ab\n);\n\nconst COLON_DELIMITER = ':';\nconst DASH_DELIMITER = '-';\nconst PERIOD_DELIMITER = '.';\n\n// Validates that the provided MAC address meets one of following formats supported by the golang ParseMAC function:\n// IEEE 802 MAC-48, EUI-48, EUI-64, or a 20-octet IP over InfiniBand link-layer address\n// https://golang.org/pkg/net/#ParseMAC\nexport const isValidMAC = (mac: string): boolean => {\n  if (mac.length < 14) {\n    return false;\n  }\n\n  let regex;\n  if (mac[2] === COLON_DELIMITER) {\n    regex = MAC_REGEX_COLON_DELIMITER;\n  } else if (mac[2] === DASH_DELIMITER) {\n    regex = MAC_REGEX_DASH_DELIMITER;\n  } else if (mac[4] === PERIOD_DELIMITER) {\n    regex = MAC_REGEX_PERIOD_DELIMITER;\n  }\n\n  return regex ? regex.test(mac) : false;\n};\n","import { TemplateKind } from '@console/internal/module/k8s';\nimport {\n  asValidationObject,\n  ValidationErrorType,\n  ValidationObject,\n  validateDNS1123SubdomainValue,\n} from '@console/shared';\nimport { ProvisionSource } from '../../../constants/vm/provision-source';\nimport { validateEntityAlreadyExists } from '../common';\n\nexport const validateVmLikeEntityName = (\n  value: string,\n  namespace: string,\n  vmLikeEntities,\n  { existsErrorMessage, subject }: { existsErrorMessage: string; subject: string } = {\n    existsErrorMessage: undefined,\n    subject: undefined,\n  },\n): ValidationObject => {\n  const dnsValidation = validateDNS1123SubdomainValue(value, { subject });\n  return dnsValidation && dnsValidation.type === ValidationErrorType.Error\n    ? dnsValidation\n    : validateEntityAlreadyExists(value, namespace, vmLikeEntities, {\n        errorMessage: existsErrorMessage,\n        subject,\n      });\n};\n\nexport const validateUserTemplateProvisionSource = (\n  userTemplate: TemplateKind,\n): ValidationObject => {\n  const provisionSourceDetails = ProvisionSource.getProvisionSourceDetails(userTemplate, {\n    convertTemplateDataVolumesToAttachClonedDisk: true,\n  });\n\n  return provisionSourceDetails.error\n    ? asValidationObject(`Could not select Provision Source. ${provisionSourceDetails.error}`)\n    : null;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Converter } from 'showdown';\nimport * as sanitizeHtml from 'sanitize-html';\n\nconst tableTags = ['table', 'thead', 'tbody', 'tr', 'th', 'td'];\n\nconst markdownConvert = (markdown) => {\n  const unsafeHtml = new Converter({\n    tables: true,\n    openLinksInNewWindow: true,\n    strikethrough: true,\n    emoji: true,\n  }).makeHtml(markdown);\n\n  return sanitizeHtml(unsafeHtml, {\n    allowedTags: [\n      'b',\n      'i',\n      'strike',\n      's',\n      'del',\n      'em',\n      'strong',\n      'a',\n      'p',\n      'h1',\n      'h2',\n      'h3',\n      'h4',\n      'ul',\n      'ol',\n      'li',\n      'code',\n      'pre',\n      ...tableTags,\n    ],\n    allowedAttributes: {\n      a: ['href', 'target', 'rel'],\n    },\n    allowedSchemes: ['http', 'https', 'mailto'],\n    transformTags: {\n      a: sanitizeHtml.simpleTransform('a', { rel: 'noopener noreferrer' }, true),\n    },\n  });\n};\n\nexport class SyncMarkdownView extends React.Component<\n  { content: string; styles?: string; exactHeight?: boolean },\n  {}\n> {\n  private frame: any;\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.updateDimensions();\n  }\n\n  updateDimensions() {\n    if (!this.frame?.contentWindow?.document.body.firstChild) {\n      return;\n    }\n    this.frame.style.height = `${this.frame.contentWindow.document.body.firstChild.scrollHeight}px`;\n\n    // Let the new height take effect, then reset again once we recompute\n    setTimeout(() => {\n      if (this.props.exactHeight) {\n        this.frame.style.height = `${this.frame.contentWindow.document.body.firstChild.scrollHeight}px`;\n      } else {\n        // Increase by 15px for the case where a horizontal scrollbar might appear\n        this.frame.style.height = `${this.frame.contentWindow.document.body.firstChild\n          .scrollHeight + 15}px`;\n      }\n    });\n  }\n\n  render() {\n    // Find the app's stylesheets and inject them into the frame to ensure consistent styling.\n    const filteredLinks = Array.from(document.getElementsByTagName('link')).filter((l) =>\n      _.includes(l.href, 'app-bundle'),\n    );\n\n    const linkRefs = _.reduce(\n      filteredLinks,\n      (refs, link) => `${refs}\n        <link rel=\"stylesheet\" href=\"${link.href}\">`,\n      '',\n    );\n\n    const contents = `\n      ${linkRefs}\n      <style type=\"text/css\">\n      body {\n        background-color: transparent !important;\n        color: ${this.props.content ? '#333' : '#999'};\n        font-family: var(--pf-global--FontFamily--sans-serif);\n        min-width: auto !important;\n      }\n      table {\n        display: block;\n        margin-bottom: 11.5px;\n        overflow-x: auto;\n      }\n      td,\n      th {\n        border-bottom: 1px solid #ededed;\n        padding: 10px;\n        vertical-align: top;\n      }\n      th {\n        padding-top: 0;\n      }\n      ${this.props.styles ? this.props.styles : ''}\n      </style>\n      <body class=\"pf-m-redhat-font\"><div style=\"overflow-y: auto;\">${markdownConvert(\n        this.props.content || 'Not available',\n      )}</div></body>`;\n    return (\n      <iframe\n        sandbox=\"allow-popups allow-same-origin\"\n        srcDoc={contents}\n        style={{ border: '0px', display: 'block', width: '100%', height: '0' }}\n        ref={(r) => (this.frame = r)}\n        onLoad={() => this.updateDimensions()}\n      />\n    );\n  }\n}\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { connect } from 'react-redux';\n\nimport * as UIActions from '../../actions/ui';\nimport { K8sKind } from '../../module/k8s';\nimport { AsyncComponent, KebabAction, ResourceOverviewHeading, SimpleTabNav } from '../utils';\nimport * as plugins from '../../plugins';\nimport { OverviewItem } from '@console/shared';\n\nconst stateToProps = ({ UI }): PropsFromState => ({\n  selectedDetailsTab: UI.getIn(['overview', 'selectedDetailsTab']),\n});\n\nconst dispatchToProps = (dispatch): PropsFromDispatch => ({\n  onClickTab: (name) => dispatch(UIActions.selectOverviewDetailsTab(name)),\n});\n\nconst getResourceTabComp = (t) => (props) => (\n  <AsyncComponent {...props} loader={t.properties.loader} />\n);\n\nconst getPluginTabResources = (item, tabs): ResourceOverviewDetailsProps['tabs'] => {\n  let tabEntry = plugins.registry\n    .getOverviewResourceTabs()\n    .filter((tab) => item[tab.properties.key]);\n  const overridenTabs = tabs.map((tab) => {\n    const tabEntryConfig = tabEntry.find((t) => tab.name === t.properties.name);\n    if (tabEntryConfig) {\n      tabEntry = tabEntry.filter((entry) => tab.name !== entry.properties.name);\n      return {\n        name: tab.name,\n        component: getResourceTabComp(tabEntryConfig),\n      };\n    }\n    return tab;\n  });\n\n  /** Add new tabs from plugin */\n  const newTabs = tabEntry.map((entry) => {\n    return {\n      name: entry.properties.name,\n      component: getResourceTabComp(entry),\n    };\n  });\n\n  return overridenTabs.concat(newTabs);\n};\n\nexport const ResourceOverviewDetails = connect<PropsFromState, PropsFromDispatch, OwnProps>(\n  stateToProps,\n  dispatchToProps,\n)(\n  ({\n    kindObj,\n    item,\n    menuActions,\n    onClickTab,\n    selectedDetailsTab,\n    tabs,\n  }: ResourceOverviewDetailsProps) => {\n    const keys = Object.keys(item);\n    const keysRef = React.useRef(keys);\n    const tabsRef = React.useRef(tabs);\n    const pluginTabsRef = React.useRef<React.ComponentProps<typeof SimpleTabNav>['tabs']>();\n    if (\n      !pluginTabsRef.current ||\n      !_.isEqual(keys, keysRef.current) ||\n      !_.isEqual(tabs, tabsRef.current)\n    ) {\n      keysRef.current = keys;\n      tabsRef.current = tabs;\n      pluginTabsRef.current = getPluginTabResources(item, tabs);\n    }\n    return (\n      <div className=\"overview__sidebar-pane resource-overview\">\n        <ResourceOverviewHeading actions={menuActions} kindObj={kindObj} resource={item.obj} />\n        <SimpleTabNav\n          onClickTab={onClickTab}\n          selectedTab={selectedDetailsTab}\n          tabProps={{ item }}\n          tabs={pluginTabsRef.current}\n          additionalClassNames=\"co-m-horizontal-nav__menu--within-sidebar co-m-horizontal-nav__menu--within-overview-sidebar\"\n        />\n      </div>\n    );\n  },\n);\n\ntype PropsFromState = {\n  selectedDetailsTab: any;\n};\n\ntype PropsFromDispatch = {\n  onClickTab: (name: string) => void;\n};\n\ntype OwnProps = {\n  item: OverviewItem;\n  kindObj: K8sKind;\n  menuActions: KebabAction[];\n  tabs: {\n    name: string;\n    component: any;\n  }[];\n  isOperatorBacked?: boolean;\n};\n\nexport type ResourceOverviewDetailsProps = PropsFromState & PropsFromDispatch & OwnProps;\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAahJA;AACA;AAgJA;;;;;;;;;;;;;AC5KA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAGA;AACA;AAEA;AAKA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;ACnDA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAaA;AAaA;AAKA;AAGA;AAEA;AACA;AACA;AAMA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACpGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAQA;AAKA;AACA;AACA;AAEA;AACA;AAKA;AAQA;AAEA;AACA;AAEA;;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AAEA;AAEA;AACA;AACA;AAIA;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AAEA;AAQA;AACA;AAAA;AAEA;AAOA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAEA;;;;;;;;;;;;AC3BA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AACA;AACA;AAGA;AACA;AACA;AAIA;;;;;;;;;;;;AC1CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAMA;AAEA;AAGA;AACA;AAUA;AAEA;;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAeA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;;AACA;AAIA;AACA;AACA;AAEA;AACA;AAIA;;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AAEA;AAEA;AASA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;AC/YA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAiCA;AAUA;AACA;AACA;;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AC3JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAMA;AAIA;AACA;AAEA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAGA;AACA;AAIA;AAQA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AAGA;AAEA;AACA;AAMA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;ACnHA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AASA;AACA;AAQA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAEA;AAEA;AACA;AAEA;AAMA;AAOA;AAWA;AACA;AAYA;AACA;AA4BA;AAEA;;;;;;;;;;;;;AC9KA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AASA;AAEA;;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AAIA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AAEA;AACA;AAEA;AAIA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAOA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;AC7FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAOA;AAYA;AAIA;;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AAGA;AAGA;AAGA;AAEA;AAGA;AAGA;AAEA;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAOA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAIA;;;;;;;;;;;;AC/BA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAOA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AACA;AAGA;AAUA;AAEA;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAiBA;;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AASA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAKA;AAEA;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AAcA;AASA;AAEA;AAAA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AAbA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;ACxKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;AAUA;AAWA;AACA;AAGA;AAEA;;;;;;;;;;;;ACrDA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAsBA;AAMA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAOA;AACA;;AAKA;AACA;AAEA;AAEA;AAGA;AACA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACxHA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AAKA;AAMA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AAUA;AACA;AACA;AAEA;AACA;AACA;AAQA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AAQA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;AAEA;AAKA;AAIA;AACA;AACA;AACA;AAMA;AAEA;AASA;;;;;;;;;;;;;ACnHA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AAIA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAKA;AAEA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AAEA;AAOA;AAIA;AAGA;AACA;AASA;AAEA;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AAEA;AAQA;AAEA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnBA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAYA;AAKA;AACA;AACA;AACA;AASA;;AASA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAEA;AAWA;AACA;AAGA;AAOA;AAgBA;AAEA;;;;;;;;;;;;;ACtHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAaA;AAKA;AACA;AACA;AACA;AASA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAUA;AAQA;AAEA;;;;;;;;;;;;;ACrFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAAA;;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;AC9DA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;ACjBA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AAaA;;AASA;AACA;AACA;AAGA;AACA;AAEA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAEA;AAWA;AACA;AAGA;AAOA;AAgBA;AAEA;;;;;;;;;;;;;AC7HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAaA;AACA;AACA;AACA;AAKA;AASA;AASA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AASA;AAQA;AAEA;;;;;;;;;;;;;ACzFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAUA;AACA;AAEA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;AC/DA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AAEA;AASA;AACA;AAIA;AAEA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAKA;AAEA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;;;;;;;;;;;;ACrFA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACpCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AAEA;;;;;;;;;;;;AC5CA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAEA;;;;;;;;;;;;ACnCA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;AC7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAgBA;AACA;AASA;AACA;AACA;AAcA;AACA;;AAcA;AACA;AACA;AAGA;AACA;AAEA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AAQA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAWA;AACA;AAGA;AAOA;AAEA;AACA;AACA;AAKA;AACA;AAiBA;AAEA;;;;;;;;;;;;;AC7LA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAcA;AAQA;AAcA;AAcA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AASA;AASA;AAEA;;;;;;;;;;;;;AClHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAUA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AAYA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;ACjHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AAOA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAMA;AACA;AAEA;;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvGA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAYA;AACA;AAOA;AAEA;AAWA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAKA;AACA;AAKA;AACA;AAGA;AAEA;AAOA;AAcA;AAEA;;;;;;;;;;;;;ACtGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AAEA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAKA;AACA;AAEA;AACA;AAWA;AACA;AAWA;AACA;AACA;AAKA;;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AASA;AACA;AACA;AACA;AAUA;AACA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AAMA;AACA;AAQA;AAKA;;;;;;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAqBA;;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AASA;AAGA;AACA;;;;;;;;;;;;ACxBA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAUA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAUA;AACA;AAIA;AAUA;AAMA;AAUA;;;;;;;;;;;;;AC/GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAGA;AAOA;AASA;;;;;;;;;;;;;ACrCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAKA;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AAOA;AAEA;AACA;AACA;AAWA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAKA;AAOA;AAEA;AAEA;AAEA;AACA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxGA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAEA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAUA;AAEA;AACA;;;;;;;;;;;;ACnBA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAcA;AACA;AAGA;AAOA;AACA;AACA;AAOA;;;;;;;;;;;;ACtCA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAaA;AACA;AACA;AACA;AACA;AAEA;AAYA;AAEA;AAWA;AAEA;AAGA;AAGA;;;;;;;;;;;;;AC3DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAIA;AAKA;;;;;;;;;;;;ACfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AAaA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAWA;AACA;AAIA;;;;;;;;;;;;;AC9JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAiBA;AAcA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAWA;AAMA;AAKA;AACA;AAIA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;AC3FA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAcA;AAmBA;AACA;AACA;AAWA;AACA;;;;;;;;;;;;;ACzDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;AC3EA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AASA;AAGA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;;AAWA;;AACA;AACA;AAIA;AAMA;AAUA;AAGA;AAUA;;;;;;;;;;;;AC1KA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AAUA;AAQA;AAMA;AACA;AAWA;AAEA;AACA;AAEA;AAIA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAOA;AACA;AAqBA;AAQA;AAQA;AACA;AACA;AAIA;;;;;;;;;;;;;ACxOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AASA;AAEA;AAEA;AACA;AAGA;AAYA;AAEA;AAEA;AACA;AAIA;AACA;AAKA;AACA;AACA;AACA;AASA;AAEA;AAQA;AAQA;AAMA;AAQA;AACA;AAaA;AAOA;AASA;AAEA;AAeA;AAOA;AAKA;AACA;AAQA;AACA;AACA;AAMA;;;;;;;;;;;;;ACtKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAOA;;;;;;;;;;;;AC3CA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AASA;AAOA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAgBA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAUA;AACA;AAOA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAGA;AACA;AAQA;AACA;AASA;AAaA;AAcA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AASA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;AC5SA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAWA;AACA;AAIA;AACA;AAEA;AAEA;AAKA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;AC/FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAKA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;;AAAA;AACA;AACA;AACA;;AACA;AACA;;AAAA;AACA;;AACA;AAMA;AAEA;AACA;;AAKA;AACA;AAGA;AAEA;AACA;;AAKA;AACA;AAIA;AAUA;AAOA;;;;;;;;;;;;;AC/IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AA+CA;AAMA;AAuBA;AAEA;AAEA;AAEA;AACA;AAEA;AAGA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAhFA;AACA;AACA;AACA;;AAxDA;AAKA;AAKA;AACA;AAKA;AAKA;AAOA;AAMA;AAIA;AAoBA;AAEA;AAEA;AAQA;AACA;AACA;;;;;;;;;;;;;AChFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAMA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AASA;AAEA;AAKA;AAEA;AACA;AACA;AAUA;AACA;;;;;;;;;;;;ACvFA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAMA;AAOA;AASA;AAUA;AAsBA;AAiBA;AAGA;AACA;AACA;AAEA;AACA;AAQA;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtaA;AACA;AAIA;AAOA;;;;;;;;;;;;AC3PA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAOA;AAEA;AASA;AAGA;AASA;AAEA;AAGA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAMA;AACA;AACA;AAYA;AAOA;AAGA;AACA;AAWA;AAKA;AAOA;AAUA;AAWA;AASA;AASA;AACA;AAQA;AACA;AAGA;AAGA;AAGA;AAKA;AAMA;AAMA;AAQA;AAEA;AACA;AAUA;AACA;AACA;AAKA;AAKA;AAKA;AAQA;AACA;AAKA;AAiBA;;;;;;;;;;;;;ACnTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAOA;AASA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAYA;;;;;;;;;;;;AC5CA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAUA;AAEA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAWA;AACA;AAaA;AACA;AAcA;AACA;AAIA;AACA;AACA;AAKA;;;;;;;;;;;;;ACxFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAAA;AAGA;AACA;AAOA;;;;;;;;;;;;;AC/EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAUA;AAMA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAMA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAiBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AAEA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AAKA;AACA;AACA;AAKA;AAKA;AACA;AACA;AAKA;AAKA;AACA;AAEA;AACA;;;;;;;;;;;;;AC3MA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAMA;;;;;;;;;;;;ACtCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AACA;AACA;AAEA;AAEA;AAMA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAQA;;AAIA;AACA;AAEA;AAEA;;AAaA;AACA;AAIA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9GA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAMA;;;;;;;;;;;;;ACnCA;AAAA;AAAA;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAUA;AACA;AAEA;AAQA;AACA;AAMA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAOA;AACA;AAWA;AAEA;;AAYA;AACA;AAIA;AAKA;;;;;;;;;;;;AClIA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AAOA;AACA;AAMA;AAEA;AAKA;AACA;AACA;AAOA;AACA;AAGA;AACA;AAAA;AAWA;AACA;AAEA;AACA;AAMA;;;;;;;;;;;;;ACjEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;ACjFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAMA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAWA;AACA;AAWA;AACA;AAaA;AACA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;AAGA;AAEA;;AAUA;AACA;AAEA;AAUA;AAEA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAOA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AAGA;AAOA;AASA;AACA;AAWA;AAQA;;AAYA;AACA;AAIA;AAKA;;;;;;;;;;;;AC7KA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAOA;AAQA;AAOA;;;;;;;;;;;;;AC9DA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AACA;AAMA;AAEA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAEA;AASA;AAEA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAEA;AAOA;AAWA;AAiBA;AAKA;AAQA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7NA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAUA;AASA;AAGA;AAWA;;;;;;;;;;;;ACzDA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAOA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAOA;;;;;;;;;;;;AC9BA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AAIA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAGA;AASA;;;;;;;;;;;;AC9CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;AAQA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAOA;AAOA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAYA;AAKA;AAEA;AACA;AAOA;AAQA;AAQA;AAGA;AAMA;AACA;AAEA;AAGA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAIA;AAKA;AACA;AACA;AAMA;AACA;AAKA;;;;;;;;;;;;;ACnLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAOA;;AAEA;;AAAA;;AAAA;AACA;AACA;AAGA;;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AAAA;;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAKA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAUA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzQA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AAEA;AAUA;AAEA;AACA;;AAAA;AAEA;AAKA;AAEA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AAQA;AAIA;AASA;AAEA;AAQA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAOA;AACA;AAGA;AAUA;AAOA;AAKA;AAGA;AAQA;AAGA;AAQA;AAQA;AASA;AAEA;;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAOA;AAGA;AAOA;AACA;AACA;AACA;AAUA;AAkBA;AACA;AACA;AAWA;AAaA;;;;;;;;;;;;;ACpUA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AASA;AACA;AACA;AAEA;AAQA;;AACA;AACA;AACA;AACA;AAEA;AAIA;AAQA;AAEA;AAEA;AAYA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/IA;AACA;AACA;AAIA;AACA;AAKA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;AC1EA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AAKA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;AC9EA;AAAA;AAAA;AAAA;AAAA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;ACtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAMA;AACA;AAMA;AAMA;AAKA;AASA;AAKA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAsBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA/GA;AACA;AACA;AACA;AACA;AAuBA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAoEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;ACtKA;AAAA;AAAA;AAAA;AAcA;;AAEA;AACA;AAGA;AAmCA;AAzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;ACxDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAQA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AAGA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;AClKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAOA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAGA;AAKA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AAOA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAcA;AACA;AAGA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClGA;AAEA;AACA;AACA;AACA;AAQA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AAEA;AACA;AAEA;AAUA;AACA;AAGA;AACA;AACA;AACA;AAGA;AAEA;AACA;;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AAEA;AAEA;AAMA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA1DA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA6CA;;;;;;;;;;;;;AChFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AA2BA;AAJA;AAEA;AAsBA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AA1EA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;AA5CA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAiBA;;AA4CA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AAMA;AAMA;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAqJA;AAEA;AAkCA;AAsCA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAGA;AACA;AAhFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAvDA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1QA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAKA;AACA;AASA;AA0DA;AACA;AAiBA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AA3FA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA+EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA1KA;;AAEA;AACA;AAqBA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAKA;AACA;AAEA;AAEA;AAIA;AAIA;AAgBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAlEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAuDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAaA;AACA;AACA;AAMA;AAIA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAGA;AAIA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAzMA;AA0MA;;;;;;;;;;;;;AC7OA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AA1BA;AA2BA;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AACA;AAKA;AAQA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AAmBA;AACA;AAUA;AAEA;AAEA;AAEA;AAEA;AAEA;AAnBA;AAEA;AACA;AACA;AACA;AACA;AACA;AAcA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AApDA;;AAEA;AACA;;;;;;;;;;;;;ACzFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AAGA;AAGA;AACA;AAGA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAIA;AAMA;AAEA;AACA;AAEA;AAIA;AAMA;AAEA;AACA;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AACA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAIA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;ACxFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAGA;AAEA;AACA;AAEA;;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AASA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AAGA;;;;;;;;;;;AAWA;AACA;AAGA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAQA;AACA;AAEA;AAEA;;;;;;;;;;;;;AC1FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAGA;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AAaA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AAWA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;;;ACvFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AAEA;AACA;AACA;AAQA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AASA;AAEA;AAKA;AAIA;AACA;AACA;AAMA;AAEA;AAKA;;;;;;;;;;;;;AC3FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AAEA;AACA;AAEA;AAEA;AACA;AAGA;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAQA;AAWA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;AC/EA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAcA;AACA;AACA;AACA;AAUA;AACA;AAkBA;AACA;AACA;AACA;AAEA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAWA;AACA;AAGA;AACA;AAOA;AACA;AAiBA;AAEA;AACA;;;;;;;;;;;;;AC3OA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;ACpHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAaA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;ACrDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAMA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;;;;;;;;;;;;;AChGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAOA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAzBA;AACA;AACA;AACA;AAuBA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAQA;AAmBA;AARA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAAA;;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;ACxDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;;AACA;AACA;AAGA;AAGA;AAIA;AAIA;AAOA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AAGA;AAWA;AAEA;AACA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AAIA;AAEA;AACA;AAGA;AAEA;AApOA;AACA;;AARA;AACA;AACA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAIA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;;;;;;;;;;;;;AC/JA;AAAA;AAAA;AAAA;AAEA;AAUA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAGA;AAGA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAWA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7EA;AAAA;AAAA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAGA;AAIA;AACA;;;;AAIA;;;;;;;;;;;;;;;;;;AAkBA;;AAEA;AAGA;AASA;AACA;;;;;;;;;;;;;AClIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAYA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;;;;;;;;;;;;ACtFA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}