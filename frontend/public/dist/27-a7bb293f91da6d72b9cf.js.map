{"version":3,"file":"27-a7bb293f91da6d72b9cf.js","sources":["webpack:///./public/components/hypercloud/create-sample.tsx","webpack:///./public/components/hypercloud/utils/inputSelectBox.tsx","webpack:///./public/components/hypercloud/utils/key-value-list-editor.tsx","webpack:///./public/components/hypercloud/utils/number-spinner.tsx","webpack:///./public/components/hypercloud/utils/resource-dropdown.tsx","webpack:///./public/components/hypercloud/utils/tags-label.jsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { match as RMatch } from 'react-router';\nimport { useFormContext, Controller } from 'react-hook-form';\nimport { WithCommonForm } from './form/create-form';\nimport { SelectorInput } from '../utils';\nimport { RadioGroup } from './utils/radio';\nimport { Section } from './utils/section';\nimport { InputSelectBox } from './utils/inputSelectBox';\nimport { Dropdown, ContainerDropdown } from './utils/dropdown';\nimport { ResourceDropdown } from './utils/resource-dropdown';\nimport { ResourceListDropdown, ResourceListDropdownWithDataToolbar } from './utils/resource-list-dropdown';\nimport { KeyValueListEditor } from './utils/key-value-list-editor';\nimport { TagsLabel } from './utils/tags-label';\nimport { NumberSpinner } from './utils/number-spinner';\nimport { ListView } from './utils/list-view';\nimport { Button } from '@patternfly/react-core';\n\nconst defaultValues = {\n  // requestDo에 넣어줄 형식으로 defaultValues 작성\n  metadata: {\n    name: 'test-name',\n    keyvaluelist: [\n      { key: 'A', value: 'aaa' },\n      { key: 'B', value: 'bbb' },\n      { key: 'C', value: 'ccc' },\n      { key: 'D', value: 'ddd' },\n      { key: 'E', value: 'eee' },\n    ],\n    tags: ['AAA', 'BBB'],\n  },\n  spec: {\n    resources: 'cpu',\n  },\n  keyValueList: [\n    {\n      key: 'AAA',\n      value: 'aaa',\n    },\n    {\n      key: 'BBB',\n      value: 'bbb',\n    },\n    {\n      key: 'CCC',\n      value: 'ccc',\n    },\n    {\n      key: 'DDD',\n      value: 'ddd',\n    },\n  ],\n  numList: [\n    {\n      name: 'Item1',\n      number: 3,\n    },\n    {\n      name: 'Item2',\n      number: 5,\n    },\n  ],\n  dropdown1: 'Ti',\n};\n\nconst ClusterResourceList = [\n  {\n    \"kind\": \"ClusterManager\",\n    \"apiVersion\": \"cluster.tmax.io/v1alpha1\",\n    \"metadata\": {\n      \"name\": \"jmc-zgw2v\",\n      \"uid\": \"1a482d7d-ac35-46d3-8496-a94688fc6d0e\",\n    },\n    \"fakeMetadata\": {\n      \"fakename\": \"jmc\"\n    },\n  },\n  {\n    \"kind\": \"ClusterClaim\",\n    \"apiVersion\": \"cluster.tmax.io/v1alpha1\",\n    \"metadata\": {\n      \"name\": \"example\",\n      \"uid\": \"436b6e22-748e-4e04-aea5-156f2ed35fa0\",\n    },\n  }\n];\n\nconst sampleFormFactory = params => {\n  return WithCommonForm(CreateSampleComponent, params, defaultValues);\n};\n\nconst CreateSampleComponent: React.FC<SampleFormProps> = props => {\n  const { control } = useFormContext();\n\n  const updateSelectedClusterItems = (selection: string) => { // selection: {resource}.metadata.uid | 'All'\n    //Do Something\n    console.log('updateSelectedClusterItems: ', selection)\n  };\n\n  const onSelectedItemChange = (items: Set<string>) => {\n    //DO Something\n    console.log(\"hi\")\n  };\n\n  const resources = [\n    // RadioGroup 컴포넌트에 넣어줄 items\n    {\n      title: 'Cpu',\n      value: 'cpu',\n    },\n    {\n      title: 'Gpu',\n      value: 'gpu',\n    },\n    {\n      title: 'Memory',\n      value: 'memory',\n    },\n  ];\n  const dropdownUnits = {\n    Mi: 'MiB',\n    Gi: 'GiB',\n    Ti: 'TiB',\n  };\n  const containers = { test: { name: 'test', order: 0 }, sidecar: { name: 'sidecar' }, sidecar2: { name: 'sidecar2' } };\n  const initContainers = { initupload: { name: 'initupload', order: 0 }, ['place-entrypoint']: { name: 'place-entrypoint' }, ['place-entrypoint2']: { name: 'place-entrypoint2' } };\n\n  const listHeaderFragment = (\n    <div className=\"row pairs-list__heading\">\n      <div className=\"col-xs-4 text-secondary text-uppercase\">NAME</div>\n      <div className=\"col-xs-4 text-secondary text-uppercase\">NUM</div>\n      <div className=\"col-xs-1 co-empty__header\" />\n    </div>\n  );\n\n  const listItemRenderer = (register, name, item, index, ListActions, ListDefaultIcons) => (\n    <div className=\"row\" key={item.id}>\n      <div className=\"col-xs-4 pairs-list__name-field\">\n        <input ref={register()} className=\"pf-c-form-control\" name={`metadata.numList[${index}].name`} defaultValue={item.name}></input>\n      </div>\n      <div className=\"col-xs-4 pairs-list__value-field\">\n        <NumberSpinner initialValue={item.number} min={-15} max={15} name={`metadata.numList[${index}].number`} />\n      </div>\n      <div className=\"col-xs-1 pairs-list__action\">\n        <Button\n          type=\"button\"\n          data-test-id=\"pairs-list__delete-btn\"\n          className=\"pairs-list__span-btns\"\n          onClick={() => {\n            ListActions.remove(index);\n          }}\n          variant=\"plain\"\n        >\n          {ListDefaultIcons.deleteIcon}\n        </Button>\n      </div>\n    </div>\n  );\n\n  return (\n    <div>\n      <Section label=\"Labels\" id=\"label\" description=\"이것은 Label입니다.\">\n        <Controller name=\"metadata.labels\" id=\"label\" labelClassName=\"co-text-sample\" as={SelectorInput} control={control} tags={[]} />\n      </Section>\n      <Section id=\"resources\" label=\"Radio Group\">\n        <RadioGroup\n          name=\"spec.resources\" // 서버에 보낼 데이터에서의 path (필수)\n          items={resources} // [{title: '', value: ''}] (필수)\n          inline={false} // inline속성 먹일거면 true, 아니면 빼면 됨 (선택)\n        />\n      </Section>\n      <Section id=\"cpu\" label=\"Input Selectbox\">\n        <InputSelectBox textName=\"spec.cpu\" id=\"cpu\" dropdownName=\"spec.cpuRange\" selectedKey=\"Mi\" items={dropdownUnits} />\n      </Section>\n      <Section id=\"section\" label=\"Grid Section\" isRequired={true}>\n        {/* sample로 각각다른 3개 node 넣어봄. 1,2,3,4 개 일 경우 다 정상동작 하는 것 확인.*/}\n        <Section id=\"label\" label=\"Label (for Section)\">\n          <Controller name=\"metadata.section.label\" id=\"label\" labelClassName=\"co-text-sample\" as={SelectorInput} control={control} tags={[]} />\n        </Section>\n        <Section id=\"cpu\" label=\"Input Selectbox (for Section)\">\n          <InputSelectBox textName=\"spec.section.cpu\" id=\"cpu\" dropdownName=\"spec.section.cpuRange\" selectedKey=\"Mi\" items={dropdownUnits} />\n        </Section>\n        <Section id=\"resources\" label=\"Radio Group (for Section)\">\n          <RadioGroup\n            name=\"spec.section.resources\" // 서버에 보낼 데이터에서의 path (필수)\n            items={resources} // [{title: '', value: ''}] (필수)\n            inline={false} // inline속성 먹일거면 true, 아니면 빼면 됨 (선택)\n          />\n        </Section>\n      </Section>\n      <Section id=\"dropdown\" label=\"Dropdown\">\n        <Dropdown\n          name=\"dropdown1\"\n          className=\"btn-group\"\n          items={dropdownUnits} // (필수)\n          required={true}\n          buttonClassName=\"dropdown-btn\" // 선택된 아이템 보여주는 button (title) 부분 className\n          itemClassName=\"dropdown-item\" // 드롭다운 아이템 리스트 전체의 className - 각 row를 의미하는 것은 아님\n        />\n        <ContainerDropdown\n          name=\"containerDropdown1\"\n          containers={containers} // (필수)\n          initContainers={initContainers}\n        />\n      </Section>\n      <Section id=\"resourcedropdown\" label=\"Resource Dropdown\">\n        <ResourceDropdown\n          name=\"RD-single\"\n          placeholder=\"select one deployment\"\n          resources={[\n            {\n              kind: 'Deployment',\n              namespace: 'catalog', // 옵션\n              prop: 'deployment'\n            },\n          ]}\n          type='single'\n          useHookForm\n        />\n        <ResourceDropdown\n          name=\"RD-multiple\"\n          resources={[\n            {\n              kind: 'Pod',\n              namespace: 'default', // 옵션\n              prop: 'pod',\n            },\n          ]}\n          defaultValue={[\"new-pipeline-test-shtehy-sum-params-qkg57-pod-l47lv\"]} // 옵션\n          type='multiple'\n          showAll={true}\n          useHookForm\n        />\n      </Section>\n      <Section id=\"resourcelistdropdown\" label=\"Resource List Dropdown\">\n        <ResourceListDropdown\n          resourceList={ClusterResourceList} // 필수\n          autocompletePlaceholder=\"search by name\"\n          placeholder=\"Resource Dropdown\" // *single에서만 사용 가능\n          type=\"single\" // 필수 type: single / multiple\n        />\n        <ResourceListDropdown\n          name=\"RLD-multiple\"\n          resourceList={ClusterResourceList} // 필수\n          onChange={updateSelectedClusterItems} // '아이템' 선택될 때마다 호출됨\n          resourceType=\"Cluster and Cluster Claim\" \n          autocompletePlaceholder=\"search by name\"\n          type=\"multiple\" // 필수 type: single / multiple\n          useHookForm\n        />\n        <ResourceListDropdownWithDataToolbar // react hook form 사용하지 않는 예시\n          resourceList={ClusterResourceList} // 필수\n          showAll={true} // 드롭다운에 all resource 라는 항목이 생긴다.\n          resourceType=\"Cluster and Cluster Claim\" // title, placeholder, all resources, chip group 에 적용되는 문구 (title, placeholder는 직접 지정하는 것의 우선순위가 더 높음)\n          autocompletePlaceholder=\"search by name\" // 검색란 placeholder\n          onSelectedItemChange={onSelectedItemChange} // 선택된 아이템 '리스트' 변동될 때마다 호출되는 함수\n        />\n        <ResourceListDropdownWithDataToolbar // react hook form 사용하는 예시\n          name=\"ResourceListDropdownWithDataToolbar1\"\n          resourceList={ClusterResourceList} // 필수\n          showAll={false}\n          title=\"select Resources\" // 드롭다운 title 지정\n          resourceType=\"Cluster and Cluster Claim\"\n          useHookForm\n        />\n      </Section>\n      <Section id=\"numberspinner\" label=\"Number Spinner\">\n        <NumberSpinner\n          initialValue={0}\n          min={-5}\n          max={5}\n          name=\"spinner1\" // 한 페이지에 spinner 여러 개 만들 경우 name에 unique한 값을 넣어줘야 됨 (한개만 만들 땐 name이 필수 아님)\n        />\n      </Section>\n      <Section id=\"tagslabel\" label=\"Tags Label\">\n        <TagsLabel\n          name=\"metadata.tags\" // 서버에 보낼 데이터에서의 path (필수)\n          placeholder=\"Enter tag\" // tag가 없을 때 보여줄 placeholder (선택)\n        />\n      </Section>\n      <Section id=\"list\" label=\"Key Value List\">\n        <KeyValueListEditor\n          name=\"metadata.keyvaluelist\" // 서버에 보낼 데이터에서의 path (필수)\n          disableReorder={false} // 순서바꾸기 제공여부 설정. 기본값은 false (선택)\n        />\n      </Section>\n      <Section id=\"listviewsection1\" label=\"Default Key/Value List View\">\n        <ListView name=\"metadata.keyValueList\" addButtonText=\"Add Key/Value\" />\n      </Section>\n      <Section id=\"listviewsection2\" label=\"Customized List View\">\n        <ListView name=\"metadata.numList\" addButtonText=\"Add Name/Num\" headerFragment={listHeaderFragment} itemRenderer={listItemRenderer} defaultItem={{ name: '', number: 0 }} />\n      </Section>\n    </div>\n  );\n};\n\nexport const CreateSample: React.FC<CreateSampleProps> = props => {\n  const formComponent = sampleFormFactory(props.match.params);\n  const SampleFormComponent = formComponent;\n  return <SampleFormComponent fixed={{}} explanation=\"\" titleVerb=\"Create\" onSubmitCallback={onSubmitCallback} isCreate={true} />;\n};\n\nexport const onSubmitCallback = data => {\n  // submit하기 전에 data를 가공해야 할 경우\n  let labels = SelectorInput.objectify(data.metadata.labels);\n  delete data.metadata.labels;\n  data = _.defaultsDeep(data, { metadata: { labels: labels } });\n  return data;\n};\n\ntype CreateSampleProps = {\n  match: RMatch<{\n    type?: string;\n  }>;\n  fixed: object;\n  explanation: string;\n  titleVerb: string;\n  saveButtonText?: string;\n  isCreate: boolean;\n};\n\ntype SampleFormProps = {\n  onChange: Function;\n  stringData: {\n    [key: string]: string;\n  };\n  isCreate: boolean;\n};\n","import * as React from 'react';\nimport { Dropdown } from '../../utils/dropdown';\nimport * as classNames from 'classnames';\nimport { useFormContext, Controller } from 'react-hook-form';\n\nexport const InputSelectBox: React.FC<InputSelectProps> = props => {\n  const { register, control } = useFormContext();\n  const { items, textName, dropdownName, selectedKey, placeholder, required, minValue, inputClassName, id } = props;\n  return (\n    <div className=\"pf-c-input-group\">\n      <input className={classNames('pf-c-form-control', inputClassName)} ref={register} id={id} type=\"number\" placeholder={placeholder} name={textName} required={required} min={minValue} />\n      <Controller as={Dropdown} control={control} selectedKey={selectedKey} name={dropdownName} className=\"btn-group\" items={items} required={required} />\n    </div>\n  );\n};\n\nexport type InputSelectProps = {\n  items: {};\n  textName: string;\n  dropdownName: string;\n  id?: string;\n  selectedKey?: string;\n  placeholder?: string;\n  required?: boolean;\n  minValue?: number;\n  inputClassName?: string;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { useFormContext, useFieldArray } from 'react-hook-form';\nimport { Button } from '@patternfly/react-core';\nimport { PficonDragdropIcon, MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\nexport const KeyValueListEditor: React.FC<KeyValueListEditorProps> = ({ name, disableReorder = false }) => {\n  const { control, register, getValues } = useFormContext();\n  const { fields, append, remove, move } = useFieldArray<{ key: string; value: string }>({ control, name: name });\n\n  const deleteIcon = (\n    <>\n      <MinusCircleIcon className=\"pairs-list__side-btn pairs-list__delete-icon\" />\n      <span className=\"sr-only\">Delete</span>\n    </>\n  );\n\n  // 중복되는 key 유무에 대한 validation\n  const validateKey = keyInput => {\n    let count = 0;\n    const itemArray = _.get(getValues(), name);\n    for (let item of itemArray) {\n      if (keyInput === item['key'] && ++count > 1) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const validateValue = valueInput => {\n    // value에 대한 validation은 아직 없음\n    return true;\n  };\n\n  const onDragEnd = result => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.destination.index === result.source.index) {\n      return;\n    }\n\n    move(result.source.index, result.destination.index);\n  };\n\n  const renderList = () => {\n    return fields.map((item, index) => (\n      <Draggable draggableId={item.id} index={index} key={item.id}>\n        {provided => (\n          <div ref={provided.innerRef} {...provided.draggableProps}>\n            <div className={'col-xs-1 pairs-list__action ' + (disableReorder ? 'hide' : '')} {...provided.dragHandleProps}>\n              <PficonDragdropIcon className=\"vertical-center\" />\n            </div>\n            <div className=\"col-xs-5 pairs-list__name-field\">\n              <input type=\"text\" className=\"pf-c-form-control\" ref={register({ validate: validateKey })} name={`${name}[${index}].key`} defaultValue={item.key} />\n            </div>\n            <div className=\"col-xs-5 pairs-list__value-field\">\n              <input type=\"text\" className=\"pf-c-form-control\" ref={register({ validate: validateValue })} name={`${name}[${index}].value`} defaultValue={item.value} />\n            </div>\n            <Button\n              type=\"button\"\n              data-test-id=\"pairs-list__delete-btn\"\n              className=\"pairs-list__span-btns\"\n              onClick={() => {\n                remove(index);\n              }}\n              variant=\"plain\"\n            >\n              {deleteIcon}\n            </Button>\n          </div>\n        )}\n      </Draggable>\n    ));\n  };\n\n  return (\n    <div>\n      <div className=\"row pairs-list__heading\">\n        {!disableReorder && <div className=\"col-xs-1 co-empty__header\" />}\n        <div className=\"col-xs-5 text-secondary text-uppercase\">KEY</div>\n        <div className=\"col-xs-5 text-secondary text-uppercase\">VALUE</div>\n        <div className=\"col-xs-1 co-empty__header\" />\n      </div>\n      <div className=\"row\">\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable droppableId=\"list\">\n            {provided => (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                {renderList()}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n          <Button\n            className=\"pf-m-link--align-left\"\n            data-test-id=\"pairs-list__add-btn\"\n            onClick={() => {\n              append({ key: '', value: '' });\n            }}\n            type=\"button\"\n            variant=\"link\"\n          >\n            <PlusCircleIcon data-test-id=\"pairs-list__add-icon\" className=\"co-icon-space-r\" />\n            Add\n          </Button>\n        </DragDropContext>\n      </div>\n    </div>\n  );\n};\n\ntype KeyValueListEditorProps = {\n  name: string;\n  disableReorder?: boolean;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { Button } from '@patternfly/react-core';\nimport { MinusSquareIcon, PlusSquareIcon } from '@patternfly/react-icons';\nimport { useFormContext } from 'react-hook-form';\n\nexport const NumberSpinner: React.FC<NumberSpinnerProps> = ({ className, initialValue, min, max, name, ...inputProps }) => {\n  const { register } = useFormContext();\n  const [value, setValue] = React.useState(initialValue);\n  const changeValueBy = operation => {\n    setValue(_.toInteger(value) + operation);\n  };\n  return (\n    <div>\n      <Button onClick={() => changeValueBy(-1)} type=\"button\" variant=\"plain\" isDisabled={!_.isNil(min) && value <= min} aria-label=\"Decrement\" className=\"co-m-number-spinner__button\">\n        <MinusSquareIcon className=\"co-m-number-spinner__down-icon\" />\n      </Button>\n      <input name={name} type=\"number\" ref={register({ min: min, max: max })} value={value} onChange={(e: any) => setValue(e.target.value)} className={classNames(className, 'co-m-number-spinner__input', 'hc-number-spinner__input')} {...inputProps}></input>\n      <Button onClick={() => changeValueBy(1)} type=\"button\" variant=\"plain\" isDisabled={!_.isNil(max) && value >= max} aria-label=\"Increment\" className=\"co-m-number-spinner__button\">\n        <PlusSquareIcon className=\"co-m-number-spinner__up-icon\" />\n      </Button>\n    </div>\n  );\n};\n\ntype NumberSpinnerProps = {\n  className?: string;\n  initialValue?: number;\n  min?: number;\n  max?: number;\n  name?: string;\n} & React.HTMLProps<HTMLInputElement>;\n\nNumberSpinner.defaultProps = {\n  name: 'numberSpinner',\n  initialValue: 0,\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Firehose, FirehoseResult, FirehoseResource, LoadingInline } from '@console/internal/components/utils';\nimport { ResourceListDropdown, SingleResourceDropdownProps, MultipleResourceDropdownProps } from './resource-list-dropdown';\n\nconst ResourceDropdownWrapper_: React.FC<ResourceDropdownWrapperProps> = (props) => {\n  const getItems = (resources) => {\n    const items = [];\n    _.each(resources, (resource, k) => {\n      if (resource.loaded) {\n        const kind = resource.kind;\n        _.each(\n          resource.data,\n          (item) => {\n            item.kind = kind;\n            items.push(item);\n          }\n        );\n      }\n    })\n    return items;\n  };\n\n  //const [title, setTitle] = React.useState(props.loaded ? props.placeholder : <LoadingInline />);\n  const [rows, setRows] = React.useState(props.loaded ? getItems(props.resources) : []);\n\n  React.useEffect(() => {\n    if (props.loaded) {\n      //setTitle(props.placeholder);\n      setRows(getItems(props.resources));\n    }\n  }, [props.loaded]);\n\n  return (\n    <ResourceListDropdown\n      {...props}\n      title={!props.loaded ? <LoadingInline /> : props.title}\n      resourceList={rows} // 필수\n      autocompletePlaceholder=\"search by name\"\n    />\n  )\n}\n\ntype ResourceDropdownWrapperProps = (SingleResourceDropdownProps | MultipleResourceDropdownProps) & {\n  loaded?: boolean;\n  resources?: FirehoseResult[];\n}\n\nexport const ResourceDropdown: React.FC<ResourceDropdownProps> = ({ resources, ...props }) => {\n  resources.map((resource)=>Object.assign(resource, {isList: true}));\n  return (\n    <Firehose resources={resources}>\n      <ResourceDropdownWrapper_ {...props} />\n    </Firehose>\n  )\n}\n\ntype ResourceDropdownProps = (SingleResourceDropdownProps | MultipleResourceDropdownProps) & {\n  resources: FirehoseResource[];\n}","import * as _ from 'lodash';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as classNames from 'classnames';\nimport TagsInput from 'react-tagsinput';\nimport { useFormContext, Controller } from 'react-hook-form';\n\nexport const TagsLabel = ({ name, placeholder = '' }) => {\n  const { control, setValue, getValues, watch } = useFormContext();\n  const [inputValue, setInputValue] = useState('');\n  const [isInputValid, setIsInputValid] = useState(true);\n  const [isEmpty, setIsEmpty] = useState(watch(name) === undefined);\n\n  // An array of key codes that add a tag, default is [9, 13] (Tab and Enter).\n  const addKeys = [13];\n  // An array of key codes that remove a tag, default is [8] (Backspace).\n  const removeKeys = inputValue.length ? [] : [8];\n\n  const isTagValid = inputValue => {\n    // 지금은 한글이 있는지만 validation\n    const hasKorean = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/.test(inputValue);\n    return !hasKorean;\n  };\n\n  const handleInputChange = e => {\n    const inputValue = e.target.value;\n\n    // If the user deletes an existing inputValue, set isInputValid back to true\n    if (inputValue === '') {\n      setInputValue(inputValue);\n      setIsInputValid(true);\n      return;\n    }\n    setInputValue(inputValue);\n    setIsInputValid(isTagValid(inputValue));\n  };\n\n  const handleChange = (tags, changed) => {\n    const newTag = changed[0];\n\n    if (!isTagValid(newTag)) {\n      setIsInputValid(false);\n      return;\n    }\n    setValue(name, tags);\n    setIsEmpty(_.isEmpty(tags));\n    setInputValue('');\n    setIsInputValid(true);\n  };\n\n  const renderTag = ({ tag, key, onRemove, getTagDisplayValue }) => {\n    return (\n      <span className={classNames('tag-item', 'co-m-label', 'co-text-pod')} key={key}>\n        <span className=\"tag-item__content\">{getTagDisplayValue(tag)}</span>\n        &nbsp;\n        <a className=\"remove-button\" onClick={() => onRemove(key)}>\n          ×\n        </a>\n      </span>\n    );\n  };\n\n  const inputProps = {\n    className: classNames('input', { 'invalid-tag': !isInputValid }),\n    spellCheck: 'false',\n    value: inputValue,\n    placeholder: isEmpty ? placeholder : '',\n    id: 'tags-input',\n    onChange: handleInputChange,\n  };\n\n  return (\n    <Controller\n      control={control}\n      name={name}\n      render={({ value }) => (\n        <div className=\"co-search-input pf-c-form-control\">\n          <tags-input>\n            <TagsInput onChange={handleChange} value={value ? value : []} className=\"tags\" renderTag={renderTag} inputProps={inputProps} addKeys={addKeys} removeKeys={removeKeys} addOnBlur></TagsInput>\n          </tags-input>\n        </div>\n      )}\n    ></Controller>\n  );\n};\n\nTagsLabel.propTypes = {\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AASA;AAEA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AAMA;AACA;AACA;AAMA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAIA;AACA;AACA;AAOA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAIA;AAIA;AACA;AAKA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AASA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAIA;AAIA;AACA;AAIA;AAEA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChHA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAUA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAOA;AAAA;AACA;AACA;AAEA;AAGA;;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAMA;AAEA;AACA;AACA;AACA;;;;;A","sourceRoot":""}