{"version":3,"file":"pipelinerun-details-9613d17362bfc63dca1c.js","sources":["webpack:///./packages/dev-console/src/components/pipelineruns/PipelineRunDetailsPage.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/detail-page-tabs/PipelineRunDetails.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/detail-page-tabs/TriggeredBySection.scss?a4d3","webpack:///./packages/dev-console/src/components/pipelineruns/triggered-by/ResourceKebabWithUserLabel.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/triggered-by/hooks.ts","webpack:///./packages/dev-console/src/components/pipelineruns/triggered-by/index.ts","webpack:///./packages/dev-console/src/components/pipelines/resource-overview/DynamicResourceLinkList.scss?7299","webpack:///./packages/dev-console/src/components/pipelines/resource-overview/DynamicResourceLinkList.tsx","webpack:///./packages/dev-console/src/utils/pipeline-actions.tsx"],"sourcesContent":["import * as React from 'react';\nimport { DetailsPage, DetailsPageProps } from '@console/internal/components/factory';\nimport { KebabAction, navFactory, viewYamlComponent } from '@console/internal/components/utils';\nimport { pipelineRunStatus } from '../../utils/pipeline-filter-reducer';\nimport { getPipelineRunKebabActions } from '../../utils/pipeline-actions';\nimport { PipelineRunDetails } from './detail-page-tabs/PipelineRunDetails';\nimport { PipelineRunLogsWithActiveTask } from './detail-page-tabs/PipelineRunLogs';\nimport { useMenuActionsWithUserLabel } from './triggered-by';\n\nconst PipelineRunDetailsPage: React.FC<DetailsPageProps> = (props) => {\n  const menuActions: KebabAction[] = useMenuActionsWithUserLabel(getPipelineRunKebabActions(true));\n\n  return (\n    <DetailsPage\n      {...props}\n      menuActions={menuActions}\n      getResourceStatus={pipelineRunStatus}\n      pages={[\n        navFactory.details(PipelineRunDetails),\n        navFactory.editYaml(viewYamlComponent),\n        {\n          href: 'logs',\n          path: 'logs/:name?',\n          name: 'Logs',\n          component: PipelineRunLogsWithActiveTask,\n        },\n      ]}\n    />\n  );\n};\n\nexport default PipelineRunDetailsPage;\n","import * as React from 'react';\nimport { SectionHeading, ResourceSummary, ResourceLink } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport {\n  PipelineRun,\n  PipelineRunReferenceResource,\n  pipelineRefExists,\n} from '../../../utils/pipeline-augment';\nimport { PipelineModel, PipelineResourceModel } from '../../../models';\nimport ResourceLinkList from '../../pipelines/resource-overview/ResourceLinkList';\nimport PipelineRunVisualization from './PipelineRunVisualization';\nimport TriggeredBySection from './TriggeredBySection';\n\nimport './TriggeredBySection.scss';\n\nexport interface PipelineRunDetailsProps {\n  obj: PipelineRun;\n}\n\nexport const PipelineRunDetails: React.FC<PipelineRunDetailsProps> = ({ obj: pipelineRun }) => {\n  // FIXME: If they are inline resources, we are not going to render them\n  const unfilteredResources = pipelineRun.spec.resources as PipelineRunReferenceResource[];\n  const renderResources =\n    unfilteredResources\n      ?.filter(({ resourceRef }) => !!resourceRef)\n      .map((resource) => resource.resourceRef.name) || [];\n\n  return (\n    <div className=\"co-m-pane__body odc-pipeline-run-details\">\n      <SectionHeading text=\"Pipeline Run Details\" />\n      <PipelineRunVisualization pipelineRun={pipelineRun} />\n      <div className=\"row\">\n        <div className=\"col-sm-6\">\n          <ResourceSummary resource={pipelineRun} />\n        </div>\n        <div className=\"col-sm-6 odc-pipeline-run-details__customDetails\">\n          {pipelineRefExists(pipelineRun) && (\n            <dl>\n              <dt>Pipeline</dt>\n              <dd>\n                <ResourceLink\n                  kind={referenceForModel(PipelineModel)}\n                  name={pipelineRun.spec.pipelineRef.name}\n                  namespace={pipelineRun.metadata.namespace}\n                />\n              </dd>\n            </dl>\n          )}\n          <TriggeredBySection pipelineRun={pipelineRun} />\n          <br />\n          <ResourceLinkList\n            model={PipelineResourceModel}\n            links={renderResources}\n            namespace={pipelineRun.metadata.namespace}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { KebabAction, ResourceKebab } from '@console/internal/components/utils';\nimport { useMenuActionsWithUserLabel } from './hooks';\n\nconst ResourceKebabWithUserLabel: React.FC<React.ComponentProps<typeof ResourceKebab>> = ({\n  actions,\n  ...otherProps\n}) => {\n  const augmentedMenuActions: KebabAction[] = useMenuActionsWithUserLabel(actions);\n\n  return <ResourceKebab {...otherProps} actions={augmentedMenuActions} />;\n};\n\nexport default ResourceKebabWithUserLabel;\n","import { merge } from 'lodash';\n// FIXME react-redux types are 6.x while react-redux is 7.x\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport { useSelector } from 'react-redux';\nimport { KebabAction } from '@console/internal/components/utils';\nimport { K8sResourceCommon } from '@console/internal/module/k8s';\nimport { PipelineRun } from '../../../utils/pipeline-augment';\nimport { StartedByLabel } from '../../pipelines/const';\n\ntype LabelMap = { [labelKey: string]: string };\n\nconst mergeLabelsWithResource = (labels: LabelMap, resource: K8sResourceCommon) => {\n  return merge({}, resource, { metadata: { labels } });\n};\n\nexport const useUserLabelForManualStart = (): LabelMap => {\n  const user = useSelector((state) => state.UI.get('user'));\n\n  return {\n    // kube:admin is an invalid k8s label value\n    [StartedByLabel.user]: user.metadata.name.replace(/:/, ''),\n  };\n};\n\nexport const usePipelineRunWithUserLabel = (plr: PipelineRun): PipelineRun => {\n  const labels = useUserLabelForManualStart();\n\n  return plr && mergeLabelsWithResource(labels, plr);\n};\n\nexport const useMenuActionsWithUserLabel = (menuActions: KebabAction[]): KebabAction[] => {\n  const labels = useUserLabelForManualStart();\n\n  return menuActions.map((kebabAction) => {\n    return (kind, resource, ...rest) =>\n      kebabAction(kind, mergeLabelsWithResource(labels, resource), ...rest);\n  });\n};\n","export * from './hooks';\nexport { default as ResourceKebabWithUserLabel } from './ResourceKebabWithUserLabel';\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { K8sKind, referenceForModel } from '@console/internal/module/k8s';\n\nimport './DynamicResourceLinkList.scss';\n\nexport type ResourceModelLink = {\n  model: K8sKind;\n  name: string;\n  displayName?: string;\n};\n\ntype DynamicResourceLinkListProps = {\n  links: ResourceModelLink[];\n  namespace: string;\n  title: string;\n};\n\nconst DynamicResourceLinkList: React.FC<DynamicResourceLinkListProps> = ({\n  links = [],\n  namespace,\n  title,\n}) => {\n  if (links.length === 0) {\n    return null;\n  }\n  return (\n    <div className=\"odc-dynamic-resource-link-list\">\n      <dl>\n        <dt>{title}</dt>\n        <dd>\n          {links.map(({ name, model, displayName = '' }) => {\n            const kind = referenceForModel(model);\n            let linkName = name;\n            if (displayName.length > 0 && name !== displayName) {\n              linkName += ` (${displayName})`;\n            }\n            return (\n              <div key={`${kind}/${name}`}>\n                <ResourceLink\n                  kind={kind}\n                  name={name}\n                  displayName={linkName}\n                  namespace={namespace}\n                  title={name}\n                  inline\n                />\n              </div>\n            );\n          })}\n        </dd>\n      </dl>\n    </div>\n  );\n};\n\nexport default DynamicResourceLinkList;\n","import * as _ from 'lodash';\nimport {\n  history,\n  resourcePathFromModel,\n  Kebab,\n  KebabAction,\n} from '@console/internal/components/utils';\nimport { k8sCreate, K8sKind, k8sPatch, referenceForModel } from '@console/internal/module/k8s';\nimport { errorModal } from '@console/internal/components/modals';\nimport {\n  addTriggerModal,\n  startPipelineModal,\n  removeTriggerModal,\n} from '../components/pipelines/modals';\nimport { getPipelineRunData } from '../components/pipelines/modals/common/utils';\nimport { StartedByLabel } from '../components/pipelines/const';\nimport { EventListenerModel, PipelineModel, PipelineRunModel } from '../models';\nimport { Pipeline, PipelineRun } from './pipeline-augment';\nimport { pipelineRunFilterReducer } from './pipeline-filter-reducer';\n\nexport const handlePipelineRunSubmit = (pipelineRun: PipelineRun) => {\n  history.push(\n    resourcePathFromModel(\n      PipelineRunModel,\n      pipelineRun.metadata.name,\n      pipelineRun.metadata.namespace,\n    ),\n  );\n};\n\nexport const triggerPipeline = (\n  pipeline: Pipeline,\n  onSubmit?: (pipelineRun: PipelineRun) => void,\n) => {\n  k8sCreate(PipelineRunModel, getPipelineRunData(pipeline))\n    .then(onSubmit)\n    .catch((err) => errorModal({ error: err.message }));\n};\n\nexport const reRunPipelineRun: KebabAction = (kind: K8sKind, pipelineRun: PipelineRun) => ({\n  label: 'Rerun',\n  callback: () => {\n    const namespace = _.get(pipelineRun, 'metadata.namespace');\n    const pipelineRef = _.get(pipelineRun, 'spec.pipelineRef.name');\n    if (namespace && pipelineRef) {\n      k8sCreate(PipelineRunModel, getPipelineRunData(null, pipelineRun));\n    } else {\n      errorModal({ error: 'Invalid Pipeline Run configuration, unable to start Pipeline.' });\n    }\n  },\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    name: pipelineRun.metadata.name,\n    namespace: pipelineRun.metadata.namespace,\n    verb: 'create',\n  },\n});\n\nexport const editPipeline: KebabAction = (kind: K8sKind, pipeline: Pipeline) => ({\n  label: 'Edit Pipeline',\n  callback: () => {\n    const {\n      metadata: { name, namespace },\n    } = pipeline;\n    history.push(`/k8s/ns/${namespace}/${referenceForModel(PipelineModel)}/${name}/builder`);\n  },\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    name: pipeline.metadata.name,\n    namespace: pipeline.metadata.namespace,\n    verb: 'update',\n  },\n});\n\nexport const startPipeline: KebabAction = (\n  kind: K8sKind,\n  pipeline: Pipeline,\n  onSubmit?: (pipelineRun: PipelineRun) => void,\n) => ({\n  label: 'Start',\n  callback: () => {\n    const params = _.get(pipeline, ['spec', 'params'], []);\n    const resources = _.get(pipeline, ['spec', 'resources'], []);\n    const workspaces = _.get(pipeline, ['spec', 'workspaces'], []);\n\n    if (!_.isEmpty(params) || !_.isEmpty(resources) || !_.isEmpty(workspaces)) {\n      startPipelineModal({\n        pipeline,\n        modalClassName: 'modal-lg',\n        onSubmit,\n      });\n    } else {\n      triggerPipeline(pipeline, onSubmit);\n    }\n  },\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    name: pipeline.metadata.name,\n    namespace: pipeline.metadata.namespace,\n    verb: 'create',\n  },\n});\n\ntype RerunPipelineData = {\n  onComplete?: (pipelineRun: PipelineRun) => void;\n  label?: string;\n};\nconst rerunPipeline: KebabAction = (\n  kind: K8sKind,\n  pipelineRun: PipelineRun,\n  resources: any,\n  customData: RerunPipelineData = { label: 'Start Last Run' },\n) => {\n  const { onComplete } = customData;\n\n  const sharedProps = { label: customData.label, accessReview: {} };\n\n  if (\n    !pipelineRun ||\n    !_.has(pipelineRun, 'metadata.name') ||\n    !_.has(pipelineRun, 'metadata.namespace')\n  ) {\n    return sharedProps;\n  }\n\n  return {\n    ...sharedProps,\n    callback: () => {\n      k8sCreate(PipelineRunModel, getPipelineRunData(null, pipelineRun))\n        .then(typeof onComplete === 'function' ? onComplete : () => {})\n        .catch((err) => errorModal({ error: err.message }));\n    },\n    accessReview: {\n      group: kind.apiGroup,\n      resource: kind.plural,\n      name: pipelineRun.metadata.name,\n      namespace: pipelineRun.metadata.namespace,\n      verb: 'create',\n    },\n  };\n};\n\nexport const rerunPipelineAndStay: KebabAction = (kind: K8sKind, pipelineRun: PipelineRun) => {\n  return rerunPipeline(kind, pipelineRun);\n};\n\nexport const rerunPipelineAndRedirect: KebabAction = (kind: K8sKind, pipelineRun: PipelineRun) => {\n  return rerunPipeline(kind, pipelineRun, null, {\n    onComplete: handlePipelineRunSubmit,\n    label: 'Start Last Run',\n  });\n};\n\nexport const rerunPipelineRunAndRedirect: KebabAction = (\n  kind: K8sKind,\n  pipelineRun: PipelineRun,\n) => {\n  return rerunPipeline(kind, pipelineRun, null, {\n    onComplete: handlePipelineRunSubmit,\n    label: 'Rerun',\n  });\n};\n\nexport const stopPipelineRun: KebabAction = (kind: K8sKind, pipelineRun: PipelineRun) => {\n  // The returned function will be called using the 'kind' and 'obj' in Kebab Actions\n  return {\n    label: 'Stop',\n    callback: () => {\n      k8sPatch(\n        PipelineRunModel,\n        {\n          metadata: { name: pipelineRun.metadata.name, namespace: pipelineRun.metadata.namespace },\n        },\n        [\n          {\n            op: 'replace',\n            path: `/spec/status`,\n            value: 'PipelineRunCancelled',\n          },\n        ],\n      );\n    },\n    hidden: !(pipelineRun && pipelineRunFilterReducer(pipelineRun) === 'Running'),\n    accessReview: {\n      group: kind.apiGroup,\n      resource: kind.plural,\n      name: pipelineRun.metadata.name,\n      namespace: pipelineRun.metadata.namespace,\n      verb: 'update',\n    },\n  };\n};\n\nexport const addTrigger: KebabAction = (kind: K8sKind, pipeline: Pipeline) => ({\n  label: 'Add Trigger',\n  callback: () => {\n    const cleanPipeline: Pipeline = {\n      ...pipeline,\n      metadata: {\n        ...pipeline.metadata,\n        labels: _.omit(pipeline.metadata.labels, [StartedByLabel.user]),\n      },\n    };\n    addTriggerModal({ pipeline: cleanPipeline, modalClassName: 'modal-lg' });\n  },\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    name: pipeline.metadata.name,\n    namespace: pipeline.metadata.namespace,\n    verb: 'create',\n  },\n});\n\nconst removeTrigger: KebabAction = (kind: K8sKind, pipeline: Pipeline) => ({\n  label: 'Remove Trigger',\n  callback: () => {\n    removeTriggerModal({ pipeline });\n  },\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    name: pipeline.metadata.name,\n    namespace: pipeline.metadata.namespace,\n    verb: 'delete',\n  },\n});\nexport const getPipelineKebabActions = (\n  pipelineRun?: PipelineRun,\n  isTriggerPresent?: boolean,\n): KebabAction[] => [\n  (model, resource: Pipeline) => startPipeline(model, resource, handlePipelineRunSubmit),\n  ...(pipelineRun ? [() => rerunPipelineAndRedirect(PipelineRunModel, pipelineRun)] : []),\n  (model, pipeline) => addTrigger(EventListenerModel, pipeline),\n  ...(isTriggerPresent ? [(model, pipeline) => removeTrigger(EventListenerModel, pipeline)] : []),\n  editPipeline,\n  Kebab.factory.Delete,\n];\n\nexport const getPipelineRunKebabActions = (redirectReRun?: boolean): KebabAction[] => [\n  redirectReRun ? rerunPipelineRunAndRedirect : reRunPipelineRun,\n  stopPipelineRun,\n  Kebab.factory.Delete,\n];\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAQA;AACA;AACA;AASA;;;;;;;;;;;;AC3DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAEA;AAAA;AAIA;AAEA;AACA;AAEA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;ACDA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAcA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAKA;AAEA;;;;;;;;;;;;;ACxDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AAOA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAMA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}