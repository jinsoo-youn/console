{"version":3,"file":"image-scan-request-96ccb8dca12ba8b08d57.js","sources":["webpack:///./public/components/hypercloud/image-scan-request.tsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\n\nimport { K8sResourceKind } from '../../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { Kebab, KebabAction, detailsPage, Timestamp, navFactory, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading } from '../utils';\nimport { ImageScanRequestModel } from '../../models';\nimport { Status } from '@console/shared';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport { ResourceLabel } from '../../models/hypercloud/resource-plural';\n\nexport const menuActions: KebabAction[] = [...Kebab.getExtensionsActionsForKind(ImageScanRequestModel), ...Kebab.factory.common];\n\nconst kind = ImageScanRequestModel.kind;\n\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), Kebab.columnClass];\n\nconst ImageScanRequestTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_3'),\n      sortField: 'status.status',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_12'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[4] },\n    },\n  ];\n};\n\nImageScanRequestTableHeader.displayName = 'ImageScanRequestTableHeader';\n\nconst ImageScanRequestTableRow: RowFunction<K8sResourceKind> = ({ obj: scanrequest, index, key, style }) => {\n  return (\n    <TableRow id={scanrequest.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={scanrequest.metadata.name} namespace={scanrequest.metadata.namespace} title={scanrequest.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={scanrequest.metadata.namespace} title={scanrequest.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Status status={scanrequest?.status?.status} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Timestamp timestamp={scanrequest.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={scanrequest} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const ImageScanRequestStatus: React.FC<ImageScanRequestStatusStatusProps> = ({ result }) => <Status status={result} />;\n\nexport const ImageScanRequestDetailsList: React.FC<ImageScanRequestDetailsListProps> = ({ ds, summary }) => {\n  const { t } = useTranslation();\n  let imageResult = [];\n\n  ds.spec.scanTargets.forEach(target => {\n    target.images.forEach(image => {\n      imageResult.push(<span>{image}</span>);\n    });\n  });\n\n  const getImageResult = status => {\n    if (status === 'Pending' || !status) {\n      return '이미지 스캔대기 중입니다.';\n    } else if (status === 'Scanning') {\n      return '이미지를 스캔 중입니다.';\n    }\n  };\n\n  return (\n    <dl className=\"co-m-pane__details\">\n      <dt>{t('COMMON:MSG_MAIN_TABLEHEADER_3')}</dt>\n      <dd>\n        <ImageScanRequestStatus result={ds?.status?.status} />\n      </dd>\n      <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_42')}</dt>\n      <dd style={{ display: 'flex', flexDirection: 'column' }}>{getImageResult(ds?.status?.status)}</dd>\n      <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_5')}</dt>\n      <dd style={{ display: 'flex', flexDirection: 'column' }}>{ds?.spec?.scanTargets.map(cur => `${cur?.registryUrl}/${cur?.images[0]}`)}</dd>\n      {ds?.status?.status === 'Success' && <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_21')}</dt>}\n      {ds?.status?.status === 'Success' && (\n        <dd style={{ display: 'flex', flexDirection: 'column' }}>\n          {_.keys(summary).map(cur => {\n            return <span>{`${cur}: ${summary[cur]}`}</span>;\n          })}\n        </dd>\n      )}\n      <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_15')}</dt>\n      <dd>{ds?.spec?.insecure ? t('COMMON:MSG_DETAILS_TABDETAILS_46') : t('COMMON:MSG_DETAILS_TABDETAILS_45')}</dd>\n      {ds?.spec?.maxFixable && <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_43')}</dt>}\n      <dd>{ds?.spec?.maxFixable}</dd>\n      <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_44')}</dt>\n      <dd>{ds?.spec?.sendReport ? t('COMMON:MSG_DETAILS_TABDETAILS_47') : t('COMMON:MSG_DETAILS_TABDETAILS_48')}</dd>\n      {/* <DetailsItem label=\"Summary\" obj={ds} path=\"status.summary\" /> */}\n    </dl>\n  );\n};\nexport const ScanResultRow: React.FC<ScanResultRowProps> = ({ scanList }) => {\n  return (\n    <div className=\"row\">\n      <div className=\"col-lg-6 col-md-6 col-sm-6 col-xs-6\">{scanList?.image}</div>\n      <div className=\"col-lg-6 col-md-6 col-sm-6 hidden-xs\">{scanList?.summary}</div>\n    </div>\n  );\n};\nexport const ScanResultTable: React.FC<ScanResultTableProps> = ({ heading, scanList }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <SectionHeading text={heading} />\n      <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n        <div className=\"row co-m-table-grid__head\">\n          <div className=\"col-lg-6 col-md-6 col-sm-6 col-xs-6\">{`${t('COMMON:MSG_DETAILS_CONTAINER_IMAGEDETAILS_1')}`}</div>\n          <div className=\"col-lg-6 col-md-6 col-sm-6 col-xs-6\">{`${t('COMMON:MSG_DETAILS_TABDETAILS_21')}`}</div>\n        </div>\n        <div className=\"co-m-table-grid__body\">\n          {scanList.map((c: any, i: number) => (\n            <ScanResultRow key={i} scanList={c} />\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst ImageScanRequestDetails: React.FC<ImageScanRequestDetailsProps> = ({ obj: scanrequest }) => {\n  const { t } = useTranslation();\n  const summary = {};\n  for (const key in scanrequest.status?.results) {\n    const result = scanrequest.status?.results[key];\n    // let summary = { image: '', summaries: [] };\n    for (const statusKey in result.summary) {\n      const isKeyExist = _.has(summary, statusKey);\n      if (isKeyExist) {\n        summary[statusKey] += scanrequest.status.results[key].summary[statusKey];\n      } else {\n        summary[statusKey] = scanrequest.status.results[key].summary[statusKey];\n      }\n    }\n  }\n\n  // [outdate] previous version\n  // for (const key in scanrequest.status?.results) {\n  //   let summary = { image: '', summary: '' };\n  //   summary.image = key;\n  //   for (const statusKey in scanrequest.status.results[key].summary) {\n  //     summary.summary += `${statusKey} ${scanrequest.status.results[key].summary[statusKey]}, `;\n  //   }\n  //   summary.summary = summary.summary.substr(0, summary.summary.length - 2);\n  //   summaries.push(summary);\n  // }\n\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: ResourceLabel(scanrequest, t) })} />\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <ResourceSummary resource={scanrequest} />\n          </div>\n          <div className=\"col-lg-6\">\n            <ImageScanRequestDetailsList ds={scanrequest} summary={summary} />\n          </div>\n        </div>\n      </div>\n      {/* <div className=\"co-m-pane__body\">\n        <ScanResultTable heading=\"Scan Result\" scanList={summaries} />\n      </div> */}\n    </>\n  );\n};\n\nconst { details, editYaml } = navFactory;\n\nexport const ImageScanRequests: React.FC = props => {\n  const { t } = useTranslation();\n\n  return <Table {...props} aria-label=\"ImageScanRequests\" Header={ImageScanRequestTableHeader.bind(null, t)} Row={ImageScanRequestTableRow} virtualize />;\n};\n\nexport const ImageScanRequestsPage: React.FC<ImageScanRequestsPageProps> = props => {\n  const { t } = useTranslation();\n\n  return <ListPage title={t('COMMON:MSG_LNB_MENU_95')} createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: t('COMMON:MSG_LNB_MENU_95') })} canCreate={true} ListComponent={ImageScanRequests} kind={kind} {...props} />;\n};\n\nexport const ImageScanRequestsDetailsPage: React.FC<ImageScanRequestsDetailsPageProps> = props => <DetailsPage {...props} kind={kind} menuActions={menuActions} pages={[details(detailsPage(ImageScanRequestDetails)), editYaml()]} />;\n\ntype ImageScanRequestDetailsListProps = {\n  ds: K8sResourceKind;\n  summary: any;\n};\n\ntype ScanResultTableProps = {\n  heading: string;\n  scanList: any;\n};\n\ntype ScanResultRowProps = {\n  scanList: any;\n};\n\ntype ImageScanRequestsPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\ntype ImageScanRequestDetailsProps = {\n  obj: K8sResourceKind;\n};\n\ntype ImageScanRequestsDetailsPageProps = {\n  match: any;\n};\ntype ImageScanRequestStatusStatusProps = {\n  result: string;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AAEA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;;;;A","sourceRoot":""}