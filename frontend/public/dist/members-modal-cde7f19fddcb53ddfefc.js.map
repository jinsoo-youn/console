{"version":3,"file":"members-modal-cde7f19fddcb53ddfefc.js","sources":["webpack:///./public/components/hypercloud/modals/invite-member-modal.tsx","webpack:///./public/components/hypercloud/utils/section.tsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\n\nimport {\n  ModalBody,\n  ModalComponentProps,\n  ModalSubmitFooter,\n  ModalTitle,\n  createModalLauncher,\n} from '../../factory/modal';\nimport { HandlePromiseProps, withHandlePromise } from '../../utils';\nimport { Section } from '../utils/section';\nimport { RadioGroup } from '@console/internal/components/radio';\nimport { TextInput } from '@patternfly/react-core';\nimport { coFetchJSON } from '../../../co-fetch';\nimport { getId, getUserGroup } from '../../../hypercloud/auth';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\n\nconst radioItems = (t?: TFunction) => [\n  {\n    title: t('MULTI:MSG_MULTI_CLUSTERS_INVITEPEOPLEPOPUP_RADIOBUTTON_1'),\n    value: 'user'\n  },\n  {\n    title: t('MULTI:MSG_MULTI_CLUSTERS_INVITEPEOPLEPOPUP_RADIOBUTTON_2'),\n    value: 'group'\n  },\n];\n\nconst roleItems = (t?: TFunction) => [\n  {\n    title: t('COMMON:MSG_DETAILS_TABACCESSPERMISSIONS_RADIOBUTTON_1'),\n    value: 'admin',\n  },\n  {\n    title: t('COMMON:MSG_DETAILS_TABACCESSPERMISSIONS_RADIOBUTTON_2'),\n    value: 'developer',\n  },\n  {\n    title: t('COMMON:MSG_DETAILS_TABACCESSPERMISSIONS_RADIOBUTTON_3'),\n    value: 'guest'\n  },\n];\n\nexport const InviteMemberModal = withHandlePromise((props: InviteMemberModalProps) => {\n  const [type, setType] = React.useState('user');\n  const [role, setRole] = React.useState('admin');\n  const [errorMsg, setError] = React.useState('');\n  const [selectedMember, selectMember] = React.useState('');\n  const [inProgress, setProgress] = React.useState(false);\n\n  React.useEffect(() => {\n    clearSelection();\n  }, [type]);\n\n  const clearSelection = () => {\n    selectMember('');\n  };\n\n  const submit: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n    // Append to an existing array, but handle the special case when the array is null.\n    setProgress(true);\n    coFetchJSON(`/api/multi-hypercloud/namespaces/${props.namespace}/clustermanagers/${props.clusterName}/member_invitation/${type}/${selectedMember}?userId=${getId()}${getUserGroup()}&remoteRole=${role}`, 'POST')\n      .then((res) => {\n        setProgress(false);\n        props.close();\n      })\n      .catch((err) => {\n        clearSelection();\n        setProgress(false);\n        setError(err);\n      });\n  };\n\n  const { t } = useTranslation();\n  return (\n    <form onSubmit={submit} name='form' className='modal-content '>\n      <ModalTitle>{t('MULTI:MSG_MULTI_CLUSTERS_INVITEPEOPLEPOPUP_TITLE_1')}</ModalTitle>\n      <ModalBody unsetOverflow={true}>\n        <Section id='user'>\n          <div className='hc-invite-modal__input-members'>\n            <RadioGroup\n              id='type'\n              currentValue={type}\n              items={radioItems.bind(null, t)()}\n              onChange={({ currentTarget }) => { setType(currentTarget.value); clearSelection() }}\n              inline\n            />\n            <div className='hc-invite-modal__members'>\n              <TextInput\n                type=\"text\"\n                name=\"selected-member\"\n                value={selectedMember}\n                onChange={selectMember}\n              />\n            </div>\n            <div>\n              {type === 'user' ? t('MULTI:MSG_MULTI_CLUSTERS_INVITEPEOPLEPOPUP_SUBMESSAGE_1').split('\\n').map(line => {\n                return (<span>{line}<br /></span>)\n              }) : t('MULTI:MSG_MULTI_CLUSTERS_INVITEPEOPLEPOPUP_SUBMESSAGE_2').split('\\n').map(line => {\n                return (<span>{line}<br /></span>)\n              })}\n            </div>\n          </div>\n        </Section>\n        <Section label={t('MULTI:MSG_MULTI_CLUSTERS_INVITEPEOPLEPOPUP_LABEL_1')} id='role' isRequired={true}>\n          <RadioGroup\n            id='role'\n            currentValue={role}\n            items={roleItems.bind(null, t)()}\n            onChange={({ currentTarget }) => setRole(currentTarget.value)}\n          />\n        </Section>\n      </ModalBody>\n      <ModalSubmitFooter\n        errorMessage={errorMsg}\n        inProgress={inProgress}\n        submitText={t('MULTI:MSG_MULTI_CLUSTERS_INVITEPEOPLEPOPUP_BUTTON_3')}\n        cancelText={t('MULTI:MSG_MULTI_CLUSTERS_INVITEPEOPLEPOPUP_BUTTON_2')}\n        cancel={props.cancel}\n      />\n    </form>\n  );\n});\n\nexport const inviteMemberModal = createModalLauncher(InviteMemberModal);\n\nexport type InviteMemberModalProps = {\n  clusterName: string;\n  namespace: string;\n  type: string;\n  existMembers: string[];\n  existGroups: string[];\n} & ModalComponentProps &\n  HandlePromiseProps;\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\n\nconst Node = ({ className, children, description }) => (\n  <div className={className}>\n    <div>{children}</div>\n    <p className=\"help-block\">{description}</p>\n  </div>\n);\n\nconst CombineNodes = (id, label, description, children, isRequired) => {\n  // children node 개수에 따라 가로 분할 class 적용\n  let isArray = Array.isArray(children);\n  let className = isArray ? `col-md-${12 / children.length}` : 'col-md-12';\n  return isArray ? children.map(cur => <Node className={className} children={cur} description={description} />) : <Node className={className} children={children} description={description} />;\n};\n\nexport const Section: React.FC<SectionProps> = ({ id, label, description, children, isRequired = false }) => {\n  let result = CombineNodes(id, label, description, children, isRequired);\n  return (\n    <div className=\"form-group\">\n      {label && (\n        <label className={'control-label ' + (isRequired ? 'co-required' : '')} htmlFor={id}>\n          {label}\n        </label>\n      )}\n      <div className=\"row\">{result}</div>\n    </div>\n  );\n};\n\ntype SectionProps = {\n  id: string;\n  children: Array<React.ReactNode> | React.ReactNode;\n  label?: string;\n  description?: string;\n  isRequired?: boolean;\n};\n"],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;AACA;AAOA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AAQA;AASA;AAEA;;;;;;;;;;;;;AC9HA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AAGA;;;;;A","sourceRoot":""}