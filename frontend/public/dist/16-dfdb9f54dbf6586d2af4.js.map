{"version":3,"file":"16-dfdb9f54dbf6586d2af4.js","sources":["webpack:///./public/components/graphs/bar.tsx","webpack:///./public/components/graphs/graph-loader.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  ChartBar,\n  ChartLabel,\n  ChartThemeColor,\n  ChartThemeVariant,\n  getCustomTheme,\n} from '@patternfly/react-charts';\n\nimport { useRefWidth } from '../utils/ref-width-hook';\nimport { usePrometheusPoll } from './prometheus-poll-hook';\nimport { PrometheusEndpoint } from './helpers';\nimport { PrometheusGraph, PrometheusGraphLink } from './prometheus-graph';\nimport { barTheme } from './themes';\nimport { humanizeNumber, Humanize } from '../utils';\nimport { DataPoint } from '.';\nimport { getInstantVectorStats } from './utils';\nimport { GraphEmpty } from './graph-empty';\n\nconst DEFAULT_BAR_WIDTH = 10;\nconst PADDING_RATIO = 1 / 3;\n\nexport const BarChart: React.FC<BarChartProps> = ({\n  barSpacing = 15,\n  barWidth = DEFAULT_BAR_WIDTH,\n  data = [],\n  LabelComponent,\n  loading = false,\n  noLink = false,\n  query,\n  theme = getCustomTheme(ChartThemeColor.blue, ChartThemeVariant.light, barTheme),\n  title,\n  titleClassName,\n}) => {\n  const [containerRef, width] = useRefWidth();\n\n  // Max space that horizontal padding should take up. By default, 2/3 of the horizontal space is always available for the actual bar graph.\n  const maxHorizontalPadding = PADDING_RATIO * width;\n\n  const padding = {\n    bottom: barSpacing,\n    left: 0,\n    right: Math.min(100, maxHorizontalPadding),\n    top: 0,\n  };\n\n  return (\n    <PrometheusGraph ref={containerRef} title={title} className={titleClassName}>\n      {data.length ? (\n        <PrometheusGraphLink query={noLink ? undefined : query}>\n          {data.map((datum, index) => (\n            <React.Fragment key={index}>\n              <div className=\"graph-bar__label\">\n                {LabelComponent ? (\n                  <LabelComponent title={datum.x} metric={datum.metric} />\n                ) : (\n                  datum.x\n                )}\n              </div>\n              <div className=\"graph-bar__chart\">\n                <ChartBar\n                  barWidth={barWidth}\n                  data={[datum]}\n                  horizontal\n                  labelComponent={<ChartLabel x={width} />}\n                  theme={theme}\n                  height={barWidth + padding.bottom}\n                  width={width}\n                  domain={{ y: [0, data[0].y] }}\n                  padding={padding}\n                />\n              </div>\n            </React.Fragment>\n          ))}\n        </PrometheusGraphLink>\n      ) : (\n        <GraphEmpty loading={loading} />\n      )}\n    </PrometheusGraph>\n  );\n};\n\nexport const Bar: React.FC<BarProps> = ({\n  barSpacing,\n  barWidth,\n  delay = undefined,\n  humanize = humanizeNumber,\n  LabelComponent,\n  metric,\n  namespace,\n  noLink = false,\n  query,\n  theme,\n  title,\n}) => {\n  const [response, , loading] = usePrometheusPoll({\n    delay,\n    endpoint: PrometheusEndpoint.QUERY,\n    namespace,\n    query,\n  });\n  const data = getInstantVectorStats(response, metric, humanize);\n\n  return (\n    <BarChart\n      barSpacing={barSpacing}\n      barWidth={barWidth}\n      data={data}\n      LabelComponent={LabelComponent}\n      loading={loading}\n      noLink={noLink}\n      query={query}\n      theme={theme}\n      title={title}\n    />\n  );\n};\n\ntype LabelComponentProps = {\n  title: Date | string | number;\n  metric?: { [key: string]: string };\n};\n\ntype BarChartProps = {\n  barSpacing?: number;\n  barWidth?: number;\n  data?: DataPoint[];\n  LabelComponent?: React.ComponentType<LabelComponentProps>;\n  loading?: boolean;\n  noLink?: boolean;\n  query?: string;\n  theme?: any; // TODO figure out the best way to import VictoryThemeDefinition\n  title?: string;\n  titleClassName?: string;\n};\n\ntype BarProps = {\n  barSpacing?: number;\n  barWidth?: number;\n  delay?: number;\n  humanize?: Humanize;\n  LabelComponent?: React.ComponentType<LabelComponentProps>;\n  metric: string;\n  namespace?: string;\n  noLink?: boolean;\n  query: string;\n  theme?: any; // TODO figure out the best way to import VictoryThemeDefinition\n  title?: string;\n  titleClassName: string;\n};\n","export { Bar } from './bar';\nexport { Gauge } from './gauge';\nexport { Area } from './area';\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAYA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAOA;AACA;AAoBA;AAEA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAaA;;;;;;;;;;;;;ACpHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;A","sourceRoot":""}