{"version":3,"file":"container-security-0c88b460e0089a5f2e29.js","sources":["webpack:///./packages/container-security/src/components/image-manifest-vuln.scss?33b6","webpack:///./packages/container-security/src/components/image-manifest-vuln.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport * as classNames from 'classnames';\nimport { Tooltip } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport {\n  MultiListPage,\n  Table,\n  TableRow,\n  TableData,\n  DetailsPage,\n  ListPage,\n  RowFunction,\n} from '@console/internal/components/factory';\nimport { GreenCheckCircleIcon } from '@console/shared/';\nimport { referenceForModel, PodKind, ContainerStatus } from '@console/internal/module/k8s';\nimport { match } from 'react-router';\nimport {\n  ResourceLink,\n  ExternalLink,\n  navFactory,\n  SectionHeading,\n  ResourceSummary,\n  DetailsItem,\n  Firehose,\n  FirehoseResult,\n  Loading,\n  MsgBox,\n} from '@console/internal/components/utils';\nimport { ChartDonut } from '@patternfly/react-charts';\nimport { DefaultList } from '@console/internal/components/default-resource';\nimport { vulnPriority, totalFor, priorityFor } from '../const';\nimport { ImageManifestVuln, Feature, Vulnerability } from '../types';\nimport { ImageManifestVulnModel } from '../models';\nimport { quayURLFor } from './summary';\nimport './image-manifest-vuln.scss';\nimport { ContainerLink } from '@console/internal/components/pod';\n\nconst shortenImage = (img: string) =>\n  img\n    .replace('@sha256', '')\n    .split('/')\n    .slice(1, 3)\n    .join('/');\nconst shortenHash = (hash: string) => hash.slice(7, 18);\n\nexport const ImageVulnerabilityRow: React.FC<ImageVulnerabilityRowProps> = (props) => {\n  return (\n    <div className=\"row\">\n      <div className=\"col-lg-3 col-md-3 col-sm-4 col-xs-6\">\n        <ExternalLink text={props.vulnerability.name} href={props.vulnerability.link} />\n      </div>\n      <div className=\"col-lg-2 col-md-2 col-sm-5 col-xs-6\">\n        <SecurityIcon color={priorityFor(props.vulnerability.severity).color.value} />\n        &nbsp;{props.vulnerability.severity}\n      </div>\n      <div className=\"col-lg-2 col-md-2 col-sm-3 hidden-xs\">{props.packageName}</div>\n      <div className=\"col-lg-2 col-md-2 hidden-sm hidden-xs\">{props.currentVersion}</div>\n      <div className=\"col-lg-3 col-md-3 hidden-sm hidden-xs\">\n        {props.vulnerability.fixedby || '-'}\n      </div>\n    </div>\n  );\n};\n\nexport const ImageVulnerabilitiesTable: React.FC<ImageVulnerabilitiesTableProps> = (props) => {\n  const vulnerabilites = _.sortBy(\n    _.flatten(\n      props.features.map((feature) =>\n        feature.vulnerabilities.map((vulnerability) => ({ feature, vulnerability })),\n      ),\n    ),\n    (v) => priorityFor(v.vulnerability.severity).index,\n  );\n\n  return (\n    <>\n      <SectionHeading text=\"Vulnerabilities\" />\n      <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n        <div className=\"row co-m-table-grid__head\">\n          <div className=\"col-lg-3 col-md-3 col-sm-4 col-xs-6\">Vulnerability</div>\n          <div className=\"col-lg-2 col-md-2 col-sm-5 col-xs-6\">Severity</div>\n          <div className=\"col-lg-2 col-md-2 col-sm-3 hidden-xs\">Package</div>\n          <div className=\"col-lg-2 col-md-2 hidden-sm hidden-xs\">Current Version</div>\n          <div className=\"col-lg-3 col-md-3 hidden-sm hidden-xs\">Fixed in Version</div>\n        </div>\n        <div className=\"co-m-table-grid__body\">\n          {vulnerabilites.map(({ feature, vulnerability }) => (\n            <ImageVulnerabilityRow\n              key={`${feature.name}-${vulnerability.name}`}\n              vulnerability={vulnerability}\n              packageName={feature.name}\n              currentVersion={feature.version}\n            />\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport const ImageManifestVulnDetails: React.FC<ImageManifestVulnDetailsProps> = (props) => {\n  const total = props.obj.spec.features.reduce((sum, f) => sum + f.vulnerabilities.length, 0);\n\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Image Manifest Vuln Details\" />\n        <div style={{ display: 'flex' }}>\n          <div className=\"imagemanifestvuln-details__donut\">\n            <ChartDonut\n              colorScale={vulnPriority.map((priority) => priority.color.value).toArray()}\n              data={vulnPriority\n                .map((priority, key) => ({\n                  label: priority.title,\n                  x: priority.value,\n                  y: totalFor(key)(props.obj),\n                }))\n                .toArray()}\n              title={`${total} total`}\n            />\n          </div>\n          <div className=\"imagemanifestvuln-details__summary\">\n            <h3>Quay Security Scanner has detected {total} vulnerabilities.</h3>\n            <h4>Patches are available for {props.obj.status.fixableCount} vulnerabilities.</h4>\n            <div className=\"imagemanifestvuln-details__summary-list\">\n              {vulnPriority\n                .map((v, k) =>\n                  totalFor(k)(props.obj) > 0 ? (\n                    <span style={{ margin: '5px' }} key={v.index}>\n                      <SecurityIcon color={v.color.value} />\n                      &nbsp;<strong>{totalFor(k)(props.obj)}</strong> {v.title} vulnerabilities.\n                    </span>\n                  ) : null,\n                )\n                .toArray()}\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={props.obj} />\n          </div>\n          <div className=\"col-sm-6\">\n            <dl className=\"co-m-pane__details\">\n              <DetailsItem label=\"Registry\" obj={props.obj} path=\"spec.image\" />\n            </dl>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <ImageVulnerabilitiesTable features={props.obj.spec.features} />\n      </div>\n    </>\n  );\n};\n\nexport const AffectedPods: React.FC<AffectedPodsProps> = (props) => {\n  const affectedPodsFor = (pods: PodKind[]) =>\n    pods.filter((p) =>\n      _.keys(props.obj.status.affectedPods).includes(\n        [p.metadata.namespace, p.metadata.name].join('/'),\n      ),\n    );\n\n  return (\n    <ListPage\n      kind=\"Pod\"\n      namespace={props.obj.metadata.namespace}\n      canCreate={false}\n      showTitle={false}\n      ListComponent={(listProps) => (\n        <DefaultList {...listProps} data={affectedPodsFor(listProps.data)} />\n      )}\n    />\n  );\n};\n\nexport const ImageManifestVulnDetailsPage: React.FC<ImageManifestVulnDetailsPageProps> = (\n  props,\n) => {\n  return (\n    <DetailsPage\n      match={props.match}\n      kindObj={ImageManifestVulnModel}\n      titleFunc={(obj: ImageManifestVuln) =>\n        !_.isEmpty(obj) ? `${shortenImage(obj.spec.image)}@${shortenHash(obj.spec.manifest)}` : null\n      }\n      name={props.match.params.name}\n      namespace={props.match.params.ns}\n      kind={referenceForModel(ImageManifestVulnModel)}\n      menuActions={[]}\n      pages={[\n        navFactory.details(ImageManifestVulnDetails),\n        navFactory.editYaml(),\n        {\n          href: 'pods',\n          name: 'Affected Pods',\n          component: AffectedPods,\n        },\n      ]}\n    />\n  );\n};\n\n// TODO(alecmerdler): Fix classes here to ensure responsiveness\nconst tableColumnClasses = ['', '', '', '', '', ''];\n\nexport const ImageManifestVulnTableRow: RowFunction<ImageManifestVuln> = ({\n  obj,\n  index,\n  key,\n  style,\n}) => {\n  const { name, namespace } = obj.metadata;\n\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={referenceForModel(ImageManifestVulnModel)}\n          name={name}\n          namespace={namespace}\n          displayName={shortenImage(obj.spec.image)}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        {_.get(obj.status, 'highestSeverity') ? (\n          <>\n            <SecurityIcon color={priorityFor(obj.status.highestSeverity).color.value} />\n            &nbsp;{obj.status.highestSeverity}\n          </>\n        ) : (\n          <Loading />\n        )}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        {Object.keys(obj.status.affectedPods).length}\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>{obj.status.fixableCount || 0}</TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ExternalLink text={shortenHash(obj.spec.manifest)} href={quayURLFor(obj)} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const ImageManifestVulnTableHeader = () => [\n  {\n    title: 'Image Name',\n    sortField: 'spec.image',\n    transforms: [sortable],\n    props: { className: tableColumnClasses[0] },\n  },\n  {\n    title: 'Namespace',\n    sortField: 'metadata.namespace',\n    transforms: [sortable],\n    props: { className: tableColumnClasses[1] },\n  },\n  {\n    title: 'Highest Severity',\n    sortField: 'status.highestSeverity',\n    transforms: [sortable],\n    props: { className: tableColumnClasses[2] },\n  },\n  {\n    title: 'Affected Pods',\n    props: { className: tableColumnClasses[3] },\n  },\n  {\n    title: 'Fixable',\n    sortField: 'status.fixableCount',\n    transforms: [sortable],\n    props: { className: tableColumnClasses[4] },\n  },\n  {\n    title: 'Manifest',\n    props: { className: tableColumnClasses[5] },\n  },\n];\n\nexport const ImageManifestVulnList: React.FC<ImageManifestVulnListProps> = (props) => {\n  const EmptyMsg = () => <MsgBox title=\"No Image Vulnerabilities Found\" detail=\"\" />;\n\n  return (\n    <Table\n      {...props}\n      aria-label=\"Image Manifest Vulnerabilities\"\n      Header={ImageManifestVulnTableHeader}\n      Row={ImageManifestVulnTableRow}\n      EmptyMsg={EmptyMsg}\n      virtualize\n    />\n  );\n};\n\nexport const ImageManifestVulnPage: React.FC<ImageManifestVulnPageProps> = (props) => {\n  const namespace = props.match.params?.ns;\n\n  return (\n    <MultiListPage\n      {...props}\n      namespace={namespace}\n      resources={[\n        {\n          kind: referenceForModel(ImageManifestVulnModel),\n          namespace,\n          namespaced: true,\n          prop: 'imageManifestVuln',\n        },\n      ]}\n      flatten={(resources) => _.get(resources.imageManifestVuln, 'data', [])}\n      title=\"Image Manifest Vulnerabilities\"\n      canCreate={false}\n      showTitle\n      hideToolbar\n      ListComponent={ImageManifestVulnList}\n    />\n  );\n};\n\nconst podKey = (pod: PodKind) => [pod.metadata.namespace, pod.metadata.name].join('/');\n\nexport const ContainerVulnerabilities: React.FC<ContainerVulnerabilitiesProps> = (props) => {\n  const vulnFor = (containerStatus: ContainerStatus) =>\n    _.get(props.imageManifestVuln, 'data', []).find(\n      (imv) =>\n        imv.status.affectedPods[podKey(props.pod)].some(\n          (id) => containerStatus.containerID === id,\n        ) || containerStatus.imageID.includes(imv.spec.manifest),\n    );\n\n  const withVuln = (\n    vuln: ImageManifestVuln,\n    exists: (vuln: ImageManifestVuln) => JSX.Element,\n    absent: () => JSX.Element,\n  ) => (vuln !== undefined ? exists(vuln) : absent());\n\n  return (\n    <div className=\"co-m-pane__body\">\n      <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n        <div className=\"row co-m-table-grid__head\">\n          <div className=\"col-md-3\">Container</div>\n          <div className=\"col-md-4\">Image</div>\n          <div className=\"col-md-2\">\n            <Tooltip content=\"Results provided by Quay security scanner\">\n              <span>Security Scan</span>\n            </Tooltip>\n          </div>\n        </div>\n        <div className=\"co-m-table-grid__body\">\n          {props.pod.status.containerStatuses.map((status) => (\n            <div className=\"row\" key={status.containerID}>\n              <div className=\"col-md-3\">\n                <ContainerLink pod={props.pod} name={status.name} />\n              </div>\n              <div className=\"col-md-4 co-truncate co-nowrap co-select-to-copy\">\n                {props.pod.spec.containers.find((c) => c.name === status.name).image}\n              </div>\n              <div className=\"col-md-3\">\n                {props.loaded ? (\n                  withVuln(\n                    vulnFor(status),\n                    (vuln) => (\n                      <span style={{ display: 'flex', alignItems: 'center' }}>\n                        <SecurityIcon\n                          color={priorityFor(_.get(vuln.status, 'highestSeverity')).color.value}\n                        />\n                        &nbsp;\n                        <ResourceLink\n                          kind={referenceForModel(ImageManifestVulnModel)}\n                          name={vuln.metadata.name}\n                          namespace={props.pod.metadata.namespace}\n                          title={vuln.metadata.uid}\n                          displayName={`${totalFor(\n                            vulnPriority.findKey(\n                              ({ title }) => _.get(vuln.status, 'highestSeverity') === title,\n                            ),\n                          )(vuln)} ${vuln.status.highestSeverity}`}\n                          hideIcon\n                        />\n                      </span>\n                    ),\n                    () => (\n                      <span>\n                        <GreenCheckCircleIcon />\n                        &nbsp;No vulnerabilities found\n                      </span>\n                    ),\n                  )\n                ) : (\n                  <div>\n                    <Loading />\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const ImageManifestVulnPodTab: React.FC<ImageManifestVulnPodTabProps> = (props) => {\n  return (\n    <Firehose\n      resources={[\n        {\n          isList: true,\n          kind: referenceForModel(ImageManifestVulnModel),\n          namespace: props.match.params.ns,\n          selector: {\n            matchLabels: { [podKey(props.obj)]: 'true' },\n          },\n          prop: 'imageManifestVuln',\n        },\n      ]}\n    >\n      {/* FIXME(alecmerdler): Hack because `Firehose` injects props without TypeScript knowing about it */}\n      <ContainerVulnerabilities pod={props.obj} {...(props as any)} />\n    </Firehose>\n  );\n};\n\nexport type ContainerVulnerabilitiesProps = {\n  loaded: boolean;\n  pod: PodKind;\n  imageManifestVuln: FirehoseResult<ImageManifestVuln[]>;\n};\n\nexport type ImageManifestVulnDetailsPageProps = {\n  match: match<{ ns: string; name: string }>;\n};\n\nexport type ImageManifestVulnPageProps = {\n  namespace?: string;\n  match?: match<{ ns?: string }>;\n  selector?: { [key: string]: string };\n};\n\nexport type ImageManifestVulnListProps = {\n  data: ImageManifestVuln[];\n};\n\nexport type ImageManifestVulnDetailsProps = {\n  obj: ImageManifestVuln;\n};\n\nexport type ImageManifestVulnListTableHeaderProps = {};\n\nexport type AffectedPodsProps = {\n  obj: ImageManifestVuln;\n};\n\nexport type ImageVulnerabilitiesTableProps = {\n  features: Feature[];\n};\n\nexport type ImageVulnerabilityRowProps = {\n  vulnerability: Vulnerability;\n  currentVersion: string;\n  packageName: string;\n};\n\nexport type ImageManifestVulnPodTabProps = {\n  match: match<{ ns: string; name: string }>;\n  obj: PodKind;\n};\n\nImageManifestVulnPage.displayName = 'ImageManifestVulnPage';\nImageManifestVulnList.displayName = 'ImageManifestVulnList';\nAffectedPods.displayName = 'AffectedPods';\nImageVulnerabilitiesTable.displayName = 'ImageVulnerabilitiesTable';\nImageVulnerabilityRow.displayName = 'ImageVulnerabilityRow';\nImageManifestVulnPodTab.displayName = 'ImageManifestVulnPodTab';\nContainerVulnerabilities.displayName = 'ContainerVulnerabilities';\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AAEA;AAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;AACA;AAEA;AACA;AACA;AAKA;AAEA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAaA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;;AAAA;AAAA;AACA;;AAAA;AAAA;AACA;AAEA;AAGA;;AACA;;AAAA;AACA;AAGA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAIA;AAEA;AACA;AAOA;AAWA;AAEA;AAGA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AAMA;AAEA;AAEA;AACA;AAOA;AACA;AAEA;AAGA;;AACA;AAMA;AAGA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAUA;AAEA;;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAEA;AAEA;AACA;AAQA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;AAEA;AAGA;AAMA;;AAIA;AAgBA;AAEA;AAKA;AAUA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}