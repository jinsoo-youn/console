{"version":3,"file":"prometheus-4984f37ed044fb24663e.js","sources":["webpack:///./public/components/prometheus.jsx"],"sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { ListPage, Table, TableRow, TableData } from './factory';\nimport { Kebab, LabelList, ResourceKebab, ResourceLink, Selector } from './utils';\nimport { PrometheusModel } from '../models';\nimport { referenceForModel } from '../module/k8s';\n\nconst { Edit, Delete, ModifyCount } = Kebab.factory;\nconst menuActions = [ModifyCount, Edit, Delete];\n\nconst tableColumnClasses = [\n  classNames('col-lg-3', 'col-md-3', 'col-sm-4', 'col-xs-6'),\n  classNames('col-lg-3', 'col-md-3', 'col-sm-4', 'col-xs-6'),\n  classNames('col-lg-3', 'col-md-4', 'col-sm-4', 'hidden-xs'),\n  classNames('col-lg-1', 'col-md-2', 'hidden-sm', 'hidden-xs'),\n  classNames('col-lg-2', 'hidden-md', 'hidden-sm', 'hidden-xs'),\n  Kebab.columnClass,\n];\n\nconst PrometheusTableRow = ({ obj: instance, index, key, style }) => {\n  const { metadata, spec } = instance;\n  return (\n    <TableRow id={instance.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={referenceForModel(PrometheusModel)}\n          name={metadata.name}\n          namespace={metadata.namespace}\n          title={metadata.uid}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        <ResourceLink kind=\"Namespace\" name={metadata.namespace} title={metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <LabelList kind={PrometheusModel.kind} labels={metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>{spec.version}</TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Selector\n          selector={spec.serviceMonitorSelector}\n          kind=\"ServiceMonitor\"\n          namespace={metadata.namespace}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab\n          actions={menuActions}\n          kind={referenceForModel(PrometheusModel)}\n          resource={instance}\n        />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst PrometheusTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Labels',\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Version',\n      sortField: 'spec.version',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Service Monitor Selector',\n      sortField: 'spec.serviceMonitorSelector',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nPrometheusTableHeader.displayName = 'PrometheusTableHeader';\n\nconst PrometheusInstancesList = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Promethesuses\"\n    Header={PrometheusTableHeader}\n    Row={PrometheusTableRow}\n    virtualize\n  />\n);\n\nexport const PrometheusInstancesPage = (props) => (\n  <ListPage\n    {...props}\n    ListComponent={PrometheusInstancesList}\n    canCreate={true}\n    kind={referenceForModel(PrometheusModel)}\n  />\n);\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;;;;;A","sourceRoot":""}