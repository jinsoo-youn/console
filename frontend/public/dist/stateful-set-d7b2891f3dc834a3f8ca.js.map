{"version":3,"file":"stateful-set-d7b2891f3dc834a3f8ca.js","sources":["webpack:///./packages/console-shared/src/components/pod/PodRingSet.tsx","webpack:///./public/components/overview/resource-overview-details.tsx","webpack:///./public/components/overview/stateful-set-overview.tsx","webpack:///./public/components/stateful-set.tsx","webpack:///./public/components/workload-table.tsx"],"sourcesContent":["import * as React from 'react';\nimport { K8sResourceKind, K8sKind } from '@console/internal/module/k8s';\nimport { Split, SplitItem, Bullseye } from '@patternfly/react-core';\nimport { LongArrowAltRightIcon } from '@patternfly/react-icons';\nimport { global_Color_200 as color200 } from '@patternfly/react-tokens';\nimport { PodRCData } from '../../types';\nimport { getPodData } from '../../utils';\nimport PodRing from './PodRing';\n\ninterface PodRingSetProps {\n  podData: PodRCData;\n  obj: K8sResourceKind;\n  resourceKind: K8sKind;\n  path: string;\n  impersonate?: string;\n}\n\nconst PodRingSet: React.FC<PodRingSetProps> = ({ podData, resourceKind, obj, path }) => {\n  const { inProgressDeploymentData, completedDeploymentData } = getPodData(\n    obj,\n    podData.pods,\n    podData.current,\n    podData.previous,\n    podData.isRollingOut,\n  );\n  const current = podData.current && podData.current.obj;\n  const previous = podData.previous && podData.previous.obj;\n  const progressRC = inProgressDeploymentData && current;\n  const completedRC = !!inProgressDeploymentData && completedDeploymentData ? previous : current;\n  return (\n    <Split gutter=\"lg\">\n      <SplitItem>\n        <PodRing\n          key={inProgressDeploymentData ? 'deploy' : 'notDeploy'}\n          pods={completedDeploymentData}\n          rc={completedRC}\n          resourceKind={resourceKind}\n          obj={obj}\n          path={path}\n          enableScaling={!podData.isRollingOut}\n        />\n      </SplitItem>\n      {inProgressDeploymentData && (\n        <>\n          <SplitItem>\n            <Bullseye>\n              <LongArrowAltRightIcon size=\"xl\" color={color200.value} />\n            </Bullseye>\n          </SplitItem>\n          <SplitItem>\n            <PodRing\n              pods={inProgressDeploymentData}\n              rc={progressRC}\n              resourceKind={resourceKind}\n              obj={obj}\n              path={path}\n              enableScaling={false}\n            />\n          </SplitItem>\n        </>\n      )}\n    </Split>\n  );\n};\n\nexport default PodRingSet;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { connect } from 'react-redux';\n\nimport * as UIActions from '../../actions/ui';\nimport { K8sKind } from '../../module/k8s';\nimport { AsyncComponent, KebabAction, ResourceOverviewHeading, SimpleTabNav } from '../utils';\nimport * as plugins from '../../plugins';\nimport { OverviewItem } from '@console/shared';\n\nconst stateToProps = ({ UI }): PropsFromState => ({\n  selectedDetailsTab: UI.getIn(['overview', 'selectedDetailsTab']),\n});\n\nconst dispatchToProps = (dispatch): PropsFromDispatch => ({\n  onClickTab: (name) => dispatch(UIActions.selectOverviewDetailsTab(name)),\n});\n\nconst getResourceTabComp = (t) => (props) => (\n  <AsyncComponent {...props} loader={t.properties.loader} />\n);\n\nconst getPluginTabResources = (item, tabs): ResourceOverviewDetailsProps['tabs'] => {\n  let tabEntry = plugins.registry\n    .getOverviewResourceTabs()\n    .filter((tab) => item[tab.properties.key]);\n  const overridenTabs = tabs.map((tab) => {\n    const tabEntryConfig = tabEntry.find((t) => tab.name === t.properties.name);\n    if (tabEntryConfig) {\n      tabEntry = tabEntry.filter((entry) => tab.name !== entry.properties.name);\n      return {\n        name: tab.name,\n        component: getResourceTabComp(tabEntryConfig),\n      };\n    }\n    return tab;\n  });\n\n  /** Add new tabs from plugin */\n  const newTabs = tabEntry.map((entry) => {\n    return {\n      name: entry.properties.name,\n      component: getResourceTabComp(entry),\n    };\n  });\n\n  return overridenTabs.concat(newTabs);\n};\n\nexport const ResourceOverviewDetails = connect<PropsFromState, PropsFromDispatch, OwnProps>(\n  stateToProps,\n  dispatchToProps,\n)(\n  ({\n    kindObj,\n    item,\n    menuActions,\n    onClickTab,\n    selectedDetailsTab,\n    tabs,\n  }: ResourceOverviewDetailsProps) => {\n    const keys = Object.keys(item);\n    const keysRef = React.useRef(keys);\n    const tabsRef = React.useRef(tabs);\n    const pluginTabsRef = React.useRef<React.ComponentProps<typeof SimpleTabNav>['tabs']>();\n    if (\n      !pluginTabsRef.current ||\n      !_.isEqual(keys, keysRef.current) ||\n      !_.isEqual(tabs, tabsRef.current)\n    ) {\n      keysRef.current = keys;\n      tabsRef.current = tabs;\n      pluginTabsRef.current = getPluginTabResources(item, tabs);\n    }\n    return (\n      <div className=\"overview__sidebar-pane resource-overview\">\n        <ResourceOverviewHeading actions={menuActions} kindObj={kindObj} resource={item.obj} />\n        <SimpleTabNav\n          onClickTab={onClickTab}\n          selectedTab={selectedDetailsTab}\n          tabProps={{ item }}\n          tabs={pluginTabsRef.current}\n          additionalClassNames=\"co-m-horizontal-nav__menu--within-sidebar co-m-horizontal-nav__menu--within-overview-sidebar\"\n        />\n      </div>\n    );\n  },\n);\n\ntype PropsFromState = {\n  selectedDetailsTab: any;\n};\n\ntype PropsFromDispatch = {\n  onClickTab: (name: string) => void;\n};\n\ntype OwnProps = {\n  item: OverviewItem;\n  kindObj: K8sKind;\n  menuActions: KebabAction[];\n  tabs: {\n    name: string;\n    component: any;\n  }[];\n  isOperatorBacked?: boolean;\n};\n\nexport type ResourceOverviewDetailsProps = PropsFromState & PropsFromDispatch & OwnProps;\n","import * as React from 'react';\n\nimport { StatefulSetModel } from '../../models';\nimport { menuActions } from '../stateful-set';\nimport { KebabAction, ResourceSummary } from '../utils';\nimport PodRingSet from '@console/shared/src/components/pod/PodRingSet';\n\nimport { OverviewDetailsResourcesTab } from './resource-overview-page';\nimport { ResourceOverviewDetails } from './resource-overview-details';\nimport { OverviewItem } from '@console/shared';\n\nconst StatefulSetOverviewDetails: React.SFC<StatefulSetOverviewDetailsProps> = ({\n  item: { obj: ss, pods: pods, current, previous, isRollingOut },\n}) => (\n  <div className=\"overview__sidebar-pane-body resource-overview__body\">\n    <div className=\"resource-overview__pod-counts\">\n      <PodRingSet\n        key={ss.metadata.uid}\n        podData={{\n          pods,\n          current,\n          previous,\n          isRollingOut,\n        }}\n        obj={ss}\n        resourceKind={StatefulSetModel}\n        path=\"/spec/replicas\"\n      />\n    </div>\n    <ResourceSummary resource={ss} showPodSelector showNodeSelector showTolerations />\n  </div>\n);\n\nconst tabs = [\n  {\n    name: 'Details',\n    component: StatefulSetOverviewDetails,\n  },\n  {\n    name: 'Resources',\n    component: OverviewDetailsResourcesTab,\n  },\n];\n\nexport const StatefulSetOverview: React.SFC<StatefulSetOverviewProps> = ({\n  item,\n  customActions,\n}) => (\n  <ResourceOverviewDetails\n    item={item}\n    kindObj={StatefulSetModel}\n    menuActions={customActions ? [...customActions, ...menuActions] : menuActions}\n    tabs={tabs}\n  />\n);\n\ntype StatefulSetOverviewDetailsProps = {\n  item: OverviewItem;\n};\n\ntype StatefulSetOverviewProps = {\n  item: OverviewItem;\n  customActions?: KebabAction[];\n};\n","import * as React from 'react';\n\nimport PodRingSet from '@console/shared/src/components/pod/PodRingSet';\nimport { PodRingController } from '@console/shared';\nimport { AddHealthChecks, EditHealthChecks } from '@console/app/src/actions/modify-health-checks';\nimport { K8sResourceKind } from '../module/k8s';\nimport { ResourceEventStream } from './events';\nimport { DetailsPage, ListPage, Table, RowFunction } from './factory';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport { WorkloadTableRow, WorkloadTableHeader } from './workload-table';\n\nimport { AsyncComponent, Kebab, KebabAction, ContainerTable, ResourceSummary, SectionHeading, navFactory, LoadingInline, PodsComponent } from './utils';\nimport { VolumesTable } from './volumes-table';\nimport { StatefulSetModel } from '../models';\nimport { ResourceLabel } from '../models/hypercloud/resource-plural';\n\nconst { AddStorage, common, ModifyCount } = Kebab.factory;\nexport const menuActions: KebabAction[] = [AddHealthChecks, ModifyCount, AddStorage, ...Kebab.getExtensionsActionsForKind(StatefulSetModel), EditHealthChecks, ...common];\n\nconst kind = 'StatefulSet';\n\nconst StatefulSetTableRow: RowFunction<K8sResourceKind> = ({ obj, index, key, style }) => {\n  return <WorkloadTableRow obj={obj} index={index} rowKey={key} style={style} menuActions={menuActions} kind={kind} />;\n};\n\nconst StatefulSetTableHeader = (t?: TFunction) => {\n  return WorkloadTableHeader(t);\n};\nStatefulSetTableHeader.displayName = 'StatefulSetTableHeader';\n\nconst StatefulSetDetails: React.FC<StatefulSetDetailsProps> = ({ obj: ss }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', {0: ResourceLabel(ss, t)})} />\n        <PodRingController\n          namespace={ss.metadata.namespace}\n          kind={ss.kind}\n          render={d => {\n            return d.loaded ? <PodRingSet key={ss.metadata.uid} podData={d.data[ss.metadata.uid]} obj={ss} resourceKind={StatefulSetModel} path=\"/spec/replicas\" /> : <LoadingInline />;\n          }}\n        />\n        <ResourceSummary resource={ss} showPodSelector showNodeSelector showTolerations />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_1')} />\n        <ContainerTable containers={ss.spec.template.spec.containers} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <VolumesTable resource={ss} heading={t('COMMON:MSG_DETAILS_TABDETAILS_VOLUMES_TABLEHEADER_1')} />\n      </div>\n    </>\n  );\n};\n\nconst EnvironmentPage: React.FC<EnvironmentPageProps> = props => <AsyncComponent loader={() => import('./environment.jsx').then(c => c.EnvironmentPage)} {...props} />;\n\nconst envPath = ['spec', 'template', 'spec', 'containers'];\nconst EnvironmentTab: React.FC<EnvironmentTabProps> = props => <EnvironmentPage obj={props.obj} rawEnvData={props.obj.spec.template.spec} envPath={envPath} readOnly={false} />;\n\nexport const StatefulSetsList: React.FC = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Stateful Sets\" Header={StatefulSetTableHeader.bind(null, t)} Row={StatefulSetTableRow} virtualize />;\n};\nexport const StatefulSetsPage: React.FC<StatefulSetsPageProps> = props => {\n  const { t } = useTranslation();\n  return <ListPage {...props} title={t('COMMON:MSG_LNB_MENU_25')} createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: t('COMMON:MSG_LNB_MENU_25') })} ListComponent={StatefulSetsList} kind={kind} canCreate={true} />;\n};\n\nconst StatefulSetPods: React.FC<StatefulSetPodsProps> = props => <PodsComponent {...props} customData={{ showNodes: true }} />;\n\nconst pages = [navFactory.details(StatefulSetDetails), navFactory.editYaml(), navFactory.pods(StatefulSetPods), navFactory.envEditor(EnvironmentTab), navFactory.events(ResourceEventStream)];\n\nexport const StatefulSetsDetailsPage: React.FC<StatefulSetsDetailsPageProps> = props => <DetailsPage {...props} kind={kind} menuActions={menuActions} pages={pages} />;\n\ntype EnvironmentPageProps = {\n  obj: K8sResourceKind;\n  rawEnvData: any;\n  envPath: string[];\n  readOnly: boolean;\n};\n\ntype EnvironmentTabProps = {\n  obj: K8sResourceKind;\n};\n\ntype StatefulSetDetailsProps = {\n  obj: K8sResourceKind;\n};\n\ntype StatefulSetsPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\ntype StatefulSetPodsProps = {\n  obj: K8sResourceKind;\n};\n\ntype StatefulSetsDetailsPageProps = {\n  match: any;\n};\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { Link } from 'react-router-dom';\nimport { K8sResourceKind } from '../module/k8s';\nimport { TableRow, TableData } from './factory';\nimport { TFunction } from 'i18next';\nimport { Kebab, KebabAction, LabelList, ResourceKebab, ResourceLink, resourcePath, Selector } from './utils';\n\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), Kebab.columnClass];\n\nexport const WorkloadTableRow: React.FC<WorkloadTableRowProps> = ({ obj, index, rowKey, style, kind, menuActions }) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={rowKey} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={obj.metadata.name} namespace={obj.metadata.namespace} title={obj.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} title={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Link to={`${resourcePath(kind, obj.metadata.name, obj.metadata.namespace)}/pods`} title=\"pods\">\n          {obj.status.replicas || 0} of {obj.spec.replicas} pods\n        </Link>\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <LabelList kind={kind} labels={obj.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Selector selector={obj.spec.selector} namespace={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\nWorkloadTableRow.displayName = 'WorkloadTableRow';\ntype WorkloadTableRowProps = {\n  obj: K8sResourceKind;\n  index: number;\n  rowKey: string;\n  style: object;\n  kind: string;\n  menuActions: KebabAction[];\n};\n\nexport const WorkloadTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_3'),\n      sortFunc: 'numReplicas',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_15'),\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_16'),\n      sortField: 'spec.selector',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nWorkloadTableHeader.displayName = 'WorkloadTableHeader';\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAUA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AAUA;AAEA;AACA;AACA;AAGA;AACA;AAaA;AAEA;;;;;;;;;;;;;ACjEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAYA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;;;;;;;;;;;;;ACtFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AAMA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;;;;;;;;;;;;;AC3EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}