{"version":3,"file":"pipeline-overview-list-e9d51d9c63861d0b2090.js","sources":["webpack:///./packages/dev-console/src/components/pipelineruns/triggered-by/ResourceKebabWithUserLabel.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/triggered-by/hooks.ts","webpack:///./packages/dev-console/src/components/pipelineruns/triggered-by/index.ts","webpack:///./packages/dev-console/src/components/pipelines/pipeline-overview/PipelineOverview.tsx","webpack:///./packages/dev-console/src/components/pipelines/pipeline-overview/PipelineRunItem.tsx","webpack:///./packages/dev-console/src/components/pipelines/pipeline-overview/TriggerLastRunButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { KebabAction, ResourceKebab } from '@console/internal/components/utils';\nimport { useMenuActionsWithUserLabel } from './hooks';\n\nconst ResourceKebabWithUserLabel: React.FC<React.ComponentProps<typeof ResourceKebab>> = ({\n  actions,\n  ...otherProps\n}) => {\n  const augmentedMenuActions: KebabAction[] = useMenuActionsWithUserLabel(actions);\n\n  return <ResourceKebab {...otherProps} actions={augmentedMenuActions} />;\n};\n\nexport default ResourceKebabWithUserLabel;\n","import { merge } from 'lodash';\n// FIXME react-redux types are 6.x while react-redux is 7.x\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport { useSelector } from 'react-redux';\nimport { KebabAction } from '@console/internal/components/utils';\nimport { K8sResourceCommon } from '@console/internal/module/k8s';\nimport { PipelineRun } from '../../../utils/pipeline-augment';\nimport { StartedByLabel } from '../../pipelines/const';\n\ntype LabelMap = { [labelKey: string]: string };\n\nconst mergeLabelsWithResource = (labels: LabelMap, resource: K8sResourceCommon) => {\n  return merge({}, resource, { metadata: { labels } });\n};\n\nexport const useUserLabelForManualStart = (): LabelMap => {\n  const user = useSelector((state) => state.UI.get('user'));\n\n  return {\n    // kube:admin is an invalid k8s label value\n    [StartedByLabel.user]: user.metadata.name.replace(/:/, ''),\n  };\n};\n\nexport const usePipelineRunWithUserLabel = (plr: PipelineRun): PipelineRun => {\n  const labels = useUserLabelForManualStart();\n\n  return plr && mergeLabelsWithResource(labels, plr);\n};\n\nexport const useMenuActionsWithUserLabel = (menuActions: KebabAction[]): KebabAction[] => {\n  const labels = useUserLabelForManualStart();\n\n  return menuActions.map((kebabAction) => {\n    return (kind, resource, ...rest) =>\n      kebabAction(kind, mergeLabelsWithResource(labels, resource), ...rest);\n  });\n};\n","export * from './hooks';\nexport { default as ResourceKebabWithUserLabel } from './ResourceKebabWithUserLabel';\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport {\n  SidebarSectionHeading,\n  ResourceLink,\n  resourcePath,\n} from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { PipelineRunModel, PipelineModel } from '@console/dev-console/src/models';\nimport { TopologyOverviewItem } from '../../topology/topology-types';\nimport TriggerLastRunButton from './TriggerLastRunButton';\nimport PipelineRunItem from './PipelineRunItem';\n\nconst MAX_VISIBLE = 3;\n\ntype PipelinesOverviewProps = {\n  item: TopologyOverviewItem;\n};\n\nconst PipelinesOverview: React.FC<PipelinesOverviewProps> = ({\n  item: {\n    pipelines: [pipeline],\n    pipelineRuns,\n  },\n}) => {\n  const {\n    metadata: { name, namespace },\n  } = pipeline;\n  return (\n    <>\n      <SidebarSectionHeading text={PipelineRunModel.labelPlural}>\n        {pipelineRuns.length > MAX_VISIBLE && (\n          <Link\n            className=\"sidebar__section-view-all\"\n            to={`${resourcePath(referenceForModel(PipelineModel), name, namespace)}/Runs`}\n          >\n            {`View all (${pipelineRuns.length})`}\n          </Link>\n        )}\n      </SidebarSectionHeading>\n      <ul className=\"list-group\">\n        <li className=\"list-group-item pipeline-overview\">\n          <Flex breakpointMods={[{ modifier: 'justify-content-space-between' }] as any}>\n            <FlexItem>\n              <ResourceLink\n                inline\n                kind={referenceForModel(PipelineModel)}\n                name={name}\n                namespace={namespace}\n              />\n            </FlexItem>\n            <FlexItem>\n              <TriggerLastRunButton pipelineRuns={pipelineRuns} namespace={namespace} />\n            </FlexItem>\n          </Flex>\n        </li>\n        {_.take(pipelineRuns, MAX_VISIBLE).map((pr) => (\n          <PipelineRunItem key={pr.metadata.uid} pipelineRun={pr} />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default PipelinesOverview;\n","import * as React from 'react';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { resourcePath } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { Status } from '@console/shared';\nimport { fromNow } from '@console/internal/components/utils/datetime';\nimport { pipelineRunStatus } from '../../../utils/pipeline-filter-reducer';\nimport { PipelineRunModel } from '../../../models';\nimport { PipelineRun } from '../../../utils/pipeline-augment';\n\ntype PipelineRunItemProps = {\n  pipelineRun: PipelineRun;\n};\n\nconst PipelineRunItem: React.FC<PipelineRunItemProps> = ({ pipelineRun }) => {\n  const {\n    metadata: { name, namespace, creationTimestamp },\n    status,\n  } = pipelineRun;\n  const path = resourcePath(referenceForModel(PipelineRunModel), name, namespace);\n  const lastUpdated = status\n    ? status.completionTime || status.startTime || creationTimestamp\n    : creationTimestamp;\n  return (\n    <li className=\"list-group-item\">\n      <Grid gutter=\"md\">\n        <GridItem span={6}>\n          <Link to={`${path}`}>{name}</Link>\n          {lastUpdated && <span className=\"text-muted\">&nbsp;({fromNow(lastUpdated)})</span>}\n        </GridItem>\n        <GridItem span={3}>\n          <Status status={pipelineRunStatus(pipelineRun) || 'Pending'} />\n        </GridItem>\n        <GridItem span={3} className=\"text-right\">\n          <Link to={`${path}/logs`}>View logs</Link>\n        </GridItem>\n      </Grid>\n    </li>\n  );\n};\n\nexport default PipelineRunItem;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\nimport { impersonateStateToProps } from '@console/internal/reducers/ui';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { AccessReviewResourceAttributes } from '@console/internal/module/k8s';\nimport { rerunPipelineAndStay } from '../../../utils/pipeline-actions';\nimport { PipelineRunModel } from '../../../models';\nimport { usePipelineRunWithUserLabel } from '../../pipelineruns/triggered-by';\nimport { getLatestRun, PipelineRun } from '../../../utils/pipeline-augment';\n\ntype TriggerLastRunButtonProps = {\n  pipelineRuns: PipelineRun[];\n  namespace: string;\n  impersonate?;\n};\n\nconst TriggerLastRunButton: React.FC<TriggerLastRunButtonProps> = ({\n  pipelineRuns,\n  namespace,\n  impersonate,\n}) => {\n  const latestRun = usePipelineRunWithUserLabel(\n    getLatestRun({ data: pipelineRuns }, 'startTimestamp'),\n  );\n  const { label, callback, accessReview: utilityAccessReview } = rerunPipelineAndStay(\n    PipelineRunModel,\n    latestRun,\n  );\n  const defaultAccessReview: AccessReviewResourceAttributes = {\n    group: PipelineRunModel.apiGroup,\n    resource: PipelineRunModel.plural,\n    namespace,\n    verb: 'create',\n  };\n  const accessReview = _.isEmpty(utilityAccessReview) ? defaultAccessReview : utilityAccessReview;\n  const isAllowed = useAccessReview(accessReview, impersonate);\n  return (\n    isAllowed && (\n      <Button\n        variant=\"secondary\"\n        onClick={callback}\n        isDisabled={pipelineRuns.length === 0 && !callback}\n      >\n        {label}\n      </Button>\n    )\n  );\n};\n\nexport default connect(impersonateStateToProps)(TriggerLastRunButton);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAAA;AAIA;AAEA;AACA;AAEA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AAMA;AAMA;AAGA;AAEA;AAUA;AACA;AACA;AACA;AACA;AAOA;AACA;AAIA;AAMA;AAEA;;;;;;;;;;;;;AClEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAKA;AAEA;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AAKA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAEA;;;;;A","sourceRoot":""}