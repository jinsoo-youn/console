{"version":3,"file":"pipelinerun-page-ccd873e630f5a2362514.js","sources":["webpack:///./packages/dev-console/src/components/charts/HorizontalStackedBars.scss?1886","webpack:///./packages/dev-console/src/components/charts/HorizontalStackedBars.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/PipelineRunsPage.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/PipelineRunsResourceList.tsx","webpack:///./packages/dev-console/src/components/projects/ProjectListPage.scss?762c","webpack:///./packages/dev-console/src/components/projects/ProjectListPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport classNames from 'classnames';\nimport './HorizontalStackedBars.scss';\n\nexport type StackedValue = {\n  color: string;\n  name: string;\n  size: number;\n};\n\nexport type HorizontalStackedBarsProps = {\n  barGap?: number;\n  height?: number | string;\n  inline?: boolean;\n  values: StackedValue[];\n  width?: number | string;\n};\n\nconst HorizontalStackedBars: React.FC<HorizontalStackedBarsProps> = ({\n  barGap,\n  height,\n  inline,\n  values,\n  width,\n}) => {\n  return (\n    <div\n      className={classNames('odc-horizontal-stacked-bars', { 'is-inline': inline })}\n      style={{ height, width, ['--bar-gap' as any]: barGap && `${barGap}px` }}\n    >\n      <div className=\"odc-horizontal-stacked-bars__bars\">\n        {values.map(({ color, name, size }) => (\n          <div\n            key={name}\n            className=\"odc-horizontal-stacked-bars__data-bar\"\n            style={{\n              background: color,\n              flexGrow: size,\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default HorizontalStackedBars;\n","import * as React from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport { getBadgeFromType } from '@console/shared';\nimport { PipelineRunModel } from '../../models';\nimport ProjectListPage from '../projects/ProjectListPage';\nimport PipelineRunsResourceList from './PipelineRunsResourceList';\n\ntype PipelineRunsPageProps = RouteComponentProps<{ ns: string }>;\n\nconst PipelineRunsPage: React.FC<PipelineRunsPageProps> = (props) => {\n  const {\n    match: {\n      params: { ns: namespace },\n    },\n  } = props;\n  return namespace ? (\n    <div>\n      <PipelineRunsResourceList {...props} namespace={namespace} />\n    </div>\n  ) : (\n    <ProjectListPage\n      title={PipelineRunModel.labelPlural}\n      badge={getBadgeFromType(PipelineRunModel.badge)}\n    >\n      Select a project to view the list of {PipelineRunModel.labelPlural}\n    </ProjectListPage>\n  );\n};\n\nexport default PipelineRunsPage;\n","import * as React from 'react';\nimport { getBadgeFromType } from '@console/shared';\nimport { ListPage } from '@console/internal/components/factory';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { PipelineRunModel } from '../../models';\nimport { runFilters } from '../pipelines/detail-page-tabs/PipelineRuns';\nimport PipelineRunsList from './list-page/PipelineRunList';\n\nconst PipelineRunsResourceList: React.FC<Omit<\n  React.ComponentProps<typeof ListPage>,\n  'canCreate' | 'kind' | 'ListComponent' | 'rowFilters'\n>> = (props) => {\n  return (\n    <ListPage\n      {...props}\n      canCreate={false}\n      kind={referenceForModel(PipelineRunModel)}\n      ListComponent={PipelineRunsList}\n      rowFilters={runFilters}\n      badge={getBadgeFromType(PipelineRunModel.badge)}\n    />\n  );\n};\n\nexport default PipelineRunsResourceList;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { ListPage } from '@console/internal/components/factory';\nimport { ProjectsTable } from '@console/internal/components/namespace';\nimport { PageHeading } from '@console/internal/components/utils';\nimport './ProjectListPage.scss';\n\nexport interface ProjectListPageProps {\n  title: string;\n  listComponent?: React.ComponentType<any>;\n  children?: React.ReactNode;\n  badge?: React.ReactNode;\n}\nconst ProjectListPage: React.FC<ProjectListPageProps> = ({ badge, title, children, listComponent, ...listPageProps }) => (\n  <div className=\"odc-project-list-page\">\n    <PageHeading title={title} badge={badge}>\n      {children}\n    </PageHeading>\n    <hr className=\"odc-project-list-page__section-border\" />\n    <ListPage {...listPageProps} showTitle={false} kind=\"Project\" ListComponent={listComponent || ProjectsTable} canCreate={false} filterLabel=\"by name or display name\" textFilter=\"project-name\" />\n  </div>\n);\n\nexport default ProjectListPage;\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAgBA;AAOA;AAKA;AAMA;AACA;AACA;AAMA;AAEA;;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAKA;AAEA;;AAOA;AAGA;AAEA;;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAUA;AAEA;;;;;;;;;;;;ACxBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AAEA;AAGA;AACA;AAEA;AAEA;;;;;A","sourceRoot":""}