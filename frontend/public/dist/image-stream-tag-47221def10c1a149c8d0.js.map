{"version":3,"file":"image-stream-tag-47221def10c1a149c8d0.js","sources":["webpack:///./public/components/image-stream-tag.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\n\nimport { K8sResourceKind, K8sResourceKindReference } from '../module/k8s';\nimport { ImageStreamTagModel } from '../models';\nimport { DetailsPage } from './factory';\nimport { Kebab, SectionHeading, navFactory, ResourceSummary } from './utils';\nimport { humanizeBinaryBytes } from './utils/units';\nimport { ExampleDockerCommandPopover } from './image-stream';\nimport { ImageStreamTimeline } from './image-stream-timeline';\n\nconst ImageStreamTagsReference: K8sResourceKindReference = 'ImageStreamTag';\nconst ImageStreamsReference: K8sResourceKindReference = 'ImageStream';\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(ImageStreamTagModel), ...common];\n\n// Splits a name/value pair separated by an `=`\nconst splitEnv = (nameValue: string) => {\n  // Use this method instead of `String.split()` so we only split on the first `=`.\n  const i = nameValue.indexOf('=');\n  if (i === -1) {\n    return {\n      name: nameValue,\n      value: '',\n    };\n  }\n\n  return {\n    name: nameValue.substring(0, i),\n    value: nameValue.substring(i + 1),\n  };\n};\n\nexport const ImageStreamTagsDetails: React.SFC<ImageStreamTagsDetailsProps> = ({\n  obj: imageStreamTag,\n  imageStream,\n}) => {\n  const config = _.get(imageStreamTag, 'image.dockerImageMetadata.Config', {});\n  const labels = config.Labels || {};\n  // Convert to an array of objects with name and value properties, then sort the array for display.\n  const labelsArray = _.map(labels, (value, name) => ({ name, value }));\n  const sortedLabels = _.sortBy(labelsArray, 'name');\n  const entrypoint = (config.Entrypoint || []).join(' ');\n  const cmd = (config.Cmd || []).join(' ');\n  const exposedPorts = _.keys(config.ExposedPorts).join(', ');\n  const size = _.get(imageStreamTag, 'image.dockerImageMetadata.Size');\n  const humanizedSize = _.isFinite(size) && humanizeBinaryBytes(size).string;\n  const architecture = _.get(imageStreamTag, 'image.dockerImageMetadata.Architecture');\n  const tagName = _.get(imageStreamTag, 'tag.name');\n\n  return (\n    <div className=\"co-m-pane__body\">\n      <div className=\"co-m-pane__body-group\">\n        <div className=\"row\">\n          <div className=\"col-md-6 col-sm-12\">\n            <SectionHeading text=\"Image Details\" />\n            <ResourceSummary resource={imageStreamTag}>\n              {labels.name && <dt>Image Name</dt>}\n              {labels.name && <dd>{labels.name}</dd>}\n              {labels.summary && <dt>Summary</dt>}\n              {labels.summary && <dd>{labels.summary}</dd>}\n              {humanizedSize && <dt>Size</dt>}\n              {humanizedSize && <dd>{humanizedSize}</dd>}\n            </ResourceSummary>\n            <ExampleDockerCommandPopover imageStream={imageStream} tag={tagName} />\n          </div>\n          <div className=\"col-md-6 col-sm-12\">\n            <SectionHeading text=\"Configuration\" />\n            <dl className=\"co-m-pane__details\">\n              {entrypoint && <dt>Entrypoint</dt>}\n              {entrypoint && <dd className=\"co-break-word\">{entrypoint}</dd>}\n              {cmd && <dt>Command</dt>}\n              {cmd && <dd className=\"co-break-word\">{cmd}</dd>}\n              {config.WorkingDir && <dt>Working Dir</dt>}\n              {config.WorkingDir && <dd className=\"co-break-all\">{config.WorkingDir}</dd>}\n              {exposedPorts && <dt>Exposed Ports</dt>}\n              {exposedPorts && <dd className=\"co-break-word\">{exposedPorts}</dd>}\n              {config.User && <dt>User</dt>}\n              {config.User && <dd>{config.User}</dd>}\n              {architecture && <dt>Architecture</dt>}\n              {architecture && <dd>{architecture}</dd>}\n            </dl>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body-group\">\n        <SectionHeading text=\"Image Labels\" />\n        {_.isEmpty(sortedLabels) ? (\n          <span className=\"text-muted\">No labels</span>\n        ) : (\n          <div className=\"co-table-container\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Value</th>\n                </tr>\n              </thead>\n              <tbody>\n                {_.map(sortedLabels, ({ name, value }) => (\n                  <tr key={name}>\n                    <td>{name}</td>\n                    <td>{value}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n      <div className=\"co-m-pane__body-group\">\n        <SectionHeading text=\"Environment Variables\" />\n        {_.isEmpty(config.Env) ? (\n          <span className=\"text-muted\">No environment variables</span>\n        ) : (\n          <div className=\"co-table-container\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Value</th>\n                </tr>\n              </thead>\n              <tbody>\n                {_.map(config.Env, (nameValueStr, i) => {\n                  const pair = splitEnv(nameValueStr);\n                  return (\n                    <tr key={i}>\n                      <td>{pair.name}</td>\n                      <td>{pair.value}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst parseName = (nameAndTag: string): string => {\n  return nameAndTag.split(':')[0];\n};\n\nconst getImageStreamNameAndTag = (imageStreamTag: K8sResourceKind) => {\n  const imageStreamTagName: string = _.get(imageStreamTag, 'metadata.name') || '';\n  const [imageStreamName, tag] = imageStreamTagName.split(':');\n  return { imageStreamName, tag };\n};\n\nconst ImageStreamTagHistory: React.FC<ImageStreamTagHistoryProps> = ({\n  obj: imageStreamTag,\n  imageStream,\n}) => {\n  const { tag } = getImageStreamNameAndTag(imageStreamTag);\n  const imageStreamStatusTags = _.filter(_.get(imageStream, 'status.tags'), (i) => i.tag === tag);\n  return (\n    <ImageStreamTimeline\n      imageStreamTags={imageStreamStatusTags}\n      imageStreamName={imageStream.metadata.name}\n      imageStreamNamespace={imageStream.metadata.namespace}\n    />\n  );\n};\nImageStreamTagHistory.displayName = 'ImageStreamTagHistory';\n\nconst pages = [\n  navFactory.details(ImageStreamTagsDetails),\n  navFactory.editYaml(),\n  navFactory.history(ImageStreamTagHistory),\n];\nexport const ImageStreamTagsDetailsPage: React.SFC<ImageStreamTagsDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    breadcrumbsFor={(obj) => {\n      const { imageStreamName } = getImageStreamNameAndTag(obj);\n      return [\n        { name: 'Image Streams', path: `/k8s/ns/${props.match.params.ns}/imagestreams` },\n        {\n          name: imageStreamName,\n          path: `/k8s/ns/${props.match.params.ns}/imagestreams/${imageStreamName}`,\n        },\n        {\n          name: 'Image Stream Tag Details',\n          path: props.match.url,\n        },\n      ];\n    }}\n    kind={ImageStreamTagsReference}\n    menuActions={menuActions}\n    resources={[\n      {\n        kind: ImageStreamsReference,\n        name: parseName(props.name),\n        namespace: props.namespace,\n        isList: false,\n        prop: 'imageStream',\n      },\n    ]}\n    pages={pages}\n  />\n);\nImageStreamTagsDetailsPage.displayName = 'ImageStreamTagsDetailsPage';\n\ntype ImageStreamTagHistoryProps = {\n  imageStream: K8sResourceKind;\n  obj: K8sResourceKind;\n};\n\nexport type ImageStreamTagsDetailsProps = {\n  obj: K8sResourceKind;\n  imageStream: K8sResourceKind;\n};\n\nexport type ImageStreamTagsDetailsPageProps = {\n  match: any;\n  namespace: string;\n  name: string;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAQA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAGA;AAQA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;A","sourceRoot":""}