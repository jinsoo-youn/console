{"version":3,"file":"daemonset-1be653fe815b275cf125.js","sources":["webpack:///./public/components/hypercloud/federated-daemonset.tsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\n\nimport { K8sResourceKind } from '../../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { Kebab, KebabAction, detailsPage, LabelList, Timestamp, navFactory, ResourceKebab, ResourceLink, ResourceIcon, ResourceSummary, SectionHeading } from '../utils';\nimport { Status } from '@console/shared';\nimport { FederatedDaemonSetModel } from '../../models';\n\nexport const menuActions: KebabAction[] = [...Kebab.getExtensionsActionsForKind(FederatedDaemonSetModel), ...Kebab.factory.common];\n\nconst kind = FederatedDaemonSetModel.kind;\n\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), Kebab.columnClass];\n\nconst FederatedDaemonSetTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_3'),\n      sortFunc: 'daemonsetPhase',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_15'),\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Annotations',\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_12'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nFederatedDaemonSetTableHeader.displayName = 'FederatedDaemonSetTableHeader';\n\nconst FederatedDaemonSetTableRow: RowFunction<K8sResourceKind> = ({ obj: daemonset, index, key, style }) => {\n  const { t } = useTranslation();\n  return (\n    <TableRow id={daemonset.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={daemonset.metadata.name} namespace={daemonset.metadata.namespace} title={daemonset.metadata.uid} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Status status={daemonset.status.phase} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <LabelList kind={kind} labels={daemonset.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        {t('MSG_DETAILS_TABDETAILS_DETAILS_100', { 0: _.size(daemonset.metadata.annotations) })}\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Timestamp timestamp={daemonset.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={daemonset} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const ClusterRow: React.FC<ClusterRowProps> = ({ daemonset }) => {\n  return (\n    <div className=\"row\">\n      <div className=\"col-lg-2 col-md-3 col-sm-4 col-xs-5\">\n        <ResourceIcon kind={kind} />\n        {daemonset.metadata.name}\n      </div>\n      <div className=\"col-lg-2 col-md-3 col-sm-5 col-xs-7\">\n        <ResourceLink kind=\"Cluster\" name={daemonset.spec.placement.clusters[0].name} />\n      </div>\n      <div className=\"col-lg-2 col-md-2 col-sm-3 hidden-xs\">\n        <Status status={daemonset.status.phase} />\n      </div>\n      <div className=\"col-lg-2 hidden-md hidden-sm hidden-xs\">\n        <Timestamp timestamp={daemonset.metadata.creationTimestamp} />\n      </div>\n    </div>\n  );\n};\n\nexport const DaemonSetDistributionTable: React.FC<DaemonSetDistributionTableProps> = ({\n  heading,\n  daemonset\n}) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <SectionHeading text={heading} />\n      <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n        <div className=\"row co-m-table-grid__head\">\n          <div className=\"col-lg-2 col-md-3 col-sm-4 col-xs-5\">{t('COMMON:MSG_DETAILS_TABOVERVIEW_TABLEHEADER_1')}</div>\n          <div className=\"col-lg-2 col-md-3 col-sm-5 col-xs-7\">{t('COMMON:MSG_DETAILS_TABOVERVIEW_TABLEHEADER_2')}</div>\n          <div className=\"col-lg-2 col-md-2 col-sm-3 hidden-xs\">Result</div>\n          <div className=\"col-lg-1 col-md-2 hidden-sm hidden-xs\">{t('COMMON:MSG_DETAILS_TABOVERVIEW_TABLEHEADER_3')}</div>\n        </div>\n        <div className=\"co-m-table-grid__body\">\n          {/*containers.map((c: any, i: number) => (\n          <ClusterRow key={i} daemonset={daemonset} container={c} />\n        ))*/}\n          <ClusterRow daemonset={daemonset} />\n        </div>\n      </div>\n    </>\n  );}\n\nconst FederatedDaemonSetDetails: React.FC<FederatedDaemonSetDetailsProps> = ({ obj: daemonset }) => {\n  const { t } = useTranslation();\n  return (\n  <>\n    <div className=\"co-m-pane__body\">\n        <SectionHeading text={`${t('COMMON:MSG_MAIN_DIV1_3', { 0: t('COMMON:MSG_LNB_MENU_30') })} ${t('COMMON:MSG_DETAILS_TABOVERVIEW_1')}`} />\n      <div className=\"row\">\n        <div className=\"col-lg-6\">\n          <ResourceSummary resource={daemonset} />\n        </div>\n      </div>\n    </div>\n    <div className=\"co-m-pane__body\">\n      <DaemonSetDistributionTable\n        key=\"distributionTable\"\n        heading=\"Distribution\"\n        daemonset={daemonset} />\n    </div>\n  </>\n);}\n\nconst { details, editYaml } = navFactory;\nexport const FederatedDaemonSets: React.FC = props => <Table {...props} aria-label=\"Federated Daemon Sets\" Header={FederatedDaemonSetTableHeader} Row={FederatedDaemonSetTableRow} virtualize />;\n\nexport const FederatedDaemonSetsPage: React.FC<FederatedDaemonSetsPageProps> = props => <ListPage canCreate={true} ListComponent={FederatedDaemonSets} kind={kind} {...props} />;\n\nexport const FederatedDaemonSetsDetailsPage: React.FC<FederatedDaemonSetsDetailsPageProps> = props => <DetailsPage {...props} kind={kind} menuActions={menuActions} pages={[details(detailsPage(FederatedDaemonSetDetails)), editYaml()]} />;\n\ntype ClusterRowProps = {\n  daemonset: K8sResourceKind;\n}\n\ntype DaemonSetDistributionTableProps = {\n  daemonset: K8sResourceKind;\n  heading: string;\n};\n\ntype FederatedDaemonSetDetailsProps = {\n  obj: K8sResourceKind;\n};\n\ntype FederatedDaemonSetsPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\ntype FederatedDaemonSetsDetailsPageProps = {\n  match: any;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAMA;AAEA;AACA;AAEA;AAEA;;;;;A","sourceRoot":""}