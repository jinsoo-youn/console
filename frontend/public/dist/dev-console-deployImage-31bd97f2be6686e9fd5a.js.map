{"version":3,"file":"dev-console-deployImage-31bd97f2be6686e9fd5a.js","sources":["webpack:///./packages/dev-console/src/components/QueryFocusApplication.tsx","webpack:///./packages/dev-console/src/components/import/DeployImage.tsx","webpack:///./packages/dev-console/src/components/import/DeployImageForm.tsx","webpack:///./packages/dev-console/src/components/import/DeployImagePage.tsx","webpack:///./packages/dev-console/src/components/import/section/ResourceSection.scss?a197","webpack:///./packages/dev-console/src/components/import/section/ResourceSection.tsx"],"sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { setActiveApplication } from '@console/internal/actions/ui';\nimport { RootState } from '@console/internal/redux';\nimport { getActiveApplication } from '@console/internal/reducers/ui';\nimport { QUERY_PROPERTIES } from '../const';\nimport { sanitizeApplicationValue } from '../utils/application-utils';\n\ntype StateProps = {\n  application: string;\n};\ntype DispatchProps = {\n  onSetApp: (application: string) => void;\n};\ntype OwnProps = {\n  children: (desiredApplication?: string) => React.ReactNode;\n};\n\ntype QueryFocusApplicationProps = StateProps & DispatchProps & OwnProps;\n\nconst QueryFocusApplication: React.FC<QueryFocusApplicationProps> = ({\n  children,\n  application,\n  onSetApp,\n}) => {\n  const originalApp = React.useRef(application);\n  const desiredApplication = new URLSearchParams(window.location.search).get(\n    QUERY_PROPERTIES.APPLICATION,\n  );\n\n  React.useEffect(() => {\n    const originalApplication = originalApp.current;\n    const sanitizedApp = sanitizeApplicationValue(desiredApplication);\n    if (sanitizedApp && sanitizedApp !== originalApplication) {\n      onSetApp(sanitizedApp);\n    }\n\n    return () => {\n      if (application !== originalApplication) {\n        onSetApp(originalApplication);\n      }\n    };\n  }, [desiredApplication, onSetApp, originalApp, application]);\n\n  return <>{children(desiredApplication)}</>;\n};\n\nexport default connect<StateProps, DispatchProps, OwnProps>(\n  (state: RootState): StateProps => ({\n    application: getActiveApplication(state),\n  }),\n  {\n    onSetApp: setActiveApplication,\n  },\n)(QueryFocusApplication);\n","import * as React from 'react';\nimport { Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport { ALL_APPLICATIONS_KEY } from '@console/shared';\nimport { history } from '@console/internal/components/utils';\nimport { getActiveApplication } from '@console/internal/reducers/ui';\nimport { RootState } from '@console/internal/redux';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { doContextualBinding, sanitizeApplicationValue } from '../../utils/application-utils';\nimport { ALLOW_SERVICE_BINDING } from '../../const';\nimport { DeployImageFormData, FirehoseList, Resources } from './import-types';\nimport { createOrUpdateDeployImageResources } from './deployImage-submit-utils';\nimport { deployValidationSchema } from './deployImage-validation-utils';\nimport DeployImageForm from './DeployImageForm';\nimport { healthChecksProbeInitialData } from '../health-checks/health-checks-probe-utils';\n\nexport interface DeployImageProps {\n  namespace: string;\n  projects?: FirehoseList;\n  contextualSource?: string;\n}\n\ninterface StateProps {\n  activeApplication: string;\n  serviceBindingAvailable: boolean;\n}\n\ntype Props = DeployImageProps & StateProps;\n\nconst DeployImage: React.FC<Props> = ({\n  namespace,\n  projects,\n  activeApplication,\n  contextualSource,\n  serviceBindingAvailable,\n}) => {\n  const initialValues: DeployImageFormData = {\n    project: {\n      name: namespace || '',\n      displayName: '',\n      description: '',\n    },\n    application: {\n      initial: sanitizeApplicationValue(activeApplication),\n      name: sanitizeApplicationValue(activeApplication),\n      selectedKey: activeApplication,\n    },\n    name: '',\n    searchTerm: '',\n    registry: 'external',\n    imageStream: {\n      image: '',\n      tag: '',\n      namespace: namespace || '',\n      grantAccess: true,\n    },\n    isi: {\n      name: '',\n      image: {},\n      tag: '',\n      status: { metadata: {}, status: '' },\n      ports: [],\n    },\n    image: {\n      name: '',\n      image: {},\n      tag: '',\n      status: { metadata: {}, status: '' },\n      ports: [],\n    },\n    isSearchingForImage: false,\n    serverless: {\n      scaling: {\n        minpods: 0,\n        maxpods: '',\n        concurrencytarget: '',\n        concurrencylimit: '',\n      },\n    },\n    route: {\n      disable: false,\n      create: true,\n      targetPort: '',\n      unknownTargetPort: '',\n      defaultUnknownPort: 8080,\n      path: '',\n      hostname: '',\n      secure: false,\n      tls: {\n        termination: '',\n        insecureEdgeTerminationPolicy: '',\n        caCertificate: '',\n        certificate: '',\n        destinationCACertificate: '',\n        privateKey: '',\n      },\n    },\n    resources: Resources.Kubernetes,\n    resourceTypesNotValid: contextualSource ? [Resources.KnativeService] : [],\n    build: {\n      env: [],\n      triggers: {\n        webhook: true,\n        image: true,\n        config: true,\n      },\n      strategy: 'Source',\n    },\n    deployment: {\n      env: [],\n      triggers: {\n        image: true,\n        config: true,\n      },\n      replicas: 1,\n    },\n    labels: {},\n    env: {},\n    limits: {\n      cpu: {\n        request: '',\n        requestUnit: 'm',\n        defaultRequestUnit: 'm',\n        limit: '',\n        limitUnit: 'm',\n        defaultLimitUnit: 'm',\n      },\n      memory: {\n        request: '',\n        requestUnit: 'Mi',\n        defaultRequestUnit: 'Mi',\n        limit: '',\n        limitUnit: 'Mi',\n        defaultLimitUnit: 'Mi',\n      },\n    },\n    healthChecks: healthChecksProbeInitialData,\n  };\n\n  const handleSubmit = (values, actions) => {\n    const {\n      project: { name: projectName },\n    } = values;\n\n    const resourceActions: Promise<K8sResourceKind[]> = createOrUpdateDeployImageResources(\n      values,\n      true,\n    ).then(() => {\n      const requests: Promise<K8sResourceKind[]> = createOrUpdateDeployImageResources(values);\n      return requests;\n    });\n\n    if (contextualSource) {\n      resourceActions\n        .then((resources) =>\n          doContextualBinding(resources, contextualSource, serviceBindingAvailable),\n        )\n        .catch(() => {});\n    }\n\n    resourceActions\n      .then(() => {\n        actions.setSubmitting(false);\n        history.push(`/topology/ns/${projectName}`);\n      })\n      .catch((err) => {\n        actions.setSubmitting(false);\n        actions.setStatus({ submitError: err.message });\n      });\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      onReset={history.goBack}\n      validationSchema={deployValidationSchema}\n      render={(props) => <DeployImageForm {...props} projects={projects} />}\n    />\n  );\n};\n\ninterface OwnProps extends DeployImageProps {\n  forApplication?: string;\n}\nconst mapStateToProps = (state: RootState, ownProps: OwnProps): StateProps => {\n  const activeApplication = ownProps.forApplication || getActiveApplication(state);\n  return {\n    activeApplication: activeApplication !== ALL_APPLICATIONS_KEY ? activeApplication : '',\n    serviceBindingAvailable: state.FLAGS.get(ALLOW_SERVICE_BINDING),\n  };\n};\n\nexport default connect(mapStateToProps)(DeployImage);\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { FormikProps, FormikValues } from 'formik';\nimport { FormFooter } from '@console/shared/src/components/form-utils';\nimport { Form } from '@patternfly/react-core';\nimport { DeployImageFormProps } from './import-types';\nimport ImageSearchSection from './image-search/ImageSearchSection';\nimport AppSection from './app/AppSection';\nimport AdvancedSection from './advanced/AdvancedSection';\nimport ResourceSection from './section/ResourceSection';\n\nconst DeployImageForm: React.FC<FormikProps<FormikValues> & DeployImageFormProps> = ({\n  values,\n  errors,\n  handleSubmit,\n  handleReset,\n  status,\n  isSubmitting,\n  dirty,\n  projects,\n}) => (\n  <Form className=\"co-deploy-image\" data-test-id=\"deploy-image-form\" onSubmit={handleSubmit}>\n    <ImageSearchSection />\n    <AppSection\n      project={values.project}\n      noProjectsAvailable={projects.loaded && _.isEmpty(projects.data)}\n    />\n    <ResourceSection />\n    <AdvancedSection values={values} />\n    <FormFooter\n      handleReset={handleReset}\n      errorMessage={status && status.submitError}\n      isSubmitting={isSubmitting}\n      submitLabel=\"Create\"\n      sticky\n      disableSubmit={!dirty || !_.isEmpty(errors)}\n      resetLabel=\"Cancel\"\n    />\n  </Form>\n);\n\nexport default DeployImageForm;\n","import * as React from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { PageHeading, Firehose } from '@console/internal/components/utils';\nimport { QUERY_PROPERTIES } from '../../const';\nimport QueryFocusApplication from '../QueryFocusApplication';\nimport NamespacedPage, { NamespacedPageVariants } from '../NamespacedPage';\nimport DeployImage from './DeployImage';\n\nexport type DeployImagePageProps = RouteComponentProps<{ ns?: string }>;\n\nconst DeployImagePage: React.FunctionComponent<DeployImagePageProps> = ({ match, location }) => {\n  const namespace = match.params.ns;\n  const params = new URLSearchParams(location.search);\n\n  return (\n    <NamespacedPage disabled variant={NamespacedPageVariants.light}>\n      <Helmet>\n        <title>Deploy Image</title>\n      </Helmet>\n      <PageHeading title=\"Deploy Image\" />\n      <div className=\"co-m-pane__body\" style={{ paddingBottom: 0 }}>\n        <QueryFocusApplication>\n          {(desiredApplication) => (\n            <Firehose resources={[{ kind: 'Project', prop: 'projects', isList: true }]}>\n              <DeployImage\n                forApplication={desiredApplication}\n                namespace={namespace}\n                contextualSource={params.get(QUERY_PROPERTIES.CONTEXT_SOURCE)}\n              />\n            </Firehose>\n          )}\n        </QueryFocusApplication>\n      </div>\n    </NamespacedPage>\n  );\n};\n\nexport default DeployImagePage;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { useField } from 'formik';\nimport { connectToFlags, FlagsObject } from '@console/internal/reducers/features';\nimport { K8sKind } from '@console/internal/module/k8s';\nimport { DeploymentModel, DeploymentConfigModel } from '@console/internal/models';\nimport { FLAG_KNATIVE_SERVING_SERVICE, ServiceModel } from '@console/knative-plugin';\nimport { RadioGroupField, RadioGroupOption } from '@console/shared';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { Resources, ReadableResourcesNames } from '../import-types';\nimport FormSection from './FormSection';\nimport './ResourceSection.scss';\n\ntype ResourceSectionProps = {\n  flags: FlagsObject;\n};\n\nconst createHelpText = (k8sModel: K8sKind, helpText: string) => {\n  return (\n    <>\n      <div className=\"odc-resource-section__help-text\">\n        {k8sModel.apiGroup}/{k8sModel.kind}\n      </div>\n      <div>{helpText}</div>\n    </>\n  );\n};\n\nconst ResourceSection: React.FC<ResourceSectionProps> = ({ flags }) => {\n  const [field] = useField<Resources[]>('resourceTypesNotValid');\n  const invalidTypes = field.value || [];\n\n  const radioOptions: RadioGroupOption[] = [];\n  if (!invalidTypes.includes(Resources.Kubernetes)) {\n    radioOptions.push({\n      label: ReadableResourcesNames[Resources.Kubernetes],\n      value: Resources.Kubernetes,\n      children: createHelpText(\n        DeploymentModel,\n        `A ${DeploymentModel.label} enables declarative updates for Pods and ReplicaSets.`,\n      ),\n    });\n  }\n  if (!invalidTypes.includes(Resources.OpenShift)) {\n    radioOptions.push({\n      label: ReadableResourcesNames[Resources.OpenShift],\n      value: Resources.OpenShift,\n      children: createHelpText(\n        DeploymentConfigModel,\n        `A ${DeploymentConfigModel.label} defines the template for a pod \\\n        and manages deploying new images or configuration changes`,\n      ),\n    });\n  }\n\n  const knativeServiceAccess = useAccessReview({\n    group: ServiceModel.apiGroup,\n    resource: ServiceModel.plural,\n    namespace: getActiveNamespace(),\n    verb: 'create',\n  });\n  const canIncludeKnative =\n    !invalidTypes.includes(Resources.KnativeService) &&\n    flags[FLAG_KNATIVE_SERVING_SERVICE] &&\n    knativeServiceAccess;\n  if (canIncludeKnative) {\n    radioOptions.push({\n      label: ReadableResourcesNames[Resources.KnativeService],\n      value: Resources.KnativeService,\n      children: createHelpText(ServiceModel, `A Knative Service enables scaling to zero when idle`),\n    });\n  }\n  return (\n    <FormSection title=\"Resources\" fullWidth>\n      <div>Select the resource type to generate</div>\n      <RadioGroupField name=\"resources\" options={radioOptions} />\n    </FormSection>\n  );\n};\n\nexport default connectToFlags(FLAG_KNATIVE_SERVING_SERVICE)(ResourceSection);\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAcA;AAKA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;ACrDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACjMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAWA;AACA;AAIA;AACA;AACA;AAYA;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAWA;AAEA;;;;;;;;;;;;ACtCA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;;;;;A","sourceRoot":""}