{"version":3,"file":"dev-console-import-244b9ecec9f2ee313d09.js","sources":["webpack:///./packages/dev-console/src/components/QueryFocusApplication.tsx","webpack:///./packages/dev-console/src/components/import/ImportForm.tsx","webpack:///./packages/dev-console/src/components/import/ImportPage.tsx"],"sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { setActiveApplication } from '@console/internal/actions/ui';\nimport { RootState } from '@console/internal/redux';\nimport { getActiveApplication } from '@console/internal/reducers/ui';\nimport { QUERY_PROPERTIES } from '../const';\nimport { sanitizeApplicationValue } from '../utils/application-utils';\n\ntype StateProps = {\n  application: string;\n};\ntype DispatchProps = {\n  onSetApp: (application: string) => void;\n};\ntype OwnProps = {\n  children: (desiredApplication?: string) => React.ReactNode;\n};\n\ntype QueryFocusApplicationProps = StateProps & DispatchProps & OwnProps;\n\nconst QueryFocusApplication: React.FC<QueryFocusApplicationProps> = ({\n  children,\n  application,\n  onSetApp,\n}) => {\n  const originalApp = React.useRef(application);\n  const desiredApplication = new URLSearchParams(window.location.search).get(\n    QUERY_PROPERTIES.APPLICATION,\n  );\n\n  React.useEffect(() => {\n    const originalApplication = originalApp.current;\n    const sanitizedApp = sanitizeApplicationValue(desiredApplication);\n    if (sanitizedApp && sanitizedApp !== originalApplication) {\n      onSetApp(sanitizedApp);\n    }\n\n    return () => {\n      if (application !== originalApplication) {\n        onSetApp(originalApplication);\n      }\n    };\n  }, [desiredApplication, onSetApp, originalApp, application]);\n\n  return <>{children(desiredApplication)}</>;\n};\n\nexport default connect<StateProps, DispatchProps, OwnProps>(\n  (state: RootState): StateProps => ({\n    application: getActiveApplication(state),\n  }),\n  {\n    onSetApp: setActiveApplication,\n  },\n)(QueryFocusApplication);\n","import * as React from 'react';\nimport { Formik } from 'formik';\nimport * as _ from 'lodash';\nimport { history, AsyncComponent } from '@console/internal/components/utils';\nimport { getActivePerspective, getActiveApplication } from '@console/internal/reducers/ui';\nimport { RootState } from '@console/internal/redux';\nimport { connect } from 'react-redux';\nimport { ALL_APPLICATIONS_KEY } from '@console/shared';\nimport { NormalizedBuilderImages, normalizeBuilderImages } from '../../utils/imagestream-utils';\nimport { doContextualBinding, sanitizeApplicationValue } from '../../utils/application-utils';\nimport { ALLOW_SERVICE_BINDING } from '../../const';\nimport { GitImportFormData, FirehoseList, ImportData, Resources } from './import-types';\nimport { createOrUpdateResources, handleRedirect } from './import-submit-utils';\nimport { validationSchema } from './import-validation-utils';\nimport { healthChecksProbeInitialData } from '../health-checks/health-checks-probe-utils';\n\nexport interface ImportFormProps {\n  namespace: string;\n  importData: ImportData;\n  contextualSource?: string;\n  imageStreams?: FirehoseList;\n  projects?: {\n    loaded: boolean;\n    data: [];\n  };\n}\n\nexport interface StateProps {\n  perspective: string;\n  activeApplication: string;\n  serviceBindingAvailable: boolean;\n}\n\nconst ImportForm: React.FC<ImportFormProps & StateProps> = ({\n  namespace,\n  imageStreams,\n  importData,\n  contextualSource,\n  perspective,\n  activeApplication,\n  projects,\n  serviceBindingAvailable,\n}) => {\n  const initialValues: GitImportFormData = {\n    name: '',\n    project: {\n      name: namespace || '',\n      displayName: '',\n      description: '',\n    },\n    application: {\n      initial: sanitizeApplicationValue(activeApplication),\n      name: sanitizeApplicationValue(activeApplication),\n      selectedKey: activeApplication,\n    },\n    git: {\n      url: '',\n      type: '',\n      ref: '',\n      dir: '/',\n      showGitType: false,\n      secret: '',\n      isUrlValidating: false,\n    },\n    docker: {\n      dockerfilePath: 'Dockerfile',\n      containerPort: 8080,\n    },\n    image: {\n      selected: '',\n      recommended: '',\n      tag: '',\n      tagObj: {},\n      ports: [],\n      isRecommending: false,\n      couldNotRecommend: false,\n    },\n    route: {\n      disable: false,\n      create: true,\n      targetPort: '',\n      path: '',\n      hostname: '',\n      secure: false,\n      tls: {\n        termination: '',\n        insecureEdgeTerminationPolicy: '',\n        caCertificate: '',\n        certificate: '',\n        destinationCACertificate: '',\n        privateKey: '',\n      },\n    },\n    resources: Resources.Kubernetes,\n    resourceTypesNotValid: contextualSource ? [Resources.KnativeService] : [],\n    serverless: {\n      scaling: {\n        minpods: 0,\n        maxpods: '',\n        concurrencytarget: '',\n        concurrencylimit: '',\n      },\n    },\n    pipeline: {\n      enabled: false,\n    },\n    build: {\n      env: [],\n      triggers: {\n        webhook: true,\n        image: true,\n        config: true,\n      },\n      strategy: importData.buildStrategy || 'Source',\n    },\n    deployment: {\n      env: [],\n      triggers: {\n        image: true,\n        config: true,\n      },\n      replicas: 1,\n    },\n    labels: {},\n    limits: {\n      cpu: {\n        request: '',\n        requestUnit: 'm',\n        defaultRequestUnit: 'm',\n        limit: '',\n        limitUnit: 'm',\n        defaultLimitUnit: 'm',\n      },\n      memory: {\n        request: '',\n        requestUnit: 'Mi',\n        defaultRequestUnit: 'Mi',\n        limit: '',\n        limitUnit: 'Mi',\n        defaultLimitUnit: 'Mi',\n      },\n    },\n    healthChecks: healthChecksProbeInitialData,\n  };\n  const builderImages: NormalizedBuilderImages =\n    imageStreams && imageStreams.loaded && normalizeBuilderImages(imageStreams.data);\n\n  const handleSubmit = (values, actions) => {\n    const imageStream = builderImages && builderImages[values.image.selected].obj;\n    const createNewProject = projects.loaded && _.isEmpty(projects.data);\n    const {\n      project: { name: projectName },\n    } = values;\n\n    const resourceActions = createOrUpdateResources(\n      values,\n      imageStream,\n      createNewProject,\n      true,\n    ).then(() => createOrUpdateResources(values, imageStream));\n\n    if (contextualSource) {\n      resourceActions\n        .then((resources) =>\n          doContextualBinding(resources, contextualSource, serviceBindingAvailable),\n        )\n        .catch(() => {});\n    }\n\n    resourceActions\n      .then(() => {\n        actions.setSubmitting(false);\n        handleRedirect(projectName, perspective);\n      })\n      .catch((err) => {\n        actions.setSubmitting(false);\n        actions.setStatus({ submitError: err.message });\n      });\n  };\n\n  const renderForm = (props) => {\n    return (\n      <AsyncComponent\n        {...props}\n        projects={projects}\n        builderImages={builderImages}\n        loader={importData.loader}\n      />\n    );\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      onReset={history.goBack}\n      validationSchema={validationSchema}\n      render={renderForm}\n    />\n  );\n};\n\ntype OwnProps = ImportFormProps & { forApplication?: string };\nconst mapStateToProps = (state: RootState, ownProps: OwnProps): StateProps => {\n  const perspective = getActivePerspective(state);\n  const activeApplication = ownProps.forApplication || getActiveApplication(state);\n  return {\n    perspective,\n    activeApplication: activeApplication !== ALL_APPLICATIONS_KEY ? activeApplication : '',\n    serviceBindingAvailable: state.FLAGS.get(ALLOW_SERVICE_BINDING),\n  };\n};\n\nexport default connect(mapStateToProps)(ImportForm);\n","import * as React from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { PageHeading, Firehose, FirehoseResource } from '@console/internal/components/utils';\nimport { ImageStreamModel } from '@console/internal/models';\nimport { QUERY_PROPERTIES } from '../../const';\nimport NamespacedPage, { NamespacedPageVariants } from '../NamespacedPage';\nimport QueryFocusApplication from '../QueryFocusApplication';\nimport ImportForm from './ImportForm';\nimport { ImportTypes, ImportData } from './import-types';\n\nexport type ImportPageProps = RouteComponentProps<{ ns?: string }>;\n\nconst ImportFlows: { [name: string]: ImportData } = {\n  git: {\n    type: ImportTypes.git,\n    title: 'Import from git',\n    buildStrategy: 'Source',\n    loader: () =>\n      import('./GitImportForm' /* webpackChunkName: \"git-import-form\" */).then((m) => m.default),\n  },\n  docker: {\n    type: ImportTypes.docker,\n    title: 'Import from Dockerfile',\n    buildStrategy: 'Docker',\n    loader: () =>\n      import('./GitImportForm' /* webpackChunkName: \"git-import-form\" */).then((m) => m.default),\n  },\n  s2i: {\n    type: ImportTypes.s2i,\n    title: 'Create Source-to-Image Application',\n    buildStrategy: 'Source',\n    loader: () =>\n      import('./SourceToImageForm' /* webpackChunkName: \"source-to-image-form\" */).then(\n        (m) => m.default,\n      ),\n  },\n};\n\nconst ImportPage: React.FunctionComponent<ImportPageProps> = ({ match, location }) => {\n  const namespace = match.params.ns;\n  const searchParams = new URLSearchParams(location.search);\n  const imageStreamName = searchParams.get('imagestream');\n  const imageStreamNamespace = searchParams.get('imagestream-ns');\n  const preselectedNamespace = searchParams.get('preselected-ns');\n  const importType = searchParams.get('importType');\n\n  let importData: ImportData;\n  let resources: FirehoseResource[];\n  if (imageStreamName && imageStreamNamespace) {\n    importData = ImportFlows.s2i;\n    resources = [\n      {\n        kind: ImageStreamModel.kind,\n        prop: 'imageStreams',\n        isList: false,\n        name: imageStreamName,\n        namespace: imageStreamNamespace,\n      },\n      {\n        kind: 'Project',\n        prop: 'projects',\n        isList: true,\n      },\n    ];\n  } else if (importType === ImportTypes.docker) {\n    importData = ImportFlows.docker;\n    resources = [\n      {\n        kind: 'Project',\n        prop: 'projects',\n        isList: true,\n      },\n    ];\n  } else {\n    importData = ImportFlows.git;\n    resources = [\n      {\n        kind: ImageStreamModel.kind,\n        prop: 'imageStreams',\n        isList: true,\n        namespace: 'openshift',\n      },\n      {\n        kind: 'Project',\n        prop: 'projects',\n        isList: true,\n      },\n    ];\n  }\n\n  return (\n    <QueryFocusApplication>\n      {(application) => (\n        <NamespacedPage disabled variant={NamespacedPageVariants.light}>\n          <Helmet>\n            <title>{importData.title}</title>\n          </Helmet>\n          <PageHeading title={importData.title} />\n          <div className=\"co-m-pane__body\" style={{ paddingBottom: 0 }}>\n            <Firehose resources={resources}>\n              <ImportForm\n                forApplication={application}\n                contextualSource={searchParams.get(QUERY_PROPERTIES.CONTEXT_SOURCE)}\n                namespace={namespace || preselectedNamespace}\n                importData={importData}\n              />\n            </Firehose>\n          </div>\n        </NamespacedPage>\n      )}\n    </QueryFocusApplication>\n  );\n};\n\nexport default ImportPage;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAcA;AAKA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;ACrDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAmrNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAYA;AAEA;;;;;A","sourceRoot":""}