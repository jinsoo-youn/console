{"version":3,"file":"service-17f3456a9065d8e7908e.js","sources":["webpack:///./public/components/hypercloud/federated-service.tsx","webpack:///./public/components/service.jsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\n// import { AddHealthChecks, EditHealthChecks } from '@console/app/src/actions/modify-health-checks';\nimport { K8sResourceKind } from '../../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { DetailsItem, Kebab, KebabAction, detailsPage, LabelList, navFactory, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading, Selector, ResourceIcon } from '../utils';\nimport { ResourceEventStream } from '../events';\nimport { FederatedServiceModel } from '../../models';\n\n// export const menuActions: KebabAction[] = [AddHealthChecks, Kebab.factory.AddStorage, ...Kebab.getExtensionsActionsForKind(FederatedServiceModel), EditHealthChecks, ...Kebab.factory.common];\nexport const menuActions: KebabAction[] = [...Kebab.getExtensionsActionsForKind(FederatedServiceModel), ...Kebab.factory.common];\n\nconst kind = FederatedServiceModel.kind;\n\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), Kebab.columnClass];\n\nconst FederatedServiceTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Labels',\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Selector',\n      sortField: 'service.spec.template.spec.selector',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[4] },\n    },\n  ];\n};\nFederatedServiceTableHeader.displayName = 'FederatedServiceTableHeader';\n\n// const ServiceAddress = ({ s }) => {\n//   const ServiceIPsRow = (name, desc, ips, note = null) => (\n//     <div className=\"co-ip-row\">\n//       <div className=\"row\">\n//         <div className=\"col-xs-6\">\n//           <p className=\"ip-name\">{name}</p>\n//           <p className=\"ip-desc\">{desc}</p>\n//         </div>\n//         <div className=\"col-xs-6\">\n//           {note && <span className=\"text-muted\">{note}</span>}\n//           {ips}\n//         </div>\n//       </div>\n//     </div>\n//   );\n\n//   const ServiceType = type => {\n//     switch (type) {\n//       case 'NodePort':\n//         return ServiceIPsRow('Node Port', 'Accessible outside the cluster', _.map(s.spec?.template?.spec?.ports, 'nodePort'), '(all nodes): ');\n//       case 'LoadBalancer':\n//         return ServiceIPsRow(\n//           'External Load Balancer',\n//           'Ingress point(s) of load balancer',\n//           '', // federated service의 load balancer의 ip는 어떻게 가져오지?\n//         );\n//       case 'ExternalName':\n//         return ServiceIPsRow('External Service Name', 'Location of the resource that backs the service', [s.spec?.template?.spec?.externalName]);\n//       default:\n//         return '';\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"row co-ip-header\">\n//         <div className=\"col-xs-6\">Type</div>\n//         <div className=\"col-xs-6\">Location</div>\n//       </div>\n//       <div className=\"rows\">{ServiceType(s.spec?.template?.spec?.type)}</div>\n//     </div>\n//   );\n// };\n\nconst ServicePortMapping = ({ ports }) => {\n  return (\n    <div>\n      <div className=\"row co-ip-header\">\n        <div className=\"col-xs-3\">Name</div>\n        <div className=\"col-xs-3\">Port</div>\n        <div className=\"col-xs-3\">Protocol</div>\n        <div className=\"col-xs-3\">Target Port</div>\n      </div>\n      <div className=\"rows\">\n        {ports.map((portObj, i) => {\n          return (\n            <div className=\"co-ip-row\" key={i}>\n              <div className=\"row\">\n                <div className=\"col-xs-3 co-text-service\">\n                  <p>{portObj.name || '-'}</p>\n                  {portObj.nodePort && <p className=\"co-text-node\">Node Port</p>}\n                </div>\n                <div className=\"col-xs-3 co-text-service\">\n                  <p>\n                    <ResourceIcon kind=\"Service\" />\n                    <span>{portObj.port}</span>\n                  </p>\n                  {portObj.nodePort && (\n                    <p className=\"co-text-node\">\n                      <ResourceIcon kind=\"Node\" />\n                      <span>{portObj.nodePort}</span>\n                    </p>\n                  )}\n                </div>\n                <div className=\"col-xs-3\">\n                  <p>{portObj.protocol}</p>\n                </div>\n                <div className=\"col-xs-3 co-text-pod\">\n                  <p>\n                    <ResourceIcon kind=\"Pod\" />\n                    <span>{portObj.targetPort}</span>\n                  </p>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nconst FederatedServiceTableRow: RowFunction<K8sResourceKind> = ({ obj: service, index, key, style }) => {\n  return (\n    <TableRow id={service.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={service.metadata.name} namespace={service.metadata.namespace} title={service.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={service.metadata.namespace} title={service.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <LabelList kind={kind} labels={service.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Selector selector={service.spec?.template?.spec?.selector} namespace={service.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={service} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst FederatedServiceDetails: React.FC<FederatedServiceDetailsProps> = ({ obj: service }) => (\n  <>\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text=\"Federated Service Details\" />\n      <div className=\"row\">\n        <div className=\"col-lg-6\">\n          <ResourceSummary resource={service} />\n        </div>\n        <div className=\"col-sm-6\">\n          <SectionHeading text=\"Service Routing\" />\n          <dl>\n            {/* <dt>Service Address</dt>\n            <dd className=\"service-ips\">\n              <ServiceAddress s={service} />\n            </dd> */}\n            <DetailsItem label=\"Service Port Mapping\" obj={service} path=\"spec.ports\">\n              <div className=\"service-ips\">{service.spec?.template?.spec?.ports ? <ServicePortMapping ports={service.spec.template.spec.ports} /> : '-'}</div>\n            </DetailsItem>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </>\n);\n\nconst { details, editYaml, events } = navFactory;\nexport const FederatedServices: React.FC = props => <Table {...props} aria-label=\"Federated Services\" Header={FederatedServiceTableHeader} Row={FederatedServiceTableRow} virtualize />;\n\nexport const FederatedServicesPage: React.FC<FederatedServicesPageProps> = props => <ListPage canCreate={true} ListComponent={FederatedServices} kind={kind} {...props} />;\n\nexport const FederatedServicesDetailsPage: React.FC<FederatedServicesDetailsPageProps> = props => <DetailsPage {...props} kind={kind} menuActions={menuActions} pages={[details(detailsPage(FederatedServiceDetails)), editYaml(), events(ResourceEventStream)]} />;\n\ntype FederatedServiceDetailsProps = {\n  obj: K8sResourceKind;\n};\n\ntype FederatedServicesPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\ntype FederatedServicesDetailsPageProps = {\n  match: any;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\n\nimport { DetailsPage, ListPage, Table, TableRow, TableData } from './factory';\nimport { DetailsItem, Kebab, LabelList, ResourceIcon, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading, Selector, navFactory } from './utils';\nimport { ServiceModel } from '../models';\nimport { useTranslation } from 'react-i18next';\n\nconst menuActions = [Kebab.factory.ModifyPodSelector, ...Kebab.getExtensionsActionsForKind(ServiceModel), ...Kebab.factory.common];\n\nconst ServiceIP = ({ s }) => {\n  const children = _.map(s.spec.ports, (portObj, i) => {\n    const clusterIP = s.spec.clusterIP === 'None' ? 'None' : `${s.spec.clusterIP}:${portObj.port}`;\n    return (\n      <div key={i} className=\"co-truncate co-select-to-copy\">\n        {clusterIP}\n      </div>\n    );\n  });\n\n  return children;\n};\n\nconst kind = 'Service';\n\nconst tableColumnClasses = [classNames('col-lg-3', 'col-md-3', 'col-sm-4', 'col-xs-6'), classNames('col-lg-2', 'col-md-3', 'col-sm-4', 'col-xs-6'), classNames('col-lg-3', 'col-md-3', 'col-sm-4', 'hidden-xs'), classNames('col-lg-2', 'col-md-3', 'hidden-sm', 'hidden-xs'), classNames('col-lg-2', 'hidden-md', 'hidden-sm', 'hidden-xs'), Kebab.columnClass];\n\nconst ServiceTableHeader = t => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_15'),\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_16'),\n      sortField: 'spec.selector',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_27'),\n      sortField: 'spec.clusterIP',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nServiceTableHeader.displayName = 'ServiceTableHeader';\n\nconst ServiceTableRow = ({ obj: s, index, key, style }) => {\n  return (\n    <TableRow id={s.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={s.metadata.name} namespace={s.metadata.namespace} title={s.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={s.metadata.namespace} title={s.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <LabelList kind={kind} labels={s.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Selector selector={s.spec.selector} namespace={s.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ServiceIP s={s} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={s} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst ServiceAddress = ({ s }) => {\n  const { t } = useTranslation();\n  const ServiceIPsRow = (name, desc, ips, note = null) => (\n    <div className=\"co-ip-row\">\n      <div className=\"row\">\n        <div className=\"col-xs-6\">\n          <p className=\"ip-name\">{name}</p>\n          <p className=\"ip-desc\">{desc}</p>\n        </div>\n        <div className=\"col-xs-6\">\n          {note && <span className=\"text-muted\">{note}</span>}\n          {ips.join(', ')}\n        </div>\n      </div>\n    </div>\n  );\n\n  const ServiceType = type => {\n    switch (type) {\n      case 'NodePort':\n        return ServiceIPsRow(t('SINGLE:MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_10'), t('SINGLE:MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_11'), _.map(s.spec.ports, 'nodePort'), '(all nodes): ');\n      case 'LoadBalancer':\n        return ServiceIPsRow(\n          t('SINGLE:MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_12'),\n          t('SINGLE:MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_13'),\n          _.map(s.status.loadBalancer.ingress, i => i.hostname || i.ip || '-'),\n        );\n      case 'ExternalName':\n        return ServiceIPsRow(t('SINGLE:MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_14'), t('SINGLE:MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_15'), [s.spec.externalName]);\n      default:\n        return ServiceIPsRow(t('SINGLE:MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_16'), t('SINGLE:MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_17'), [s.spec.clusterIP]);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"row co-ip-header\">\n        <div className=\"col-xs-6\">{t('SINGLE:MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_3')}</div>\n        <div className=\"col-xs-6\">{t('SINGLE:MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_4')}</div>\n      </div>\n      <div className=\"rows\">\n        {ServiceType(s.spec.type)}\n        {s.spec.externalIPs && ServiceIPsRow('External IP', 'IP Address(es) accepting traffic for service', s.spec.externalIPs)}\n      </div>\n    </div>\n  );\n};\n\nconst ServicePortMapping = ({ ports }) => {\n  const { t } = useTranslation();\n  return (\n    <div>\n      <div className=\"row co-ip-header\">\n        <div className=\"col-xs-3\">{t('SINGLE:MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_6')}</div>\n        <div className=\"col-xs-3\">{t('SINGLE:MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_7')}</div>\n        <div className=\"col-xs-3\">{t('SINGLE:MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_8')}</div>\n        <div className=\"col-xs-3\">{t('SINGLE:MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_9')}</div>\n      </div>\n      <div className=\"rows\">\n        {ports.map((portObj, i) => {\n          return (\n            <div className=\"co-ip-row\" key={i}>\n              <div className=\"row\">\n                <div className=\"col-xs-3 co-text-service\">\n                  <p>{portObj.name || '-'}</p>\n                  {portObj.nodePort && <p className=\"co-text-node\">Node Port</p>}\n                </div>\n                <div className=\"col-xs-3 co-text-service\">\n                  <p>\n                    <ResourceIcon kind=\"Service\" />\n                    <span>{portObj.port}</span>\n                  </p>\n                  {portObj.nodePort && (\n                    <p className=\"co-text-node\">\n                      <ResourceIcon kind=\"Node\" />\n                      <span>{portObj.nodePort}</span>\n                    </p>\n                  )}\n                </div>\n                <div className=\"col-xs-3\">\n                  <p>{portObj.protocol}</p>\n                </div>\n                <div className=\"col-xs-3 co-text-pod\">\n                  <p>\n                    <ResourceIcon kind=\"Pod\" />\n                    <span>{portObj.targetPort}</span>\n                  </p>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nconst Details = ({ obj: s }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"co-m-pane__body\">\n      <div className=\"row\">\n        <div className=\"col-sm-6\">\n          <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: t('COMMON:MSG_LNB_MENU_47') })} />\n          <ResourceSummary resource={s} showPodSelector>\n            <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_40')} obj={s} path=\"spec.sessionAffinity\" />\n          </ResourceSummary>\n        </div>\n        <div className=\"col-sm-6\">\n          <SectionHeading text={t('SINGLE:MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_1')} />\n          <dl>\n            <dt>{t('SINGLE:MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_2')}</dt>\n            <dd className=\"service-ips\">\n              <ServiceAddress s={s} />\n            </dd>\n            <DetailsItem label={t('SINGLE:MSG_SERVICES_SERVICESDETAILS_TABDETAILS_SERVICEROUTING_5')} obj={s} path=\"spec.ports\">\n              <div className=\"service-ips\">{s.spec.ports ? <ServicePortMapping ports={s.spec.ports} /> : '-'}</div>\n            </DetailsItem>\n          </dl>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst { details, pods, editYaml } = navFactory;\nconst ServicesDetailsPage = props => <DetailsPage {...props} menuActions={menuActions} pages={[details(Details), editYaml(), pods()]} />;\n\nconst ServicesList = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Services\" Header={ServiceTableHeader.bind(null, t)} Row={ServiceTableRow} virtualize />;\n};\nconst ServicesPage = props => {\n  const { t } = useTranslation();\n  return <ListPage title={t('COMMON:MSG_LNB_MENU_47')} canCreate={true} ListComponent={ServicesList} {...props} />;\n};\n\nexport { ServicesList, ServicesPage, ServicesDetailsPage };\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAMA;AAIA;AAEA;;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAOA;AAEA;AACA;AAEA;AAEA;;;;;;;;;;;;;ACpMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAMA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;A","sourceRoot":""}