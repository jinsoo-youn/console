{"version":3,"file":"catalog~operator-hub-f13acacca69d89c18d56.js","sources":["webpack:///./public/components/utils/tile-view-page.jsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as PropTypes from 'prop-types';\nimport {\n  FilterSidePanel,\n  FilterSidePanelCategory,\n  FilterSidePanelCategoryItem,\n  VerticalTabs,\n  VerticalTabsTab,\n} from '@patternfly/react-catalog-view-extension';\nimport { FormControl } from 'patternfly-react';\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  Gallery,\n  GalleryItem,\n  Title,\n} from '@patternfly/react-core';\n\nimport { history } from './router';\nimport { isModalOpen } from '../modals';\nimport { Dropdown } from '../utils';\n\nexport const FilterTypes = {\n  category: 'category',\n  keyword: 'keyword',\n};\n\nconst filterSubcategories = (category, item) => {\n  if (!category.subcategories) {\n    if (!category.values) {\n      return [];\n    }\n\n    let values = _.get(item, category.field);\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n\n    const intersection = [category.values, values].reduce((a, b) => a.filter((c) => b.includes(c)));\n    if (!_.isEmpty(intersection)) {\n      return [category];\n    }\n\n    return [];\n  }\n\n  const matchedSubcategories = [];\n  _.forOwn(category.subcategories, (subCategory) => {\n    let values = _.get(item, category.field);\n\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n\n    const valuesIntersection = [subCategory.values, values].reduce((a, b) =>\n      a.filter((c) => b.includes(c)),\n    );\n    if (!_.isEmpty(valuesIntersection)) {\n      matchedSubcategories.push(subCategory, ...filterSubcategories(subCategory, item));\n    }\n  });\n\n  return matchedSubcategories;\n};\n\n// categorize item under sub and main categories\nconst addItem = (item, category, subcategory = null) => {\n  // Add the item to the category\n  if (!category.items) {\n    category.items = [item];\n  } else if (!category.items.includes(item)) {\n    category.items = category.items.concat(item);\n  }\n\n  // Add the item to the subcategory\n  if (subcategory) {\n    if (!subcategory.items) {\n      subcategory.items = [item];\n    } else if (!subcategory.items.includes(item)) {\n      subcategory.items = subcategory.items.concat(item);\n    }\n  }\n};\n\nconst isCategoryEmpty = ({ items }) => _.isEmpty(items);\n\nconst pruneCategoriesWithNoItems = (categories) => {\n  if (!categories) {\n    return;\n  }\n\n  _.forOwn(categories, (category, key) => {\n    if (isCategoryEmpty(category)) {\n      delete categories[key];\n    } else {\n      pruneCategoriesWithNoItems(category.subcategories);\n    }\n  });\n};\n\nconst processSubCategories = (category, itemsSorter) => {\n  _.forOwn(category.subcategories, (subcategory) => {\n    if (subcategory.items) {\n      subcategory.numItems = _.size(subcategory.items);\n      subcategory.items = itemsSorter(subcategory.items);\n      processSubCategories(subcategory, itemsSorter);\n    }\n    if (category.subcategories) {\n      _.each(category.items, (item) => {\n        const included = _.find(_.keys(category.subcategories), (subcat) =>\n          _.includes(category.subcategories[subcat].items, item),\n        );\n        if (!included) {\n          let otherCategory = _.get(category.subcategories, 'other');\n          if (!otherCategory) {\n            otherCategory = { id: `${category.id}-other`, label: 'Other', items: [] };\n            category.subcategories.other = otherCategory;\n          }\n          otherCategory.items.push(item);\n        }\n      });\n    }\n  });\n};\n\n// calculate numItems per Category and subcategories, sort items\nconst processCategories = (categories, itemsSorter) => {\n  _.forOwn(categories, (category) => {\n    if (category.items) {\n      category.numItems = _.size(category.items);\n      category.items = itemsSorter(category.items);\n      processSubCategories(category, itemsSorter);\n    }\n  });\n};\n\nconst categorize = (items, categories) => {\n  // Categorize each item\n  _.each(items, (item) => {\n    let itemCategorized = false;\n\n    _.each(categories, (category) => {\n      const matchedSubcategories = filterSubcategories(category, item);\n      _.each(matchedSubcategories, (subcategory) => {\n        addItem(item, category, subcategory); // add to subcategory & main category\n        itemCategorized = true;\n      });\n    });\n    if (!itemCategorized) {\n      addItem(item, categories.other); // add to Other category\n    }\n  });\n\n  categories.all.numItems = _.size(items);\n  categories.all.items = items;\n};\n\n/**\n * Creates an items array under each category and subcategory.  If no match, categorizes item\n * under 'Other' main category.\n * (exported for test purposes)\n */\nexport const categorizeItems = (items, itemsSorter, initCategories) => {\n  const allCategory = { id: 'all', label: 'All Items' };\n  const otherCategory = { id: 'other', label: 'Other' };\n\n  const categories = {\n    all: allCategory,\n    ..._.cloneDeep(initCategories),\n    other: otherCategory,\n  };\n\n  categorize(items, categories);\n  pruneCategoriesWithNoItems(categories);\n  processCategories(categories, itemsSorter);\n\n  return categories;\n};\n\nconst clearItemsFromCategories = (categories) => {\n  _.forOwn(categories, (category) => {\n    category.numItems = 0;\n    category.items = [];\n    clearItemsFromCategories(category.subcategories);\n  });\n};\n\nconst filterByKeyword = (items, filters, compFunction) => {\n  const { keyword } = filters;\n  if (!keyword || !keyword.active) {\n    return items;\n  }\n\n  const filterString = keyword.value.toLowerCase();\n  return _.filter(items, (item) => compFunction(filterString, item));\n};\n\nconst filterByGroup = (items, filters) => {\n  // Filter items by each filter group\n  return _.reduce(\n    filters,\n    (filtered, group, key) => {\n      if (key === FilterTypes.keyword) {\n        return filtered;\n      }\n      // Only apply active filters\n      const activeFilters = _.filter(group, 'active');\n      if (activeFilters.length) {\n        const values = _.reduce(\n          activeFilters,\n          (filterValues, filter) => {\n            filterValues.push(filter.value, ..._.get(filter, 'synonyms', []));\n            return filterValues;\n          },\n          [],\n        );\n\n        filtered[key] = _.filter(items, (item) => {\n          if (Array.isArray(item[key])) {\n            return item[key].some((f) => values.includes(f));\n          }\n          return values.includes(item[key]);\n        });\n      }\n\n      return filtered;\n    },\n    {},\n  );\n};\n\nconst filterItems = (items, filters, keywordCompare) => {\n  if (_.isEmpty(filters)) {\n    return items;\n  }\n\n  // Filter items by keyword first\n  const filteredByKeyword = filterByKeyword(items, filters, keywordCompare);\n\n  // Apply each filter property individually. Example:\n  //  filteredByGroup = {\n  //    provider: [/*array of items filtered by provider*/],\n  //    healthIndex: [/*array of items filtered by healthIndex*/],\n  //  };\n  const filteredByGroup = filterByGroup(filteredByKeyword, filters);\n\n  // Intersection of individually applied filters is all filters\n  // In the case no filters are active, returns items filteredByKeyword\n  return [..._.values(filteredByGroup), filteredByKeyword].reduce((a, b) =>\n    a.filter((c) => b.includes(c)),\n  );\n};\n\nconst recategorizeItems = (items, itemsSorter, filters, keywordCompare, categories) => {\n  const filteredItems = filterItems(items, filters, keywordCompare);\n\n  const newCategories = _.cloneDeep(categories);\n  clearItemsFromCategories(newCategories);\n\n  categorize(filteredItems, newCategories);\n  processCategories(newCategories, itemsSorter);\n\n  return newCategories;\n};\n\nconst isActiveTab = (activeId, category) => {\n  return _.has(category.subcategories, activeId);\n};\n\nconst hasActiveDescendant = (activeId, category) => {\n  if (_.has(category.subcategories, activeId)) {\n    return true;\n  }\n\n  return _.some(category.subcategories, (subcategory) =>\n    hasActiveDescendant(activeId, subcategory),\n  );\n};\n\nconst findActiveCategory = (activeId, categories) => {\n  let activeCategory = null;\n  _.forOwn(categories, (category) => {\n    if (activeCategory) {\n      return;\n    }\n\n    if (category.id === activeId) {\n      activeCategory = category;\n    } else {\n      activeCategory = findActiveCategory(activeId, category.subcategories);\n    }\n  });\n  return activeCategory;\n};\n\nconst determineAvailableFilters = (initialFilters, items, filterGroups) => {\n  const filters = _.cloneDeep(initialFilters);\n\n  _.each(filterGroups, (field) => {\n    _.each(items, (item) => {\n      const value = item[field];\n      if (value) {\n        _.set(filters, [field, value], {\n          label: value,\n          value,\n          active: false,\n        });\n      }\n    });\n  });\n\n  return filters;\n};\n\nconst getActiveFilters = (\n  keywordFilter,\n  groupFilters,\n  activeFilters,\n  categoryFilter = null,\n  storeFilterKey = null,\n  filterRetentionPreference = null,\n) => {\n  activeFilters.keyword.value = keywordFilter || '';\n  activeFilters.keyword.active = !!keywordFilter;\n\n  const userFilters = storeFilterKey ? localStorage.getItem(storeFilterKey) : null;\n  if (userFilters) {\n    try {\n      const lastFilters = JSON.parse(userFilters);\n      if (lastFilters) {\n        if (filterRetentionPreference) {\n          _.each(filterRetentionPreference, (filterGroup) => {\n            if (!groupFilters || !groupFilters[filterGroup]) {\n              if (lastFilters[filterGroup]) {\n                activeFilters[filterGroup] = lastFilters[filterGroup];\n              }\n            }\n          });\n        }\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error('Failed parsing user filter settings.');\n    }\n  }\n\n  if (categoryFilter) {\n    // removing default and localstore filters if category filters are present over URL\n    _.each(_.keys(activeFilters.kind), (key) =>\n      _.set(activeFilters, ['kind', key, 'active'], false),\n    );\n  }\n\n  _.forOwn(groupFilters, (filterValues, filterType) => {\n    // removing default and localstore filters if Filters are present over URL\n    _.each(_.keys(activeFilters[filterType]), (key) =>\n      _.set(activeFilters, [filterType, key, 'active'], false),\n    );\n    _.each(filterValues, (filterValue) => {\n      _.set(activeFilters, [filterType, filterValue, 'active'], true);\n    });\n  });\n\n  return activeFilters;\n};\n\nexport const updateActiveFilters = (activeFilters, filterType, id, value) => {\n  if (filterType === FilterTypes.keyword) {\n    _.set(activeFilters, 'keyword.value', value);\n    _.set(activeFilters, 'keyword.active', !!value);\n  } else {\n    _.set(activeFilters, [filterType, id, 'active'], value);\n  }\n\n  return activeFilters;\n};\n\nconst clearActiveFilters = (activeFilters, filterGroups) => {\n  // Clear the keyword filter\n  _.set(activeFilters, 'keyword.value', '');\n  _.set(activeFilters, 'keyword.active', false);\n\n  // Clear the group filters\n  _.each(filterGroups, (field) => {\n    _.each(_.keys(activeFilters[field]), (key) =>\n      _.set(activeFilters, [field, key, 'active'], false),\n    );\n  });\n\n  return activeFilters;\n};\n\nconst getFilterGroupCounts = (\n  items,\n  itemsSorter,\n  filterGroups,\n  selectedCategoryId,\n  filters,\n  categories,\n  keywordCompare,\n) => {\n  // Filter only by keyword\n  const filteredItems = filterByKeyword(items, filters, keywordCompare);\n\n  const categoriesForCounts = recategorizeItems(\n    filteredItems,\n    itemsSorter,\n    [],\n    keywordCompare,\n    categories,\n  );\n\n  const activeCategory = findActiveCategory(selectedCategoryId, categoriesForCounts);\n  const activeItems = activeCategory ? activeCategory.items : [];\n  const newFilterCounts = {};\n\n  _.each(filterGroups, (filterGroup) => {\n    _.each(_.keys(filters[filterGroup]), (key) => {\n      const filterValues = [\n        _.get(filters, [filterGroup, key, 'value']),\n        ..._.get(filters, [filterGroup, key, 'synonyms'], []),\n      ];\n\n      const matchedItems = _.filter(activeItems, (item) => {\n        if (Array.isArray(item[filterGroup])) {\n          return item[filterGroup].some((f) => filterValues.includes(f));\n        }\n\n        return filterValues.includes(item[filterGroup]);\n      });\n\n      _.set(newFilterCounts, [filterGroup, key], _.size(matchedItems));\n    });\n  });\n\n  return newFilterCounts;\n};\n\nconst setURLParams = (params) => {\n  const location = window.location;\n  const url = new URL(location);\n  const searchParams = `?${params.toString()}${url.hash}`;\n\n  history.replace(`${url.pathname}${searchParams}`);\n};\n\nexport const updateURLParams = (paramName, value) => {\n  const params = new URLSearchParams(window.location.search);\n\n  if (value) {\n    params.set(paramName, Array.isArray(value) ? JSON.stringify(value) : value);\n  } else {\n    params.delete(paramName);\n  }\n  setURLParams(params);\n};\n\nconst clearFilterURLParams = (selectedCategoryId) => {\n  const params = new URLSearchParams();\n\n  if (selectedCategoryId) {\n    params.set(FilterTypes.category, selectedCategoryId);\n  }\n\n  setURLParams(params);\n};\n\nconst getActiveValuesFromURL = (\n  availableFilters,\n  filterGroups,\n  groupByTypes,\n  storeFilterKey,\n  filterRetentionPreference,\n) => {\n  const searchParams = new URLSearchParams(window.location.search);\n  const categoryParam = searchParams.get(FilterTypes.category);\n  const keywordFilter = searchParams.get(FilterTypes.keyword);\n  const selectedCategoryId = categoryParam || 'all';\n  let groupBy = '';\n  if (groupByTypes) {\n    groupBy = searchParams.get('groupBy') || groupByTypes.None;\n  }\n  const groupFilters = {};\n\n  _.each(filterGroups, (filterGroup) => {\n    const groupFilterParam = searchParams.get(filterGroup);\n    if (!groupFilterParam) {\n      return;\n    }\n\n    try {\n      _.set(groupFilters, filterGroup, JSON.parse(groupFilterParam));\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.warn('could not update filters from url params: could not parse search params', e);\n    }\n  });\n\n  const activeFilters = getActiveFilters(\n    keywordFilter,\n    groupFilters,\n    availableFilters,\n    categoryParam,\n    storeFilterKey,\n    filterRetentionPreference,\n  );\n\n  return { selectedCategoryId, activeFilters, groupBy };\n};\n\nexport const getFilterSearchParam = (groupFilter) => {\n  const activeValues = _.reduce(\n    _.keys(groupFilter),\n    (result, typeKey) => {\n      return groupFilter[typeKey].active ? result.concat(typeKey) : result;\n    },\n    [],\n  );\n\n  return _.isEmpty(activeValues) ? '' : JSON.stringify(activeValues);\n};\n\nconst defaultFilters = {\n  keyword: {\n    value: '',\n    active: false,\n  },\n};\n\nexport class TileViewPage extends React.Component {\n  constructor(props) {\n    super(props);\n    const { items, itemsSorter, getAvailableCategories, groupByTypes } = this.props;\n    const categories = getAvailableCategories(items);\n\n    this.state = {\n      categories: categorizeItems(items, itemsSorter, categories),\n      selectedCategoryId: 'all',\n      activeFilters: defaultFilters,\n      filterCounts: null,\n      filterGroupsShowAll: {},\n      groupBy: groupByTypes ? groupByTypes.None : '',\n    };\n\n    this.onUpdateFilters = this.onUpdateFilters.bind(this);\n    this.onFilterChange = this.onFilterChange.bind(this);\n    this.renderFilterGroup = this.renderFilterGroup.bind(this);\n    this.onShowAllToggle = this.onShowAllToggle.bind(this);\n    this.onGroupChange = this.onGroupChange.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      items,\n      filterGroups,\n      getAvailableFilters,\n      groupByTypes,\n      storeFilterKey,\n      filterRetentionPreference,\n    } = this.props;\n    const { categories } = this.state;\n    const availableFilters = getAvailableFilters(defaultFilters, items, filterGroups);\n    const activeValues = getActiveValuesFromURL(\n      availableFilters,\n      filterGroups,\n      groupByTypes,\n      storeFilterKey,\n      filterRetentionPreference,\n    );\n\n    this.setState({\n      ...this.getUpdatedState(\n        categories,\n        activeValues.selectedCategoryId,\n        activeValues.activeFilters,\n      ),\n      groupBy: activeValues.groupBy,\n    });\n    this.filterByKeywordInput.focus({ preventScroll: true });\n  }\n\n  componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  componentDidUpdate(prevProps) {\n    const { activeFilters, selectedCategoryId, groupBy } = this.state;\n    const {\n      items,\n      itemsSorter,\n      filterGroups,\n      getAvailableCategories,\n      getAvailableFilters,\n    } = this.props;\n\n    if (!_.isEqual(items, prevProps.items)) {\n      const availableFilters = getAvailableFilters(defaultFilters, items, filterGroups);\n      const availableCategories = getAvailableCategories(items);\n      const categories = categorizeItems(items, itemsSorter, availableCategories);\n\n      const newActiveFilters = _.reduce(\n        availableFilters,\n        (updatedFilters, filterGroup, filterGroupName) => {\n          if (filterGroupName === FilterTypes.keyword) {\n            updatedFilters.keyword = activeFilters.keyword;\n            return updatedFilters;\n          }\n          _.each(filterGroup, (filterItem, filterItemName) => {\n            updatedFilters[filterGroupName][filterItemName].active = _.get(\n              activeFilters,\n              [filterGroupName, filterItemName, 'active'],\n              false,\n            );\n          });\n\n          return updatedFilters;\n        },\n        availableFilters,\n      );\n\n      this.updateMountedState({\n        ...this.getUpdatedState(categories, selectedCategoryId, newActiveFilters),\n        groupBy,\n      });\n    }\n  }\n\n  getUpdatedState(categories, selectedCategoryId, activeFilters) {\n    const { items, itemsSorter, keywordCompare, filterGroups } = this.props;\n\n    if (!items) {\n      return;\n    }\n\n    const newCategories = recategorizeItems(\n      items,\n      itemsSorter,\n      activeFilters,\n      keywordCompare,\n      categories,\n    );\n\n    return {\n      activeFilters,\n      selectedCategoryId,\n      categories: newCategories,\n      filterCounts: getFilterGroupCounts(\n        items,\n        itemsSorter,\n        filterGroups,\n        selectedCategoryId,\n        activeFilters,\n        newCategories,\n        keywordCompare,\n      ),\n    };\n  }\n\n  // This function is necessary due to calls to history.replace un-mounting the component before returning\n  updateMountedState(newState) {\n    if (!this.unmounted) {\n      this.setState(newState);\n    }\n  }\n\n  storeFilters(filters) {\n    if (this.props.storeFilterKey && this.props.filterRetentionPreference) {\n      const storeFilters = {};\n      _.each(this.props.filterRetentionPreference, (filterGroup) => {\n        if (filters[filterGroup]) {\n          storeFilters[filterGroup] = filters[filterGroup];\n        }\n      });\n      localStorage.setItem(this.props.storeFilterKey, JSON.stringify(storeFilters));\n    }\n  }\n\n  clearFilters() {\n    const { filterGroups } = this.props;\n    const { activeFilters, categories, selectedCategoryId } = this.state;\n\n    clearFilterURLParams(selectedCategoryId);\n\n    const clearedFilters = clearActiveFilters(activeFilters, filterGroups);\n\n    this.updateMountedState(this.getUpdatedState(categories, selectedCategoryId, clearedFilters));\n\n    // Don't take focus if a modal was opened while the page was loading.\n    if (!isModalOpen()) {\n      this.filterByKeywordInput.focus({ preventScroll: true });\n    }\n\n    this.storeFilters(clearedFilters);\n  }\n\n  selectCategory(categoryId) {\n    const { activeFilters, categories } = this.state;\n\n    updateURLParams(FilterTypes.category, categoryId);\n    this.updateMountedState(this.getUpdatedState(categories, categoryId, activeFilters));\n  }\n\n  onUpdateFilters(updatedFilters) {\n    const { selectedCategoryId, categories } = this.state;\n    this.updateMountedState(this.getUpdatedState(categories, selectedCategoryId, updatedFilters));\n  }\n\n  onFilterChange(filterType, id, value) {\n    const { activeFilters, selectedCategoryId, categories } = this.state;\n\n    if (filterType === FilterTypes.keyword) {\n      updateURLParams(FilterTypes.keyword, `${value}`);\n    } else {\n      const groupFilter = _.cloneDeep(activeFilters[filterType]);\n      _.set(groupFilter, [id, 'active'], value);\n      updateURLParams(filterType, getFilterSearchParam(groupFilter));\n    }\n\n    const updatedFilters = updateActiveFilters(activeFilters, filterType, id, value);\n\n    this.updateMountedState(this.getUpdatedState(categories, selectedCategoryId, updatedFilters));\n\n    this.storeFilters(updatedFilters);\n  }\n\n  onKeywordChange(value) {\n    this.onFilterChange('keyword', null, value);\n  }\n\n  onShowAllToggle(groupName) {\n    const { filterGroupsShowAll } = this.state;\n    const updatedShow = _.clone(filterGroupsShowAll);\n    _.set(updatedShow, groupName, !_.get(filterGroupsShowAll, groupName, false));\n    this.setState({ filterGroupsShowAll: updatedShow });\n  }\n\n  onGroupChange(value) {\n    const { groupByTypes } = this.props;\n    updateURLParams('groupBy', value === groupByTypes.None ? `` : `${value}`);\n    this.updateMountedState({ groupBy: value });\n  }\n\n  renderTabs(category, selectedCategoryId) {\n    const { id, label, subcategories, numItems } = category;\n    const active = id === selectedCategoryId;\n    const shown = id === 'all';\n\n    const tabClasses = `text-capitalize${!numItems ? ' co-catalog-tab__empty' : ''}`;\n    return (\n      <VerticalTabsTab\n        key={id}\n        title={label}\n        active={active}\n        className={tabClasses}\n        onActivate={() => this.selectCategory(id)}\n        hasActiveDescendant={hasActiveDescendant(selectedCategoryId, category)}\n        shown={shown}\n      >\n        {subcategories && (\n          <VerticalTabs restrictTabs activeTab={isActiveTab(selectedCategoryId, category)}>\n            {_.map(subcategories, (subcategory) =>\n              this.renderTabs(subcategory, selectedCategoryId),\n            )}\n          </VerticalTabs>\n        )}\n      </VerticalTabsTab>\n    );\n  }\n\n  renderCategoryTabs(selectedCategoryId) {\n    const { categories } = this.state;\n    const activeTab = _.has(categories, selectedCategoryId);\n\n    return (\n      <VerticalTabs restrictTabs activeTab={activeTab} shown=\"true\">\n        {_.map(categories, (category) => this.renderTabs(category, selectedCategoryId))}\n      </VerticalTabs>\n    );\n  }\n\n  renderFilterGroup(\n    filterGroup,\n    groupName,\n    activeFilters,\n    filterCounts,\n    onFilterChange,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n    onUpdateFilters,\n  ) {\n    const { filterGroupNameMap } = this.props;\n    const { filterGroupsShowAll } = this.state;\n\n    return (\n      <FilterSidePanelCategory\n        key={groupName}\n        title={filterGroupNameMap[groupName] || groupName}\n        onShowAllToggle={() => this.onShowAllToggle(groupName)}\n        showAll={_.get(filterGroupsShowAll, groupName, false)}\n        data-test-group-name={groupName}\n      >\n        {_.map(filterGroup, (filter, filterName) => {\n          const { label, active } = filter;\n          return (\n            <FilterSidePanelCategoryItem\n              key={filterName}\n              count={_.get(filterCounts, [groupName, filterName], 0)}\n              checked={active}\n              onClick={(e) => onFilterChange(groupName, filterName, e.target.checked)}\n              title={label}\n              data-test={`${groupName}-${_.kebabCase(filterName)}`}\n            >\n              {label}\n            </FilterSidePanelCategoryItem>\n          );\n        })}\n      </FilterSidePanelCategory>\n    );\n  }\n\n  renderSidePanel() {\n    let { renderFilterGroup } = this.props;\n    const { activeFilters, filterCounts } = this.state;\n\n    renderFilterGroup = renderFilterGroup || this.renderFilterGroup;\n\n    return (\n      <FilterSidePanel>\n        {_.map(activeFilters, (filterGroup, groupName) => {\n          if (groupName === FilterTypes.keyword) {\n            return;\n          }\n          return renderFilterGroup(\n            filterGroup,\n            groupName,\n            activeFilters,\n            filterCounts,\n            this.onFilterChange,\n            this.onUpdateFilters,\n          );\n        })}\n      </FilterSidePanel>\n    );\n  }\n\n  renderEmptyState() {\n    const { emptyStateTitle, emptyStateInfo } = this.props;\n    return (\n      <EmptyState variant={EmptyStateVariant.full}>\n        <Title headingLevel=\"h2\" size=\"lg\">\n          {emptyStateTitle}\n        </Title>\n        <EmptyStateBody>{emptyStateInfo}</EmptyStateBody>\n        <EmptyStateSecondaryActions>\n          <Button\n            variant=\"link\"\n            onClick={() => this.clearFilters()}\n            data-test-id=\"catalog-clear-filters\"\n          >\n            Clear All Filters\n          </Button>\n        </EmptyStateSecondaryActions>\n      </EmptyState>\n    );\n  }\n\n  renderItems(items, renderTile) {\n    return (\n      <Gallery gutter=\"sm\" className=\"co-catalog-tile-view\">\n        {_.map(items, (item) => (\n          <GalleryItem key={item.uid ? `gallery-${item.uid}` : `gallery-${item.obj.metadata.uid}`}>\n            {renderTile(item)}\n          </GalleryItem>\n        ))}\n      </Gallery>\n    );\n  }\n\n  renderGroupedItems(items, groupBy, renderTile, groupItems) {\n    const groupedItems = groupItems(items, groupBy);\n    return _.map(\n      groupedItems,\n      (value, key) =>\n        value.length > 0 && (\n          <div key={key} className=\"co-catalog-page__grouped-items\">\n            <Title className=\"co-catalog-page__group-title\" headingLevel=\"h2\" size=\"lg\">\n              {key} ({_.size(value)})\n            </Title>\n            {this.renderItems(value, renderTile)}\n          </div>\n        ),\n    );\n  }\n\n  render() {\n    const { renderTile, groupItems, groupByTypes } = this.props;\n    const { activeFilters, selectedCategoryId, categories, groupBy } = this.state;\n    let activeCategory = findActiveCategory(selectedCategoryId, categories);\n    if (!activeCategory) {\n      activeCategory = findActiveCategory('all', categories);\n    }\n\n    return (\n      <div className=\"co-catalog-page\">\n        <div className=\"co-catalog-page__tabs\">\n          {this.renderCategoryTabs(activeCategory.id)}\n          {this.renderSidePanel()}\n        </div>\n        <div className=\"co-catalog-page__content\">\n          <div className=\"co-catalog-page__header\">\n            <div className=\"co-catalog-page__heading text-capitalize\">{activeCategory.label}</div>\n            <div className=\"co-catalog-page__filter\">\n              <div>\n                <FormControl\n                  className=\"co-catalog-page__input\"\n                  type=\"text\"\n                  inputRef={(ref) => (this.filterByKeywordInput = ref)}\n                  placeholder=\"Filter by keyword...\"\n                  bsClass=\"pf-c-form-control\"\n                  value={activeFilters.keyword.value}\n                  onChange={(e) => this.onKeywordChange(e.target.value)}\n                  aria-label=\"Filter by keyword...\"\n                />\n                {groupItems && (\n                  <Dropdown\n                    className=\"co-catalog-page__btn-group__group-by\"\n                    menuClassName=\"dropdown-menu--text-wrap\"\n                    items={groupByTypes}\n                    onChange={(e) => this.onGroupChange(e)}\n                    titlePrefix=\"Group By\"\n                    title={groupBy}\n                  />\n                )}\n              </div>\n              <div className=\"co-catalog-page__num-items\">{activeCategory.numItems} items</div>\n            </div>\n          </div>\n\n          {activeCategory.numItems > 0 && (\n            <div className=\"co-catalog-page__grid\">\n              {groupItems && groupBy !== groupByTypes.None\n                ? this.renderGroupedItems(activeCategory.items, groupBy, renderTile, groupItems)\n                : this.renderItems(activeCategory.items, renderTile)}\n            </div>\n          )}\n          {activeCategory.numItems === 0 && this.renderEmptyState()}\n        </div>\n      </div>\n    );\n  }\n}\n\nTileViewPage.displayName = 'TileViewPage';\n\nTileViewPage.propTypes = {\n  items: PropTypes.array,\n  itemsSorter: PropTypes.func.isRequired,\n  storeFilterKey: PropTypes.string,\n  getAvailableCategories: PropTypes.func.isRequired,\n  getAvailableFilters: PropTypes.func,\n  filterRetentionPreference: PropTypes.array,\n  filterGroups: PropTypes.array.isRequired,\n  filterGroupNameMap: PropTypes.object,\n  renderFilterGroup: PropTypes.func,\n  keywordCompare: PropTypes.func.isRequired,\n  renderTile: PropTypes.func.isRequired,\n  emptyStateTitle: PropTypes.string,\n  emptyStateInfo: PropTypes.string,\n  groupItems: PropTypes.func,\n  groupByTypes: PropTypes.object,\n};\n\nTileViewPage.defaultProps = {\n  items: null,\n  getAvailableFilters: determineAvailableFilters,\n  filterGroupNameMap: {},\n  renderFilterGroup: null,\n  emptyStateTitle: 'No Results Match the Filter Criteria',\n  emptyStateInfo: 'No items are being shown due to the filters being applied.',\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AACA;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AASA;AACA;AAEA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AASA;AACA;AAEA;AACA;AAGA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AACA;AAQA;AAQA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AAIA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAQA;AACA;AACA;AACA;AACA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAmBA;AAEA;AACA;AACA;AAEA;AAKA;AAEA;AAMA;AACA;AAEA;AACA;AAEA;AASA;AACA;AAYA;AAGA;AAEA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAQA;AAGA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAUA;AAEA;AACA;AASA;AAEA;AACA;AACA;AAKA;AACA;;AAAA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAUA;AAWA;AAAA;AAAA;AAIA;AAGA;AACA;AAGA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}