{"version":3,"file":"22-1dcce248f876e29fd404.js","sources":["webpack:///./public/components/hypercloud/audit.jsx"],"sourcesContent":["import * as React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { Helmet } from 'react-helmet';\nimport * as classNames from 'classnames';\nimport ReactPaginate from 'react-paginate';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash-es';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { SafetyFirst } from '../safety-first';\nimport { TextFilter } from '../factory';\nimport { Dropdown, Box, Timestamp, PageHeading } from '../utils';\nimport { coFetchJSON } from '../../co-fetch';\nimport { getId, getUserGroup } from '../../hypercloud/auth';\nimport { setQueryArgument, getQueryArgument, removeQueryArgument } from '../utils/router.ts';\nimport { useTranslation, withTranslation } from 'react-i18next';\n\n// TODO\n\n// 1. i18n 적용 - 7월 3주차에 나옴\n// 2. date picker 빼기 - 리뷰 후 결정\n// 3. onchange 중복 로직 제거 (코드 리팩토링)\n\nclass Inner extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      angle: 'down',\n    };\n  }\n\n  onClickDetail() {\n    this.state.angle === 'down' ? this.setState({ angle: 'up' }) : this.setState({ angle: 'down' });\n  }\n\n  render() {\n    const { klass, status, verb, objectRef, user, stageTimestamp, responseStatus } = this.props;\n    let timestamp = Date.parse(stageTimestamp);\n    timestamp -= 9 * 60 * 60 * 1000;\n    timestamp = new Date(timestamp).toISOString();\n\n    return (\n      <div className={`${klass} slide-${status}`} style={{ height: 'fit-content' }}>\n        <div className=\"co-sysevent__icon-box\">\n          <i className=\"co-sysevent-icon\" style={{ top: '33px' }} />\n          <div className=\"co-sysevent__icon-line\" style={{ top: '33px' }}></div>\n        </div>\n        <div className=\"co-sysevent__box\">\n          <div className=\"co-sysevent__header\">\n            <div className=\"co-sysevent__subheader\">\n              {objectRef.Resource}\n              <Timestamp timestamp={timestamp} />\n            </div>\n            <div\n              className={classNames('co-sysevent__details', {\n                'co-sysevent__details__alignRight': !user.username,\n              })}\n            >\n              {user.username}\n            </div>\n          </div>\n          <div className=\"co-sysevent__message\" style={{ margin: '0', height: 'fit-content' }}>\n            {verb}, {verb} {responseStatus.status} with status code : {responseStatus.code}\n            {this.state.angle === 'up' && <p style={{ margin: '0' }}>{responseStatus.message}</p>}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst timeout = { enter: 150 };\n\nclass SysEvent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { Verb, ObjectRef, User, ResponseStatus, StageTimestamp } = this.props;\n    const klass = classNames('co-sysevent', { 'co-sysevent--error': this.props.ResponseStatus.code === 400 || this.props.ResponseStatus.code === 500 || this.props.ResponseStatus.status === 'Failure' });\n    // console.log(this.props);\n    const style = {\n      height: 110,\n      left: 0,\n      position: 'absolute',\n      top: this.props.index * 110,\n      width: '100%',\n    };\n\n    return (\n      <div style={style}>\n        <CSSTransition mountOnEnter={true} appear={true} in exit={false} timeout={timeout} classNames=\"slide\">\n          {status => <Inner klass={klass} status={status} verb={Verb} objectRef={ObjectRef} responseStatus={ResponseStatus} user={User} stageTimestamp={StageTimestamp} width={style.width} />}\n        </CSSTransition>\n      </div>\n    );\n  }\n}\n\nclass AuditPage_ extends React.Component {\n  constructor(props) {\n    super(props);\n    let date = new Date();\n    date.setDate(date.getDate() - 7);\n    const { t } = props;\n\n    this.codeList = { all: t('SINGLE:MSG_AUDITLOGS_MAIN_CODEFILTER_1'), 100: t('SINGLE:MSG_AUDITLOGS_MAIN_CODEFILTER_2'), 200: t('SINGLE:MSG_AUDITLOGS_MAIN_CODEFILTER_3'), 300: t('SINGLE:MSG_AUDITLOGS_MAIN_CODEFILTER_4'), 400: t('SINGLE:MSG_AUDITLOGS_MAIN_CODEFILTER_5'), 500: t('SINGLE:MSG_AUDITLOGS_MAIN_CODEFILTER_6') };\n    this.statuslist = { all: t('SINGLE:MSG_AUDITLOGS_MAIN_STATUSFILTER_1'), Success: t('SINGLE:MSG_AUDITLOGS_MAIN_STATUSFILTER_2'), Failure: t('SINGLE:MSG_AUDITLOGS_MAIN_STATUSFILTER_3') };\n    this.resourcelist = {\n      all: t('SINGLE:MSG_AUDITLOGS_MAIN_RESOURCEFILTER_1'),\n      mutatingwebhookconfigurations: 'mutatingwebhookconfigurations',\n      validatingwebhookconfigurations: 'validatingwebhookconfigurations',\n      customresourcedefinitions: 'customresourcedefinitions',\n      apiservices: 'apiservices',\n      controllerrevisions: 'controllerrevisions',\n      daemonsets: 'daemonsets',\n      deployments: 'deployments',\n      replicasets: 'replicasets',\n      statefulsets: 'statefulsets',\n      meshpolicies: 'meshpolicies',\n      policies: 'policies',\n      horizontalpodautoscalers: 'horizontalpodautoscalers',\n      cronjobs: 'cronjobs',\n      jobs: 'jobs',\n      cdis: 'cdis',\n      cephblockpools: 'cephblockpools',\n      cephclusters: 'cephclusters',\n      cephfilesystems: 'cephfilesystems',\n      cephnfses: 'cephnfses',\n      cephobjectstores: 'cephobjectstores',\n      cephobjectstoreusers: 'cephobjectstoreusers',\n      adapters: 'adapters',\n      attributemanifests: 'attributemanifests',\n      handlers: 'handlers',\n      httpapispecbindings: 'httpapispecbindings',\n      httpapispecs: 'httpapispecs',\n      instances: 'instances',\n      quotaspecbindings: 'quotaspecbindings',\n      quotaspecs: 'quotaspecs',\n      rules: 'rules',\n      templates: 'templates',\n      clustertemplates: 'clustertemplates',\n      ingresses: 'ingresses',\n      kubevirts: 'kubevirts',\n      virtualmachineinstancemigrations: 'virtualmachineinstancemigrations',\n      virtualmachineinstancepresets: 'virtualmachineinstancepresets',\n      virtualmachineinstancereplicasets: 'virtualmachineinstancereplicasets',\n      virtualmachineinstances: 'virtualmachineinstances',\n      virtualmachines: 'virtualmachines',\n      destinationrules: 'destinationrules',\n      envoyfilters: 'envoyfilters',\n      gateways: 'gateways',\n      serviceentries: 'serviceentries',\n      sidecars: 'sidecars',\n      virtualservices: 'virtualservices',\n      poddisruptionbudgets: 'poddisruptionbudgets',\n      podsecuritypolicies: 'podsecuritypolicies',\n      clusterrolebindings: 'clusterrolebindings',\n      clusterroles: 'clusterroles',\n      rolebindings: 'rolebindings',\n      roles: 'roles',\n      clusterrbacconfigs: 'clusterrbacconfigs',\n      rbacconfigs: 'rbacconfigs',\n      servicerolebindings: 'servicerolebindings',\n      serviceroles: 'serviceroles',\n      authorizationpolicies: 'authorizationpolicies',\n      peerauthentications: 'peerauthentications',\n      requestauthentications: 'requestauthentications',\n      clusterservicebrokers: 'clusterservicebrokers',\n      clusterserviceclasses: 'clusterserviceclasses',\n      clusterserviceplans: 'clusterserviceplans',\n      servicebindings: 'servicebindings',\n      servicebrokers: 'servicebrokers',\n      serviceclasses: 'serviceclasses',\n      serviceinstances: 'serviceinstances',\n      serviceplans: 'serviceplans',\n      csidrivers: 'csidrivers',\n      csinodes: 'csinodes',\n      storageclasses: 'storageclasses',\n      volumeattachments: 'volumeattachments',\n      clustertasks: 'clustertasks',\n      conditions: 'conditions',\n      pipelineresources: 'pipelineresources',\n      pipelineruns: 'pipelineruns',\n      pipelines: 'pipelines',\n      taskruns: 'taskruns',\n      tasks: 'tasks',\n      catalogserviceclaims: 'catalogserviceclaims',\n      clients: 'clients',\n      images: 'images',\n      namespaceclaims: 'namespaceclaims',\n      registries: 'registries',\n      resourcequotaclaims: 'resourcequotaclaims',\n      templateinstances: 'templateinstances',\n      tokens: 'tokens',\n      usergroups: 'usergroups',\n      users: 'users',\n      usersecuritypolicies: 'usersecuritypolicies',\n      pods: 'pods',\n    };\n\n    this.state = {\n      namespace: '',\n      language: this.props.i18n.language,\n      actionList: { all: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_1') },\n      resourceType: this.resourcelist.all,\n      action: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_1'),\n      status: this.statuslist.all,\n      code: this.codeList.all,\n      textFilter: '',\n      data: [],\n      start: date,\n      end: new Date(),\n      offset: 0,\n      pages: 0,\n      paginationPos: '215px',\n    };\n\n    this.onChangeResourceType = e => this.onChangeResourceType_(e);\n    this.onChangeAction = e => this.onChangeAction_(e);\n    this.onChangeStatus = e => this.onChangeStatus_(e);\n    this.onChangeCode = e => this.onChangeCode_(e);\n    this.onChangeStartDate = e => this.onChangeStartDate_(e);\n    this.onChangeEndDate = e => this.onChangeEndDate_(e);\n    this.onChangePage = e => this.onChangePage_(e);\n    this.onSearch = e => this.onSearch_(e);\n  }\n\n  onChangeResourceType_(e) {\n    const { t } = this.props;\n    if (e !== 'all') {\n      this.setState({ resourceType: e });\n    } else {\n      this.setState({ resourceType: this.resourcelist.all });\n    }\n    this.setState({ offset: 0 });\n\n    // 리소스 타입 선택에 따라 액션 드롭다운 항목 설정\n    if (e === 'all') {\n      this.setState({\n        actionList: { all: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_1') },\n      });\n    } else if (e === 'users') {\n      this.setState({\n        actionList: { all: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_1'), create: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_2'), delete: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_3'), patch: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_6'), update: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_7'), login: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_4'), logout: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_5') },\n      });\n    } else {\n      this.setState({\n        actionList: { all: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_1'), create: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_2'), delete: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_3'), patch: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_6'), update: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_7') },\n      });\n    }\n    const search = getQueryArgument('user');\n\n    let uri = `${document.location.origin}/api/webhook/audit?limit=100&offset=0&startTime=${this.state.start.getTime() / 1000}&endTime=${this.state.end.getTime() / 1000}&userId=${getId()}${getUserGroup()}`;\n    if (e !== 'all') {\n      uri += `&resource=${e}`;\n    }\n    if (search) {\n      uri += `&search=${search}`;\n    }\n    if (this.state.namespace !== undefined) {\n      uri += `&namespace=${this.state.namespace}`;\n    }\n    if (this.state.status !== this.statuslist.all) {\n      uri += `&status=${this.state.status}`;\n    }\n    if (this.state.code !== this.codeList.all) {\n      uri += `&code=${this.state.code}`;\n    }\n\n    coFetchJSON(uri).then(response => {\n      // console.log(response.items);\n      this.setState({\n        data: response.eventList.Items,\n        pages: Math.ceil(response.rowsCount / 100),\n      });\n    });\n  }\n\n  onChangeAction_(value) {\n    if (value !== 'all') {\n      this.setState({\n        action: value,\n      });\n    } else {\n      this.setState({\n        action: this.state.actionList.all,\n      });\n    }\n\n    this.setState({ offset: 0 });\n    const search = getQueryArgument('user');\n\n    let uri = `${document.location.origin}/api/webhook/audit?limit=100&offset=0&startTime=${this.state.start.getTime() / 1000}&endTime=${this.state.end.getTime() / 1000}&userId=${getId()}${getUserGroup()}`;\n    if (value !== 'all') {\n      uri += `&verb=${value}`;\n    }\n    if (search) {\n      uri += `&search=${search}`;\n    }\n    if (this.state.resourceType !== this.resourcelist.all) {\n      uri += `&resource=${this.state.resourceType}`;\n    }\n    if (this.state.namespace !== undefined) {\n      uri += `&namespace=${this.state.namespace}`;\n    }\n    if (this.state.status !== this.statuslist.all) {\n      uri += `&status=${this.state.status}`;\n    }\n    if (this.state.code !== this.codeList.all) {\n      uri += `&code=${this.state.code}`;\n    }\n    coFetchJSON(uri)\n      .then(response => {\n        // console.log(response);\n        this.setState({\n          data: response.eventList.Items,\n          pages: Math.ceil(response.rowsCount / 100),\n        });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  onChangeStatus_(value) {\n    if (value !== 'all') {\n      this.setState({\n        status: value,\n      });\n    } else {\n      this.setState({\n        status: this.statuslist.all,\n      });\n    }\n\n    const search = getQueryArgument('user');\n    this.setState({ offset: 0 });\n\n    let uri = `${document.location.origin}/api/webhook/audit?limit=100&offset=0&startTime=${this.state.start.getTime() / 1000}&endTime=${this.state.end.getTime() / 1000}&userId=${getId()}${getUserGroup()}`;\n    if (value !== 'all') {\n      uri += `&status=${value}`;\n    }\n    if (search) {\n      uri += `&search=${search}`;\n    }\n    if (this.state.resourceType !== this.resourcelist.all) {\n      uri += `&resource=${this.state.resourceType}`;\n    }\n    if (this.state.namespace !== undefined) {\n      uri += `&namespace=${this.state.namespace}`;\n    }\n\n    if (this.state.action !== this.state.actionList.all) {\n      uri += `&verb=${this.state.action}`;\n    }\n    if (this.state.code !== this.codeList.all) {\n      uri += `&code=${this.state.code}`;\n    }\n    coFetchJSON(uri).then(response => {\n      // console.log(response.items);\n      this.setState({\n        data: response.eventList.Items,\n        pages: Math.ceil(response.rowsCount / 100),\n      });\n    });\n  }\n\n  onChangeCode_(value) {\n    if (value !== 'all') {\n      this.setState({\n        code: value,\n      });\n    } else {\n      this.setState({\n        code: this.codeList.all,\n      });\n    }\n\n    this.setState({ offset: 0 });\n    const search = getQueryArgument('user');\n\n    let uri = `${document.location.origin}/api/webhook/audit?limit=100&offset=0&startTime=${this.state.start.getTime() / 1000}&endTime=${this.state.end.getTime() / 1000}&userId=${getId()}${getUserGroup()}`;\n    if (value !== 'all') {\n      uri += `&code=${value}`;\n    }\n    if (search) {\n      uri += `&search=${search}`;\n    }\n    if (this.state.resourceType !== this.resourcelist.all) {\n      uri += `&resource=${this.state.resourceType}`;\n    }\n    if (this.state.namespace !== undefined) {\n      uri += `&namespace=${this.state.namespace}`;\n    }\n    if (this.state.status !== this.statuslist.all) {\n      uri += `&status=${this.state.status}`;\n    }\n    if (this.state.action !== this.state.actionList.all) {\n      uri += `&verb=${this.state.action}`;\n    }\n    coFetchJSON(uri).then(response => {\n      // console.log(response.items);\n      this.setState({\n        data: response.eventList.Items,\n        pages: Math.ceil(response.rowsCount / 100),\n      });\n    });\n  }\n\n  onChangeStartDate_(value) {\n    let date = new Date(value);\n    let date_ = new Date(value);\n    this.setState({\n      start: date,\n    });\n\n    this.setState({ offset: 0 });\n    const search = getQueryArgument('user');\n\n    let uri = `${document.location.origin}/api/webhook/audit?limit=100&offset=0&startTime=${date.getTime() / 1000}&userId=${getId()}${getUserGroup()}`;\n\n    date_.setDate(date_.getDate() + 7);\n    if (date_ < this.state.end || date > this.state.end) {\n      this.setState({\n        end: date_,\n      });\n      uri += `&endTime=${date_.getTime() / 1000}`;\n    } else {\n      uri += `&endTime=${this.state.end.getTime() / 1000}`;\n    }\n\n    if (search) {\n      uri += `&search=${search}`;\n    }\n    if (this.state.resourceType !== this.resourcelist.all) {\n      uri += `&resource=${this.state.resourceType}`;\n    }\n    if (this.state.action !== this.state.actionList.all) {\n      uri += `&verb=${this.state.action}`;\n    }\n    if (this.state.namespace !== undefined) {\n      uri += `&namespace=${this.state.namespace}`;\n    }\n    if (this.state.status !== this.statuslist.all) {\n      uri += `&status=${this.state.status}`;\n    }\n    if (this.state.code !== this.codeList.all) {\n      uri += `&code=${this.state.code}`;\n    }\n    coFetchJSON(uri).then(response => {\n      // console.log(response.items);\n      this.setState({\n        data: response.eventList.Items,\n        pages: Math.ceil(response.rowsCount / 100),\n      });\n    });\n  }\n\n  onChangeEndDate_(value) {\n    let date = new Date(value);\n    let date_ = new Date(value);\n    this.setState({\n      end: date,\n    });\n\n    this.setState({ offset: 0 });\n    const search = getQueryArgument('user');\n\n    let uri = `${document.location.origin}/api/webhook/audit?limit=100&offset=0&endTime=${date.getTime() / 1000}&userId=${getId()}${getUserGroup()}`;\n\n    date_.setDate(date_.getDate() - 7);\n    if (date_ <= this.state.start) {\n      uri += `&startTime=${this.state.start.getTime() / 1000}`;\n    } else {\n      this.setState({\n        start: date_,\n      });\n      uri += `&startTime=${date_.getTime() / 1000}`;\n    }\n\n    if (search) {\n      uri += `&search=${search}`;\n    }\n    if (this.state.resourceType !== this.resourcelist.all) {\n      uri += `&resource=${this.state.resourceType}`;\n    }\n    if (this.state.action !== this.state.actionList.all) {\n      uri += `&verb=${this.state.action}`;\n    }\n    if (this.state.namespace !== undefined) {\n      uri += `&namespace=${this.state.namespace}`;\n    }\n    if (this.state.status !== this.statuslist.all) {\n      uri += `&status=${this.state.status}`;\n    }\n    if (this.state.code !== this.codeList.all) {\n      uri += `&code=${this.state.code}`;\n    }\n    coFetchJSON(uri).then(response => {\n      // console.log(response.items);\n      this.setState({\n        data: response.eventList.Items,\n        pages: Math.ceil(response.rowsCount / 100),\n      });\n    });\n  }\n\n  onChangePage_(e) {\n    // console.log(e.selected);\n    this.setState({\n      offset: e.selected,\n      textFilter: '',\n    });\n\n    const search = getQueryArgument('user');\n    // let uri = `${document.location.origin}/api/webhook/audit?limit=100&offset=${e.selected * 100}&startTime=${this.state.start.getTime() / 1000}&endTime=${this.state.end.getTime() / 1000}`;\n    let uri = `${document.location.origin}/api/webhook/audit?limit=100&offset=${e.selected * 100}&userId=${getId()}${getUserGroup()}`;\n\n    if (search) {\n      uri += `&search=${search}`;\n    }\n    if (this.state.action !== this.state.actionList.all) {\n      uri += `&verb=${this.state.action}`;\n    }\n    if (this.state.resourceType !== this.resourcelist.all) {\n      uri += `&resource=${this.state.resourceType}`;\n    }\n    if (this.state.namespace !== undefined) {\n      uri += `&namespace=${this.state.namespace}`;\n    }\n    if (this.state.status !== this.statuslist.all) {\n      uri += `&status=${this.state.status}`;\n    }\n    if (this.state.code !== this.codeList.all) {\n      uri += `&code=${this.state.code}`;\n    }\n    coFetchJSON(uri).then(response => {\n      // console.log(response.items);\n      this.setState({\n        data: response.eventList.Items,\n        pages: Math.ceil(response.rowsCount / 100),\n      });\n    });\n  }\n\n  onSearch_(e) {\n    // if (e.key !== 'Enter') {\n    //   return;\n    // }\n\n    let value = e;\n\n    value ? setQueryArgument('user', value) : removeQueryArgument('user');\n    this.setState({\n      offset: 0,\n    });\n\n    let uri = `${document.location.origin}/api/webhook/audit?limit=100&offset=0&startTime=${this.state.start.getTime() / 1000}&endTime=${this.state.end.getTime() / 1000}&userId=${getId()}${getUserGroup()}`;\n\n    if (value) {\n      uri += `&search=${value}`;\n    }\n    if (this.state.action !== this.state.actionList.all) {\n      uri += `&verb=${this.state.action}`;\n    }\n    if (this.state.resourceType !== this.resourcelist.all) {\n      uri += `&resource=${this.state.resourceType}`;\n    }\n    if (this.state.namespace !== undefined) {\n      uri += `&namespace=${this.state.namespace}`;\n    }\n    if (this.state.status !== this.statuslist.all) {\n      uri += `&status=${this.state.status}`;\n    }\n    if (this.state.code !== this.codeList.all) {\n      uri += `&code=${this.state.code}`;\n    }\n    coFetchJSON(uri).then(response => {\n      // console.log(response.items);\n      this.setState({\n        data:\n          response.eventList?.Items?.filter(cur => {\n            if (cur.User.username.indexOf(value) >= 0) {\n              return true;\n            } else {\n              return false;\n            }\n          }) ?? [],\n        pages: Math.ceil(response.rowsCount / 100),\n      });\n    });\n  }\n\n  componentDidUpdate() {\n    const namespace = _.get(this.props, 'match.params.ns');\n    const { t, i18n } = this.props;\n    console.log(this.props.i18n.language);\n    if (i18n.language !== this.state.language) {\n      this.resourcelist.all = t('SINGLE:MSG_AUDITLOGS_MAIN_RESOURCEFILTER_1');\n      this.codeList = { all: t('SINGLE:MSG_AUDITLOGS_MAIN_CODEFILTER_1'), 100: t('SINGLE:MSG_AUDITLOGS_MAIN_CODEFILTER_2'), 200: t('SINGLE:MSG_AUDITLOGS_MAIN_CODEFILTER_3'), 300: t('SINGLE:MSG_AUDITLOGS_MAIN_CODEFILTER_4'), 400: t('SINGLE:MSG_AUDITLOGS_MAIN_CODEFILTER_5'), 500: t('SINGLE:MSG_AUDITLOGS_MAIN_CODEFILTER_6') };\n      this.statuslist = { all: t('SINGLE:MSG_AUDITLOGS_MAIN_STATUSFILTER_1'), Success: t('SINGLE:MSG_AUDITLOGS_MAIN_STATUSFILTER_2'), Failure: t('SINGLE:MSG_AUDITLOGS_MAIN_STATUSFILTER_3') };\n      if (this.state.resourceType === 'All Resource Types' || '전체 리소스 타입') {\n        this.setState({\n          actionList: { all: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_1') },\n        });\n      } else if (this.state.resourceType === 'users') {\n        this.setState({\n          actionList: { all: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_1'), create: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_2'), delete: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_3'), patch: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_6'), update: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_7'), login: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_4'), logout: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_5') },\n        });\n      } else {\n        this.setState({\n          actionList: { all: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_1'), create: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_2'), delete: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_3'), patch: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_6'), update: t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_7') },\n        });\n      }\n      this.setState({\n        namespace: namespace,\n        offset: 0,\n        resourceType: this.state.resourceType === 'All Resource Types' || '전체 리소스 타입' ? t('SINGLE:MSG_AUDITLOGS_MAIN_RESOURCEFILTER_1') : this.state.resourceType,\n        action: this.state.actionList.all === 'All Actions' || '전체 액션' ? t('SINGLE:MSG_AUDITLOGS_MAIN_ACTIONFILTER_1') : this.state.actionList.all,\n        status: this.statuslist.all === 'All Status' || '전체 상태' ? t('SINGLE:MSG_AUDITLOGS_MAIN_STATUSFILTER_1') : this.state.statuslist.all,\n        code: this.codeList.all === 'All Codes' || '전체 코드' ? t('SINGLE:MSG_AUDITLOGS_MAIN_CODEFILTER_1') : this.state.statuslist.all,\n        language: i18n.language,\n      });\n    }\n    if (namespace !== this.state.namespace) {\n      this.setState({\n        namespace: namespace,\n        offset: 0,\n        resourceType: this.resourcelist.all,\n        action: this.state.actionList.all,\n        status: this.statuslist.all,\n        code: this.codeList.all,\n      });\n      const search = getQueryArgument('user');\n\n      let uri = `${document.location.origin}/api/webhook/audit?limit=100&offset=0&startTime=${this.state.start.getTime() / 1000}&endTime=${this.state.end.getTime() / 1000}&userId=${getId()}${getUserGroup()}`;\n\n      if (search) {\n        uri += `&search=${search}`;\n      }\n      if (namespace === undefined) {\n        // all namespace\n        coFetchJSON(uri).then(response => {\n          // console.log(response.items);\n          this.setState({\n            data: response.eventList.Items,\n            pages: Math.ceil(response.rowsCount / 100),\n          });\n        });\n      } else {\n        uri += `&namespace=${namespace}`;\n        coFetchJSON(uri).then(response => {\n          // console.log(response.items);\n          this.setState({\n            data: response.eventList.Items,\n            pages: Math.ceil(response.rowsCount / 100),\n          });\n        });\n      }\n    }\n  }\n\n  componentDidMount() {\n    const namespace = _.get(this.props, 'match.params.ns');\n    this.setState({ namespace: namespace });\n    this.setState({ action: this.state.actionList.all });\n    const search = getQueryArgument('user');\n    let uri = `${document.location.origin}/api/webhook/audit?limit=100&offset=${this.state.offset}&startTime=${this.state.start.getTime() / 1000}&endTime=${this.state.end.getTime() / 1000}&userId=${getId()}${getUserGroup()}`;\n\n    if (search) {\n      uri += `&search=${search}`;\n    }\n    if (namespace === undefined) {\n      // all namespace\n      coFetchJSON(uri).then(response => {\n        // console.log(response.items);\n        this.setState({\n          data: response.eventList.Items,\n          pages: Math.ceil(response.rowsCount / 100),\n        });\n      });\n    } else {\n      uri += `&namespace=${namespace}`;\n      coFetchJSON(uri).then(response => {\n        // console.log(response.items);\n        this.setState({\n          data: response.eventList.Items,\n          pages: Math.ceil(response.rowsCount / 100),\n        });\n      });\n    }\n  }\n  onIconClick = e => {\n    const datePickerElem = e.target.previousElementSibling.firstChild.firstChild;\n    datePickerElem.focus();\n  };\n\n  render() {\n    const { t } = this.props;\n    const { data, start, end, textFilter, actionList } = this.state;\n\n    return (\n      <React.Fragment>\n        <div>\n          <Helmet>\n            <title>{t('COMMON:MSG_LNB_MENU_5')}</title>\n          </Helmet>\n          <PageHeading detail={true} title={t('COMMON:MSG_LNB_MENU_5')}>\n            <div className=\"co-m-pane__filter-bar\" style={{ marginBottom: 0, marginLeft: 0 }}>\n              <div className=\"co-m-pane__filter-bar-group\">\n                <Dropdown title={this.state.resourceType} className=\"btn-group btn-group-audit\" items={this.resourcelist} onChange={this.onChangeResourceType} />\n                <Dropdown title={this.state.action} className=\"btn-group\" items={actionList} onChange={this.onChangeAction} />\n                <Dropdown title={this.state.status} className=\"btn-group\" items={this.statuslist} onChange={this.onChangeStatus} />\n                <Dropdown style={{ marginRight: '30px' }} title={this.state.code} className=\"btn-group\" items={this.codeList} onChange={this.onChangeCode} />\n                <p style={{ marginRight: '10px', lineHeight: '30px' }}>{t('SINGLE:MSG_AUDITLOGS_MAIN_SEARCHPERIOD_1')}</p>\n                <div className=\"co-datepicker-wrapper\">\n                  <DatePicker className=\"co-datepicker\" placeholderText=\"From\" startDate={start} endDate={end} selected={start} onChange={this.onChangeStartDate} />\n                  <i className=\"fa fa-calendar\" aria-hidden=\"true\" onClick={this.onIconClick}></i>\n                </div>\n                <p style={{ marginRight: '10px', lineHeight: '30px' }}>{t('SINGLE:MSG_AUDITLOGS_MAIN_SEARCHPERIOD_2')}</p>\n                <div className=\"co-datepicker-wrapper\">\n                  <DatePicker className=\"co-datepicker\" placeholderText=\"To\" startDate={start} endDate={end} selected={end} onChange={this.onChangeEndDate} minDate={start} maxDate={new Date()} />\n                  <i className=\"fa fa-calendar\" aria-hidden=\"true\" onClick={this.onIconClick}></i>\n                </div>\n              </div>\n              <div className=\"co-m-pane__filter-bar-group co-m-pane__filter-bar-group--filter\">\n                <TextFilter id=\"audit\" label=\"Filter User Account\" autoFocus={true} onChange={this.onSearch} />\n              </div>\n            </div>\n          </PageHeading>\n\n          <AuditList {...this.props} textFilter={textFilter} data={data} />\n          {data && data.length !== 0 && (\n            <div className=\"pagination-div\">\n              <ReactPaginate previousLabel={'<'} nextLabel={'>'} breakLabel={'...'} breakClassName={'break-me'} pageCount={this.state.pages} marginPagesDisplayed={2} pageRangeDisplayed={5} onPageChange={this.onChangePage} containerClassName={'pagination'} subContainerClassName={'pages pagination'} activeClassName={'active'} forcePage={this.state.offset} />\n            </div>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nclass AuditList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filteredEvents: [],\n      items: [],\n    };\n\n    this.rowRenderer = function rowRenderer({ index, style, key }) {\n      const event = this.state.filteredEvents[index];\n      return <SysEvent {...event} key={key} style={style} index={index} />;\n    }.bind(this);\n  }\n\n  static filterEvents(messages, { textFilter }) {\n    const words = _.uniq(_.toLower(textFilter).match(/\\S+/g)).sort((a, b) => {\n      // Sort the longest words first.\n      return b.length - a.length;\n    });\n\n    const textMatches = obj => {\n      if (_.isEmpty(words)) {\n        return true;\n      }\n      const message = _.get(obj, 'responseStatus.message', '');\n      return _.every(words, word => message.indexOf(word) !== -1);\n    };\n\n    const f = obj => {\n      if (!textMatches(obj)) {\n        return false;\n      }\n      return true;\n    };\n\n    return _.filter(messages, f);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { textFilter, filteredEvents, items } = prevState;\n\n    if (textFilter === nextProps.textFilter && filteredEvents === nextProps.data) {\n      return {};\n    }\n\n    return {\n      filteredEvents: AuditList.filterEvents(nextProps.data, nextProps),\n      items: AuditList.filterEvents(nextProps.data, nextProps).map((item, index) => <SysEvent {...item} key={index} index={index} />),\n      textFilter: nextProps.textFilter,\n    };\n  }\n\n  // componentDidMount() {\n  //   super.componentDidMount();\n  // }\n\n  // componentWillUnmount() {\n  //   super.componentWillUnmount();\n  // }\n\n  render() {\n    const { items } = this.state;\n\n    let count;\n    if (this.state.filteredEvents) {\n      count = this.state.filteredEvents.length;\n    } else {\n      count = 0;\n    }\n    const noEvents = count === 0;\n    let sysEventStatus;\n    if (noEvents) {\n      sysEventStatus = (\n        <Box className=\"co-sysevent-stream__status-box-empty\">\n          <div className=\"text-center cos-status-box__detail\">로그가 없습니다. </div>\n        </Box>\n      );\n    }\n\n    const klass = classNames('co-sysevent-stream__timeline co-sysevent-audit__timeline', {\n      'co-sysevent-stream__timeline--empty': !count,\n    });\n\n    // console.log(items);\n    const len = `${items.length * 110 + 51}px`;\n    const timelineLen = `${items.length * 110 - 110}px`;\n    return (\n      <div className=\"co-m-pane__body\" style={{ border: 'none' }}>\n        <div className=\"co-sysevent-stream co-sysevent-audit\" style={{ height: len }}>\n          <div className={klass} style={{ marginLeft: 0, height: timelineLen }}></div>\n          {items !== undefined && items}\n          {sysEventStatus}\n        </div>\n      </div>\n    );\n  }\n}\n\nAuditList.propTypes = {\n  textFilter: PropTypes.string,\n};\n\nexport const AuditPage = withTranslation()(AuditPage_);\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AACA;;AAAA;;AAAA;;AAAA;AACA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AAglBA;AACA;AACA;AACA;AAllsourceRoot":""}