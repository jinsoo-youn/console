{"version":3,"file":"cluster-operator-2ee1846367952014e1d3.js","sources":["webpack:///./public/components/cluster-settings/cluster-operator.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { Alert } from '@patternfly/react-core';\nimport { SyncAltIcon, UnknownIcon } from '@patternfly/react-icons';\n\nimport { ClusterOperatorModel } from '../../models';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { Conditions } from '../conditions';\nimport {\n  getClusterOperatorStatus,\n  getClusterOperatorVersion,\n  getClusterVersionCondition,\n  getStatusAndMessage,\n  ClusterOperator,\n  ClusterVersionConditionType,\n  ClusterVersionKind,\n  K8sResourceConditionStatus,\n  K8sResourceKindReference,\n  OperandVersion,\n  OperatorStatus,\n  referenceForModel,\n} from '../../module/k8s';\nimport {\n  navFactory,\n  EmptyBox,\n  Kebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n} from '../utils';\nimport { GreenCheckCircleIcon, YellowExclamationTriangleIcon } from '@console/shared';\n\nexport const clusterOperatorReference: K8sResourceKindReference = referenceForModel(\n  ClusterOperatorModel,\n);\n\nconst getIcon = (status: OperatorStatus) => {\n  return {\n    [OperatorStatus.Available]: <GreenCheckCircleIcon />,\n    [OperatorStatus.Updating]: <SyncAltIcon />,\n    [OperatorStatus.Degraded]: <YellowExclamationTriangleIcon />,\n    [OperatorStatus.Unknown]: <UnknownIcon />,\n  }[status];\n};\n\nconst OperatorStatusIconAndLabel: React.SFC<OperatorStatusIconAndLabelProps> = ({ status }) => {\n  const icon = getIcon(status);\n  return (\n    <>\n      {icon} {status}\n    </>\n  );\n};\n\nconst tableColumnClasses = [\n  classNames('col-md-3', 'col-sm-3', 'col-xs-6'),\n  classNames('col-md-2', 'col-sm-3', 'col-xs-6'),\n  classNames('col-md-3', 'col-sm-3', 'hidden-xs'),\n  classNames('col-md-4', 'col-sm-3', 'hidden-xs'),\n  Kebab.columnClass,\n];\n\nconst ClusterOperatorTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Status',\n      sortFunc: 'getClusterOperatorStatus',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Version',\n      sortFunc: 'getClusterOperatorVersion',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Message',\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n};\nClusterOperatorTableHeader.displayName = 'ClusterOperatorTableHeader';\n\nconst ClusterOperatorTableRow: RowFunction<ClusterOperator> = ({ obj, index, key, style }) => {\n  const { status, message } = getStatusAndMessage(obj);\n  const operatorVersion = getClusterOperatorVersion(obj);\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={clusterOperatorReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.name}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        <OperatorStatusIconAndLabel status={status} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>{operatorVersion || '-'}</TableData>\n      <TableData className={classNames(tableColumnClasses[3], 'co-break-word', 'co-pre-line')}>\n        {message ? _.truncate(message, { length: 256, separator: ' ' }) : '-'}\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const ClusterOperatorList: React.SFC = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Cluster Operators\"\n    Header={ClusterOperatorTableHeader}\n    Row={ClusterOperatorTableRow}\n    virtualize\n  />\n);\n\nconst allStatuses = [\n  OperatorStatus.Available,\n  OperatorStatus.Updating,\n  OperatorStatus.Degraded,\n  OperatorStatus.Unknown,\n];\n\nconst filters = [\n  {\n    filterGroupName: 'Status',\n    type: 'cluster-operator-status',\n    reducer: getClusterOperatorStatus,\n    items: _.map(allStatuses, (phase) => ({\n      id: phase,\n      title: phase,\n    })),\n  },\n];\n\nconst UpdateInProgressAlert: React.SFC<UpdateInProgressAlertProps> = ({ cv }) => {\n  const updateCondition = getClusterVersionCondition(\n    cv,\n    ClusterVersionConditionType.Progressing,\n    K8sResourceConditionStatus.True,\n  );\n  return (\n    <>\n      {updateCondition && (\n        <div className=\"co-m-pane__body co-m-pane__body--section-heading\">\n          <Alert isInline className=\"co-alert\" variant=\"info\" title=\"Cluster update in progress.\">\n            {updateCondition.message}\n          </Alert>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport const ClusterOperatorPage: React.SFC<ClusterOperatorPageProps> = (props) => (\n  <>\n    <UpdateInProgressAlert cv={props.cv} />\n    <ListPage\n      {...props}\n      title=\"Cluster Operators\"\n      kind={clusterOperatorReference}\n      ListComponent={ClusterOperatorList}\n      canCreate={false}\n      rowFilters={filters}\n    />\n  </>\n);\n\nconst OperandVersions: React.SFC<OperandVersionsProps> = ({ versions }) => {\n  return _.isEmpty(versions) ? (\n    <EmptyBox label=\"Versions\" />\n  ) : (\n    <div className=\"co-table-container\">\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Version</th>\n          </tr>\n        </thead>\n        <tbody>\n          {_.map(versions, ({ name, version }, i) => (\n            <tr key={i}>\n              <td>{name}</td>\n              <td>{version}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst ClusterOperatorDetails: React.SFC<ClusterOperatorDetailsProps> = ({ obj }) => {\n  const { status, message } = getStatusAndMessage(obj);\n  const versions: OperandVersion[] = _.get(obj, 'status.versions', []);\n  const conditions = _.get(obj, 'status.conditions', []);\n  // Show the operator version in the details if it's the only version.\n  const operatorVersion =\n    versions.length === 1 && versions[0].name === 'operator' ? versions[0].version : null;\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Cluster Operator Details\" />\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={obj} />\n          </div>\n          <div className=\"col-sm-6\">\n            <dl>\n              {operatorVersion && (\n                <>\n                  <dt>Version</dt>\n                  <dd>{operatorVersion}</dd>\n                </>\n              )}\n              <dt>Status</dt>\n              <dd>\n                <OperatorStatusIconAndLabel status={status} />\n              </dd>\n              <dt>Message</dt>\n              <dd className=\"co-pre-line\">{message || '-'}</dd>\n            </dl>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Conditions\" />\n        <Conditions conditions={conditions} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Operand Versions\" />\n        <OperandVersions versions={versions} />\n      </div>\n    </>\n  );\n};\n\nexport const ClusterOperatorDetailsPage: React.SFC<ClusterOperatorDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    kind={clusterOperatorReference}\n    pages={[navFactory.details(ClusterOperatorDetails), navFactory.editYaml()]}\n    breadcrumbsFor={() => [\n      { name: 'Cluster Operators', path: '/settings/cluster/clusteroperators' },\n      { name: 'Cluster Operator Details', path: props.match.url },\n    ]}\n  />\n);\n\ntype OperatorStatusIconAndLabelProps = {\n  status: OperatorStatus;\n};\n\ntype ClusterOperatorPageProps = {\n  cv: ClusterVersionKind;\n  autoFocus?: boolean;\n  showTitle?: boolean;\n};\n\ntype OperandVersionsProps = {\n  versions: OperandVersion[];\n};\n\ntype ClusterOperatorDetailsProps = {\n  obj: ClusterOperator;\n};\n\ntype ClusterOperatorDetailsPageProps = {\n  match: any;\n};\n\ntype UpdateInProgressAlertProps = {\n  cv: ClusterVersionKind;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAcA;AAQA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AACA;AAKA;AAEA;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAIA;AAOA;AAEA;AAEA;AACA;AAWA;AACA;AAIA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AAMA;AACA;AACA;;;;;A","sourceRoot":""}