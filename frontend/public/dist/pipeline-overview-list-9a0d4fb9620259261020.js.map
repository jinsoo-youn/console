{"version":3,"file":"pipeline-overview-list-9a0d4fb9620259261020.js","sources":["webpack:///./packages/dev-console/src/components/pipelineruns/triggered-by/ResourceKebabWithUserLabel.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/triggered-by/hooks.ts","webpack:///./packages/dev-console/src/components/pipelineruns/triggered-by/index.ts","webpack:///./packages/dev-console/src/components/pipelines/pipeline-overview/PipelineOverview.tsx","webpack:///./packages/dev-console/src/components/pipelines/pipeline-overview/PipelineRunItem.tsx","webpack:///./packages/dev-console/src/components/pipelines/pipeline-overview/TriggerLastRunButton.tsx","webpack:///./packages/dev-console/src/utils/pipeline-actions.tsx"],"sourcesContent":["import * as React from 'react';\nimport { KebabAction, ResourceKebab } from '@console/internal/components/utils';\nimport { useMenuActionsWithUserLabel } from './hooks';\n\nconst ResourceKebabWithUserLabel: React.FC<React.ComponentProps<typeof ResourceKebab>> = ({\n  actions,\n  ...otherProps\n}) => {\n  const augmentedMenuActions: KebabAction[] = useMenuActionsWithUserLabel(actions);\n\n  return <ResourceKebab {...otherProps} actions={augmentedMenuActions} />;\n};\n\nexport default ResourceKebabWithUserLabel;\n","import { merge } from 'lodash';\n// FIXME react-redux types are 6.x while react-redux is 7.x\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport { useSelector } from 'react-redux';\nimport { KebabAction } from '@console/internal/components/utils';\nimport { K8sResourceCommon } from '@console/internal/module/k8s';\nimport { PipelineRun } from '../../../utils/pipeline-augment';\nimport { StartedByLabel } from '../../pipelines/const';\n\ntype LabelMap = { [labelKey: string]: string };\n\nconst mergeLabelsWithResource = (labels: LabelMap, resource: K8sResourceCommon) => {\n  return merge({}, resource, { metadata: { labels } });\n};\n\nexport const useUserLabelForManualStart = (): LabelMap => {\n  const user = useSelector((state) => state.UI.get('user'));\n\n  return {\n    // kube:admin is an invalid k8s label value\n    [StartedByLabel.user]: user.metadata.name.replace(/:/, ''),\n  };\n};\n\nexport const usePipelineRunWithUserLabel = (plr: PipelineRun): PipelineRun => {\n  const labels = useUserLabelForManualStart();\n\n  return plr && mergeLabelsWithResource(labels, plr);\n};\n\nexport const useMenuActionsWithUserLabel = (menuActions: KebabAction[]): KebabAction[] => {\n  const labels = useUserLabelForManualStart();\n\n  return menuActions.map((kebabAction) => {\n    return (kind, resource, ...rest) =>\n      kebabAction(kind, mergeLabelsWithResource(labels, resource), ...rest);\n  });\n};\n","export * from './hooks';\nexport { default as ResourceKebabWithUserLabel } from './ResourceKebabWithUserLabel';\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport {\n  SidebarSectionHeading,\n  ResourceLink,\n  resourcePath,\n} from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { PipelineRunModel, PipelineModel } from '@console/dev-console/src/models';\nimport { TopologyOverviewItem } from '../../topology/topology-types';\nimport TriggerLastRunButton from './TriggerLastRunButton';\nimport PipelineRunItem from './PipelineRunItem';\n\nconst MAX_VISIBLE = 3;\n\ntype PipelinesOverviewProps = {\n  item: TopologyOverviewItem;\n};\n\nconst PipelinesOverview: React.FC<PipelinesOverviewProps> = ({\n  item: {\n    pipelines: [pipeline],\n    pipelineRuns,\n  },\n}) => {\n  const {\n    metadata: { name, namespace },\n  } = pipeline;\n  return (\n    <>\n      <SidebarSectionHeading text={PipelineRunModel.labelPlural}>\n        {pipelineRuns.length > MAX_VISIBLE && (\n          <Link\n            className=\"sidebar__section-view-all\"\n            to={`${resourcePath(referenceForModel(PipelineModel), name, namespace)}/Runs`}\n          >\n            {`View all (${pipelineRuns.length})`}\n          </Link>\n        )}\n      </SidebarSectionHeading>\n      <ul className=\"list-group\">\n        <li className=\"list-group-item pipeline-overview\">\n          <Flex breakpointMods={[{ modifier: 'justify-content-space-between' }] as any}>\n            <FlexItem>\n              <ResourceLink\n                inline\n                kind={referenceForModel(PipelineModel)}\n                name={name}\n                namespace={namespace}\n              />\n            </FlexItem>\n            <FlexItem>\n              <TriggerLastRunButton pipelineRuns={pipelineRuns} namespace={namespace} />\n            </FlexItem>\n          </Flex>\n        </li>\n        {_.take(pipelineRuns, MAX_VISIBLE).map((pr) => (\n          <PipelineRunItem key={pr.metadata.uid} pipelineRun={pr} />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default PipelinesOverview;\n","import * as React from 'react';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { resourcePath } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { Status } from '@console/shared';\nimport { fromNow } from '@console/internal/components/utils/datetime';\nimport { pipelineRunStatus } from '../../../utils/pipeline-filter-reducer';\nimport { PipelineRunModel } from '../../../models';\nimport { PipelineRun } from '../../../utils/pipeline-augment';\n\ntype PipelineRunItemProps = {\n  pipelineRun: PipelineRun;\n};\n\nconst PipelineRunItem: React.FC<PipelineRunItemProps> = ({ pipelineRun }) => {\n  const {\n    metadata: { name, namespace, creationTimestamp },\n    status,\n  } = pipelineRun;\n  const path = resourcePath(referenceForModel(PipelineRunModel), name, namespace);\n  const lastUpdated = status\n    ? status.completionTime || status.startTime || creationTimestamp\n    : creationTimestamp;\n  return (\n    <li className=\"list-group-item\">\n      <Grid gutter=\"md\">\n        <GridItem span={6}>\n          <Link to={`${path}`}>{name}</Link>\n          {lastUpdated && <span className=\"text-muted\">&nbsp;({fromNow(lastUpdated)})</span>}\n        </GridItem>\n        <GridItem span={3}>\n          <Status status={pipelineRunStatus(pipelineRun) || 'Pending'} />\n        </GridItem>\n        <GridItem span={3} className=\"text-right\">\n          <Link to={`${path}/logs`}>View logs</Link>\n        </GridItem>\n      </Grid>\n    </li>\n  );\n};\n\nexport default PipelineRunItem;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\nimport { impersonateStateToProps } from '@console/internal/reducers/ui';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { AccessReviewResourceAttributes } from '@console/internal/module/k8s';\nimport { rerunPipelineAndStay } from '../../../utils/pipeline-actions';\nimport { PipelineRunModel } from '../../../models';\nimport { usePipelineRunWithUserLabel } from '../../pipelineruns/triggered-by';\nimport { getLatestRun, PipelineRun } from '../../../utils/pipeline-augment';\n\ntype TriggerLastRunButtonProps = {\n  pipelineRuns: PipelineRun[];\n  namespace: string;\n  impersonate?;\n};\n\nconst TriggerLastRunButton: React.FC<TriggerLastRunButtonProps> = ({\n  pipelineRuns,\n  namespace,\n  impersonate,\n}) => {\n  const latestRun = usePipelineRunWithUserLabel(\n    getLatestRun({ data: pipelineRuns }, 'startTimestamp'),\n  );\n  const { label, callback, accessReview: utilityAccessReview } = rerunPipelineAndStay(\n    PipelineRunModel,\n    latestRun,\n  );\n  const defaultAccessReview: AccessReviewResourceAttributes = {\n    group: PipelineRunModel.apiGroup,\n    resource: PipelineRunModel.plural,\n    namespace,\n    verb: 'create',\n  };\n  const accessReview = _.isEmpty(utilityAccessReview) ? defaultAccessReview : utilityAccessReview;\n  const isAllowed = useAccessReview(accessReview, impersonate);\n  return (\n    isAllowed && (\n      <Button\n        variant=\"secondary\"\n        onClick={callback}\n        isDisabled={pipelineRuns.length === 0 && !callback}\n      >\n        {label}\n      </Button>\n    )\n  );\n};\n\nexport default connect(impersonateStateToProps)(TriggerLastRunButton);\n","import * as _ from 'lodash';\nimport {\n  history,\n  resourcePathFromModel,\n  Kebab,\n  KebabAction,\n} from '@console/internal/components/utils';\nimport { k8sCreate, K8sKind, k8sPatch, referenceForModel } from '@console/internal/module/k8s';\nimport { errorModal } from '@console/internal/components/modals';\nimport {\n  addTriggerModal,\n  startPipelineModal,\n  removeTriggerModal,\n} from '../components/pipelines/modals';\nimport { getPipelineRunData } from '../components/pipelines/modals/common/utils';\nimport { StartedByLabel } from '../components/pipelines/const';\nimport { EventListenerModel, PipelineModel, PipelineRunModel } from '../models';\nimport { Pipeline, PipelineRun } from './pipeline-augment';\nimport { pipelineRunFilterReducer } from './pipeline-filter-reducer';\n\nexport const handlePipelineRunSubmit = (pipelineRun: PipelineRun) => {\n  history.push(\n    resourcePathFromModel(\n      PipelineRunModel,\n      pipelineRun.metadata.name,\n      pipelineRun.metadata.namespace,\n    ),\n  );\n};\n\nexport const triggerPipeline = (\n  pipeline: Pipeline,\n  onSubmit?: (pipelineRun: PipelineRun) => void,\n) => {\n  k8sCreate(PipelineRunModel, getPipelineRunData(pipeline))\n    .then(onSubmit)\n    .catch((err) => errorModal({ error: err.message }));\n};\n\nexport const reRunPipelineRun: KebabAction = (kind: K8sKind, pipelineRun: PipelineRun) => ({\n  label: 'Rerun',\n  callback: () => {\n    const namespace = _.get(pipelineRun, 'metadata.namespace');\n    const pipelineRef = _.get(pipelineRun, 'spec.pipelineRef.name');\n    if (namespace && pipelineRef) {\n      k8sCreate(PipelineRunModel, getPipelineRunData(null, pipelineRun));\n    } else {\n      errorModal({ error: 'Invalid Pipeline Run configuration, unable to start Pipeline.' });\n    }\n  },\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    name: pipelineRun.metadata.name,\n    namespace: pipelineRun.metadata.namespace,\n    verb: 'create',\n  },\n});\n\nexport const editPipeline: KebabAction = (kind: K8sKind, pipeline: Pipeline) => ({\n  label: 'Edit Pipeline',\n  callback: () => {\n    const {\n      metadata: { name, namespace },\n    } = pipeline;\n    history.push(`/k8s/ns/${namespace}/${referenceForModel(PipelineModel)}/${name}/builder`);\n  },\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    name: pipeline.metadata.name,\n    namespace: pipeline.metadata.namespace,\n    verb: 'update',\n  },\n});\n\nexport const startPipeline: KebabAction = (\n  kind: K8sKind,\n  pipeline: Pipeline,\n  onSubmit?: (pipelineRun: PipelineRun) => void,\n) => ({\n  label: 'Start',\n  callback: () => {\n    const params = _.get(pipeline, ['spec', 'params'], []);\n    const resources = _.get(pipeline, ['spec', 'resources'], []);\n    const workspaces = _.get(pipeline, ['spec', 'workspaces'], []);\n\n    if (!_.isEmpty(params) || !_.isEmpty(resources) || !_.isEmpty(workspaces)) {\n      startPipelineModal({\n        pipeline,\n        modalClassName: 'modal-lg',\n        onSubmit,\n      });\n    } else {\n      triggerPipeline(pipeline, onSubmit);\n    }\n  },\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    name: pipeline.metadata.name,\n    namespace: pipeline.metadata.namespace,\n    verb: 'create',\n  },\n});\n\ntype RerunPipelineData = {\n  onComplete?: (pipelineRun: PipelineRun) => void;\n  label?: string;\n};\nconst rerunPipeline: KebabAction = (\n  kind: K8sKind,\n  pipelineRun: PipelineRun,\n  resources: any,\n  customData: RerunPipelineData = { label: 'Start Last Run' },\n) => {\n  const { onComplete } = customData;\n\n  const sharedProps = { label: customData.label, accessReview: {} };\n\n  if (\n    !pipelineRun ||\n    !_.has(pipelineRun, 'metadata.name') ||\n    !_.has(pipelineRun, 'metadata.namespace')\n  ) {\n    return sharedProps;\n  }\n\n  return {\n    ...sharedProps,\n    callback: () => {\n      k8sCreate(PipelineRunModel, getPipelineRunData(null, pipelineRun))\n        .then(typeof onComplete === 'function' ? onComplete : () => {})\n        .catch((err) => errorModal({ error: err.message }));\n    },\n    accessReview: {\n      group: kind.apiGroup,\n      resource: kind.plural,\n      name: pipelineRun.metadata.name,\n      namespace: pipelineRun.metadata.namespace,\n      verb: 'create',\n    },\n  };\n};\n\nexport const rerunPipelineAndStay: KebabAction = (kind: K8sKind, pipelineRun: PipelineRun) => {\n  return rerunPipeline(kind, pipelineRun);\n};\n\nexport const rerunPipelineAndRedirect: KebabAction = (kind: K8sKind, pipelineRun: PipelineRun) => {\n  return rerunPipeline(kind, pipelineRun, null, {\n    onComplete: handlePipelineRunSubmit,\n    label: 'Start Last Run',\n  });\n};\n\nexport const rerunPipelineRunAndRedirect: KebabAction = (\n  kind: K8sKind,\n  pipelineRun: PipelineRun,\n) => {\n  return rerunPipeline(kind, pipelineRun, null, {\n    onComplete: handlePipelineRunSubmit,\n    label: 'Rerun',\n  });\n};\n\nexport const stopPipelineRun: KebabAction = (kind: K8sKind, pipelineRun: PipelineRun) => {\n  // The returned function will be called using the 'kind' and 'obj' in Kebab Actions\n  return {\n    label: 'Stop',\n    callback: () => {\n      k8sPatch(\n        PipelineRunModel,\n        {\n          metadata: { name: pipelineRun.metadata.name, namespace: pipelineRun.metadata.namespace },\n        },\n        [\n          {\n            op: 'replace',\n            path: `/spec/status`,\n            value: 'PipelineRunCancelled',\n          },\n        ],\n      );\n    },\n    hidden: !(pipelineRun && pipelineRunFilterReducer(pipelineRun) === 'Running'),\n    accessReview: {\n      group: kind.apiGroup,\n      resource: kind.plural,\n      name: pipelineRun.metadata.name,\n      namespace: pipelineRun.metadata.namespace,\n      verb: 'update',\n    },\n  };\n};\n\nexport const addTrigger: KebabAction = (kind: K8sKind, pipeline: Pipeline) => ({\n  label: 'Add Trigger',\n  callback: () => {\n    const cleanPipeline: Pipeline = {\n      ...pipeline,\n      metadata: {\n        ...pipeline.metadata,\n        labels: _.omit(pipeline.metadata.labels, [StartedByLabel.user]),\n      },\n    };\n    addTriggerModal({ pipeline: cleanPipeline, modalClassName: 'modal-lg' });\n  },\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    name: pipeline.metadata.name,\n    namespace: pipeline.metadata.namespace,\n    verb: 'create',\n  },\n});\n\nconst removeTrigger: KebabAction = (kind: K8sKind, pipeline: Pipeline) => ({\n  label: 'Remove Trigger',\n  callback: () => {\n    removeTriggerModal({ pipeline });\n  },\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    name: pipeline.metadata.name,\n    namespace: pipeline.metadata.namespace,\n    verb: 'delete',\n  },\n});\nexport const getPipelineKebabActions = (\n  pipelineRun?: PipelineRun,\n  isTriggerPresent?: boolean,\n): KebabAction[] => [\n  (model, resource: Pipeline) => startPipeline(model, resource, handlePipelineRunSubmit),\n  ...(pipelineRun ? [() => rerunPipelineAndRedirect(PipelineRunModel, pipelineRun)] : []),\n  (model, pipeline) => addTrigger(EventListenerModel, pipeline),\n  ...(isTriggerPresent ? [(model, pipeline) => removeTrigger(EventListenerModel, pipeline)] : []),\n  editPipeline,\n  Kebab.factory.Delete,\n];\n\nexport const getPipelineRunKebabActions = (redirectReRun?: boolean): KebabAction[] => [\n  redirectReRun ? rerunPipelineRunAndRedirect : reRunPipelineRun,\n  stopPipelineRun,\n  Kebab.factory.Delete,\n];\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAAA;AAIA;AAEA;AACA;AAEA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AAMA;AAMA;AAGA;AAEA;AAUA;AACA;AACA;AACA;AACA;AAOA;AACA;AAIA;AAMA;AAEA;;;;;;;;;;;;;AClEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAKA;AAEA;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AAKA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAEA;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AAOA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAMA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}