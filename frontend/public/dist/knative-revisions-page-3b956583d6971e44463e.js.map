{"version":3,"file":"knative-revisions-page-3b956583d6971e44463e.js","sources":["webpack:///./packages/knative-plugin/src/actions/delete-revision.ts","webpack:///./packages/knative-plugin/src/actions/getRevisionActions.ts","webpack:///./packages/knative-plugin/src/components/revisions/RevisionHeader.tsx","webpack:///./packages/knative-plugin/src/components/revisions/RevisionList.tsx","webpack:///./packages/knative-plugin/src/components/revisions/RevisionRow.tsx","webpack:///./packages/knative-plugin/src/components/revisions/RevisionsPage.tsx","webpack:///./packages/knative-plugin/src/components/revisions/revision-table.ts","webpack:///./packages/knative-plugin/src/utils/condition-utils.ts"],"sourcesContent":["import { KebabOption } from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { deleteRevisionModal } from '../components/modals';\n\nexport const deleteRevision = (model: K8sKind, revision: K8sResourceKind): KebabOption => {\n  return {\n    label: `Delete ${model.label}`,\n    callback: () =>\n      deleteRevisionModal({\n        revision,\n      }),\n    accessReview: {\n      group: model.apiGroup,\n      resource: model.plural,\n      name: revision.metadata.name,\n      namespace: revision.metadata.namespace,\n      verb: 'delete',\n    },\n  };\n};\n","import { Kebab } from '@console/internal/components/utils';\nimport { RevisionModel } from '../models';\nimport { deleteRevision } from './delete-revision';\n\nexport const getRevisionActions = () => {\n  let deleteFound = false;\n  const commonActions = Kebab.factory.common.map((action) => {\n    if (action.name === 'Delete') {\n      deleteFound = true;\n      return deleteRevision;\n    }\n    return action;\n  });\n  if (!deleteFound) {\n    commonActions.push(deleteRevision);\n  }\n  return [...Kebab.getExtensionsActionsForKind(RevisionModel), ...commonActions];\n};\n","import { sortable } from '@patternfly/react-table';\nimport { tableColumnClasses } from './revision-table';\n\nconst RevisionHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Service',\n      sortField: 'metadata.labels[\"serving.knative.dev/service\"]',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Created',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Conditions',\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: 'Ready',\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: 'Reason',\n      props: { className: tableColumnClasses[6] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[7] },\n    },\n  ];\n};\n\nexport default RevisionHeader;\n","import * as React from 'react';\nimport { Table, TableProps } from '@console/internal/components/factory';\nimport { RevisionModel } from '../../models';\nimport RevisionHeader from './RevisionHeader';\nimport RevisionRow from './RevisionRow';\n\nconst RevisionList: React.FC<TableProps> = (props) => (\n  <Table\n    {...props}\n    aria-label={RevisionModel.labelPlural}\n    Header={RevisionHeader}\n    Row={RevisionRow}\n    virtualize\n  />\n);\n\nexport default RevisionList;\n","import * as React from 'react';\nimport * as cx from 'classnames';\nimport * as _ from 'lodash';\nimport { TableRow, TableData, RowFunction } from '@console/internal/components/factory';\nimport { ResourceLink, ResourceKebab, Timestamp } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { RevisionModel, ServiceModel } from '../../models';\nimport { getConditionString, getCondition } from '../../utils/condition-utils';\nimport { RevisionKind, ConditionTypes } from '../../types';\nimport { tableColumnClasses } from './revision-table';\nimport { getRevisionActions } from '../../actions/getRevisionActions';\n\nconst revisionReference = referenceForModel(RevisionModel);\nconst serviceReference = referenceForModel(ServiceModel);\n\nconst RevisionRow: RowFunction<RevisionKind> = ({ obj, index, key, style }) => {\n  const readyCondition = obj.status\n    ? getCondition(obj.status.conditions, ConditionTypes.Ready)\n    : null;\n  const service = _.get(obj.metadata, `labels[\"serving.knative.dev/service\"]`);\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={revisionReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.uid}\n        />\n      </TableData>\n      <TableData className={cx(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={cx(tableColumnClasses[2], 'co-break-word')}>\n        {service && (\n          <ResourceLink\n            kind={serviceReference}\n            name={service}\n            namespace={obj.metadata.namespace}\n            title={service}\n          />\n        )}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        {obj.status ? getConditionString(obj.status.conditions) : '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        {(readyCondition && readyCondition.status) || '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[6]}>\n        {(readyCondition && readyCondition.message) || '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[7]}>\n        <ResourceKebab actions={getRevisionActions()} kind={revisionReference} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport default RevisionRow;\n","import * as React from 'react';\nimport { ListPage } from '@console/internal/components/factory';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { RevisionModel } from '../../models';\nimport RevisionList from './RevisionList';\n\nconst RevisionsPage: React.FC<React.ComponentProps<typeof ListPage>> = (props) => (\n  <ListPage\n    {...props}\n    canCreate={false}\n    kind={referenceForModel(RevisionModel)}\n    ListComponent={RevisionList}\n  />\n);\n\nexport default RevisionsPage;\n","import { Kebab } from '@console/internal/components/utils';\n\nexport const tableColumnClasses = [\n  'col-lg-2 col-md-2 col-sm-4 col-xs-6',\n  'col-lg-2 col-md-2 col-sm-4 col-xs-6',\n  'col-lg-2 col-md-2 col-sm-4 hidden-xs',\n  'col-lg-2 col-md-2 hidden-sm hidden-xs',\n  'col-lg-1 col-md-2 hidden-sm hidden-xs',\n  'col-lg-1 col-md-2 hidden-sm hidden-xs',\n  'col-lg-2 col-md-2 hidden-sm hidden-xs',\n  Kebab.columnClass,\n];\n","import * as _ from 'lodash';\nimport { K8sResourceCondition, K8sResourceConditionStatus } from '@console/internal/module/k8s';\n\nexport const getConditionOKCount = (conditions: K8sResourceCondition[]): number =>\n  _.sumBy<any>(conditions, (c) => Number(c.status === K8sResourceConditionStatus.True));\n\nexport const getConditionString = (conditions: K8sResourceCondition[]): string =>\n  `${getConditionOKCount(conditions)} OK / ${_.size(conditions)}`;\n\nexport const getCondition = (\n  conditions: K8sResourceCondition[],\n  type: K8sResourceCondition['type'],\n): K8sResourceCondition | undefined => _.find(conditions, (c) => c.type === type);\n"],"mappings":";;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAUA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AAUA;AACA;AAEA;AAGA;AAGA;AAGA;AACA;AAIA;AAEA;;;;;;;;;;;;;AC9DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AASA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AAGA;;;;;A","sourceRoot":""}