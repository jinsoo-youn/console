{"version":3,"file":"pipeline~pipeline-builder-edit-page~pipeline-builder-page~pipeline-details-33a1588c1e153ef46aa8.js","sources":["webpack:///./packages/dev-console/src/components/pipelineruns/list-page/PipelineRunHeader.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/list-page/PipelineRunList.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/list-page/PipelineRunRow.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/list-page/pipelinerun-table.ts","webpack:///./packages/dev-console/src/components/pipelines/detail-page-tabs/MultiParametersField.tsx","webpack:///./packages/dev-console/src/components/pipelines/detail-page-tabs/PipelineForm.tsx","webpack:///./packages/dev-console/src/components/pipelines/detail-page-tabs/PipelineParameters.tsx","webpack:///./packages/dev-console/src/components/pipelines/detail-page-tabs/PipelineParametersForm.tsx","webpack:///./packages/dev-console/src/components/pipelines/detail-page-tabs/PipelineResources.tsx","webpack:///./packages/dev-console/src/components/pipelines/detail-page-tabs/PipelineResourcesForm.tsx","webpack:///./packages/dev-console/src/components/pipelines/detail-page-tabs/PipelineRuns.tsx","webpack:///./packages/dev-console/src/components/pipelines/detail-page-tabs/index.ts","webpack:///./packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/PipelineDetails.tsx","webpack:///./packages/dev-console/src/components/pipelines/detail-page-tabs/pipelineForm-validation-utils.ts","webpack:///./packages/dev-console/src/components/pipelines/resource-overview/DynamicResourceLinkList.scss?7299","webpack:///./packages/dev-console/src/components/pipelines/resource-overview/DynamicResourceLinkList.tsx","webpack:///./packages/dev-console/src/components/pipelines/resource-overview/TriggerTemplateResourceLink.scss?915d","webpack:///./packages/dev-console/src/components/pipelines/resource-overview/TriggerTemplateResourceLink.tsx"],"sourcesContent":["import { sortable } from '@patternfly/react-table';\nimport { tableColumnClasses } from './pipelinerun-table';\n\nconst PipelineRunHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Status',\n      sortField: 'status.conditions[0].reason',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Task Status',\n      sortField: 'status.conditions[0].reason',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Started',\n      sortField: 'status.startTime',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: 'Duration',\n      sortField: 'status.completionTime',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[6] },\n    },\n  ];\n};\n\nexport default PipelineRunHeader;\n","import * as React from 'react';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { Table } from '@console/internal/components/factory';\nimport { PipelineRunModel } from '../../../models';\nimport PipelineRunHeader from './PipelineRunHeader';\nimport PipelineRunRow from './PipelineRunRow';\n\nexport const PipelineRunList: React.FC = (props) => (\n  <Table\n    {...props}\n    aria-label={PipelineRunModel.labelPlural}\n    defaultSortField=\"status.startTime\"\n    defaultSortOrder={SortByDirection.desc}\n    Header={PipelineRunHeader}\n    Row={PipelineRunRow}\n    virtualize\n  />\n);\n\nexport default PipelineRunList;\n","import * as React from 'react';\nimport { Status } from '@console/shared';\nimport { TableRow, TableData, RowFunction } from '@console/internal/components/factory';\nimport { ResourceLink, Timestamp } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { pipelineRunFilterReducer } from '../../../utils/pipeline-filter-reducer';\nimport { getPipelineRunKebabActions } from '../../../utils/pipeline-actions';\nimport { pipelineRunDuration } from '../../../utils/pipeline-utils';\nimport { PipelineRun } from '../../../utils/pipeline-augment';\nimport { PipelineRunModel } from '../../../models';\nimport LinkedPipelineRunTaskStatus from '../status/LinkedPipelineRunTaskStatus';\nimport { ResourceKebabWithUserLabel } from '../triggered-by';\nimport { tableColumnClasses } from './pipelinerun-table';\n\nconst pipelinerunReference = referenceForModel(PipelineRunModel);\n\nconst PipelineRunRow: RowFunction<PipelineRun> = ({ obj, index, key, style }) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={pipelinerunReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.name}\n          data-test-id={obj.metadata.name}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Status status={pipelineRunFilterReducer(obj)} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <LinkedPipelineRunTaskStatus pipelineRun={obj} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Timestamp timestamp={obj.status && obj.status.startTime} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>{pipelineRunDuration(obj)}</TableData>\n      <TableData className={tableColumnClasses[6]}>\n        <ResourceKebabWithUserLabel\n          actions={getPipelineRunKebabActions()}\n          kind={pipelinerunReference}\n          resource={obj}\n        />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport default PipelineRunRow;\n","import { Kebab } from '@console/internal/components/utils';\n\nexport const tableColumnClasses = [\n  '', // name\n  '', // namespace\n  'pf-m-hidden pf-m-visible-on-sm', // status\n  'pf-m-hidden pf-m-visible-on-lg', // task status\n  'pf-m-hidden pf-m-visible-on-lg', // started\n  'pf-m-hidden pf-m-visible-on-xl', // duration\n  Kebab.columnClass,\n];\n","import * as React from 'react';\nimport { useState } from 'react';\nimport * as _ from 'lodash';\nimport { FieldArray, useFormikContext, FormikValues } from 'formik';\nimport { FormGroup } from '@patternfly/react-core';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { InputField, DropdownField } from '@console/shared';\nimport { Button } from '@patternfly/react-core';\nimport { MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\nexport const MultiParametersField: React.FC<MultiParametersFieldProps> = ({ name }) => {\n  const { values } = useFormikContext<FormikValues>();\n  const fieldValue = _.get(values, name, []);\n  const defaultItem = {\n    name: '',\n    description: '',\n    type: '',\n    default: '',\n  };\n\n  return (\n    <FieldArray\n      name={name}\n      render={({ push, remove }) => {\n        return (\n          <FormGroup fieldId={`form-multi-column-input-${name.replace(/\\./g, '-')}-field`}>\n            {fieldValue.length > 0 &&\n              fieldValue.map((value, index) => (\n                <div className=\"parameter-input-field-wrapper\" key={`${name}-${index}-inputFieldWrapper`}>\n                  <div className=\"remove-button-wrapper\">\n                    <Button\n                      className=\"pf-m-link remove-button\"\n                      data-test-id=\"pairs-list__delete-btn\"\n                      onClick={() => {\n                        remove(index);\n                      }}\n                      type=\"button\"\n                      variant=\"link\"\n                    >\n                      <MinusCircleIcon data-test-id=\"pairs-list__delete-icon\" className=\"pairs-list__side-btn pairs-list__delete-ico co-icon-space-r\" />\n                      Remove Pipeline Parameter\n                    </Button>\n                  </div>\n                  <InputSection label=\"Name\" customClass=\"short-margin-top\" isRequired={true}>\n                    <InputField name={`${name}.${index}.name`} type={TextInputTypes.text} placeholder=\"Name\" />\n                  </InputSection>\n                  <InputSection label=\"Description\">\n                    <InputField name={`${name}.${index}.description`} type={TextInputTypes.text} placeholder=\"Description\" />\n                  </InputSection>\n                  <InputSection label=\"Type\">\n                    <DropdownValueComponent nameValue={`${name}.${index}`}></DropdownValueComponent>\n                  </InputSection>\n                </div>\n              ))}\n            <div className=\"add-button-wrapper\">\n              <Button\n                className=\"pf-m-link--align-left\"\n                data-test-id=\"pairs-list__add-btn\"\n                onClick={() => {\n                  push(defaultItem);\n                }}\n                type=\"button\"\n                variant=\"link\"\n              >\n                <PlusCircleIcon data-test-id=\"pairs-list__add-icon\" className=\"co-icon-space-r\" />\n                Add Pipeline Parameter\n              </Button>\n            </div>\n          </FormGroup>\n        );\n      }}\n    />\n  );\n};\nconst DropdownValueComponent: React.FC<DropdownValueComponentProps> = props => {\n  const { nameValue } = props;\n  const { values, setFieldValue } = useFormikContext<FormikValues>();\n  const [valueType, setValueType] = useState('');\n  const renderValueField = (valueType, name) => {\n    if (valueType === '') {\n      valueType = _.get(values, `${name}.type`);\n    }\n    switch (valueType) {\n      case 'string': {\n        return (\n          <InputSection label=\"Default Value\" customClass=\"input-section-without-margin-left\">\n            <InputField name={`${name}.default`} type={TextInputTypes.text} placeholder=\"Default Value\" />\n          </InputSection>\n        );\n      }\n      case 'array': {\n        let arrayFieldValue = _.get(values, `${name}.default`, []);\n        arrayFieldValue = arrayFieldValue === '' ? [] : arrayFieldValue;\n        return (\n          <InputSection label=\"Default Value\">\n            <FieldArray\n              name={`${name}.default`}\n              render={({ push, remove }) => {\n                return (\n                  <FormGroup fieldId={`form-multi-column-input-${name.replace(/\\./g, '-')}-field`}>\n                    {arrayFieldValue.length > 0 &&\n                      arrayFieldValue.map((value, index) => (\n                        <div key={`${name}-default-${index}-inputWrapper`} id=\"parameter-array-row-input-wrapper\">\n                          <InputField className=\"input-field\" name={`${name}.default.${index}`} type={TextInputTypes.text} placeholder=\"Default Value\" />\n                          <Button\n                            className=\"pf-m-link remove-button\"\n                            data-test-id=\"pairs-list__delete-btn\"\n                            onClick={() => {\n                              remove(index);\n                            }}\n                            type=\"button\"\n                            variant=\"link\"\n                          >\n                            <MinusCircleIcon data-test-id=\"pairs-list__delete-icon\" className=\"pairs-list__side-btn pairs-list__delete-ico delete-button\" />\n                          </Button>\n                        </div>\n                      ))}\n                    <Button\n                      className=\"pf-m-link--align-left space-left\"\n                      data-test-id=\"pairs-list__add-btn\"\n                      onClick={() => {\n                        push('');\n                      }}\n                      type=\"button\"\n                      variant=\"link\"\n                    >\n                      <PlusCircleIcon data-test-id=\"pairs-list__add-icon\" className=\"co-icon-space-r\" />\n                      Add Default Value\n                    </Button>\n                  </FormGroup>\n                );\n              }}\n            />\n          </InputSection>\n        );\n      }\n      default: {\n        return null;\n      }\n    }\n  };\n\n  return (\n    <div>\n      <DropdownField\n        fullWidth\n        items={pipelineParameterTypeSelections}\n        name={`${nameValue}.type`}\n        onChange={data => {\n          switch (data) {\n            case 'string': {\n              setFieldValue(`${nameValue}.default`, '');\n              break;\n            }\n            case 'array': {\n              setFieldValue(`${nameValue}.default`, []);\n              break;\n            }\n            default: {\n            }\n          }\n          setValueType(data);\n        }}\n      />\n      {renderValueField(valueType, nameValue)}\n    </div>\n  );\n};\nconst InputSection: React.FC<InputSectionProps> = ({ label, isRequired, children, customClass = '' }) => {\n  return (\n    <div className={'form-group parameter-input-section-wrapper ' + customClass}>\n      <label className={'control-label ' + (isRequired ? 'co-required' : '')}>{label}</label>\n      <div className=\"row\">{children}</div>\n    </div>\n  );\n};\n\nexport const pipelineParameterTypeSelections = {\n  '': 'Select resource type',\n  string: 'String',\n  array: 'Array',\n};\ntype DropdownValueComponentProps = {\n  nameValue: string;\n};\ntype InputSectionProps = {\n  label?: string;\n  isRequired?: boolean;\n  children?: React.ReactNode;\n  customClass?: string;\n};\ntype MultiParametersFieldProps = {\n  name: string;\n  children?: React.ReactNode;\n  addLabel?: string;\n  defaultItem?: object;\n};\nexport default MultiParametersField;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Formik } from 'formik';\nimport { k8sUpdate, K8sResourceKind } from '@console/internal/module/k8s';\nimport { PipelineModel } from '../../../models';\n\nexport interface PipelineFormProps {\n  PipelineFormComponent: React.ComponentType<any>;\n  formName: string;\n  validationSchema: any;\n  obj: K8sResourceKind;\n}\n\nconst PipelineForm: React.FC<PipelineFormProps> = ({\n  PipelineFormComponent,\n  formName,\n  validationSchema,\n  obj,\n}) => {\n  const initialValues = {\n    parameters: _.get(obj.spec, 'params', []),\n    resources: _.get(obj.spec, 'resources', []),\n  };\n\n  const handleSubmit = (values, actions) => {\n    actions.setSubmitting(true);\n\n    k8sUpdate(\n      PipelineModel,\n      { ...obj, spec: { ...obj.spec, params: values.parameters, resources: values.resources } },\n      obj.metadata.namespace,\n      obj.metadata.name,\n    )\n      .then((newObj) => {\n        actions.setSubmitting(false);\n        actions.resetForm({\n          values: {\n            parameters: _.get(newObj.spec, 'params', []),\n            resources: _.get(newObj.spec, 'resources', []),\n          },\n          status: { success: `Successfully updated the pipeline ${formName}.` },\n        });\n      })\n      .catch((err) => {\n        actions.setSubmitting(false);\n        actions.setStatus({ submitError: err.message });\n      });\n  };\n\n  const handleReset = (values, actions) => {\n    actions.resetForm({ status: {} });\n  };\n\n  return (\n    <div className=\"co-m-pane__body\">\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        onReset={handleReset}\n        validationSchema={validationSchema}\n        render={(props) => <PipelineFormComponent namespace={obj.metadata.namespace} {...props} />}\n      />\n    </div>\n  );\n};\n\nexport default PipelineForm;\n","import * as React from 'react';\nimport { MultiParametersField } from './MultiParametersField';\n\ntype PipelineParametersProps = {\n  addLabel?: string;\n  fieldName: string;\n  isReadOnly?: boolean;\n};\n\nconst PipelineParameters: React.FC<PipelineParametersProps> = props => {\n  const { fieldName } = props;\n\n  return <MultiParametersField name={fieldName}></MultiParametersField>;\n};\n\nexport default PipelineParameters;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Form } from '@patternfly/react-core';\nimport { FormikProps, FormikValues } from 'formik';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { FormFooter } from '@console/shared';\nimport PipelineParameters from './PipelineParameters';\n\ntype PipelineParametersFormProps = FormikProps<FormikValues> & {\n  namespace: string;\n};\n\nconst PipelineParametersForm: React.FC<PipelineParametersFormProps> = ({\n  namespace,\n  handleSubmit,\n  handleReset,\n  isSubmitting,\n  status,\n  errors,\n  dirty,\n}) => {\n  const pipelineParameterAccess = useAccessReview({\n    group: 'tekton.dev',\n    resource: 'pipelines',\n    namespace,\n    verb: 'update',\n  });\n  return (\n    <Form onSubmit={handleSubmit}>\n      <div className=\"co-m-pane__form\">\n        <PipelineParameters fieldName=\"parameters\" isReadOnly={!pipelineParameterAccess} />\n        <hr />\n        {pipelineParameterAccess && (\n          <FormFooter\n            handleReset={handleReset}\n            isSubmitting={isSubmitting}\n            errorMessage={status && status.submitError}\n            successMessage={status && !dirty && status.success}\n            disableSubmit={!dirty}\n            showAlert={dirty}\n          />\n        )}\n      </div>\n    </Form>\n  );\n};\n\nexport default PipelineParametersForm;\n","import * as React from 'react';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { MultiColumnField, InputField, DropdownField } from '@console/shared';\nimport { pipelineResourceTypeSelections } from '../const';\n\ntype PipelineResourcesParam = {\n  addLabel?: string;\n  fieldName: string;\n  isReadOnly?: boolean;\n};\n\nconst PipelineResources: React.FC<PipelineResourcesParam> = (props) => {\n  const { addLabel = 'Add Pipeline Resource', fieldName, isReadOnly = false } = props;\n  const emptyMessage = 'No resources are associated with this pipeline.';\n  return (\n    <MultiColumnField\n      name={fieldName}\n      addLabel={addLabel}\n      headers={['Name', 'Resource Type']}\n      emptyValues={{ name: '', type: '' }}\n      emptyMessage={emptyMessage}\n      isReadOnly={isReadOnly}\n    >\n      <InputField\n        name=\"name\"\n        type={TextInputTypes.text}\n        placeholder=\"Name\"\n        isReadOnly={isReadOnly}\n      />\n      <DropdownField\n        name=\"type\"\n        items={pipelineResourceTypeSelections}\n        fullWidth\n        disabled={isReadOnly}\n      />\n    </MultiColumnField>\n  );\n};\n\nexport default PipelineResources;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Form } from '@patternfly/react-core';\nimport { FormikProps, FormikValues, getIn } from 'formik';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { FormFooter } from '@console/shared';\nimport PipelineResources from './PipelineResources';\n\ntype PipelineResourcesFormProps = FormikProps<FormikValues> & {\n  namespace: string;\n};\n\nconst PipelineResourcesForm: React.FC<PipelineResourcesFormProps> = ({\n  namespace,\n  handleSubmit,\n  handleReset,\n  isSubmitting,\n  status,\n  errors,\n  dirty,\n}) => {\n  const pipelineResourceAccess = useAccessReview({\n    group: 'tekton.dev',\n    resource: 'pipelines',\n    namespace,\n    verb: 'update',\n  });\n  return (\n    <Form onSubmit={handleSubmit}>\n      <div className=\"co-m-pane__form\">\n        <PipelineResources fieldName=\"resources\" isReadOnly={!pipelineResourceAccess} />\n        <hr />\n        {pipelineResourceAccess && (\n          <FormFooter\n            handleReset={handleReset}\n            isSubmitting={isSubmitting}\n            errorMessage={status && status.submitError}\n            successMessage={status && !dirty && status.success}\n            disableSubmit={!dirty || !_.isEmpty(_.compact(getIn(errors, 'resources')))}\n            showAlert={dirty}\n          />\n        )}\n      </div>\n    </Form>\n  );\n};\n\nexport default PipelineResourcesForm;\n","import * as React from 'react';\nimport { ListPage } from '@console/internal/components/factory';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport PipelineRunsList from '../../pipelineruns/list-page/PipelineRunList';\nimport {\n  pipelineRunFilterReducer,\n  pipelineRunStatusFilter,\n} from '../../../utils/pipeline-filter-reducer';\nimport { ListFilterId, ListFilterLabels } from '../../../utils/pipeline-utils';\nimport { PipelineRunModel } from '../../../models';\n\nexport const runFilters = [\n  {\n    type: 'pipelinerun-status',\n    selected: [\n      ListFilterId.Succeeded,\n      ListFilterId.Running,\n      ListFilterId.Failed,\n      ListFilterId.Cancelled,\n    ],\n    reducer: pipelineRunFilterReducer,\n    items: [\n      { id: ListFilterId.Succeeded, title: ListFilterLabels[ListFilterId.Succeeded] },\n      { id: ListFilterId.Running, title: ListFilterLabels[ListFilterId.Running] },\n      { id: ListFilterId.Failed, title: ListFilterLabels[ListFilterId.Failed] },\n      { id: ListFilterId.Cancelled, title: ListFilterLabels[ListFilterId.Cancelled] },\n    ],\n    filter: pipelineRunStatusFilter,\n  },\n];\n\ninterface PipelineRunsProps {\n  obj: any;\n}\n\nconst PipelineRuns: React.FC<PipelineRunsProps> = ({ obj }) => (\n  <ListPage\n    showTitle={false}\n    canCreate={false}\n    kind={referenceForModel(PipelineRunModel)}\n    namespace={obj.metadata.namespace}\n    selector={{\n      'tekton.dev/pipeline': obj.metadata.name,\n    }}\n    ListComponent={PipelineRunsList}\n    rowFilters={runFilters}\n  />\n);\n\nexport default PipelineRuns;\n","export { default as PipelineDetails } from './pipeline-details/PipelineDetails';\nexport { default as PipelineParameters } from './PipelineParameters';\nexport { default as PipelineParametersForm } from './PipelineParametersForm';\nexport { default as PipelineResources } from './PipelineResources';\nexport { default as PipelineResourcesForm } from './PipelineResourcesForm';\nexport { default as PipelineRuns } from './PipelineRuns';\nexport { default as PipelineForm } from './PipelineForm';\nexport * from './pipelineForm-validation-utils';\n","import * as React from 'react';\nimport { SectionHeading, ResourceSummary } from '@console/internal/components/utils';\nimport {\n  getResourceModelFromTaskKind,\n  Pipeline,\n  PipelineTask,\n} from '../../../../utils/pipeline-augment';\nimport { TriggerTemplateModel } from '../../../../models';\nimport { RouteTemplate } from '../../utils/triggers';\nimport DynamicResourceLinkList from '../../resource-overview/DynamicResourceLinkList';\nimport TriggerTemplateResourceLink from '../../resource-overview/TriggerTemplateResourceLink';\nimport PipelineVisualization from './PipelineVisualization';\n\ninterface PipelineDetailsProps {\n  obj: Pipeline;\n  customData: RouteTemplate[];\n}\n\nconst PipelineDetails: React.FC<PipelineDetailsProps> = ({\n  obj: pipeline,\n  customData: routeTemplates,\n}) => {\n  const taskLinks = pipeline.spec.tasks\n    .filter((pipelineTask: PipelineTask) => !!pipelineTask.taskRef)\n    .map((task) => ({\n      model: getResourceModelFromTaskKind(task.taskRef.kind),\n      name: task.taskRef.name,\n      displayName: task.name,\n    }));\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text=\"Pipeline Details\" />\n      <PipelineVisualization pipeline={pipeline} />\n      <div className=\"row\">\n        <div className=\"col-sm-6\">\n          <ResourceSummary resource={pipeline} />\n        </div>\n        <div className=\"col-sm-6\">\n          <TriggerTemplateResourceLink\n            namespace={pipeline.metadata.namespace}\n            model={TriggerTemplateModel}\n            links={routeTemplates}\n          />\n          <DynamicResourceLinkList\n            namespace={pipeline.metadata.namespace}\n            links={taskLinks}\n            title=\"Tasks\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PipelineDetails;\n","import * as yup from 'yup';\n\nexport const resourcesValidationSchema = yup.object().shape({\n  resources: yup.array().of(\n    yup.object().shape({\n      name: yup.string().required('Required'),\n      type: yup.string().required('Required'),\n    }),\n  ),\n});\n\nexport const parametersValidationSchema = yup.object().shape({\n  parameters: yup.array().of(\n    yup.object().shape({\n      name: yup.string().required('Required'),\n      description: yup.string(),\n      default: yup.string(),\n    }),\n  ),\n});\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { K8sKind, referenceForModel } from '@console/internal/module/k8s';\n\nimport './DynamicResourceLinkList.scss';\n\nexport type ResourceModelLink = {\n  model: K8sKind;\n  name: string;\n  displayName?: string;\n};\n\ntype DynamicResourceLinkListProps = {\n  links: ResourceModelLink[];\n  namespace: string;\n  title: string;\n};\n\nconst DynamicResourceLinkList: React.FC<DynamicResourceLinkListProps> = ({\n  links = [],\n  namespace,\n  title,\n}) => {\n  if (links.length === 0) {\n    return null;\n  }\n  return (\n    <div className=\"odc-dynamic-resource-link-list\">\n      <dl>\n        <dt>{title}</dt>\n        <dd>\n          {links.map(({ name, model, displayName = '' }) => {\n            const kind = referenceForModel(model);\n            let linkName = name;\n            if (displayName.length > 0 && name !== displayName) {\n              linkName += ` (${displayName})`;\n            }\n            return (\n              <div key={`${kind}/${name}`}>\n                <ResourceLink\n                  kind={kind}\n                  name={name}\n                  displayName={linkName}\n                  namespace={namespace}\n                  title={name}\n                  inline\n                />\n              </div>\n            );\n          })}\n        </dd>\n      </dl>\n    </div>\n  );\n};\n\nexport default DynamicResourceLinkList;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { ResourceLink, ExternalLink } from '@console/internal/components/utils';\nimport { K8sKind, referenceForModel } from '@console/internal/module/k8s';\nimport { RouteTemplate } from '../utils/triggers';\nimport './TriggerTemplateResourceLink.scss';\n\ntype TriggerTemplateResourceLinkProps = {\n  namespace: string;\n  model: K8sKind;\n  links: RouteTemplate[];\n};\nconst TriggerTemplateResourceLink: React.FC<TriggerTemplateResourceLinkProps> = ({\n  links = [],\n  namespace,\n  model,\n}) => {\n  const title = model.labelPlural;\n  const kind = referenceForModel(model);\n\n  if (links.length === 0) {\n    return null;\n  }\n  return (\n    <div className=\"odc-trigger-template-list\">\n      <dl>\n        <dt>{title}</dt>\n        {links.map(({ routeURL, triggerTemplateName }) => {\n          return (\n            <dd key={triggerTemplateName}>\n              <ResourceLink\n                kind={kind}\n                name={triggerTemplateName}\n                namespace={namespace}\n                title={triggerTemplateName}\n                inline\n              />\n              {routeURL && (\n                <div className=\"odc-trigger-template-list__url\">\n                  <ExternalLink href={routeURL} text={routeURL} />\n                </div>\n              )}\n            </dd>\n          );\n        })}\n      </dl>\n    </div>\n  );\n};\n\nexport default TriggerTemplateResourceLink;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAQA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAQA;AAEA;;;;;;;;;;;;;ACpDA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AAIA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AAEA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AAIA;AAIA;AAIA;AACA;AAIA;AAEA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAgBA;;;;;;;;;;;;;ACpMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AASA;AAMA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AASA;AAEA;;;;;;;;;;;;;AClEA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAMA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAaA;AAEA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AASA;AAMA;AAQA;AAEA;;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAaA;AAEA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAOA;AACA;AAMA;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAOA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AASA;AAEA;;;;;;;;;;;;;ACtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;ACnBA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAcA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAKA;AAEA;;;;;;;;;;;;ACxDA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAOA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAOA;AAEA;AAKA;AAIA;AAEA;;;;;A","sourceRoot":""}