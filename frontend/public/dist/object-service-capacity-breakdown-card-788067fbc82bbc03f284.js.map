{"version":3,"file":"object-service-capacity-breakdown-card-788067fbc82bbc03f284.js","sources":["webpack:///./packages/ceph-storage-plugin/src/selectors/index.ts","webpack:///./packages/noobaa-storage-plugin/src/components/capacity-breakdown/capacity-breakdown-card.scss?17ff","webpack:///./packages/noobaa-storage-plugin/src/components/capacity-breakdown/capacity-breakdown-card.tsx","webpack:///./packages/noobaa-storage-plugin/src/constants/index.ts","webpack:///./packages/noobaa-storage-plugin/src/queries.ts"],"sourcesContent":["import * as _ from 'lodash';\nimport { Alert } from '@console/internal/components/monitoring';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { FirehoseResult, convertToBaseValue } from '@console/internal/components/utils';\nimport { cephStorageProvisioners } from '@console/shared/src/utils';\nimport { OCS_OPERATOR } from '../constants';\n\nexport const cephStorageLabel = 'cluster.ocs.openshift.io/openshift-storage';\n\nconst enum status {\n  BOUND = 'Bound',\n  AVAILABLE = 'Available',\n}\nexport const filterCephAlerts = (alerts: Alert[]): Alert[] =>\n  alerts.filter((alert) => _.get(alert, 'annotations.storage_type') === 'ceph');\n\nexport const getCephPVs = (pvsData: K8sResourceKind[] = []): K8sResourceKind[] =>\n  pvsData.filter((pv) => {\n    return cephStorageProvisioners.some((provisioner: string) =>\n      _.get(pv, 'metadata.annotations[\"pv.kubernetes.io/provisioned-by\"]', '').includes(\n        provisioner,\n      ),\n    );\n  });\n\nconst getPVStorageClass = (pv: K8sResourceKind) => _.get(pv, 'spec.storageClassName');\nconst getStorageClassName = (pvc: K8sResourceKind) =>\n  _.get(pvc, ['metadata', 'annotations', 'volume.beta.kubernetes.io/storage-class']) ||\n  _.get(pvc, 'spec.storageClassName');\nconst isBound = (pvc: K8sResourceKind) => pvc.status.phase === status.BOUND;\n\nexport const getCephPVCs = (\n  cephSCNames: string[] = [],\n  pvcsData: K8sResourceKind[] = [],\n  pvsData: K8sResourceKind[] = [],\n): K8sResourceKind[] => {\n  const cephPVs = getCephPVs(pvsData);\n  const cephSCNameSet = new Set<string>([...cephSCNames, ...cephPVs.map(getPVStorageClass)]);\n  const cephBoundPVCUIDSet = new Set<string>(_.map(cephPVs, 'spec.claimRef.uid'));\n  // If the PVC is bound use claim uid(links PVC to PV) else storage class to verify it's provisioned by ceph.\n  return pvcsData.filter((pvc: K8sResourceKind) =>\n    isBound(pvc)\n      ? cephBoundPVCUIDSet.has(pvc.metadata.uid)\n      : cephSCNameSet.has(getStorageClassName(pvc)),\n  );\n};\n\nexport const getCephNodes = (nodesData: K8sResourceKind[] = []): K8sResourceKind[] =>\n  nodesData.filter((node) => _.keys(_.get(node, 'metadata.labels')).includes(cephStorageLabel));\n\nexport const getCephSC = (scData: K8sResourceKind[]): K8sResourceKind[] =>\n  scData.filter((sc) => {\n    return cephStorageProvisioners.some((provisioner: string) =>\n      _.get(sc, 'provisioner', '').includes(provisioner),\n    );\n  });\n\nexport const getOCSVersion = (items: FirehoseResult): string => {\n  const itemsData: K8sResourceKind[] = _.get(items, 'data');\n  const operator: K8sResourceKind = _.find(\n    itemsData,\n    (item) => _.get(item, 'spec.name') === OCS_OPERATOR,\n  );\n  return _.get(operator, 'status.installedCSV');\n};\n\nexport const calcPVsCapacity = (pvs: K8sResourceKind[]): number =>\n  pvs.reduce((sum, pv) => {\n    const storage = Number(convertToBaseValue(pv.spec.capacity.storage));\n    return sum + storage;\n  }, 0);\n\nexport const getSCAvailablePVs = (pvsData: K8sResourceKind[], sc: string): K8sResourceKind[] =>\n  pvsData.filter((pv) => getPVStorageClass(pv) === sc && pv.status.phase === status.AVAILABLE);\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  Dropdown,\n  FirehoseResource,\n  FirehoseResult,\n  humanizeBinaryBytes,\n} from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport {\n  DashboardItemProps,\n  withDashboardResources,\n} from '@console/internal/components/dashboard/with-dashboard-resources';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport { getInstantVectorStats } from '@console/internal/components/graphs/utils';\nimport { SubscriptionModel } from '@console/operator-lifecycle-manager/src';\nimport { HeaderPrometheusViewLink } from '@console/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/breakdown-header';\nimport { BreakdownCardBody } from '@console/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/breakdown-body';\nimport { getStackChartStats } from '@console/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/utils';\nimport { getOCSVersion } from '@console/ceph-storage-plugin/src/selectors';\nimport {\n  CLUSTERWIDE,\n  CLUSTERWIDE_TOOLTIP,\n  Colors,\n} from '@console/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/consts';\nimport { PROJECTS } from '../../constants/index';\nimport { breakdownQueryMap, CAPACITY_BREAKDOWN_QUERIES } from '../../queries';\nimport './capacity-breakdown-card.scss';\nimport { NooBaaBucketClassModel } from '../../models';\n\nconst SubscriptionResource: FirehoseResource = {\n  kind: referenceForModel(SubscriptionModel),\n  namespaced: false,\n  prop: 'subscription',\n  isList: true,\n};\n\nconst keys = Object.keys(breakdownQueryMap);\nconst dropdownOptions = _.zipObject(keys, keys);\n\nconst BreakdownCard: React.FC<DashboardItemProps> = ({\n  watchK8sResource,\n  stopWatchK8sResource,\n  watchPrometheus,\n  stopWatchPrometheusQuery,\n  prometheusResults,\n  resources,\n}) => {\n  const [metricType, setMetricType] = React.useState(PROJECTS);\n  const { queries, model, metric } = breakdownQueryMap[metricType];\n  React.useEffect(() => {\n    if (model.kind === NooBaaBucketClassModel.kind) {\n      watchK8sResource(SubscriptionResource);\n      return () => {\n        stopWatchK8sResource(SubscriptionResource);\n      };\n    }\n    return () => {};\n  }, [watchK8sResource, stopWatchK8sResource, model]);\n\n  const queryKeys = Object.keys(queries);\n\n  React.useEffect(() => {\n    queryKeys.forEach((q) => watchPrometheus(queries[q]));\n    return () => {\n      queryKeys.forEach((q) => stopWatchPrometheusQuery(queries[q]));\n    };\n  }, [watchPrometheus, stopWatchPrometheusQuery, metricType, queryKeys, queries]);\n\n  const subscription = _.get(resources, 'subscription') as FirehoseResult;\n  const ocsVersion = getOCSVersion(subscription);\n\n  const results = queryKeys.map((key) => prometheusResults.getIn([queries[key], 'data']));\n  const queriesLoadError = queryKeys.some((q) =>\n    prometheusResults.getIn([queries[q], 'loadError']),\n  );\n\n  const queriesDataLoaded = queryKeys.some((q) => !prometheusResults.getIn([queries[q], 'data']));\n\n  const humanize = humanizeBinaryBytes;\n  const top5MetricsData = getInstantVectorStats(results[0], metric);\n  const top5MetricsStats = getStackChartStats(top5MetricsData, humanize);\n  const objectUsed = _.get(results[1], 'data.result[0].value[1]');\n  const link = `topk(20, (${CAPACITY_BREAKDOWN_QUERIES[queryKeys[0]]}))`;\n\n  const ind = top5MetricsStats.findIndex((v) => v.name === 'Others');\n  if (ind !== -1) {\n    top5MetricsStats[ind].name = CLUSTERWIDE;\n    top5MetricsStats[ind].link = CLUSTERWIDE_TOOLTIP;\n    top5MetricsStats[ind].color = Colors.OTHER;\n  }\n\n  return (\n    <DashboardCard>\n      <DashboardCardHeader>\n        <DashboardCardTitle>Capacity breakdown</DashboardCardTitle>\n        <div className=\"nb-capacity-breakdown-card__header\">\n          <HeaderPrometheusViewLink link={link} />\n          <Dropdown\n            items={dropdownOptions}\n            onChange={setMetricType}\n            selectedKey={metricType}\n            title={metricType}\n          />\n        </div>\n      </DashboardCardHeader>\n      <DashboardCardBody classname=\"nb-capacity-breakdown-card__body\">\n        <BreakdownCardBody\n          isLoading={queriesDataLoaded}\n          hasLoadError={queriesLoadError}\n          top5MetricsStats={top5MetricsStats}\n          capacityUsed={objectUsed}\n          metricTotal={objectUsed}\n          metricModel={model}\n          humanize={humanize}\n          ocsVersion={ocsVersion}\n        />\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\nexport default withDashboardResources(BreakdownCard);\n","export const ACCOUNTS = 'Accounts';\nexport const PROVIDERS = 'Providers';\nexport const BY_IOPS = 'I/O Operations';\nexport const BY_LOGICAL_USAGE = 'Logical Used Capacity';\nexport const BY_PHYSICAL_VS_LOGICAL_USAGE = 'Physical Vs Logical Usage';\nexport const BY_EGRESS = 'Egress';\nexport const PROJECTS = 'Projects';\nexport const BUCKET_CLASS = 'Bucket Class';\nexport const OCS_NS = 'openshift-storage';\nexport const NB_PROVISIONER = 'noobaa.io/obc';\n\nexport const CHART_LABELS = {\n  [BY_LOGICAL_USAGE]: 'Logical used capacity per account',\n  [BY_PHYSICAL_VS_LOGICAL_USAGE]: 'Physical vs. Logical used capacity',\n  [BY_EGRESS]: 'Egress Per Provider',\n  [BY_IOPS]: 'I/O Operations count',\n};\n\nexport enum BC_PROVIDERS {\n  AWS = 'AWS S3',\n  S3 = 'S3 Compatible',\n  PVC = 'PVC',\n  GCP = 'Google cloud storage',\n  AZURE = 'Azure Blob',\n  IBM = 'IBM COS',\n}\n\nexport const PROVIDERS_NOOBAA_MAP = {\n  [BC_PROVIDERS.AWS]: 'awsS3',\n  [BC_PROVIDERS.S3]: 's3Compatible',\n  [BC_PROVIDERS.AZURE]: 'azureBlob',\n  [BC_PROVIDERS.GCP]: 'googleCloudStorage',\n  [BC_PROVIDERS.PVC]: 'pvPool',\n  [BC_PROVIDERS.IBM]: 'ibmCos',\n};\n\nexport const BUCKET_LABEL_NOOBAA_MAP = {\n  [BC_PROVIDERS.AWS]: 'targetBucket',\n  [BC_PROVIDERS.S3]: 'targetBucket',\n  [BC_PROVIDERS.AZURE]: 'targetBlobContainer',\n  [BC_PROVIDERS.GCP]: 'targetBucket',\n  [BC_PROVIDERS.IBM]: 'targetBucket',\n};\n\nexport const NOOBAA_TYPE_MAP = {\n  [BC_PROVIDERS.AWS]: 'aws-s3',\n  [BC_PROVIDERS.S3]: 's3-compatible',\n  [BC_PROVIDERS.AZURE]: 'azure-blob',\n  [BC_PROVIDERS.GCP]: 'google-cloud-storage',\n  [BC_PROVIDERS.PVC]: 'pv-pool',\n  [BC_PROVIDERS.IBM]: 'ibm-cos',\n};\n\nexport const AWS_REGIONS = [\n  'us-east-1',\n  'us-east-2',\n  'us-west-1',\n  'us-west-2',\n  'ca-central-1',\n  'eu-central-1',\n  'eu-west-1',\n  'eu-west-2',\n  'eu-west-3',\n  'eu-north-1',\n  'ap-east-1',\n  'ap-northeast-1',\n  'ap-northeast-2',\n  'ap-northeast-3',\n  'ap-southeast-1',\n  'ap-southeast-2',\n  'ap-south-1',\n  'me-south-1',\n  'sa-east-1',\n];\n","import { ProjectModel } from '@console/internal/models';\nimport { PROJECTS, BUCKET_CLASS } from './constants';\nimport { NooBaaBucketClassModel } from './models';\n\nexport enum ObjectDashboardQuery {\n  CAPACITY_USAGE_PROJECT_QUERY = 'CAPACITY_USAGE_PROJECT_QUERY',\n  CAPACITY_USAGE_BUCKET_CLASS_QUERY = 'CAPACITY_USAGE_BUCKET_CLASS_QUERY',\n  PROJECTS_TOTAL_USED = 'PROJECTS_TOTAL_USED',\n  PROJECTS_BY_USED = 'PROJECTS_BY_USED',\n  BUCKETS_TOTAL_USED = 'BUCKETS_TOTAL_USED',\n  BUCKETS_BY_USED = 'BUCKETS_BY_USED',\n  NOOBAA_USED = 'NOOBAA_USED',\n  NOOBAA_TOTAL = 'NOOBAA_TOTAL',\n  PROJECTS_OTHERS = 'PROJECTS_OTHERS',\n  BUCKETS_BY_OTHERS = 'BUCKETS_BY_OTHERS',\n  PROJECT_CAPACITY_USAGE_QUERY = 'PROJECT_CAPACITY_USAGE_QUERY',\n  BUCKET_CLASS_CAPACITY_USAGE_QUERY = 'BUCKET_CLASS_CAPACITY_USAGE_QUERY',\n  PROJECTS_QUERY = 'PROJECTS_QUERY',\n  BUCKETS_QUERY = 'BUCKETS_QUERY',\n}\n\nexport enum DATA_RESILIENCE_QUERIES {\n  REBUILD_PROGRESS_QUERY = 'NooBaa_rebuild_progress/100',\n  REBUILD_TIME_QUERY = 'NooBaa_rebuild_time',\n}\n\nexport enum ObjectDataReductionQueries {\n  EFFICIENCY_QUERY = 'NooBaa_reduction_ratio',\n  SAVINGS_QUERY = '(NooBaa_object_savings_logical_size - NooBaa_object_savings_physical_size)',\n  LOGICAL_SAVINGS_QUERY = 'NooBaa_object_savings_logical_size',\n}\n\nexport enum StatusCardQueries {\n  BUCKETS_COUNT = 'NooBaa_num_buckets',\n  UNHEALTHY_BUCKETS = 'NooBaa_num_unhealthy_buckets',\n  POOLS_COUNT = 'NooBaa_num_pools',\n  UNHEALTHY_POOLS = 'NooBaa_num_unhealthy_pools',\n}\n\nexport const CAPACITY_BREAKDOWN_QUERIES = {\n  [ObjectDashboardQuery.PROJECTS_BY_USED]: 'NooBaa_projects_capacity_usage',\n  [ObjectDashboardQuery.BUCKETS_BY_USED]: 'NooBaa_bucket_class_capacity_usage',\n};\n\nexport const breakdownQueryMap = {\n  [PROJECTS]: {\n    model: ProjectModel,\n    metric: 'project',\n    queries: {\n      [ObjectDashboardQuery.PROJECTS_BY_USED]: `sort_desc(topk(5, ${\n        CAPACITY_BREAKDOWN_QUERIES[ObjectDashboardQuery.PROJECTS_BY_USED]\n      }))`,\n      [ObjectDashboardQuery.PROJECTS_TOTAL_USED]: `sum(${\n        CAPACITY_BREAKDOWN_QUERIES[ObjectDashboardQuery.PROJECTS_BY_USED]\n      })`,\n    },\n  },\n  [BUCKET_CLASS]: {\n    model: NooBaaBucketClassModel,\n    metric: 'bucket_class',\n    queries: {\n      [ObjectDashboardQuery.BUCKETS_BY_USED]: `sort_desc(topk(5, ${\n        CAPACITY_BREAKDOWN_QUERIES[ObjectDashboardQuery.BUCKETS_BY_USED]\n      }))`,\n      [ObjectDashboardQuery.BUCKETS_TOTAL_USED]: `sum(${\n        CAPACITY_BREAKDOWN_QUERIES[ObjectDashboardQuery.BUCKETS_BY_USED]\n      })`,\n    },\n  },\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAKA;AAEA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAEA;AAGA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;ACxEA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAQA;AACA;AAaA;AAEA;;;;;;;;;;;;;AC7HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;;;;;A","sourceRoot":""}