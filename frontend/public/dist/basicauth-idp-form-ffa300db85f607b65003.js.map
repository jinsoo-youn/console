{"version":3,"file":"basicauth-idp-form-ffa300db85f607b65003.js","sources":["webpack:///./public/components/cluster-settings/basicauth-idp-form.tsx","webpack:///./public/components/cluster-settings/idp-cafile-input.tsx","webpack:///./public/components/cluster-settings/idp-name-input.tsx","webpack:///./public/components/cluster-settings/index.ts"],"sourcesContent":["import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport * as _ from 'lodash-es';\nimport { ActionGroup, Button } from '@patternfly/react-core';\n\nimport { SecretModel, ConfigMapModel } from '../../models';\nimport { IdentityProvider, k8sCreate, K8sResourceKind, OAuthKind } from '../../module/k8s';\nimport { ButtonBar, PromiseComponent, history, AsyncComponent } from '../utils';\nimport { addIDP, getOAuthResource, redirectToOAuthPage, mockNames } from './';\nimport { IDPNameInput } from './idp-name-input';\nimport { IDPCAFileInput } from './idp-cafile-input';\n\nexport const DroppableFileInput = (props: any) => (\n  <AsyncComponent\n    loader={() => import('../utils/file-input').then((c) => c.DroppableFileInput)}\n    {...props}\n  />\n);\n\nexport class AddBasicAuthPage extends PromiseComponent<{}, AddBasicAuthPageState> {\n  readonly state: AddBasicAuthPageState = {\n    name: 'basic-auth',\n    url: '',\n    caFileContent: '',\n    certFileContent: '',\n    keyFileContent: '',\n    inProgress: false,\n    errorMessage: '',\n  };\n\n  getOAuthResource(): Promise<OAuthKind> {\n    return this.handlePromise(getOAuthResource());\n  }\n\n  createTLSSecret(): Promise<K8sResourceKind> {\n    const { certFileContent, keyFileContent } = this.state;\n    if (!certFileContent) {\n      return Promise.resolve(null);\n    }\n\n    const secret = {\n      apiVersion: 'v1',\n      kind: 'Secret',\n      metadata: {\n        generateName: 'basic-auth-tls-',\n        namespace: 'openshift-config',\n      },\n      stringData: {\n        'tls.crt': certFileContent,\n        'tls.key': keyFileContent,\n      },\n    };\n\n    return this.handlePromise(k8sCreate(SecretModel, secret));\n  }\n\n  createCAConfigMap(): Promise<K8sResourceKind> {\n    const { caFileContent } = this.state;\n    if (!caFileContent) {\n      return Promise.resolve(null);\n    }\n\n    const ca = {\n      apiVersion: 'v1',\n      kind: 'ConfigMap',\n      metadata: {\n        generateName: 'basic-auth-ca-',\n        namespace: 'openshift-config',\n      },\n      data: {\n        'ca.crt': caFileContent,\n      },\n    };\n\n    return this.handlePromise(k8sCreate(ConfigMapModel, ca));\n  }\n\n  addBasicAuthIDP(\n    oauth: OAuthKind,\n    secretName: string,\n    caName: string,\n    dryRun?: boolean,\n  ): Promise<K8sResourceKind> {\n    const { name, url } = this.state;\n    const idp: IdentityProvider = {\n      name,\n      type: 'BasicAuth',\n      mappingMethod: 'claim',\n      basicAuth: {\n        url,\n      },\n    };\n\n    if (caName) {\n      idp.basicAuth.ca = {\n        name: caName,\n      };\n    }\n\n    if (secretName) {\n      idp.basicAuth.tlsClientCert = {\n        name: secretName,\n      };\n      idp.basicAuth.tlsClientKey = {\n        name: secretName,\n      };\n    }\n\n    return this.handlePromise(addIDP(oauth, idp, dryRun));\n  }\n\n  submit: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n    if (_.isEmpty(this.state.keyFileContent) !== _.isEmpty(this.state.certFileContent)) {\n      this.setState({\n        errorMessage: 'Values for Certificate and Key should both be either excluded or provided.',\n      });\n      return;\n    }\n    // Clear any previous errors.\n    this.setState({ errorMessage: '' });\n    this.getOAuthResource().then((oauth: OAuthKind) => {\n      const mockSecret = this.state.certFileContent ? mockNames.secret : '';\n      const mockCA = this.state.caFileContent ? mockNames.ca : '';\n      this.addBasicAuthIDP(oauth, mockSecret, mockCA, true)\n        .then(() => {\n          const promises = [this.createTLSSecret(), this.createCAConfigMap()];\n\n          Promise.all(promises)\n            .then(([tlsSecret, configMap]) => {\n              const caName = configMap ? configMap.metadata.name : '';\n              const secretName = tlsSecret ? tlsSecret.metadata.name : '';\n              return this.addBasicAuthIDP(oauth, secretName, caName);\n            })\n            .then(redirectToOAuthPage);\n        })\n        .catch((err) => {\n          this.setState({ errorMessage: err });\n        });\n    });\n  };\n\n  nameChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  urlChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ url: event.currentTarget.value });\n  };\n\n  caFileChanged = (caFileContent: string) => {\n    this.setState({ caFileContent });\n  };\n\n  certFileChanged = (certFileContent: string) => {\n    this.setState({ certFileContent });\n  };\n\n  keyFileChanged = (keyFileContent: string) => {\n    this.setState({ keyFileContent });\n  };\n\n  render() {\n    const { name, url, caFileContent, certFileContent, keyFileContent } = this.state;\n    const title = 'Add Identity Provider: Basic Authentication';\n    return (\n      <div className=\"co-m-pane__body\">\n        <Helmet>\n          <title>{title}</title>\n        </Helmet>\n        <form onSubmit={this.submit} name=\"form\" className=\"co-m-pane__body-group co-m-pane__form\">\n          <h1 className=\"co-m-pane__heading\">{title}</h1>\n          <p className=\"co-m-pane__explanation\">\n            Basic authentication is a generic backend integration mechanism that allows users to\n            authenticate with credentials validated against a remote identity provider.\n          </p>\n          <IDPNameInput value={name} onChange={this.nameChanged} />\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"url\">\n              URL\n            </label>\n            <input\n              className=\"pf-c-form-control\"\n              type=\"url\"\n              onChange={this.urlChanged}\n              value={url}\n              id=\"url\"\n              aria-describedby=\"idp-url-help\"\n              required\n            />\n            <p className=\"help-block\" id=\"idp-url-help\">\n              The remote URL to connect to.\n            </p>\n          </div>\n          <IDPCAFileInput value={caFileContent} onChange={this.caFileChanged} />\n          <div className=\"form-group\">\n            <DroppableFileInput\n              onChange={this.certFileChanged}\n              inputFileData={certFileContent}\n              id=\"cert-file-input\"\n              label=\"Certificate\"\n              hideContents\n              inputFieldHelpText=\"PEM-encoded TLS client certificate to present when connecting to the server.\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <DroppableFileInput\n              onChange={this.keyFileChanged}\n              inputFileData={keyFileContent}\n              id=\"key-file-input\"\n              label=\"Key\"\n              hideContents\n              inputFieldHelpText=\"PEM-encoded TLS private key for the client certificate. Required if Certificate is specified.\"\n            />\n          </div>\n          <ButtonBar errorMessage={this.state.errorMessage} inProgress={this.state.inProgress}>\n            <ActionGroup className=\"pf-c-form\">\n              <Button type=\"submit\" variant=\"primary\" data-test-id=\"add-idp\">\n                Add\n              </Button>\n              <Button type=\"button\" variant=\"secondary\" onClick={history.goBack}>\n                Cancel\n              </Button>\n            </ActionGroup>\n          </ButtonBar>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport type AddBasicAuthPageState = {\n  name: string;\n  url: string;\n  caFileContent: string;\n  certFileContent: string;\n  keyFileContent: string;\n  inProgress: boolean;\n  errorMessage: string;\n};\n","import * as React from 'react';\nimport { AsyncComponent } from '../utils';\n\nconst DroppableFileInput = (props: any) => (\n  <AsyncComponent\n    loader={() => import('../utils/file-input').then((c) => c.DroppableFileInput)}\n    {...props}\n  />\n);\n\nexport const IDPCAFileInput: React.FC<IDPCAFileInputProps> = ({\n  value,\n  onChange,\n  isRequired = false,\n}) => (\n  <div className=\"form-group\">\n    <DroppableFileInput\n      onChange={onChange}\n      inputFileData={value}\n      id=\"idp-file-input\"\n      label=\"CA File\"\n      isRequired={isRequired}\n      hideContents\n    />\n  </div>\n);\n\ntype IDPCAFileInputProps = {\n  value: string;\n  onChange: (value: string) => void;\n  isRequired?: boolean;\n};\n","import * as React from 'react';\n\nexport const IDPNameInput: React.FC<IDPNameInputProps> = ({ value, onChange }) => (\n  <div className=\"form-group\">\n    <label className=\"control-label co-required\" htmlFor=\"idp-name\">\n      Name\n    </label>\n    <input\n      className=\"pf-c-form-control\"\n      type=\"text\"\n      onChange={onChange}\n      value={value}\n      aria-describedby=\"idp-name-help\"\n      id=\"idp-name\"\n      required\n    />\n    <p className=\"help-block\" id=\"idp-name-help\">\n      Unique name of the new identity provider. This cannot be changed later.\n    </p>\n  </div>\n);\n\ntype IDPNameInputProps = {\n  value: string;\n  onChange: React.ReactEventHandler<HTMLInputElement>;\n};\n","import * as _ from 'lodash-es';\n\nimport { OAuthModel } from '../../models';\nimport { IdentityProvider, k8sGet, k8sPatch, OAuthKind } from '../../module/k8s';\nimport { history, resourcePathFromModel } from '../utils';\nimport { dryRunOpt } from '@console/dev-console/src/utils/shared-submit-utils';\n\n// The name of the cluster-scoped OAuth configuration resource.\nconst OAUTH_RESOURCE_NAME = 'cluster';\n\nexport const getOAuthResource = (): Promise<OAuthKind> => k8sGet(OAuthModel, OAUTH_RESOURCE_NAME);\n\nexport const addIDP = (\n  oauth: OAuthKind,\n  idp: IdentityProvider,\n  dryRun?: boolean,\n): Promise<OAuthKind> => {\n  const patch = _.isEmpty(oauth.spec.identityProviders)\n    ? { op: 'add', path: '/spec/identityProviders', value: [idp] }\n    : { op: 'add', path: '/spec/identityProviders/-', value: idp };\n  return k8sPatch(OAuthModel, oauth, [patch], dryRun ? dryRunOpt : {});\n};\n\nexport const redirectToOAuthPage = () => {\n  const path = resourcePathFromModel(OAuthModel, OAUTH_RESOURCE_NAME);\n  history.push(path);\n};\n\nexport const mockNames = {\n  secret: 'secret-name',\n  ca: 'ca-name',\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAmFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAqEA;AAvMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAqDA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAGA;AASA;AAIA;AACA;AACA;AASA;AACA;AASA;AACA;AACA;AAGA;AAQA;AACA;;;;;;;;;;;;;ACrOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAOA;AAMA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAGA;AASA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;A","sourceRoot":""}