{"version":3,"file":"service-monitor-5f5d9e9ff84f138ada44.js","sources":["webpack:///./public/components/service-monitor.jsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { ListPage, Table, TableRow, TableData } from './factory';\nimport { Kebab, ResourceKebab, ResourceLink, Selector } from './utils';\nimport { ServiceMonitorModel } from '../models';\nimport { referenceForModel } from '../module/k8s';\n\nconst { Edit, Delete } = Kebab.factory;\nconst menuActions = [Edit, Delete];\n\nconst namespaceSelectorLinks = ({ spec }) => {\n  const namespaces = _.get(spec, 'namespaceSelector.matchNames', []);\n  if (namespaces.length) {\n    return _.map(namespaces, (n) => (\n      <span key={n}>\n        <ResourceLink kind=\"Namespace\" name={n} title={n} />\n        &nbsp;&nbsp;\n      </span>\n    ));\n  }\n  return <span className=\"text-muted\">--</span>;\n};\n\nconst serviceSelectorLinks = ({ spec }) => {\n  const namespaces = _.get(spec, 'namespaceSelector.matchNames', []);\n  if (namespaces.length) {\n    return _.map(namespaces, (n) => (\n      <span key={n}>\n        <Selector selector={spec.selector} kind=\"Service\" namespace={n} />\n        &nbsp;&nbsp;\n      </span>\n    ));\n  }\n  return <Selector selector={spec.selector} kind=\"Service\" />;\n};\n\nconst tableColumnClasses = [\n  classNames('col-md-3', 'col-sm-3', 'col-xs-6'),\n  classNames('col-md-3', 'col-sm-3', 'col-xs-6'),\n  classNames('col-md-3', 'col-sm-6', 'hidden-xs'),\n  classNames('col-md-3', 'hidden-sm', 'hidden-xs'),\n  Kebab.columnClass,\n];\n\nconst ServiceMonitorTableRow = ({ obj: sm, index, key, style }) => {\n  const { metadata } = sm;\n  return (\n    <TableRow id={sm.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={referenceForModel(ServiceMonitorModel)}\n          name={metadata.name}\n          namespace={metadata.namespace}\n          title={metadata.uid}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        <ResourceLink kind=\"Namespace\" name={metadata.namespace} title={metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>{serviceSelectorLinks(sm)}</TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <p>{namespaceSelectorLinks(sm)}</p>\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ResourceKebab\n          actions={menuActions}\n          kind={referenceForModel(ServiceMonitorModel)}\n          resource={sm}\n        />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst ServiceMonitorTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Service Selector',\n      sortField: 'spec.selector',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Monitoring Namespace',\n      sortField: 'spec.namespaceSelector',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[4] },\n    },\n  ];\n};\nServiceMonitorTableHeader.displayName = 'ServiceMonitorTableHeader';\n\nexport const ServiceMonitorsList = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Service Monitors\"\n    Header={ServiceMonitorTableHeader}\n    Row={ServiceMonitorTableRow}\n    virtualize\n  />\n);\n\nexport const ServiceMonitorsPage = (props) => (\n  <ListPage\n    {...props}\n    canCreate={true}\n    kind={referenceForModel(ServiceMonitorModel)}\n    ListComponent={ServiceMonitorsList}\n  />\n);\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;;;;;A","sourceRoot":""}